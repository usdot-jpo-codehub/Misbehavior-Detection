# -*- coding: UTF-8 -*-
# Code automatically generated by pycrate_asn1c

from pycrate_asn1rt.utils            import *
from pycrate_asn1rt.err              import *
from pycrate_asn1rt.glob             import make_GLOBAL, GLOBAL
from pycrate_asn1rt.dictobj          import ASN1Dict
from pycrate_asn1rt.refobj           import *
from pycrate_asn1rt.setobj           import *
from pycrate_asn1rt.asnobj_basic     import *
from pycrate_asn1rt.asnobj_str       import *
from pycrate_asn1rt.asnobj_construct import *
from pycrate_asn1rt.asnobj_class     import *
from pycrate_asn1rt.asnobj_ext       import *
from pycrate_asn1rt.init             import init_modules

class AS_PROTOCOL_for_legacy_mode:

    _name_  = 'AS-PROTOCOL-for-legacy-mode'
    _oid_   = [0, 0, 20, 128, 0, 2, 2]
    
    _obj_ = [
        'maxSourceDescriptor',
        'maxTerminalDescriptor',
        'maxFonts',
        'maxPassword',
        'maxFaceName',
        'maxTitleString',
        'maxInputEvents',
        'BitString8',
        'BitString16',
        'BitString32',
        'Coordinate8',
        'Coordinate16',
        'Integer4',
        'Integer8',
        'Integer12',
        'Integer16',
        'Integer32',
        'Boolean16',
        'UserID',
        'ShareID',
        'WindowID',
        'T50String',
        'ASString',
        'BitmapCompressionCapabilityFlags',
        'BoundsOrderFlags',
        'ControlCapabilityFlags',
        'ControlOrderFlags',
        'ExtraOrderFlags',
        'ExtraTextFlags',
        'FontAttributeFlags',
        'KeyboardFlags',
        'OrderCapabilityFlags',
        'PointingDeviceFlags',
        'TextAttributeFlags',
        'TextCapabilityFlags',
        'WindowAttributeFlags',
        'ApplicationAction',
        'BackgroundMixMode',
        'BitmapData',
        'Brush',
        'BrushHatch',
        'BrushStyle',
        'Color',
        'ColorQuad',
        'ColorPointerAttribute',
        'CompressedBitmapData',
        'ControlAction',
        'ControlPriority',
        'Coordinate',
        'DesktopSaveAction',
        'FontAttribute',
        'FontCodePage',
        'HatchStyle',
        'InputMessageType',
        'MediatedControlAction',
        'MonoPointerAttribute',
        'OSMajorType',
        'OSMinorType',
        'PDUType',
        'PDUType2',
        'PDUTypeFlow',
        'Pen',
        'PenStyle',
        'Point16',
        'PointerMessageType',
        'PrimaryOrderType',
        'Rectangle16',
        'RemoteShareAction',
        'RemoteShareDenial',
        'ROP2',
        'ROP3',
        'SecondaryOrderType',
        'StreamID',
        'SynchronizeMessageType',
        'SystemPointerType',
        'UpdateType',
        'WindowActivationAction',
        'WindowAttribute',
        'WindowListMessageType',
        'WindowTitle',
        'CapabilitySetType',
        'GeneralCapabilitySet',
        'BitmapCapabilitySet',
        'OrderCapabilitySet',
        'BitmapCacheCapabilitySet',
        'ColorCacheCapabilitySet',
        'ActivationCapabilitySet',
        'ControlCapabilitySet',
        'PointerCapabilitySet',
        'ShareCapabilitySet',
        'NonStandardCapabilitySet',
        'CombinedCapabilities',
        'UpdateCapabilitySet',
        'InputEvent',
        'KeyboardEvent',
        'PointingDeviceEvent',
        'SynchronizeEvent',
        'PrimaryOrderHeader',
        'SecondaryOrderHeader',
        'ShareControlHeader',
        'ShareDataHeader',
        'DestinationBltOrder',
        'PatternBltOrder',
        'ScreenBltOrder',
        'CacheBitmapOrder',
        'CacheColorTableOrder',
        'MemoryBltOrder',
        'MemoryThreeWayBltOrder',
        'TextOrder',
        'ExtendedTextOrder',
        'FrameOrder',
        'RectangleOrder',
        'OpaqueRectangleOrder',
        'LineOrder',
        'DesktopSaveOrder',
        'DesktopOriginOrder',
        'PrimaryOrder',
        'SecondaryOrder',
        'UpdateOrder',
        'ApplicationPDU',
        'ConfirmActivePDU',
        'ControlPDU',
        'DeactivateAllPDU',
        'DeactivateOtherPDU',
        'DeactivateSelfPDU',
        'DemandActivePDU',
        'FlowPDU',
        'FontPDU',
        'InputPDU',
        'MediatedControlPDU',
        'PointerPDU',
        'RemoteSharePDU',
        'RequestActivePDU',
        'SynchronizePDU',
        'UpdateBitmapPDU',
        'UpdateCapabilityPDU',
        'UpdateOrdersPDU',
        'UpdatePalettePDU',
        'UpdateSynchronizePDU',
        'WindowActivationPDU',
        'WindowListPDU',
        'SharePDU',
        ]
    _type_ = [
        'BitString8',
        'BitString16',
        'BitString32',
        'Coordinate8',
        'Coordinate16',
        'Integer4',
        'Integer8',
        'Integer12',
        'Integer16',
        'Integer32',
        'Boolean16',
        'UserID',
        'ShareID',
        'WindowID',
        'T50String',
        'ASString',
        'BitmapCompressionCapabilityFlags',
        'BoundsOrderFlags',
        'ControlCapabilityFlags',
        'ControlOrderFlags',
        'ExtraOrderFlags',
        'ExtraTextFlags',
        'FontAttributeFlags',
        'KeyboardFlags',
        'OrderCapabilityFlags',
        'PointingDeviceFlags',
        'TextAttributeFlags',
        'TextCapabilityFlags',
        'WindowAttributeFlags',
        'ApplicationAction',
        'BackgroundMixMode',
        'BitmapData',
        'Brush',
        'BrushHatch',
        'BrushStyle',
        'Color',
        'ColorQuad',
        'ColorPointerAttribute',
        'CompressedBitmapData',
        'ControlAction',
        'ControlPriority',
        'Coordinate',
        'DesktopSaveAction',
        'FontAttribute',
        'FontCodePage',
        'HatchStyle',
        'InputMessageType',
        'MediatedControlAction',
        'MonoPointerAttribute',
        'OSMajorType',
        'OSMinorType',
        'PDUType',
        'PDUType2',
        'PDUTypeFlow',
        'Pen',
        'PenStyle',
        'Point16',
        'PointerMessageType',
        'PrimaryOrderType',
        'Rectangle16',
        'RemoteShareAction',
        'RemoteShareDenial',
        'ROP2',
        'ROP3',
        'SecondaryOrderType',
        'StreamID',
        'SynchronizeMessageType',
        'SystemPointerType',
        'UpdateType',
        'WindowActivationAction',
        'WindowAttribute',
        'WindowListMessageType',
        'WindowTitle',
        'CapabilitySetType',
        'GeneralCapabilitySet',
        'BitmapCapabilitySet',
        'OrderCapabilitySet',
        'BitmapCacheCapabilitySet',
        'ColorCacheCapabilitySet',
        'ActivationCapabilitySet',
        'ControlCapabilitySet',
        'PointerCapabilitySet',
        'ShareCapabilitySet',
        'NonStandardCapabilitySet',
        'CombinedCapabilities',
        'UpdateCapabilitySet',
        'InputEvent',
        'KeyboardEvent',
        'PointingDeviceEvent',
        'SynchronizeEvent',
        'PrimaryOrderHeader',
        'SecondaryOrderHeader',
        'ShareControlHeader',
        'ShareDataHeader',
        'DestinationBltOrder',
        'PatternBltOrder',
        'ScreenBltOrder',
        'CacheBitmapOrder',
        'CacheColorTableOrder',
        'MemoryBltOrder',
        'MemoryThreeWayBltOrder',
        'TextOrder',
        'ExtendedTextOrder',
        'FrameOrder',
        'RectangleOrder',
        'OpaqueRectangleOrder',
        'LineOrder',
        'DesktopSaveOrder',
        'DesktopOriginOrder',
        'PrimaryOrder',
        'SecondaryOrder',
        'UpdateOrder',
        'ApplicationPDU',
        'ConfirmActivePDU',
        'ControlPDU',
        'DeactivateAllPDU',
        'DeactivateOtherPDU',
        'DeactivateSelfPDU',
        'DemandActivePDU',
        'FlowPDU',
        'FontPDU',
        'InputPDU',
        'MediatedControlPDU',
        'PointerPDU',
        'RemoteSharePDU',
        'RequestActivePDU',
        'SynchronizePDU',
        'UpdateBitmapPDU',
        'UpdateCapabilityPDU',
        'UpdateOrdersPDU',
        'UpdatePalettePDU',
        'UpdateSynchronizePDU',
        'WindowActivationPDU',
        'WindowListPDU',
        'SharePDU',
        ]
    _set_ = [
        ]
    _val_ = [
        'maxSourceDescriptor',
        'maxTerminalDescriptor',
        'maxFonts',
        'maxPassword',
        'maxFaceName',
        'maxTitleString',
        'maxInputEvents',
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< maxSourceDescriptor >-----#
    maxSourceDescriptor = INT(name='maxSourceDescriptor', mode=MODE_VALUE)
    maxSourceDescriptor._val = 48
    
    #-----< maxTerminalDescriptor >-----#
    maxTerminalDescriptor = INT(name='maxTerminalDescriptor', mode=MODE_VALUE)
    maxTerminalDescriptor._val = 16
    
    #-----< maxFonts >-----#
    maxFonts = INT(name='maxFonts', mode=MODE_VALUE)
    maxFonts._val = 700
    
    #-----< maxPassword >-----#
    maxPassword = INT(name='maxPassword', mode=MODE_VALUE)
    maxPassword._val = 9
    
    #-----< maxFaceName >-----#
    maxFaceName = INT(name='maxFaceName', mode=MODE_VALUE)
    maxFaceName._val = 32
    
    #-----< maxTitleString >-----#
    maxTitleString = INT(name='maxTitleString', mode=MODE_VALUE)
    maxTitleString._val = 50
    
    #-----< maxInputEvents >-----#
    maxInputEvents = INT(name='maxInputEvents', mode=MODE_VALUE)
    maxInputEvents._val = 50
    
    #-----< BitString8 >-----#
    BitString8 = BIT_STR(name='BitString8', mode=MODE_TYPE)
    BitString8._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=7)], ev=None, er=[])
    
    #-----< BitString16 >-----#
    BitString16 = BIT_STR(name='BitString16', mode=MODE_TYPE)
    BitString16._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< BitString32 >-----#
    BitString32 = BIT_STR(name='BitString32', mode=MODE_TYPE)
    BitString32._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=31)], ev=None, er=[])
    
    #-----< Coordinate8 >-----#
    Coordinate8 = INT(name='Coordinate8', mode=MODE_TYPE)
    Coordinate8._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=127, ub=128)], ev=None, er=[])
    
    #-----< Coordinate16 >-----#
    Coordinate16 = INT(name='Coordinate16', mode=MODE_TYPE)
    Coordinate16._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=32767, ub=32768)], ev=None, er=[])
    
    #-----< Integer4 >-----#
    Integer4 = INT(name='Integer4', mode=MODE_TYPE)
    Integer4._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< Integer8 >-----#
    Integer8 = INT(name='Integer8', mode=MODE_TYPE)
    Integer8._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< Integer12 >-----#
    Integer12 = INT(name='Integer12', mode=MODE_TYPE)
    Integer12._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=4095)], ev=None, er=[])
    
    #-----< Integer16 >-----#
    Integer16 = INT(name='Integer16', mode=MODE_TYPE)
    Integer16._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< Integer32 >-----#
    Integer32 = INT(name='Integer32', mode=MODE_TYPE)
    Integer32._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=4294967295)], ev=None, er=[])
    
    #-----< Boolean16 >-----#
    Boolean16 = INT(name='Boolean16', mode=MODE_TYPE)
    Boolean16._cont = ASN1Dict([('false', 0), ('true', 1)])
    Boolean16._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< UserID >-----#
    UserID = INT(name='UserID', mode=MODE_TYPE, typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    
    #-----< ShareID >-----#
    ShareID = INT(name='ShareID', mode=MODE_TYPE, typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer32')))
    
    #-----< WindowID >-----#
    WindowID = INT(name='WindowID', mode=MODE_TYPE, typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer32')))
    
    #-----< T50String >-----#
    T50String = OCT_STR(name='T50String', mode=MODE_TYPE)
    T50String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< ASString >-----#
    ASString = OCT_STR(name='ASString', mode=MODE_TYPE)
    ASString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< BitmapCompressionCapabilityFlags >-----#
    BitmapCompressionCapabilityFlags = BIT_STR(name='BitmapCompressionCapabilityFlags', mode=MODE_TYPE)
    BitmapCompressionCapabilityFlags._cont = ASN1Dict([('bitmapCompressionSupported', 0)])
    BitmapCompressionCapabilityFlags._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< BoundsOrderFlags >-----#
    BoundsOrderFlags = BIT_STR(name='BoundsOrderFlags', mode=MODE_TYPE)
    BoundsOrderFlags._cont = ASN1Dict([('absoluteLeftPresent', 0), ('absoluteTopPresent', 1), ('absoluteRightPresent', 2), ('absoluteBottomPresent', 3), ('deltaLeftPresent', 4), ('deltaTopPresent', 5), ('deltaRightPresent', 6), ('deltaBottomPresent', 7)])
    BoundsOrderFlags._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=7)], ev=None, er=[])
    
    #-----< ControlCapabilityFlags >-----#
    ControlCapabilityFlags = BIT_STR(name='ControlCapabilityFlags', mode=MODE_TYPE)
    ControlCapabilityFlags._cont = ASN1Dict([('allowMediatedControl', 0)])
    ControlCapabilityFlags._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< ControlOrderFlags >-----#
    ControlOrderFlags = BIT_STR(name='ControlOrderFlags', mode=MODE_TYPE)
    ControlOrderFlags._cont = ASN1Dict([('standard', 0), ('secondary', 1), ('bounds', 2), ('typeChange', 3), ('deltaCoordinates', 4)])
    ControlOrderFlags._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=7)], ev=None, er=[])
    
    #-----< ExtraOrderFlags >-----#
    ExtraOrderFlags = BIT_STR(name='ExtraOrderFlags', mode=MODE_TYPE)
    ExtraOrderFlags._cont = ASN1Dict([('secondary', 3)])
    ExtraOrderFlags._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< ExtraTextFlags >-----#
    ExtraTextFlags = BIT_STR(name='ExtraTextFlags', mode=MODE_TYPE)
    ExtraTextFlags._cont = ASN1Dict([('opaqueRectangle', 1), ('clipToRectangle', 2), ('deltaXPresent', 15)])
    ExtraTextFlags._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< FontAttributeFlags >-----#
    FontAttributeFlags = BIT_STR(name='FontAttributeFlags', mode=MODE_TYPE)
    FontAttributeFlags._cont = ASN1Dict([('fixedPitch', 0), ('fixedSize', 1)])
    FontAttributeFlags._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< KeyboardFlags >-----#
    KeyboardFlags = BIT_STR(name='KeyboardFlags', mode=MODE_TYPE)
    KeyboardFlags._cont = ASN1Dict([('right', 0), ('quiet', 12), ('down', 14), ('release', 15)])
    KeyboardFlags._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< OrderCapabilityFlags >-----#
    OrderCapabilityFlags = BIT_STR(name='OrderCapabilityFlags', mode=MODE_TYPE)
    OrderCapabilityFlags._cont = ASN1Dict([('negotiateOrderSupport', 1), ('cannotReceiveOrders', 2)])
    OrderCapabilityFlags._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< PointingDeviceFlags >-----#
    PointingDeviceFlags = BIT_STR(name='PointingDeviceFlags', mode=MODE_TYPE)
    PointingDeviceFlags._cont = ASN1Dict([('move', 11), ('button1', 12), ('button2', 13), ('button3', 14), ('down', 15)])
    PointingDeviceFlags._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< TextAttributeFlags >-----#
    TextAttributeFlags = BIT_STR(name='TextAttributeFlags', mode=MODE_TYPE)
    TextAttributeFlags._cont = ASN1Dict([('italic', 2), ('underline', 3), ('strikeout', 4), ('useBaselineStart', 8)])
    TextAttributeFlags._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< TextCapabilityFlags >-----#
    TextCapabilityFlags = BIT_STR(name='TextCapabilityFlags', mode=MODE_TYPE)
    TextCapabilityFlags._cont = ASN1Dict([('checkFontAspect', 0), ('allowDeltaXSimulation', 5), ('checkFontSignatures', 7), ('useBaselineStart', 9)])
    TextCapabilityFlags._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< WindowAttributeFlags >-----#
    WindowAttributeFlags = BIT_STR(name='WindowAttributeFlags', mode=MODE_TYPE)
    WindowAttributeFlags._cont = ASN1Dict([('minimized', 0), ('taggable', 1), ('hosted', 2), ('shadow', 3), ('local', 4), ('topmost', 5), ('windowManagerMinimized', 16), ('windowManagerInvisible', 17)])
    WindowAttributeFlags._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=31)], ev=None, er=[])
    
    #-----< ApplicationAction >-----#
    ApplicationAction = INT(name='ApplicationAction', mode=MODE_TYPE)
    ApplicationAction._cont = ASN1Dict([('notifyHostedApplications', 1), ('unhostApplication', 2)])
    ApplicationAction._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< BackgroundMixMode >-----#
    BackgroundMixMode = INT(name='BackgroundMixMode', mode=MODE_TYPE)
    BackgroundMixMode._cont = ASN1Dict([('transparent', 1), ('opaque', 2)])
    BackgroundMixMode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< BitmapData >-----#
    BitmapData = CHOICE(name='BitmapData', mode=MODE_TYPE)
    _BitmapData_uncompressedBitmapData = OCT_STR(name='uncompressedBitmapData', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _BitmapData_compressedBitmapData = SEQ(name='compressedBitmapData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'CompressedBitmapData')))
    BitmapData._cont = ASN1Dict([
        ('uncompressedBitmapData', _BitmapData_uncompressedBitmapData),
        ('compressedBitmapData', _BitmapData_compressedBitmapData),
        ])
    BitmapData._ext = None
    
    #-----< Brush >-----#
    Brush = SEQ(name='Brush', mode=MODE_TYPE)
    _Brush_originX = INT(name='originX', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')), opt=True)
    _Brush_originY = INT(name='originY', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')), opt=True)
    _Brush_style = INT(name='style', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'BrushStyle')), opt=True)
    _Brush_hatch = CHOICE(name='hatch', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'BrushHatch')), opt=True)
    _Brush_pattern = OCT_STR(name='pattern', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Brush_pattern._const_sz = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    Brush._cont = ASN1Dict([
        ('originX', _Brush_originX),
        ('originY', _Brush_originY),
        ('style', _Brush_style),
        ('hatch', _Brush_hatch),
        ('pattern', _Brush_pattern),
        ])
    Brush._ext = None
    
    #-----< BrushHatch >-----#
    BrushHatch = CHOICE(name='BrushHatch', mode=MODE_TYPE)
    _BrushHatch_style = INT(name='style', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'HatchStyle')))
    _BrushHatch_patternZero = INT(name='patternZero', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    BrushHatch._cont = ASN1Dict([
        ('style', _BrushHatch_style),
        ('patternZero', _BrushHatch_patternZero),
        ])
    BrushHatch._ext = None
    
    #-----< BrushStyle >-----#
    BrushStyle = INT(name='BrushStyle', mode=MODE_TYPE)
    BrushStyle._cont = ASN1Dict([('solid', 0), ('null', 1), ('hatched', 2), ('pattern', 3)])
    BrushStyle._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< Color >-----#
    Color = SEQ(name='Color', mode=MODE_TYPE)
    _Color_red = INT(name='red', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    _Color_green = INT(name='green', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    _Color_blue = INT(name='blue', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    Color._cont = ASN1Dict([
        ('red', _Color_red),
        ('green', _Color_green),
        ('blue', _Color_blue),
        ])
    Color._ext = None
    
    #-----< ColorQuad >-----#
    ColorQuad = SEQ(name='ColorQuad', mode=MODE_TYPE)
    _ColorQuad_blue = INT(name='blue', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    _ColorQuad_green = INT(name='green', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    _ColorQuad_red = INT(name='red', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    _ColorQuad_pad1octet = INT(name='pad1octet', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    ColorQuad._cont = ASN1Dict([
        ('blue', _ColorQuad_blue),
        ('green', _ColorQuad_green),
        ('red', _ColorQuad_red),
        ('pad1octet', _ColorQuad_pad1octet),
        ])
    ColorQuad._ext = None
    
    #-----< ColorPointerAttribute >-----#
    ColorPointerAttribute = SEQ(name='ColorPointerAttribute', mode=MODE_TYPE)
    _ColorPointerAttribute_cacheIndex = INT(name='cacheIndex', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _ColorPointerAttribute_hotSpot = SEQ(name='hotSpot', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Point16')))
    _ColorPointerAttribute_width = INT(name='width', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _ColorPointerAttribute_height = INT(name='height', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _ColorPointerAttribute_lengthANDMAsk = INT(name='lengthANDMAsk', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _ColorPointerAttribute_lengthXORMAsk = INT(name='lengthXORMAsk', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _ColorPointerAttribute_colorPointerData = OCT_STR(name='colorPointerData', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ColorPointerAttribute._cont = ASN1Dict([
        ('cacheIndex', _ColorPointerAttribute_cacheIndex),
        ('hotSpot', _ColorPointerAttribute_hotSpot),
        ('width', _ColorPointerAttribute_width),
        ('height', _ColorPointerAttribute_height),
        ('lengthANDMAsk', _ColorPointerAttribute_lengthANDMAsk),
        ('lengthXORMAsk', _ColorPointerAttribute_lengthXORMAsk),
        ('colorPointerData', _ColorPointerAttribute_colorPointerData),
        ])
    ColorPointerAttribute._ext = None
    
    #-----< CompressedBitmapData >-----#
    CompressedBitmapData = SEQ(name='CompressedBitmapData', mode=MODE_TYPE)
    _CompressedBitmapData_pad2octets = INT(name='pad2octets', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _CompressedBitmapData_pad2octets._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _CompressedBitmapData_mainBodySize = INT(name='mainBodySize', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _CompressedBitmapData_rowSize = INT(name='rowSize', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _CompressedBitmapData_uncompressedSize = INT(name='uncompressedSize', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _CompressedBitmapData_compressedBitmap = OCT_STR(name='compressedBitmap', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    CompressedBitmapData._cont = ASN1Dict([
        ('pad2octets', _CompressedBitmapData_pad2octets),
        ('mainBodySize', _CompressedBitmapData_mainBodySize),
        ('rowSize', _CompressedBitmapData_rowSize),
        ('uncompressedSize', _CompressedBitmapData_uncompressedSize),
        ('compressedBitmap', _CompressedBitmapData_compressedBitmap),
        ])
    CompressedBitmapData._ext = None
    
    #-----< ControlAction >-----#
    ControlAction = INT(name='ControlAction', mode=MODE_TYPE)
    ControlAction._cont = ASN1Dict([('requestControl', 1), ('detach', 3), ('grantControl', 2), ('cooperate', 4)])
    ControlAction._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< ControlPriority >-----#
    ControlPriority = INT(name='ControlPriority', mode=MODE_TYPE)
    ControlPriority._cont = ASN1Dict([('always', 1), ('never', 2), ('confirm', 3)])
    ControlPriority._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< Coordinate >-----#
    Coordinate = CHOICE(name='Coordinate', mode=MODE_TYPE)
    _Coordinate_absolute = INT(name='absolute', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate16')))
    _Coordinate_delta = INT(name='delta', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate8')))
    Coordinate._cont = ASN1Dict([
        ('absolute', _Coordinate_absolute),
        ('delta', _Coordinate_delta),
        ])
    Coordinate._ext = None
    
    #-----< DesktopSaveAction >-----#
    DesktopSaveAction = INT(name='DesktopSaveAction', mode=MODE_TYPE)
    DesktopSaveAction._cont = ASN1Dict([('desktopSave', 0), ('desktopRestore', 1)])
    DesktopSaveAction._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< FontAttribute >-----#
    FontAttribute = SEQ(name='FontAttribute', mode=MODE_TYPE)
    _FontAttribute_faceName = OCT_STR(name='faceName', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'T50String')))
    _FontAttribute_faceName._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    _FontAttribute_fontFlags = BIT_STR(name='fontFlags', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'FontAttributeFlags')))
    _FontAttribute_averageWidth = INT(name='averageWidth', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _FontAttribute_height = INT(name='height', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _FontAttribute_aspectX = INT(name='aspectX', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _FontAttribute_aspectY = INT(name='aspectY', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _FontAttribute_signature1 = INT(name='signature1', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    _FontAttribute_signature2 = INT(name='signature2', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    _FontAttribute_signature3 = INT(name='signature3', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _FontAttribute_codePage = INT(name='codePage', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'FontCodePage')))
    _FontAttribute_ascent = INT(name='ascent', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    FontAttribute._cont = ASN1Dict([
        ('faceName', _FontAttribute_faceName),
        ('fontFlags', _FontAttribute_fontFlags),
        ('averageWidth', _FontAttribute_averageWidth),
        ('height', _FontAttribute_height),
        ('aspectX', _FontAttribute_aspectX),
        ('aspectY', _FontAttribute_aspectY),
        ('signature1', _FontAttribute_signature1),
        ('signature2', _FontAttribute_signature2),
        ('signature3', _FontAttribute_signature3),
        ('codePage', _FontAttribute_codePage),
        ('ascent', _FontAttribute_ascent),
        ])
    FontAttribute._ext = None
    
    #-----< FontCodePage >-----#
    FontCodePage = INT(name='FontCodePage', mode=MODE_TYPE)
    FontCodePage._cont = ASN1Dict([('allCodePoints', 0), ('coreCodePoints', 255)])
    FontCodePage._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< HatchStyle >-----#
    HatchStyle = INT(name='HatchStyle', mode=MODE_TYPE)
    HatchStyle._cont = ASN1Dict([('horizontal', 0), ('vertical', 1), ('forward', 2), ('backward', 3), ('cross', 4), ('diagonal', 5)])
    HatchStyle._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< InputMessageType >-----#
    InputMessageType = INT(name='InputMessageType', mode=MODE_TYPE)
    InputMessageType._cont = ASN1Dict([('inputSynchronize', 0), ('inputCodePoint', 1), ('inputVirtualKey', 2), ('inputPointingDevice', 32769)])
    InputMessageType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< MediatedControlAction >-----#
    MediatedControlAction = INT(name='MediatedControlAction', mode=MODE_TYPE)
    MediatedControlAction._cont = ASN1Dict([('takeControlRequest', 1), ('passControlRequest', 2), ('detachRequest', 3), ('confirmTakeResponse', 5), ('denyTakeResponse', 6), ('confirmDetachResponse', 7), ('denyDetachResponse', 8), ('denyPassResponse', 9), ('remoteDetachRequest', 10), ('denyRemoteDetachRequest', 11)])
    MediatedControlAction._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< MonoPointerAttribute >-----#
    MonoPointerAttribute = SEQ(name='MonoPointerAttribute', mode=MODE_TYPE)
    _MonoPointerAttribute_hotSpot = SEQ(name='hotSpot', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Point16')))
    _MonoPointerAttribute_width = INT(name='width', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _MonoPointerAttribute_height = INT(name='height', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _MonoPointerAttribute_lengthPointerData = INT(name='lengthPointerData', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _MonoPointerAttribute_monoPointerData = OCT_STR(name='monoPointerData', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    MonoPointerAttribute._cont = ASN1Dict([
        ('hotSpot', _MonoPointerAttribute_hotSpot),
        ('width', _MonoPointerAttribute_width),
        ('height', _MonoPointerAttribute_height),
        ('lengthPointerData', _MonoPointerAttribute_lengthPointerData),
        ('monoPointerData', _MonoPointerAttribute_monoPointerData),
        ])
    MonoPointerAttribute._ext = None
    
    #-----< OSMajorType >-----#
    OSMajorType = INT(name='OSMajorType', mode=MODE_TYPE)
    OSMajorType._cont = ASN1Dict([('unspecified', 0), ('windows', 1), ('oS2', 2), ('macintosh', 3), ('unix', 4)])
    OSMajorType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< OSMinorType >-----#
    OSMinorType = INT(name='OSMinorType', mode=MODE_TYPE)
    OSMinorType._cont = ASN1Dict([('unspecified', 0), ('windows-31x', 1), ('windows-95', 2), ('windows-NT', 3), ('oOS2-V21', 4), ('power-pc', 5), ('macintosh', 6), ('native-XServer', 7), ('pseudo-XServer', 8)])
    OSMinorType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< PDUType >-----#
    PDUType = INT(name='PDUType', mode=MODE_TYPE)
    PDUType._cont = ASN1Dict([('confirmActivePDU', 3), ('dataPDU', 7), ('deactivateAllPDU', 6), ('deactivateOtherPDU', 4), ('deactivateSelfPDU', 5), ('demandActivePDU', 1), ('requestActivePDU', 2)])
    PDUType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< PDUType2 >-----#
    PDUType2 = INT(name='PDUType2', mode=MODE_TYPE)
    PDUType2._cont = ASN1Dict([('application', 25), ('control', 20), ('font', 11), ('input', 28), ('mediatedControl', 29), ('pointer', 27), ('remoteShare', 30), ('synchronize', 31), ('update', 2), ('updateCapability', 32), ('windowActivation', 23), ('windowList', 24)])
    PDUType2._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< PDUTypeFlow >-----#
    PDUTypeFlow = INT(name='PDUTypeFlow', mode=MODE_TYPE)
    PDUTypeFlow._cont = ASN1Dict([('flowResponsePDU', 66), ('flowStopPDU', 67), ('flowTestPDU', 65)])
    PDUTypeFlow._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< Pen >-----#
    Pen = SEQ(name='Pen', mode=MODE_TYPE)
    _Pen_style = ENUM(name='style', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PenStyle')), opt=True)
    _Pen_width = INT(name='width', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')), opt=True)
    _Pen_width._const_val = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    _Pen_color = SEQ(name='color', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Color')), opt=True)
    Pen._cont = ASN1Dict([
        ('style', _Pen_style),
        ('width', _Pen_width),
        ('color', _Pen_color),
        ])
    Pen._ext = None
    
    #-----< PenStyle >-----#
    PenStyle = ENUM(name='PenStyle', mode=MODE_TYPE)
    PenStyle._cont = ASN1Dict([('solid', 0), ('dashed', 1), ('dotted', 2), ('dash-dot', 3), ('dash-dot-dot', 4), ('null', 5)])
    PenStyle._ext = None
    
    #-----< Point16 >-----#
    Point16 = SEQ(name='Point16', mode=MODE_TYPE)
    _Point16_x = INT(name='x', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate16')))
    _Point16_y = INT(name='y', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate16')))
    Point16._cont = ASN1Dict([
        ('x', _Point16_x),
        ('y', _Point16_y),
        ])
    Point16._ext = None
    
    #-----< PointerMessageType >-----#
    PointerMessageType = INT(name='PointerMessageType', mode=MODE_TYPE)
    PointerMessageType._cont = ASN1Dict([('cachedPointer', 7), ('colorPointer', 6), ('monoPointer', 2), ('pointerPosition', 3), ('systemPointer', 1)])
    PointerMessageType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< PrimaryOrderType >-----#
    PrimaryOrderType = INT(name='PrimaryOrderType', mode=MODE_TYPE)
    PrimaryOrderType._cont = ASN1Dict([('destinationBlt', 0), ('patternBlt', 1), ('screenBlt', 2), ('memoryBlt', 13), ('memoryThreeWayBlt', 14), ('text', 5), ('extendedText', 6), ('frame', 9), ('rectangle', 7), ('line', 8), ('opaqueRectangle', 10), ('desktopSave', 11), ('desktopOrigin', 32)])
    PrimaryOrderType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< Rectangle16 >-----#
    Rectangle16 = SEQ(name='Rectangle16', mode=MODE_TYPE)
    _Rectangle16_left = INT(name='left', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate16')))
    _Rectangle16_top = INT(name='top', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate16')))
    _Rectangle16_right = INT(name='right', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate16')))
    _Rectangle16_bottom = INT(name='bottom', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate16')))
    Rectangle16._cont = ASN1Dict([
        ('left', _Rectangle16_left),
        ('top', _Rectangle16_top),
        ('right', _Rectangle16_right),
        ('bottom', _Rectangle16_bottom),
        ])
    Rectangle16._ext = None
    
    #-----< RemoteShareAction >-----#
    RemoteShareAction = INT(name='RemoteShareAction', mode=MODE_TYPE)
    RemoteShareAction._cont = ASN1Dict([('requestRemoteShare', 1), ('confirmRemoteShare', 2), ('denyRemoteShare', 3)])
    RemoteShareAction._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< RemoteShareDenial >-----#
    RemoteShareDenial = INT(name='RemoteShareDenial', mode=MODE_TYPE)
    RemoteShareDenial._cont = ASN1Dict([('incorrectPassword', 1), ('remoteShareNotEnabled', 2), ('remoteShareInOperationIncoming', 3), ('remoteShareInOperationOutgoing', 4)])
    RemoteShareDenial._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< ROP2 >-----#
    ROP2 = INT(name='ROP2', mode=MODE_TYPE)
    ROP2._cont = ASN1Dict([('r2BLACK', 1), ('r2DPon', 2), ('r2DPna', 3), ('r2Pn', 4), ('r2PDna', 5), ('r2Dn', 6), ('r2DPx', 7), ('r2DPan', 8), ('r2DPa', 9), ('r2DPxn', 10), ('r2D', 11), ('r2DPno', 12), ('r2P', 13), ('r2PDno', 14), ('r2DPo', 15), ('r2WHITE', 16)])
    ROP2._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< ROP3 >-----#
    ROP3 = INT(name='ROP3', mode=MODE_TYPE)
    ROP3._cont = ASN1Dict([('r3BLACK', 0), ('r3DPSoon', 1), ('r3DPSona', 2), ('r3PSon', 3), ('r3SDPona', 4), ('r3DPon', 5), ('r3PDSxnon', 6), ('r3PDSaon', 7), ('r3SDPnaa', 8), ('r3PDSxon', 9), ('r3DPna', 10), ('r3PSDnaon', 11), ('r3SPna', 12), ('r3PDSnaon', 13), ('r3PDSonon', 14), ('r3Pn', 15), ('r3PDSona', 16), ('r3DSon', 17), ('r3SDPxnon', 18), ('r3SDPaon', 19), ('r3DPSxnon', 20), ('r3DPSaon', 21), ('r3PSDPSanaxx', 22), ('r3SSPxDSxaxn', 23), ('r3SPxPDxa', 24), ('r3SDPSanaxn', 25), ('r3PDSPaox', 26), ('r3SDPSxaxn', 27), ('r3PSDPaox', 28), ('r3DSPDxaxn', 29), ('r3PDSox', 30), ('r3PDSoan', 31), ('r3DPSnaa', 32), ('r3SDPxon', 33), ('r3DSna', 34), ('r3SPDnaon', 35), ('r3SPxDSxa', 36), ('r3PDSPanaxn', 37), ('r3SDPSaox', 38), ('r3SDPSxnox', 39), ('r3DPSxa', 40), ('r3PSDPSaoxxn', 41), ('r3DPSana', 42), ('r3SSPxPDxaxn', 43), ('r3SPDSoax', 44), ('r3PSDnox', 45), ('r3PSDPxox', 46), ('r3PSDnoan', 47), ('r3PSna', 48), ('r3SDPnaon', 49), ('r3SDPSoox', 50), ('r3Sn', 51), ('r3SPDSaox', 52), ('r3SPDSxnox', 53), ('r3SDPox', 54), ('r3SDPoan', 55), ('r3PSDPoax', 56), ('r3SPDnox', 57), ('r3SPDSxox', 58), ('r3SPDnoan', 59), ('r3PSx', 60), ('r3SPDSonox', 61), ('r3SPDSnaox', 62), ('r3PSan', 63), ('r3PSDnaa', 64), ('r3DPSxon', 65), ('r3SDxPDxa', 66), ('r3SPDSanaxn', 67), ('r3SDna', 68), ('r3DPSnaon', 69), ('r3DSPDaox', 70), ('r3PSDPxaxn', 71), ('r3SDPxa', 72), ('r3PDSPDaoxxn', 73), ('r3DPSDoax', 74), ('r3PDSnox', 75), ('r3SDPana', 76), ('r3SSPxDSxoxn', 77), ('r3PDSPxox', 78), ('r3PDSnoan', 79), ('r3PDna', 80), ('r3DSPnaon', 81), ('r3DPSDaox', 82), ('r3SPDSxaxn', 83), ('r3DPSonon', 84), ('r3Dn', 85), ('r3DPSox', 86), ('r3DPSoan', 87), ('r3PDSPoax', 88), ('r3DPSnox', 89), ('r3DPx', 90), ('r3DPSDonox', 91), ('r3DPSDxox', 92), ('r3DPSnoan', 93), ('r3DPSDnaox', 94), ('r3DPan', 95), ('r3PDSxa', 96), ('r3DSPDSaoxxn', 97), ('r3DSPDoax', 98), ('r3SDPnox', 99), ('r3SDPSoax', 100), ('r3DSPnox', 101), ('r3DSx', 102), ('r3SDPSonox', 103), ('r3DSPDSonoxxn', 104), ('r3PDSxxn', 105), ('r3DPSax', 106), ('r3PSDPSoaxxn', 107), ('r3SDPax', 108), ('r3PDSPDoaxxn', 109), ('r3SDPSnoax', 110), ('r3PDSxnan', 111), ('r3PDSana', 112), ('r3SSDxPDxaxn', 113), ('r3SDPSxox', 114), ('r3SDPnoan', 115), ('r3DSPDxox', 116), ('r3DSPnoan', 117), ('r3SDPSnaox', 118), ('r3DSan', 119), ('r3PDSax', 120), ('r3DSPDSoaxxn', 121), ('r3DPSDnoax', 122), ('r3SDPxnan', 123), ('r3SPDSnoax', 124), ('r3DPSxnan', 125), ('r3SPxDSxo', 126), ('r3DPSaan', 127), ('r3DPSaa', 128), ('r3SPxDSxon', 129), ('r3DPSxna', 130), ('r3SPDSnoaxn', 131), ('r3SDPxna', 132), ('r3PDSPnoaxn', 133), ('r3DSPDSoaxx', 134), ('r3PDSaxn', 135), ('r3DSa', 136), ('r3SDPSnaoxn', 137), ('r3DSPnoa', 138), ('r3DSPDxoxn', 139), ('r3SDPnoa', 140), ('r3SDPSxoxn', 141), ('r3SSDxPDxax', 142), ('r3PDSanan', 143), ('r3PDSxna', 144), ('r3SDPSnoaxn', 145), ('r3DPSDPoaxx', 146), ('r3SPDaxn', 147), ('r3PSDPSoaxx', 148), ('r3DPSaxn', 149), ('r3DPSxx', 150), ('r3PSDPSonoxx', 151), ('r3SDPSonoxn', 152), ('r3DSxn', 153), ('r3DPSnax', 154), ('r3SDPSoaxn', 155), ('r3SPDnax', 156), ('r3DSPDoaxn', 157), ('r3DSPDSaoxx', 158), ('r3PDSxan', 159), ('r3DPa', 160), ('r3PDSPnaoxn', 161), ('r3DPSnoa', 162), ('r3DPSDxoxn', 163), ('r3PDSPonoxn', 164), ('r3PDxn', 165), ('r3DSPnax', 166), ('r3PDSPoaxn', 167), ('r3DPSoa', 168), ('r3DPSoxn', 169), ('r3D', 170), ('r3DPSono', 171), ('r3SPDSxax', 172), ('r3DPSDaoxn', 173), ('r3DSPnao', 174), ('r3DPno', 175), ('r3PDSnoa', 176), ('r3PDSPxoxn', 177), ('r3SSPxDSxox', 178), ('r3SDPanan', 179), ('r3PSDnax', 180), ('r3DPSDoaxn', 181), ('r3DPSDPaoxx', 182), ('r3SDPxan', 183), ('r3PSDPxax', 184), ('r3DSPDaoxn', 185), ('r3DPSnao', 186), ('r3DSno', 187), ('r3SPDSanax', 188), ('r3SDxPDxan', 189), ('r3DPSxo', 190), ('r3DPSano', 191), ('r3PSa', 192), ('r3SPDSnaoxn', 193), ('r3SPDSonoxn', 194), ('r3PSxn', 195), ('r3SPDnoa', 196), ('r3SPDSxoxn', 197), ('r3SDPnax', 198), ('r3PSDPoaxn', 199), ('r3SDPoa', 200), ('r3SPDoxn', 201), ('r3DPSDxax', 202), ('r3SPDSaoxn', 203), ('r3S', 204), ('r3SDPono', 205), ('r3SDPnao', 206), ('r3SPno', 207), ('r3PSDnoa', 208), ('r3PSDPxoxn', 209), ('r3PDSnax', 210), ('r3SPDSoaxn', 211), ('r3SSPxPDxax', 212), ('r3DPSanan', 213), ('r3PSDPSaoxx', 214), ('r3DPSxan', 215), ('r3PDSPxax', 216), ('r3SDPSaoxn', 217), ('r3DPSDanax', 218), ('r3SPxDSxan', 219), ('r3SPDnao', 220), ('r3SDno', 221), ('r3SDPxo', 222), ('r3SDPano', 223), ('r3PDSoa', 224), ('r3PDSoxn', 225), ('r3DSPDxax', 226), ('r3PSDPaoxn', 227), ('r3SDPSxax', 228), ('r3PDSPaoxn', 229), ('r3SDPSanax', 230), ('r3SPxPDxan', 231), ('r3SSPxDSxax', 232), ('r3DSPDSanaxxn', 233), ('r3DPSao', 234), ('r3DPSxno', 235), ('r3SDPao', 236), ('r3SDPxno', 237), ('r3DSo', 238), ('r3SDPnoo', 239), ('r3P', 240), ('r3PDSono', 241), ('r3PDSnao', 242), ('r3PSno', 243), ('r3PSDnao', 244), ('r3PDno', 245), ('r3PDSxo', 246), ('r3PDSano', 247), ('r3PDSao', 248), ('r3PDSxno', 249), ('r3DPo', 250), ('r3DPSnoo', 251), ('r3PSo', 252), ('r3PSDnoo', 253), ('r3DPSoo', 254), ('r3WHITE', 255)])
    ROP3._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< SecondaryOrderType >-----#
    SecondaryOrderType = INT(name='SecondaryOrderType', mode=MODE_TYPE)
    SecondaryOrderType._cont = ASN1Dict([('cacheBitmapUncompressed', 0), ('cacheColorTable', 1), ('cacheBitmapCompressed', 2)])
    SecondaryOrderType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< StreamID >-----#
    StreamID = INT(name='StreamID', mode=MODE_TYPE)
    StreamID._cont = ASN1Dict([('streamLowPriority', 1), ('streamMediumPriority', 2), ('streamHighPriority', 4)])
    StreamID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< SynchronizeMessageType >-----#
    SynchronizeMessageType = INT(name='SynchronizeMessageType', mode=MODE_TYPE)
    SynchronizeMessageType._cont = ASN1Dict([('synchronize', 1)])
    SynchronizeMessageType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< SystemPointerType >-----#
    SystemPointerType = INT(name='SystemPointerType', mode=MODE_TYPE)
    SystemPointerType._cont = ASN1Dict([('nullPointer', 0), ('defaultPointer', 32512)])
    SystemPointerType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=4294967295)], ev=None, er=[])
    
    #-----< UpdateType >-----#
    UpdateType = INT(name='UpdateType', mode=MODE_TYPE)
    UpdateType._cont = ASN1Dict([('orders', 0), ('bitmap', 1), ('palette', 2), ('synchronize', 3)])
    UpdateType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< WindowActivationAction >-----#
    WindowActivationAction = INT(name='WindowActivationAction', mode=MODE_TYPE)
    WindowActivationAction._cont = ASN1Dict([('localWindowActive', 1), ('hostedWindowActive', 2), ('hostedWindowInvisible', 3), ('pointerDeviceCapture', 4), ('activateWindow', 32769), ('closeWindow', 32770), ('restoreWindow', 32771), ('windowManagerMenu', 32772), ('activationHelpKey', 32785), ('activationHelpIndexKey', 32786), ('activationHelpExtendedKey', 32787)])
    WindowActivationAction._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< WindowAttribute >-----#
    WindowAttribute = SEQ(name='WindowAttribute', mode=MODE_TYPE)
    _WindowAttribute_windowID = INT(name='windowID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'WindowID')))
    _WindowAttribute_windowExtra = INT(name='windowExtra', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer32')))
    _WindowAttribute_windowOwner = INT(name='windowOwner', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'WindowID')))
    _WindowAttribute_windowFlags = BIT_STR(name='windowFlags', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'WindowAttributeFlags')))
    _WindowAttribute_windowRectangle = SEQ(name='windowRectangle', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Rectangle16')))
    WindowAttribute._cont = ASN1Dict([
        ('windowID', _WindowAttribute_windowID),
        ('windowExtra', _WindowAttribute_windowExtra),
        ('windowOwner', _WindowAttribute_windowOwner),
        ('windowFlags', _WindowAttribute_windowFlags),
        ('windowRectangle', _WindowAttribute_windowRectangle),
        ])
    WindowAttribute._ext = None
    
    #-----< WindowListMessageType >-----#
    WindowListMessageType = INT(name='WindowListMessageType', mode=MODE_TYPE)
    WindowListMessageType._cont = ASN1Dict([('updateWindowList', 1)])
    WindowListMessageType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< WindowTitle >-----#
    WindowTitle = CHOICE(name='WindowTitle', mode=MODE_TYPE)
    _WindowTitle_noTitle = INT(name='noTitle', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    _WindowTitle_noTitle._const_val = ASN1Set(rv=[255], rr=[], ev=None, er=[])
    _WindowTitle_titleString = OCT_STR(name='titleString', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'T50String')))
    _WindowTitle_titleString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=50)], ev=None, er=[])
    WindowTitle._cont = ASN1Dict([
        ('noTitle', _WindowTitle_noTitle),
        ('titleString', _WindowTitle_titleString),
        ])
    WindowTitle._ext = None
    
    #-----< CapabilitySetType >-----#
    CapabilitySetType = INT(name='CapabilitySetType', mode=MODE_TYPE)
    CapabilitySetType._cont = ASN1Dict([('bitmapCacheCapabilitySet', 4), ('bitmapCapabilitySet', 2), ('colorCacheCapabilitySet', 10), ('controlCapabilitySet', 5), ('generalCapabilitySet', 1), ('orderCapabilitySet', 3), ('pointerCapabilitySet', 8), ('activationCapabilitySet', 7), ('shareCapabilitySet', 9)])
    CapabilitySetType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< GeneralCapabilitySet >-----#
    GeneralCapabilitySet = SEQ(name='GeneralCapabilitySet', mode=MODE_TYPE)
    _GeneralCapabilitySet_capabilitySetType = INT(name='capabilitySetType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'CapabilitySetType')))
    _GeneralCapabilitySet_capabilitySetType._const_val = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    _GeneralCapabilitySet_lengthCapability = INT(name='lengthCapability', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _GeneralCapabilitySet_osMajorType = INT(name='osMajorType', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'OSMajorType')))
    _GeneralCapabilitySet_osMinorType = INT(name='osMinorType', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'OSMinorType')))
    _GeneralCapabilitySet_protocolVersion = INT(name='protocolVersion', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _GeneralCapabilitySet_protocolVersion._const_val = ASN1Set(rv=[512], rr=[], ev=None, er=[])
    _GeneralCapabilitySet_pad2octetsA = INT(name='pad2octetsA', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _GeneralCapabilitySet_generalCompressionTypes = INT(name='generalCompressionTypes', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _GeneralCapabilitySet_pad2octetsB = INT(name='pad2octetsB', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _GeneralCapabilitySet_updatecapabilityFlag = INT(name='updatecapabilityFlag', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Boolean16')))
    _GeneralCapabilitySet_remoteUnshareFlag = INT(name='remoteUnshareFlag', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Boolean16')))
    _GeneralCapabilitySet_generalCompressionLevel = INT(name='generalCompressionLevel', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _GeneralCapabilitySet_pad2octetsC = INT(name='pad2octetsC', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    GeneralCapabilitySet._cont = ASN1Dict([
        ('capabilitySetType', _GeneralCapabilitySet_capabilitySetType),
        ('lengthCapability', _GeneralCapabilitySet_lengthCapability),
        ('osMajorType', _GeneralCapabilitySet_osMajorType),
        ('osMinorType', _GeneralCapabilitySet_osMinorType),
        ('protocolVersion', _GeneralCapabilitySet_protocolVersion),
        ('pad2octetsA', _GeneralCapabilitySet_pad2octetsA),
        ('generalCompressionTypes', _GeneralCapabilitySet_generalCompressionTypes),
        ('pad2octetsB', _GeneralCapabilitySet_pad2octetsB),
        ('updatecapabilityFlag', _GeneralCapabilitySet_updatecapabilityFlag),
        ('remoteUnshareFlag', _GeneralCapabilitySet_remoteUnshareFlag),
        ('generalCompressionLevel', _GeneralCapabilitySet_generalCompressionLevel),
        ('pad2octetsC', _GeneralCapabilitySet_pad2octetsC),
        ])
    GeneralCapabilitySet._ext = None
    
    #-----< BitmapCapabilitySet >-----#
    BitmapCapabilitySet = SEQ(name='BitmapCapabilitySet', mode=MODE_TYPE)
    _BitmapCapabilitySet_capabilitySetType = INT(name='capabilitySetType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'CapabilitySetType')))
    _BitmapCapabilitySet_capabilitySetType._const_val = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _BitmapCapabilitySet_lengthCapability = INT(name='lengthCapability', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _BitmapCapabilitySet_preferredBitsPerPixel = INT(name='preferredBitsPerPixel', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _BitmapCapabilitySet_preferredBitsPerPixel._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    _BitmapCapabilitySet_receive1BitPerPixelFlag = INT(name='receive1BitPerPixelFlag', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Boolean16')))
    _BitmapCapabilitySet_receive4BitsPerPixelFlag = INT(name='receive4BitsPerPixelFlag', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Boolean16')))
    _BitmapCapabilitySet_receive8BitsPerPixelFlag = INT(name='receive8BitsPerPixelFlag', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Boolean16')))
    _BitmapCapabilitySet_desktopWidth = INT(name='desktopWidth', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _BitmapCapabilitySet_desktopHeight = INT(name='desktopHeight', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _BitmapCapabilitySet_pad2octetsA = INT(name='pad2octetsA', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _BitmapCapabilitySet_desktopResizeFlag = INT(name='desktopResizeFlag', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Boolean16')))
    _BitmapCapabilitySet_bitmapCompressionType = BIT_STR(name='bitmapCompressionType', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'BitmapCompressionCapabilityFlags')))
    _BitmapCapabilitySet_pad2octetsC = INT(name='pad2octetsC', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    BitmapCapabilitySet._cont = ASN1Dict([
        ('capabilitySetType', _BitmapCapabilitySet_capabilitySetType),
        ('lengthCapability', _BitmapCapabilitySet_lengthCapability),
        ('preferredBitsPerPixel', _BitmapCapabilitySet_preferredBitsPerPixel),
        ('receive1BitPerPixelFlag', _BitmapCapabilitySet_receive1BitPerPixelFlag),
        ('receive4BitsPerPixelFlag', _BitmapCapabilitySet_receive4BitsPerPixelFlag),
        ('receive8BitsPerPixelFlag', _BitmapCapabilitySet_receive8BitsPerPixelFlag),
        ('desktopWidth', _BitmapCapabilitySet_desktopWidth),
        ('desktopHeight', _BitmapCapabilitySet_desktopHeight),
        ('pad2octetsA', _BitmapCapabilitySet_pad2octetsA),
        ('desktopResizeFlag', _BitmapCapabilitySet_desktopResizeFlag),
        ('bitmapCompressionType', _BitmapCapabilitySet_bitmapCompressionType),
        ('pad2octetsC', _BitmapCapabilitySet_pad2octetsC),
        ])
    BitmapCapabilitySet._ext = None
    
    #-----< OrderCapabilitySet >-----#
    OrderCapabilitySet = SEQ(name='OrderCapabilitySet', mode=MODE_TYPE)
    _OrderCapabilitySet_capabilitySetType = INT(name='capabilitySetType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'CapabilitySetType')))
    _OrderCapabilitySet_capabilitySetType._const_val = ASN1Set(rv=[3], rr=[], ev=None, er=[])
    _OrderCapabilitySet_lengthCapability = INT(name='lengthCapability', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _OrderCapabilitySet_terminalDescriptor = OCT_STR(name='terminalDescriptor', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'T50String')))
    _OrderCapabilitySet_terminalDescriptor._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    _OrderCapabilitySet_pad4octetsA = INT(name='pad4octetsA', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer32')))
    _OrderCapabilitySet_pad4octetsA._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _OrderCapabilitySet_desktopXGranularity = INT(name='desktopXGranularity', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _OrderCapabilitySet_desktopYGranularity = INT(name='desktopYGranularity', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _OrderCapabilitySet_pad2octetsA = INT(name='pad2octetsA', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _OrderCapabilitySet_pad2octetsA._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _OrderCapabilitySet_maximumOrderLevel = INT(name='maximumOrderLevel', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _OrderCapabilitySet_numberFonts = INT(name='numberFonts', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _OrderCapabilitySet_numberFonts._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=700)], ev=None, er=[])
    _OrderCapabilitySet_orderFlags = BIT_STR(name='orderFlags', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'OrderCapabilityFlags')))
    _OrderCapabilitySet_orderSupport = SEQ(name='orderSupport', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __OrderCapabilitySet_orderSupport_destinationBltSupport = INT(name='destinationBltSupport', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_patternBltSupport = INT(name='patternBltSupport', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_screenBltSupport = INT(name='screenBltSupport', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_memoryBltSupport = INT(name='memoryBltSupport', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_memoryThreeWayBltSupport = INT(name='memoryThreeWayBltSupport', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_textSupport = INT(name='textSupport', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_extendedTextSupport = INT(name='extendedTextSupport', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_rectangleSupport = INT(name='rectangleSupport', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_lineSupport = INT(name='lineSupport', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_frameSupport = INT(name='frameSupport', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_opaqueRectangleSupport = INT(name='opaqueRectangleSupport', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_desktopSaveSupport = INT(name='desktopSaveSupport', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_undefinedOrder12 = INT(name='undefinedOrder12', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_undefinedOrder12._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    __OrderCapabilitySet_orderSupport_undefinedOrder13 = INT(name='undefinedOrder13', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_undefinedOrder13._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    __OrderCapabilitySet_orderSupport_undefinedOrder14 = INT(name='undefinedOrder14', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_undefinedOrder14._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    __OrderCapabilitySet_orderSupport_undefinedOrder15 = INT(name='undefinedOrder15', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_undefinedOrder15._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    __OrderCapabilitySet_orderSupport_undefinedOrder16 = INT(name='undefinedOrder16', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_undefinedOrder16._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    __OrderCapabilitySet_orderSupport_undefinedOrder17 = INT(name='undefinedOrder17', mode=MODE_TYPE, tag=(17, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_undefinedOrder17._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    __OrderCapabilitySet_orderSupport_undefinedOrder18 = INT(name='undefinedOrder18', mode=MODE_TYPE, tag=(18, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_undefinedOrder18._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    __OrderCapabilitySet_orderSupport_undefinedOrder19 = INT(name='undefinedOrder19', mode=MODE_TYPE, tag=(19, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_undefinedOrder19._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    __OrderCapabilitySet_orderSupport_undefinedOrder20 = INT(name='undefinedOrder20', mode=MODE_TYPE, tag=(20, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_undefinedOrder20._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    __OrderCapabilitySet_orderSupport_undefinedOrder21 = INT(name='undefinedOrder21', mode=MODE_TYPE, tag=(21, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_undefinedOrder21._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    __OrderCapabilitySet_orderSupport_undefinedOrder22 = INT(name='undefinedOrder22', mode=MODE_TYPE, tag=(22, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_undefinedOrder22._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    __OrderCapabilitySet_orderSupport_undefinedOrder23 = INT(name='undefinedOrder23', mode=MODE_TYPE, tag=(23, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_undefinedOrder23._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    __OrderCapabilitySet_orderSupport_undefinedOrder24 = INT(name='undefinedOrder24', mode=MODE_TYPE, tag=(24, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_undefinedOrder24._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    __OrderCapabilitySet_orderSupport_undefinedOrder25 = INT(name='undefinedOrder25', mode=MODE_TYPE, tag=(25, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_undefinedOrder25._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    __OrderCapabilitySet_orderSupport_undefinedOrder26 = INT(name='undefinedOrder26', mode=MODE_TYPE, tag=(26, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_undefinedOrder26._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    __OrderCapabilitySet_orderSupport_undefinedOrder27 = INT(name='undefinedOrder27', mode=MODE_TYPE, tag=(27, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_undefinedOrder27._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    __OrderCapabilitySet_orderSupport_undefinedOrder28 = INT(name='undefinedOrder28', mode=MODE_TYPE, tag=(28, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_undefinedOrder28._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    __OrderCapabilitySet_orderSupport_undefinedOrder29 = INT(name='undefinedOrder29', mode=MODE_TYPE, tag=(29, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_undefinedOrder29._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    __OrderCapabilitySet_orderSupport_undefinedOrder30 = INT(name='undefinedOrder30', mode=MODE_TYPE, tag=(30, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_undefinedOrder30._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    __OrderCapabilitySet_orderSupport_undefinedOrder31 = INT(name='undefinedOrder31', mode=MODE_TYPE, tag=(31, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    __OrderCapabilitySet_orderSupport_undefinedOrder31._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _OrderCapabilitySet_orderSupport._cont = ASN1Dict([
        ('destinationBltSupport', __OrderCapabilitySet_orderSupport_destinationBltSupport),
        ('patternBltSupport', __OrderCapabilitySet_orderSupport_patternBltSupport),
        ('screenBltSupport', __OrderCapabilitySet_orderSupport_screenBltSupport),
        ('memoryBltSupport', __OrderCapabilitySet_orderSupport_memoryBltSupport),
        ('memoryThreeWayBltSupport', __OrderCapabilitySet_orderSupport_memoryThreeWayBltSupport),
        ('textSupport', __OrderCapabilitySet_orderSupport_textSupport),
        ('extendedTextSupport', __OrderCapabilitySet_orderSupport_extendedTextSupport),
        ('rectangleSupport', __OrderCapabilitySet_orderSupport_rectangleSupport),
        ('lineSupport', __OrderCapabilitySet_orderSupport_lineSupport),
        ('frameSupport', __OrderCapabilitySet_orderSupport_frameSupport),
        ('opaqueRectangleSupport', __OrderCapabilitySet_orderSupport_opaqueRectangleSupport),
        ('desktopSaveSupport', __OrderCapabilitySet_orderSupport_desktopSaveSupport),
        ('undefinedOrder12', __OrderCapabilitySet_orderSupport_undefinedOrder12),
        ('undefinedOrder13', __OrderCapabilitySet_orderSupport_undefinedOrder13),
        ('undefinedOrder14', __OrderCapabilitySet_orderSupport_undefinedOrder14),
        ('undefinedOrder15', __OrderCapabilitySet_orderSupport_undefinedOrder15),
        ('undefinedOrder16', __OrderCapabilitySet_orderSupport_undefinedOrder16),
        ('undefinedOrder17', __OrderCapabilitySet_orderSupport_undefinedOrder17),
        ('undefinedOrder18', __OrderCapabilitySet_orderSupport_undefinedOrder18),
        ('undefinedOrder19', __OrderCapabilitySet_orderSupport_undefinedOrder19),
        ('undefinedOrder20', __OrderCapabilitySet_orderSupport_undefinedOrder20),
        ('undefinedOrder21', __OrderCapabilitySet_orderSupport_undefinedOrder21),
        ('undefinedOrder22', __OrderCapabilitySet_orderSupport_undefinedOrder22),
        ('undefinedOrder23', __OrderCapabilitySet_orderSupport_undefinedOrder23),
        ('undefinedOrder24', __OrderCapabilitySet_orderSupport_undefinedOrder24),
        ('undefinedOrder25', __OrderCapabilitySet_orderSupport_undefinedOrder25),
        ('undefinedOrder26', __OrderCapabilitySet_orderSupport_undefinedOrder26),
        ('undefinedOrder27', __OrderCapabilitySet_orderSupport_undefinedOrder27),
        ('undefinedOrder28', __OrderCapabilitySet_orderSupport_undefinedOrder28),
        ('undefinedOrder29', __OrderCapabilitySet_orderSupport_undefinedOrder29),
        ('undefinedOrder30', __OrderCapabilitySet_orderSupport_undefinedOrder30),
        ('undefinedOrder31', __OrderCapabilitySet_orderSupport_undefinedOrder31),
        ])
    _OrderCapabilitySet_orderSupport._ext = None
    _OrderCapabilitySet_textFlags = BIT_STR(name='textFlags', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'TextCapabilityFlags')))
    _OrderCapabilitySet_pad2octetsB = INT(name='pad2octetsB', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _OrderCapabilitySet_pad2octetsB._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _OrderCapabilitySet_pad4octetsB = INT(name='pad4octetsB', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer32')))
    _OrderCapabilitySet_pad4octetsB._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _OrderCapabilitySet_desktopSaveSize = INT(name='desktopSaveSize', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer32')))
    _OrderCapabilitySet_pad4octetsC = INT(name='pad4octetsC', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer32')))
    _OrderCapabilitySet_pad4octetsC._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    OrderCapabilitySet._cont = ASN1Dict([
        ('capabilitySetType', _OrderCapabilitySet_capabilitySetType),
        ('lengthCapability', _OrderCapabilitySet_lengthCapability),
        ('terminalDescriptor', _OrderCapabilitySet_terminalDescriptor),
        ('pad4octetsA', _OrderCapabilitySet_pad4octetsA),
        ('desktopXGranularity', _OrderCapabilitySet_desktopXGranularity),
        ('desktopYGranularity', _OrderCapabilitySet_desktopYGranularity),
        ('pad2octetsA', _OrderCapabilitySet_pad2octetsA),
        ('maximumOrderLevel', _OrderCapabilitySet_maximumOrderLevel),
        ('numberFonts', _OrderCapabilitySet_numberFonts),
        ('orderFlags', _OrderCapabilitySet_orderFlags),
        ('orderSupport', _OrderCapabilitySet_orderSupport),
        ('textFlags', _OrderCapabilitySet_textFlags),
        ('pad2octetsB', _OrderCapabilitySet_pad2octetsB),
        ('pad4octetsB', _OrderCapabilitySet_pad4octetsB),
        ('desktopSaveSize', _OrderCapabilitySet_desktopSaveSize),
        ('pad4octetsC', _OrderCapabilitySet_pad4octetsC),
        ])
    OrderCapabilitySet._ext = None
    
    #-----< BitmapCacheCapabilitySet >-----#
    BitmapCacheCapabilitySet = SEQ(name='BitmapCacheCapabilitySet', mode=MODE_TYPE)
    _BitmapCacheCapabilitySet_capabilitySetType = INT(name='capabilitySetType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'CapabilitySetType')))
    _BitmapCacheCapabilitySet_capabilitySetType._const_val = ASN1Set(rv=[4], rr=[], ev=None, er=[])
    _BitmapCacheCapabilitySet_lengthCapability = INT(name='lengthCapability', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _BitmapCacheCapabilitySet_pad4octetsA = INT(name='pad4octetsA', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer32')))
    _BitmapCacheCapabilitySet_pad4octetsA._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _BitmapCacheCapabilitySet_pad4octetsB = INT(name='pad4octetsB', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer32')))
    _BitmapCacheCapabilitySet_pad4octetsB._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _BitmapCacheCapabilitySet_pad4octetsC = INT(name='pad4octetsC', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer32')))
    _BitmapCacheCapabilitySet_pad4octetsC._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _BitmapCacheCapabilitySet_pad4octetsD = INT(name='pad4octetsD', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer32')))
    _BitmapCacheCapabilitySet_pad4octetsD._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _BitmapCacheCapabilitySet_pad4octetsE = INT(name='pad4octetsE', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer32')))
    _BitmapCacheCapabilitySet_pad4octetsE._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _BitmapCacheCapabilitySet_pad4octetsF = INT(name='pad4octetsF', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer32')))
    _BitmapCacheCapabilitySet_pad4octetsF._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _BitmapCacheCapabilitySet_cache1Entries = INT(name='cache1Entries', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _BitmapCacheCapabilitySet_cache1MaximumCellSize = INT(name='cache1MaximumCellSize', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _BitmapCacheCapabilitySet_cache1MaximumCellSize._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=256, ub=16384)], ev=None, er=[])
    _BitmapCacheCapabilitySet_cache2Entries = INT(name='cache2Entries', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _BitmapCacheCapabilitySet_cache2MaximumCellSize = INT(name='cache2MaximumCellSize', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _BitmapCacheCapabilitySet_cache2MaximumCellSize._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=256, ub=16384)], ev=None, er=[])
    _BitmapCacheCapabilitySet_cache3Entries = INT(name='cache3Entries', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _BitmapCacheCapabilitySet_cache3MaximumCellSize = INT(name='cache3MaximumCellSize', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _BitmapCacheCapabilitySet_cache3MaximumCellSize._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=256, ub=16384)], ev=None, er=[])
    BitmapCacheCapabilitySet._cont = ASN1Dict([
        ('capabilitySetType', _BitmapCacheCapabilitySet_capabilitySetType),
        ('lengthCapability', _BitmapCacheCapabilitySet_lengthCapability),
        ('pad4octetsA', _BitmapCacheCapabilitySet_pad4octetsA),
        ('pad4octetsB', _BitmapCacheCapabilitySet_pad4octetsB),
        ('pad4octetsC', _BitmapCacheCapabilitySet_pad4octetsC),
        ('pad4octetsD', _BitmapCacheCapabilitySet_pad4octetsD),
        ('pad4octetsE', _BitmapCacheCapabilitySet_pad4octetsE),
        ('pad4octetsF', _BitmapCacheCapabilitySet_pad4octetsF),
        ('cache1Entries', _BitmapCacheCapabilitySet_cache1Entries),
        ('cache1MaximumCellSize', _BitmapCacheCapabilitySet_cache1MaximumCellSize),
        ('cache2Entries', _BitmapCacheCapabilitySet_cache2Entries),
        ('cache2MaximumCellSize', _BitmapCacheCapabilitySet_cache2MaximumCellSize),
        ('cache3Entries', _BitmapCacheCapabilitySet_cache3Entries),
        ('cache3MaximumCellSize', _BitmapCacheCapabilitySet_cache3MaximumCellSize),
        ])
    BitmapCacheCapabilitySet._ext = None
    
    #-----< ColorCacheCapabilitySet >-----#
    ColorCacheCapabilitySet = SEQ(name='ColorCacheCapabilitySet', mode=MODE_TYPE)
    _ColorCacheCapabilitySet_capabilitySetType = INT(name='capabilitySetType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'CapabilitySetType')))
    _ColorCacheCapabilitySet_capabilitySetType._const_val = ASN1Set(rv=[10], rr=[], ev=None, er=[])
    _ColorCacheCapabilitySet_lengthCapability = INT(name='lengthCapability', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _ColorCacheCapabilitySet_colorTablecacheSize = INT(name='colorTablecacheSize', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _ColorCacheCapabilitySet_colorTablecacheSize._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    _ColorCacheCapabilitySet_pad2octetsA = INT(name='pad2octetsA', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    ColorCacheCapabilitySet._cont = ASN1Dict([
        ('capabilitySetType', _ColorCacheCapabilitySet_capabilitySetType),
        ('lengthCapability', _ColorCacheCapabilitySet_lengthCapability),
        ('colorTablecacheSize', _ColorCacheCapabilitySet_colorTablecacheSize),
        ('pad2octetsA', _ColorCacheCapabilitySet_pad2octetsA),
        ])
    ColorCacheCapabilitySet._ext = None
    
    #-----< ActivationCapabilitySet >-----#
    ActivationCapabilitySet = SEQ(name='ActivationCapabilitySet', mode=MODE_TYPE)
    _ActivationCapabilitySet_capabilitySetType = INT(name='capabilitySetType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'CapabilitySetType')))
    _ActivationCapabilitySet_capabilitySetType._const_val = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    _ActivationCapabilitySet_lengthCapability = INT(name='lengthCapability', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _ActivationCapabilitySet_helpKeyFlag = INT(name='helpKeyFlag', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Boolean16')))
    _ActivationCapabilitySet_helpIndexKeyFlag = INT(name='helpIndexKeyFlag', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Boolean16')))
    _ActivationCapabilitySet_helpExtendedKeyFlag = INT(name='helpExtendedKeyFlag', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Boolean16')))
    _ActivationCapabilitySet_windowActivateFlag = INT(name='windowActivateFlag', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Boolean16')))
    ActivationCapabilitySet._cont = ASN1Dict([
        ('capabilitySetType', _ActivationCapabilitySet_capabilitySetType),
        ('lengthCapability', _ActivationCapabilitySet_lengthCapability),
        ('helpKeyFlag', _ActivationCapabilitySet_helpKeyFlag),
        ('helpIndexKeyFlag', _ActivationCapabilitySet_helpIndexKeyFlag),
        ('helpExtendedKeyFlag', _ActivationCapabilitySet_helpExtendedKeyFlag),
        ('windowActivateFlag', _ActivationCapabilitySet_windowActivateFlag),
        ])
    ActivationCapabilitySet._ext = None
    
    #-----< ControlCapabilitySet >-----#
    ControlCapabilitySet = SEQ(name='ControlCapabilitySet', mode=MODE_TYPE)
    _ControlCapabilitySet_capabilitySetType = INT(name='capabilitySetType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'CapabilitySetType')))
    _ControlCapabilitySet_capabilitySetType._const_val = ASN1Set(rv=[5], rr=[], ev=None, er=[])
    _ControlCapabilitySet_lengthCapability = INT(name='lengthCapability', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _ControlCapabilitySet_controlFlags = BIT_STR(name='controlFlags', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ControlCapabilityFlags')))
    _ControlCapabilitySet_remoteDetachFlag = INT(name='remoteDetachFlag', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Boolean16')))
    _ControlCapabilitySet_controlInterest = INT(name='controlInterest', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ControlPriority')))
    _ControlCapabilitySet_detachInterest = INT(name='detachInterest', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ControlPriority')))
    ControlCapabilitySet._cont = ASN1Dict([
        ('capabilitySetType', _ControlCapabilitySet_capabilitySetType),
        ('lengthCapability', _ControlCapabilitySet_lengthCapability),
        ('controlFlags', _ControlCapabilitySet_controlFlags),
        ('remoteDetachFlag', _ControlCapabilitySet_remoteDetachFlag),
        ('controlInterest', _ControlCapabilitySet_controlInterest),
        ('detachInterest', _ControlCapabilitySet_detachInterest),
        ])
    ControlCapabilitySet._ext = None
    
    #-----< PointerCapabilitySet >-----#
    PointerCapabilitySet = SEQ(name='PointerCapabilitySet', mode=MODE_TYPE)
    _PointerCapabilitySet_capabilitySetType = INT(name='capabilitySetType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'CapabilitySetType')))
    _PointerCapabilitySet_capabilitySetType._const_val = ASN1Set(rv=[8], rr=[], ev=None, er=[])
    _PointerCapabilitySet_lengthCapability = INT(name='lengthCapability', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _PointerCapabilitySet_colorPointerFlag = INT(name='colorPointerFlag', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Boolean16')))
    _PointerCapabilitySet_pointerCacheSize = INT(name='pointerCacheSize', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _PointerCapabilitySet_pointerCacheSize._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=500)], ev=None, er=[])
    PointerCapabilitySet._cont = ASN1Dict([
        ('capabilitySetType', _PointerCapabilitySet_capabilitySetType),
        ('lengthCapability', _PointerCapabilitySet_lengthCapability),
        ('colorPointerFlag', _PointerCapabilitySet_colorPointerFlag),
        ('pointerCacheSize', _PointerCapabilitySet_pointerCacheSize),
        ])
    PointerCapabilitySet._ext = None
    
    #-----< ShareCapabilitySet >-----#
    ShareCapabilitySet = SEQ(name='ShareCapabilitySet', mode=MODE_TYPE)
    _ShareCapabilitySet_capabilitySetType = INT(name='capabilitySetType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'CapabilitySetType')))
    _ShareCapabilitySet_capabilitySetType._const_val = ASN1Set(rv=[9], rr=[], ev=None, er=[])
    _ShareCapabilitySet_lengthCapability = INT(name='lengthCapability', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _ShareCapabilitySet_nodeID = INT(name='nodeID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer32')))
    ShareCapabilitySet._cont = ASN1Dict([
        ('capabilitySetType', _ShareCapabilitySet_capabilitySetType),
        ('lengthCapability', _ShareCapabilitySet_lengthCapability),
        ('nodeID', _ShareCapabilitySet_nodeID),
        ])
    ShareCapabilitySet._ext = None
    
    #-----< NonStandardCapabilitySet >-----#
    NonStandardCapabilitySet = SEQ(name='NonStandardCapabilitySet', mode=MODE_TYPE)
    _NonStandardCapabilitySet_capabilitySetType = INT(name='capabilitySetType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _NonStandardCapabilitySet_lengthCapability = INT(name='lengthCapability', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _NonStandardCapabilitySet_nonStandardParameters = OCT_STR(name='nonStandardParameters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    NonStandardCapabilitySet._cont = ASN1Dict([
        ('capabilitySetType', _NonStandardCapabilitySet_capabilitySetType),
        ('lengthCapability', _NonStandardCapabilitySet_lengthCapability),
        ('nonStandardParameters', _NonStandardCapabilitySet_nonStandardParameters),
        ])
    NonStandardCapabilitySet._ext = None
    
    #-----< CombinedCapabilities >-----#
    CombinedCapabilities = SEQ(name='CombinedCapabilities', mode=MODE_TYPE)
    _CombinedCapabilities_numberCapabilities = INT(name='numberCapabilities', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _CombinedCapabilities_pad2octets = INT(name='pad2octets', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _CombinedCapabilities_pad2octets._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _CombinedCapabilities_combinedCapabilities = SET(name='combinedCapabilities', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __CombinedCapabilities_combinedCapabilities_generalCapabilitySet = SEQ(name='generalCapabilitySet', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'GeneralCapabilitySet')))
    __CombinedCapabilities_combinedCapabilities_bitmapCapabilitySet = SEQ(name='bitmapCapabilitySet', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'BitmapCapabilitySet')))
    __CombinedCapabilities_combinedCapabilities_orderCapabilitySet = SEQ(name='orderCapabilitySet', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'OrderCapabilitySet')))
    __CombinedCapabilities_combinedCapabilities_bitmapCacheCapabilitySet = SEQ(name='bitmapCacheCapabilitySet', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'BitmapCacheCapabilitySet')))
    __CombinedCapabilities_combinedCapabilities_colorCacheCapabilitySet = SEQ(name='colorCacheCapabilitySet', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ColorCacheCapabilitySet')))
    __CombinedCapabilities_combinedCapabilities_activationCapabilitySet = SEQ(name='activationCapabilitySet', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ActivationCapabilitySet')))
    __CombinedCapabilities_combinedCapabilities_controlCapabilitySet = SEQ(name='controlCapabilitySet', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ControlCapabilitySet')))
    __CombinedCapabilities_combinedCapabilities_pointerCapabilitySet = SEQ(name='pointerCapabilitySet', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PointerCapabilitySet')))
    __CombinedCapabilities_combinedCapabilities_shareCapabilitySet = SEQ(name='shareCapabilitySet', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareCapabilitySet')))
    __CombinedCapabilities_combinedCapabilities_nonStandardCapabilitySet = SEQ(name='nonStandardCapabilitySet', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'NonStandardCapabilitySet')), opt=True)
    _CombinedCapabilities_combinedCapabilities._cont = ASN1Dict([
        ('generalCapabilitySet', __CombinedCapabilities_combinedCapabilities_generalCapabilitySet),
        ('bitmapCapabilitySet', __CombinedCapabilities_combinedCapabilities_bitmapCapabilitySet),
        ('orderCapabilitySet', __CombinedCapabilities_combinedCapabilities_orderCapabilitySet),
        ('bitmapCacheCapabilitySet', __CombinedCapabilities_combinedCapabilities_bitmapCacheCapabilitySet),
        ('colorCacheCapabilitySet', __CombinedCapabilities_combinedCapabilities_colorCacheCapabilitySet),
        ('activationCapabilitySet', __CombinedCapabilities_combinedCapabilities_activationCapabilitySet),
        ('controlCapabilitySet', __CombinedCapabilities_combinedCapabilities_controlCapabilitySet),
        ('pointerCapabilitySet', __CombinedCapabilities_combinedCapabilities_pointerCapabilitySet),
        ('shareCapabilitySet', __CombinedCapabilities_combinedCapabilities_shareCapabilitySet),
        ('nonStandardCapabilitySet', __CombinedCapabilities_combinedCapabilities_nonStandardCapabilitySet),
        ])
    _CombinedCapabilities_combinedCapabilities._ext = None
    CombinedCapabilities._cont = ASN1Dict([
        ('numberCapabilities', _CombinedCapabilities_numberCapabilities),
        ('pad2octets', _CombinedCapabilities_pad2octets),
        ('combinedCapabilities', _CombinedCapabilities_combinedCapabilities),
        ])
    CombinedCapabilities._ext = None
    
    #-----< UpdateCapabilitySet >-----#
    UpdateCapabilitySet = CHOICE(name='UpdateCapabilitySet', mode=MODE_TYPE)
    _UpdateCapabilitySet_bitmapCapabilitySet = SEQ(name='bitmapCapabilitySet', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'BitmapCapabilitySet')))
    UpdateCapabilitySet._cont = ASN1Dict([
        ('bitmapCapabilitySet', _UpdateCapabilitySet_bitmapCapabilitySet),
        ])
    UpdateCapabilitySet._ext = None
    
    #-----< InputEvent >-----#
    InputEvent = CHOICE(name='InputEvent', mode=MODE_TYPE)
    _InputEvent_pointingDeviceEvent = SEQ(name='pointingDeviceEvent', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PointingDeviceEvent')))
    _InputEvent_keyboardEvent = SEQ(name='keyboardEvent', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'KeyboardEvent')))
    _InputEvent_synchronizeEvent = SEQ(name='synchronizeEvent', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'SynchronizeEvent')))
    InputEvent._cont = ASN1Dict([
        ('pointingDeviceEvent', _InputEvent_pointingDeviceEvent),
        ('keyboardEvent', _InputEvent_keyboardEvent),
        ('synchronizeEvent', _InputEvent_synchronizeEvent),
        ])
    InputEvent._ext = None
    
    #-----< KeyboardEvent >-----#
    KeyboardEvent = SEQ(name='KeyboardEvent', mode=MODE_TYPE)
    _KeyboardEvent_eventTime = INT(name='eventTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer32')))
    _KeyboardEvent_messageType = INT(name='messageType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'InputMessageType')))
    _KeyboardEvent_messageType._const_val = ASN1Set(rv=[1, 2], rr=[], ev=None, er=[])
    _KeyboardEvent_keyboardFlags = BIT_STR(name='keyboardFlags', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'KeyboardFlags')))
    _KeyboardEvent_keyCode = INT(name='keyCode', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    KeyboardEvent._cont = ASN1Dict([
        ('eventTime', _KeyboardEvent_eventTime),
        ('messageType', _KeyboardEvent_messageType),
        ('keyboardFlags', _KeyboardEvent_keyboardFlags),
        ('keyCode', _KeyboardEvent_keyCode),
        ])
    KeyboardEvent._ext = None
    
    #-----< PointingDeviceEvent >-----#
    PointingDeviceEvent = SEQ(name='PointingDeviceEvent', mode=MODE_TYPE)
    _PointingDeviceEvent_eventTime = INT(name='eventTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer32')))
    _PointingDeviceEvent_messageType = INT(name='messageType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'InputMessageType')))
    _PointingDeviceEvent_messageType._const_val = ASN1Set(rv=[32769], rr=[], ev=None, er=[])
    _PointingDeviceEvent_pointingDeviceFlags = BIT_STR(name='pointingDeviceFlags', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PointingDeviceFlags')))
    _PointingDeviceEvent_pointingDeviceX = INT(name='pointingDeviceX', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate16')))
    _PointingDeviceEvent_pointingDeviceY = INT(name='pointingDeviceY', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate16')))
    PointingDeviceEvent._cont = ASN1Dict([
        ('eventTime', _PointingDeviceEvent_eventTime),
        ('messageType', _PointingDeviceEvent_messageType),
        ('pointingDeviceFlags', _PointingDeviceEvent_pointingDeviceFlags),
        ('pointingDeviceX', _PointingDeviceEvent_pointingDeviceX),
        ('pointingDeviceY', _PointingDeviceEvent_pointingDeviceY),
        ])
    PointingDeviceEvent._ext = None
    
    #-----< SynchronizeEvent >-----#
    SynchronizeEvent = SEQ(name='SynchronizeEvent', mode=MODE_TYPE)
    _SynchronizeEvent_eventTime = INT(name='eventTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer32')))
    _SynchronizeEvent_messageType = INT(name='messageType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'InputMessageType')))
    _SynchronizeEvent_messageType._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    SynchronizeEvent._cont = ASN1Dict([
        ('eventTime', _SynchronizeEvent_eventTime),
        ('messageType', _SynchronizeEvent_messageType),
        ])
    SynchronizeEvent._ext = None
    
    #-----< PrimaryOrderHeader >-----#
    PrimaryOrderHeader = SEQ(name='PrimaryOrderHeader', mode=MODE_TYPE)
    _PrimaryOrderHeader_controlFlags = BIT_STR(name='controlFlags', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ControlOrderFlags')))
    _PrimaryOrderHeader_orderType = INT(name='orderType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PrimaryOrderType')), opt=True)
    _PrimaryOrderHeader_encodingFlags = SEQ_OF(name='encodingFlags', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __PrimaryOrderHeader_encodingFlags__item_ = BIT_STR(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'BitString8')))
    _PrimaryOrderHeader_encodingFlags._cont = __PrimaryOrderHeader_encodingFlags__item_
    _PrimaryOrderHeader_encodingFlags._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=3)], ev=None, er=[])
    _PrimaryOrderHeader_boundsFlags = BIT_STR(name='boundsFlags', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'BoundsOrderFlags')), opt=True)
    _PrimaryOrderHeader_boundsLeft = CHOICE(name='boundsLeft', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _PrimaryOrderHeader_boundsTop = CHOICE(name='boundsTop', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _PrimaryOrderHeader_boundsRight = CHOICE(name='boundsRight', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _PrimaryOrderHeader_boundsBottom = CHOICE(name='boundsBottom', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    PrimaryOrderHeader._cont = ASN1Dict([
        ('controlFlags', _PrimaryOrderHeader_controlFlags),
        ('orderType', _PrimaryOrderHeader_orderType),
        ('encodingFlags', _PrimaryOrderHeader_encodingFlags),
        ('boundsFlags', _PrimaryOrderHeader_boundsFlags),
        ('boundsLeft', _PrimaryOrderHeader_boundsLeft),
        ('boundsTop', _PrimaryOrderHeader_boundsTop),
        ('boundsRight', _PrimaryOrderHeader_boundsRight),
        ('boundsBottom', _PrimaryOrderHeader_boundsBottom),
        ])
    PrimaryOrderHeader._ext = None
    
    #-----< SecondaryOrderHeader >-----#
    SecondaryOrderHeader = SEQ(name='SecondaryOrderHeader', mode=MODE_TYPE)
    _SecondaryOrderHeader_controlFlags = BIT_STR(name='controlFlags', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ControlOrderFlags')))
    _SecondaryOrderHeader_orderLength = INT(name='orderLength', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _SecondaryOrderHeader_extraFlags = BIT_STR(name='extraFlags', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ExtraOrderFlags')))
    _SecondaryOrderHeader_orderType = INT(name='orderType', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'SecondaryOrderType')))
    SecondaryOrderHeader._cont = ASN1Dict([
        ('controlFlags', _SecondaryOrderHeader_controlFlags),
        ('orderLength', _SecondaryOrderHeader_orderLength),
        ('extraFlags', _SecondaryOrderHeader_extraFlags),
        ('orderType', _SecondaryOrderHeader_orderType),
        ])
    SecondaryOrderHeader._ext = None
    
    #-----< ShareControlHeader >-----#
    ShareControlHeader = SEQ(name='ShareControlHeader', mode=MODE_TYPE)
    _ShareControlHeader_totalLength = INT(name='totalLength', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _ShareControlHeader_totalLength._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=32767)], ev=None, er=[])
    _ShareControlHeader_protocolVersion = INT(name='protocolVersion', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer4')))
    _ShareControlHeader_protocolVersion._const_val = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    _ShareControlHeader_pduType = INT(name='pduType', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PDUType')))
    _ShareControlHeader_pad1octet = INT(name='pad1octet', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    _ShareControlHeader_pad1octet._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _ShareControlHeader_pduSource = INT(name='pduSource', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'UserID')))
    ShareControlHeader._cont = ASN1Dict([
        ('totalLength', _ShareControlHeader_totalLength),
        ('protocolVersion', _ShareControlHeader_protocolVersion),
        ('pduType', _ShareControlHeader_pduType),
        ('pad1octet', _ShareControlHeader_pad1octet),
        ('pduSource', _ShareControlHeader_pduSource),
        ])
    ShareControlHeader._ext = None
    
    #-----< ShareDataHeader >-----#
    ShareDataHeader = SEQ(name='ShareDataHeader', mode=MODE_TYPE)
    _ShareDataHeader_shareControlHeader = SEQ(name='shareControlHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareControlHeader')))
    _ShareDataHeader_shareID = INT(name='shareID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareID')))
    _ShareDataHeader_pad1octet = INT(name='pad1octet', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    _ShareDataHeader_pad1octet._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _ShareDataHeader_streamID = INT(name='streamID', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'StreamID')))
    _ShareDataHeader_uncompressedLength = INT(name='uncompressedLength', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _ShareDataHeader_pduType2 = INT(name='pduType2', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PDUType2')))
    _ShareDataHeader_generalCompressedType = INT(name='generalCompressedType', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    _ShareDataHeader_generalCompressedLength = INT(name='generalCompressedLength', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    ShareDataHeader._cont = ASN1Dict([
        ('shareControlHeader', _ShareDataHeader_shareControlHeader),
        ('shareID', _ShareDataHeader_shareID),
        ('pad1octet', _ShareDataHeader_pad1octet),
        ('streamID', _ShareDataHeader_streamID),
        ('uncompressedLength', _ShareDataHeader_uncompressedLength),
        ('pduType2', _ShareDataHeader_pduType2),
        ('generalCompressedType', _ShareDataHeader_generalCompressedType),
        ('generalCompressedLength', _ShareDataHeader_generalCompressedLength),
        ])
    ShareDataHeader._ext = None
    
    #-----< DestinationBltOrder >-----#
    DestinationBltOrder = SEQ(name='DestinationBltOrder', mode=MODE_TYPE)
    _DestinationBltOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PrimaryOrderHeader')))
    _DestinationBltOrder_destLeft = CHOICE(name='destLeft', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _DestinationBltOrder_destTop = CHOICE(name='destTop', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _DestinationBltOrder_destWidth = CHOICE(name='destWidth', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _DestinationBltOrder_destHeight = CHOICE(name='destHeight', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _DestinationBltOrder_rop3 = INT(name='rop3', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ROP3')), opt=True)
    DestinationBltOrder._cont = ASN1Dict([
        ('header', _DestinationBltOrder_header),
        ('destLeft', _DestinationBltOrder_destLeft),
        ('destTop', _DestinationBltOrder_destTop),
        ('destWidth', _DestinationBltOrder_destWidth),
        ('destHeight', _DestinationBltOrder_destHeight),
        ('rop3', _DestinationBltOrder_rop3),
        ])
    DestinationBltOrder._ext = None
    
    #-----< PatternBltOrder >-----#
    PatternBltOrder = SEQ(name='PatternBltOrder', mode=MODE_TYPE)
    _PatternBltOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PrimaryOrderHeader')))
    _PatternBltOrder_destLeft = CHOICE(name='destLeft', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _PatternBltOrder_destTop = CHOICE(name='destTop', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _PatternBltOrder_destWidth = CHOICE(name='destWidth', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _PatternBltOrder_destHeight = CHOICE(name='destHeight', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _PatternBltOrder_rop3 = INT(name='rop3', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ROP3')), opt=True)
    _PatternBltOrder_backgroundColor = SEQ(name='backgroundColor', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Color')), opt=True)
    _PatternBltOrder_foregroundColor = SEQ(name='foregroundColor', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Color')), opt=True)
    _PatternBltOrder_brush = SEQ(name='brush', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Brush')), opt=True)
    PatternBltOrder._cont = ASN1Dict([
        ('header', _PatternBltOrder_header),
        ('destLeft', _PatternBltOrder_destLeft),
        ('destTop', _PatternBltOrder_destTop),
        ('destWidth', _PatternBltOrder_destWidth),
        ('destHeight', _PatternBltOrder_destHeight),
        ('rop3', _PatternBltOrder_rop3),
        ('backgroundColor', _PatternBltOrder_backgroundColor),
        ('foregroundColor', _PatternBltOrder_foregroundColor),
        ('brush', _PatternBltOrder_brush),
        ])
    PatternBltOrder._ext = None
    
    #-----< ScreenBltOrder >-----#
    ScreenBltOrder = SEQ(name='ScreenBltOrder', mode=MODE_TYPE)
    _ScreenBltOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PrimaryOrderHeader')))
    _ScreenBltOrder_destLeft = CHOICE(name='destLeft', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _ScreenBltOrder_destTop = CHOICE(name='destTop', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _ScreenBltOrder_destWidth = CHOICE(name='destWidth', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _ScreenBltOrder_destHeight = CHOICE(name='destHeight', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _ScreenBltOrder_rop3 = INT(name='rop3', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ROP3')), opt=True)
    _ScreenBltOrder_sourceX = CHOICE(name='sourceX', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _ScreenBltOrder_sourceY = CHOICE(name='sourceY', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    ScreenBltOrder._cont = ASN1Dict([
        ('header', _ScreenBltOrder_header),
        ('destLeft', _ScreenBltOrder_destLeft),
        ('destTop', _ScreenBltOrder_destTop),
        ('destWidth', _ScreenBltOrder_destWidth),
        ('destHeight', _ScreenBltOrder_destHeight),
        ('rop3', _ScreenBltOrder_rop3),
        ('sourceX', _ScreenBltOrder_sourceX),
        ('sourceY', _ScreenBltOrder_sourceY),
        ])
    ScreenBltOrder._ext = None
    
    #-----< CacheBitmapOrder >-----#
    CacheBitmapOrder = SEQ(name='CacheBitmapOrder', mode=MODE_TYPE)
    _CacheBitmapOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'SecondaryOrderHeader')))
    _CacheBitmapOrder_cacheId = INT(name='cacheId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    _CacheBitmapOrder_cacheId._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=2)], ev=None, er=[])
    _CacheBitmapOrder_pad1octet = INT(name='pad1octet', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    _CacheBitmapOrder_pad1octet._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _CacheBitmapOrder_bitmapWidth = INT(name='bitmapWidth', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    _CacheBitmapOrder_bitmapHeight = INT(name='bitmapHeight', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    _CacheBitmapOrder_bitmapBitsPerPel = INT(name='bitmapBitsPerPel', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    _CacheBitmapOrder_bitmapBitsPerPel._const_val = ASN1Set(rv=[1, 4, 8], rr=[], ev=None, er=[])
    _CacheBitmapOrder_bitmapLength = INT(name='bitmapLength', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _CacheBitmapOrder_cacheIndex = INT(name='cacheIndex', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _CacheBitmapOrder_bitmapData = CHOICE(name='bitmapData', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'BitmapData')))
    CacheBitmapOrder._cont = ASN1Dict([
        ('header', _CacheBitmapOrder_header),
        ('cacheId', _CacheBitmapOrder_cacheId),
        ('pad1octet', _CacheBitmapOrder_pad1octet),
        ('bitmapWidth', _CacheBitmapOrder_bitmapWidth),
        ('bitmapHeight', _CacheBitmapOrder_bitmapHeight),
        ('bitmapBitsPerPel', _CacheBitmapOrder_bitmapBitsPerPel),
        ('bitmapLength', _CacheBitmapOrder_bitmapLength),
        ('cacheIndex', _CacheBitmapOrder_cacheIndex),
        ('bitmapData', _CacheBitmapOrder_bitmapData),
        ])
    CacheBitmapOrder._ext = None
    
    #-----< CacheColorTableOrder >-----#
    CacheColorTableOrder = SEQ(name='CacheColorTableOrder', mode=MODE_TYPE)
    _CacheColorTableOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'SecondaryOrderHeader')))
    _CacheColorTableOrder_cacheIndex = INT(name='cacheIndex', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    _CacheColorTableOrder_numberColors = INT(name='numberColors', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _CacheColorTableOrder_numberColors._const_val = ASN1Set(rv=[16, 256], rr=[], ev=None, er=[])
    _CacheColorTableOrder_colorTable = SEQ_OF(name='colorTable', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __CacheColorTableOrder_colorTable__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ColorQuad')))
    _CacheColorTableOrder_colorTable._cont = __CacheColorTableOrder_colorTable__item_
    _CacheColorTableOrder_colorTable._const_sz = ASN1Set(rv=[16, 256], rr=[], ev=None, er=[])
    CacheColorTableOrder._cont = ASN1Dict([
        ('header', _CacheColorTableOrder_header),
        ('cacheIndex', _CacheColorTableOrder_cacheIndex),
        ('numberColors', _CacheColorTableOrder_numberColors),
        ('colorTable', _CacheColorTableOrder_colorTable),
        ])
    CacheColorTableOrder._ext = None
    
    #-----< MemoryBltOrder >-----#
    MemoryBltOrder = SEQ(name='MemoryBltOrder', mode=MODE_TYPE)
    _MemoryBltOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PrimaryOrderHeader')))
    _MemoryBltOrder_colorTableCacheIndex = INT(name='colorTableCacheIndex', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')), opt=True)
    _MemoryBltOrder_bitmapCacheID = INT(name='bitmapCacheID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')), opt=True)
    _MemoryBltOrder_destLeft = CHOICE(name='destLeft', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _MemoryBltOrder_destTop = CHOICE(name='destTop', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _MemoryBltOrder_destWidth = CHOICE(name='destWidth', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _MemoryBltOrder_destHeight = CHOICE(name='destHeight', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _MemoryBltOrder_rop3 = INT(name='rop3', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ROP3')), opt=True)
    _MemoryBltOrder_sourceX = CHOICE(name='sourceX', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _MemoryBltOrder_sourceY = CHOICE(name='sourceY', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _MemoryBltOrder_bitmapCacheIndex = INT(name='bitmapCacheIndex', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')), opt=True)
    MemoryBltOrder._cont = ASN1Dict([
        ('header', _MemoryBltOrder_header),
        ('colorTableCacheIndex', _MemoryBltOrder_colorTableCacheIndex),
        ('bitmapCacheID', _MemoryBltOrder_bitmapCacheID),
        ('destLeft', _MemoryBltOrder_destLeft),
        ('destTop', _MemoryBltOrder_destTop),
        ('destWidth', _MemoryBltOrder_destWidth),
        ('destHeight', _MemoryBltOrder_destHeight),
        ('rop3', _MemoryBltOrder_rop3),
        ('sourceX', _MemoryBltOrder_sourceX),
        ('sourceY', _MemoryBltOrder_sourceY),
        ('bitmapCacheIndex', _MemoryBltOrder_bitmapCacheIndex),
        ])
    MemoryBltOrder._ext = None
    
    #-----< MemoryThreeWayBltOrder >-----#
    MemoryThreeWayBltOrder = SEQ(name='MemoryThreeWayBltOrder', mode=MODE_TYPE)
    _MemoryThreeWayBltOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PrimaryOrderHeader')))
    _MemoryThreeWayBltOrder_colorTableCacheIndex = INT(name='colorTableCacheIndex', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')), opt=True)
    _MemoryThreeWayBltOrder_bitmapCacheID = INT(name='bitmapCacheID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')), opt=True)
    _MemoryThreeWayBltOrder_destLeft = CHOICE(name='destLeft', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _MemoryThreeWayBltOrder_destTop = CHOICE(name='destTop', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _MemoryThreeWayBltOrder_destWidth = CHOICE(name='destWidth', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _MemoryThreeWayBltOrder_destHeight = CHOICE(name='destHeight', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _MemoryThreeWayBltOrder_rop3 = INT(name='rop3', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ROP3')), opt=True)
    _MemoryThreeWayBltOrder_sourceX = CHOICE(name='sourceX', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _MemoryThreeWayBltOrder_sourceY = CHOICE(name='sourceY', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _MemoryThreeWayBltOrder_backgroundColor = SEQ(name='backgroundColor', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Color')), opt=True)
    _MemoryThreeWayBltOrder_foregroundColor = SEQ(name='foregroundColor', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Color')), opt=True)
    _MemoryThreeWayBltOrder_brush = SEQ(name='brush', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Brush')), opt=True)
    _MemoryThreeWayBltOrder_bitmapCacheIndex = INT(name='bitmapCacheIndex', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')), opt=True)
    MemoryThreeWayBltOrder._cont = ASN1Dict([
        ('header', _MemoryThreeWayBltOrder_header),
        ('colorTableCacheIndex', _MemoryThreeWayBltOrder_colorTableCacheIndex),
        ('bitmapCacheID', _MemoryThreeWayBltOrder_bitmapCacheID),
        ('destLeft', _MemoryThreeWayBltOrder_destLeft),
        ('destTop', _MemoryThreeWayBltOrder_destTop),
        ('destWidth', _MemoryThreeWayBltOrder_destWidth),
        ('destHeight', _MemoryThreeWayBltOrder_destHeight),
        ('rop3', _MemoryThreeWayBltOrder_rop3),
        ('sourceX', _MemoryThreeWayBltOrder_sourceX),
        ('sourceY', _MemoryThreeWayBltOrder_sourceY),
        ('backgroundColor', _MemoryThreeWayBltOrder_backgroundColor),
        ('foregroundColor', _MemoryThreeWayBltOrder_foregroundColor),
        ('brush', _MemoryThreeWayBltOrder_brush),
        ('bitmapCacheIndex', _MemoryThreeWayBltOrder_bitmapCacheIndex),
        ])
    MemoryThreeWayBltOrder._ext = None
    
    #-----< TextOrder >-----#
    TextOrder = SEQ(name='TextOrder', mode=MODE_TYPE)
    _TextOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PrimaryOrderHeader')))
    _TextOrder_backMixMode = INT(name='backMixMode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'BackgroundMixMode')), opt=True)
    _TextOrder_startX = CHOICE(name='startX', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _TextOrder_startY = CHOICE(name='startY', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _TextOrder_backgroundColor = SEQ(name='backgroundColor', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Color')), opt=True)
    _TextOrder_foregroundColor = SEQ(name='foregroundColor', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Color')), opt=True)
    _TextOrder_extraSpacing = INT(name='extraSpacing', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')), opt=True)
    _TextOrder_totalBreakSpacing = INT(name='totalBreakSpacing', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')), opt=True)
    _TextOrder_breakCount = INT(name='breakCount', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')), opt=True)
    _TextOrder_fontHeight = INT(name='fontHeight', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')), opt=True)
    _TextOrder_fontWidth = INT(name='fontWidth', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')), opt=True)
    _TextOrder_fontWeight = INT(name='fontWeight', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')), opt=True)
    _TextOrder_textFlags = BIT_STR(name='textFlags', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'TextAttributeFlags')), opt=True)
    _TextOrder_fontID = INT(name='fontID', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')), opt=True)
    _TextOrder_numberCodePoints = INT(name='numberCodePoints', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')), opt=True)
    _TextOrder_numberCodePoints._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    _TextOrder_codePointList = OCT_STR(name='codePointList', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ASString')), opt=True)
    _TextOrder_codePointList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    TextOrder._cont = ASN1Dict([
        ('header', _TextOrder_header),
        ('backMixMode', _TextOrder_backMixMode),
        ('startX', _TextOrder_startX),
        ('startY', _TextOrder_startY),
        ('backgroundColor', _TextOrder_backgroundColor),
        ('foregroundColor', _TextOrder_foregroundColor),
        ('extraSpacing', _TextOrder_extraSpacing),
        ('totalBreakSpacing', _TextOrder_totalBreakSpacing),
        ('breakCount', _TextOrder_breakCount),
        ('fontHeight', _TextOrder_fontHeight),
        ('fontWidth', _TextOrder_fontWidth),
        ('fontWeight', _TextOrder_fontWeight),
        ('textFlags', _TextOrder_textFlags),
        ('fontID', _TextOrder_fontID),
        ('numberCodePoints', _TextOrder_numberCodePoints),
        ('codePointList', _TextOrder_codePointList),
        ])
    TextOrder._ext = None
    
    #-----< ExtendedTextOrder >-----#
    ExtendedTextOrder = SEQ(name='ExtendedTextOrder', mode=MODE_TYPE)
    _ExtendedTextOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PrimaryOrderHeader')))
    _ExtendedTextOrder_backMixMode = INT(name='backMixMode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'BackgroundMixMode')), opt=True)
    _ExtendedTextOrder_startX = CHOICE(name='startX', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _ExtendedTextOrder_startY = CHOICE(name='startY', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _ExtendedTextOrder_backgroundColor = SEQ(name='backgroundColor', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Color')), opt=True)
    _ExtendedTextOrder_foregroundColor = SEQ(name='foregroundColor', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Color')), opt=True)
    _ExtendedTextOrder_extraSpacing = INT(name='extraSpacing', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')), opt=True)
    _ExtendedTextOrder_totalBreakSpacing = INT(name='totalBreakSpacing', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')), opt=True)
    _ExtendedTextOrder_breakCount = INT(name='breakCount', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')), opt=True)
    _ExtendedTextOrder_fontHeight = INT(name='fontHeight', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')), opt=True)
    _ExtendedTextOrder_fontWidth = INT(name='fontWidth', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')), opt=True)
    _ExtendedTextOrder_fontWeight = INT(name='fontWeight', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')), opt=True)
    _ExtendedTextOrder_textFlags1 = BIT_STR(name='textFlags1', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'TextAttributeFlags')), opt=True)
    _ExtendedTextOrder_fontID = INT(name='fontID', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')), opt=True)
    _ExtendedTextOrder_textFlags2 = BIT_STR(name='textFlags2', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ExtraTextFlags')), opt=True)
    _ExtendedTextOrder_clipLeft = CHOICE(name='clipLeft', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _ExtendedTextOrder_clipTop = CHOICE(name='clipTop', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _ExtendedTextOrder_clipRight = CHOICE(name='clipRight', mode=MODE_TYPE, tag=(17, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _ExtendedTextOrder_clipBottom = CHOICE(name='clipBottom', mode=MODE_TYPE, tag=(18, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _ExtendedTextOrder_numberCodePoints = INT(name='numberCodePoints', mode=MODE_TYPE, tag=(19, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')), opt=True)
    _ExtendedTextOrder_numberCodePoints._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    _ExtendedTextOrder_codePointList = OCT_STR(name='codePointList', mode=MODE_TYPE, tag=(20, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ASString')), opt=True)
    _ExtendedTextOrder_codePointList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    _ExtendedTextOrder_numberDeltaX = INT(name='numberDeltaX', mode=MODE_TYPE, tag=(21, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')), opt=True)
    _ExtendedTextOrder_numberDeltaX._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=127)], ev=None, er=[])
    _ExtendedTextOrder_deltaXList = SEQ_OF(name='deltaXList', mode=MODE_TYPE, tag=(22, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ExtendedTextOrder_deltaXList__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')))
    _ExtendedTextOrder_deltaXList._cont = __ExtendedTextOrder_deltaXList__item_
    _ExtendedTextOrder_deltaXList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=127)], ev=None, er=[])
    ExtendedTextOrder._cont = ASN1Dict([
        ('header', _ExtendedTextOrder_header),
        ('backMixMode', _ExtendedTextOrder_backMixMode),
        ('startX', _ExtendedTextOrder_startX),
        ('startY', _ExtendedTextOrder_startY),
        ('backgroundColor', _ExtendedTextOrder_backgroundColor),
        ('foregroundColor', _ExtendedTextOrder_foregroundColor),
        ('extraSpacing', _ExtendedTextOrder_extraSpacing),
        ('totalBreakSpacing', _ExtendedTextOrder_totalBreakSpacing),
        ('breakCount', _ExtendedTextOrder_breakCount),
        ('fontHeight', _ExtendedTextOrder_fontHeight),
        ('fontWidth', _ExtendedTextOrder_fontWidth),
        ('fontWeight', _ExtendedTextOrder_fontWeight),
        ('textFlags1', _ExtendedTextOrder_textFlags1),
        ('fontID', _ExtendedTextOrder_fontID),
        ('textFlags2', _ExtendedTextOrder_textFlags2),
        ('clipLeft', _ExtendedTextOrder_clipLeft),
        ('clipTop', _ExtendedTextOrder_clipTop),
        ('clipRight', _ExtendedTextOrder_clipRight),
        ('clipBottom', _ExtendedTextOrder_clipBottom),
        ('numberCodePoints', _ExtendedTextOrder_numberCodePoints),
        ('codePointList', _ExtendedTextOrder_codePointList),
        ('numberDeltaX', _ExtendedTextOrder_numberDeltaX),
        ('deltaXList', _ExtendedTextOrder_deltaXList),
        ])
    ExtendedTextOrder._ext = None
    
    #-----< FrameOrder >-----#
    FrameOrder = SEQ(name='FrameOrder', mode=MODE_TYPE)
    _FrameOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PrimaryOrderHeader')))
    _FrameOrder_destLeft = CHOICE(name='destLeft', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _FrameOrder_destTop = CHOICE(name='destTop', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _FrameOrder_destWidth = CHOICE(name='destWidth', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _FrameOrder_destHeight = CHOICE(name='destHeight', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _FrameOrder_rop3 = INT(name='rop3', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ROP3')), opt=True)
    _FrameOrder_backgroundColor = SEQ(name='backgroundColor', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Color')), opt=True)
    _FrameOrder_foregroundColor = SEQ(name='foregroundColor', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Color')), opt=True)
    _FrameOrder_brush = SEQ(name='brush', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Brush')), opt=True)
    FrameOrder._cont = ASN1Dict([
        ('header', _FrameOrder_header),
        ('destLeft', _FrameOrder_destLeft),
        ('destTop', _FrameOrder_destTop),
        ('destWidth', _FrameOrder_destWidth),
        ('destHeight', _FrameOrder_destHeight),
        ('rop3', _FrameOrder_rop3),
        ('backgroundColor', _FrameOrder_backgroundColor),
        ('foregroundColor', _FrameOrder_foregroundColor),
        ('brush', _FrameOrder_brush),
        ])
    FrameOrder._ext = None
    
    #-----< RectangleOrder >-----#
    RectangleOrder = SEQ(name='RectangleOrder', mode=MODE_TYPE)
    _RectangleOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PrimaryOrderHeader')))
    _RectangleOrder_backMixMode = INT(name='backMixMode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'BackgroundMixMode')), opt=True)
    _RectangleOrder_destLeft = CHOICE(name='destLeft', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _RectangleOrder_destTop = CHOICE(name='destTop', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _RectangleOrder_destRight = CHOICE(name='destRight', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _RectangleOrder_destBottom = CHOICE(name='destBottom', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _RectangleOrder_backgroundColor = SEQ(name='backgroundColor', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Color')), opt=True)
    _RectangleOrder_foregroundColor = SEQ(name='foregroundColor', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Color')), opt=True)
    _RectangleOrder_brush = SEQ(name='brush', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Brush')), opt=True)
    _RectangleOrder_rop2 = INT(name='rop2', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ROP2')), opt=True)
    _RectangleOrder_pen = SEQ(name='pen', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Pen')), opt=True)
    RectangleOrder._cont = ASN1Dict([
        ('header', _RectangleOrder_header),
        ('backMixMode', _RectangleOrder_backMixMode),
        ('destLeft', _RectangleOrder_destLeft),
        ('destTop', _RectangleOrder_destTop),
        ('destRight', _RectangleOrder_destRight),
        ('destBottom', _RectangleOrder_destBottom),
        ('backgroundColor', _RectangleOrder_backgroundColor),
        ('foregroundColor', _RectangleOrder_foregroundColor),
        ('brush', _RectangleOrder_brush),
        ('rop2', _RectangleOrder_rop2),
        ('pen', _RectangleOrder_pen),
        ])
    RectangleOrder._ext = None
    
    #-----< OpaqueRectangleOrder >-----#
    OpaqueRectangleOrder = SEQ(name='OpaqueRectangleOrder', mode=MODE_TYPE)
    _OpaqueRectangleOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PrimaryOrderHeader')))
    _OpaqueRectangleOrder_destLeft = CHOICE(name='destLeft', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _OpaqueRectangleOrder_destTop = CHOICE(name='destTop', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _OpaqueRectangleOrder_destWidth = CHOICE(name='destWidth', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _OpaqueRectangleOrder_destHeight = CHOICE(name='destHeight', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _OpaqueRectangleOrder_color = SEQ(name='color', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Color')), opt=True)
    OpaqueRectangleOrder._cont = ASN1Dict([
        ('header', _OpaqueRectangleOrder_header),
        ('destLeft', _OpaqueRectangleOrder_destLeft),
        ('destTop', _OpaqueRectangleOrder_destTop),
        ('destWidth', _OpaqueRectangleOrder_destWidth),
        ('destHeight', _OpaqueRectangleOrder_destHeight),
        ('color', _OpaqueRectangleOrder_color),
        ])
    OpaqueRectangleOrder._ext = None
    
    #-----< LineOrder >-----#
    LineOrder = SEQ(name='LineOrder', mode=MODE_TYPE)
    _LineOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PrimaryOrderHeader')))
    _LineOrder_backMixMode = INT(name='backMixMode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'BackgroundMixMode')), opt=True)
    _LineOrder_startX = CHOICE(name='startX', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _LineOrder_startY = CHOICE(name='startY', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _LineOrder_endX = CHOICE(name='endX', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _LineOrder_endY = CHOICE(name='endY', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _LineOrder_backgroundColor = SEQ(name='backgroundColor', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Color')), opt=True)
    _LineOrder_rop2 = INT(name='rop2', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ROP2')), opt=True)
    _LineOrder_pen = SEQ(name='pen', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Pen')), opt=True)
    LineOrder._cont = ASN1Dict([
        ('header', _LineOrder_header),
        ('backMixMode', _LineOrder_backMixMode),
        ('startX', _LineOrder_startX),
        ('startY', _LineOrder_startY),
        ('endX', _LineOrder_endX),
        ('endY', _LineOrder_endY),
        ('backgroundColor', _LineOrder_backgroundColor),
        ('rop2', _LineOrder_rop2),
        ('pen', _LineOrder_pen),
        ])
    LineOrder._ext = None
    
    #-----< DesktopSaveOrder >-----#
    DesktopSaveOrder = SEQ(name='DesktopSaveOrder', mode=MODE_TYPE)
    _DesktopSaveOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PrimaryOrderHeader')))
    _DesktopSaveOrder_saveOffset = INT(name='saveOffset', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer32')), opt=True)
    _DesktopSaveOrder_destLeft = CHOICE(name='destLeft', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _DesktopSaveOrder_destTop = CHOICE(name='destTop', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _DesktopSaveOrder_destWidth = CHOICE(name='destWidth', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _DesktopSaveOrder_destHeight = CHOICE(name='destHeight', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _DesktopSaveOrder_action = INT(name='action', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'DesktopSaveAction')), opt=True)
    DesktopSaveOrder._cont = ASN1Dict([
        ('header', _DesktopSaveOrder_header),
        ('saveOffset', _DesktopSaveOrder_saveOffset),
        ('destLeft', _DesktopSaveOrder_destLeft),
        ('destTop', _DesktopSaveOrder_destTop),
        ('destWidth', _DesktopSaveOrder_destWidth),
        ('destHeight', _DesktopSaveOrder_destHeight),
        ('action', _DesktopSaveOrder_action),
        ])
    DesktopSaveOrder._ext = None
    
    #-----< DesktopOriginOrder >-----#
    DesktopOriginOrder = SEQ(name='DesktopOriginOrder', mode=MODE_TYPE)
    _DesktopOriginOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PrimaryOrderHeader')))
    _DesktopOriginOrder_desktopLeft = CHOICE(name='desktopLeft', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    _DesktopOriginOrder_desktopTop = CHOICE(name='desktopTop', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate')), opt=True)
    DesktopOriginOrder._cont = ASN1Dict([
        ('header', _DesktopOriginOrder_header),
        ('desktopLeft', _DesktopOriginOrder_desktopLeft),
        ('desktopTop', _DesktopOriginOrder_desktopTop),
        ])
    DesktopOriginOrder._ext = None
    
    #-----< PrimaryOrder >-----#
    PrimaryOrder = CHOICE(name='PrimaryOrder', mode=MODE_TYPE)
    _PrimaryOrder_destinationBlt = SEQ(name='destinationBlt', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'DestinationBltOrder')))
    _PrimaryOrder_patternBlt = SEQ(name='patternBlt', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PatternBltOrder')))
    _PrimaryOrder_screenBlt = SEQ(name='screenBlt', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ScreenBltOrder')))
    _PrimaryOrder_memoryBlt = SEQ(name='memoryBlt', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'MemoryBltOrder')))
    _PrimaryOrder_memoryThreeWayBlt = SEQ(name='memoryThreeWayBlt', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'MemoryThreeWayBltOrder')))
    _PrimaryOrder_text = SEQ(name='text', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'TextOrder')))
    _PrimaryOrder_extendedText = SEQ(name='extendedText', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ExtendedTextOrder')))
    _PrimaryOrder_frame = SEQ(name='frame', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'FrameOrder')))
    _PrimaryOrder_rectangle = SEQ(name='rectangle', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'RectangleOrder')))
    _PrimaryOrder_line = SEQ(name='line', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'LineOrder')))
    _PrimaryOrder_opaqueRectangle = SEQ(name='opaqueRectangle', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'OpaqueRectangleOrder')))
    _PrimaryOrder_desktopSave = SEQ(name='desktopSave', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'DesktopSaveOrder')))
    _PrimaryOrder_desktopOrigin = SEQ(name='desktopOrigin', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'DesktopOriginOrder')))
    PrimaryOrder._cont = ASN1Dict([
        ('destinationBlt', _PrimaryOrder_destinationBlt),
        ('patternBlt', _PrimaryOrder_patternBlt),
        ('screenBlt', _PrimaryOrder_screenBlt),
        ('memoryBlt', _PrimaryOrder_memoryBlt),
        ('memoryThreeWayBlt', _PrimaryOrder_memoryThreeWayBlt),
        ('text', _PrimaryOrder_text),
        ('extendedText', _PrimaryOrder_extendedText),
        ('frame', _PrimaryOrder_frame),
        ('rectangle', _PrimaryOrder_rectangle),
        ('line', _PrimaryOrder_line),
        ('opaqueRectangle', _PrimaryOrder_opaqueRectangle),
        ('desktopSave', _PrimaryOrder_desktopSave),
        ('desktopOrigin', _PrimaryOrder_desktopOrigin),
        ])
    PrimaryOrder._ext = None
    
    #-----< SecondaryOrder >-----#
    SecondaryOrder = CHOICE(name='SecondaryOrder', mode=MODE_TYPE)
    _SecondaryOrder_cacheBitmap = SEQ(name='cacheBitmap', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'CacheBitmapOrder')))
    _SecondaryOrder_cacheColorTable = SEQ(name='cacheColorTable', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'CacheColorTableOrder')))
    SecondaryOrder._cont = ASN1Dict([
        ('cacheBitmap', _SecondaryOrder_cacheBitmap),
        ('cacheColorTable', _SecondaryOrder_cacheColorTable),
        ])
    SecondaryOrder._ext = None
    
    #-----< UpdateOrder >-----#
    UpdateOrder = CHOICE(name='UpdateOrder', mode=MODE_TYPE)
    _UpdateOrder_primaryOrder = CHOICE(name='primaryOrder', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PrimaryOrder')))
    _UpdateOrder_secondaryOrder = CHOICE(name='secondaryOrder', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'SecondaryOrder')))
    UpdateOrder._cont = ASN1Dict([
        ('primaryOrder', _UpdateOrder_primaryOrder),
        ('secondaryOrder', _UpdateOrder_secondaryOrder),
        ])
    UpdateOrder._ext = None
    
    #-----< ApplicationPDU >-----#
    ApplicationPDU = SEQ(name='ApplicationPDU', mode=MODE_TYPE)
    _ApplicationPDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareDataHeader')))
    _ApplicationPDU_action = INT(name='action', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ApplicationAction')))
    _ApplicationPDU_numberApplications = INT(name='numberApplications', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _ApplicationPDU_windowID = INT(name='windowID', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'WindowID')))
    ApplicationPDU._cont = ASN1Dict([
        ('shareDataHeader', _ApplicationPDU_shareDataHeader),
        ('action', _ApplicationPDU_action),
        ('numberApplications', _ApplicationPDU_numberApplications),
        ('windowID', _ApplicationPDU_windowID),
        ])
    ApplicationPDU._ext = None
    
    #-----< ConfirmActivePDU >-----#
    ConfirmActivePDU = SEQ(name='ConfirmActivePDU', mode=MODE_TYPE)
    _ConfirmActivePDU_shareControlHeader = SEQ(name='shareControlHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareControlHeader')))
    _ConfirmActivePDU_shareID = INT(name='shareID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareID')))
    _ConfirmActivePDU_originatorID = INT(name='originatorID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'UserID')))
    _ConfirmActivePDU_lengthSourceDescriptor = INT(name='lengthSourceDescriptor', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _ConfirmActivePDU_lengthSourceDescriptor._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=48)], ev=None, er=[])
    _ConfirmActivePDU_lengthCombinedCapabilities = INT(name='lengthCombinedCapabilities', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _ConfirmActivePDU_sourceDescriptor = OCT_STR(name='sourceDescriptor', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'T50String')))
    _ConfirmActivePDU_sourceDescriptor._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=48)], ev=None, er=[])
    _ConfirmActivePDU_combinedCapabilities = SEQ(name='combinedCapabilities', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'CombinedCapabilities')))
    ConfirmActivePDU._cont = ASN1Dict([
        ('shareControlHeader', _ConfirmActivePDU_shareControlHeader),
        ('shareID', _ConfirmActivePDU_shareID),
        ('originatorID', _ConfirmActivePDU_originatorID),
        ('lengthSourceDescriptor', _ConfirmActivePDU_lengthSourceDescriptor),
        ('lengthCombinedCapabilities', _ConfirmActivePDU_lengthCombinedCapabilities),
        ('sourceDescriptor', _ConfirmActivePDU_sourceDescriptor),
        ('combinedCapabilities', _ConfirmActivePDU_combinedCapabilities),
        ])
    ConfirmActivePDU._ext = None
    
    #-----< ControlPDU >-----#
    ControlPDU = SEQ(name='ControlPDU', mode=MODE_TYPE)
    _ControlPDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareDataHeader')))
    _ControlPDU_action = INT(name='action', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ControlAction')))
    _ControlPDU_grantID = INT(name='grantID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'UserID')))
    _ControlPDU_controlID = INT(name='controlID', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer32')))
    _ControlPDU_controlID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=2147483647)], ev=None, er=[])
    ControlPDU._cont = ASN1Dict([
        ('shareDataHeader', _ControlPDU_shareDataHeader),
        ('action', _ControlPDU_action),
        ('grantID', _ControlPDU_grantID),
        ('controlID', _ControlPDU_controlID),
        ])
    ControlPDU._ext = None
    
    #-----< DeactivateAllPDU >-----#
    DeactivateAllPDU = SEQ(name='DeactivateAllPDU', mode=MODE_TYPE)
    _DeactivateAllPDU_shareControlHeader = SEQ(name='shareControlHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareControlHeader')))
    _DeactivateAllPDU_shareID = INT(name='shareID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareID')))
    _DeactivateAllPDU_lengthSourceDescriptor = INT(name='lengthSourceDescriptor', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _DeactivateAllPDU_lengthSourceDescriptor._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=48)], ev=None, er=[])
    _DeactivateAllPDU_sourceDescriptor = OCT_STR(name='sourceDescriptor', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'T50String')))
    _DeactivateAllPDU_sourceDescriptor._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=48)], ev=None, er=[])
    DeactivateAllPDU._cont = ASN1Dict([
        ('shareControlHeader', _DeactivateAllPDU_shareControlHeader),
        ('shareID', _DeactivateAllPDU_shareID),
        ('lengthSourceDescriptor', _DeactivateAllPDU_lengthSourceDescriptor),
        ('sourceDescriptor', _DeactivateAllPDU_sourceDescriptor),
        ])
    DeactivateAllPDU._ext = None
    
    #-----< DeactivateOtherPDU >-----#
    DeactivateOtherPDU = SEQ(name='DeactivateOtherPDU', mode=MODE_TYPE)
    _DeactivateOtherPDU_shareControlHeader = SEQ(name='shareControlHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareControlHeader')))
    _DeactivateOtherPDU_shareID = INT(name='shareID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareID')))
    _DeactivateOtherPDU_deactivateID = INT(name='deactivateID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'UserID')))
    _DeactivateOtherPDU_lengthSourceDescriptor = INT(name='lengthSourceDescriptor', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _DeactivateOtherPDU_lengthSourceDescriptor._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=48)], ev=None, er=[])
    _DeactivateOtherPDU_sourceDescriptor = OCT_STR(name='sourceDescriptor', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'T50String')))
    _DeactivateOtherPDU_sourceDescriptor._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=48)], ev=None, er=[])
    DeactivateOtherPDU._cont = ASN1Dict([
        ('shareControlHeader', _DeactivateOtherPDU_shareControlHeader),
        ('shareID', _DeactivateOtherPDU_shareID),
        ('deactivateID', _DeactivateOtherPDU_deactivateID),
        ('lengthSourceDescriptor', _DeactivateOtherPDU_lengthSourceDescriptor),
        ('sourceDescriptor', _DeactivateOtherPDU_sourceDescriptor),
        ])
    DeactivateOtherPDU._ext = None
    
    #-----< DeactivateSelfPDU >-----#
    DeactivateSelfPDU = SEQ(name='DeactivateSelfPDU', mode=MODE_TYPE)
    _DeactivateSelfPDU_shareControlHeader = SEQ(name='shareControlHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareControlHeader')))
    _DeactivateSelfPDU_shareID = INT(name='shareID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareID')))
    DeactivateSelfPDU._cont = ASN1Dict([
        ('shareControlHeader', _DeactivateSelfPDU_shareControlHeader),
        ('shareID', _DeactivateSelfPDU_shareID),
        ])
    DeactivateSelfPDU._ext = None
    
    #-----< DemandActivePDU >-----#
    DemandActivePDU = SEQ(name='DemandActivePDU', mode=MODE_TYPE)
    _DemandActivePDU_shareControlHeader = SEQ(name='shareControlHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareControlHeader')))
    _DemandActivePDU_shareID = INT(name='shareID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareID')))
    _DemandActivePDU_lengthSourceDescriptor = INT(name='lengthSourceDescriptor', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _DemandActivePDU_lengthSourceDescriptor._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=48)], ev=None, er=[])
    _DemandActivePDU_lengthCombinedCapabilities = INT(name='lengthCombinedCapabilities', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _DemandActivePDU_sourceDescriptor = OCT_STR(name='sourceDescriptor', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'T50String')))
    _DemandActivePDU_sourceDescriptor._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=48)], ev=None, er=[])
    _DemandActivePDU_combinedCapabilities = SEQ(name='combinedCapabilities', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'CombinedCapabilities')))
    DemandActivePDU._cont = ASN1Dict([
        ('shareControlHeader', _DemandActivePDU_shareControlHeader),
        ('shareID', _DemandActivePDU_shareID),
        ('lengthSourceDescriptor', _DemandActivePDU_lengthSourceDescriptor),
        ('lengthCombinedCapabilities', _DemandActivePDU_lengthCombinedCapabilities),
        ('sourceDescriptor', _DemandActivePDU_sourceDescriptor),
        ('combinedCapabilities', _DemandActivePDU_combinedCapabilities),
        ])
    DemandActivePDU._ext = None
    
    #-----< FlowPDU >-----#
    FlowPDU = SEQ(name='FlowPDU', mode=MODE_TYPE)
    _FlowPDU_flowMarker = INT(name='flowMarker', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _FlowPDU_flowMarker._const_val = ASN1Set(rv=[32768], rr=[], ev=None, er=[])
    _FlowPDU_pad8bits = INT(name='pad8bits', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    _FlowPDU_pad8bits._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _FlowPDU_pduTypeFlow = INT(name='pduTypeFlow', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PDUTypeFlow')))
    _FlowPDU_pduTypeFlow._const_val = ASN1Set(rv=[66, 67, 65], rr=[], ev=None, er=[])
    _FlowPDU_flowIdentifier = INT(name='flowIdentifier', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    _FlowPDU_flowIdentifier._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=None, er=[])
    _FlowPDU_flowNumber = INT(name='flowNumber', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer8')))
    _FlowPDU_pduSource = INT(name='pduSource', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'UserID')))
    FlowPDU._cont = ASN1Dict([
        ('flowMarker', _FlowPDU_flowMarker),
        ('pad8bits', _FlowPDU_pad8bits),
        ('pduTypeFlow', _FlowPDU_pduTypeFlow),
        ('flowIdentifier', _FlowPDU_flowIdentifier),
        ('flowNumber', _FlowPDU_flowNumber),
        ('pduSource', _FlowPDU_pduSource),
        ])
    FlowPDU._ext = None
    
    #-----< FontPDU >-----#
    FontPDU = SEQ(name='FontPDU', mode=MODE_TYPE)
    _FontPDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareDataHeader')))
    _FontPDU_numberFonts = INT(name='numberFonts', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _FontPDU_numberFonts._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=700)], ev=None, er=[])
    _FontPDU_entrySize = INT(name='entrySize', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _FontPDU_fontList = SEQ_OF(name='fontList', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __FontPDU_fontList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'FontAttribute')))
    _FontPDU_fontList._cont = __FontPDU_fontList__item_
    _FontPDU_fontList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=700)], ev=None, er=[])
    FontPDU._cont = ASN1Dict([
        ('shareDataHeader', _FontPDU_shareDataHeader),
        ('numberFonts', _FontPDU_numberFonts),
        ('entrySize', _FontPDU_entrySize),
        ('fontList', _FontPDU_fontList),
        ])
    FontPDU._ext = None
    
    #-----< InputPDU >-----#
    InputPDU = SEQ(name='InputPDU', mode=MODE_TYPE)
    _InputPDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareDataHeader')))
    _InputPDU_numberEvents = INT(name='numberEvents', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _InputPDU_pad2octets = INT(name='pad2octets', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _InputPDU_pad2octets._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _InputPDU_eventList = SEQ_OF(name='eventList', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __InputPDU_eventList__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'InputEvent')))
    _InputPDU_eventList._cont = __InputPDU_eventList__item_
    _InputPDU_eventList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=50)], ev=None, er=[])
    InputPDU._cont = ASN1Dict([
        ('shareDataHeader', _InputPDU_shareDataHeader),
        ('numberEvents', _InputPDU_numberEvents),
        ('pad2octets', _InputPDU_pad2octets),
        ('eventList', _InputPDU_eventList),
        ])
    InputPDU._ext = None
    
    #-----< MediatedControlPDU >-----#
    MediatedControlPDU = SEQ(name='MediatedControlPDU', mode=MODE_TYPE)
    _MediatedControlPDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareDataHeader')))
    _MediatedControlPDU_action = INT(name='action', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'MediatedControlAction')))
    _MediatedControlPDU_passControlFlag = INT(name='passControlFlag', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Boolean16')))
    _MediatedControlPDU_sendingReference = INT(name='sendingReference', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _MediatedControlPDU_originatorReference = INT(name='originatorReference', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _MediatedControlPDU_originatorID = INT(name='originatorID', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'UserID')))
    MediatedControlPDU._cont = ASN1Dict([
        ('shareDataHeader', _MediatedControlPDU_shareDataHeader),
        ('action', _MediatedControlPDU_action),
        ('passControlFlag', _MediatedControlPDU_passControlFlag),
        ('sendingReference', _MediatedControlPDU_sendingReference),
        ('originatorReference', _MediatedControlPDU_originatorReference),
        ('originatorID', _MediatedControlPDU_originatorID),
        ])
    MediatedControlPDU._ext = None
    
    #-----< PointerPDU >-----#
    PointerPDU = SEQ(name='PointerPDU', mode=MODE_TYPE)
    _PointerPDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareDataHeader')))
    _PointerPDU_messageType = INT(name='messageType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PointerMessageType')))
    _PointerPDU_pad2octets = INT(name='pad2octets', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _PointerPDU_pad2octets._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _PointerPDU_pointerData = CHOICE(name='pointerData', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __PointerPDU_pointerData_systemPointerType = INT(name='systemPointerType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'SystemPointerType')))
    __PointerPDU_pointerData_monoPointerAttribute = SEQ(name='monoPointerAttribute', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'MonoPointerAttribute')))
    __PointerPDU_pointerData_colorPointerAttribute = SEQ(name='colorPointerAttribute', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ColorPointerAttribute')))
    __PointerPDU_pointerData_cachedPointerIndex = INT(name='cachedPointerIndex', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    __PointerPDU_pointerData_pointerPosition = SEQ(name='pointerPosition', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Point16')))
    _PointerPDU_pointerData._cont = ASN1Dict([
        ('systemPointerType', __PointerPDU_pointerData_systemPointerType),
        ('monoPointerAttribute', __PointerPDU_pointerData_monoPointerAttribute),
        ('colorPointerAttribute', __PointerPDU_pointerData_colorPointerAttribute),
        ('cachedPointerIndex', __PointerPDU_pointerData_cachedPointerIndex),
        ('pointerPosition', __PointerPDU_pointerData_pointerPosition),
        ])
    _PointerPDU_pointerData._ext = None
    PointerPDU._cont = ASN1Dict([
        ('shareDataHeader', _PointerPDU_shareDataHeader),
        ('messageType', _PointerPDU_messageType),
        ('pad2octets', _PointerPDU_pad2octets),
        ('pointerData', _PointerPDU_pointerData),
        ])
    PointerPDU._ext = None
    
    #-----< RemoteSharePDU >-----#
    RemoteSharePDU = SEQ(name='RemoteSharePDU', mode=MODE_TYPE)
    _RemoteSharePDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareDataHeader')))
    _RemoteSharePDU_action = INT(name='action', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'RemoteShareAction')))
    _RemoteSharePDU_additionalData = CHOICE(name='additionalData', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __RemoteSharePDU_additionalData_requestingID = INT(name='requestingID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'UserID')))
    __RemoteSharePDU_additionalData_pad2octets = INT(name='pad2octets', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    __RemoteSharePDU_additionalData_pad2octets._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    __RemoteSharePDU_additionalData_denialCode = INT(name='denialCode', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'RemoteShareDenial')))
    _RemoteSharePDU_additionalData._cont = ASN1Dict([
        ('requestingID', __RemoteSharePDU_additionalData_requestingID),
        ('pad2octets', __RemoteSharePDU_additionalData_pad2octets),
        ('denialCode', __RemoteSharePDU_additionalData_denialCode),
        ])
    _RemoteSharePDU_additionalData._ext = None
    _RemoteSharePDU_encryptedPassword = OCT_STR(name='encryptedPassword', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RemoteSharePDU_encryptedPassword._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=9)], ev=None, er=[])
    RemoteSharePDU._cont = ASN1Dict([
        ('shareDataHeader', _RemoteSharePDU_shareDataHeader),
        ('action', _RemoteSharePDU_action),
        ('additionalData', _RemoteSharePDU_additionalData),
        ('encryptedPassword', _RemoteSharePDU_encryptedPassword),
        ])
    RemoteSharePDU._ext = None
    
    #-----< RequestActivePDU >-----#
    RequestActivePDU = SEQ(name='RequestActivePDU', mode=MODE_TYPE)
    _RequestActivePDU_shareControlHeader = SEQ(name='shareControlHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareControlHeader')))
    _RequestActivePDU_lengthSourceDescriptor = INT(name='lengthSourceDescriptor', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _RequestActivePDU_lengthSourceDescriptor._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=48)], ev=None, er=[])
    _RequestActivePDU_lengthCombinedCapabilities = INT(name='lengthCombinedCapabilities', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _RequestActivePDU_sourceDescriptor = OCT_STR(name='sourceDescriptor', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'T50String')))
    _RequestActivePDU_sourceDescriptor._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=48)], ev=None, er=[])
    _RequestActivePDU_combinedCapabilities = SEQ(name='combinedCapabilities', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'CombinedCapabilities')))
    RequestActivePDU._cont = ASN1Dict([
        ('shareControlHeader', _RequestActivePDU_shareControlHeader),
        ('lengthSourceDescriptor', _RequestActivePDU_lengthSourceDescriptor),
        ('lengthCombinedCapabilities', _RequestActivePDU_lengthCombinedCapabilities),
        ('sourceDescriptor', _RequestActivePDU_sourceDescriptor),
        ('combinedCapabilities', _RequestActivePDU_combinedCapabilities),
        ])
    RequestActivePDU._ext = None
    
    #-----< SynchronizePDU >-----#
    SynchronizePDU = SEQ(name='SynchronizePDU', mode=MODE_TYPE)
    _SynchronizePDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareDataHeader')))
    _SynchronizePDU_messageType = INT(name='messageType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'SynchronizeMessageType')))
    _SynchronizePDU_targetUser = INT(name='targetUser', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'UserID')))
    SynchronizePDU._cont = ASN1Dict([
        ('shareDataHeader', _SynchronizePDU_shareDataHeader),
        ('messageType', _SynchronizePDU_messageType),
        ('targetUser', _SynchronizePDU_targetUser),
        ])
    SynchronizePDU._ext = None
    
    #-----< UpdateBitmapPDU >-----#
    UpdateBitmapPDU = SEQ(name='UpdateBitmapPDU', mode=MODE_TYPE)
    _UpdateBitmapPDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareDataHeader')))
    _UpdateBitmapPDU_updateType = INT(name='updateType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'UpdateType')))
    _UpdateBitmapPDU_updateType._const_val = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    _UpdateBitmapPDU_pad2octets = INT(name='pad2octets', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _UpdateBitmapPDU_pad2octets._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _UpdateBitmapPDU_destLeft = INT(name='destLeft', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate16')))
    _UpdateBitmapPDU_destTop = INT(name='destTop', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate16')))
    _UpdateBitmapPDU_destRight = INT(name='destRight', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate16')))
    _UpdateBitmapPDU_destBottom = INT(name='destBottom', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Coordinate16')))
    _UpdateBitmapPDU_width = INT(name='width', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _UpdateBitmapPDU_height = INT(name='height', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _UpdateBitmapPDU_bitsPerPixel = INT(name='bitsPerPixel', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _UpdateBitmapPDU_bitsPerPixel._const_val = ASN1Set(rv=[1, 4, 8], rr=[], ev=None, er=[])
    _UpdateBitmapPDU_compressedFlag = INT(name='compressedFlag', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Boolean16')))
    _UpdateBitmapPDU_bitmapLength = INT(name='bitmapLength', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _UpdateBitmapPDU_bitmapData = CHOICE(name='bitmapData', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'BitmapData')))
    UpdateBitmapPDU._cont = ASN1Dict([
        ('shareDataHeader', _UpdateBitmapPDU_shareDataHeader),
        ('updateType', _UpdateBitmapPDU_updateType),
        ('pad2octets', _UpdateBitmapPDU_pad2octets),
        ('destLeft', _UpdateBitmapPDU_destLeft),
        ('destTop', _UpdateBitmapPDU_destTop),
        ('destRight', _UpdateBitmapPDU_destRight),
        ('destBottom', _UpdateBitmapPDU_destBottom),
        ('width', _UpdateBitmapPDU_width),
        ('height', _UpdateBitmapPDU_height),
        ('bitsPerPixel', _UpdateBitmapPDU_bitsPerPixel),
        ('compressedFlag', _UpdateBitmapPDU_compressedFlag),
        ('bitmapLength', _UpdateBitmapPDU_bitmapLength),
        ('bitmapData', _UpdateBitmapPDU_bitmapData),
        ])
    UpdateBitmapPDU._ext = None
    
    #-----< UpdateCapabilityPDU >-----#
    UpdateCapabilityPDU = SEQ(name='UpdateCapabilityPDU', mode=MODE_TYPE)
    _UpdateCapabilityPDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareDataHeader')))
    _UpdateCapabilityPDU_updateCapabilitySet = CHOICE(name='updateCapabilitySet', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'UpdateCapabilitySet')))
    UpdateCapabilityPDU._cont = ASN1Dict([
        ('shareDataHeader', _UpdateCapabilityPDU_shareDataHeader),
        ('updateCapabilitySet', _UpdateCapabilityPDU_updateCapabilitySet),
        ])
    UpdateCapabilityPDU._ext = None
    
    #-----< UpdateOrdersPDU >-----#
    UpdateOrdersPDU = SEQ(name='UpdateOrdersPDU', mode=MODE_TYPE)
    _UpdateOrdersPDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareDataHeader')))
    _UpdateOrdersPDU_updateType = INT(name='updateType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'UpdateType')))
    _UpdateOrdersPDU_updateType._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _UpdateOrdersPDU_pad2octetsA = INT(name='pad2octetsA', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _UpdateOrdersPDU_pad2octetsA._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _UpdateOrdersPDU_numberOrders = INT(name='numberOrders', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _UpdateOrdersPDU_pad2octetsB = INT(name='pad2octetsB', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _UpdateOrdersPDU_pad2octetsB._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _UpdateOrdersPDU_orderList = SEQ_OF(name='orderList', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __UpdateOrdersPDU_orderList__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'UpdateOrder')))
    _UpdateOrdersPDU_orderList._cont = __UpdateOrdersPDU_orderList__item_
    UpdateOrdersPDU._cont = ASN1Dict([
        ('shareDataHeader', _UpdateOrdersPDU_shareDataHeader),
        ('updateType', _UpdateOrdersPDU_updateType),
        ('pad2octetsA', _UpdateOrdersPDU_pad2octetsA),
        ('numberOrders', _UpdateOrdersPDU_numberOrders),
        ('pad2octetsB', _UpdateOrdersPDU_pad2octetsB),
        ('orderList', _UpdateOrdersPDU_orderList),
        ])
    UpdateOrdersPDU._ext = None
    
    #-----< UpdatePalettePDU >-----#
    UpdatePalettePDU = SEQ(name='UpdatePalettePDU', mode=MODE_TYPE)
    _UpdatePalettePDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareDataHeader')))
    _UpdatePalettePDU_updateType = INT(name='updateType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'UpdateType')))
    _UpdatePalettePDU_updateType._const_val = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _UpdatePalettePDU_pad2octets = INT(name='pad2octets', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _UpdatePalettePDU_pad2octets._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    _UpdatePalettePDU_numberColors = INT(name='numberColors', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer32')))
    _UpdatePalettePDU_numberColors._const_val = ASN1Set(rv=[16, 256], rr=[], ev=None, er=[])
    _UpdatePalettePDU_palette = SEQ_OF(name='palette', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __UpdatePalettePDU_palette__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Color')))
    _UpdatePalettePDU_palette._cont = __UpdatePalettePDU_palette__item_
    _UpdatePalettePDU_palette._const_sz = ASN1Set(rv=[16, 256], rr=[], ev=None, er=[])
    UpdatePalettePDU._cont = ASN1Dict([
        ('shareDataHeader', _UpdatePalettePDU_shareDataHeader),
        ('updateType', _UpdatePalettePDU_updateType),
        ('pad2octets', _UpdatePalettePDU_pad2octets),
        ('numberColors', _UpdatePalettePDU_numberColors),
        ('palette', _UpdatePalettePDU_palette),
        ])
    UpdatePalettePDU._ext = None
    
    #-----< UpdateSynchronizePDU >-----#
    UpdateSynchronizePDU = SEQ(name='UpdateSynchronizePDU', mode=MODE_TYPE)
    _UpdateSynchronizePDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareDataHeader')))
    _UpdateSynchronizePDU_updateType = INT(name='updateType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'UpdateType')))
    _UpdateSynchronizePDU_updateType._const_val = ASN1Set(rv=[3], rr=[], ev=None, er=[])
    _UpdateSynchronizePDU_pad2octets = INT(name='pad2octets', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _UpdateSynchronizePDU_pad2octets._const_val = ASN1Set(rv=[0], rr=[], ev=None, er=[])
    UpdateSynchronizePDU._cont = ASN1Dict([
        ('shareDataHeader', _UpdateSynchronizePDU_shareDataHeader),
        ('updateType', _UpdateSynchronizePDU_updateType),
        ('pad2octets', _UpdateSynchronizePDU_pad2octets),
        ])
    UpdateSynchronizePDU._ext = None
    
    #-----< WindowActivationPDU >-----#
    WindowActivationPDU = SEQ(name='WindowActivationPDU', mode=MODE_TYPE)
    _WindowActivationPDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareDataHeader')))
    _WindowActivationPDU_action = INT(name='action', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'WindowActivationAction')))
    _WindowActivationPDU_activationID = INT(name='activationID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _WindowActivationPDU_activationWindow = INT(name='activationWindow', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'WindowID')))
    _WindowActivationPDU_activationPoint = SEQ(name='activationPoint', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Point16')))
    WindowActivationPDU._cont = ASN1Dict([
        ('shareDataHeader', _WindowActivationPDU_shareDataHeader),
        ('action', _WindowActivationPDU_action),
        ('activationID', _WindowActivationPDU_activationID),
        ('activationWindow', _WindowActivationPDU_activationWindow),
        ('activationPoint', _WindowActivationPDU_activationPoint),
        ])
    WindowActivationPDU._ext = None
    
    #-----< WindowListPDU >-----#
    WindowListPDU = SEQ(name='WindowListPDU', mode=MODE_TYPE)
    _WindowListPDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ShareDataHeader')))
    _WindowListPDU_messageType = INT(name='messageType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'WindowListMessageType')))
    _WindowListPDU_pad2octetsA = INT(name='pad2octetsA', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _WindowListPDU_numberWindows = INT(name='numberWindows', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _WindowListPDU_listTime = INT(name='listTime', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _WindowListPDU_listID = INT(name='listID', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _WindowListPDU_pad2octetsB = INT(name='pad2octetsB', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'Integer16')))
    _WindowListPDU_windowAttributeList = SEQ_OF(name='windowAttributeList', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __WindowListPDU_windowAttributeList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'WindowAttribute')))
    _WindowListPDU_windowAttributeList._cont = __WindowListPDU_windowAttributeList__item_
    _WindowListPDU_windowTitleList = SEQ_OF(name='windowTitleList', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __WindowListPDU_windowTitleList__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'WindowTitle')))
    _WindowListPDU_windowTitleList._cont = __WindowListPDU_windowTitleList__item_
    WindowListPDU._cont = ASN1Dict([
        ('shareDataHeader', _WindowListPDU_shareDataHeader),
        ('messageType', _WindowListPDU_messageType),
        ('pad2octetsA', _WindowListPDU_pad2octetsA),
        ('numberWindows', _WindowListPDU_numberWindows),
        ('listTime', _WindowListPDU_listTime),
        ('listID', _WindowListPDU_listID),
        ('pad2octetsB', _WindowListPDU_pad2octetsB),
        ('windowAttributeList', _WindowListPDU_windowAttributeList),
        ('windowTitleList', _WindowListPDU_windowTitleList),
        ])
    WindowListPDU._ext = None
    
    #-----< SharePDU >-----#
    SharePDU = CHOICE(name='SharePDU', mode=MODE_TYPE)
    _SharePDU_applicationPDU = SEQ(name='applicationPDU', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ApplicationPDU')))
    _SharePDU_confirmActivePDU = SEQ(name='confirmActivePDU', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ConfirmActivePDU')))
    _SharePDU_controlPDU = SEQ(name='controlPDU', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'ControlPDU')))
    _SharePDU_deactivateAllPDU = SEQ(name='deactivateAllPDU', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'DeactivateAllPDU')))
    _SharePDU_deactivateOtherPDU = SEQ(name='deactivateOtherPDU', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'DeactivateOtherPDU')))
    _SharePDU_deactivateSelfPDU = SEQ(name='deactivateSelfPDU', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'DeactivateSelfPDU')))
    _SharePDU_demandActivePDU = SEQ(name='demandActivePDU', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'DemandActivePDU')))
    _SharePDU_flowPDU = SEQ(name='flowPDU', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'FlowPDU')))
    _SharePDU_fontPDU = SEQ(name='fontPDU', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'FontPDU')))
    _SharePDU_inputPDU = SEQ(name='inputPDU', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'InputPDU')))
    _SharePDU_mediatedControlPDU = SEQ(name='mediatedControlPDU', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'MediatedControlPDU')))
    _SharePDU_pointerPDU = SEQ(name='pointerPDU', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'PointerPDU')))
    _SharePDU_remoteSharePDU = SEQ(name='remoteSharePDU', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'RemoteSharePDU')))
    _SharePDU_requestActivePDU = SEQ(name='requestActivePDU', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'RequestActivePDU')))
    _SharePDU_synchronizePDU = SEQ(name='synchronizePDU', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'SynchronizePDU')))
    _SharePDU_updateCapabilityPDU = SEQ(name='updateCapabilityPDU', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'UpdateCapabilityPDU')))
    _SharePDU_updateBitmapPDU = SEQ(name='updateBitmapPDU', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'UpdateBitmapPDU')))
    _SharePDU_updateOrdersPDU = SEQ(name='updateOrdersPDU', mode=MODE_TYPE, tag=(17, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'UpdateOrdersPDU')))
    _SharePDU_updateSynchronizePDU = SEQ(name='updateSynchronizePDU', mode=MODE_TYPE, tag=(18, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'UpdateSynchronizePDU')))
    _SharePDU_updatePalettePDU = SEQ(name='updatePalettePDU', mode=MODE_TYPE, tag=(19, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'UpdatePalettePDU')))
    _SharePDU_windowActivationPDU = SEQ(name='windowActivationPDU', mode=MODE_TYPE, tag=(20, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'WindowActivationPDU')))
    _SharePDU_windowListPDU = SEQ(name='windowListPDU', mode=MODE_TYPE, tag=(21, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-legacy-mode', 'WindowListPDU')))
    SharePDU._cont = ASN1Dict([
        ('applicationPDU', _SharePDU_applicationPDU),
        ('confirmActivePDU', _SharePDU_confirmActivePDU),
        ('controlPDU', _SharePDU_controlPDU),
        ('deactivateAllPDU', _SharePDU_deactivateAllPDU),
        ('deactivateOtherPDU', _SharePDU_deactivateOtherPDU),
        ('deactivateSelfPDU', _SharePDU_deactivateSelfPDU),
        ('demandActivePDU', _SharePDU_demandActivePDU),
        ('flowPDU', _SharePDU_flowPDU),
        ('fontPDU', _SharePDU_fontPDU),
        ('inputPDU', _SharePDU_inputPDU),
        ('mediatedControlPDU', _SharePDU_mediatedControlPDU),
        ('pointerPDU', _SharePDU_pointerPDU),
        ('remoteSharePDU', _SharePDU_remoteSharePDU),
        ('requestActivePDU', _SharePDU_requestActivePDU),
        ('synchronizePDU', _SharePDU_synchronizePDU),
        ('updateCapabilityPDU', _SharePDU_updateCapabilityPDU),
        ('updateBitmapPDU', _SharePDU_updateBitmapPDU),
        ('updateOrdersPDU', _SharePDU_updateOrdersPDU),
        ('updateSynchronizePDU', _SharePDU_updateSynchronizePDU),
        ('updatePalettePDU', _SharePDU_updatePalettePDU),
        ('windowActivationPDU', _SharePDU_windowActivationPDU),
        ('windowListPDU', _SharePDU_windowListPDU),
        ])
    SharePDU._ext = None
    
    _all_ = [
        maxSourceDescriptor,
        maxTerminalDescriptor,
        maxFonts,
        maxPassword,
        maxFaceName,
        maxTitleString,
        maxInputEvents,
        BitString8,
        BitString16,
        BitString32,
        Coordinate8,
        Coordinate16,
        Integer4,
        Integer8,
        Integer12,
        Integer16,
        Integer32,
        Boolean16,
        UserID,
        ShareID,
        WindowID,
        T50String,
        ASString,
        BitmapCompressionCapabilityFlags,
        BoundsOrderFlags,
        ControlCapabilityFlags,
        ControlOrderFlags,
        ExtraOrderFlags,
        ExtraTextFlags,
        FontAttributeFlags,
        KeyboardFlags,
        OrderCapabilityFlags,
        PointingDeviceFlags,
        TextAttributeFlags,
        TextCapabilityFlags,
        WindowAttributeFlags,
        ApplicationAction,
        BackgroundMixMode,
        _BitmapData_uncompressedBitmapData,
        _BitmapData_compressedBitmapData,
        BitmapData,
        _Brush_originX,
        _Brush_originY,
        _Brush_style,
        _Brush_hatch,
        _Brush_pattern,
        Brush,
        _BrushHatch_style,
        _BrushHatch_patternZero,
        BrushHatch,
        BrushStyle,
        _Color_red,
        _Color_green,
        _Color_blue,
        Color,
        _ColorQuad_blue,
        _ColorQuad_green,
        _ColorQuad_red,
        _ColorQuad_pad1octet,
        ColorQuad,
        _ColorPointerAttribute_cacheIndex,
        _ColorPointerAttribute_hotSpot,
        _ColorPointerAttribute_width,
        _ColorPointerAttribute_height,
        _ColorPointerAttribute_lengthANDMAsk,
        _ColorPointerAttribute_lengthXORMAsk,
        _ColorPointerAttribute_colorPointerData,
        ColorPointerAttribute,
        _CompressedBitmapData_pad2octets,
        _CompressedBitmapData_mainBodySize,
        _CompressedBitmapData_rowSize,
        _CompressedBitmapData_uncompressedSize,
        _CompressedBitmapData_compressedBitmap,
        CompressedBitmapData,
        ControlAction,
        ControlPriority,
        _Coordinate_absolute,
        _Coordinate_delta,
        Coordinate,
        DesktopSaveAction,
        _FontAttribute_faceName,
        _FontAttribute_fontFlags,
        _FontAttribute_averageWidth,
        _FontAttribute_height,
        _FontAttribute_aspectX,
        _FontAttribute_aspectY,
        _FontAttribute_signature1,
        _FontAttribute_signature2,
        _FontAttribute_signature3,
        _FontAttribute_codePage,
        _FontAttribute_ascent,
        FontAttribute,
        FontCodePage,
        HatchStyle,
        InputMessageType,
        MediatedControlAction,
        _MonoPointerAttribute_hotSpot,
        _MonoPointerAttribute_width,
        _MonoPointerAttribute_height,
        _MonoPointerAttribute_lengthPointerData,
        _MonoPointerAttribute_monoPointerData,
        MonoPointerAttribute,
        OSMajorType,
        OSMinorType,
        PDUType,
        PDUType2,
        PDUTypeFlow,
        _Pen_style,
        _Pen_width,
        _Pen_color,
        Pen,
        PenStyle,
        _Point16_x,
        _Point16_y,
        Point16,
        PointerMessageType,
        PrimaryOrderType,
        _Rectangle16_left,
        _Rectangle16_top,
        _Rectangle16_right,
        _Rectangle16_bottom,
        Rectangle16,
        RemoteShareAction,
        RemoteShareDenial,
        ROP2,
        ROP3,
        SecondaryOrderType,
        StreamID,
        SynchronizeMessageType,
        SystemPointerType,
        UpdateType,
        WindowActivationAction,
        _WindowAttribute_windowID,
        _WindowAttribute_windowExtra,
        _WindowAttribute_windowOwner,
        _WindowAttribute_windowFlags,
        _WindowAttribute_windowRectangle,
        WindowAttribute,
        WindowListMessageType,
        _WindowTitle_noTitle,
        _WindowTitle_titleString,
        WindowTitle,
        CapabilitySetType,
        _GeneralCapabilitySet_capabilitySetType,
        _GeneralCapabilitySet_lengthCapability,
        _GeneralCapabilitySet_osMajorType,
        _GeneralCapabilitySet_osMinorType,
        _GeneralCapabilitySet_protocolVersion,
        _GeneralCapabilitySet_pad2octetsA,
        _GeneralCapabilitySet_generalCompressionTypes,
        _GeneralCapabilitySet_pad2octetsB,
        _GeneralCapabilitySet_updatecapabilityFlag,
        _GeneralCapabilitySet_remoteUnshareFlag,
        _GeneralCapabilitySet_generalCompressionLevel,
        _GeneralCapabilitySet_pad2octetsC,
        GeneralCapabilitySet,
        _BitmapCapabilitySet_capabilitySetType,
        _BitmapCapabilitySet_lengthCapability,
        _BitmapCapabilitySet_preferredBitsPerPixel,
        _BitmapCapabilitySet_receive1BitPerPixelFlag,
        _BitmapCapabilitySet_receive4BitsPerPixelFlag,
        _BitmapCapabilitySet_receive8BitsPerPixelFlag,
        _BitmapCapabilitySet_desktopWidth,
        _BitmapCapabilitySet_desktopHeight,
        _BitmapCapabilitySet_pad2octetsA,
        _BitmapCapabilitySet_desktopResizeFlag,
        _BitmapCapabilitySet_bitmapCompressionType,
        _BitmapCapabilitySet_pad2octetsC,
        BitmapCapabilitySet,
        _OrderCapabilitySet_capabilitySetType,
        _OrderCapabilitySet_lengthCapability,
        _OrderCapabilitySet_terminalDescriptor,
        _OrderCapabilitySet_pad4octetsA,
        _OrderCapabilitySet_desktopXGranularity,
        _OrderCapabilitySet_desktopYGranularity,
        _OrderCapabilitySet_pad2octetsA,
        _OrderCapabilitySet_maximumOrderLevel,
        _OrderCapabilitySet_numberFonts,
        _OrderCapabilitySet_orderFlags,
        __OrderCapabilitySet_orderSupport_destinationBltSupport,
        __OrderCapabilitySet_orderSupport_patternBltSupport,
        __OrderCapabilitySet_orderSupport_screenBltSupport,
        __OrderCapabilitySet_orderSupport_memoryBltSupport,
        __OrderCapabilitySet_orderSupport_memoryThreeWayBltSupport,
        __OrderCapabilitySet_orderSupport_textSupport,
        __OrderCapabilitySet_orderSupport_extendedTextSupport,
        __OrderCapabilitySet_orderSupport_rectangleSupport,
        __OrderCapabilitySet_orderSupport_lineSupport,
        __OrderCapabilitySet_orderSupport_frameSupport,
        __OrderCapabilitySet_orderSupport_opaqueRectangleSupport,
        __OrderCapabilitySet_orderSupport_desktopSaveSupport,
        __OrderCapabilitySet_orderSupport_undefinedOrder12,
        __OrderCapabilitySet_orderSupport_undefinedOrder13,
        __OrderCapabilitySet_orderSupport_undefinedOrder14,
        __OrderCapabilitySet_orderSupport_undefinedOrder15,
        __OrderCapabilitySet_orderSupport_undefinedOrder16,
        __OrderCapabilitySet_orderSupport_undefinedOrder17,
        __OrderCapabilitySet_orderSupport_undefinedOrder18,
        __OrderCapabilitySet_orderSupport_undefinedOrder19,
        __OrderCapabilitySet_orderSupport_undefinedOrder20,
        __OrderCapabilitySet_orderSupport_undefinedOrder21,
        __OrderCapabilitySet_orderSupport_undefinedOrder22,
        __OrderCapabilitySet_orderSupport_undefinedOrder23,
        __OrderCapabilitySet_orderSupport_undefinedOrder24,
        __OrderCapabilitySet_orderSupport_undefinedOrder25,
        __OrderCapabilitySet_orderSupport_undefinedOrder26,
        __OrderCapabilitySet_orderSupport_undefinedOrder27,
        __OrderCapabilitySet_orderSupport_undefinedOrder28,
        __OrderCapabilitySet_orderSupport_undefinedOrder29,
        __OrderCapabilitySet_orderSupport_undefinedOrder30,
        __OrderCapabilitySet_orderSupport_undefinedOrder31,
        _OrderCapabilitySet_orderSupport,
        _OrderCapabilitySet_textFlags,
        _OrderCapabilitySet_pad2octetsB,
        _OrderCapabilitySet_pad4octetsB,
        _OrderCapabilitySet_desktopSaveSize,
        _OrderCapabilitySet_pad4octetsC,
        OrderCapabilitySet,
        _BitmapCacheCapabilitySet_capabilitySetType,
        _BitmapCacheCapabilitySet_lengthCapability,
        _BitmapCacheCapabilitySet_pad4octetsA,
        _BitmapCacheCapabilitySet_pad4octetsB,
        _BitmapCacheCapabilitySet_pad4octetsC,
        _BitmapCacheCapabilitySet_pad4octetsD,
        _BitmapCacheCapabilitySet_pad4octetsE,
        _BitmapCacheCapabilitySet_pad4octetsF,
        _BitmapCacheCapabilitySet_cache1Entries,
        _BitmapCacheCapabilitySet_cache1MaximumCellSize,
        _BitmapCacheCapabilitySet_cache2Entries,
        _BitmapCacheCapabilitySet_cache2MaximumCellSize,
        _BitmapCacheCapabilitySet_cache3Entries,
        _BitmapCacheCapabilitySet_cache3MaximumCellSize,
        BitmapCacheCapabilitySet,
        _ColorCacheCapabilitySet_capabilitySetType,
        _ColorCacheCapabilitySet_lengthCapability,
        _ColorCacheCapabilitySet_colorTablecacheSize,
        _ColorCacheCapabilitySet_pad2octetsA,
        ColorCacheCapabilitySet,
        _ActivationCapabilitySet_capabilitySetType,
        _ActivationCapabilitySet_lengthCapability,
        _ActivationCapabilitySet_helpKeyFlag,
        _ActivationCapabilitySet_helpIndexKeyFlag,
        _ActivationCapabilitySet_helpExtendedKeyFlag,
        _ActivationCapabilitySet_windowActivateFlag,
        ActivationCapabilitySet,
        _ControlCapabilitySet_capabilitySetType,
        _ControlCapabilitySet_lengthCapability,
        _ControlCapabilitySet_controlFlags,
        _ControlCapabilitySet_remoteDetachFlag,
        _ControlCapabilitySet_controlInterest,
        _ControlCapabilitySet_detachInterest,
        ControlCapabilitySet,
        _PointerCapabilitySet_capabilitySetType,
        _PointerCapabilitySet_lengthCapability,
        _PointerCapabilitySet_colorPointerFlag,
        _PointerCapabilitySet_pointerCacheSize,
        PointerCapabilitySet,
        _ShareCapabilitySet_capabilitySetType,
        _ShareCapabilitySet_lengthCapability,
        _ShareCapabilitySet_nodeID,
        ShareCapabilitySet,
        _NonStandardCapabilitySet_capabilitySetType,
        _NonStandardCapabilitySet_lengthCapability,
        _NonStandardCapabilitySet_nonStandardParameters,
        NonStandardCapabilitySet,
        _CombinedCapabilities_numberCapabilities,
        _CombinedCapabilities_pad2octets,
        __CombinedCapabilities_combinedCapabilities_generalCapabilitySet,
        __CombinedCapabilities_combinedCapabilities_bitmapCapabilitySet,
        __CombinedCapabilities_combinedCapabilities_orderCapabilitySet,
        __CombinedCapabilities_combinedCapabilities_bitmapCacheCapabilitySet,
        __CombinedCapabilities_combinedCapabilities_colorCacheCapabilitySet,
        __CombinedCapabilities_combinedCapabilities_activationCapabilitySet,
        __CombinedCapabilities_combinedCapabilities_controlCapabilitySet,
        __CombinedCapabilities_combinedCapabilities_pointerCapabilitySet,
        __CombinedCapabilities_combinedCapabilities_shareCapabilitySet,
        __CombinedCapabilities_combinedCapabilities_nonStandardCapabilitySet,
        _CombinedCapabilities_combinedCapabilities,
        CombinedCapabilities,
        _UpdateCapabilitySet_bitmapCapabilitySet,
        UpdateCapabilitySet,
        _InputEvent_pointingDeviceEvent,
        _InputEvent_keyboardEvent,
        _InputEvent_synchronizeEvent,
        InputEvent,
        _KeyboardEvent_eventTime,
        _KeyboardEvent_messageType,
        _KeyboardEvent_keyboardFlags,
        _KeyboardEvent_keyCode,
        KeyboardEvent,
        _PointingDeviceEvent_eventTime,
        _PointingDeviceEvent_messageType,
        _PointingDeviceEvent_pointingDeviceFlags,
        _PointingDeviceEvent_pointingDeviceX,
        _PointingDeviceEvent_pointingDeviceY,
        PointingDeviceEvent,
        _SynchronizeEvent_eventTime,
        _SynchronizeEvent_messageType,
        SynchronizeEvent,
        _PrimaryOrderHeader_controlFlags,
        _PrimaryOrderHeader_orderType,
        __PrimaryOrderHeader_encodingFlags__item_,
        _PrimaryOrderHeader_encodingFlags,
        _PrimaryOrderHeader_boundsFlags,
        _PrimaryOrderHeader_boundsLeft,
        _PrimaryOrderHeader_boundsTop,
        _PrimaryOrderHeader_boundsRight,
        _PrimaryOrderHeader_boundsBottom,
        PrimaryOrderHeader,
        _SecondaryOrderHeader_controlFlags,
        _SecondaryOrderHeader_orderLength,
        _SecondaryOrderHeader_extraFlags,
        _SecondaryOrderHeader_orderType,
        SecondaryOrderHeader,
        _ShareControlHeader_totalLength,
        _ShareControlHeader_protocolVersion,
        _ShareControlHeader_pduType,
        _ShareControlHeader_pad1octet,
        _ShareControlHeader_pduSource,
        ShareControlHeader,
        _ShareDataHeader_shareControlHeader,
        _ShareDataHeader_shareID,
        _ShareDataHeader_pad1octet,
        _ShareDataHeader_streamID,
        _ShareDataHeader_uncompressedLength,
        _ShareDataHeader_pduType2,
        _ShareDataHeader_generalCompressedType,
        _ShareDataHeader_generalCompressedLength,
        ShareDataHeader,
        _DestinationBltOrder_header,
        _DestinationBltOrder_destLeft,
        _DestinationBltOrder_destTop,
        _DestinationBltOrder_destWidth,
        _DestinationBltOrder_destHeight,
        _DestinationBltOrder_rop3,
        DestinationBltOrder,
        _PatternBltOrder_header,
        _PatternBltOrder_destLeft,
        _PatternBltOrder_destTop,
        _PatternBltOrder_destWidth,
        _PatternBltOrder_destHeight,
        _PatternBltOrder_rop3,
        _PatternBltOrder_backgroundColor,
        _PatternBltOrder_foregroundColor,
        _PatternBltOrder_brush,
        PatternBltOrder,
        _ScreenBltOrder_header,
        _ScreenBltOrder_destLeft,
        _ScreenBltOrder_destTop,
        _ScreenBltOrder_destWidth,
        _ScreenBltOrder_destHeight,
        _ScreenBltOrder_rop3,
        _ScreenBltOrder_sourceX,
        _ScreenBltOrder_sourceY,
        ScreenBltOrder,
        _CacheBitmapOrder_header,
        _CacheBitmapOrder_cacheId,
        _CacheBitmapOrder_pad1octet,
        _CacheBitmapOrder_bitmapWidth,
        _CacheBitmapOrder_bitmapHeight,
        _CacheBitmapOrder_bitmapBitsPerPel,
        _CacheBitmapOrder_bitmapLength,
        _CacheBitmapOrder_cacheIndex,
        _CacheBitmapOrder_bitmapData,
        CacheBitmapOrder,
        _CacheColorTableOrder_header,
        _CacheColorTableOrder_cacheIndex,
        _CacheColorTableOrder_numberColors,
        __CacheColorTableOrder_colorTable__item_,
        _CacheColorTableOrder_colorTable,
        CacheColorTableOrder,
        _MemoryBltOrder_header,
        _MemoryBltOrder_colorTableCacheIndex,
        _MemoryBltOrder_bitmapCacheID,
        _MemoryBltOrder_destLeft,
        _MemoryBltOrder_destTop,
        _MemoryBltOrder_destWidth,
        _MemoryBltOrder_destHeight,
        _MemoryBltOrder_rop3,
        _MemoryBltOrder_sourceX,
        _MemoryBltOrder_sourceY,
        _MemoryBltOrder_bitmapCacheIndex,
        MemoryBltOrder,
        _MemoryThreeWayBltOrder_header,
        _MemoryThreeWayBltOrder_colorTableCacheIndex,
        _MemoryThreeWayBltOrder_bitmapCacheID,
        _MemoryThreeWayBltOrder_destLeft,
        _MemoryThreeWayBltOrder_destTop,
        _MemoryThreeWayBltOrder_destWidth,
        _MemoryThreeWayBltOrder_destHeight,
        _MemoryThreeWayBltOrder_rop3,
        _MemoryThreeWayBltOrder_sourceX,
        _MemoryThreeWayBltOrder_sourceY,
        _MemoryThreeWayBltOrder_backgroundColor,
        _MemoryThreeWayBltOrder_foregroundColor,
        _MemoryThreeWayBltOrder_brush,
        _MemoryThreeWayBltOrder_bitmapCacheIndex,
        MemoryThreeWayBltOrder,
        _TextOrder_header,
        _TextOrder_backMixMode,
        _TextOrder_startX,
        _TextOrder_startY,
        _TextOrder_backgroundColor,
        _TextOrder_foregroundColor,
        _TextOrder_extraSpacing,
        _TextOrder_totalBreakSpacing,
        _TextOrder_breakCount,
        _TextOrder_fontHeight,
        _TextOrder_fontWidth,
        _TextOrder_fontWeight,
        _TextOrder_textFlags,
        _TextOrder_fontID,
        _TextOrder_numberCodePoints,
        _TextOrder_codePointList,
        TextOrder,
        _ExtendedTextOrder_header,
        _ExtendedTextOrder_backMixMode,
        _ExtendedTextOrder_startX,
        _ExtendedTextOrder_startY,
        _ExtendedTextOrder_backgroundColor,
        _ExtendedTextOrder_foregroundColor,
        _ExtendedTextOrder_extraSpacing,
        _ExtendedTextOrder_totalBreakSpacing,
        _ExtendedTextOrder_breakCount,
        _ExtendedTextOrder_fontHeight,
        _ExtendedTextOrder_fontWidth,
        _ExtendedTextOrder_fontWeight,
        _ExtendedTextOrder_textFlags1,
        _ExtendedTextOrder_fontID,
        _ExtendedTextOrder_textFlags2,
        _ExtendedTextOrder_clipLeft,
        _ExtendedTextOrder_clipTop,
        _ExtendedTextOrder_clipRight,
        _ExtendedTextOrder_clipBottom,
        _ExtendedTextOrder_numberCodePoints,
        _ExtendedTextOrder_codePointList,
        _ExtendedTextOrder_numberDeltaX,
        __ExtendedTextOrder_deltaXList__item_,
        _ExtendedTextOrder_deltaXList,
        ExtendedTextOrder,
        _FrameOrder_header,
        _FrameOrder_destLeft,
        _FrameOrder_destTop,
        _FrameOrder_destWidth,
        _FrameOrder_destHeight,
        _FrameOrder_rop3,
        _FrameOrder_backgroundColor,
        _FrameOrder_foregroundColor,
        _FrameOrder_brush,
        FrameOrder,
        _RectangleOrder_header,
        _RectangleOrder_backMixMode,
        _RectangleOrder_destLeft,
        _RectangleOrder_destTop,
        _RectangleOrder_destRight,
        _RectangleOrder_destBottom,
        _RectangleOrder_backgroundColor,
        _RectangleOrder_foregroundColor,
        _RectangleOrder_brush,
        _RectangleOrder_rop2,
        _RectangleOrder_pen,
        RectangleOrder,
        _OpaqueRectangleOrder_header,
        _OpaqueRectangleOrder_destLeft,
        _OpaqueRectangleOrder_destTop,
        _OpaqueRectangleOrder_destWidth,
        _OpaqueRectangleOrder_destHeight,
        _OpaqueRectangleOrder_color,
        OpaqueRectangleOrder,
        _LineOrder_header,
        _LineOrder_backMixMode,
        _LineOrder_startX,
        _LineOrder_startY,
        _LineOrder_endX,
        _LineOrder_endY,
        _LineOrder_backgroundColor,
        _LineOrder_rop2,
        _LineOrder_pen,
        LineOrder,
        _DesktopSaveOrder_header,
        _DesktopSaveOrder_saveOffset,
        _DesktopSaveOrder_destLeft,
        _DesktopSaveOrder_destTop,
        _DesktopSaveOrder_destWidth,
        _DesktopSaveOrder_destHeight,
        _DesktopSaveOrder_action,
        DesktopSaveOrder,
        _DesktopOriginOrder_header,
        _DesktopOriginOrder_desktopLeft,
        _DesktopOriginOrder_desktopTop,
        DesktopOriginOrder,
        _PrimaryOrder_destinationBlt,
        _PrimaryOrder_patternBlt,
        _PrimaryOrder_screenBlt,
        _PrimaryOrder_memoryBlt,
        _PrimaryOrder_memoryThreeWayBlt,
        _PrimaryOrder_text,
        _PrimaryOrder_extendedText,
        _PrimaryOrder_frame,
        _PrimaryOrder_rectangle,
        _PrimaryOrder_line,
        _PrimaryOrder_opaqueRectangle,
        _PrimaryOrder_desktopSave,
        _PrimaryOrder_desktopOrigin,
        PrimaryOrder,
        _SecondaryOrder_cacheBitmap,
        _SecondaryOrder_cacheColorTable,
        SecondaryOrder,
        _UpdateOrder_primaryOrder,
        _UpdateOrder_secondaryOrder,
        UpdateOrder,
        _ApplicationPDU_shareDataHeader,
        _ApplicationPDU_action,
        _ApplicationPDU_numberApplications,
        _ApplicationPDU_windowID,
        ApplicationPDU,
        _ConfirmActivePDU_shareControlHeader,
        _ConfirmActivePDU_shareID,
        _ConfirmActivePDU_originatorID,
        _ConfirmActivePDU_lengthSourceDescriptor,
        _ConfirmActivePDU_lengthCombinedCapabilities,
        _ConfirmActivePDU_sourceDescriptor,
        _ConfirmActivePDU_combinedCapabilities,
        ConfirmActivePDU,
        _ControlPDU_shareDataHeader,
        _ControlPDU_action,
        _ControlPDU_grantID,
        _ControlPDU_controlID,
        ControlPDU,
        _DeactivateAllPDU_shareControlHeader,
        _DeactivateAllPDU_shareID,
        _DeactivateAllPDU_lengthSourceDescriptor,
        _DeactivateAllPDU_sourceDescriptor,
        DeactivateAllPDU,
        _DeactivateOtherPDU_shareControlHeader,
        _DeactivateOtherPDU_shareID,
        _DeactivateOtherPDU_deactivateID,
        _DeactivateOtherPDU_lengthSourceDescriptor,
        _DeactivateOtherPDU_sourceDescriptor,
        DeactivateOtherPDU,
        _DeactivateSelfPDU_shareControlHeader,
        _DeactivateSelfPDU_shareID,
        DeactivateSelfPDU,
        _DemandActivePDU_shareControlHeader,
        _DemandActivePDU_shareID,
        _DemandActivePDU_lengthSourceDescriptor,
        _DemandActivePDU_lengthCombinedCapabilities,
        _DemandActivePDU_sourceDescriptor,
        _DemandActivePDU_combinedCapabilities,
        DemandActivePDU,
        _FlowPDU_flowMarker,
        _FlowPDU_pad8bits,
        _FlowPDU_pduTypeFlow,
        _FlowPDU_flowIdentifier,
        _FlowPDU_flowNumber,
        _FlowPDU_pduSource,
        FlowPDU,
        _FontPDU_shareDataHeader,
        _FontPDU_numberFonts,
        _FontPDU_entrySize,
        __FontPDU_fontList__item_,
        _FontPDU_fontList,
        FontPDU,
        _InputPDU_shareDataHeader,
        _InputPDU_numberEvents,
        _InputPDU_pad2octets,
        __InputPDU_eventList__item_,
        _InputPDU_eventList,
        InputPDU,
        _MediatedControlPDU_shareDataHeader,
        _MediatedControlPDU_action,
        _MediatedControlPDU_passControlFlag,
        _MediatedControlPDU_sendingReference,
        _MediatedControlPDU_originatorReference,
        _MediatedControlPDU_originatorID,
        MediatedControlPDU,
        _PointerPDU_shareDataHeader,
        _PointerPDU_messageType,
        _PointerPDU_pad2octets,
        __PointerPDU_pointerData_systemPointerType,
        __PointerPDU_pointerData_monoPointerAttribute,
        __PointerPDU_pointerData_colorPointerAttribute,
        __PointerPDU_pointerData_cachedPointerIndex,
        __PointerPDU_pointerData_pointerPosition,
        _PointerPDU_pointerData,
        PointerPDU,
        _RemoteSharePDU_shareDataHeader,
        _RemoteSharePDU_action,
        __RemoteSharePDU_additionalData_requestingID,
        __RemoteSharePDU_additionalData_pad2octets,
        __RemoteSharePDU_additionalData_denialCode,
        _RemoteSharePDU_additionalData,
        _RemoteSharePDU_encryptedPassword,
        RemoteSharePDU,
        _RequestActivePDU_shareControlHeader,
        _RequestActivePDU_lengthSourceDescriptor,
        _RequestActivePDU_lengthCombinedCapabilities,
        _RequestActivePDU_sourceDescriptor,
        _RequestActivePDU_combinedCapabilities,
        RequestActivePDU,
        _SynchronizePDU_shareDataHeader,
        _SynchronizePDU_messageType,
        _SynchronizePDU_targetUser,
        SynchronizePDU,
        _UpdateBitmapPDU_shareDataHeader,
        _UpdateBitmapPDU_updateType,
        _UpdateBitmapPDU_pad2octets,
        _UpdateBitmapPDU_destLeft,
        _UpdateBitmapPDU_destTop,
        _UpdateBitmapPDU_destRight,
        _UpdateBitmapPDU_destBottom,
        _UpdateBitmapPDU_width,
        _UpdateBitmapPDU_height,
        _UpdateBitmapPDU_bitsPerPixel,
        _UpdateBitmapPDU_compressedFlag,
        _UpdateBitmapPDU_bitmapLength,
        _UpdateBitmapPDU_bitmapData,
        UpdateBitmapPDU,
        _UpdateCapabilityPDU_shareDataHeader,
        _UpdateCapabilityPDU_updateCapabilitySet,
        UpdateCapabilityPDU,
        _UpdateOrdersPDU_shareDataHeader,
        _UpdateOrdersPDU_updateType,
        _UpdateOrdersPDU_pad2octetsA,
        _UpdateOrdersPDU_numberOrders,
        _UpdateOrdersPDU_pad2octetsB,
        __UpdateOrdersPDU_orderList__item_,
        _UpdateOrdersPDU_orderList,
        UpdateOrdersPDU,
        _UpdatePalettePDU_shareDataHeader,
        _UpdatePalettePDU_updateType,
        _UpdatePalettePDU_pad2octets,
        _UpdatePalettePDU_numberColors,
        __UpdatePalettePDU_palette__item_,
        _UpdatePalettePDU_palette,
        UpdatePalettePDU,
        _UpdateSynchronizePDU_shareDataHeader,
        _UpdateSynchronizePDU_updateType,
        _UpdateSynchronizePDU_pad2octets,
        UpdateSynchronizePDU,
        _WindowActivationPDU_shareDataHeader,
        _WindowActivationPDU_action,
        _WindowActivationPDU_activationID,
        _WindowActivationPDU_activationWindow,
        _WindowActivationPDU_activationPoint,
        WindowActivationPDU,
        _WindowListPDU_shareDataHeader,
        _WindowListPDU_messageType,
        _WindowListPDU_pad2octetsA,
        _WindowListPDU_numberWindows,
        _WindowListPDU_listTime,
        _WindowListPDU_listID,
        _WindowListPDU_pad2octetsB,
        __WindowListPDU_windowAttributeList__item_,
        _WindowListPDU_windowAttributeList,
        __WindowListPDU_windowTitleList__item_,
        _WindowListPDU_windowTitleList,
        WindowListPDU,
        _SharePDU_applicationPDU,
        _SharePDU_confirmActivePDU,
        _SharePDU_controlPDU,
        _SharePDU_deactivateAllPDU,
        _SharePDU_deactivateOtherPDU,
        _SharePDU_deactivateSelfPDU,
        _SharePDU_demandActivePDU,
        _SharePDU_flowPDU,
        _SharePDU_fontPDU,
        _SharePDU_inputPDU,
        _SharePDU_mediatedControlPDU,
        _SharePDU_pointerPDU,
        _SharePDU_remoteSharePDU,
        _SharePDU_requestActivePDU,
        _SharePDU_synchronizePDU,
        _SharePDU_updateCapabilityPDU,
        _SharePDU_updateBitmapPDU,
        _SharePDU_updateOrdersPDU,
        _SharePDU_updateSynchronizePDU,
        _SharePDU_updatePalettePDU,
        _SharePDU_windowActivationPDU,
        _SharePDU_windowListPDU,
        SharePDU,
    ]

class GCC_PROTOCOL:

    _name_  = 'GCC-PROTOCOL'
    _oid_   = [0, 0, 20, 124, 0, 2, 2, 1]
    
    _obj_ = [
        'ChannelID',
        'StaticChannelID',
        'DynamicChannelID',
        'UserID',
        'TokenID',
        'StaticTokenID',
        'DynamicTokenID',
        'Time',
        'Handle',
        'H221NonStandardIdentifier',
        'Key',
        'NonStandardParameter',
        'TextString',
        'simpleTextFirstCharacter',
        'simpleTextLastCharacter',
        'SimpleTextString',
        'SimpleNumericString',
        'DiallingString',
        'SubAddressString',
        'ExtraDiallingString',
        'UserData',
        'Password',
        'PasswordSelector',
        'ChallengeResponseItem',
        'ChallengeResponseAlgorithm',
        'ChallengeItem',
        'ChallengeRequest',
        'ChallengeResponse',
        'PasswordChallengeRequestResponse',
        'ConferenceName',
        'ConferenceNameSelector',
        'ConferenceNameModifier',
        'Privilege',
        'TerminationMethod',
        'ConferencePriorityScheme',
        'ConferencePriority',
        'NodeCategory',
        'ConferenceMode',
        'NetworkAddress',
        'MediaList',
        'ChannelAggregationMethod',
        'Profile',
        'ExtendedE164NetworkAddress',
        'TransportAddress',
        'GSTNConnection',
        'ISDNConnection',
        'CSDNConnection',
        'PSDNConnection',
        'ATMConnection',
        'NetworkConnection',
        'NetworkAddressV2',
        'NodeType',
        'NodeProperties',
        'AsymmetryIndicator',
        'AlternativeNodeID',
        'ConferenceDescriptor',
        'NodeRecord',
        'SessionKey',
        'ChannelType',
        'ApplicationRecord',
        'CapabilityID',
        'CapabilityClass',
        'EntityID',
        'ApplicationInvokeSpecifier',
        'RegistryKey',
        'RegistryItem',
        'RegistryEntryOwner',
        'RegistryModificationRights',
        'UserIDIndication',
        'ConferenceCreateRequest',
        'ConferenceCreateResponse',
        'ConferenceQueryRequest',
        'ConferenceQueryResponse',
        'ConferenceJoinRequest',
        'ConferenceJoinResponse',
        'ConferenceInviteRequest',
        'ConferenceInviteResponse',
        'ConferenceAddRequest',
        'ConferenceAddResponse',
        'ConferenceLockRequest',
        'ConferenceLockResponse',
        'ConferenceLockIndication',
        'ConferenceUnlockRequest',
        'ConferenceUnlockResponse',
        'ConferenceUnlockIndication',
        'ConferenceTerminateRequest',
        'ConferenceTerminateResponse',
        'ConferenceTerminateIndication',
        'ConferenceEjectUserRequest',
        'ConferenceEjectUserResponse',
        'ConferenceEjectUserIndication',
        'ConferenceTransferRequest',
        'ConferenceTransferResponse',
        'ConferenceTransferIndication',
        'RosterUpdateIndication',
        'ApplicationInvokeIndication',
        'RegistryRegisterChannelRequest',
        'RegistryAssignTokenRequest',
        'RegistrySetParameterRequest',
        'RegistryRetrieveEntryRequest',
        'RegistryDeleteEntryRequest',
        'RegistryMonitorEntryRequest',
        'RegistryMonitorEntryIndication',
        'RegistryAllocateHandleRequest',
        'RegistryAllocateHandleResponse',
        'RegistryResponse',
        'ConductorAssignIndication',
        'ConductorReleaseIndication',
        'ConductorPermissionAskIndication',
        'ConductorPermissionGrantIndication',
        'ConferenceTimeRemainingIndication',
        'ConferenceTimeInquireIndication',
        'ConferenceTimeExtendIndication',
        'ConferenceAssistanceIndication',
        'TextMessageIndication',
        'RosterRefreshRequest',
        'FunctionNotSupportedResponse',
        'NonStandardPDU',
        'ConnectData',
        'ConnectGCCPDU',
        'GCCPDU',
        'RequestPDU',
        'ResponsePDU',
        'IndicationPDU',
        ]
    _type_ = [
        'ChannelID',
        'StaticChannelID',
        'DynamicChannelID',
        'UserID',
        'TokenID',
        'StaticTokenID',
        'DynamicTokenID',
        'Time',
        'Handle',
        'H221NonStandardIdentifier',
        'Key',
        'NonStandardParameter',
        'TextString',
        'SimpleTextString',
        'SimpleNumericString',
        'DiallingString',
        'SubAddressString',
        'ExtraDiallingString',
        'UserData',
        'Password',
        'PasswordSelector',
        'ChallengeResponseItem',
        'ChallengeResponseAlgorithm',
        'ChallengeItem',
        'ChallengeRequest',
        'ChallengeResponse',
        'PasswordChallengeRequestResponse',
        'ConferenceName',
        'ConferenceNameSelector',
        'ConferenceNameModifier',
        'Privilege',
        'TerminationMethod',
        'ConferencePriorityScheme',
        'ConferencePriority',
        'NodeCategory',
        'ConferenceMode',
        'NetworkAddress',
        'MediaList',
        'ChannelAggregationMethod',
        'Profile',
        'ExtendedE164NetworkAddress',
        'TransportAddress',
        'GSTNConnection',
        'ISDNConnection',
        'CSDNConnection',
        'PSDNConnection',
        'ATMConnection',
        'NetworkConnection',
        'NetworkAddressV2',
        'NodeType',
        'NodeProperties',
        'AsymmetryIndicator',
        'AlternativeNodeID',
        'ConferenceDescriptor',
        'NodeRecord',
        'SessionKey',
        'ChannelType',
        'ApplicationRecord',
        'CapabilityID',
        'CapabilityClass',
        'EntityID',
        'ApplicationInvokeSpecifier',
        'RegistryKey',
        'RegistryItem',
        'RegistryEntryOwner',
        'RegistryModificationRights',
        'UserIDIndication',
        'ConferenceCreateRequest',
        'ConferenceCreateResponse',
        'ConferenceQueryRequest',
        'ConferenceQueryResponse',
        'ConferenceJoinRequest',
        'ConferenceJoinResponse',
        'ConferenceInviteRequest',
        'ConferenceInviteResponse',
        'ConferenceAddRequest',
        'ConferenceAddResponse',
        'ConferenceLockRequest',
        'ConferenceLockResponse',
        'ConferenceLockIndication',
        'ConferenceUnlockRequest',
        'ConferenceUnlockResponse',
        'ConferenceUnlockIndication',
        'ConferenceTerminateRequest',
        'ConferenceTerminateResponse',
        'ConferenceTerminateIndication',
        'ConferenceEjectUserRequest',
        'ConferenceEjectUserResponse',
        'ConferenceEjectUserIndication',
        'ConferenceTransferRequest',
        'ConferenceTransferResponse',
        'ConferenceTransferIndication',
        'RosterUpdateIndication',
        'ApplicationInvokeIndication',
        'RegistryRegisterChannelRequest',
        'RegistryAssignTokenRequest',
        'RegistrySetParameterRequest',
        'RegistryRetrieveEntryRequest',
        'RegistryDeleteEntryRequest',
        'RegistryMonitorEntryRequest',
        'RegistryMonitorEntryIndication',
        'RegistryAllocateHandleRequest',
        'RegistryAllocateHandleResponse',
        'RegistryResponse',
        'ConductorAssignIndication',
        'ConductorReleaseIndication',
        'ConductorPermissionAskIndication',
        'ConductorPermissionGrantIndication',
        'ConferenceTimeRemainingIndication',
        'ConferenceTimeInquireIndication',
        'ConferenceTimeExtendIndication',
        'ConferenceAssistanceIndication',
        'TextMessageIndication',
        'RosterRefreshRequest',
        'FunctionNotSupportedResponse',
        'NonStandardPDU',
        'ConnectData',
        'ConnectGCCPDU',
        'GCCPDU',
        'RequestPDU',
        'ResponsePDU',
        'IndicationPDU',
        ]
    _set_ = [
        ]
    _val_ = [
        'simpleTextFirstCharacter',
        'simpleTextLastCharacter',
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< ChannelID >-----#
    ChannelID = INT(name='ChannelID', mode=MODE_TYPE)
    ChannelID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=65535)], ev=None, er=[])
    
    #-----< StaticChannelID >-----#
    StaticChannelID = INT(name='StaticChannelID', mode=MODE_TYPE)
    StaticChannelID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=1000)], ev=None, er=[])
    
    #-----< DynamicChannelID >-----#
    DynamicChannelID = INT(name='DynamicChannelID', mode=MODE_TYPE)
    DynamicChannelID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1001, ub=65535)], ev=None, er=[])
    
    #-----< UserID >-----#
    UserID = INT(name='UserID', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'DynamicChannelID')))
    
    #-----< TokenID >-----#
    TokenID = INT(name='TokenID', mode=MODE_TYPE)
    TokenID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=65535)], ev=None, er=[])
    
    #-----< StaticTokenID >-----#
    StaticTokenID = INT(name='StaticTokenID', mode=MODE_TYPE)
    StaticTokenID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16383)], ev=None, er=[])
    
    #-----< DynamicTokenID >-----#
    DynamicTokenID = INT(name='DynamicTokenID', mode=MODE_TYPE)
    DynamicTokenID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=16384, ub=65535)], ev=None, er=[])
    
    #-----< Time >-----#
    Time = INT(name='Time', mode=MODE_TYPE)
    Time._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-2147483648, ub=2147483647)], ev=None, er=[])
    
    #-----< Handle >-----#
    Handle = INT(name='Handle', mode=MODE_TYPE)
    Handle._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=4294967295)], ev=None, er=[])
    
    #-----< H221NonStandardIdentifier >-----#
    H221NonStandardIdentifier = OCT_STR(name='H221NonStandardIdentifier', mode=MODE_TYPE)
    H221NonStandardIdentifier._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=4, ub=255)], ev=None, er=[])
    
    #-----< Key >-----#
    Key = CHOICE(name='Key', mode=MODE_TYPE)
    _Key_object = OID(name='object', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Key_h221NonStandard = OCT_STR(name='h221NonStandard', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'H221NonStandardIdentifier')))
    Key._cont = ASN1Dict([
        ('object', _Key_object),
        ('h221NonStandard', _Key_h221NonStandard),
        ])
    Key._ext = None
    
    #-----< NonStandardParameter >-----#
    NonStandardParameter = SEQ(name='NonStandardParameter', mode=MODE_TYPE)
    _NonStandardParameter_key = CHOICE(name='key', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'Key')))
    _NonStandardParameter_data = OCT_STR(name='data', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    NonStandardParameter._cont = ASN1Dict([
        ('key', _NonStandardParameter_key),
        ('data', _NonStandardParameter_data),
        ])
    NonStandardParameter._ext = None
    
    #-----< TextString >-----#
    TextString = STR_BMP(name='TextString', mode=MODE_TYPE)
    TextString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< simpleTextFirstCharacter >-----#
    simpleTextFirstCharacter = STR_UNIV(name='simpleTextFirstCharacter', mode=MODE_VALUE)
    simpleTextFirstCharacter._val = '\x00'
    
    #-----< simpleTextLastCharacter >-----#
    simpleTextLastCharacter = STR_UNIV(name='simpleTextLastCharacter', mode=MODE_VALUE)
    simpleTextLastCharacter._val = 'ÿ'
    
    #-----< SimpleTextString >-----#
    SimpleTextString = STR_BMP(name='SimpleTextString', mode=MODE_TYPE)
    SimpleTextString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< SimpleNumericString >-----#
    SimpleNumericString = STR_NUM(name='SimpleNumericString', mode=MODE_TYPE)
    SimpleNumericString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    SimpleNumericString._const_alpha = ASN1Set(rv=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], rr=[], ev=None, er=[])
    
    #-----< DiallingString >-----#
    DiallingString = STR_NUM(name='DiallingString', mode=MODE_TYPE)
    DiallingString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    DiallingString._const_alpha = ASN1Set(rv=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], rr=[], ev=None, er=[])
    
    #-----< SubAddressString >-----#
    SubAddressString = STR_NUM(name='SubAddressString', mode=MODE_TYPE)
    SubAddressString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=40)], ev=None, er=[])
    SubAddressString._const_alpha = ASN1Set(rv=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], rr=[], ev=None, er=[])
    
    #-----< ExtraDiallingString >-----#
    ExtraDiallingString = STR_BMP(name='ExtraDiallingString', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'TextString')))
    ExtraDiallingString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    ExtraDiallingString._const_alpha = ASN1Set(rv=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '#', '*', ','], rr=[], ev=None, er=[])
    
    #-----< UserData >-----#
    UserData = SET_OF(name='UserData', mode=MODE_TYPE)
    _UserData__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    __UserData__item__key = CHOICE(name='key', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'Key')))
    __UserData__item__value = OCT_STR(name='value', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _UserData__item_._cont = ASN1Dict([
        ('key', __UserData__item__key),
        ('value', __UserData__item__value),
        ])
    _UserData__item_._ext = None
    UserData._cont = _UserData__item_
    
    #-----< Password >-----#
    Password = SEQ(name='Password', mode=MODE_TYPE)
    _Password_numeric = STR_NUM(name='numeric', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'SimpleNumericString')))
    _Password_numeric._const_alpha = ASN1Set(rv=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], rr=[], ev=None, er=[])
    _Password_text = STR_BMP(name='text', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'SimpleTextString')), opt=True)
    _Password_unicodeText = STR_BMP(name='unicodeText', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'TextString')), opt=True)
    Password._cont = ASN1Dict([
        ('numeric', _Password_numeric),
        ('text', _Password_text),
        ('unicodeText', _Password_unicodeText),
        ])
    Password._ext = ['unicodeText']
    
    #-----< PasswordSelector >-----#
    PasswordSelector = CHOICE(name='PasswordSelector', mode=MODE_TYPE)
    _PasswordSelector_numeric = STR_NUM(name='numeric', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'SimpleNumericString')))
    _PasswordSelector_numeric._const_alpha = ASN1Set(rv=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], rr=[], ev=None, er=[])
    _PasswordSelector_text = STR_BMP(name='text', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'SimpleTextString')))
    _PasswordSelector_unicodeText = STR_BMP(name='unicodeText', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'TextString')))
    PasswordSelector._cont = ASN1Dict([
        ('numeric', _PasswordSelector_numeric),
        ('text', _PasswordSelector_text),
        ('unicodeText', _PasswordSelector_unicodeText),
        ])
    PasswordSelector._ext = ['unicodeText']
    
    #-----< ChallengeResponseItem >-----#
    ChallengeResponseItem = CHOICE(name='ChallengeResponseItem', mode=MODE_TYPE)
    _ChallengeResponseItem_passwordString = CHOICE(name='passwordString', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'PasswordSelector')))
    _ChallengeResponseItem_responseData = SET_OF(name='responseData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserData')))
    ChallengeResponseItem._cont = ASN1Dict([
        ('passwordString', _ChallengeResponseItem_passwordString),
        ('responseData', _ChallengeResponseItem_responseData),
        ])
    ChallengeResponseItem._ext = []
    
    #-----< ChallengeResponseAlgorithm >-----#
    ChallengeResponseAlgorithm = CHOICE(name='ChallengeResponseAlgorithm', mode=MODE_TYPE)
    _ChallengeResponseAlgorithm_passwordInTheClear = NULL(name='passwordInTheClear', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ChallengeResponseAlgorithm_nonStandardAlgorithm = SEQ(name='nonStandardAlgorithm', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    ChallengeResponseAlgorithm._cont = ASN1Dict([
        ('passwordInTheClear', _ChallengeResponseAlgorithm_passwordInTheClear),
        ('nonStandardAlgorithm', _ChallengeResponseAlgorithm_nonStandardAlgorithm),
        ])
    ChallengeResponseAlgorithm._ext = []
    
    #-----< ChallengeItem >-----#
    ChallengeItem = SEQ(name='ChallengeItem', mode=MODE_TYPE)
    _ChallengeItem_responseAlgorithm = CHOICE(name='responseAlgorithm', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ChallengeResponseAlgorithm')))
    _ChallengeItem_challengeData = SET_OF(name='challengeData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserData')))
    ChallengeItem._cont = ASN1Dict([
        ('responseAlgorithm', _ChallengeItem_responseAlgorithm),
        ('challengeData', _ChallengeItem_challengeData),
        ])
    ChallengeItem._ext = []
    
    #-----< ChallengeRequest >-----#
    ChallengeRequest = SEQ(name='ChallengeRequest', mode=MODE_TYPE)
    _ChallengeRequest_challengeTag = INT(name='challengeTag', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ChallengeRequest_challengeSet = SET_OF(name='challengeSet', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __ChallengeRequest_challengeSet__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'ChallengeItem')))
    _ChallengeRequest_challengeSet._cont = __ChallengeRequest_challengeSet__item_
    ChallengeRequest._cont = ASN1Dict([
        ('challengeTag', _ChallengeRequest_challengeTag),
        ('challengeSet', _ChallengeRequest_challengeSet),
        ])
    ChallengeRequest._ext = []
    
    #-----< ChallengeResponse >-----#
    ChallengeResponse = SEQ(name='ChallengeResponse', mode=MODE_TYPE)
    _ChallengeResponse_challengeTag = INT(name='challengeTag', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ChallengeResponse_responseAlgorithm = CHOICE(name='responseAlgorithm', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ChallengeResponseAlgorithm')))
    _ChallengeResponse_responseItem = CHOICE(name='responseItem', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ChallengeResponseItem')))
    ChallengeResponse._cont = ASN1Dict([
        ('challengeTag', _ChallengeResponse_challengeTag),
        ('responseAlgorithm', _ChallengeResponse_responseAlgorithm),
        ('responseItem', _ChallengeResponse_responseItem),
        ])
    ChallengeResponse._ext = []
    
    #-----< PasswordChallengeRequestResponse >-----#
    PasswordChallengeRequestResponse = CHOICE(name='PasswordChallengeRequestResponse', mode=MODE_TYPE)
    _PasswordChallengeRequestResponse_passwordInTheClear = CHOICE(name='passwordInTheClear', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'PasswordSelector')))
    _PasswordChallengeRequestResponse_challengeRequestResponse = SEQ(name='challengeRequestResponse', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __PasswordChallengeRequestResponse_challengeRequestResponse_challengeRequest = SEQ(name='challengeRequest', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ChallengeRequest')), opt=True)
    __PasswordChallengeRequestResponse_challengeRequestResponse_challengeResponse = SEQ(name='challengeResponse', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ChallengeResponse')), opt=True)
    _PasswordChallengeRequestResponse_challengeRequestResponse._cont = ASN1Dict([
        ('challengeRequest', __PasswordChallengeRequestResponse_challengeRequestResponse_challengeRequest),
        ('challengeResponse', __PasswordChallengeRequestResponse_challengeRequestResponse_challengeResponse),
        ])
    _PasswordChallengeRequestResponse_challengeRequestResponse._ext = []
    PasswordChallengeRequestResponse._cont = ASN1Dict([
        ('passwordInTheClear', _PasswordChallengeRequestResponse_passwordInTheClear),
        ('challengeRequestResponse', _PasswordChallengeRequestResponse_challengeRequestResponse),
        ])
    PasswordChallengeRequestResponse._ext = []
    
    #-----< ConferenceName >-----#
    ConferenceName = SEQ(name='ConferenceName', mode=MODE_TYPE)
    _ConferenceName_numeric = STR_NUM(name='numeric', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'SimpleNumericString')))
    _ConferenceName_numeric._const_alpha = ASN1Set(rv=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], rr=[], ev=None, er=[])
    _ConferenceName_text = STR_BMP(name='text', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'SimpleTextString')), opt=True)
    _ConferenceName_unicodeText = STR_BMP(name='unicodeText', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'TextString')), opt=True)
    ConferenceName._cont = ASN1Dict([
        ('numeric', _ConferenceName_numeric),
        ('text', _ConferenceName_text),
        ('unicodeText', _ConferenceName_unicodeText),
        ])
    ConferenceName._ext = ['unicodeText']
    
    #-----< ConferenceNameSelector >-----#
    ConferenceNameSelector = CHOICE(name='ConferenceNameSelector', mode=MODE_TYPE)
    _ConferenceNameSelector_numeric = STR_NUM(name='numeric', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'SimpleNumericString')))
    _ConferenceNameSelector_numeric._const_alpha = ASN1Set(rv=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], rr=[], ev=None, er=[])
    _ConferenceNameSelector_text = STR_BMP(name='text', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'SimpleTextString')))
    _ConferenceNameSelector_unicodeText = STR_BMP(name='unicodeText', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'TextString')))
    ConferenceNameSelector._cont = ASN1Dict([
        ('numeric', _ConferenceNameSelector_numeric),
        ('text', _ConferenceNameSelector_text),
        ('unicodeText', _ConferenceNameSelector_unicodeText),
        ])
    ConferenceNameSelector._ext = ['unicodeText']
    
    #-----< ConferenceNameModifier >-----#
    ConferenceNameModifier = STR_NUM(name='ConferenceNameModifier', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'SimpleNumericString')))
    ConferenceNameModifier._const_alpha = ASN1Set(rv=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], rr=[], ev=None, er=[])
    
    #-----< Privilege >-----#
    Privilege = ENUM(name='Privilege', mode=MODE_TYPE)
    Privilege._cont = ASN1Dict([('terminate', 0), ('ejectUser', 1), ('add', 2), ('lockUnlock', 3), ('transfer', 4)])
    Privilege._ext = []
    
    #-----< TerminationMethod >-----#
    TerminationMethod = ENUM(name='TerminationMethod', mode=MODE_TYPE)
    TerminationMethod._cont = ASN1Dict([('automatic', 0), ('manual', 1)])
    TerminationMethod._ext = []
    
    #-----< ConferencePriorityScheme >-----#
    ConferencePriorityScheme = CHOICE(name='ConferencePriorityScheme', mode=MODE_TYPE)
    _ConferencePriorityScheme_nonStandardScheme = SEQ(name='nonStandardScheme', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    ConferencePriorityScheme._cont = ASN1Dict([
        ('nonStandardScheme', _ConferencePriorityScheme_nonStandardScheme),
        ])
    ConferencePriorityScheme._ext = []
    
    #-----< ConferencePriority >-----#
    ConferencePriority = SEQ(name='ConferencePriority', mode=MODE_TYPE)
    _ConferencePriority_priority = INT(name='priority', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferencePriority_priority._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _ConferencePriority_scheme = CHOICE(name='scheme', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferencePriorityScheme')))
    ConferencePriority._cont = ASN1Dict([
        ('priority', _ConferencePriority_priority),
        ('scheme', _ConferencePriority_scheme),
        ])
    ConferencePriority._ext = []
    
    #-----< NodeCategory >-----#
    NodeCategory = CHOICE(name='NodeCategory', mode=MODE_TYPE)
    _NodeCategory_conventional = NULL(name='conventional', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _NodeCategory_counted = NULL(name='counted', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _NodeCategory_anonymous = NULL(name='anonymous', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _NodeCategory_nonStandardCategory = SEQ(name='nonStandardCategory', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    NodeCategory._cont = ASN1Dict([
        ('conventional', _NodeCategory_conventional),
        ('counted', _NodeCategory_counted),
        ('anonymous', _NodeCategory_anonymous),
        ('nonStandardCategory', _NodeCategory_nonStandardCategory),
        ])
    NodeCategory._ext = []
    
    #-----< ConferenceMode >-----#
    ConferenceMode = CHOICE(name='ConferenceMode', mode=MODE_TYPE)
    _ConferenceMode_conventional_only = NULL(name='conventional-only', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceMode_counted_only = NULL(name='counted-only', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceMode_anonymous_only = NULL(name='anonymous-only', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceMode_conventional_control = NULL(name='conventional-control', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceMode_unrestricted_mode = NULL(name='unrestricted-mode', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceMode_non_standard_mode = SEQ(name='non-standard-mode', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    ConferenceMode._cont = ASN1Dict([
        ('conventional-only', _ConferenceMode_conventional_only),
        ('counted-only', _ConferenceMode_counted_only),
        ('anonymous-only', _ConferenceMode_anonymous_only),
        ('conventional-control', _ConferenceMode_conventional_control),
        ('unrestricted-mode', _ConferenceMode_unrestricted_mode),
        ('non-standard-mode', _ConferenceMode_non_standard_mode),
        ])
    ConferenceMode._ext = []
    
    #-----< NetworkAddress >-----#
    NetworkAddress = SEQ_OF(name='NetworkAddress', mode=MODE_TYPE)
    _NetworkAddress__item_ = CHOICE(name='_item_', mode=MODE_TYPE)
    __NetworkAddress__item__aggregatedChannel = SEQ(name='aggregatedChannel', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___NetworkAddress__item__aggregatedChannel_transferModes = SEQ(name='transferModes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_transferModes_speech = BOOL(name='speech', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_transferModes_voice_band = BOOL(name='voice-band', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_transferModes_digital_56k = BOOL(name='digital-56k', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_transferModes_digital_64k = BOOL(name='digital-64k', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_transferModes_digital_128k = BOOL(name='digital-128k', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_transferModes_digital_192k = BOOL(name='digital-192k', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_transferModes_digital_256k = BOOL(name='digital-256k', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_transferModes_digital_320k = BOOL(name='digital-320k', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_transferModes_digital_384k = BOOL(name='digital-384k', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_transferModes_digital_512k = BOOL(name='digital-512k', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_transferModes_digital_768k = BOOL(name='digital-768k', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_transferModes_digital_1152k = BOOL(name='digital-1152k', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_transferModes_digital_1472k = BOOL(name='digital-1472k', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_transferModes_digital_1536k = BOOL(name='digital-1536k', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_transferModes_digital_1920k = BOOL(name='digital-1920k', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_transferModes_packet_mode = BOOL(name='packet-mode', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_transferModes_frame_mode = BOOL(name='frame-mode', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_transferModes_atm = BOOL(name='atm', mode=MODE_TYPE, tag=(17, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___NetworkAddress__item__aggregatedChannel_transferModes._cont = ASN1Dict([
        ('speech', ____NetworkAddress__item__aggregatedChannel_transferModes_speech),
        ('voice-band', ____NetworkAddress__item__aggregatedChannel_transferModes_voice_band),
        ('digital-56k', ____NetworkAddress__item__aggregatedChannel_transferModes_digital_56k),
        ('digital-64k', ____NetworkAddress__item__aggregatedChannel_transferModes_digital_64k),
        ('digital-128k', ____NetworkAddress__item__aggregatedChannel_transferModes_digital_128k),
        ('digital-192k', ____NetworkAddress__item__aggregatedChannel_transferModes_digital_192k),
        ('digital-256k', ____NetworkAddress__item__aggregatedChannel_transferModes_digital_256k),
        ('digital-320k', ____NetworkAddress__item__aggregatedChannel_transferModes_digital_320k),
        ('digital-384k', ____NetworkAddress__item__aggregatedChannel_transferModes_digital_384k),
        ('digital-512k', ____NetworkAddress__item__aggregatedChannel_transferModes_digital_512k),
        ('digital-768k', ____NetworkAddress__item__aggregatedChannel_transferModes_digital_768k),
        ('digital-1152k', ____NetworkAddress__item__aggregatedChannel_transferModes_digital_1152k),
        ('digital-1472k', ____NetworkAddress__item__aggregatedChannel_transferModes_digital_1472k),
        ('digital-1536k', ____NetworkAddress__item__aggregatedChannel_transferModes_digital_1536k),
        ('digital-1920k', ____NetworkAddress__item__aggregatedChannel_transferModes_digital_1920k),
        ('packet-mode', ____NetworkAddress__item__aggregatedChannel_transferModes_packet_mode),
        ('frame-mode', ____NetworkAddress__item__aggregatedChannel_transferModes_frame_mode),
        ('atm', ____NetworkAddress__item__aggregatedChannel_transferModes_atm),
        ])
    ___NetworkAddress__item__aggregatedChannel_transferModes._ext = []
    ___NetworkAddress__item__aggregatedChannel_internationalNumber = STR_NUM(name='internationalNumber', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'DiallingString')))
    ___NetworkAddress__item__aggregatedChannel_internationalNumber._const_alpha = ASN1Set(rv=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], rr=[], ev=None, er=[])
    ___NetworkAddress__item__aggregatedChannel_subAddress = STR_NUM(name='subAddress', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'SubAddressString')), opt=True)
    ___NetworkAddress__item__aggregatedChannel_subAddress._const_alpha = ASN1Set(rv=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], rr=[], ev=None, er=[])
    ___NetworkAddress__item__aggregatedChannel_extraDialling = STR_BMP(name='extraDialling', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ExtraDiallingString')), opt=True)
    ___NetworkAddress__item__aggregatedChannel_extraDialling._const_alpha = ASN1Set(rv=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '#', '*', ','], rr=[], ev=None, er=[])
    ___NetworkAddress__item__aggregatedChannel_highLayerCompatibility = SEQ(name='highLayerCompatibility', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    ____NetworkAddress__item__aggregatedChannel_highLayerCompatibility_telephony3kHz = BOOL(name='telephony3kHz', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_highLayerCompatibility_telephony7kHz = BOOL(name='telephony7kHz', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_highLayerCompatibility_videotelephony = BOOL(name='videotelephony', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_highLayerCompatibility_videoconference = BOOL(name='videoconference', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_highLayerCompatibility_audiographic = BOOL(name='audiographic', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_highLayerCompatibility_audiovisual = BOOL(name='audiovisual', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddress__item__aggregatedChannel_highLayerCompatibility_multimedia = BOOL(name='multimedia', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___NetworkAddress__item__aggregatedChannel_highLayerCompatibility._cont = ASN1Dict([
        ('telephony3kHz', ____NetworkAddress__item__aggregatedChannel_highLayerCompatibility_telephony3kHz),
        ('telephony7kHz', ____NetworkAddress__item__aggregatedChannel_highLayerCompatibility_telephony7kHz),
        ('videotelephony', ____NetworkAddress__item__aggregatedChannel_highLayerCompatibility_videotelephony),
        ('videoconference', ____NetworkAddress__item__aggregatedChannel_highLayerCompatibility_videoconference),
        ('audiographic', ____NetworkAddress__item__aggregatedChannel_highLayerCompatibility_audiographic),
        ('audiovisual', ____NetworkAddress__item__aggregatedChannel_highLayerCompatibility_audiovisual),
        ('multimedia', ____NetworkAddress__item__aggregatedChannel_highLayerCompatibility_multimedia),
        ])
    ___NetworkAddress__item__aggregatedChannel_highLayerCompatibility._ext = []
    __NetworkAddress__item__aggregatedChannel._cont = ASN1Dict([
        ('transferModes', ___NetworkAddress__item__aggregatedChannel_transferModes),
        ('internationalNumber', ___NetworkAddress__item__aggregatedChannel_internationalNumber),
        ('subAddress', ___NetworkAddress__item__aggregatedChannel_subAddress),
        ('extraDialling', ___NetworkAddress__item__aggregatedChannel_extraDialling),
        ('highLayerCompatibility', ___NetworkAddress__item__aggregatedChannel_highLayerCompatibility),
        ])
    __NetworkAddress__item__aggregatedChannel._ext = []
    __NetworkAddress__item__transportConnection = SEQ(name='transportConnection', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___NetworkAddress__item__transportConnection_nsapAddress = OCT_STR(name='nsapAddress', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___NetworkAddress__item__transportConnection_nsapAddress._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=20)], ev=None, er=[])
    ___NetworkAddress__item__transportConnection_transportSelector = OCT_STR(name='transportSelector', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __NetworkAddress__item__transportConnection._cont = ASN1Dict([
        ('nsapAddress', ___NetworkAddress__item__transportConnection_nsapAddress),
        ('transportSelector', ___NetworkAddress__item__transportConnection_transportSelector),
        ])
    __NetworkAddress__item__transportConnection._ext = None
    __NetworkAddress__item__nonStandard = SEQ(name='nonStandard', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _NetworkAddress__item_._cont = ASN1Dict([
        ('aggregatedChannel', __NetworkAddress__item__aggregatedChannel),
        ('transportConnection', __NetworkAddress__item__transportConnection),
        ('nonStandard', __NetworkAddress__item__nonStandard),
        ])
    _NetworkAddress__item_._ext = []
    NetworkAddress._cont = _NetworkAddress__item_
    NetworkAddress._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    
    #-----< MediaList >-----#
    MediaList = SEQ(name='MediaList', mode=MODE_TYPE)
    _MediaList_audio = BOOL(name='audio', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _MediaList_video = BOOL(name='video', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _MediaList_data = BOOL(name='data', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    MediaList._cont = ASN1Dict([
        ('audio', _MediaList_audio),
        ('video', _MediaList_video),
        ('data', _MediaList_data),
        ])
    MediaList._ext = []
    
    #-----< ChannelAggregationMethod >-----#
    ChannelAggregationMethod = CHOICE(name='ChannelAggregationMethod', mode=MODE_TYPE)
    _ChannelAggregationMethod_h221 = NULL(name='h221', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ChannelAggregationMethod_h244 = NULL(name='h244', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ChannelAggregationMethod_iso_iec_13871 = NULL(name='iso-iec-13871', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ChannelAggregationMethod_nonStandard = SEQ(name='nonStandard', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    ChannelAggregationMethod._cont = ASN1Dict([
        ('h221', _ChannelAggregationMethod_h221),
        ('h244', _ChannelAggregationMethod_h244),
        ('iso-iec-13871', _ChannelAggregationMethod_iso_iec_13871),
        ('nonStandard', _ChannelAggregationMethod_nonStandard),
        ])
    ChannelAggregationMethod._ext = []
    
    #-----< Profile >-----#
    Profile = CHOICE(name='Profile', mode=MODE_TYPE)
    _Profile_simpleProfile = CHOICE(name='simpleProfile', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __Profile_simpleProfile_speech = NULL(name='speech', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Profile_simpleProfile_telephony_3kHz = NULL(name='telephony-3kHz', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Profile_simpleProfile_telephony_7kHz = NULL(name='telephony-7kHz', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Profile_simpleProfile_voice_band = NULL(name='voice-band', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Profile_simpleProfile_frameRelay = NULL(name='frameRelay', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Profile_simpleProfile_t123_pstn_basic = NULL(name='t123-pstn-basic', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Profile_simpleProfile_t123_psdn_basic = NULL(name='t123-psdn-basic', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Profile_simpleProfile_t123_b_isdn_basic = NULL(name='t123-b-isdn-basic', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Profile_simpleProfile._cont = ASN1Dict([
        ('speech', __Profile_simpleProfile_speech),
        ('telephony-3kHz', __Profile_simpleProfile_telephony_3kHz),
        ('telephony-7kHz', __Profile_simpleProfile_telephony_7kHz),
        ('voice-band', __Profile_simpleProfile_voice_band),
        ('frameRelay', __Profile_simpleProfile_frameRelay),
        ('t123-pstn-basic', __Profile_simpleProfile_t123_pstn_basic),
        ('t123-psdn-basic', __Profile_simpleProfile_t123_psdn_basic),
        ('t123-b-isdn-basic', __Profile_simpleProfile_t123_b_isdn_basic),
        ])
    _Profile_simpleProfile._ext = None
    _Profile_multimediaProfile = SEQ(name='multimediaProfile', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Profile_multimediaProfile_profile = CHOICE(name='profile', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___Profile_multimediaProfile_profile_h310 = NULL(name='h310', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___Profile_multimediaProfile_profile_h320 = NULL(name='h320', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___Profile_multimediaProfile_profile_h321 = NULL(name='h321', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___Profile_multimediaProfile_profile_h322 = NULL(name='h322', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___Profile_multimediaProfile_profile_h323 = NULL(name='h323', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___Profile_multimediaProfile_profile_h324 = NULL(name='h324', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___Profile_multimediaProfile_profile_h324m = NULL(name='h324m', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___Profile_multimediaProfile_profile_asvd = NULL(name='asvd', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___Profile_multimediaProfile_profile_dsvd = NULL(name='dsvd', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Profile_multimediaProfile_profile._cont = ASN1Dict([
        ('h310', ___Profile_multimediaProfile_profile_h310),
        ('h320', ___Profile_multimediaProfile_profile_h320),
        ('h321', ___Profile_multimediaProfile_profile_h321),
        ('h322', ___Profile_multimediaProfile_profile_h322),
        ('h323', ___Profile_multimediaProfile_profile_h323),
        ('h324', ___Profile_multimediaProfile_profile_h324),
        ('h324m', ___Profile_multimediaProfile_profile_h324m),
        ('asvd', ___Profile_multimediaProfile_profile_asvd),
        ('dsvd', ___Profile_multimediaProfile_profile_dsvd),
        ])
    __Profile_multimediaProfile_profile._ext = None
    __Profile_multimediaProfile_t120Data = BOOL(name='t120Data', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Profile_multimediaProfile._cont = ASN1Dict([
        ('profile', __Profile_multimediaProfile_profile),
        ('t120Data', __Profile_multimediaProfile_t120Data),
        ])
    _Profile_multimediaProfile._ext = None
    _Profile_dsmccDownloadProfile = NULL(name='dsmccDownloadProfile', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Profile_nonStandard = SEQ(name='nonStandard', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    Profile._cont = ASN1Dict([
        ('simpleProfile', _Profile_simpleProfile),
        ('multimediaProfile', _Profile_multimediaProfile),
        ('dsmccDownloadProfile', _Profile_dsmccDownloadProfile),
        ('nonStandard', _Profile_nonStandard),
        ])
    Profile._ext = []
    
    #-----< ExtendedE164NetworkAddress >-----#
    ExtendedE164NetworkAddress = SEQ(name='ExtendedE164NetworkAddress', mode=MODE_TYPE)
    _ExtendedE164NetworkAddress_internationalNumber = STR_NUM(name='internationalNumber', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'DiallingString')))
    _ExtendedE164NetworkAddress_internationalNumber._const_alpha = ASN1Set(rv=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], rr=[], ev=None, er=[])
    _ExtendedE164NetworkAddress_subAddress = STR_NUM(name='subAddress', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'SubAddressString')), opt=True)
    _ExtendedE164NetworkAddress_subAddress._const_alpha = ASN1Set(rv=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], rr=[], ev=None, er=[])
    _ExtendedE164NetworkAddress_extraDialling = STR_BMP(name='extraDialling', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ExtraDiallingString')), opt=True)
    _ExtendedE164NetworkAddress_extraDialling._const_alpha = ASN1Set(rv=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '#', '*', ','], rr=[], ev=None, er=[])
    ExtendedE164NetworkAddress._cont = ASN1Dict([
        ('internationalNumber', _ExtendedE164NetworkAddress_internationalNumber),
        ('subAddress', _ExtendedE164NetworkAddress_subAddress),
        ('extraDialling', _ExtendedE164NetworkAddress_extraDialling),
        ])
    ExtendedE164NetworkAddress._ext = []
    
    #-----< TransportAddress >-----#
    TransportAddress = SEQ(name='TransportAddress', mode=MODE_TYPE)
    _TransportAddress_nsapAddress = OCT_STR(name='nsapAddress', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TransportAddress_nsapAddress._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=20)], ev=None, er=[])
    _TransportAddress_transportSelector = OCT_STR(name='transportSelector', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    TransportAddress._cont = ASN1Dict([
        ('nsapAddress', _TransportAddress_nsapAddress),
        ('transportSelector', _TransportAddress_transportSelector),
        ])
    TransportAddress._ext = None
    
    #-----< GSTNConnection >-----#
    GSTNConnection = SEQ(name='GSTNConnection', mode=MODE_TYPE)
    _GSTNConnection_networkAddress = SEQ(name='networkAddress', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ExtendedE164NetworkAddress')))
    GSTNConnection._cont = ASN1Dict([
        ('networkAddress', _GSTNConnection_networkAddress),
        ])
    GSTNConnection._ext = []
    
    #-----< ISDNConnection >-----#
    ISDNConnection = SEQ(name='ISDNConnection', mode=MODE_TYPE)
    _ISDNConnection_circuitTypes = SET_OF(name='circuitTypes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __ISDNConnection_circuitTypes__item_ = CHOICE(name='_item_', mode=MODE_TYPE)
    ___ISDNConnection_circuitTypes__item__digital_64k = NULL(name='digital-64k', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___ISDNConnection_circuitTypes__item__digital_2x64k = NULL(name='digital-2x64k', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___ISDNConnection_circuitTypes__item__digital_384k = NULL(name='digital-384k', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___ISDNConnection_circuitTypes__item__digital_1536 = NULL(name='digital-1536', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___ISDNConnection_circuitTypes__item__digital_1920k = NULL(name='digital-1920k', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___ISDNConnection_circuitTypes__item__multirate_base_64k = INT(name='multirate-base-64k', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___ISDNConnection_circuitTypes__item__multirate_base_64k._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=30)], ev=None, er=[])
    __ISDNConnection_circuitTypes__item_._cont = ASN1Dict([
        ('digital-64k', ___ISDNConnection_circuitTypes__item__digital_64k),
        ('digital-2x64k', ___ISDNConnection_circuitTypes__item__digital_2x64k),
        ('digital-384k', ___ISDNConnection_circuitTypes__item__digital_384k),
        ('digital-1536', ___ISDNConnection_circuitTypes__item__digital_1536),
        ('digital-1920k', ___ISDNConnection_circuitTypes__item__digital_1920k),
        ('multirate-base-64k', ___ISDNConnection_circuitTypes__item__multirate_base_64k),
        ])
    __ISDNConnection_circuitTypes__item_._ext = None
    _ISDNConnection_circuitTypes._cont = __ISDNConnection_circuitTypes__item_
    _ISDNConnection_networkAddress = SEQ(name='networkAddress', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ExtendedE164NetworkAddress')))
    _ISDNConnection_highLayerCompatibility = SEQ(name='highLayerCompatibility', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ISDNConnection_highLayerCompatibility_telephony3kHz = BOOL(name='telephony3kHz', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __ISDNConnection_highLayerCompatibility_telephony7kHz = BOOL(name='telephony7kHz', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __ISDNConnection_highLayerCompatibility_videotelephony = BOOL(name='videotelephony', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __ISDNConnection_highLayerCompatibility_videoconference = BOOL(name='videoconference', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __ISDNConnection_highLayerCompatibility_audiographic = BOOL(name='audiographic', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __ISDNConnection_highLayerCompatibility_audiovisual = BOOL(name='audiovisual', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __ISDNConnection_highLayerCompatibility_multimedia = BOOL(name='multimedia', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ISDNConnection_highLayerCompatibility._cont = ASN1Dict([
        ('telephony3kHz', __ISDNConnection_highLayerCompatibility_telephony3kHz),
        ('telephony7kHz', __ISDNConnection_highLayerCompatibility_telephony7kHz),
        ('videotelephony', __ISDNConnection_highLayerCompatibility_videotelephony),
        ('videoconference', __ISDNConnection_highLayerCompatibility_videoconference),
        ('audiographic', __ISDNConnection_highLayerCompatibility_audiographic),
        ('audiovisual', __ISDNConnection_highLayerCompatibility_audiovisual),
        ('multimedia', __ISDNConnection_highLayerCompatibility_multimedia),
        ])
    _ISDNConnection_highLayerCompatibility._ext = []
    ISDNConnection._cont = ASN1Dict([
        ('circuitTypes', _ISDNConnection_circuitTypes),
        ('networkAddress', _ISDNConnection_networkAddress),
        ('highLayerCompatibility', _ISDNConnection_highLayerCompatibility),
        ])
    ISDNConnection._ext = []
    
    #-----< CSDNConnection >-----#
    CSDNConnection = SEQ(name='CSDNConnection', mode=MODE_TYPE)
    _CSDNConnection_circuitTypes = SET_OF(name='circuitTypes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __CSDNConnection_circuitTypes__item_ = CHOICE(name='_item_', mode=MODE_TYPE)
    ___CSDNConnection_circuitTypes__item__digital_56k = NULL(name='digital-56k', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___CSDNConnection_circuitTypes__item__digital_64k = NULL(name='digital-64k', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __CSDNConnection_circuitTypes__item_._cont = ASN1Dict([
        ('digital-56k', ___CSDNConnection_circuitTypes__item__digital_56k),
        ('digital-64k', ___CSDNConnection_circuitTypes__item__digital_64k),
        ])
    __CSDNConnection_circuitTypes__item_._ext = None
    _CSDNConnection_circuitTypes._cont = __CSDNConnection_circuitTypes__item_
    _CSDNConnection_networkAddress = SEQ(name='networkAddress', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ExtendedE164NetworkAddress')))
    CSDNConnection._cont = ASN1Dict([
        ('circuitTypes', _CSDNConnection_circuitTypes),
        ('networkAddress', _CSDNConnection_networkAddress),
        ])
    CSDNConnection._ext = []
    
    #-----< PSDNConnection >-----#
    PSDNConnection = SEQ(name='PSDNConnection', mode=MODE_TYPE)
    _PSDNConnection_networkAddress = CHOICE(name='networkAddress', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __PSDNConnection_networkAddress_extendedE164NetworkAddress = SEQ(name='extendedE164NetworkAddress', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ExtendedE164NetworkAddress')))
    __PSDNConnection_networkAddress_transportAddress = SEQ(name='transportAddress', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'TransportAddress')))
    __PSDNConnection_networkAddress_nonStandard = SEQ(name='nonStandard', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _PSDNConnection_networkAddress._cont = ASN1Dict([
        ('extendedE164NetworkAddress', __PSDNConnection_networkAddress_extendedE164NetworkAddress),
        ('transportAddress', __PSDNConnection_networkAddress_transportAddress),
        ('nonStandard', __PSDNConnection_networkAddress_nonStandard),
        ])
    _PSDNConnection_networkAddress._ext = None
    PSDNConnection._cont = ASN1Dict([
        ('networkAddress', _PSDNConnection_networkAddress),
        ])
    PSDNConnection._ext = []
    
    #-----< ATMConnection >-----#
    ATMConnection = SEQ(name='ATMConnection', mode=MODE_TYPE)
    _ATMConnection_networkAddress = CHOICE(name='networkAddress', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __ATMConnection_networkAddress_extendedE164 = SEQ(name='extendedE164', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ExtendedE164NetworkAddress')))
    __ATMConnection_networkAddress_nsapAddress = SEQ(name='nsapAddress', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'TransportAddress')))
    __ATMConnection_networkAddress_nonStandard = SEQ(name='nonStandard', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _ATMConnection_networkAddress._cont = ASN1Dict([
        ('extendedE164', __ATMConnection_networkAddress_extendedE164),
        ('nsapAddress', __ATMConnection_networkAddress_nsapAddress),
        ('nonStandard', __ATMConnection_networkAddress_nonStandard),
        ])
    _ATMConnection_networkAddress._ext = None
    _ATMConnection_maxTransferRate = INT(name='maxTransferRate', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ATMConnection_maxTransferRate._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    ATMConnection._cont = ASN1Dict([
        ('networkAddress', _ATMConnection_networkAddress),
        ('maxTransferRate', _ATMConnection_maxTransferRate),
        ])
    ATMConnection._ext = []
    
    #-----< NetworkConnection >-----#
    NetworkConnection = CHOICE(name='NetworkConnection', mode=MODE_TYPE)
    _NetworkConnection_gstnConnection = SEQ(name='gstnConnection', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'GSTNConnection')))
    _NetworkConnection_isdnConnection = SEQ(name='isdnConnection', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ISDNConnection')))
    _NetworkConnection_csdnConnection = SEQ(name='csdnConnection', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'CSDNConnection')))
    _NetworkConnection_psdnConnection = SEQ(name='psdnConnection', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'PSDNConnection')))
    _NetworkConnection_atmConnection = SEQ(name='atmConnection', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ATMConnection')))
    _NetworkConnection_extendedE164NetworkAddress = SEQ(name='extendedE164NetworkAddress', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ExtendedE164NetworkAddress')))
    _NetworkConnection_transportAddress = SEQ(name='transportAddress', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'TransportAddress')))
    _NetworkConnection_nonStandard = SEQ(name='nonStandard', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    NetworkConnection._cont = ASN1Dict([
        ('gstnConnection', _NetworkConnection_gstnConnection),
        ('isdnConnection', _NetworkConnection_isdnConnection),
        ('csdnConnection', _NetworkConnection_csdnConnection),
        ('psdnConnection', _NetworkConnection_psdnConnection),
        ('atmConnection', _NetworkConnection_atmConnection),
        ('extendedE164NetworkAddress', _NetworkConnection_extendedE164NetworkAddress),
        ('transportAddress', _NetworkConnection_transportAddress),
        ('nonStandard', _NetworkConnection_nonStandard),
        ])
    NetworkConnection._ext = []
    
    #-----< NetworkAddressV2 >-----#
    NetworkAddressV2 = SET_OF(name='NetworkAddressV2', mode=MODE_TYPE)
    _NetworkAddressV2__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    __NetworkAddressV2__item__networkConnection = CHOICE(name='networkConnection', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___NetworkAddressV2__item__networkConnection_singleConnection = CHOICE(name='singleConnection', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NetworkConnection')))
    ___NetworkAddressV2__item__networkConnection_aggregatedConnections = SEQ(name='aggregatedConnections', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____NetworkAddressV2__item__networkConnection_aggregatedConnections_connectionList = SET_OF(name='connectionList', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _____NetworkAddressV2__item__networkConnection_aggregatedConnections_connectionList__item_ = CHOICE(name='_item_', mode=MODE_TYPE)
    ______NetworkAddressV2__item__networkConnection_aggregatedConnections_connectionList__item__isdnConnection = SEQ(name='isdnConnection', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ISDNConnection')))
    ______NetworkAddressV2__item__networkConnection_aggregatedConnections_connectionList__item__csdnConnection = SEQ(name='csdnConnection', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'CSDNConnection')))
    _____NetworkAddressV2__item__networkConnection_aggregatedConnections_connectionList__item_._cont = ASN1Dict([
        ('isdnConnection', ______NetworkAddressV2__item__networkConnection_aggregatedConnections_connectionList__item__isdnConnection),
        ('csdnConnection', ______NetworkAddressV2__item__networkConnection_aggregatedConnections_connectionList__item__csdnConnection),
        ])
    _____NetworkAddressV2__item__networkConnection_aggregatedConnections_connectionList__item_._ext = []
    ____NetworkAddressV2__item__networkConnection_aggregatedConnections_connectionList._cont = _____NetworkAddressV2__item__networkConnection_aggregatedConnections_connectionList__item_
    ____NetworkAddressV2__item__networkConnection_aggregatedConnections_connectionList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=30)], ev=None, er=[])
    ____NetworkAddressV2__item__networkConnection_aggregatedConnections_aggregationMethods = SET_OF(name='aggregationMethods', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _____NetworkAddressV2__item__networkConnection_aggregatedConnections_aggregationMethods__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'ChannelAggregationMethod')))
    ____NetworkAddressV2__item__networkConnection_aggregatedConnections_aggregationMethods._cont = _____NetworkAddressV2__item__networkConnection_aggregatedConnections_aggregationMethods__item_
    ___NetworkAddressV2__item__networkConnection_aggregatedConnections._cont = ASN1Dict([
        ('connectionList', ____NetworkAddressV2__item__networkConnection_aggregatedConnections_connectionList),
        ('aggregationMethods', ____NetworkAddressV2__item__networkConnection_aggregatedConnections_aggregationMethods),
        ])
    ___NetworkAddressV2__item__networkConnection_aggregatedConnections._ext = []
    __NetworkAddressV2__item__networkConnection._cont = ASN1Dict([
        ('singleConnection', ___NetworkAddressV2__item__networkConnection_singleConnection),
        ('aggregatedConnections', ___NetworkAddressV2__item__networkConnection_aggregatedConnections),
        ])
    __NetworkAddressV2__item__networkConnection._ext = None
    __NetworkAddressV2__item__profiles = SET_OF(name='profiles', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    ___NetworkAddressV2__item__profiles__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'Profile')))
    __NetworkAddressV2__item__profiles._cont = ___NetworkAddressV2__item__profiles__item_
    __NetworkAddressV2__item__mediaConcerned = SEQ(name='mediaConcerned', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'MediaList')), opt=True)
    _NetworkAddressV2__item_._cont = ASN1Dict([
        ('networkConnection', __NetworkAddressV2__item__networkConnection),
        ('profiles', __NetworkAddressV2__item__profiles),
        ('mediaConcerned', __NetworkAddressV2__item__mediaConcerned),
        ])
    _NetworkAddressV2__item_._ext = []
    NetworkAddressV2._cont = _NetworkAddressV2__item_
    
    #-----< NodeType >-----#
    NodeType = ENUM(name='NodeType', mode=MODE_TYPE)
    NodeType._cont = ASN1Dict([('terminal', 0), ('multiportTerminal', 1), ('mcu', 2)])
    NodeType._ext = []
    
    #-----< NodeProperties >-----#
    NodeProperties = SEQ(name='NodeProperties', mode=MODE_TYPE)
    _NodeProperties_managementDevice = BOOL(name='managementDevice', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _NodeProperties_peripheralDevice = BOOL(name='peripheralDevice', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    NodeProperties._cont = ASN1Dict([
        ('managementDevice', _NodeProperties_managementDevice),
        ('peripheralDevice', _NodeProperties_peripheralDevice),
        ])
    NodeProperties._ext = []
    
    #-----< AsymmetryIndicator >-----#
    AsymmetryIndicator = CHOICE(name='AsymmetryIndicator', mode=MODE_TYPE)
    _AsymmetryIndicator_callingNode = NULL(name='callingNode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _AsymmetryIndicator_calledNode = NULL(name='calledNode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _AsymmetryIndicator_unknown = INT(name='unknown', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _AsymmetryIndicator_unknown._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=4294967295)], ev=None, er=[])
    AsymmetryIndicator._cont = ASN1Dict([
        ('callingNode', _AsymmetryIndicator_callingNode),
        ('calledNode', _AsymmetryIndicator_calledNode),
        ('unknown', _AsymmetryIndicator_unknown),
        ])
    AsymmetryIndicator._ext = None
    
    #-----< AlternativeNodeID >-----#
    AlternativeNodeID = CHOICE(name='AlternativeNodeID', mode=MODE_TYPE)
    _AlternativeNodeID_h243NodeID = OCT_STR(name='h243NodeID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _AlternativeNodeID_h243NodeID._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    AlternativeNodeID._cont = ASN1Dict([
        ('h243NodeID', _AlternativeNodeID_h243NodeID),
        ])
    AlternativeNodeID._ext = []
    
    #-----< ConferenceDescriptor >-----#
    ConferenceDescriptor = SEQ(name='ConferenceDescriptor', mode=MODE_TYPE)
    _ConferenceDescriptor_conferenceName = SEQ(name='conferenceName', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceName')))
    _ConferenceDescriptor_conferenceNameModifier = STR_NUM(name='conferenceNameModifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceNameModifier')), opt=True)
    _ConferenceDescriptor_conferenceNameModifier._const_alpha = ASN1Set(rv=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], rr=[], ev=None, er=[])
    _ConferenceDescriptor_conferenceDescription = STR_BMP(name='conferenceDescription', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'TextString')), opt=True)
    _ConferenceDescriptor_lockedConference = BOOL(name='lockedConference', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceDescriptor_passwordInTheClearRequired = BOOL(name='passwordInTheClearRequired', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceDescriptor_networkAddress = SEQ_OF(name='networkAddress', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NetworkAddress')), opt=True)
    _ConferenceDescriptor_defaultConferenceFlag = BOOL(name='defaultConferenceFlag', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceDescriptor_conferenceMode = CHOICE(name='conferenceMode', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceMode')))
    ConferenceDescriptor._cont = ASN1Dict([
        ('conferenceName', _ConferenceDescriptor_conferenceName),
        ('conferenceNameModifier', _ConferenceDescriptor_conferenceNameModifier),
        ('conferenceDescription', _ConferenceDescriptor_conferenceDescription),
        ('lockedConference', _ConferenceDescriptor_lockedConference),
        ('passwordInTheClearRequired', _ConferenceDescriptor_passwordInTheClearRequired),
        ('networkAddress', _ConferenceDescriptor_networkAddress),
        ('defaultConferenceFlag', _ConferenceDescriptor_defaultConferenceFlag),
        ('conferenceMode', _ConferenceDescriptor_conferenceMode),
        ])
    ConferenceDescriptor._ext = ['defaultConferenceFlag', 'conferenceMode']
    
    #-----< NodeRecord >-----#
    NodeRecord = SEQ(name='NodeRecord', mode=MODE_TYPE)
    _NodeRecord_superiorNode = INT(name='superiorNode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')), opt=True)
    _NodeRecord_nodeType = ENUM(name='nodeType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NodeType')))
    _NodeRecord_nodeProperties = SEQ(name='nodeProperties', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NodeProperties')))
    _NodeRecord_nodeName = STR_BMP(name='nodeName', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'TextString')), opt=True)
    _NodeRecord_participantsList = SEQ_OF(name='participantsList', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __NodeRecord_participantsList__item_ = STR_BMP(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'TextString')))
    _NodeRecord_participantsList._cont = __NodeRecord_participantsList__item_
    _NodeRecord_siteInformation = STR_BMP(name='siteInformation', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'TextString')), opt=True)
    _NodeRecord_networkAddress = SEQ_OF(name='networkAddress', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NetworkAddress')), opt=True)
    _NodeRecord_alternativeNodeID = CHOICE(name='alternativeNodeID', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'AlternativeNodeID')), opt=True)
    _NodeRecord_userData = SET_OF(name='userData', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserData')), opt=True)
    _NodeRecord_nodeCategory = CHOICE(name='nodeCategory', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NodeCategory')), opt=True)
    _NodeRecord_sessionID = INT(name='sessionID', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ChannelID')), opt=True)
    NodeRecord._cont = ASN1Dict([
        ('superiorNode', _NodeRecord_superiorNode),
        ('nodeType', _NodeRecord_nodeType),
        ('nodeProperties', _NodeRecord_nodeProperties),
        ('nodeName', _NodeRecord_nodeName),
        ('participantsList', _NodeRecord_participantsList),
        ('siteInformation', _NodeRecord_siteInformation),
        ('networkAddress', _NodeRecord_networkAddress),
        ('alternativeNodeID', _NodeRecord_alternativeNodeID),
        ('userData', _NodeRecord_userData),
        ('nodeCategory', _NodeRecord_nodeCategory),
        ('sessionID', _NodeRecord_sessionID),
        ])
    NodeRecord._ext = ['nodeCategory', 'sessionID']
    
    #-----< SessionKey >-----#
    SessionKey = SEQ(name='SessionKey', mode=MODE_TYPE)
    _SessionKey_applicationProtocolKey = CHOICE(name='applicationProtocolKey', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'Key')))
    _SessionKey_sessionID = INT(name='sessionID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ChannelID')), opt=True)
    SessionKey._cont = ASN1Dict([
        ('applicationProtocolKey', _SessionKey_applicationProtocolKey),
        ('sessionID', _SessionKey_sessionID),
        ])
    SessionKey._ext = None
    
    #-----< ChannelType >-----#
    ChannelType = ENUM(name='ChannelType', mode=MODE_TYPE)
    ChannelType._cont = ASN1Dict([('static', 0), ('dynamicMulticast', 1), ('dynamicPrivate', 2), ('dynamicUserId', 3)])
    ChannelType._ext = None
    
    #-----< ApplicationRecord >-----#
    ApplicationRecord = SEQ(name='ApplicationRecord', mode=MODE_TYPE)
    _ApplicationRecord_applicationActive = BOOL(name='applicationActive', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ApplicationRecord_conductingOperationCapable = BOOL(name='conductingOperationCapable', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ApplicationRecord_startupChannel = ENUM(name='startupChannel', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ChannelType')), opt=True)
    _ApplicationRecord_applicationUserID = INT(name='applicationUserID', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')), opt=True)
    _ApplicationRecord_nonCollapsingCapabilities = SET_OF(name='nonCollapsingCapabilities', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ApplicationRecord_nonCollapsingCapabilities__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    ___ApplicationRecord_nonCollapsingCapabilities__item__capabilityID = CHOICE(name='capabilityID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'CapabilityID')))
    ___ApplicationRecord_nonCollapsingCapabilities__item__applicationData = OCT_STR(name='applicationData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ApplicationRecord_nonCollapsingCapabilities__item_._cont = ASN1Dict([
        ('capabilityID', ___ApplicationRecord_nonCollapsingCapabilities__item__capabilityID),
        ('applicationData', ___ApplicationRecord_nonCollapsingCapabilities__item__applicationData),
        ])
    __ApplicationRecord_nonCollapsingCapabilities__item_._ext = None
    _ApplicationRecord_nonCollapsingCapabilities._cont = __ApplicationRecord_nonCollapsingCapabilities__item_
    ApplicationRecord._cont = ASN1Dict([
        ('applicationActive', _ApplicationRecord_applicationActive),
        ('conductingOperationCapable', _ApplicationRecord_conductingOperationCapable),
        ('startupChannel', _ApplicationRecord_startupChannel),
        ('applicationUserID', _ApplicationRecord_applicationUserID),
        ('nonCollapsingCapabilities', _ApplicationRecord_nonCollapsingCapabilities),
        ])
    ApplicationRecord._ext = []
    
    #-----< CapabilityID >-----#
    CapabilityID = CHOICE(name='CapabilityID', mode=MODE_TYPE)
    _CapabilityID_standard = INT(name='standard', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CapabilityID_standard._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _CapabilityID_nonStandard = CHOICE(name='nonStandard', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'Key')))
    CapabilityID._cont = ASN1Dict([
        ('standard', _CapabilityID_standard),
        ('nonStandard', _CapabilityID_nonStandard),
        ])
    CapabilityID._ext = None
    
    #-----< CapabilityClass >-----#
    CapabilityClass = CHOICE(name='CapabilityClass', mode=MODE_TYPE)
    _CapabilityClass_logical = NULL(name='logical', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CapabilityClass_unsignedMin = INT(name='unsignedMin', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CapabilityClass_unsignedMin._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    _CapabilityClass_unsignedMax = INT(name='unsignedMax', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CapabilityClass_unsignedMax._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    CapabilityClass._cont = ASN1Dict([
        ('logical', _CapabilityClass_logical),
        ('unsignedMin', _CapabilityClass_unsignedMin),
        ('unsignedMax', _CapabilityClass_unsignedMax),
        ])
    CapabilityClass._ext = []
    
    #-----< EntityID >-----#
    EntityID = INT(name='EntityID', mode=MODE_TYPE)
    EntityID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< ApplicationInvokeSpecifier >-----#
    ApplicationInvokeSpecifier = SEQ(name='ApplicationInvokeSpecifier', mode=MODE_TYPE)
    _ApplicationInvokeSpecifier_sessionKey = SEQ(name='sessionKey', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'SessionKey')))
    _ApplicationInvokeSpecifier_expectedCapabilitySet = SET_OF(name='expectedCapabilitySet', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ApplicationInvokeSpecifier_expectedCapabilitySet__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    ___ApplicationInvokeSpecifier_expectedCapabilitySet__item__capabilityID = CHOICE(name='capabilityID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'CapabilityID')))
    ___ApplicationInvokeSpecifier_expectedCapabilitySet__item__capabilityClass = CHOICE(name='capabilityClass', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'CapabilityClass')))
    __ApplicationInvokeSpecifier_expectedCapabilitySet__item_._cont = ASN1Dict([
        ('capabilityID', ___ApplicationInvokeSpecifier_expectedCapabilitySet__item__capabilityID),
        ('capabilityClass', ___ApplicationInvokeSpecifier_expectedCapabilitySet__item__capabilityClass),
        ])
    __ApplicationInvokeSpecifier_expectedCapabilitySet__item_._ext = []
    _ApplicationInvokeSpecifier_expectedCapabilitySet._cont = __ApplicationInvokeSpecifier_expectedCapabilitySet__item_
    _ApplicationInvokeSpecifier_startupChannel = ENUM(name='startupChannel', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ChannelType')), opt=True)
    _ApplicationInvokeSpecifier_mandatoryFlag = BOOL(name='mandatoryFlag', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ApplicationInvokeSpecifier._cont = ASN1Dict([
        ('sessionKey', _ApplicationInvokeSpecifier_sessionKey),
        ('expectedCapabilitySet', _ApplicationInvokeSpecifier_expectedCapabilitySet),
        ('startupChannel', _ApplicationInvokeSpecifier_startupChannel),
        ('mandatoryFlag', _ApplicationInvokeSpecifier_mandatoryFlag),
        ])
    ApplicationInvokeSpecifier._ext = []
    
    #-----< RegistryKey >-----#
    RegistryKey = SEQ(name='RegistryKey', mode=MODE_TYPE)
    _RegistryKey_sessionKey = SEQ(name='sessionKey', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'SessionKey')))
    _RegistryKey_resourceID = OCT_STR(name='resourceID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RegistryKey_resourceID._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=64)], ev=None, er=[])
    RegistryKey._cont = ASN1Dict([
        ('sessionKey', _RegistryKey_sessionKey),
        ('resourceID', _RegistryKey_resourceID),
        ])
    RegistryKey._ext = None
    
    #-----< RegistryItem >-----#
    RegistryItem = CHOICE(name='RegistryItem', mode=MODE_TYPE)
    _RegistryItem_channelID = INT(name='channelID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'DynamicChannelID')))
    _RegistryItem_tokenID = INT(name='tokenID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'DynamicTokenID')))
    _RegistryItem_parameter = OCT_STR(name='parameter', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RegistryItem_parameter._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=64)], ev=None, er=[])
    _RegistryItem_vacant = NULL(name='vacant', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    RegistryItem._cont = ASN1Dict([
        ('channelID', _RegistryItem_channelID),
        ('tokenID', _RegistryItem_tokenID),
        ('parameter', _RegistryItem_parameter),
        ('vacant', _RegistryItem_vacant),
        ])
    RegistryItem._ext = []
    
    #-----< RegistryEntryOwner >-----#
    RegistryEntryOwner = CHOICE(name='RegistryEntryOwner', mode=MODE_TYPE)
    _RegistryEntryOwner_owned = SEQ(name='owned', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __RegistryEntryOwner_owned_nodeID = INT(name='nodeID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    __RegistryEntryOwner_owned_entityID = INT(name='entityID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'EntityID')))
    _RegistryEntryOwner_owned._cont = ASN1Dict([
        ('nodeID', __RegistryEntryOwner_owned_nodeID),
        ('entityID', __RegistryEntryOwner_owned_entityID),
        ])
    _RegistryEntryOwner_owned._ext = None
    _RegistryEntryOwner_notOwned = NULL(name='notOwned', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    RegistryEntryOwner._cont = ASN1Dict([
        ('owned', _RegistryEntryOwner_owned),
        ('notOwned', _RegistryEntryOwner_notOwned),
        ])
    RegistryEntryOwner._ext = None
    
    #-----< RegistryModificationRights >-----#
    RegistryModificationRights = ENUM(name='RegistryModificationRights', mode=MODE_TYPE)
    RegistryModificationRights._cont = ASN1Dict([('owner', 0), ('session', 1), ('public', 2)])
    RegistryModificationRights._ext = None
    
    #-----< UserIDIndication >-----#
    UserIDIndication = SEQ(name='UserIDIndication', mode=MODE_TYPE)
    _UserIDIndication_tag = INT(name='tag', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    UserIDIndication._cont = ASN1Dict([
        ('tag', _UserIDIndication_tag),
        ])
    UserIDIndication._ext = []
    
    #-----< ConferenceCreateRequest >-----#
    ConferenceCreateRequest = SEQ(name='ConferenceCreateRequest', mode=MODE_TYPE)
    _ConferenceCreateRequest_conferenceName = SEQ(name='conferenceName', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceName')))
    _ConferenceCreateRequest_convenerPassword = SEQ(name='convenerPassword', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'Password')), opt=True)
    _ConferenceCreateRequest_password = SEQ(name='password', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'Password')), opt=True)
    _ConferenceCreateRequest_lockedConference = BOOL(name='lockedConference', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceCreateRequest_listedConference = BOOL(name='listedConference', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceCreateRequest_conductibleConference = BOOL(name='conductibleConference', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceCreateRequest_terminationMethod = ENUM(name='terminationMethod', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'TerminationMethod')))
    _ConferenceCreateRequest_conductorPrivileges = SET_OF(name='conductorPrivileges', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ConferenceCreateRequest_conductorPrivileges__item_ = ENUM(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'Privilege')))
    _ConferenceCreateRequest_conductorPrivileges._cont = __ConferenceCreateRequest_conductorPrivileges__item_
    _ConferenceCreateRequest_conductedPrivileges = SET_OF(name='conductedPrivileges', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ConferenceCreateRequest_conductedPrivileges__item_ = ENUM(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'Privilege')))
    _ConferenceCreateRequest_conductedPrivileges._cont = __ConferenceCreateRequest_conductedPrivileges__item_
    _ConferenceCreateRequest_nonConductedPrivileges = SET_OF(name='nonConductedPrivileges', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ConferenceCreateRequest_nonConductedPrivileges__item_ = ENUM(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'Privilege')))
    _ConferenceCreateRequest_nonConductedPrivileges._cont = __ConferenceCreateRequest_nonConductedPrivileges__item_
    _ConferenceCreateRequest_conferenceDescription = STR_BMP(name='conferenceDescription', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'TextString')), opt=True)
    _ConferenceCreateRequest_callerIdentifier = STR_BMP(name='callerIdentifier', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'TextString')), opt=True)
    _ConferenceCreateRequest_userData = SET_OF(name='userData', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserData')), opt=True)
    _ConferenceCreateRequest_conferencePriority = SEQ(name='conferencePriority', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferencePriority')), opt=True)
    _ConferenceCreateRequest_conferenceMode = CHOICE(name='conferenceMode', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceMode')), opt=True)
    ConferenceCreateRequest._cont = ASN1Dict([
        ('conferenceName', _ConferenceCreateRequest_conferenceName),
        ('convenerPassword', _ConferenceCreateRequest_convenerPassword),
        ('password', _ConferenceCreateRequest_password),
        ('lockedConference', _ConferenceCreateRequest_lockedConference),
        ('listedConference', _ConferenceCreateRequest_listedConference),
        ('conductibleConference', _ConferenceCreateRequest_conductibleConference),
        ('terminationMethod', _ConferenceCreateRequest_terminationMethod),
        ('conductorPrivileges', _ConferenceCreateRequest_conductorPrivileges),
        ('conductedPrivileges', _ConferenceCreateRequest_conductedPrivileges),
        ('nonConductedPrivileges', _ConferenceCreateRequest_nonConductedPrivileges),
        ('conferenceDescription', _ConferenceCreateRequest_conferenceDescription),
        ('callerIdentifier', _ConferenceCreateRequest_callerIdentifier),
        ('userData', _ConferenceCreateRequest_userData),
        ('conferencePriority', _ConferenceCreateRequest_conferencePriority),
        ('conferenceMode', _ConferenceCreateRequest_conferenceMode),
        ])
    ConferenceCreateRequest._ext = ['conferencePriority', 'conferenceMode']
    
    #-----< ConferenceCreateResponse >-----#
    ConferenceCreateResponse = SEQ(name='ConferenceCreateResponse', mode=MODE_TYPE)
    _ConferenceCreateResponse_nodeID = INT(name='nodeID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _ConferenceCreateResponse_tag = INT(name='tag', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceCreateResponse_result = ENUM(name='result', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceCreateResponse_result._cont = ASN1Dict([('success', 0), ('userRejected', 1), ('resourcesNotAvailable', 2), ('rejectedForSymmetryBreaking', 3), ('lockedConferenceNotSupported', 4)])
    _ConferenceCreateResponse_result._ext = []
    _ConferenceCreateResponse_userData = SET_OF(name='userData', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserData')), opt=True)
    ConferenceCreateResponse._cont = ASN1Dict([
        ('nodeID', _ConferenceCreateResponse_nodeID),
        ('tag', _ConferenceCreateResponse_tag),
        ('result', _ConferenceCreateResponse_result),
        ('userData', _ConferenceCreateResponse_userData),
        ])
    ConferenceCreateResponse._ext = []
    
    #-----< ConferenceQueryRequest >-----#
    ConferenceQueryRequest = SEQ(name='ConferenceQueryRequest', mode=MODE_TYPE)
    _ConferenceQueryRequest_nodeType = ENUM(name='nodeType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NodeType')))
    _ConferenceQueryRequest_asymmetryIndicator = CHOICE(name='asymmetryIndicator', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'AsymmetryIndicator')), opt=True)
    _ConferenceQueryRequest_userData = SET_OF(name='userData', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserData')), opt=True)
    ConferenceQueryRequest._cont = ASN1Dict([
        ('nodeType', _ConferenceQueryRequest_nodeType),
        ('asymmetryIndicator', _ConferenceQueryRequest_asymmetryIndicator),
        ('userData', _ConferenceQueryRequest_userData),
        ])
    ConferenceQueryRequest._ext = []
    
    #-----< ConferenceQueryResponse >-----#
    ConferenceQueryResponse = SEQ(name='ConferenceQueryResponse', mode=MODE_TYPE)
    _ConferenceQueryResponse_nodeType = ENUM(name='nodeType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NodeType')))
    _ConferenceQueryResponse_asymmetryIndicator = CHOICE(name='asymmetryIndicator', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'AsymmetryIndicator')), opt=True)
    _ConferenceQueryResponse_conferenceList = SET_OF(name='conferenceList', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __ConferenceQueryResponse_conferenceList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceDescriptor')))
    _ConferenceQueryResponse_conferenceList._cont = __ConferenceQueryResponse_conferenceList__item_
    _ConferenceQueryResponse_result = ENUM(name='result', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceQueryResponse_result._cont = ASN1Dict([('success', 0), ('userRejected', 1)])
    _ConferenceQueryResponse_result._ext = []
    _ConferenceQueryResponse_userData = SET_OF(name='userData', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserData')), opt=True)
    _ConferenceQueryResponse_waitForInvitationFlag = BOOL(name='waitForInvitationFlag', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ConferenceQueryResponse_noUnlistedConferenceFlag = BOOL(name='noUnlistedConferenceFlag', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    ConferenceQueryResponse._cont = ASN1Dict([
        ('nodeType', _ConferenceQueryResponse_nodeType),
        ('asymmetryIndicator', _ConferenceQueryResponse_asymmetryIndicator),
        ('conferenceList', _ConferenceQueryResponse_conferenceList),
        ('result', _ConferenceQueryResponse_result),
        ('userData', _ConferenceQueryResponse_userData),
        ('waitForInvitationFlag', _ConferenceQueryResponse_waitForInvitationFlag),
        ('noUnlistedConferenceFlag', _ConferenceQueryResponse_noUnlistedConferenceFlag),
        ])
    ConferenceQueryResponse._ext = ['waitForInvitationFlag', 'noUnlistedConferenceFlag']
    
    #-----< ConferenceJoinRequest >-----#
    ConferenceJoinRequest = SEQ(name='ConferenceJoinRequest', mode=MODE_TYPE)
    _ConferenceJoinRequest_conferenceName = CHOICE(name='conferenceName', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceNameSelector')), opt=True)
    _ConferenceJoinRequest_conferenceNameModifier = STR_NUM(name='conferenceNameModifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceNameModifier')), opt=True)
    _ConferenceJoinRequest_conferenceNameModifier._const_alpha = ASN1Set(rv=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], rr=[], ev=None, er=[])
    _ConferenceJoinRequest_tag = INT(name='tag', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ConferenceJoinRequest_password = CHOICE(name='password', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'PasswordChallengeRequestResponse')), opt=True)
    _ConferenceJoinRequest_convenerPassword = CHOICE(name='convenerPassword', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'PasswordSelector')), opt=True)
    _ConferenceJoinRequest_callerIdentifier = STR_BMP(name='callerIdentifier', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'TextString')), opt=True)
    _ConferenceJoinRequest_userData = SET_OF(name='userData', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserData')), opt=True)
    _ConferenceJoinRequest_nodeCategory = CHOICE(name='nodeCategory', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NodeCategory')), opt=True)
    ConferenceJoinRequest._cont = ASN1Dict([
        ('conferenceName', _ConferenceJoinRequest_conferenceName),
        ('conferenceNameModifier', _ConferenceJoinRequest_conferenceNameModifier),
        ('tag', _ConferenceJoinRequest_tag),
        ('password', _ConferenceJoinRequest_password),
        ('convenerPassword', _ConferenceJoinRequest_convenerPassword),
        ('callerIdentifier', _ConferenceJoinRequest_callerIdentifier),
        ('userData', _ConferenceJoinRequest_userData),
        ('nodeCategory', _ConferenceJoinRequest_nodeCategory),
        ])
    ConferenceJoinRequest._ext = ['nodeCategory']
    
    #-----< ConferenceJoinResponse >-----#
    ConferenceJoinResponse = SEQ(name='ConferenceJoinResponse', mode=MODE_TYPE)
    _ConferenceJoinResponse_nodeID = INT(name='nodeID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')), opt=True)
    _ConferenceJoinResponse_topNodeID = INT(name='topNodeID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _ConferenceJoinResponse_tag = INT(name='tag', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceJoinResponse_conferenceNameAlias = CHOICE(name='conferenceNameAlias', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceNameSelector')), opt=True)
    _ConferenceJoinResponse_passwordInTheClearRequired = BOOL(name='passwordInTheClearRequired', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceJoinResponse_lockedConference = BOOL(name='lockedConference', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceJoinResponse_listedConference = BOOL(name='listedConference', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceJoinResponse_conductibleConference = BOOL(name='conductibleConference', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceJoinResponse_terminationMethod = ENUM(name='terminationMethod', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'TerminationMethod')))
    _ConferenceJoinResponse_conductorPrivileges = SET_OF(name='conductorPrivileges', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ConferenceJoinResponse_conductorPrivileges__item_ = ENUM(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'Privilege')))
    _ConferenceJoinResponse_conductorPrivileges._cont = __ConferenceJoinResponse_conductorPrivileges__item_
    _ConferenceJoinResponse_conductedPrivileges = SET_OF(name='conductedPrivileges', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ConferenceJoinResponse_conductedPrivileges__item_ = ENUM(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'Privilege')))
    _ConferenceJoinResponse_conductedPrivileges._cont = __ConferenceJoinResponse_conductedPrivileges__item_
    _ConferenceJoinResponse_nonConductedPrivileges = SET_OF(name='nonConductedPrivileges', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ConferenceJoinResponse_nonConductedPrivileges__item_ = ENUM(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'Privilege')))
    _ConferenceJoinResponse_nonConductedPrivileges._cont = __ConferenceJoinResponse_nonConductedPrivileges__item_
    _ConferenceJoinResponse_conferenceDescription = STR_BMP(name='conferenceDescription', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'TextString')), opt=True)
    _ConferenceJoinResponse_password = CHOICE(name='password', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'PasswordChallengeRequestResponse')), opt=True)
    _ConferenceJoinResponse_result = ENUM(name='result', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceJoinResponse_result._cont = ASN1Dict([('success', 0), ('userRejected', 1), ('invalidConference', 2), ('invalidPassword', 3), ('invalidConvenerPassword', 4), ('challengeResponseRequired', 5), ('invalidChallengeResponse', 6)])
    _ConferenceJoinResponse_result._ext = []
    _ConferenceJoinResponse_userData = SET_OF(name='userData', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserData')), opt=True)
    _ConferenceJoinResponse_nodeCategory = CHOICE(name='nodeCategory', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NodeCategory')), opt=True)
    _ConferenceJoinResponse_conferenceMode = CHOICE(name='conferenceMode', mode=MODE_TYPE, tag=(17, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceMode')), opt=True)
    ConferenceJoinResponse._cont = ASN1Dict([
        ('nodeID', _ConferenceJoinResponse_nodeID),
        ('topNodeID', _ConferenceJoinResponse_topNodeID),
        ('tag', _ConferenceJoinResponse_tag),
        ('conferenceNameAlias', _ConferenceJoinResponse_conferenceNameAlias),
        ('passwordInTheClearRequired', _ConferenceJoinResponse_passwordInTheClearRequired),
        ('lockedConference', _ConferenceJoinResponse_lockedConference),
        ('listedConference', _ConferenceJoinResponse_listedConference),
        ('conductibleConference', _ConferenceJoinResponse_conductibleConference),
        ('terminationMethod', _ConferenceJoinResponse_terminationMethod),
        ('conductorPrivileges', _ConferenceJoinResponse_conductorPrivileges),
        ('conductedPrivileges', _ConferenceJoinResponse_conductedPrivileges),
        ('nonConductedPrivileges', _ConferenceJoinResponse_nonConductedPrivileges),
        ('conferenceDescription', _ConferenceJoinResponse_conferenceDescription),
        ('password', _ConferenceJoinResponse_password),
        ('result', _ConferenceJoinResponse_result),
        ('userData', _ConferenceJoinResponse_userData),
        ('nodeCategory', _ConferenceJoinResponse_nodeCategory),
        ('conferenceMode', _ConferenceJoinResponse_conferenceMode),
        ])
    ConferenceJoinResponse._ext = ['nodeCategory', 'conferenceMode']
    
    #-----< ConferenceInviteRequest >-----#
    ConferenceInviteRequest = SEQ(name='ConferenceInviteRequest', mode=MODE_TYPE)
    _ConferenceInviteRequest_conferenceName = SEQ(name='conferenceName', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceName')))
    _ConferenceInviteRequest_nodeID = INT(name='nodeID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _ConferenceInviteRequest_topNodeID = INT(name='topNodeID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _ConferenceInviteRequest_tag = INT(name='tag', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceInviteRequest_passwordInTheClearRequired = BOOL(name='passwordInTheClearRequired', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceInviteRequest_lockedConference = BOOL(name='lockedConference', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceInviteRequest_listedConference = BOOL(name='listedConference', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceInviteRequest_conductibleConference = BOOL(name='conductibleConference', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceInviteRequest_terminationMethod = ENUM(name='terminationMethod', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'TerminationMethod')))
    _ConferenceInviteRequest_conductorPrivileges = SET_OF(name='conductorPrivileges', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ConferenceInviteRequest_conductorPrivileges__item_ = ENUM(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'Privilege')))
    _ConferenceInviteRequest_conductorPrivileges._cont = __ConferenceInviteRequest_conductorPrivileges__item_
    _ConferenceInviteRequest_conductedPrivileges = SET_OF(name='conductedPrivileges', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ConferenceInviteRequest_conductedPrivileges__item_ = ENUM(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'Privilege')))
    _ConferenceInviteRequest_conductedPrivileges._cont = __ConferenceInviteRequest_conductedPrivileges__item_
    _ConferenceInviteRequest_nonConductedPrivileges = SET_OF(name='nonConductedPrivileges', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ConferenceInviteRequest_nonConductedPrivileges__item_ = ENUM(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'Privilege')))
    _ConferenceInviteRequest_nonConductedPrivileges._cont = __ConferenceInviteRequest_nonConductedPrivileges__item_
    _ConferenceInviteRequest_conferenceDescription = STR_BMP(name='conferenceDescription', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'TextString')), opt=True)
    _ConferenceInviteRequest_callerIdentifier = STR_BMP(name='callerIdentifier', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'TextString')), opt=True)
    _ConferenceInviteRequest_userData = SET_OF(name='userData', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserData')), opt=True)
    _ConferenceInviteRequest_conferencePriority = SEQ(name='conferencePriority', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferencePriority')), opt=True)
    _ConferenceInviteRequest_nodeCategory = CHOICE(name='nodeCategory', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NodeCategory')), opt=True)
    _ConferenceInviteRequest_conferenceMode = CHOICE(name='conferenceMode', mode=MODE_TYPE, tag=(17, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceMode')), opt=True)
    ConferenceInviteRequest._cont = ASN1Dict([
        ('conferenceName', _ConferenceInviteRequest_conferenceName),
        ('nodeID', _ConferenceInviteRequest_nodeID),
        ('topNodeID', _ConferenceInviteRequest_topNodeID),
        ('tag', _ConferenceInviteRequest_tag),
        ('passwordInTheClearRequired', _ConferenceInviteRequest_passwordInTheClearRequired),
        ('lockedConference', _ConferenceInviteRequest_lockedConference),
        ('listedConference', _ConferenceInviteRequest_listedConference),
        ('conductibleConference', _ConferenceInviteRequest_conductibleConference),
        ('terminationMethod', _ConferenceInviteRequest_terminationMethod),
        ('conductorPrivileges', _ConferenceInviteRequest_conductorPrivileges),
        ('conductedPrivileges', _ConferenceInviteRequest_conductedPrivileges),
        ('nonConductedPrivileges', _ConferenceInviteRequest_nonConductedPrivileges),
        ('conferenceDescription', _ConferenceInviteRequest_conferenceDescription),
        ('callerIdentifier', _ConferenceInviteRequest_callerIdentifier),
        ('userData', _ConferenceInviteRequest_userData),
        ('conferencePriority', _ConferenceInviteRequest_conferencePriority),
        ('nodeCategory', _ConferenceInviteRequest_nodeCategory),
        ('conferenceMode', _ConferenceInviteRequest_conferenceMode),
        ])
    ConferenceInviteRequest._ext = ['conferencePriority', 'nodeCategory', 'conferenceMode']
    
    #-----< ConferenceInviteResponse >-----#
    ConferenceInviteResponse = SEQ(name='ConferenceInviteResponse', mode=MODE_TYPE)
    _ConferenceInviteResponse_result = ENUM(name='result', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceInviteResponse_result._cont = ASN1Dict([('success', 0), ('userRejected', 1)])
    _ConferenceInviteResponse_result._ext = []
    _ConferenceInviteResponse_userData = SET_OF(name='userData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserData')), opt=True)
    ConferenceInviteResponse._cont = ASN1Dict([
        ('result', _ConferenceInviteResponse_result),
        ('userData', _ConferenceInviteResponse_userData),
        ])
    ConferenceInviteResponse._ext = []
    
    #-----< ConferenceAddRequest >-----#
    ConferenceAddRequest = SEQ(name='ConferenceAddRequest', mode=MODE_TYPE)
    _ConferenceAddRequest_networkAddress = SEQ_OF(name='networkAddress', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NetworkAddress')))
    _ConferenceAddRequest_requestingNode = INT(name='requestingNode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _ConferenceAddRequest_tag = INT(name='tag', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceAddRequest_addingMCU = INT(name='addingMCU', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')), opt=True)
    _ConferenceAddRequest_userData = SET_OF(name='userData', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserData')), opt=True)
    _ConferenceAddRequest_nodeCategory = CHOICE(name='nodeCategory', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NodeCategory')), opt=True)
    _ConferenceAddRequest_networkAddressV2 = SET_OF(name='networkAddressV2', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NetworkAddressV2')))
    ConferenceAddRequest._cont = ASN1Dict([
        ('networkAddress', _ConferenceAddRequest_networkAddress),
        ('requestingNode', _ConferenceAddRequest_requestingNode),
        ('tag', _ConferenceAddRequest_tag),
        ('addingMCU', _ConferenceAddRequest_addingMCU),
        ('userData', _ConferenceAddRequest_userData),
        ('nodeCategory', _ConferenceAddRequest_nodeCategory),
        ('networkAddressV2', _ConferenceAddRequest_networkAddressV2),
        ])
    ConferenceAddRequest._ext = ['nodeCategory', 'networkAddressV2']
    
    #-----< ConferenceAddResponse >-----#
    ConferenceAddResponse = SEQ(name='ConferenceAddResponse', mode=MODE_TYPE)
    _ConferenceAddResponse_tag = INT(name='tag', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceAddResponse_result = ENUM(name='result', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceAddResponse_result._cont = ASN1Dict([('success', 0), ('invalidRequester', 1), ('invalidNetworkType', 2), ('invalidNetworkAddress', 3), ('addedNodeBusy', 4), ('networkBusy', 5), ('noPortsAvailable', 6), ('connectionUnsuccessful', 7)])
    _ConferenceAddResponse_result._ext = []
    _ConferenceAddResponse_userData = SET_OF(name='userData', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserData')), opt=True)
    ConferenceAddResponse._cont = ASN1Dict([
        ('tag', _ConferenceAddResponse_tag),
        ('result', _ConferenceAddResponse_result),
        ('userData', _ConferenceAddResponse_userData),
        ])
    ConferenceAddResponse._ext = []
    
    #-----< ConferenceLockRequest >-----#
    ConferenceLockRequest = SEQ(name='ConferenceLockRequest', mode=MODE_TYPE)
    ConferenceLockRequest._cont = ASN1Dict([
        ])
    ConferenceLockRequest._ext = []
    
    #-----< ConferenceLockResponse >-----#
    ConferenceLockResponse = SEQ(name='ConferenceLockResponse', mode=MODE_TYPE)
    _ConferenceLockResponse_result = ENUM(name='result', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceLockResponse_result._cont = ASN1Dict([('success', 0), ('invalidRequester', 1), ('alreadyLocked', 2)])
    _ConferenceLockResponse_result._ext = []
    ConferenceLockResponse._cont = ASN1Dict([
        ('result', _ConferenceLockResponse_result),
        ])
    ConferenceLockResponse._ext = []
    
    #-----< ConferenceLockIndication >-----#
    ConferenceLockIndication = SEQ(name='ConferenceLockIndication', mode=MODE_TYPE)
    ConferenceLockIndication._cont = ASN1Dict([
        ])
    ConferenceLockIndication._ext = []
    
    #-----< ConferenceUnlockRequest >-----#
    ConferenceUnlockRequest = SEQ(name='ConferenceUnlockRequest', mode=MODE_TYPE)
    ConferenceUnlockRequest._cont = ASN1Dict([
        ])
    ConferenceUnlockRequest._ext = []
    
    #-----< ConferenceUnlockResponse >-----#
    ConferenceUnlockResponse = SEQ(name='ConferenceUnlockResponse', mode=MODE_TYPE)
    _ConferenceUnlockResponse_result = ENUM(name='result', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceUnlockResponse_result._cont = ASN1Dict([('success', 0), ('invalidRequester', 1), ('alreadyUnlocked', 2)])
    _ConferenceUnlockResponse_result._ext = []
    ConferenceUnlockResponse._cont = ASN1Dict([
        ('result', _ConferenceUnlockResponse_result),
        ])
    ConferenceUnlockResponse._ext = []
    
    #-----< ConferenceUnlockIndication >-----#
    ConferenceUnlockIndication = SEQ(name='ConferenceUnlockIndication', mode=MODE_TYPE)
    ConferenceUnlockIndication._cont = ASN1Dict([
        ])
    ConferenceUnlockIndication._ext = []
    
    #-----< ConferenceTerminateRequest >-----#
    ConferenceTerminateRequest = SEQ(name='ConferenceTerminateRequest', mode=MODE_TYPE)
    _ConferenceTerminateRequest_reason = ENUM(name='reason', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceTerminateRequest_reason._cont = ASN1Dict([('userInitiated', 0), ('timedConferenceTermination', 1)])
    _ConferenceTerminateRequest_reason._ext = []
    ConferenceTerminateRequest._cont = ASN1Dict([
        ('reason', _ConferenceTerminateRequest_reason),
        ])
    ConferenceTerminateRequest._ext = []
    
    #-----< ConferenceTerminateResponse >-----#
    ConferenceTerminateResponse = SEQ(name='ConferenceTerminateResponse', mode=MODE_TYPE)
    _ConferenceTerminateResponse_result = ENUM(name='result', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceTerminateResponse_result._cont = ASN1Dict([('success', 0), ('invalidRequester', 1)])
    _ConferenceTerminateResponse_result._ext = []
    ConferenceTerminateResponse._cont = ASN1Dict([
        ('result', _ConferenceTerminateResponse_result),
        ])
    ConferenceTerminateResponse._ext = []
    
    #-----< ConferenceTerminateIndication >-----#
    ConferenceTerminateIndication = SEQ(name='ConferenceTerminateIndication', mode=MODE_TYPE)
    _ConferenceTerminateIndication_reason = ENUM(name='reason', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceTerminateIndication_reason._cont = ASN1Dict([('userInitiated', 0), ('timedConferenceTermination', 1)])
    _ConferenceTerminateIndication_reason._ext = []
    ConferenceTerminateIndication._cont = ASN1Dict([
        ('reason', _ConferenceTerminateIndication_reason),
        ])
    ConferenceTerminateIndication._ext = []
    
    #-----< ConferenceEjectUserRequest >-----#
    ConferenceEjectUserRequest = SEQ(name='ConferenceEjectUserRequest', mode=MODE_TYPE)
    _ConferenceEjectUserRequest_nodeToEject = INT(name='nodeToEject', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _ConferenceEjectUserRequest_reason = ENUM(name='reason', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceEjectUserRequest_reason._cont = ASN1Dict([('userInitiated', 0)])
    _ConferenceEjectUserRequest_reason._ext = []
    ConferenceEjectUserRequest._cont = ASN1Dict([
        ('nodeToEject', _ConferenceEjectUserRequest_nodeToEject),
        ('reason', _ConferenceEjectUserRequest_reason),
        ])
    ConferenceEjectUserRequest._ext = []
    
    #-----< ConferenceEjectUserResponse >-----#
    ConferenceEjectUserResponse = SEQ(name='ConferenceEjectUserResponse', mode=MODE_TYPE)
    _ConferenceEjectUserResponse_nodeToEject = INT(name='nodeToEject', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _ConferenceEjectUserResponse_result = ENUM(name='result', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceEjectUserResponse_result._cont = ASN1Dict([('success', 0), ('invalidRequester', 1), ('invalidNode', 2)])
    _ConferenceEjectUserResponse_result._ext = []
    ConferenceEjectUserResponse._cont = ASN1Dict([
        ('nodeToEject', _ConferenceEjectUserResponse_nodeToEject),
        ('result', _ConferenceEjectUserResponse_result),
        ])
    ConferenceEjectUserResponse._ext = []
    
    #-----< ConferenceEjectUserIndication >-----#
    ConferenceEjectUserIndication = SEQ(name='ConferenceEjectUserIndication', mode=MODE_TYPE)
    _ConferenceEjectUserIndication_nodeToEject = INT(name='nodeToEject', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _ConferenceEjectUserIndication_reason = ENUM(name='reason', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceEjectUserIndication_reason._cont = ASN1Dict([('userInitiated', 0), ('higherNodeDisconnected', 1), ('higherNodeEjected', 2)])
    _ConferenceEjectUserIndication_reason._ext = []
    ConferenceEjectUserIndication._cont = ASN1Dict([
        ('nodeToEject', _ConferenceEjectUserIndication_nodeToEject),
        ('reason', _ConferenceEjectUserIndication_reason),
        ])
    ConferenceEjectUserIndication._ext = []
    
    #-----< ConferenceTransferRequest >-----#
    ConferenceTransferRequest = SEQ(name='ConferenceTransferRequest', mode=MODE_TYPE)
    _ConferenceTransferRequest_conferenceName = CHOICE(name='conferenceName', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceNameSelector')))
    _ConferenceTransferRequest_conferenceNameModifier = STR_NUM(name='conferenceNameModifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceNameModifier')), opt=True)
    _ConferenceTransferRequest_conferenceNameModifier._const_alpha = ASN1Set(rv=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], rr=[], ev=None, er=[])
    _ConferenceTransferRequest_networkAddress = SEQ_OF(name='networkAddress', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NetworkAddress')), opt=True)
    _ConferenceTransferRequest_transferringNodes = SET_OF(name='transferringNodes', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ConferenceTransferRequest_transferringNodes__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _ConferenceTransferRequest_transferringNodes._cont = __ConferenceTransferRequest_transferringNodes__item_
    _ConferenceTransferRequest_transferringNodes._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=65536)], ev=None, er=[])
    _ConferenceTransferRequest_password = CHOICE(name='password', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'PasswordSelector')), opt=True)
    _ConferenceTransferRequest_networkAddressV2 = SET_OF(name='networkAddressV2', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NetworkAddressV2')), opt=True)
    ConferenceTransferRequest._cont = ASN1Dict([
        ('conferenceName', _ConferenceTransferRequest_conferenceName),
        ('conferenceNameModifier', _ConferenceTransferRequest_conferenceNameModifier),
        ('networkAddress', _ConferenceTransferRequest_networkAddress),
        ('transferringNodes', _ConferenceTransferRequest_transferringNodes),
        ('password', _ConferenceTransferRequest_password),
        ('networkAddressV2', _ConferenceTransferRequest_networkAddressV2),
        ])
    ConferenceTransferRequest._ext = ['networkAddressV2']
    
    #-----< ConferenceTransferResponse >-----#
    ConferenceTransferResponse = SEQ(name='ConferenceTransferResponse', mode=MODE_TYPE)
    _ConferenceTransferResponse_conferenceName = CHOICE(name='conferenceName', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceNameSelector')))
    _ConferenceTransferResponse_conferenceNameModifier = STR_NUM(name='conferenceNameModifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceNameModifier')), opt=True)
    _ConferenceTransferResponse_conferenceNameModifier._const_alpha = ASN1Set(rv=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], rr=[], ev=None, er=[])
    _ConferenceTransferResponse_transferringNodes = SET_OF(name='transferringNodes', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ConferenceTransferResponse_transferringNodes__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _ConferenceTransferResponse_transferringNodes._cont = __ConferenceTransferResponse_transferringNodes__item_
    _ConferenceTransferResponse_transferringNodes._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=65536)], ev=None, er=[])
    _ConferenceTransferResponse_result = ENUM(name='result', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConferenceTransferResponse_result._cont = ASN1Dict([('success', 0), ('invalidRequester', 1)])
    _ConferenceTransferResponse_result._ext = []
    ConferenceTransferResponse._cont = ASN1Dict([
        ('conferenceName', _ConferenceTransferResponse_conferenceName),
        ('conferenceNameModifier', _ConferenceTransferResponse_conferenceNameModifier),
        ('transferringNodes', _ConferenceTransferResponse_transferringNodes),
        ('result', _ConferenceTransferResponse_result),
        ])
    ConferenceTransferResponse._ext = []
    
    #-----< ConferenceTransferIndication >-----#
    ConferenceTransferIndication = SEQ(name='ConferenceTransferIndication', mode=MODE_TYPE)
    _ConferenceTransferIndication_conferenceName = CHOICE(name='conferenceName', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceNameSelector')))
    _ConferenceTransferIndication_conferenceNameModifier = STR_NUM(name='conferenceNameModifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceNameModifier')), opt=True)
    _ConferenceTransferIndication_conferenceNameModifier._const_alpha = ASN1Set(rv=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], rr=[], ev=None, er=[])
    _ConferenceTransferIndication_networkAddress = SEQ_OF(name='networkAddress', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NetworkAddress')), opt=True)
    _ConferenceTransferIndication_transferringNodes = SET_OF(name='transferringNodes', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ConferenceTransferIndication_transferringNodes__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _ConferenceTransferIndication_transferringNodes._cont = __ConferenceTransferIndication_transferringNodes__item_
    _ConferenceTransferIndication_transferringNodes._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=65536)], ev=None, er=[])
    _ConferenceTransferIndication_password = CHOICE(name='password', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'PasswordSelector')), opt=True)
    _ConferenceTransferIndication_networkAddressV2 = SET_OF(name='networkAddressV2', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NetworkAddressV2')), opt=True)
    ConferenceTransferIndication._cont = ASN1Dict([
        ('conferenceName', _ConferenceTransferIndication_conferenceName),
        ('conferenceNameModifier', _ConferenceTransferIndication_conferenceNameModifier),
        ('networkAddress', _ConferenceTransferIndication_networkAddress),
        ('transferringNodes', _ConferenceTransferIndication_transferringNodes),
        ('password', _ConferenceTransferIndication_password),
        ('networkAddressV2', _ConferenceTransferIndication_networkAddressV2),
        ])
    ConferenceTransferIndication._ext = ['networkAddressV2']
    
    #-----< RosterUpdateIndication >-----#
    RosterUpdateIndication = SEQ(name='RosterUpdateIndication', mode=MODE_TYPE)
    _RosterUpdateIndication_fullRefresh = BOOL(name='fullRefresh', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RosterUpdateIndication_nodeInformation = SEQ(name='nodeInformation', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __RosterUpdateIndication_nodeInformation_nodeRecordList = CHOICE(name='nodeRecordList', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___RosterUpdateIndication_nodeInformation_nodeRecordList_noChange = NULL(name='noChange', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___RosterUpdateIndication_nodeInformation_nodeRecordList_refresh = SET_OF(name='refresh', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____RosterUpdateIndication_nodeInformation_nodeRecordList_refresh__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    _____RosterUpdateIndication_nodeInformation_nodeRecordList_refresh__item__nodeID = INT(name='nodeID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _____RosterUpdateIndication_nodeInformation_nodeRecordList_refresh__item__nodeRecord = SEQ(name='nodeRecord', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NodeRecord')))
    ____RosterUpdateIndication_nodeInformation_nodeRecordList_refresh__item_._cont = ASN1Dict([
        ('nodeID', _____RosterUpdateIndication_nodeInformation_nodeRecordList_refresh__item__nodeID),
        ('nodeRecord', _____RosterUpdateIndication_nodeInformation_nodeRecordList_refresh__item__nodeRecord),
        ])
    ____RosterUpdateIndication_nodeInformation_nodeRecordList_refresh__item_._ext = None
    ___RosterUpdateIndication_nodeInformation_nodeRecordList_refresh._cont = ____RosterUpdateIndication_nodeInformation_nodeRecordList_refresh__item_
    ___RosterUpdateIndication_nodeInformation_nodeRecordList_refresh._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=65536)], ev=None, er=[])
    ___RosterUpdateIndication_nodeInformation_nodeRecordList_update = SET_OF(name='update', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____RosterUpdateIndication_nodeInformation_nodeRecordList_update__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    _____RosterUpdateIndication_nodeInformation_nodeRecordList_update__item__nodeID = INT(name='nodeID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _____RosterUpdateIndication_nodeInformation_nodeRecordList_update__item__nodeUpdate = CHOICE(name='nodeUpdate', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ______RosterUpdateIndication_nodeInformation_nodeRecordList_update__item__nodeUpdate_addRecord = SEQ(name='addRecord', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NodeRecord')))
    ______RosterUpdateIndication_nodeInformation_nodeRecordList_update__item__nodeUpdate_replaceRecord = SEQ(name='replaceRecord', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NodeRecord')))
    ______RosterUpdateIndication_nodeInformation_nodeRecordList_update__item__nodeUpdate_removeRecord = NULL(name='removeRecord', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _____RosterUpdateIndication_nodeInformation_nodeRecordList_update__item__nodeUpdate._cont = ASN1Dict([
        ('addRecord', ______RosterUpdateIndication_nodeInformation_nodeRecordList_update__item__nodeUpdate_addRecord),
        ('replaceRecord', ______RosterUpdateIndication_nodeInformation_nodeRecordList_update__item__nodeUpdate_replaceRecord),
        ('removeRecord', ______RosterUpdateIndication_nodeInformation_nodeRecordList_update__item__nodeUpdate_removeRecord),
        ])
    _____RosterUpdateIndication_nodeInformation_nodeRecordList_update__item__nodeUpdate._ext = []
    ____RosterUpdateIndication_nodeInformation_nodeRecordList_update__item_._cont = ASN1Dict([
        ('nodeID', _____RosterUpdateIndication_nodeInformation_nodeRecordList_update__item__nodeID),
        ('nodeUpdate', _____RosterUpdateIndication_nodeInformation_nodeRecordList_update__item__nodeUpdate),
        ])
    ____RosterUpdateIndication_nodeInformation_nodeRecordList_update__item_._ext = None
    ___RosterUpdateIndication_nodeInformation_nodeRecordList_update._cont = ____RosterUpdateIndication_nodeInformation_nodeRecordList_update__item_
    ___RosterUpdateIndication_nodeInformation_nodeRecordList_update._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=65536)], ev=None, er=[])
    __RosterUpdateIndication_nodeInformation_nodeRecordList._cont = ASN1Dict([
        ('noChange', ___RosterUpdateIndication_nodeInformation_nodeRecordList_noChange),
        ('refresh', ___RosterUpdateIndication_nodeInformation_nodeRecordList_refresh),
        ('update', ___RosterUpdateIndication_nodeInformation_nodeRecordList_update),
        ])
    __RosterUpdateIndication_nodeInformation_nodeRecordList._ext = []
    __RosterUpdateIndication_nodeInformation_rosterInstanceNumber = INT(name='rosterInstanceNumber', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __RosterUpdateIndication_nodeInformation_rosterInstanceNumber._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    __RosterUpdateIndication_nodeInformation_nodesAdded = BOOL(name='nodesAdded', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __RosterUpdateIndication_nodeInformation_nodesRemoved = BOOL(name='nodesRemoved', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RosterUpdateIndication_nodeInformation._cont = ASN1Dict([
        ('nodeRecordList', __RosterUpdateIndication_nodeInformation_nodeRecordList),
        ('rosterInstanceNumber', __RosterUpdateIndication_nodeInformation_rosterInstanceNumber),
        ('nodesAdded', __RosterUpdateIndication_nodeInformation_nodesAdded),
        ('nodesRemoved', __RosterUpdateIndication_nodeInformation_nodesRemoved),
        ])
    _RosterUpdateIndication_nodeInformation._ext = []
    _RosterUpdateIndication_applicationInformation = SET_OF(name='applicationInformation', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __RosterUpdateIndication_applicationInformation__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    ___RosterUpdateIndication_applicationInformation__item__sessionKey = SEQ(name='sessionKey', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'SessionKey')))
    ___RosterUpdateIndication_applicationInformation__item__applicationRecordList = CHOICE(name='applicationRecordList', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ____RosterUpdateIndication_applicationInformation__item__applicationRecordList_noChange = NULL(name='noChange', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____RosterUpdateIndication_applicationInformation__item__applicationRecordList_refresh = SET_OF(name='refresh', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _____RosterUpdateIndication_applicationInformation__item__applicationRecordList_refresh__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    ______RosterUpdateIndication_applicationInformation__item__applicationRecordList_refresh__item__nodeID = INT(name='nodeID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    ______RosterUpdateIndication_applicationInformation__item__applicationRecordList_refresh__item__entityID = INT(name='entityID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'EntityID')))
    ______RosterUpdateIndication_applicationInformation__item__applicationRecordList_refresh__item__applicationRecord = SEQ(name='applicationRecord', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ApplicationRecord')))
    _____RosterUpdateIndication_applicationInformation__item__applicationRecordList_refresh__item_._cont = ASN1Dict([
        ('nodeID', ______RosterUpdateIndication_applicationInformation__item__applicationRecordList_refresh__item__nodeID),
        ('entityID', ______RosterUpdateIndication_applicationInformation__item__applicationRecordList_refresh__item__entityID),
        ('applicationRecord', ______RosterUpdateIndication_applicationInformation__item__applicationRecordList_refresh__item__applicationRecord),
        ])
    _____RosterUpdateIndication_applicationInformation__item__applicationRecordList_refresh__item_._ext = None
    ____RosterUpdateIndication_applicationInformation__item__applicationRecordList_refresh._cont = _____RosterUpdateIndication_applicationInformation__item__applicationRecordList_refresh__item_
    ____RosterUpdateIndication_applicationInformation__item__applicationRecordList_refresh._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    ____RosterUpdateIndication_applicationInformation__item__applicationRecordList_update = SET_OF(name='update', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _____RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    ______RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item__nodeID = INT(name='nodeID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    ______RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item__entityID = INT(name='entityID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'EntityID')))
    ______RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item__applicationUpdate = CHOICE(name='applicationUpdate', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    _______RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item__applicationUpdate_addRecord = SEQ(name='addRecord', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ApplicationRecord')))
    _______RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item__applicationUpdate_replaceRecord = SEQ(name='replaceRecord', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ApplicationRecord')))
    _______RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item__applicationUpdate_removeRecord = NULL(name='removeRecord', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ______RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item__applicationUpdate._cont = ASN1Dict([
        ('addRecord', _______RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item__applicationUpdate_addRecord),
        ('replaceRecord', _______RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item__applicationUpdate_replaceRecord),
        ('removeRecord', _______RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item__applicationUpdate_removeRecord),
        ])
    ______RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item__applicationUpdate._ext = []
    _____RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item_._cont = ASN1Dict([
        ('nodeID', ______RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item__nodeID),
        ('entityID', ______RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item__entityID),
        ('applicationUpdate', ______RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item__applicationUpdate),
        ])
    _____RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item_._ext = None
    ____RosterUpdateIndication_applicationInformation__item__applicationRecordList_update._cont = _____RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item_
    ____RosterUpdateIndication_applicationInformation__item__applicationRecordList_update._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=65536)], ev=None, er=[])
    ___RosterUpdateIndication_applicationInformation__item__applicationRecordList._cont = ASN1Dict([
        ('noChange', ____RosterUpdateIndication_applicationInformation__item__applicationRecordList_noChange),
        ('refresh', ____RosterUpdateIndication_applicationInformation__item__applicationRecordList_refresh),
        ('update', ____RosterUpdateIndication_applicationInformation__item__applicationRecordList_update),
        ])
    ___RosterUpdateIndication_applicationInformation__item__applicationRecordList._ext = []
    ___RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList = CHOICE(name='applicationCapabilitiesList', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ____RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList_noChange = NULL(name='noChange', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList_refresh = SET_OF(name='refresh', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _____RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList_refresh__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    ______RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList_refresh__item__capabilityID = CHOICE(name='capabilityID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'CapabilityID')))
    ______RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList_refresh__item__capabilityClass = CHOICE(name='capabilityClass', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'CapabilityClass')))
    ______RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList_refresh__item__numberOfEntities = INT(name='numberOfEntities', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ______RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList_refresh__item__numberOfEntities._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=65536)], ev=None, er=[])
    _____RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList_refresh__item_._cont = ASN1Dict([
        ('capabilityID', ______RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList_refresh__item__capabilityID),
        ('capabilityClass', ______RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList_refresh__item__capabilityClass),
        ('numberOfEntities', ______RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList_refresh__item__numberOfEntities),
        ])
    _____RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList_refresh__item_._ext = []
    ____RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList_refresh._cont = _____RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList_refresh__item_
    ___RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList._cont = ASN1Dict([
        ('noChange', ____RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList_noChange),
        ('refresh', ____RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList_refresh),
        ])
    ___RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList._ext = []
    ___RosterUpdateIndication_applicationInformation__item__rosterInstanceNumber = INT(name='rosterInstanceNumber', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___RosterUpdateIndication_applicationInformation__item__rosterInstanceNumber._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    ___RosterUpdateIndication_applicationInformation__item__peerEntitiesAdded = BOOL(name='peerEntitiesAdded', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___RosterUpdateIndication_applicationInformation__item__peerEntitiesRemoved = BOOL(name='peerEntitiesRemoved', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __RosterUpdateIndication_applicationInformation__item_._cont = ASN1Dict([
        ('sessionKey', ___RosterUpdateIndication_applicationInformation__item__sessionKey),
        ('applicationRecordList', ___RosterUpdateIndication_applicationInformation__item__applicationRecordList),
        ('applicationCapabilitiesList', ___RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList),
        ('rosterInstanceNumber', ___RosterUpdateIndication_applicationInformation__item__rosterInstanceNumber),
        ('peerEntitiesAdded', ___RosterUpdateIndication_applicationInformation__item__peerEntitiesAdded),
        ('peerEntitiesRemoved', ___RosterUpdateIndication_applicationInformation__item__peerEntitiesRemoved),
        ])
    __RosterUpdateIndication_applicationInformation__item_._ext = []
    _RosterUpdateIndication_applicationInformation._cont = __RosterUpdateIndication_applicationInformation__item_
    _RosterUpdateIndication_applicationInformation._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    RosterUpdateIndication._cont = ASN1Dict([
        ('fullRefresh', _RosterUpdateIndication_fullRefresh),
        ('nodeInformation', _RosterUpdateIndication_nodeInformation),
        ('applicationInformation', _RosterUpdateIndication_applicationInformation),
        ])
    RosterUpdateIndication._ext = []
    
    #-----< ApplicationInvokeIndication >-----#
    ApplicationInvokeIndication = SEQ(name='ApplicationInvokeIndication', mode=MODE_TYPE)
    _ApplicationInvokeIndication_applicationProtocolEntiyList = SET_OF(name='applicationProtocolEntiyList', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __ApplicationInvokeIndication_applicationProtocolEntiyList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'ApplicationInvokeSpecifier')))
    _ApplicationInvokeIndication_applicationProtocolEntiyList._cont = __ApplicationInvokeIndication_applicationProtocolEntiyList__item_
    _ApplicationInvokeIndication_applicationProtocolEntiyList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=65536)], ev=None, er=[])
    _ApplicationInvokeIndication_destinationNodes = SET_OF(name='destinationNodes', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ApplicationInvokeIndication_destinationNodes__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _ApplicationInvokeIndication_destinationNodes._cont = __ApplicationInvokeIndication_destinationNodes__item_
    _ApplicationInvokeIndication_destinationNodes._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=65536)], ev=None, er=[])
    ApplicationInvokeIndication._cont = ASN1Dict([
        ('applicationProtocolEntiyList', _ApplicationInvokeIndication_applicationProtocolEntiyList),
        ('destinationNodes', _ApplicationInvokeIndication_destinationNodes),
        ])
    ApplicationInvokeIndication._ext = []
    
    #-----< RegistryRegisterChannelRequest >-----#
    RegistryRegisterChannelRequest = SEQ(name='RegistryRegisterChannelRequest', mode=MODE_TYPE)
    _RegistryRegisterChannelRequest_entityID = INT(name='entityID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'EntityID')))
    _RegistryRegisterChannelRequest_key = SEQ(name='key', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryKey')))
    _RegistryRegisterChannelRequest_channelID = INT(name='channelID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'DynamicChannelID')))
    RegistryRegisterChannelRequest._cont = ASN1Dict([
        ('entityID', _RegistryRegisterChannelRequest_entityID),
        ('key', _RegistryRegisterChannelRequest_key),
        ('channelID', _RegistryRegisterChannelRequest_channelID),
        ])
    RegistryRegisterChannelRequest._ext = []
    
    #-----< RegistryAssignTokenRequest >-----#
    RegistryAssignTokenRequest = SEQ(name='RegistryAssignTokenRequest', mode=MODE_TYPE)
    _RegistryAssignTokenRequest_entityID = INT(name='entityID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'EntityID')))
    _RegistryAssignTokenRequest_key = SEQ(name='key', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryKey')))
    RegistryAssignTokenRequest._cont = ASN1Dict([
        ('entityID', _RegistryAssignTokenRequest_entityID),
        ('key', _RegistryAssignTokenRequest_key),
        ])
    RegistryAssignTokenRequest._ext = []
    
    #-----< RegistrySetParameterRequest >-----#
    RegistrySetParameterRequest = SEQ(name='RegistrySetParameterRequest', mode=MODE_TYPE)
    _RegistrySetParameterRequest_entityID = INT(name='entityID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'EntityID')))
    _RegistrySetParameterRequest_key = SEQ(name='key', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryKey')))
    _RegistrySetParameterRequest_parameter = OCT_STR(name='parameter', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RegistrySetParameterRequest_parameter._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=64)], ev=None, er=[])
    _RegistrySetParameterRequest_modificationRights = ENUM(name='modificationRights', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryModificationRights')), opt=True)
    RegistrySetParameterRequest._cont = ASN1Dict([
        ('entityID', _RegistrySetParameterRequest_entityID),
        ('key', _RegistrySetParameterRequest_key),
        ('parameter', _RegistrySetParameterRequest_parameter),
        ('modificationRights', _RegistrySetParameterRequest_modificationRights),
        ])
    RegistrySetParameterRequest._ext = []
    
    #-----< RegistryRetrieveEntryRequest >-----#
    RegistryRetrieveEntryRequest = SEQ(name='RegistryRetrieveEntryRequest', mode=MODE_TYPE)
    _RegistryRetrieveEntryRequest_entityID = INT(name='entityID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'EntityID')))
    _RegistryRetrieveEntryRequest_key = SEQ(name='key', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryKey')))
    RegistryRetrieveEntryRequest._cont = ASN1Dict([
        ('entityID', _RegistryRetrieveEntryRequest_entityID),
        ('key', _RegistryRetrieveEntryRequest_key),
        ])
    RegistryRetrieveEntryRequest._ext = []
    
    #-----< RegistryDeleteEntryRequest >-----#
    RegistryDeleteEntryRequest = SEQ(name='RegistryDeleteEntryRequest', mode=MODE_TYPE)
    _RegistryDeleteEntryRequest_entityID = INT(name='entityID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'EntityID')))
    _RegistryDeleteEntryRequest_key = SEQ(name='key', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryKey')))
    RegistryDeleteEntryRequest._cont = ASN1Dict([
        ('entityID', _RegistryDeleteEntryRequest_entityID),
        ('key', _RegistryDeleteEntryRequest_key),
        ])
    RegistryDeleteEntryRequest._ext = []
    
    #-----< RegistryMonitorEntryRequest >-----#
    RegistryMonitorEntryRequest = SEQ(name='RegistryMonitorEntryRequest', mode=MODE_TYPE)
    _RegistryMonitorEntryRequest_entityID = INT(name='entityID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'EntityID')))
    _RegistryMonitorEntryRequest_key = SEQ(name='key', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryKey')))
    RegistryMonitorEntryRequest._cont = ASN1Dict([
        ('entityID', _RegistryMonitorEntryRequest_entityID),
        ('key', _RegistryMonitorEntryRequest_key),
        ])
    RegistryMonitorEntryRequest._ext = []
    
    #-----< RegistryMonitorEntryIndication >-----#
    RegistryMonitorEntryIndication = SEQ(name='RegistryMonitorEntryIndication', mode=MODE_TYPE)
    _RegistryMonitorEntryIndication_key = SEQ(name='key', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryKey')))
    _RegistryMonitorEntryIndication_item = CHOICE(name='item', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryItem')))
    _RegistryMonitorEntryIndication_owner = CHOICE(name='owner', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryEntryOwner')))
    _RegistryMonitorEntryIndication_modificationRights = ENUM(name='modificationRights', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryModificationRights')), opt=True)
    RegistryMonitorEntryIndication._cont = ASN1Dict([
        ('key', _RegistryMonitorEntryIndication_key),
        ('item', _RegistryMonitorEntryIndication_item),
        ('owner', _RegistryMonitorEntryIndication_owner),
        ('modificationRights', _RegistryMonitorEntryIndication_modificationRights),
        ])
    RegistryMonitorEntryIndication._ext = []
    
    #-----< RegistryAllocateHandleRequest >-----#
    RegistryAllocateHandleRequest = SEQ(name='RegistryAllocateHandleRequest', mode=MODE_TYPE)
    _RegistryAllocateHandleRequest_entityID = INT(name='entityID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'EntityID')))
    _RegistryAllocateHandleRequest_numberOfHandles = INT(name='numberOfHandles', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RegistryAllocateHandleRequest_numberOfHandles._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=1024)], ev=None, er=[])
    RegistryAllocateHandleRequest._cont = ASN1Dict([
        ('entityID', _RegistryAllocateHandleRequest_entityID),
        ('numberOfHandles', _RegistryAllocateHandleRequest_numberOfHandles),
        ])
    RegistryAllocateHandleRequest._ext = []
    
    #-----< RegistryAllocateHandleResponse >-----#
    RegistryAllocateHandleResponse = SEQ(name='RegistryAllocateHandleResponse', mode=MODE_TYPE)
    _RegistryAllocateHandleResponse_entityID = INT(name='entityID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'EntityID')))
    _RegistryAllocateHandleResponse_numberOfHandles = INT(name='numberOfHandles', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RegistryAllocateHandleResponse_numberOfHandles._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=1024)], ev=None, er=[])
    _RegistryAllocateHandleResponse_firstHandle = INT(name='firstHandle', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'Handle')))
    _RegistryAllocateHandleResponse_result = ENUM(name='result', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RegistryAllocateHandleResponse_result._cont = ASN1Dict([('successful', 0), ('noHandlesAvailable', 1)])
    _RegistryAllocateHandleResponse_result._ext = []
    RegistryAllocateHandleResponse._cont = ASN1Dict([
        ('entityID', _RegistryAllocateHandleResponse_entityID),
        ('numberOfHandles', _RegistryAllocateHandleResponse_numberOfHandles),
        ('firstHandle', _RegistryAllocateHandleResponse_firstHandle),
        ('result', _RegistryAllocateHandleResponse_result),
        ])
    RegistryAllocateHandleResponse._ext = []
    
    #-----< RegistryResponse >-----#
    RegistryResponse = SEQ(name='RegistryResponse', mode=MODE_TYPE)
    _RegistryResponse_entityID = INT(name='entityID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'EntityID')))
    _RegistryResponse_primitiveType = ENUM(name='primitiveType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RegistryResponse_primitiveType._cont = ASN1Dict([('registerChannel', 0), ('assignToken', 1), ('setParameter', 2), ('retrieveEntry', 3), ('deleteEntry', 4), ('monitorEntry', 5)])
    _RegistryResponse_primitiveType._ext = []
    _RegistryResponse_key = SEQ(name='key', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryKey')))
    _RegistryResponse_item = CHOICE(name='item', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryItem')))
    _RegistryResponse_owner = CHOICE(name='owner', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryEntryOwner')))
    _RegistryResponse_modificationRights = ENUM(name='modificationRights', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryModificationRights')), opt=True)
    _RegistryResponse_result = ENUM(name='result', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RegistryResponse_result._cont = ASN1Dict([('successful', 0), ('belongsToOther', 1), ('tooManyEntries', 2), ('inconsistentType', 3), ('entryNotFound', 4), ('entryAlreadyExists', 5), ('invalidRequester', 6)])
    _RegistryResponse_result._ext = []
    RegistryResponse._cont = ASN1Dict([
        ('entityID', _RegistryResponse_entityID),
        ('primitiveType', _RegistryResponse_primitiveType),
        ('key', _RegistryResponse_key),
        ('item', _RegistryResponse_item),
        ('owner', _RegistryResponse_owner),
        ('modificationRights', _RegistryResponse_modificationRights),
        ('result', _RegistryResponse_result),
        ])
    RegistryResponse._ext = []
    
    #-----< ConductorAssignIndication >-----#
    ConductorAssignIndication = SEQ(name='ConductorAssignIndication', mode=MODE_TYPE)
    _ConductorAssignIndication_conductingNode = INT(name='conductingNode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    ConductorAssignIndication._cont = ASN1Dict([
        ('conductingNode', _ConductorAssignIndication_conductingNode),
        ])
    ConductorAssignIndication._ext = []
    
    #-----< ConductorReleaseIndication >-----#
    ConductorReleaseIndication = SEQ(name='ConductorReleaseIndication', mode=MODE_TYPE)
    ConductorReleaseIndication._cont = ASN1Dict([
        ])
    ConductorReleaseIndication._ext = []
    
    #-----< ConductorPermissionAskIndication >-----#
    ConductorPermissionAskIndication = SEQ(name='ConductorPermissionAskIndication', mode=MODE_TYPE)
    _ConductorPermissionAskIndication_grantFlag = BOOL(name='grantFlag', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ConductorPermissionAskIndication._cont = ASN1Dict([
        ('grantFlag', _ConductorPermissionAskIndication_grantFlag),
        ])
    ConductorPermissionAskIndication._ext = []
    
    #-----< ConductorPermissionGrantIndication >-----#
    ConductorPermissionGrantIndication = SEQ(name='ConductorPermissionGrantIndication', mode=MODE_TYPE)
    _ConductorPermissionGrantIndication_permissionList = SEQ_OF(name='permissionList', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __ConductorPermissionGrantIndication_permissionList__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _ConductorPermissionGrantIndication_permissionList._cont = __ConductorPermissionGrantIndication_permissionList__item_
    _ConductorPermissionGrantIndication_permissionList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _ConductorPermissionGrantIndication_waitingList = SEQ_OF(name='waitingList', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ConductorPermissionGrantIndication_waitingList__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _ConductorPermissionGrantIndication_waitingList._cont = __ConductorPermissionGrantIndication_waitingList__item_
    _ConductorPermissionGrantIndication_waitingList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=65536)], ev=None, er=[])
    ConductorPermissionGrantIndication._cont = ASN1Dict([
        ('permissionList', _ConductorPermissionGrantIndication_permissionList),
        ('waitingList', _ConductorPermissionGrantIndication_waitingList),
        ])
    ConductorPermissionGrantIndication._ext = []
    
    #-----< ConferenceTimeRemainingIndication >-----#
    ConferenceTimeRemainingIndication = SEQ(name='ConferenceTimeRemainingIndication', mode=MODE_TYPE)
    _ConferenceTimeRemainingIndication_timeRemaining = INT(name='timeRemaining', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'Time')))
    _ConferenceTimeRemainingIndication_nodeID = INT(name='nodeID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')), opt=True)
    ConferenceTimeRemainingIndication._cont = ASN1Dict([
        ('timeRemaining', _ConferenceTimeRemainingIndication_timeRemaining),
        ('nodeID', _ConferenceTimeRemainingIndication_nodeID),
        ])
    ConferenceTimeRemainingIndication._ext = []
    
    #-----< ConferenceTimeInquireIndication >-----#
    ConferenceTimeInquireIndication = SEQ(name='ConferenceTimeInquireIndication', mode=MODE_TYPE)
    _ConferenceTimeInquireIndication_nodeSpecificTimeFlag = BOOL(name='nodeSpecificTimeFlag', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ConferenceTimeInquireIndication._cont = ASN1Dict([
        ('nodeSpecificTimeFlag', _ConferenceTimeInquireIndication_nodeSpecificTimeFlag),
        ])
    ConferenceTimeInquireIndication._ext = []
    
    #-----< ConferenceTimeExtendIndication >-----#
    ConferenceTimeExtendIndication = SEQ(name='ConferenceTimeExtendIndication', mode=MODE_TYPE)
    _ConferenceTimeExtendIndication_timeToExtend = INT(name='timeToExtend', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'Time')))
    _ConferenceTimeExtendIndication_nodeSpecificTimeFlag = BOOL(name='nodeSpecificTimeFlag', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ConferenceTimeExtendIndication._cont = ASN1Dict([
        ('timeToExtend', _ConferenceTimeExtendIndication_timeToExtend),
        ('nodeSpecificTimeFlag', _ConferenceTimeExtendIndication_nodeSpecificTimeFlag),
        ])
    ConferenceTimeExtendIndication._ext = []
    
    #-----< ConferenceAssistanceIndication >-----#
    ConferenceAssistanceIndication = SEQ(name='ConferenceAssistanceIndication', mode=MODE_TYPE)
    _ConferenceAssistanceIndication_userData = SET_OF(name='userData', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserData')), opt=True)
    ConferenceAssistanceIndication._cont = ASN1Dict([
        ('userData', _ConferenceAssistanceIndication_userData),
        ])
    ConferenceAssistanceIndication._ext = []
    
    #-----< TextMessageIndication >-----#
    TextMessageIndication = SEQ(name='TextMessageIndication', mode=MODE_TYPE)
    _TextMessageIndication_message = STR_BMP(name='message', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'TextString')))
    TextMessageIndication._cont = ASN1Dict([
        ('message', _TextMessageIndication_message),
        ])
    TextMessageIndication._ext = []
    
    #-----< RosterRefreshRequest >-----#
    RosterRefreshRequest = SEQ(name='RosterRefreshRequest', mode=MODE_TYPE)
    _RosterRefreshRequest_nodeID = INT(name='nodeID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _RosterRefreshRequest_nodeCategory = CHOICE(name='nodeCategory', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NodeCategory')))
    _RosterRefreshRequest_fullRefresh = BOOL(name='fullRefresh', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RosterRefreshRequest_sendConferenceRoster = BOOL(name='sendConferenceRoster', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RosterRefreshRequest_applicationList = SEQ(name='applicationList', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __RosterRefreshRequest_applicationList_applicationKeyList = SET_OF(name='applicationKeyList', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___RosterRefreshRequest_applicationList_applicationKeyList__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    ____RosterRefreshRequest_applicationList_applicationKeyList__item__applicationProtocolKey = CHOICE(name='applicationProtocolKey', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'Key')))
    ____RosterRefreshRequest_applicationList_applicationKeyList__item__nonStandardParameter = SEQ(name='nonStandardParameter', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')), opt=True)
    ___RosterRefreshRequest_applicationList_applicationKeyList__item_._cont = ASN1Dict([
        ('applicationProtocolKey', ____RosterRefreshRequest_applicationList_applicationKeyList__item__applicationProtocolKey),
        ('nonStandardParameter', ____RosterRefreshRequest_applicationList_applicationKeyList__item__nonStandardParameter),
        ])
    ___RosterRefreshRequest_applicationList_applicationKeyList__item_._ext = []
    __RosterRefreshRequest_applicationList_applicationKeyList._cont = ___RosterRefreshRequest_applicationList_applicationKeyList__item_
    __RosterRefreshRequest_applicationList_nonStandardParameter = SEQ(name='nonStandardParameter', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')), opt=True)
    _RosterRefreshRequest_applicationList._cont = ASN1Dict([
        ('applicationKeyList', __RosterRefreshRequest_applicationList_applicationKeyList),
        ('nonStandardParameter', __RosterRefreshRequest_applicationList_nonStandardParameter),
        ])
    _RosterRefreshRequest_applicationList._ext = []
    _RosterRefreshRequest_sessionList = SEQ(name='sessionList', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __RosterRefreshRequest_sessionList_sessionKeyList = SET_OF(name='sessionKeyList', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___RosterRefreshRequest_sessionList_sessionKeyList__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    ____RosterRefreshRequest_sessionList_sessionKeyList__item__sessionKey = SEQ(name='sessionKey', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'SessionKey')))
    ____RosterRefreshRequest_sessionList_sessionKeyList__item__nonStandardParameter = SEQ(name='nonStandardParameter', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')), opt=True)
    ___RosterRefreshRequest_sessionList_sessionKeyList__item_._cont = ASN1Dict([
        ('sessionKey', ____RosterRefreshRequest_sessionList_sessionKeyList__item__sessionKey),
        ('nonStandardParameter', ____RosterRefreshRequest_sessionList_sessionKeyList__item__nonStandardParameter),
        ])
    ___RosterRefreshRequest_sessionList_sessionKeyList__item_._ext = []
    __RosterRefreshRequest_sessionList_sessionKeyList._cont = ___RosterRefreshRequest_sessionList_sessionKeyList__item_
    __RosterRefreshRequest_sessionList_nonStandardParameter = SEQ(name='nonStandardParameter', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')), opt=True)
    _RosterRefreshRequest_sessionList._cont = ASN1Dict([
        ('sessionKeyList', __RosterRefreshRequest_sessionList_sessionKeyList),
        ('nonStandardParameter', __RosterRefreshRequest_sessionList_nonStandardParameter),
        ])
    _RosterRefreshRequest_sessionList._ext = []
    _RosterRefreshRequest_nonStandardParameter = SEQ(name='nonStandardParameter', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')), opt=True)
    RosterRefreshRequest._cont = ASN1Dict([
        ('nodeID', _RosterRefreshRequest_nodeID),
        ('nodeCategory', _RosterRefreshRequest_nodeCategory),
        ('fullRefresh', _RosterRefreshRequest_fullRefresh),
        ('sendConferenceRoster', _RosterRefreshRequest_sendConferenceRoster),
        ('applicationList', _RosterRefreshRequest_applicationList),
        ('sessionList', _RosterRefreshRequest_sessionList),
        ('nonStandardParameter', _RosterRefreshRequest_nonStandardParameter),
        ])
    RosterRefreshRequest._ext = []
    
    #-----< FunctionNotSupportedResponse >-----#
    FunctionNotSupportedResponse = SEQ(name='FunctionNotSupportedResponse', mode=MODE_TYPE)
    _FunctionNotSupportedResponse_request = CHOICE(name='request', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RequestPDU')))
    FunctionNotSupportedResponse._cont = ASN1Dict([
        ('request', _FunctionNotSupportedResponse_request),
        ])
    FunctionNotSupportedResponse._ext = None
    
    #-----< NonStandardPDU >-----#
    NonStandardPDU = SEQ(name='NonStandardPDU', mode=MODE_TYPE)
    _NonStandardPDU_data = SEQ(name='data', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    NonStandardPDU._cont = ASN1Dict([
        ('data', _NonStandardPDU_data),
        ])
    NonStandardPDU._ext = []
    
    #-----< ConnectData >-----#
    ConnectData = SEQ(name='ConnectData', mode=MODE_TYPE)
    _ConnectData_t124Identifier = CHOICE(name='t124Identifier', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'Key')))
    _ConnectData_connectPDU = OCT_STR(name='connectPDU', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ConnectData._cont = ASN1Dict([
        ('t124Identifier', _ConnectData_t124Identifier),
        ('connectPDU', _ConnectData_connectPDU),
        ])
    ConnectData._ext = None
    
    #-----< ConnectGCCPDU >-----#
    ConnectGCCPDU = CHOICE(name='ConnectGCCPDU', mode=MODE_TYPE)
    _ConnectGCCPDU_conferenceCreateRequest = SEQ(name='conferenceCreateRequest', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceCreateRequest')))
    _ConnectGCCPDU_conferenceCreateResponse = SEQ(name='conferenceCreateResponse', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceCreateResponse')))
    _ConnectGCCPDU_conferenceQueryRequest = SEQ(name='conferenceQueryRequest', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceQueryRequest')))
    _ConnectGCCPDU_conferenceQueryResponse = SEQ(name='conferenceQueryResponse', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceQueryResponse')))
    _ConnectGCCPDU_conferenceJoinRequest = SEQ(name='conferenceJoinRequest', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceJoinRequest')))
    _ConnectGCCPDU_conferenceJoinResponse = SEQ(name='conferenceJoinResponse', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceJoinResponse')))
    _ConnectGCCPDU_conferenceInviteRequest = SEQ(name='conferenceInviteRequest', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceInviteRequest')))
    _ConnectGCCPDU_conferenceInviteResponse = SEQ(name='conferenceInviteResponse', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceInviteResponse')))
    ConnectGCCPDU._cont = ASN1Dict([
        ('conferenceCreateRequest', _ConnectGCCPDU_conferenceCreateRequest),
        ('conferenceCreateResponse', _ConnectGCCPDU_conferenceCreateResponse),
        ('conferenceQueryRequest', _ConnectGCCPDU_conferenceQueryRequest),
        ('conferenceQueryResponse', _ConnectGCCPDU_conferenceQueryResponse),
        ('conferenceJoinRequest', _ConnectGCCPDU_conferenceJoinRequest),
        ('conferenceJoinResponse', _ConnectGCCPDU_conferenceJoinResponse),
        ('conferenceInviteRequest', _ConnectGCCPDU_conferenceInviteRequest),
        ('conferenceInviteResponse', _ConnectGCCPDU_conferenceInviteResponse),
        ])
    ConnectGCCPDU._ext = []
    
    #-----< GCCPDU >-----#
    GCCPDU = CHOICE(name='GCCPDU', mode=MODE_TYPE)
    _GCCPDU_request = CHOICE(name='request', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RequestPDU')))
    _GCCPDU_response = CHOICE(name='response', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ResponsePDU')))
    _GCCPDU_indication = CHOICE(name='indication', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'IndicationPDU')))
    GCCPDU._cont = ASN1Dict([
        ('request', _GCCPDU_request),
        ('response', _GCCPDU_response),
        ('indication', _GCCPDU_indication),
        ])
    GCCPDU._ext = None
    
    #-----< RequestPDU >-----#
    RequestPDU = CHOICE(name='RequestPDU', mode=MODE_TYPE)
    _RequestPDU_conferenceJoinRequest = SEQ(name='conferenceJoinRequest', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceJoinRequest')))
    _RequestPDU_conferenceAddRequest = SEQ(name='conferenceAddRequest', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceAddRequest')))
    _RequestPDU_conferenceLockRequest = SEQ(name='conferenceLockRequest', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceLockRequest')))
    _RequestPDU_conferenceUnlockRequest = SEQ(name='conferenceUnlockRequest', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceUnlockRequest')))
    _RequestPDU_conferenceTerminateRequest = SEQ(name='conferenceTerminateRequest', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceTerminateRequest')))
    _RequestPDU_conferenceEjectUserRequest = SEQ(name='conferenceEjectUserRequest', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceEjectUserRequest')))
    _RequestPDU_conferenceTransferRequest = SEQ(name='conferenceTransferRequest', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceTransferRequest')))
    _RequestPDU_registryRegisterChannelRequest = SEQ(name='registryRegisterChannelRequest', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryRegisterChannelRequest')))
    _RequestPDU_registryAssignTokenRequest = SEQ(name='registryAssignTokenRequest', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryAssignTokenRequest')))
    _RequestPDU_registrySetParameterRequest = SEQ(name='registrySetParameterRequest', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistrySetParameterRequest')))
    _RequestPDU_registryRetrieveEntryRequest = SEQ(name='registryRetrieveEntryRequest', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryRetrieveEntryRequest')))
    _RequestPDU_registryDeleteEntryRequest = SEQ(name='registryDeleteEntryRequest', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryDeleteEntryRequest')))
    _RequestPDU_registryMonitorEntryRequest = SEQ(name='registryMonitorEntryRequest', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryMonitorEntryRequest')))
    _RequestPDU_registryAllocateHandleRequest = SEQ(name='registryAllocateHandleRequest', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryAllocateHandleRequest')))
    _RequestPDU_nonStandardRequest = SEQ(name='nonStandardRequest', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardPDU')))
    RequestPDU._cont = ASN1Dict([
        ('conferenceJoinRequest', _RequestPDU_conferenceJoinRequest),
        ('conferenceAddRequest', _RequestPDU_conferenceAddRequest),
        ('conferenceLockRequest', _RequestPDU_conferenceLockRequest),
        ('conferenceUnlockRequest', _RequestPDU_conferenceUnlockRequest),
        ('conferenceTerminateRequest', _RequestPDU_conferenceTerminateRequest),
        ('conferenceEjectUserRequest', _RequestPDU_conferenceEjectUserRequest),
        ('conferenceTransferRequest', _RequestPDU_conferenceTransferRequest),
        ('registryRegisterChannelRequest', _RequestPDU_registryRegisterChannelRequest),
        ('registryAssignTokenRequest', _RequestPDU_registryAssignTokenRequest),
        ('registrySetParameterRequest', _RequestPDU_registrySetParameterRequest),
        ('registryRetrieveEntryRequest', _RequestPDU_registryRetrieveEntryRequest),
        ('registryDeleteEntryRequest', _RequestPDU_registryDeleteEntryRequest),
        ('registryMonitorEntryRequest', _RequestPDU_registryMonitorEntryRequest),
        ('registryAllocateHandleRequest', _RequestPDU_registryAllocateHandleRequest),
        ('nonStandardRequest', _RequestPDU_nonStandardRequest),
        ])
    RequestPDU._ext = []
    
    #-----< ResponsePDU >-----#
    ResponsePDU = CHOICE(name='ResponsePDU', mode=MODE_TYPE)
    _ResponsePDU_conferenceJoinResponse = SEQ(name='conferenceJoinResponse', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceJoinResponse')))
    _ResponsePDU_conferenceAddResponse = SEQ(name='conferenceAddResponse', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceAddResponse')))
    _ResponsePDU_conferenceLockResponse = SEQ(name='conferenceLockResponse', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceLockResponse')))
    _ResponsePDU_conferenceUnlockResponse = SEQ(name='conferenceUnlockResponse', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceUnlockResponse')))
    _ResponsePDU_conferenceTerminateResponse = SEQ(name='conferenceTerminateResponse', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceTerminateResponse')))
    _ResponsePDU_conferenceEjectUserResponse = SEQ(name='conferenceEjectUserResponse', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceEjectUserResponse')))
    _ResponsePDU_conferenceTransferResponse = SEQ(name='conferenceTransferResponse', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceTransferResponse')))
    _ResponsePDU_registryResponse = SEQ(name='registryResponse', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryResponse')))
    _ResponsePDU_registryAllocateHandleResponse = SEQ(name='registryAllocateHandleResponse', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryAllocateHandleResponse')))
    _ResponsePDU_functionNotSupportedResponse = SEQ(name='functionNotSupportedResponse', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'FunctionNotSupportedResponse')))
    _ResponsePDU_nonStandardResponse = SEQ(name='nonStandardResponse', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardPDU')))
    ResponsePDU._cont = ASN1Dict([
        ('conferenceJoinResponse', _ResponsePDU_conferenceJoinResponse),
        ('conferenceAddResponse', _ResponsePDU_conferenceAddResponse),
        ('conferenceLockResponse', _ResponsePDU_conferenceLockResponse),
        ('conferenceUnlockResponse', _ResponsePDU_conferenceUnlockResponse),
        ('conferenceTerminateResponse', _ResponsePDU_conferenceTerminateResponse),
        ('conferenceEjectUserResponse', _ResponsePDU_conferenceEjectUserResponse),
        ('conferenceTransferResponse', _ResponsePDU_conferenceTransferResponse),
        ('registryResponse', _ResponsePDU_registryResponse),
        ('registryAllocateHandleResponse', _ResponsePDU_registryAllocateHandleResponse),
        ('functionNotSupportedResponse', _ResponsePDU_functionNotSupportedResponse),
        ('nonStandardResponse', _ResponsePDU_nonStandardResponse),
        ])
    ResponsePDU._ext = []
    
    #-----< IndicationPDU >-----#
    IndicationPDU = CHOICE(name='IndicationPDU', mode=MODE_TYPE)
    _IndicationPDU_userIDIndication = SEQ(name='userIDIndication', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserIDIndication')))
    _IndicationPDU_conferenceLockIndication = SEQ(name='conferenceLockIndication', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceLockIndication')))
    _IndicationPDU_conferenceUnlockIndication = SEQ(name='conferenceUnlockIndication', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceUnlockIndication')))
    _IndicationPDU_conferenceTerminateIndication = SEQ(name='conferenceTerminateIndication', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceTerminateIndication')))
    _IndicationPDU_conferenceEjectUserIndication = SEQ(name='conferenceEjectUserIndication', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceEjectUserIndication')))
    _IndicationPDU_conferenceTransferIndication = SEQ(name='conferenceTransferIndication', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceTransferIndication')))
    _IndicationPDU_rosterUpdateIndication = SEQ(name='rosterUpdateIndication', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RosterUpdateIndication')))
    _IndicationPDU_applicationInvokeIndication = SEQ(name='applicationInvokeIndication', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ApplicationInvokeIndication')))
    _IndicationPDU_registryMonitorEntryIndication = SEQ(name='registryMonitorEntryIndication', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'RegistryMonitorEntryIndication')))
    _IndicationPDU_conductorAssignIndication = SEQ(name='conductorAssignIndication', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConductorAssignIndication')))
    _IndicationPDU_conductorReleaseIndication = SEQ(name='conductorReleaseIndication', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConductorReleaseIndication')))
    _IndicationPDU_conductorPermissionAskIndication = SEQ(name='conductorPermissionAskIndication', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConductorPermissionAskIndication')))
    _IndicationPDU_conductorPermissionGrantIndication = SEQ(name='conductorPermissionGrantIndication', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConductorPermissionGrantIndication')))
    _IndicationPDU_conferenceTimeRemainingIndication = SEQ(name='conferenceTimeRemainingIndication', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceTimeRemainingIndication')))
    _IndicationPDU_conferenceTimeInquireIndication = SEQ(name='conferenceTimeInquireIndication', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceTimeInquireIndication')))
    _IndicationPDU_conferenceTimeExtendIndication = SEQ(name='conferenceTimeExtendIndication', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceTimeExtendIndication')))
    _IndicationPDU_conferenceAssistanceIndication = SEQ(name='conferenceAssistanceIndication', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'ConferenceAssistanceIndication')))
    _IndicationPDU_textMessageIndication = SEQ(name='textMessageIndication', mode=MODE_TYPE, tag=(17, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'TextMessageIndication')))
    _IndicationPDU_nonStandardIndication = SEQ(name='nonStandardIndication', mode=MODE_TYPE, tag=(18, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardPDU')))
    IndicationPDU._cont = ASN1Dict([
        ('userIDIndication', _IndicationPDU_userIDIndication),
        ('conferenceLockIndication', _IndicationPDU_conferenceLockIndication),
        ('conferenceUnlockIndication', _IndicationPDU_conferenceUnlockIndication),
        ('conferenceTerminateIndication', _IndicationPDU_conferenceTerminateIndication),
        ('conferenceEjectUserIndication', _IndicationPDU_conferenceEjectUserIndication),
        ('conferenceTransferIndication', _IndicationPDU_conferenceTransferIndication),
        ('rosterUpdateIndication', _IndicationPDU_rosterUpdateIndication),
        ('applicationInvokeIndication', _IndicationPDU_applicationInvokeIndication),
        ('registryMonitorEntryIndication', _IndicationPDU_registryMonitorEntryIndication),
        ('conductorAssignIndication', _IndicationPDU_conductorAssignIndication),
        ('conductorReleaseIndication', _IndicationPDU_conductorReleaseIndication),
        ('conductorPermissionAskIndication', _IndicationPDU_conductorPermissionAskIndication),
        ('conductorPermissionGrantIndication', _IndicationPDU_conductorPermissionGrantIndication),
        ('conferenceTimeRemainingIndication', _IndicationPDU_conferenceTimeRemainingIndication),
        ('conferenceTimeInquireIndication', _IndicationPDU_conferenceTimeInquireIndication),
        ('conferenceTimeExtendIndication', _IndicationPDU_conferenceTimeExtendIndication),
        ('conferenceAssistanceIndication', _IndicationPDU_conferenceAssistanceIndication),
        ('textMessageIndication', _IndicationPDU_textMessageIndication),
        ('nonStandardIndication', _IndicationPDU_nonStandardIndication),
        ])
    IndicationPDU._ext = []
    
    _all_ = [
        ChannelID,
        StaticChannelID,
        DynamicChannelID,
        UserID,
        TokenID,
        StaticTokenID,
        DynamicTokenID,
        Time,
        Handle,
        H221NonStandardIdentifier,
        _Key_object,
        _Key_h221NonStandard,
        Key,
        _NonStandardParameter_key,
        _NonStandardParameter_data,
        NonStandardParameter,
        TextString,
        simpleTextFirstCharacter,
        simpleTextLastCharacter,
        SimpleTextString,
        SimpleNumericString,
        DiallingString,
        SubAddressString,
        ExtraDiallingString,
        __UserData__item__key,
        __UserData__item__value,
        _UserData__item_,
        UserData,
        _Password_numeric,
        _Password_text,
        _Password_unicodeText,
        Password,
        _PasswordSelector_numeric,
        _PasswordSelector_text,
        _PasswordSelector_unicodeText,
        PasswordSelector,
        _ChallengeResponseItem_passwordString,
        _ChallengeResponseItem_responseData,
        ChallengeResponseItem,
        _ChallengeResponseAlgorithm_passwordInTheClear,
        _ChallengeResponseAlgorithm_nonStandardAlgorithm,
        ChallengeResponseAlgorithm,
        _ChallengeItem_responseAlgorithm,
        _ChallengeItem_challengeData,
        ChallengeItem,
        _ChallengeRequest_challengeTag,
        __ChallengeRequest_challengeSet__item_,
        _ChallengeRequest_challengeSet,
        ChallengeRequest,
        _ChallengeResponse_challengeTag,
        _ChallengeResponse_responseAlgorithm,
        _ChallengeResponse_responseItem,
        ChallengeResponse,
        _PasswordChallengeRequestResponse_passwordInTheClear,
        __PasswordChallengeRequestResponse_challengeRequestResponse_challengeRequest,
        __PasswordChallengeRequestResponse_challengeRequestResponse_challengeResponse,
        _PasswordChallengeRequestResponse_challengeRequestResponse,
        PasswordChallengeRequestResponse,
        _ConferenceName_numeric,
        _ConferenceName_text,
        _ConferenceName_unicodeText,
        ConferenceName,
        _ConferenceNameSelector_numeric,
        _ConferenceNameSelector_text,
        _ConferenceNameSelector_unicodeText,
        ConferenceNameSelector,
        ConferenceNameModifier,
        Privilege,
        TerminationMethod,
        _ConferencePriorityScheme_nonStandardScheme,
        ConferencePriorityScheme,
        _ConferencePriority_priority,
        _ConferencePriority_scheme,
        ConferencePriority,
        _NodeCategory_conventional,
        _NodeCategory_counted,
        _NodeCategory_anonymous,
        _NodeCategory_nonStandardCategory,
        NodeCategory,
        _ConferenceMode_conventional_only,
        _ConferenceMode_counted_only,
        _ConferenceMode_anonymous_only,
        _ConferenceMode_conventional_control,
        _ConferenceMode_unrestricted_mode,
        _ConferenceMode_non_standard_mode,
        ConferenceMode,
        ____NetworkAddress__item__aggregatedChannel_transferModes_speech,
        ____NetworkAddress__item__aggregatedChannel_transferModes_voice_band,
        ____NetworkAddress__item__aggregatedChannel_transferModes_digital_56k,
        ____NetworkAddress__item__aggregatedChannel_transferModes_digital_64k,
        ____NetworkAddress__item__aggregatedChannel_transferModes_digital_128k,
        ____NetworkAddress__item__aggregatedChannel_transferModes_digital_192k,
        ____NetworkAddress__item__aggregatedChannel_transferModes_digital_256k,
        ____NetworkAddress__item__aggregatedChannel_transferModes_digital_320k,
        ____NetworkAddress__item__aggregatedChannel_transferModes_digital_384k,
        ____NetworkAddress__item__aggregatedChannel_transferModes_digital_512k,
        ____NetworkAddress__item__aggregatedChannel_transferModes_digital_768k,
        ____NetworkAddress__item__aggregatedChannel_transferModes_digital_1152k,
        ____NetworkAddress__item__aggregatedChannel_transferModes_digital_1472k,
        ____NetworkAddress__item__aggregatedChannel_transferModes_digital_1536k,
        ____NetworkAddress__item__aggregatedChannel_transferModes_digital_1920k,
        ____NetworkAddress__item__aggregatedChannel_transferModes_packet_mode,
        ____NetworkAddress__item__aggregatedChannel_transferModes_frame_mode,
        ____NetworkAddress__item__aggregatedChannel_transferModes_atm,
        ___NetworkAddress__item__aggregatedChannel_transferModes,
        ___NetworkAddress__item__aggregatedChannel_internationalNumber,
        ___NetworkAddress__item__aggregatedChannel_subAddress,
        ___NetworkAddress__item__aggregatedChannel_extraDialling,
        ____NetworkAddress__item__aggregatedChannel_highLayerCompatibility_telephony3kHz,
        ____NetworkAddress__item__aggregatedChannel_highLayerCompatibility_telephony7kHz,
        ____NetworkAddress__item__aggregatedChannel_highLayerCompatibility_videotelephony,
        ____NetworkAddress__item__aggregatedChannel_highLayerCompatibility_videoconference,
        ____NetworkAddress__item__aggregatedChannel_highLayerCompatibility_audiographic,
        ____NetworkAddress__item__aggregatedChannel_highLayerCompatibility_audiovisual,
        ____NetworkAddress__item__aggregatedChannel_highLayerCompatibility_multimedia,
        ___NetworkAddress__item__aggregatedChannel_highLayerCompatibility,
        __NetworkAddress__item__aggregatedChannel,
        ___NetworkAddress__item__transportConnection_nsapAddress,
        ___NetworkAddress__item__transportConnection_transportSelector,
        __NetworkAddress__item__transportConnection,
        __NetworkAddress__item__nonStandard,
        _NetworkAddress__item_,
        NetworkAddress,
        _MediaList_audio,
        _MediaList_video,
        _MediaList_data,
        MediaList,
        _ChannelAggregationMethod_h221,
        _ChannelAggregationMethod_h244,
        _ChannelAggregationMethod_iso_iec_13871,
        _ChannelAggregationMethod_nonStandard,
        ChannelAggregationMethod,
        __Profile_simpleProfile_speech,
        __Profile_simpleProfile_telephony_3kHz,
        __Profile_simpleProfile_telephony_7kHz,
        __Profile_simpleProfile_voice_band,
        __Profile_simpleProfile_frameRelay,
        __Profile_simpleProfile_t123_pstn_basic,
        __Profile_simpleProfile_t123_psdn_basic,
        __Profile_simpleProfile_t123_b_isdn_basic,
        _Profile_simpleProfile,
        ___Profile_multimediaProfile_profile_h310,
        ___Profile_multimediaProfile_profile_h320,
        ___Profile_multimediaProfile_profile_h321,
        ___Profile_multimediaProfile_profile_h322,
        ___Profile_multimediaProfile_profile_h323,
        ___Profile_multimediaProfile_profile_h324,
        ___Profile_multimediaProfile_profile_h324m,
        ___Profile_multimediaProfile_profile_asvd,
        ___Profile_multimediaProfile_profile_dsvd,
        __Profile_multimediaProfile_profile,
        __Profile_multimediaProfile_t120Data,
        _Profile_multimediaProfile,
        _Profile_dsmccDownloadProfile,
        _Profile_nonStandard,
        Profile,
        _ExtendedE164NetworkAddress_internationalNumber,
        _ExtendedE164NetworkAddress_subAddress,
        _ExtendedE164NetworkAddress_extraDialling,
        ExtendedE164NetworkAddress,
        _TransportAddress_nsapAddress,
        _TransportAddress_transportSelector,
        TransportAddress,
        _GSTNConnection_networkAddress,
        GSTNConnection,
        ___ISDNConnection_circuitTypes__item__digital_64k,
        ___ISDNConnection_circuitTypes__item__digital_2x64k,
        ___ISDNConnection_circuitTypes__item__digital_384k,
        ___ISDNConnection_circuitTypes__item__digital_1536,
        ___ISDNConnection_circuitTypes__item__digital_1920k,
        ___ISDNConnection_circuitTypes__item__multirate_base_64k,
        __ISDNConnection_circuitTypes__item_,
        _ISDNConnection_circuitTypes,
        _ISDNConnection_networkAddress,
        __ISDNConnection_highLayerCompatibility_telephony3kHz,
        __ISDNConnection_highLayerCompatibility_telephony7kHz,
        __ISDNConnection_highLayerCompatibility_videotelephony,
        __ISDNConnection_highLayerCompatibility_videoconference,
        __ISDNConnection_highLayerCompatibility_audiographic,
        __ISDNConnection_highLayerCompatibility_audiovisual,
        __ISDNConnection_highLayerCompatibility_multimedia,
        _ISDNConnection_highLayerCompatibility,
        ISDNConnection,
        ___CSDNConnection_circuitTypes__item__digital_56k,
        ___CSDNConnection_circuitTypes__item__digital_64k,
        __CSDNConnection_circuitTypes__item_,
        _CSDNConnection_circuitTypes,
        _CSDNConnection_networkAddress,
        CSDNConnection,
        __PSDNConnection_networkAddress_extendedE164NetworkAddress,
        __PSDNConnection_networkAddress_transportAddress,
        __PSDNConnection_networkAddress_nonStandard,
        _PSDNConnection_networkAddress,
        PSDNConnection,
        __ATMConnection_networkAddress_extendedE164,
        __ATMConnection_networkAddress_nsapAddress,
        __ATMConnection_networkAddress_nonStandard,
        _ATMConnection_networkAddress,
        _ATMConnection_maxTransferRate,
        ATMConnection,
        _NetworkConnection_gstnConnection,
        _NetworkConnection_isdnConnection,
        _NetworkConnection_csdnConnection,
        _NetworkConnection_psdnConnection,
        _NetworkConnection_atmConnection,
        _NetworkConnection_extendedE164NetworkAddress,
        _NetworkConnection_transportAddress,
        _NetworkConnection_nonStandard,
        NetworkConnection,
        ___NetworkAddressV2__item__networkConnection_singleConnection,
        ______NetworkAddressV2__item__networkConnection_aggregatedConnections_connectionList__item__isdnConnection,
        ______NetworkAddressV2__item__networkConnection_aggregatedConnections_connectionList__item__csdnConnection,
        _____NetworkAddressV2__item__networkConnection_aggregatedConnections_connectionList__item_,
        ____NetworkAddressV2__item__networkConnection_aggregatedConnections_connectionList,
        _____NetworkAddressV2__item__networkConnection_aggregatedConnections_aggregationMethods__item_,
        ____NetworkAddressV2__item__networkConnection_aggregatedConnections_aggregationMethods,
        ___NetworkAddressV2__item__networkConnection_aggregatedConnections,
        __NetworkAddressV2__item__networkConnection,
        ___NetworkAddressV2__item__profiles__item_,
        __NetworkAddressV2__item__profiles,
        __NetworkAddressV2__item__mediaConcerned,
        _NetworkAddressV2__item_,
        NetworkAddressV2,
        NodeType,
        _NodeProperties_managementDevice,
        _NodeProperties_peripheralDevice,
        NodeProperties,
        _AsymmetryIndicator_callingNode,
        _AsymmetryIndicator_calledNode,
        _AsymmetryIndicator_unknown,
        AsymmetryIndicator,
        _AlternativeNodeID_h243NodeID,
        AlternativeNodeID,
        _ConferenceDescriptor_conferenceName,
        _ConferenceDescriptor_conferenceNameModifier,
        _ConferenceDescriptor_conferenceDescription,
        _ConferenceDescriptor_lockedConference,
        _ConferenceDescriptor_passwordInTheClearRequired,
        _ConferenceDescriptor_networkAddress,
        _ConferenceDescriptor_defaultConferenceFlag,
        _ConferenceDescriptor_conferenceMode,
        ConferenceDescriptor,
        _NodeRecord_superiorNode,
        _NodeRecord_nodeType,
        _NodeRecord_nodeProperties,
        _NodeRecord_nodeName,
        __NodeRecord_participantsList__item_,
        _NodeRecord_participantsList,
        _NodeRecord_siteInformation,
        _NodeRecord_networkAddress,
        _NodeRecord_alternativeNodeID,
        _NodeRecord_userData,
        _NodeRecord_nodeCategory,
        _NodeRecord_sessionID,
        NodeRecord,
        _SessionKey_applicationProtocolKey,
        _SessionKey_sessionID,
        SessionKey,
        ChannelType,
        _ApplicationRecord_applicationActive,
        _ApplicationRecord_conductingOperationCapable,
        _ApplicationRecord_startupChannel,
        _ApplicationRecord_applicationUserID,
        ___ApplicationRecord_nonCollapsingCapabilities__item__capabilityID,
        ___ApplicationRecord_nonCollapsingCapabilities__item__applicationData,
        __ApplicationRecord_nonCollapsingCapabilities__item_,
        _ApplicationRecord_nonCollapsingCapabilities,
        ApplicationRecord,
        _CapabilityID_standard,
        _CapabilityID_nonStandard,
        CapabilityID,
        _CapabilityClass_logical,
        _CapabilityClass_unsignedMin,
        _CapabilityClass_unsignedMax,
        CapabilityClass,
        EntityID,
        _ApplicationInvokeSpecifier_sessionKey,
        ___ApplicationInvokeSpecifier_expectedCapabilitySet__item__capabilityID,
        ___ApplicationInvokeSpecifier_expectedCapabilitySet__item__capabilityClass,
        __ApplicationInvokeSpecifier_expectedCapabilitySet__item_,
        _ApplicationInvokeSpecifier_expectedCapabilitySet,
        _ApplicationInvokeSpecifier_startupChannel,
        _ApplicationInvokeSpecifier_mandatoryFlag,
        ApplicationInvokeSpecifier,
        _RegistryKey_sessionKey,
        _RegistryKey_resourceID,
        RegistryKey,
        _RegistryItem_channelID,
        _RegistryItem_tokenID,
        _RegistryItem_parameter,
        _RegistryItem_vacant,
        RegistryItem,
        __RegistryEntryOwner_owned_nodeID,
        __RegistryEntryOwner_owned_entityID,
        _RegistryEntryOwner_owned,
        _RegistryEntryOwner_notOwned,
        RegistryEntryOwner,
        RegistryModificationRights,
        _UserIDIndication_tag,
        UserIDIndication,
        _ConferenceCreateRequest_conferenceName,
        _ConferenceCreateRequest_convenerPassword,
        _ConferenceCreateRequest_password,
        _ConferenceCreateRequest_lockedConference,
        _ConferenceCreateRequest_listedConference,
        _ConferenceCreateRequest_conductibleConference,
        _ConferenceCreateRequest_terminationMethod,
        __ConferenceCreateRequest_conductorPrivileges__item_,
        _ConferenceCreateRequest_conductorPrivileges,
        __ConferenceCreateRequest_conductedPrivileges__item_,
        _ConferenceCreateRequest_conductedPrivileges,
        __ConferenceCreateRequest_nonConductedPrivileges__item_,
        _ConferenceCreateRequest_nonConductedPrivileges,
        _ConferenceCreateRequest_conferenceDescription,
        _ConferenceCreateRequest_callerIdentifier,
        _ConferenceCreateRequest_userData,
        _ConferenceCreateRequest_conferencePriority,
        _ConferenceCreateRequest_conferenceMode,
        ConferenceCreateRequest,
        _ConferenceCreateResponse_nodeID,
        _ConferenceCreateResponse_tag,
        _ConferenceCreateResponse_result,
        _ConferenceCreateResponse_userData,
        ConferenceCreateResponse,
        _ConferenceQueryRequest_nodeType,
        _ConferenceQueryRequest_asymmetryIndicator,
        _ConferenceQueryRequest_userData,
        ConferenceQueryRequest,
        _ConferenceQueryResponse_nodeType,
        _ConferenceQueryResponse_asymmetryIndicator,
        __ConferenceQueryResponse_conferenceList__item_,
        _ConferenceQueryResponse_conferenceList,
        _ConferenceQueryResponse_result,
        _ConferenceQueryResponse_userData,
        _ConferenceQueryResponse_waitForInvitationFlag,
        _ConferenceQueryResponse_noUnlistedConferenceFlag,
        ConferenceQueryResponse,
        _ConferenceJoinRequest_conferenceName,
        _ConferenceJoinRequest_conferenceNameModifier,
        _ConferenceJoinRequest_tag,
        _ConferenceJoinRequest_password,
        _ConferenceJoinRequest_convenerPassword,
        _ConferenceJoinRequest_callerIdentifier,
        _ConferenceJoinRequest_userData,
        _ConferenceJoinRequest_nodeCategory,
        ConferenceJoinRequest,
        _ConferenceJoinResponse_nodeID,
        _ConferenceJoinResponse_topNodeID,
        _ConferenceJoinResponse_tag,
        _ConferenceJoinResponse_conferenceNameAlias,
        _ConferenceJoinResponse_passwordInTheClearRequired,
        _ConferenceJoinResponse_lockedConference,
        _ConferenceJoinResponse_listedConference,
        _ConferenceJoinResponse_conductibleConference,
        _ConferenceJoinResponse_terminationMethod,
        __ConferenceJoinResponse_conductorPrivileges__item_,
        _ConferenceJoinResponse_conductorPrivileges,
        __ConferenceJoinResponse_conductedPrivileges__item_,
        _ConferenceJoinResponse_conductedPrivileges,
        __ConferenceJoinResponse_nonConductedPrivileges__item_,
        _ConferenceJoinResponse_nonConductedPrivileges,
        _ConferenceJoinResponse_conferenceDescription,
        _ConferenceJoinResponse_password,
        _ConferenceJoinResponse_result,
        _ConferenceJoinResponse_userData,
        _ConferenceJoinResponse_nodeCategory,
        _ConferenceJoinResponse_conferenceMode,
        ConferenceJoinResponse,
        _ConferenceInviteRequest_conferenceName,
        _ConferenceInviteRequest_nodeID,
        _ConferenceInviteRequest_topNodeID,
        _ConferenceInviteRequest_tag,
        _ConferenceInviteRequest_passwordInTheClearRequired,
        _ConferenceInviteRequest_lockedConference,
        _ConferenceInviteRequest_listedConference,
        _ConferenceInviteRequest_conductibleConference,
        _ConferenceInviteRequest_terminationMethod,
        __ConferenceInviteRequest_conductorPrivileges__item_,
        _ConferenceInviteRequest_conductorPrivileges,
        __ConferenceInviteRequest_conductedPrivileges__item_,
        _ConferenceInviteRequest_conductedPrivileges,
        __ConferenceInviteRequest_nonConductedPrivileges__item_,
        _ConferenceInviteRequest_nonConductedPrivileges,
        _ConferenceInviteRequest_conferenceDescription,
        _ConferenceInviteRequest_callerIdentifier,
        _ConferenceInviteRequest_userData,
        _ConferenceInviteRequest_conferencePriority,
        _ConferenceInviteRequest_nodeCategory,
        _ConferenceInviteRequest_conferenceMode,
        ConferenceInviteRequest,
        _ConferenceInviteResponse_result,
        _ConferenceInviteResponse_userData,
        ConferenceInviteResponse,
        _ConferenceAddRequest_networkAddress,
        _ConferenceAddRequest_requestingNode,
        _ConferenceAddRequest_tag,
        _ConferenceAddRequest_addingMCU,
        _ConferenceAddRequest_userData,
        _ConferenceAddRequest_nodeCategory,
        _ConferenceAddRequest_networkAddressV2,
        ConferenceAddRequest,
        _ConferenceAddResponse_tag,
        _ConferenceAddResponse_result,
        _ConferenceAddResponse_userData,
        ConferenceAddResponse,
        ConferenceLockRequest,
        _ConferenceLockResponse_result,
        ConferenceLockResponse,
        ConferenceLockIndication,
        ConferenceUnlockRequest,
        _ConferenceUnlockResponse_result,
        ConferenceUnlockResponse,
        ConferenceUnlockIndication,
        _ConferenceTerminateRequest_reason,
        ConferenceTerminateRequest,
        _ConferenceTerminateResponse_result,
        ConferenceTerminateResponse,
        _ConferenceTerminateIndication_reason,
        ConferenceTerminateIndication,
        _ConferenceEjectUserRequest_nodeToEject,
        _ConferenceEjectUserRequest_reason,
        ConferenceEjectUserRequest,
        _ConferenceEjectUserResponse_nodeToEject,
        _ConferenceEjectUserResponse_result,
        ConferenceEjectUserResponse,
        _ConferenceEjectUserIndication_nodeToEject,
        _ConferenceEjectUserIndication_reason,
        ConferenceEjectUserIndication,
        _ConferenceTransferRequest_conferenceName,
        _ConferenceTransferRequest_conferenceNameModifier,
        _ConferenceTransferRequest_networkAddress,
        __ConferenceTransferRequest_transferringNodes__item_,
        _ConferenceTransferRequest_transferringNodes,
        _ConferenceTransferRequest_password,
        _ConferenceTransferRequest_networkAddressV2,
        ConferenceTransferRequest,
        _ConferenceTransferResponse_conferenceName,
        _ConferenceTransferResponse_conferenceNameModifier,
        __ConferenceTransferResponse_transferringNodes__item_,
        _ConferenceTransferResponse_transferringNodes,
        _ConferenceTransferResponse_result,
        ConferenceTransferResponse,
        _ConferenceTransferIndication_conferenceName,
        _ConferenceTransferIndication_conferenceNameModifier,
        _ConferenceTransferIndication_networkAddress,
        __ConferenceTransferIndication_transferringNodes__item_,
        _ConferenceTransferIndication_transferringNodes,
        _ConferenceTransferIndication_password,
        _ConferenceTransferIndication_networkAddressV2,
        ConferenceTransferIndication,
        _RosterUpdateIndication_fullRefresh,
        ___RosterUpdateIndication_nodeInformation_nodeRecordList_noChange,
        _____RosterUpdateIndication_nodeInformation_nodeRecordList_refresh__item__nodeID,
        _____RosterUpdateIndication_nodeInformation_nodeRecordList_refresh__item__nodeRecord,
        ____RosterUpdateIndication_nodeInformation_nodeRecordList_refresh__item_,
        ___RosterUpdateIndication_nodeInformation_nodeRecordList_refresh,
        _____RosterUpdateIndication_nodeInformation_nodeRecordList_update__item__nodeID,
        ______RosterUpdateIndication_nodeInformation_nodeRecordList_update__item__nodeUpdate_addRecord,
        ______RosterUpdateIndication_nodeInformation_nodeRecordList_update__item__nodeUpdate_replaceRecord,
        ______RosterUpdateIndication_nodeInformation_nodeRecordList_update__item__nodeUpdate_removeRecord,
        _____RosterUpdateIndication_nodeInformation_nodeRecordList_update__item__nodeUpdate,
        ____RosterUpdateIndication_nodeInformation_nodeRecordList_update__item_,
        ___RosterUpdateIndication_nodeInformation_nodeRecordList_update,
        __RosterUpdateIndication_nodeInformation_nodeRecordList,
        __RosterUpdateIndication_nodeInformation_rosterInstanceNumber,
        __RosterUpdateIndication_nodeInformation_nodesAdded,
        __RosterUpdateIndication_nodeInformation_nodesRemoved,
        _RosterUpdateIndication_nodeInformation,
        ___RosterUpdateIndication_applicationInformation__item__sessionKey,
        ____RosterUpdateIndication_applicationInformation__item__applicationRecordList_noChange,
        ______RosterUpdateIndication_applicationInformation__item__applicationRecordList_refresh__item__nodeID,
        ______RosterUpdateIndication_applicationInformation__item__applicationRecordList_refresh__item__entityID,
        ______RosterUpdateIndication_applicationInformation__item__applicationRecordList_refresh__item__applicationRecord,
        _____RosterUpdateIndication_applicationInformation__item__applicationRecordList_refresh__item_,
        ____RosterUpdateIndication_applicationInformation__item__applicationRecordList_refresh,
        ______RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item__nodeID,
        ______RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item__entityID,
        _______RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item__applicationUpdate_addRecord,
        _______RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item__applicationUpdate_replaceRecord,
        _______RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item__applicationUpdate_removeRecord,
        ______RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item__applicationUpdate,
        _____RosterUpdateIndication_applicationInformation__item__applicationRecordList_update__item_,
        ____RosterUpdateIndication_applicationInformation__item__applicationRecordList_update,
        ___RosterUpdateIndication_applicationInformation__item__applicationRecordList,
        ____RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList_noChange,
        ______RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList_refresh__item__capabilityID,
        ______RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList_refresh__item__capabilityClass,
        ______RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList_refresh__item__numberOfEntities,
        _____RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList_refresh__item_,
        ____RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList_refresh,
        ___RosterUpdateIndication_applicationInformation__item__applicationCapabilitiesList,
        ___RosterUpdateIndication_applicationInformation__item__rosterInstanceNumber,
        ___RosterUpdateIndication_applicationInformation__item__peerEntitiesAdded,
        ___RosterUpdateIndication_applicationInformation__item__peerEntitiesRemoved,
        __RosterUpdateIndication_applicationInformation__item_,
        _RosterUpdateIndication_applicationInformation,
        RosterUpdateIndication,
        __ApplicationInvokeIndication_applicationProtocolEntiyList__item_,
        _ApplicationInvokeIndication_applicationProtocolEntiyList,
        __ApplicationInvokeIndication_destinationNodes__item_,
        _ApplicationInvokeIndication_destinationNodes,
        ApplicationInvokeIndication,
        _RegistryRegisterChannelRequest_entityID,
        _RegistryRegisterChannelRequest_key,
        _RegistryRegisterChannelRequest_channelID,
        RegistryRegisterChannelRequest,
        _RegistryAssignTokenRequest_entityID,
        _RegistryAssignTokenRequest_key,
        RegistryAssignTokenRequest,
        _RegistrySetParameterRequest_entityID,
        _RegistrySetParameterRequest_key,
        _RegistrySetParameterRequest_parameter,
        _RegistrySetParameterRequest_modificationRights,
        RegistrySetParameterRequest,
        _RegistryRetrieveEntryRequest_entityID,
        _RegistryRetrieveEntryRequest_key,
        RegistryRetrieveEntryRequest,
        _RegistryDeleteEntryRequest_entityID,
        _RegistryDeleteEntryRequest_key,
        RegistryDeleteEntryRequest,
        _RegistryMonitorEntryRequest_entityID,
        _RegistryMonitorEntryRequest_key,
        RegistryMonitorEntryRequest,
        _RegistryMonitorEntryIndication_key,
        _RegistryMonitorEntryIndication_item,
        _RegistryMonitorEntryIndication_owner,
        _RegistryMonitorEntryIndication_modificationRights,
        RegistryMonitorEntryIndication,
        _RegistryAllocateHandleRequest_entityID,
        _RegistryAllocateHandleRequest_numberOfHandles,
        RegistryAllocateHandleRequest,
        _RegistryAllocateHandleResponse_entityID,
        _RegistryAllocateHandleResponse_numberOfHandles,
        _RegistryAllocateHandleResponse_firstHandle,
        _RegistryAllocateHandleResponse_result,
        RegistryAllocateHandleResponse,
        _RegistryResponse_entityID,
        _RegistryResponse_primitiveType,
        _RegistryResponse_key,
        _RegistryResponse_item,
        _RegistryResponse_owner,
        _RegistryResponse_modificationRights,
        _RegistryResponse_result,
        RegistryResponse,
        _ConductorAssignIndication_conductingNode,
        ConductorAssignIndication,
        ConductorReleaseIndication,
        _ConductorPermissionAskIndication_grantFlag,
        ConductorPermissionAskIndication,
        __ConductorPermissionGrantIndication_permissionList__item_,
        _ConductorPermissionGrantIndication_permissionList,
        __ConductorPermissionGrantIndication_waitingList__item_,
        _ConductorPermissionGrantIndication_waitingList,
        ConductorPermissionGrantIndication,
        _ConferenceTimeRemainingIndication_timeRemaining,
        _ConferenceTimeRemainingIndication_nodeID,
        ConferenceTimeRemainingIndication,
        _ConferenceTimeInquireIndication_nodeSpecificTimeFlag,
        ConferenceTimeInquireIndication,
        _ConferenceTimeExtendIndication_timeToExtend,
        _ConferenceTimeExtendIndication_nodeSpecificTimeFlag,
        ConferenceTimeExtendIndication,
        _ConferenceAssistanceIndication_userData,
        ConferenceAssistanceIndication,
        _TextMessageIndication_message,
        TextMessageIndication,
        _RosterRefreshRequest_nodeID,
        _RosterRefreshRequest_nodeCategory,
        _RosterRefreshRequest_fullRefresh,
        _RosterRefreshRequest_sendConferenceRoster,
        ____RosterRefreshRequest_applicationList_applicationKeyList__item__applicationProtocolKey,
        ____RosterRefreshRequest_applicationList_applicationKeyList__item__nonStandardParameter,
        ___RosterRefreshRequest_applicationList_applicationKeyList__item_,
        __RosterRefreshRequest_applicationList_applicationKeyList,
        __RosterRefreshRequest_applicationList_nonStandardParameter,
        _RosterRefreshRequest_applicationList,
        ____RosterRefreshRequest_sessionList_sessionKeyList__item__sessionKey,
        ____RosterRefreshRequest_sessionList_sessionKeyList__item__nonStandardParameter,
        ___RosterRefreshRequest_sessionList_sessionKeyList__item_,
        __RosterRefreshRequest_sessionList_sessionKeyList,
        __RosterRefreshRequest_sessionList_nonStandardParameter,
        _RosterRefreshRequest_sessionList,
        _RosterRefreshRequest_nonStandardParameter,
        RosterRefreshRequest,
        _FunctionNotSupportedResponse_request,
        FunctionNotSupportedResponse,
        _NonStandardPDU_data,
        NonStandardPDU,
        _ConnectData_t124Identifier,
        _ConnectData_connectPDU,
        ConnectData,
        _ConnectGCCPDU_conferenceCreateRequest,
        _ConnectGCCPDU_conferenceCreateResponse,
        _ConnectGCCPDU_conferenceQueryRequest,
        _ConnectGCCPDU_conferenceQueryResponse,
        _ConnectGCCPDU_conferenceJoinRequest,
        _ConnectGCCPDU_conferenceJoinResponse,
        _ConnectGCCPDU_conferenceInviteRequest,
        _ConnectGCCPDU_conferenceInviteResponse,
        ConnectGCCPDU,
        _GCCPDU_request,
        _GCCPDU_response,
        _GCCPDU_indication,
        GCCPDU,
        _RequestPDU_conferenceJoinRequest,
        _RequestPDU_conferenceAddRequest,
        _RequestPDU_conferenceLockRequest,
        _RequestPDU_conferenceUnlockRequest,
        _RequestPDU_conferenceTerminateRequest,
        _RequestPDU_conferenceEjectUserRequest,
        _RequestPDU_conferenceTransferRequest,
        _RequestPDU_registryRegisterChannelRequest,
        _RequestPDU_registryAssignTokenRequest,
        _RequestPDU_registrySetParameterRequest,
        _RequestPDU_registryRetrieveEntryRequest,
        _RequestPDU_registryDeleteEntryRequest,
        _RequestPDU_registryMonitorEntryRequest,
        _RequestPDU_registryAllocateHandleRequest,
        _RequestPDU_nonStandardRequest,
        RequestPDU,
        _ResponsePDU_conferenceJoinResponse,
        _ResponsePDU_conferenceAddResponse,
        _ResponsePDU_conferenceLockResponse,
        _ResponsePDU_conferenceUnlockResponse,
        _ResponsePDU_conferenceTerminateResponse,
        _ResponsePDU_conferenceEjectUserResponse,
        _ResponsePDU_conferenceTransferResponse,
        _ResponsePDU_registryResponse,
        _ResponsePDU_registryAllocateHandleResponse,
        _ResponsePDU_functionNotSupportedResponse,
        _ResponsePDU_nonStandardResponse,
        ResponsePDU,
        _IndicationPDU_userIDIndication,
        _IndicationPDU_conferenceLockIndication,
        _IndicationPDU_conferenceUnlockIndication,
        _IndicationPDU_conferenceTerminateIndication,
        _IndicationPDU_conferenceEjectUserIndication,
        _IndicationPDU_conferenceTransferIndication,
        _IndicationPDU_rosterUpdateIndication,
        _IndicationPDU_applicationInvokeIndication,
        _IndicationPDU_registryMonitorEntryIndication,
        _IndicationPDU_conductorAssignIndication,
        _IndicationPDU_conductorReleaseIndication,
        _IndicationPDU_conductorPermissionAskIndication,
        _IndicationPDU_conductorPermissionGrantIndication,
        _IndicationPDU_conferenceTimeRemainingIndication,
        _IndicationPDU_conferenceTimeInquireIndication,
        _IndicationPDU_conferenceTimeExtendIndication,
        _IndicationPDU_conferenceAssistanceIndication,
        _IndicationPDU_textMessageIndication,
        _IndicationPDU_nonStandardIndication,
        IndicationPDU,
    ]

class AS_PROTOCOL_for_PER_encoding:

    _name_  = 'AS-PROTOCOL-for-PER-encoding'
    _oid_   = [0, 0, 20, 128, 0, 2, 1]
    
    _obj_ = [
        'Coordinate8',
        'Coordinate16',
        'Integer8',
        'Integer12',
        'Integer16',
        'Integer32',
        'Signed16',
        'ShareID',
        'WindowID',
        'T50String',
        'ASString',
        'ExtraTextFlags',
        'FontAttributeFlags',
        'KeyboardFlags',
        'PointingDeviceFlags',
        'TextAttributeFlags',
        'WindowAttributeFlags',
        'ActivateWindowRequest',
        'ActivationHelpKeyRequest',
        'ActivationHelpIndexKeyRequest',
        'ActivationHelpExtendedKeyRequest',
        'BackgroundMixMode',
        'BitmapData',
        'Brush',
        'BrushHatch',
        'BrushStyle',
        'CloseWindowRequest',
        'Color',
        'ColorAccuracyEnhancementRGB',
        'ColorCIExyChromaticity',
        'ColorPalette',
        'ColorPointerAttribute',
        'ColorRGB',
        'ColorSpaceSpecifier',
        'CompressedBitmapData',
        'ConfirmDetachResponse',
        'ConfirmRemoteShare',
        'ConfirmTakeResponse',
        'ControlPriority',
        'Cooperate',
        'Coordinate',
        'DesktopSaveAction',
        'DenyDetachResponse',
        'DenyPassResponse',
        'DenyTakeResponse',
        'DenyRemoteDetachResponse',
        'DenyRemoteShare',
        'Detach',
        'DetachRequest',
        'FontAttribute',
        'FontCodePage',
        'GeneralCompressionSpecifier',
        'GrantControl',
        'HatchStyle',
        'HostedWindowActiveIndication',
        'HostedWindowInvisibleIndication',
        'LocalWindowActiveIndication',
        'MonoPointerAttribute',
        'NotifyHostedApplications',
        'PassControlRequest',
        'Pen',
        'PenStyle',
        'Point16',
        'PointerDeviceCaptureIndication',
        'Rectangle16',
        'RemoteDetachRequest',
        'RemoteShareDenial',
        'RequestControl',
        'RequestRemoteShare',
        'RestoreWindowRequest',
        'ROP2',
        'ROP3',
        'SystemPointerType',
        'TakeControlRequest',
        'UnhostApplication',
        'V42bisCompression',
        'WindowAttribute',
        'WindowManagerMenuRequest',
        'WindowTitle',
        'InputEvent',
        'CodePointEvent',
        'VirtualKeyEvent',
        'PointingDeviceEvent',
        'SynchronizeEvent',
        'PrimaryOrderHeader',
        'ShareDataHeader',
        'DestinationBltOrder',
        'PatternBltOrder',
        'ScreenBltOrder',
        'CacheBitmapOrder',
        'CacheColorTableOrder',
        'MemoryBltOrder',
        'MemoryThreeWayBltOrder',
        'TextOrder',
        'ExtendedTextOrder',
        'FrameOrder',
        'RectangleOrder',
        'OpaqueRectangleOrder',
        'LineOrder',
        'DesktopSaveOrder',
        'DesktopOriginOrder',
        'ColorSpaceOrder',
        'PrimaryOrder',
        'SecondaryOrder',
        'UpdateOrder',
        'ApplicationPDU',
        'ControlPDU',
        'FlowResponsePDU',
        'FlowStopPDU',
        'FlowTestPDU',
        'FontPDU',
        'InputPDU',
        'MediatedControlPDU',
        'PointerPDU',
        'RemoteSharePDU',
        'SynchronizePDU',
        'UpdateBitmapPDU',
        'UpdateOrdersPDU',
        'UpdatePalettePDU',
        'UpdateSynchronizePDU',
        'WindowActivationPDU',
        'WindowListPDU',
        'ASNonStandardPDU',
        'SharePDU',
        ]
    _type_ = [
        'Coordinate8',
        'Coordinate16',
        'Integer8',
        'Integer12',
        'Integer16',
        'Integer32',
        'Signed16',
        'ShareID',
        'WindowID',
        'T50String',
        'ASString',
        'ExtraTextFlags',
        'FontAttributeFlags',
        'KeyboardFlags',
        'PointingDeviceFlags',
        'TextAttributeFlags',
        'WindowAttributeFlags',
        'ActivateWindowRequest',
        'ActivationHelpKeyRequest',
        'ActivationHelpIndexKeyRequest',
        'ActivationHelpExtendedKeyRequest',
        'BackgroundMixMode',
        'BitmapData',
        'Brush',
        'BrushHatch',
        'BrushStyle',
        'CloseWindowRequest',
        'Color',
        'ColorAccuracyEnhancementRGB',
        'ColorCIExyChromaticity',
        'ColorPalette',
        'ColorPointerAttribute',
        'ColorRGB',
        'ColorSpaceSpecifier',
        'CompressedBitmapData',
        'ConfirmDetachResponse',
        'ConfirmRemoteShare',
        'ConfirmTakeResponse',
        'ControlPriority',
        'Cooperate',
        'Coordinate',
        'DesktopSaveAction',
        'DenyDetachResponse',
        'DenyPassResponse',
        'DenyTakeResponse',
        'DenyRemoteDetachResponse',
        'DenyRemoteShare',
        'Detach',
        'DetachRequest',
        'FontAttribute',
        'FontCodePage',
        'GeneralCompressionSpecifier',
        'GrantControl',
        'HatchStyle',
        'HostedWindowActiveIndication',
        'HostedWindowInvisibleIndication',
        'LocalWindowActiveIndication',
        'MonoPointerAttribute',
        'NotifyHostedApplications',
        'PassControlRequest',
        'Pen',
        'PenStyle',
        'Point16',
        'PointerDeviceCaptureIndication',
        'Rectangle16',
        'RemoteDetachRequest',
        'RemoteShareDenial',
        'RequestControl',
        'RequestRemoteShare',
        'RestoreWindowRequest',
        'ROP2',
        'ROP3',
        'SystemPointerType',
        'TakeControlRequest',
        'UnhostApplication',
        'V42bisCompression',
        'WindowAttribute',
        'WindowManagerMenuRequest',
        'WindowTitle',
        'InputEvent',
        'CodePointEvent',
        'VirtualKeyEvent',
        'PointingDeviceEvent',
        'SynchronizeEvent',
        'PrimaryOrderHeader',
        'ShareDataHeader',
        'DestinationBltOrder',
        'PatternBltOrder',
        'ScreenBltOrder',
        'CacheBitmapOrder',
        'CacheColorTableOrder',
        'MemoryBltOrder',
        'MemoryThreeWayBltOrder',
        'TextOrder',
        'ExtendedTextOrder',
        'FrameOrder',
        'RectangleOrder',
        'OpaqueRectangleOrder',
        'LineOrder',
        'DesktopSaveOrder',
        'DesktopOriginOrder',
        'ColorSpaceOrder',
        'PrimaryOrder',
        'SecondaryOrder',
        'UpdateOrder',
        'ApplicationPDU',
        'ControlPDU',
        'FlowResponsePDU',
        'FlowStopPDU',
        'FlowTestPDU',
        'FontPDU',
        'InputPDU',
        'MediatedControlPDU',
        'PointerPDU',
        'RemoteSharePDU',
        'SynchronizePDU',
        'UpdateBitmapPDU',
        'UpdateOrdersPDU',
        'UpdatePalettePDU',
        'UpdateSynchronizePDU',
        'WindowActivationPDU',
        'WindowListPDU',
        'ASNonStandardPDU',
        'SharePDU',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< Coordinate8 >-----#
    Coordinate8 = INT(name='Coordinate8', mode=MODE_TYPE)
    Coordinate8._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-128, ub=127)], ev=None, er=[])
    
    #-----< Coordinate16 >-----#
    Coordinate16 = INT(name='Coordinate16', mode=MODE_TYPE)
    Coordinate16._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-32768, ub=32767)], ev=None, er=[])
    
    #-----< Integer8 >-----#
    Integer8 = INT(name='Integer8', mode=MODE_TYPE)
    Integer8._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< Integer12 >-----#
    Integer12 = INT(name='Integer12', mode=MODE_TYPE)
    Integer12._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=4095)], ev=None, er=[])
    
    #-----< Integer16 >-----#
    Integer16 = INT(name='Integer16', mode=MODE_TYPE)
    Integer16._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< Integer32 >-----#
    Integer32 = INT(name='Integer32', mode=MODE_TYPE)
    Integer32._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=4294967295)], ev=None, er=[])
    
    #-----< Signed16 >-----#
    Signed16 = INT(name='Signed16', mode=MODE_TYPE)
    Signed16._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-32768, ub=32767)], ev=None, er=[])
    
    #-----< ShareID >-----#
    ShareID = INT(name='ShareID', mode=MODE_TYPE, typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer32')))
    
    #-----< WindowID >-----#
    WindowID = INT(name='WindowID', mode=MODE_TYPE, typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer32')))
    
    #-----< T50String >-----#
    T50String = OCT_STR(name='T50String', mode=MODE_TYPE)
    T50String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< ASString >-----#
    ASString = OCT_STR(name='ASString', mode=MODE_TYPE)
    ASString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< ExtraTextFlags >-----#
    ExtraTextFlags = BIT_STR(name='ExtraTextFlags', mode=MODE_TYPE)
    ExtraTextFlags._cont = ASN1Dict([('opaqueRectangle', 1), ('clipToRectangle', 2), ('deltaXPresent', 15)])
    
    #-----< FontAttributeFlags >-----#
    FontAttributeFlags = BIT_STR(name='FontAttributeFlags', mode=MODE_TYPE)
    FontAttributeFlags._cont = ASN1Dict([('fixedPitch', 0), ('fixedSize', 1)])
    
    #-----< KeyboardFlags >-----#
    KeyboardFlags = BIT_STR(name='KeyboardFlags', mode=MODE_TYPE)
    KeyboardFlags._cont = ASN1Dict([('right', 0), ('quiet', 12), ('down', 14), ('release', 15)])
    
    #-----< PointingDeviceFlags >-----#
    PointingDeviceFlags = BIT_STR(name='PointingDeviceFlags', mode=MODE_TYPE)
    PointingDeviceFlags._cont = ASN1Dict([('move', 11), ('button1', 12), ('button2', 13), ('button3', 14), ('down', 15)])
    
    #-----< TextAttributeFlags >-----#
    TextAttributeFlags = BIT_STR(name='TextAttributeFlags', mode=MODE_TYPE)
    TextAttributeFlags._cont = ASN1Dict([('italic', 2), ('underline', 3), ('strikeout', 4), ('baselineStart', 8)])
    
    #-----< WindowAttributeFlags >-----#
    WindowAttributeFlags = BIT_STR(name='WindowAttributeFlags', mode=MODE_TYPE)
    WindowAttributeFlags._cont = ASN1Dict([('minimized', 0), ('taggable', 1), ('hosted', 2), ('shadow', 3), ('local', 4), ('topmost', 5), ('windowManagerMinimized', 16), ('windowManagerInvisible', 17)])
    
    #-----< ActivateWindowRequest >-----#
    ActivateWindowRequest = SEQ(name='ActivateWindowRequest', mode=MODE_TYPE)
    _ActivateWindowRequest_activationWindow = INT(name='activationWindow', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'WindowID')))
    _ActivateWindowRequest_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ActivateWindowRequest_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _ActivateWindowRequest_nonStandardParameters._cont = __ActivateWindowRequest_nonStandardParameters__item_
    ActivateWindowRequest._cont = ASN1Dict([
        ('activationWindow', _ActivateWindowRequest_activationWindow),
        ('nonStandardParameters', _ActivateWindowRequest_nonStandardParameters),
        ])
    ActivateWindowRequest._ext = []
    
    #-----< ActivationHelpKeyRequest >-----#
    ActivationHelpKeyRequest = SEQ(name='ActivationHelpKeyRequest', mode=MODE_TYPE)
    _ActivationHelpKeyRequest_activationWindow = INT(name='activationWindow', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'WindowID')))
    _ActivationHelpKeyRequest_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ActivationHelpKeyRequest_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _ActivationHelpKeyRequest_nonStandardParameters._cont = __ActivationHelpKeyRequest_nonStandardParameters__item_
    ActivationHelpKeyRequest._cont = ASN1Dict([
        ('activationWindow', _ActivationHelpKeyRequest_activationWindow),
        ('nonStandardParameters', _ActivationHelpKeyRequest_nonStandardParameters),
        ])
    ActivationHelpKeyRequest._ext = []
    
    #-----< ActivationHelpIndexKeyRequest >-----#
    ActivationHelpIndexKeyRequest = SEQ(name='ActivationHelpIndexKeyRequest', mode=MODE_TYPE)
    _ActivationHelpIndexKeyRequest_activationWindow = INT(name='activationWindow', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'WindowID')))
    _ActivationHelpIndexKeyRequest_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ActivationHelpIndexKeyRequest_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _ActivationHelpIndexKeyRequest_nonStandardParameters._cont = __ActivationHelpIndexKeyRequest_nonStandardParameters__item_
    ActivationHelpIndexKeyRequest._cont = ASN1Dict([
        ('activationWindow', _ActivationHelpIndexKeyRequest_activationWindow),
        ('nonStandardParameters', _ActivationHelpIndexKeyRequest_nonStandardParameters),
        ])
    ActivationHelpIndexKeyRequest._ext = []
    
    #-----< ActivationHelpExtendedKeyRequest >-----#
    ActivationHelpExtendedKeyRequest = SEQ(name='ActivationHelpExtendedKeyRequest', mode=MODE_TYPE)
    _ActivationHelpExtendedKeyRequest_activationWindow = INT(name='activationWindow', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'WindowID')))
    _ActivationHelpExtendedKeyRequest_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ActivationHelpExtendedKeyRequest_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _ActivationHelpExtendedKeyRequest_nonStandardParameters._cont = __ActivationHelpExtendedKeyRequest_nonStandardParameters__item_
    ActivationHelpExtendedKeyRequest._cont = ASN1Dict([
        ('activationWindow', _ActivationHelpExtendedKeyRequest_activationWindow),
        ('nonStandardParameters', _ActivationHelpExtendedKeyRequest_nonStandardParameters),
        ])
    ActivationHelpExtendedKeyRequest._ext = []
    
    #-----< BackgroundMixMode >-----#
    BackgroundMixMode = CHOICE(name='BackgroundMixMode', mode=MODE_TYPE)
    _BackgroundMixMode_transparent = NULL(name='transparent', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _BackgroundMixMode_opaque = NULL(name='opaque', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _BackgroundMixMode_nonStandardBackgroundMixMode = SEQ(name='nonStandardBackgroundMixMode', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    BackgroundMixMode._cont = ASN1Dict([
        ('transparent', _BackgroundMixMode_transparent),
        ('opaque', _BackgroundMixMode_opaque),
        ('nonStandardBackgroundMixMode', _BackgroundMixMode_nonStandardBackgroundMixMode),
        ])
    BackgroundMixMode._ext = []
    
    #-----< BitmapData >-----#
    BitmapData = CHOICE(name='BitmapData', mode=MODE_TYPE)
    _BitmapData_uncompressedBitmapData = OCT_STR(name='uncompressedBitmapData', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _BitmapData_compressedBitmapData = SEQ(name='compressedBitmapData', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'CompressedBitmapData')))
    _BitmapData_nonStandardBitmapData = SEQ(name='nonStandardBitmapData', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    BitmapData._cont = ASN1Dict([
        ('uncompressedBitmapData', _BitmapData_uncompressedBitmapData),
        ('compressedBitmapData', _BitmapData_compressedBitmapData),
        ('nonStandardBitmapData', _BitmapData_nonStandardBitmapData),
        ])
    BitmapData._ext = []
    
    #-----< Brush >-----#
    Brush = SEQ(name='Brush', mode=MODE_TYPE)
    _Brush_originX = INT(name='originX', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer8')), opt=True)
    _Brush_originY = INT(name='originY', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer8')), opt=True)
    _Brush_style = CHOICE(name='style', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'BrushStyle')), opt=True)
    _Brush_hatch = CHOICE(name='hatch', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'BrushHatch')), opt=True)
    _Brush_pattern = OCT_STR(name='pattern', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Brush_pattern._const_sz = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    _Brush_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __Brush_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _Brush_nonStandardParameters._cont = __Brush_nonStandardParameters__item_
    Brush._cont = ASN1Dict([
        ('originX', _Brush_originX),
        ('originY', _Brush_originY),
        ('style', _Brush_style),
        ('hatch', _Brush_hatch),
        ('pattern', _Brush_pattern),
        ('nonStandardParameters', _Brush_nonStandardParameters),
        ])
    Brush._ext = []
    
    #-----< BrushHatch >-----#
    BrushHatch = CHOICE(name='BrushHatch', mode=MODE_TYPE)
    _BrushHatch_style = CHOICE(name='style', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'HatchStyle')))
    _BrushHatch_patternZero = INT(name='patternZero', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer8')))
    _BrushHatch_nonStandardBrushHatch = SEQ(name='nonStandardBrushHatch', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    BrushHatch._cont = ASN1Dict([
        ('style', _BrushHatch_style),
        ('patternZero', _BrushHatch_patternZero),
        ('nonStandardBrushHatch', _BrushHatch_nonStandardBrushHatch),
        ])
    BrushHatch._ext = []
    
    #-----< BrushStyle >-----#
    BrushStyle = CHOICE(name='BrushStyle', mode=MODE_TYPE)
    _BrushStyle_solid = NULL(name='solid', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _BrushStyle_null = NULL(name='null', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _BrushStyle_hatched = NULL(name='hatched', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _BrushStyle_pattern = NULL(name='pattern', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _BrushStyle_nonStandardBrushStyle = SEQ(name='nonStandardBrushStyle', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    BrushStyle._cont = ASN1Dict([
        ('solid', _BrushStyle_solid),
        ('null', _BrushStyle_null),
        ('hatched', _BrushStyle_hatched),
        ('pattern', _BrushStyle_pattern),
        ('nonStandardBrushStyle', _BrushStyle_nonStandardBrushStyle),
        ])
    BrushStyle._ext = []
    
    #-----< CloseWindowRequest >-----#
    CloseWindowRequest = SEQ(name='CloseWindowRequest', mode=MODE_TYPE)
    _CloseWindowRequest_activationWindow = INT(name='activationWindow', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'WindowID')))
    _CloseWindowRequest_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __CloseWindowRequest_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _CloseWindowRequest_nonStandardParameters._cont = __CloseWindowRequest_nonStandardParameters__item_
    CloseWindowRequest._cont = ASN1Dict([
        ('activationWindow', _CloseWindowRequest_activationWindow),
        ('nonStandardParameters', _CloseWindowRequest_nonStandardParameters),
        ])
    CloseWindowRequest._ext = []
    
    #-----< Color >-----#
    Color = SEQ(name='Color', mode=MODE_TYPE)
    _Color_c1 = INT(name='c1', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer8')))
    _Color_c2 = INT(name='c2', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer8')))
    _Color_c3 = INT(name='c3', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer8')))
    Color._cont = ASN1Dict([
        ('c1', _Color_c1),
        ('c2', _Color_c2),
        ('c3', _Color_c3),
        ])
    Color._ext = None
    
    #-----< ColorAccuracyEnhancementRGB >-----#
    ColorAccuracyEnhancementRGB = CHOICE(name='ColorAccuracyEnhancementRGB', mode=MODE_TYPE)
    _ColorAccuracyEnhancementRGB_predefinedRGBSpace = CHOICE(name='predefinedRGBSpace', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __ColorAccuracyEnhancementRGB_predefinedRGBSpace_nonStandardRGBSpace = SEQ(name='nonStandardRGBSpace', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _ColorAccuracyEnhancementRGB_predefinedRGBSpace._cont = ASN1Dict([
        ('nonStandardRGBSpace', __ColorAccuracyEnhancementRGB_predefinedRGBSpace_nonStandardRGBSpace),
        ])
    _ColorAccuracyEnhancementRGB_predefinedRGBSpace._ext = []
    _ColorAccuracyEnhancementRGB_generalRGBParameters = SEQ(name='generalRGBParameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __ColorAccuracyEnhancementRGB_generalRGBParameters_gamma = REAL(name='gamma', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('_IMPL_', 'REAL')), opt=True)
    __ColorAccuracyEnhancementRGB_generalRGBParameters_gamma._const_val = ASN1Set(rv=[], rr=[ASN1RangeReal(lb=(0, 10, 0), ub=(1, None, None), lb_incl=True, ub_incl=True)], ev=None, er=[])
    __ColorAccuracyEnhancementRGB_generalRGBParameters_colorTemperature = INT(name='colorTemperature', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ColorAccuracyEnhancementRGB_generalRGBParameters_colorTemperature._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    __ColorAccuracyEnhancementRGB_generalRGBParameters_primaries = SEQ(name='primaries', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    ___ColorAccuracyEnhancementRGB_generalRGBParameters_primaries_red = SEQ(name='red', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ColorCIExyChromaticity')))
    ___ColorAccuracyEnhancementRGB_generalRGBParameters_primaries_green = SEQ(name='green', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ColorCIExyChromaticity')))
    ___ColorAccuracyEnhancementRGB_generalRGBParameters_primaries_blue = SEQ(name='blue', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ColorCIExyChromaticity')))
    __ColorAccuracyEnhancementRGB_generalRGBParameters_primaries._cont = ASN1Dict([
        ('red', ___ColorAccuracyEnhancementRGB_generalRGBParameters_primaries_red),
        ('green', ___ColorAccuracyEnhancementRGB_generalRGBParameters_primaries_green),
        ('blue', ___ColorAccuracyEnhancementRGB_generalRGBParameters_primaries_blue),
        ])
    __ColorAccuracyEnhancementRGB_generalRGBParameters_primaries._ext = None
    _ColorAccuracyEnhancementRGB_generalRGBParameters._cont = ASN1Dict([
        ('gamma', __ColorAccuracyEnhancementRGB_generalRGBParameters_gamma),
        ('colorTemperature', __ColorAccuracyEnhancementRGB_generalRGBParameters_colorTemperature),
        ('primaries', __ColorAccuracyEnhancementRGB_generalRGBParameters_primaries),
        ])
    _ColorAccuracyEnhancementRGB_generalRGBParameters._ext = []
    ColorAccuracyEnhancementRGB._cont = ASN1Dict([
        ('predefinedRGBSpace', _ColorAccuracyEnhancementRGB_predefinedRGBSpace),
        ('generalRGBParameters', _ColorAccuracyEnhancementRGB_generalRGBParameters),
        ])
    ColorAccuracyEnhancementRGB._ext = []
    
    #-----< ColorCIExyChromaticity >-----#
    ColorCIExyChromaticity = SEQ(name='ColorCIExyChromaticity', mode=MODE_TYPE)
    _ColorCIExyChromaticity_x = REAL(name='x', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('_IMPL_', 'REAL')))
    _ColorCIExyChromaticity_x._const_val = ASN1Set(rv=[], rr=[ASN1RangeReal(lb=(0, 10, 0), ub=(1, 10, 0), lb_incl=True, ub_incl=True)], ev=None, er=[])
    _ColorCIExyChromaticity_y = REAL(name='y', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('_IMPL_', 'REAL')))
    _ColorCIExyChromaticity_y._const_val = ASN1Set(rv=[], rr=[ASN1RangeReal(lb=(0, 10, 0), ub=(1, 10, 0), lb_incl=True, ub_incl=True)], ev=None, er=[])
    ColorCIExyChromaticity._cont = ASN1Dict([
        ('x', _ColorCIExyChromaticity_x),
        ('y', _ColorCIExyChromaticity_y),
        ])
    ColorCIExyChromaticity._ext = None
    
    #-----< ColorPalette >-----#
    ColorPalette = CHOICE(name='ColorPalette', mode=MODE_TYPE)
    _ColorPalette_paletteRGB = SEQ(name='paletteRGB', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __ColorPalette_paletteRGB_palette = SEQ_OF(name='palette', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___ColorPalette_paletteRGB_palette__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ColorRGB')))
    __ColorPalette_paletteRGB_palette._cont = ___ColorPalette_paletteRGB_palette__item_
    __ColorPalette_paletteRGB_palette._const_sz = ASN1Set(rv=[16, 256], rr=[], ev=None, er=[])
    __ColorPalette_paletteRGB_enhancement = CHOICE(name='enhancement', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ColorAccuracyEnhancementRGB')), opt=True)
    _ColorPalette_paletteRGB._cont = ASN1Dict([
        ('palette', __ColorPalette_paletteRGB_palette),
        ('enhancement', __ColorPalette_paletteRGB_enhancement),
        ])
    _ColorPalette_paletteRGB._ext = []
    _ColorPalette_nonStandardPalette = SEQ(name='nonStandardPalette', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    ColorPalette._cont = ASN1Dict([
        ('paletteRGB', _ColorPalette_paletteRGB),
        ('nonStandardPalette', _ColorPalette_nonStandardPalette),
        ])
    ColorPalette._ext = []
    
    #-----< ColorPointerAttribute >-----#
    ColorPointerAttribute = SEQ(name='ColorPointerAttribute', mode=MODE_TYPE)
    _ColorPointerAttribute_cacheIndex = INT(name='cacheIndex', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _ColorPointerAttribute_hotSpot = SEQ(name='hotSpot', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Point16')))
    _ColorPointerAttribute_width = INT(name='width', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _ColorPointerAttribute_height = INT(name='height', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _ColorPointerAttribute_colorPointerData = OCT_STR(name='colorPointerData', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ColorPointerAttribute_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ColorPointerAttribute_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _ColorPointerAttribute_nonStandardParameters._cont = __ColorPointerAttribute_nonStandardParameters__item_
    ColorPointerAttribute._cont = ASN1Dict([
        ('cacheIndex', _ColorPointerAttribute_cacheIndex),
        ('hotSpot', _ColorPointerAttribute_hotSpot),
        ('width', _ColorPointerAttribute_width),
        ('height', _ColorPointerAttribute_height),
        ('colorPointerData', _ColorPointerAttribute_colorPointerData),
        ('nonStandardParameters', _ColorPointerAttribute_nonStandardParameters),
        ])
    ColorPointerAttribute._ext = []
    
    #-----< ColorRGB >-----#
    ColorRGB = SEQ(name='ColorRGB', mode=MODE_TYPE)
    _ColorRGB_red = INT(name='red', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer8')))
    _ColorRGB_green = INT(name='green', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer8')))
    _ColorRGB_blue = INT(name='blue', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer8')))
    ColorRGB._cont = ASN1Dict([
        ('red', _ColorRGB_red),
        ('green', _ColorRGB_green),
        ('blue', _ColorRGB_blue),
        ])
    ColorRGB._ext = None
    
    #-----< ColorSpaceSpecifier >-----#
    ColorSpaceSpecifier = CHOICE(name='ColorSpaceSpecifier', mode=MODE_TYPE)
    _ColorSpaceSpecifier_colorSpaceDefault = NULL(name='colorSpaceDefault', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ColorSpaceSpecifier_colorSpaceRGB = CHOICE(name='colorSpaceRGB', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ColorAccuracyEnhancementRGB')))
    _ColorSpaceSpecifier_nonStandardColorSpace = SEQ(name='nonStandardColorSpace', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    ColorSpaceSpecifier._cont = ASN1Dict([
        ('colorSpaceDefault', _ColorSpaceSpecifier_colorSpaceDefault),
        ('colorSpaceRGB', _ColorSpaceSpecifier_colorSpaceRGB),
        ('nonStandardColorSpace', _ColorSpaceSpecifier_nonStandardColorSpace),
        ])
    ColorSpaceSpecifier._ext = []
    
    #-----< CompressedBitmapData >-----#
    CompressedBitmapData = SEQ(name='CompressedBitmapData', mode=MODE_TYPE)
    _CompressedBitmapData_mainBodySize = INT(name='mainBodySize', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _CompressedBitmapData_rowSize = INT(name='rowSize', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _CompressedBitmapData_uncompressedSize = INT(name='uncompressedSize', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _CompressedBitmapData_compressedBitmap = OCT_STR(name='compressedBitmap', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CompressedBitmapData_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __CompressedBitmapData_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _CompressedBitmapData_nonStandardParameters._cont = __CompressedBitmapData_nonStandardParameters__item_
    CompressedBitmapData._cont = ASN1Dict([
        ('mainBodySize', _CompressedBitmapData_mainBodySize),
        ('rowSize', _CompressedBitmapData_rowSize),
        ('uncompressedSize', _CompressedBitmapData_uncompressedSize),
        ('compressedBitmap', _CompressedBitmapData_compressedBitmap),
        ('nonStandardParameters', _CompressedBitmapData_nonStandardParameters),
        ])
    CompressedBitmapData._ext = []
    
    #-----< ConfirmDetachResponse >-----#
    ConfirmDetachResponse = SEQ(name='ConfirmDetachResponse', mode=MODE_TYPE)
    _ConfirmDetachResponse_passControlFlag = BOOL(name='passControlFlag', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConfirmDetachResponse_sendingReference = INT(name='sendingReference', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _ConfirmDetachResponse_originatorReference = INT(name='originatorReference', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _ConfirmDetachResponse_originatorID = INT(name='originatorID', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _ConfirmDetachResponse_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ConfirmDetachResponse_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _ConfirmDetachResponse_nonStandardParameters._cont = __ConfirmDetachResponse_nonStandardParameters__item_
    ConfirmDetachResponse._cont = ASN1Dict([
        ('passControlFlag', _ConfirmDetachResponse_passControlFlag),
        ('sendingReference', _ConfirmDetachResponse_sendingReference),
        ('originatorReference', _ConfirmDetachResponse_originatorReference),
        ('originatorID', _ConfirmDetachResponse_originatorID),
        ('nonStandardParameters', _ConfirmDetachResponse_nonStandardParameters),
        ])
    ConfirmDetachResponse._ext = []
    
    #-----< ConfirmRemoteShare >-----#
    ConfirmRemoteShare = SEQ(name='ConfirmRemoteShare', mode=MODE_TYPE)
    _ConfirmRemoteShare_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ConfirmRemoteShare_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _ConfirmRemoteShare_nonStandardParameters._cont = __ConfirmRemoteShare_nonStandardParameters__item_
    ConfirmRemoteShare._cont = ASN1Dict([
        ('nonStandardParameters', _ConfirmRemoteShare_nonStandardParameters),
        ])
    ConfirmRemoteShare._ext = []
    
    #-----< ConfirmTakeResponse >-----#
    ConfirmTakeResponse = SEQ(name='ConfirmTakeResponse', mode=MODE_TYPE)
    _ConfirmTakeResponse_passControlFlag = BOOL(name='passControlFlag', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConfirmTakeResponse_sendingReference = INT(name='sendingReference', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _ConfirmTakeResponse_originatorReference = INT(name='originatorReference', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _ConfirmTakeResponse_originatorID = INT(name='originatorID', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _ConfirmTakeResponse_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ConfirmTakeResponse_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _ConfirmTakeResponse_nonStandardParameters._cont = __ConfirmTakeResponse_nonStandardParameters__item_
    ConfirmTakeResponse._cont = ASN1Dict([
        ('passControlFlag', _ConfirmTakeResponse_passControlFlag),
        ('sendingReference', _ConfirmTakeResponse_sendingReference),
        ('originatorReference', _ConfirmTakeResponse_originatorReference),
        ('originatorID', _ConfirmTakeResponse_originatorID),
        ('nonStandardParameters', _ConfirmTakeResponse_nonStandardParameters),
        ])
    ConfirmTakeResponse._ext = []
    
    #-----< ControlPriority >-----#
    ControlPriority = CHOICE(name='ControlPriority', mode=MODE_TYPE)
    _ControlPriority_always = NULL(name='always', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ControlPriority_never = NULL(name='never', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ControlPriority_confirm = NULL(name='confirm', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ControlPriority_nonStandardControlPriority = SEQ(name='nonStandardControlPriority', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    ControlPriority._cont = ASN1Dict([
        ('always', _ControlPriority_always),
        ('never', _ControlPriority_never),
        ('confirm', _ControlPriority_confirm),
        ('nonStandardControlPriority', _ControlPriority_nonStandardControlPriority),
        ])
    ControlPriority._ext = []
    
    #-----< Cooperate >-----#
    Cooperate = SEQ(name='Cooperate', mode=MODE_TYPE)
    _Cooperate_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __Cooperate_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _Cooperate_nonStandardParameters._cont = __Cooperate_nonStandardParameters__item_
    Cooperate._cont = ASN1Dict([
        ('nonStandardParameters', _Cooperate_nonStandardParameters),
        ])
    Cooperate._ext = []
    
    #-----< Coordinate >-----#
    Coordinate = CHOICE(name='Coordinate', mode=MODE_TYPE)
    _Coordinate_absolute = INT(name='absolute', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate16')))
    _Coordinate_delta = INT(name='delta', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate8')))
    _Coordinate_nonStandardCoordinate = SEQ(name='nonStandardCoordinate', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    Coordinate._cont = ASN1Dict([
        ('absolute', _Coordinate_absolute),
        ('delta', _Coordinate_delta),
        ('nonStandardCoordinate', _Coordinate_nonStandardCoordinate),
        ])
    Coordinate._ext = []
    
    #-----< DesktopSaveAction >-----#
    DesktopSaveAction = CHOICE(name='DesktopSaveAction', mode=MODE_TYPE)
    _DesktopSaveAction_desktopSave = NULL(name='desktopSave', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DesktopSaveAction_desktopRestore = NULL(name='desktopRestore', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DesktopSaveAction_nonStandardDesktopSaveAction = SEQ(name='nonStandardDesktopSaveAction', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    DesktopSaveAction._cont = ASN1Dict([
        ('desktopSave', _DesktopSaveAction_desktopSave),
        ('desktopRestore', _DesktopSaveAction_desktopRestore),
        ('nonStandardDesktopSaveAction', _DesktopSaveAction_nonStandardDesktopSaveAction),
        ])
    DesktopSaveAction._ext = []
    
    #-----< DenyDetachResponse >-----#
    DenyDetachResponse = SEQ(name='DenyDetachResponse', mode=MODE_TYPE)
    _DenyDetachResponse_passControlFlag = BOOL(name='passControlFlag', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DenyDetachResponse_sendingReference = INT(name='sendingReference', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _DenyDetachResponse_originatorReference = INT(name='originatorReference', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _DenyDetachResponse_originatorID = INT(name='originatorID', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _DenyDetachResponse_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __DenyDetachResponse_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _DenyDetachResponse_nonStandardParameters._cont = __DenyDetachResponse_nonStandardParameters__item_
    DenyDetachResponse._cont = ASN1Dict([
        ('passControlFlag', _DenyDetachResponse_passControlFlag),
        ('sendingReference', _DenyDetachResponse_sendingReference),
        ('originatorReference', _DenyDetachResponse_originatorReference),
        ('originatorID', _DenyDetachResponse_originatorID),
        ('nonStandardParameters', _DenyDetachResponse_nonStandardParameters),
        ])
    DenyDetachResponse._ext = []
    
    #-----< DenyPassResponse >-----#
    DenyPassResponse = SEQ(name='DenyPassResponse', mode=MODE_TYPE)
    _DenyPassResponse_passControlFlag = BOOL(name='passControlFlag', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DenyPassResponse_sendingReference = INT(name='sendingReference', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _DenyPassResponse_originatorReference = INT(name='originatorReference', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _DenyPassResponse_originatorID = INT(name='originatorID', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _DenyPassResponse_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __DenyPassResponse_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _DenyPassResponse_nonStandardParameters._cont = __DenyPassResponse_nonStandardParameters__item_
    DenyPassResponse._cont = ASN1Dict([
        ('passControlFlag', _DenyPassResponse_passControlFlag),
        ('sendingReference', _DenyPassResponse_sendingReference),
        ('originatorReference', _DenyPassResponse_originatorReference),
        ('originatorID', _DenyPassResponse_originatorID),
        ('nonStandardParameters', _DenyPassResponse_nonStandardParameters),
        ])
    DenyPassResponse._ext = []
    
    #-----< DenyTakeResponse >-----#
    DenyTakeResponse = SEQ(name='DenyTakeResponse', mode=MODE_TYPE)
    _DenyTakeResponse_passControlFlag = BOOL(name='passControlFlag', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DenyTakeResponse_sendingReference = INT(name='sendingReference', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _DenyTakeResponse_originatorReference = INT(name='originatorReference', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _DenyTakeResponse_originatorID = INT(name='originatorID', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _DenyTakeResponse_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __DenyTakeResponse_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _DenyTakeResponse_nonStandardParameters._cont = __DenyTakeResponse_nonStandardParameters__item_
    DenyTakeResponse._cont = ASN1Dict([
        ('passControlFlag', _DenyTakeResponse_passControlFlag),
        ('sendingReference', _DenyTakeResponse_sendingReference),
        ('originatorReference', _DenyTakeResponse_originatorReference),
        ('originatorID', _DenyTakeResponse_originatorID),
        ('nonStandardParameters', _DenyTakeResponse_nonStandardParameters),
        ])
    DenyTakeResponse._ext = []
    
    #-----< DenyRemoteDetachResponse >-----#
    DenyRemoteDetachResponse = SEQ(name='DenyRemoteDetachResponse', mode=MODE_TYPE)
    _DenyRemoteDetachResponse_passControlFlag = BOOL(name='passControlFlag', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DenyRemoteDetachResponse_sendingReference = INT(name='sendingReference', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _DenyRemoteDetachResponse_originatorReference = INT(name='originatorReference', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _DenyRemoteDetachResponse_originatorID = INT(name='originatorID', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _DenyRemoteDetachResponse_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __DenyRemoteDetachResponse_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _DenyRemoteDetachResponse_nonStandardParameters._cont = __DenyRemoteDetachResponse_nonStandardParameters__item_
    DenyRemoteDetachResponse._cont = ASN1Dict([
        ('passControlFlag', _DenyRemoteDetachResponse_passControlFlag),
        ('sendingReference', _DenyRemoteDetachResponse_sendingReference),
        ('originatorReference', _DenyRemoteDetachResponse_originatorReference),
        ('originatorID', _DenyRemoteDetachResponse_originatorID),
        ('nonStandardParameters', _DenyRemoteDetachResponse_nonStandardParameters),
        ])
    DenyRemoteDetachResponse._ext = []
    
    #-----< DenyRemoteShare >-----#
    DenyRemoteShare = CHOICE(name='DenyRemoteShare', mode=MODE_TYPE)
    _DenyRemoteShare_remoteShareDenial = CHOICE(name='remoteShareDenial', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'RemoteShareDenial')))
    _DenyRemoteShare_nonStandardDenial = SEQ(name='nonStandardDenial', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    DenyRemoteShare._cont = ASN1Dict([
        ('remoteShareDenial', _DenyRemoteShare_remoteShareDenial),
        ('nonStandardDenial', _DenyRemoteShare_nonStandardDenial),
        ])
    DenyRemoteShare._ext = []
    
    #-----< Detach >-----#
    Detach = SEQ(name='Detach', mode=MODE_TYPE)
    _Detach_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __Detach_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _Detach_nonStandardParameters._cont = __Detach_nonStandardParameters__item_
    Detach._cont = ASN1Dict([
        ('nonStandardParameters', _Detach_nonStandardParameters),
        ])
    Detach._ext = []
    
    #-----< DetachRequest >-----#
    DetachRequest = SEQ(name='DetachRequest', mode=MODE_TYPE)
    _DetachRequest_passControlFlag = BOOL(name='passControlFlag', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DetachRequest_sendingReference = INT(name='sendingReference', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _DetachRequest_originatorID = INT(name='originatorID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _DetachRequest_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __DetachRequest_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _DetachRequest_nonStandardParameters._cont = __DetachRequest_nonStandardParameters__item_
    DetachRequest._cont = ASN1Dict([
        ('passControlFlag', _DetachRequest_passControlFlag),
        ('sendingReference', _DetachRequest_sendingReference),
        ('originatorID', _DetachRequest_originatorID),
        ('nonStandardParameters', _DetachRequest_nonStandardParameters),
        ])
    DetachRequest._ext = []
    
    #-----< FontAttribute >-----#
    FontAttribute = SEQ(name='FontAttribute', mode=MODE_TYPE)
    _FontAttribute_faceName = OCT_STR(name='faceName', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'T50String')))
    _FontAttribute_fontFlags = BIT_STR(name='fontFlags', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'FontAttributeFlags')))
    _FontAttribute_averageWidth = INT(name='averageWidth', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _FontAttribute_height = INT(name='height', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _FontAttribute_aspectX = INT(name='aspectX', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _FontAttribute_aspectY = INT(name='aspectY', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _FontAttribute_signature1 = INT(name='signature1', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer8')))
    _FontAttribute_signature2 = INT(name='signature2', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer8')))
    _FontAttribute_signature3 = INT(name='signature3', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _FontAttribute_codePage = CHOICE(name='codePage', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'FontCodePage')))
    _FontAttribute_ascent = INT(name='ascent', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _FontAttribute_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __FontAttribute_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _FontAttribute_nonStandardParameters._cont = __FontAttribute_nonStandardParameters__item_
    FontAttribute._cont = ASN1Dict([
        ('faceName', _FontAttribute_faceName),
        ('fontFlags', _FontAttribute_fontFlags),
        ('averageWidth', _FontAttribute_averageWidth),
        ('height', _FontAttribute_height),
        ('aspectX', _FontAttribute_aspectX),
        ('aspectY', _FontAttribute_aspectY),
        ('signature1', _FontAttribute_signature1),
        ('signature2', _FontAttribute_signature2),
        ('signature3', _FontAttribute_signature3),
        ('codePage', _FontAttribute_codePage),
        ('ascent', _FontAttribute_ascent),
        ('nonStandardParameters', _FontAttribute_nonStandardParameters),
        ])
    FontAttribute._ext = []
    
    #-----< FontCodePage >-----#
    FontCodePage = CHOICE(name='FontCodePage', mode=MODE_TYPE)
    _FontCodePage_allCodePoints = NULL(name='allCodePoints', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _FontCodePage_coreCodePoints = NULL(name='coreCodePoints', mode=MODE_TYPE, tag=(255, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _FontCodePage_nonStandardFontCodePage = SEQ(name='nonStandardFontCodePage', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    FontCodePage._cont = ASN1Dict([
        ('allCodePoints', _FontCodePage_allCodePoints),
        ('coreCodePoints', _FontCodePage_coreCodePoints),
        ('nonStandardFontCodePage', _FontCodePage_nonStandardFontCodePage),
        ])
    FontCodePage._ext = []
    
    #-----< GeneralCompressionSpecifier >-----#
    GeneralCompressionSpecifier = CHOICE(name='GeneralCompressionSpecifier', mode=MODE_TYPE)
    _GeneralCompressionSpecifier_v42bisCompression = SEQ(name='v42bisCompression', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'V42bisCompression')))
    _GeneralCompressionSpecifier_nonStandardCompression = SEQ(name='nonStandardCompression', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    GeneralCompressionSpecifier._cont = ASN1Dict([
        ('v42bisCompression', _GeneralCompressionSpecifier_v42bisCompression),
        ('nonStandardCompression', _GeneralCompressionSpecifier_nonStandardCompression),
        ])
    GeneralCompressionSpecifier._ext = []
    
    #-----< GrantControl >-----#
    GrantControl = SEQ(name='GrantControl', mode=MODE_TYPE)
    _GrantControl_grantID = INT(name='grantID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _GrantControl_controlID = INT(name='controlID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _GrantControl_controlID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=2147483647)], ev=None, er=[])
    _GrantControl_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __GrantControl_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _GrantControl_nonStandardParameters._cont = __GrantControl_nonStandardParameters__item_
    GrantControl._cont = ASN1Dict([
        ('grantID', _GrantControl_grantID),
        ('controlID', _GrantControl_controlID),
        ('nonStandardParameters', _GrantControl_nonStandardParameters),
        ])
    GrantControl._ext = []
    
    #-----< HatchStyle >-----#
    HatchStyle = CHOICE(name='HatchStyle', mode=MODE_TYPE)
    _HatchStyle_horizontal = NULL(name='horizontal', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _HatchStyle_vertical = NULL(name='vertical', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _HatchStyle_forward = NULL(name='forward', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _HatchStyle_backward = NULL(name='backward', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _HatchStyle_cross = NULL(name='cross', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _HatchStyle_diagonal = NULL(name='diagonal', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _HatchStyle_nonStandardHatchStyle = SEQ(name='nonStandardHatchStyle', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    HatchStyle._cont = ASN1Dict([
        ('horizontal', _HatchStyle_horizontal),
        ('vertical', _HatchStyle_vertical),
        ('forward', _HatchStyle_forward),
        ('backward', _HatchStyle_backward),
        ('cross', _HatchStyle_cross),
        ('diagonal', _HatchStyle_diagonal),
        ('nonStandardHatchStyle', _HatchStyle_nonStandardHatchStyle),
        ])
    HatchStyle._ext = []
    
    #-----< HostedWindowActiveIndication >-----#
    HostedWindowActiveIndication = SEQ(name='HostedWindowActiveIndication', mode=MODE_TYPE)
    _HostedWindowActiveIndication_activationID = INT(name='activationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _HostedWindowActiveIndication_activationWindow = INT(name='activationWindow', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'WindowID')))
    _HostedWindowActiveIndication_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __HostedWindowActiveIndication_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _HostedWindowActiveIndication_nonStandardParameters._cont = __HostedWindowActiveIndication_nonStandardParameters__item_
    HostedWindowActiveIndication._cont = ASN1Dict([
        ('activationID', _HostedWindowActiveIndication_activationID),
        ('activationWindow', _HostedWindowActiveIndication_activationWindow),
        ('nonStandardParameters', _HostedWindowActiveIndication_nonStandardParameters),
        ])
    HostedWindowActiveIndication._ext = []
    
    #-----< HostedWindowInvisibleIndication >-----#
    HostedWindowInvisibleIndication = SEQ(name='HostedWindowInvisibleIndication', mode=MODE_TYPE)
    _HostedWindowInvisibleIndication_activationID = INT(name='activationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _HostedWindowInvisibleIndication_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __HostedWindowInvisibleIndication_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _HostedWindowInvisibleIndication_nonStandardParameters._cont = __HostedWindowInvisibleIndication_nonStandardParameters__item_
    HostedWindowInvisibleIndication._cont = ASN1Dict([
        ('activationID', _HostedWindowInvisibleIndication_activationID),
        ('nonStandardParameters', _HostedWindowInvisibleIndication_nonStandardParameters),
        ])
    HostedWindowInvisibleIndication._ext = []
    
    #-----< LocalWindowActiveIndication >-----#
    LocalWindowActiveIndication = SEQ(name='LocalWindowActiveIndication', mode=MODE_TYPE)
    _LocalWindowActiveIndication_activationID = INT(name='activationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _LocalWindowActiveIndication_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __LocalWindowActiveIndication_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _LocalWindowActiveIndication_nonStandardParameters._cont = __LocalWindowActiveIndication_nonStandardParameters__item_
    LocalWindowActiveIndication._cont = ASN1Dict([
        ('activationID', _LocalWindowActiveIndication_activationID),
        ('nonStandardParameters', _LocalWindowActiveIndication_nonStandardParameters),
        ])
    LocalWindowActiveIndication._ext = []
    
    #-----< MonoPointerAttribute >-----#
    MonoPointerAttribute = SEQ(name='MonoPointerAttribute', mode=MODE_TYPE)
    _MonoPointerAttribute_hotSpot = SEQ(name='hotSpot', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Point16')))
    _MonoPointerAttribute_width = INT(name='width', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _MonoPointerAttribute_height = INT(name='height', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _MonoPointerAttribute_monoPointerData = OCT_STR(name='monoPointerData', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _MonoPointerAttribute_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __MonoPointerAttribute_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _MonoPointerAttribute_nonStandardParameters._cont = __MonoPointerAttribute_nonStandardParameters__item_
    MonoPointerAttribute._cont = ASN1Dict([
        ('hotSpot', _MonoPointerAttribute_hotSpot),
        ('width', _MonoPointerAttribute_width),
        ('height', _MonoPointerAttribute_height),
        ('monoPointerData', _MonoPointerAttribute_monoPointerData),
        ('nonStandardParameters', _MonoPointerAttribute_nonStandardParameters),
        ])
    MonoPointerAttribute._ext = []
    
    #-----< NotifyHostedApplications >-----#
    NotifyHostedApplications = SEQ(name='NotifyHostedApplications', mode=MODE_TYPE)
    _NotifyHostedApplications_numberApplications = INT(name='numberApplications', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _NotifyHostedApplications_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __NotifyHostedApplications_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _NotifyHostedApplications_nonStandardParameters._cont = __NotifyHostedApplications_nonStandardParameters__item_
    NotifyHostedApplications._cont = ASN1Dict([
        ('numberApplications', _NotifyHostedApplications_numberApplications),
        ('nonStandardParameters', _NotifyHostedApplications_nonStandardParameters),
        ])
    NotifyHostedApplications._ext = []
    
    #-----< PassControlRequest >-----#
    PassControlRequest = SEQ(name='PassControlRequest', mode=MODE_TYPE)
    _PassControlRequest_passControlFlag = BOOL(name='passControlFlag', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PassControlRequest_sendingReference = INT(name='sendingReference', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _PassControlRequest_originatorID = INT(name='originatorID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _PassControlRequest_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PassControlRequest_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _PassControlRequest_nonStandardParameters._cont = __PassControlRequest_nonStandardParameters__item_
    PassControlRequest._cont = ASN1Dict([
        ('passControlFlag', _PassControlRequest_passControlFlag),
        ('sendingReference', _PassControlRequest_sendingReference),
        ('originatorID', _PassControlRequest_originatorID),
        ('nonStandardParameters', _PassControlRequest_nonStandardParameters),
        ])
    PassControlRequest._ext = []
    
    #-----< Pen >-----#
    Pen = SEQ(name='Pen', mode=MODE_TYPE)
    _Pen_style = CHOICE(name='style', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'PenStyle')), opt=True)
    _Pen_width = INT(name='width', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer8')), opt=True)
    _Pen_width._const_val = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    _Pen_color = SEQ(name='color', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Color')), opt=True)
    _Pen_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __Pen_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _Pen_nonStandardParameters._cont = __Pen_nonStandardParameters__item_
    Pen._cont = ASN1Dict([
        ('style', _Pen_style),
        ('width', _Pen_width),
        ('color', _Pen_color),
        ('nonStandardParameters', _Pen_nonStandardParameters),
        ])
    Pen._ext = []
    
    #-----< PenStyle >-----#
    PenStyle = CHOICE(name='PenStyle', mode=MODE_TYPE)
    _PenStyle_solid = NULL(name='solid', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PenStyle_dashed = NULL(name='dashed', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PenStyle_dotted = NULL(name='dotted', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PenStyle_dash_dot = NULL(name='dash-dot', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PenStyle_dash_dot_dot = NULL(name='dash-dot-dot', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PenStyle_null = NULL(name='null', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PenStyle_nonStandardPenStyle = SEQ(name='nonStandardPenStyle', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    PenStyle._cont = ASN1Dict([
        ('solid', _PenStyle_solid),
        ('dashed', _PenStyle_dashed),
        ('dotted', _PenStyle_dotted),
        ('dash-dot', _PenStyle_dash_dot),
        ('dash-dot-dot', _PenStyle_dash_dot_dot),
        ('null', _PenStyle_null),
        ('nonStandardPenStyle', _PenStyle_nonStandardPenStyle),
        ])
    PenStyle._ext = []
    
    #-----< Point16 >-----#
    Point16 = SEQ(name='Point16', mode=MODE_TYPE)
    _Point16_x = INT(name='x', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate16')))
    _Point16_y = INT(name='y', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate16')))
    Point16._cont = ASN1Dict([
        ('x', _Point16_x),
        ('y', _Point16_y),
        ])
    Point16._ext = None
    
    #-----< PointerDeviceCaptureIndication >-----#
    PointerDeviceCaptureIndication = SEQ(name='PointerDeviceCaptureIndication', mode=MODE_TYPE)
    _PointerDeviceCaptureIndication_activationID = INT(name='activationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _PointerDeviceCaptureIndication_activationWindow = INT(name='activationWindow', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'WindowID')))
    _PointerDeviceCaptureIndication_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PointerDeviceCaptureIndication_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _PointerDeviceCaptureIndication_nonStandardParameters._cont = __PointerDeviceCaptureIndication_nonStandardParameters__item_
    PointerDeviceCaptureIndication._cont = ASN1Dict([
        ('activationID', _PointerDeviceCaptureIndication_activationID),
        ('activationWindow', _PointerDeviceCaptureIndication_activationWindow),
        ('nonStandardParameters', _PointerDeviceCaptureIndication_nonStandardParameters),
        ])
    PointerDeviceCaptureIndication._ext = []
    
    #-----< Rectangle16 >-----#
    Rectangle16 = SEQ(name='Rectangle16', mode=MODE_TYPE)
    _Rectangle16_left = INT(name='left', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate16')))
    _Rectangle16_top = INT(name='top', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate16')))
    _Rectangle16_right = INT(name='right', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate16')))
    _Rectangle16_bottom = INT(name='bottom', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate16')))
    Rectangle16._cont = ASN1Dict([
        ('left', _Rectangle16_left),
        ('top', _Rectangle16_top),
        ('right', _Rectangle16_right),
        ('bottom', _Rectangle16_bottom),
        ])
    Rectangle16._ext = None
    
    #-----< RemoteDetachRequest >-----#
    RemoteDetachRequest = SEQ(name='RemoteDetachRequest', mode=MODE_TYPE)
    _RemoteDetachRequest_passControlFlag = BOOL(name='passControlFlag', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RemoteDetachRequest_sendingReference = INT(name='sendingReference', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _RemoteDetachRequest_originatorID = INT(name='originatorID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _RemoteDetachRequest_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __RemoteDetachRequest_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _RemoteDetachRequest_nonStandardParameters._cont = __RemoteDetachRequest_nonStandardParameters__item_
    RemoteDetachRequest._cont = ASN1Dict([
        ('passControlFlag', _RemoteDetachRequest_passControlFlag),
        ('sendingReference', _RemoteDetachRequest_sendingReference),
        ('originatorID', _RemoteDetachRequest_originatorID),
        ('nonStandardParameters', _RemoteDetachRequest_nonStandardParameters),
        ])
    RemoteDetachRequest._ext = []
    
    #-----< RemoteShareDenial >-----#
    RemoteShareDenial = CHOICE(name='RemoteShareDenial', mode=MODE_TYPE)
    _RemoteShareDenial_incorrectPassword = NULL(name='incorrectPassword', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RemoteShareDenial_remoteShareNotEnabled = NULL(name='remoteShareNotEnabled', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RemoteShareDenial_remoteShareInOperationIncoming = NULL(name='remoteShareInOperationIncoming', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RemoteShareDenial_remoteShareInOperationOutgoing = NULL(name='remoteShareInOperationOutgoing', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RemoteShareDenial_nonStandardRemoteShareDenial = SEQ(name='nonStandardRemoteShareDenial', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    RemoteShareDenial._cont = ASN1Dict([
        ('incorrectPassword', _RemoteShareDenial_incorrectPassword),
        ('remoteShareNotEnabled', _RemoteShareDenial_remoteShareNotEnabled),
        ('remoteShareInOperationIncoming', _RemoteShareDenial_remoteShareInOperationIncoming),
        ('remoteShareInOperationOutgoing', _RemoteShareDenial_remoteShareInOperationOutgoing),
        ('nonStandardRemoteShareDenial', _RemoteShareDenial_nonStandardRemoteShareDenial),
        ])
    RemoteShareDenial._ext = []
    
    #-----< RequestControl >-----#
    RequestControl = SEQ(name='RequestControl', mode=MODE_TYPE)
    _RequestControl_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __RequestControl_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _RequestControl_nonStandardParameters._cont = __RequestControl_nonStandardParameters__item_
    RequestControl._cont = ASN1Dict([
        ('nonStandardParameters', _RequestControl_nonStandardParameters),
        ])
    RequestControl._ext = []
    
    #-----< RequestRemoteShare >-----#
    RequestRemoteShare = SEQ(name='RequestRemoteShare', mode=MODE_TYPE)
    _RequestRemoteShare_requestingID = INT(name='requestingID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _RequestRemoteShare_encryptedPassword = OCT_STR(name='encryptedPassword', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RequestRemoteShare_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __RequestRemoteShare_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _RequestRemoteShare_nonStandardParameters._cont = __RequestRemoteShare_nonStandardParameters__item_
    RequestRemoteShare._cont = ASN1Dict([
        ('requestingID', _RequestRemoteShare_requestingID),
        ('encryptedPassword', _RequestRemoteShare_encryptedPassword),
        ('nonStandardParameters', _RequestRemoteShare_nonStandardParameters),
        ])
    RequestRemoteShare._ext = []
    
    #-----< RestoreWindowRequest >-----#
    RestoreWindowRequest = SEQ(name='RestoreWindowRequest', mode=MODE_TYPE)
    _RestoreWindowRequest_activationWindow = INT(name='activationWindow', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'WindowID')))
    _RestoreWindowRequest_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __RestoreWindowRequest_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _RestoreWindowRequest_nonStandardParameters._cont = __RestoreWindowRequest_nonStandardParameters__item_
    RestoreWindowRequest._cont = ASN1Dict([
        ('activationWindow', _RestoreWindowRequest_activationWindow),
        ('nonStandardParameters', _RestoreWindowRequest_nonStandardParameters),
        ])
    RestoreWindowRequest._ext = []
    
    #-----< ROP2 >-----#
    ROP2 = INT(name='ROP2', mode=MODE_TYPE)
    ROP2._cont = ASN1Dict([('r2BLACK', 1), ('r2DPon', 2), ('r2DPna', 3), ('r2Pn', 4), ('r2PDna', 5), ('r2Dn', 6), ('r2DPx', 7), ('r2DPan', 8), ('r2DPa', 9), ('r2DPxn', 10), ('r2D', 11), ('r2DPno', 12), ('r2P', 13), ('r2PDno', 14), ('r2DPo', 15), ('r2WHITE', 16)])
    ROP2._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< ROP3 >-----#
    ROP3 = INT(name='ROP3', mode=MODE_TYPE)
    ROP3._cont = ASN1Dict([('r3BLACK', 0), ('r3DPSoon', 1), ('r3DPSona', 2), ('r3PSon', 3), ('r3SDPona', 4), ('r3DPon', 5), ('r3PDSxnon', 6), ('r3PDSaon', 7), ('r3SDPnaa', 8), ('r3PDSxon', 9), ('r3DPna', 10), ('r3PSDnaon', 11), ('r3SPna', 12), ('r3PDSnaon', 13), ('r3PDSonon', 14), ('r3Pn', 15), ('r3PDSona', 16), ('r3DSon', 17), ('r3SDPxnon', 18), ('r3SDPaon', 19), ('r3DPSxnon', 20), ('r3DPSaon', 21), ('r3PSDPSanaxx', 22), ('r3SSPxDSxaxn', 23), ('r3SPxPDxa', 24), ('r3SDPSanaxn', 25), ('r3PDSPaox', 26), ('r3SDPSxaxn', 27), ('r3PSDPaox', 28), ('r3DSPDxaxn', 29), ('r3PDSox', 30), ('r3PDSoan', 31), ('r3DPSnaa', 32), ('r3SDPxon', 33), ('r3DSna', 34), ('r3SPDnaon', 35), ('r3SPxDSxa', 36), ('r3PDSPanaxn', 37), ('r3SDPSaox', 38), ('r3SDPSxnox', 39), ('r3DPSxa', 40), ('r3PSDPSaoxxn', 41), ('r3DPSana', 42), ('r3SSPxPDxaxn', 43), ('r3SPDSoax', 44), ('r3PSDnox', 45), ('r3PSDPxox', 46), ('r3PSDnoan', 47), ('r3PSna', 48), ('r3SDPnaon', 49), ('r3SDPSoox', 50), ('r3Sn', 51), ('r3SPDSaox', 52), ('r3SPDSxnox', 53), ('r3SDPox', 54), ('r3SDPoan', 55), ('r3PSDPoax', 56), ('r3SPDnox', 57), ('r3SPDSxox', 58), ('r3SPDnoan', 59), ('r3PSx', 60), ('r3SPDSonox', 61), ('r3SPDSnaox', 62), ('r3PSan', 63), ('r3PSDnaa', 64), ('r3DPSxon', 65), ('r3SDxPDxa', 66), ('r3SPDSanaxn', 67), ('r3SDna', 68), ('r3DPSnaon', 69), ('r3DSPDaox', 70), ('r3PSDPxaxn', 71), ('r3SDPxa', 72), ('r3PDSPDaoxxn', 73), ('r3DPSDoax', 74), ('r3PDSnox', 75), ('r3SDPana', 76), ('r3SSPxDSxoxn', 77), ('r3PDSPxox', 78), ('r3PDSnoan', 79), ('r3PDna', 80), ('r3DSPnaon', 81), ('r3DPSDaox', 82), ('r3SPDSxaxn', 83), ('r3DPSonon', 84), ('r3Dn', 85), ('r3DPSox', 86), ('r3DPSoan', 87), ('r3PDSPoax', 88), ('r3DPSnox', 89), ('r3DPx', 90), ('r3DPSDonox', 91), ('r3DPSDxox', 92), ('r3DPSnoan', 93), ('r3DPSDnaox', 94), ('r3DPan', 95), ('r3PDSxa', 96), ('r3DSPDSaoxxn', 97), ('r3DSPDoax', 98), ('r3SDPnox', 99), ('r3SDPSoax', 100), ('r3DSPnox', 101), ('r3DSx', 102), ('r3SDPSonox', 103), ('r3DSPDSonoxxn', 104), ('r3PDSxxn', 105), ('r3DPSax', 106), ('r3PSDPSoaxxn', 107), ('r3SDPax', 108), ('r3PDSPDoaxxn', 109), ('r3SDPSnoax', 110), ('r3PDSxnan', 111), ('r3PDSana', 112), ('r3SSDxPDxaxn', 113), ('r3SDPSxox', 114), ('r3SDPnoan', 115), ('r3DSPDxox', 116), ('r3DSPnoan', 117), ('r3SDPSnaox', 118), ('r3DSan', 119), ('r3PDSax', 120), ('r3DSPDSoaxxn', 121), ('r3DPSDnoax', 122), ('r3SDPxnan', 123), ('r3SPDSnoax', 124), ('r3DPSxnan', 125), ('r3SPxDSxo', 126), ('r3DPSaan', 127), ('r3DPSaa', 128), ('r3SPxDSxon', 129), ('r3DPSxna', 130), ('r3SPDSnoaxn', 131), ('r3SDPxna', 132), ('r3PDSPnoaxn', 133), ('r3DSPDSoaxx', 134), ('r3PDSaxn', 135), ('r3DSa', 136), ('r3SDPSnaoxn', 137), ('r3DSPnoa', 138), ('r3DSPDxoxn', 139), ('r3SDPnoa', 140), ('r3SDPSxoxn', 141), ('r3SSDxPDxax', 142), ('r3PDSanan', 143), ('r3PDSxna', 144), ('r3SDPSnoaxn', 145), ('r3DPSDPoaxx', 146), ('r3SPDaxn', 147), ('r3PSDPSoaxx', 148), ('r3DPSaxn', 149), ('r3DPSxx', 150), ('r3PSDPSonoxx', 151), ('r3SDPSonoxn', 152), ('r3DSxn', 153), ('r3DPSnax', 154), ('r3SDPSoaxn', 155), ('r3SPDnax', 156), ('r3DSPDoaxn', 157), ('r3DSPDSaoxx', 158), ('r3PDSxan', 159), ('r3DPa', 160), ('r3PDSPnaoxn', 161), ('r3DPSnoa', 162), ('r3DPSDxoxn', 163), ('r3PDSPonoxn', 164), ('r3PDxn', 165), ('r3DSPnax', 166), ('r3PDSPoaxn', 167), ('r3DPSoa', 168), ('r3DPSoxn', 169), ('r3D', 170), ('r3DPSono', 171), ('r3SPDSxax', 172), ('r3DPSDaoxn', 173), ('r3DSPnao', 174), ('r3DPno', 175), ('r3PDSnoa', 176), ('r3PDSPxoxn', 177), ('r3SSPxDSxox', 178), ('r3SDPanan', 179), ('r3PSDnax', 180), ('r3DPSDoaxn', 181), ('r3DPSDPaoxx', 182), ('r3SDPxan', 183), ('r3PSDPxax', 184), ('r3DSPDaoxn', 185), ('r3DPSnao', 186), ('r3DSno', 187), ('r3SPDSanax', 188), ('r3SDxPDxan', 189), ('r3DPSxo', 190), ('r3DPSano', 191), ('r3PSa', 192), ('r3SPDSnaoxn', 193), ('r3SPDSonoxn', 194), ('r3PSxn', 195), ('r3SPDnoa', 196), ('r3SPDSxoxn', 197), ('r3SDPnax', 198), ('r3PSDPoaxn', 199), ('r3SDPoa', 200), ('r3SPDoxn', 201), ('r3DPSDxax', 202), ('r3SPDSaoxn', 203), ('r3S', 204), ('r3SDPono', 205), ('r3SDPnao', 206), ('r3SPno', 207), ('r3PSDnoa', 208), ('r3PSDPxoxn', 209), ('r3PDSnax', 210), ('r3SPDSoaxn', 211), ('r3SSPxPDxax', 212), ('r3DPSanan', 213), ('r3PSDPSaoxx', 214), ('r3DPSxan', 215), ('r3PDSPxax', 216), ('r3SDPSaoxn', 217), ('r3DPSDanax', 218), ('r3SPxDSxan', 219), ('r3SPDnao', 220), ('r3SDno', 221), ('r3SDPxo', 222), ('r3SDPano', 223), ('r3PDSoa', 224), ('r3PDSoxn', 225), ('r3DSPDxax', 226), ('r3PSDPaoxn', 227), ('r3SDPSxax', 228), ('r3PDSPaoxn', 229), ('r3SDPSanax', 230), ('r3SPxPDxan', 231), ('r3SSPxDSxax', 232), ('r3DSPDSanaxxn', 233), ('r3DPSao', 234), ('r3DPSxno', 235), ('r3SDPao', 236), ('r3SDPxno', 237), ('r3DSo', 238), ('r3SDPnoo', 239), ('r3P', 240), ('r3PDSono', 241), ('r3PDSnao', 242), ('r3PSno', 243), ('r3PSDnao', 244), ('r3PDno', 245), ('r3PDSxo', 246), ('r3PDSano', 247), ('r3PDSao', 248), ('r3PDSxno', 249), ('r3DPo', 250), ('r3DPSnoo', 251), ('r3PSo', 252), ('r3PSDnoo', 253), ('r3DPSoo', 254), ('r3WHITE', 255)])
    ROP3._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< SystemPointerType >-----#
    SystemPointerType = CHOICE(name='SystemPointerType', mode=MODE_TYPE)
    _SystemPointerType_null = NULL(name='null', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SystemPointerType_default = NULL(name='default', mode=MODE_TYPE, tag=(12512, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SystemPointerType_nonStandardSystemPointerValue = SEQ(name='nonStandardSystemPointerValue', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    SystemPointerType._cont = ASN1Dict([
        ('null', _SystemPointerType_null),
        ('default', _SystemPointerType_default),
        ('nonStandardSystemPointerValue', _SystemPointerType_nonStandardSystemPointerValue),
        ])
    SystemPointerType._ext = []
    
    #-----< TakeControlRequest >-----#
    TakeControlRequest = SEQ(name='TakeControlRequest', mode=MODE_TYPE)
    _TakeControlRequest_passControlFlag = BOOL(name='passControlFlag', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TakeControlRequest_sendingReference = INT(name='sendingReference', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _TakeControlRequest_originatorReference = INT(name='originatorReference', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _TakeControlRequest_originatorID = INT(name='originatorID', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _TakeControlRequest_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __TakeControlRequest_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _TakeControlRequest_nonStandardParameters._cont = __TakeControlRequest_nonStandardParameters__item_
    TakeControlRequest._cont = ASN1Dict([
        ('passControlFlag', _TakeControlRequest_passControlFlag),
        ('sendingReference', _TakeControlRequest_sendingReference),
        ('originatorReference', _TakeControlRequest_originatorReference),
        ('originatorID', _TakeControlRequest_originatorID),
        ('nonStandardParameters', _TakeControlRequest_nonStandardParameters),
        ])
    TakeControlRequest._ext = []
    
    #-----< UnhostApplication >-----#
    UnhostApplication = SEQ(name='UnhostApplication', mode=MODE_TYPE)
    _UnhostApplication_windowID = INT(name='windowID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'WindowID')))
    _UnhostApplication_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __UnhostApplication_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _UnhostApplication_nonStandardParameters._cont = __UnhostApplication_nonStandardParameters__item_
    UnhostApplication._cont = ASN1Dict([
        ('windowID', _UnhostApplication_windowID),
        ('nonStandardParameters', _UnhostApplication_nonStandardParameters),
        ])
    UnhostApplication._ext = []
    
    #-----< V42bisCompression >-----#
    V42bisCompression = SEQ(name='V42bisCompression', mode=MODE_TYPE)
    _V42bisCompression_p1 = INT(name='p1', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _V42bisCompression_p1._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=512, ub=65535)], ev=None, er=[])
    _V42bisCompression_p2 = INT(name='p2', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _V42bisCompression_p2._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=6, ub=250)], ev=None, er=[])
    V42bisCompression._cont = ASN1Dict([
        ('p1', _V42bisCompression_p1),
        ('p2', _V42bisCompression_p2),
        ])
    V42bisCompression._ext = []
    
    #-----< WindowAttribute >-----#
    WindowAttribute = SEQ(name='WindowAttribute', mode=MODE_TYPE)
    _WindowAttribute_windowID = INT(name='windowID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'WindowID')))
    _WindowAttribute_windowExtra = INT(name='windowExtra', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer32')))
    _WindowAttribute_windowOwner = INT(name='windowOwner', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'WindowID')))
    _WindowAttribute_windowFlags = BIT_STR(name='windowFlags', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'WindowAttributeFlags')))
    _WindowAttribute_windowRectangle = SEQ(name='windowRectangle', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Rectangle16')))
    _WindowAttribute_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __WindowAttribute_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _WindowAttribute_nonStandardParameters._cont = __WindowAttribute_nonStandardParameters__item_
    WindowAttribute._cont = ASN1Dict([
        ('windowID', _WindowAttribute_windowID),
        ('windowExtra', _WindowAttribute_windowExtra),
        ('windowOwner', _WindowAttribute_windowOwner),
        ('windowFlags', _WindowAttribute_windowFlags),
        ('windowRectangle', _WindowAttribute_windowRectangle),
        ('nonStandardParameters', _WindowAttribute_nonStandardParameters),
        ])
    WindowAttribute._ext = []
    
    #-----< WindowManagerMenuRequest >-----#
    WindowManagerMenuRequest = SEQ(name='WindowManagerMenuRequest', mode=MODE_TYPE)
    _WindowManagerMenuRequest_activationWindow = INT(name='activationWindow', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'WindowID')))
    _WindowManagerMenuRequest_activationPoint = SEQ(name='activationPoint', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Point16')))
    _WindowManagerMenuRequest_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __WindowManagerMenuRequest_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _WindowManagerMenuRequest_nonStandardParameters._cont = __WindowManagerMenuRequest_nonStandardParameters__item_
    WindowManagerMenuRequest._cont = ASN1Dict([
        ('activationWindow', _WindowManagerMenuRequest_activationWindow),
        ('activationPoint', _WindowManagerMenuRequest_activationPoint),
        ('nonStandardParameters', _WindowManagerMenuRequest_nonStandardParameters),
        ])
    WindowManagerMenuRequest._ext = []
    
    #-----< WindowTitle >-----#
    WindowTitle = CHOICE(name='WindowTitle', mode=MODE_TYPE)
    _WindowTitle_noTitle = INT(name='noTitle', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer8')))
    _WindowTitle_noTitle._const_val = ASN1Set(rv=[255], rr=[], ev=None, er=[])
    _WindowTitle_titleString = OCT_STR(name='titleString', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'T50String')))
    _WindowTitle_nonStandardWindowTitle = SEQ(name='nonStandardWindowTitle', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    WindowTitle._cont = ASN1Dict([
        ('noTitle', _WindowTitle_noTitle),
        ('titleString', _WindowTitle_titleString),
        ('nonStandardWindowTitle', _WindowTitle_nonStandardWindowTitle),
        ])
    WindowTitle._ext = []
    
    #-----< InputEvent >-----#
    InputEvent = CHOICE(name='InputEvent', mode=MODE_TYPE)
    _InputEvent_pointingDeviceEvent = SEQ(name='pointingDeviceEvent', mode=MODE_TYPE, tag=(12769, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'PointingDeviceEvent')))
    _InputEvent_codePointEvent = SEQ(name='codePointEvent', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'CodePointEvent')))
    _InputEvent_virtualKeyEvent = SEQ(name='virtualKeyEvent', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'VirtualKeyEvent')))
    _InputEvent_synchronizeEvent = SEQ(name='synchronizeEvent', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'SynchronizeEvent')))
    _InputEvent_nonStandardInputEvent = SEQ(name='nonStandardInputEvent', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    InputEvent._cont = ASN1Dict([
        ('pointingDeviceEvent', _InputEvent_pointingDeviceEvent),
        ('codePointEvent', _InputEvent_codePointEvent),
        ('virtualKeyEvent', _InputEvent_virtualKeyEvent),
        ('synchronizeEvent', _InputEvent_synchronizeEvent),
        ('nonStandardInputEvent', _InputEvent_nonStandardInputEvent),
        ])
    InputEvent._ext = []
    
    #-----< CodePointEvent >-----#
    CodePointEvent = SEQ(name='CodePointEvent', mode=MODE_TYPE)
    _CodePointEvent_eventTime = INT(name='eventTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer32')))
    _CodePointEvent_keyboardFlags = BIT_STR(name='keyboardFlags', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'KeyboardFlags')))
    _CodePointEvent_codePoint = INT(name='codePoint', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _CodePointEvent_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __CodePointEvent_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _CodePointEvent_nonStandardParameters._cont = __CodePointEvent_nonStandardParameters__item_
    CodePointEvent._cont = ASN1Dict([
        ('eventTime', _CodePointEvent_eventTime),
        ('keyboardFlags', _CodePointEvent_keyboardFlags),
        ('codePoint', _CodePointEvent_codePoint),
        ('nonStandardParameters', _CodePointEvent_nonStandardParameters),
        ])
    CodePointEvent._ext = []
    
    #-----< VirtualKeyEvent >-----#
    VirtualKeyEvent = SEQ(name='VirtualKeyEvent', mode=MODE_TYPE)
    _VirtualKeyEvent_eventTime = INT(name='eventTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer32')))
    _VirtualKeyEvent_keyboardFlags = BIT_STR(name='keyboardFlags', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'KeyboardFlags')))
    _VirtualKeyEvent_virtualKey = INT(name='virtualKey', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _VirtualKeyEvent_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __VirtualKeyEvent_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _VirtualKeyEvent_nonStandardParameters._cont = __VirtualKeyEvent_nonStandardParameters__item_
    VirtualKeyEvent._cont = ASN1Dict([
        ('eventTime', _VirtualKeyEvent_eventTime),
        ('keyboardFlags', _VirtualKeyEvent_keyboardFlags),
        ('virtualKey', _VirtualKeyEvent_virtualKey),
        ('nonStandardParameters', _VirtualKeyEvent_nonStandardParameters),
        ])
    VirtualKeyEvent._ext = []
    
    #-----< PointingDeviceEvent >-----#
    PointingDeviceEvent = SEQ(name='PointingDeviceEvent', mode=MODE_TYPE)
    _PointingDeviceEvent_eventTime = INT(name='eventTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer32')))
    _PointingDeviceEvent_pointingDeviceFlags = BIT_STR(name='pointingDeviceFlags', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'PointingDeviceFlags')))
    _PointingDeviceEvent_pointingDeviceX = INT(name='pointingDeviceX', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate16')))
    _PointingDeviceEvent_pointingDeviceY = INT(name='pointingDeviceY', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate16')))
    _PointingDeviceEvent_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PointingDeviceEvent_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _PointingDeviceEvent_nonStandardParameters._cont = __PointingDeviceEvent_nonStandardParameters__item_
    PointingDeviceEvent._cont = ASN1Dict([
        ('eventTime', _PointingDeviceEvent_eventTime),
        ('pointingDeviceFlags', _PointingDeviceEvent_pointingDeviceFlags),
        ('pointingDeviceX', _PointingDeviceEvent_pointingDeviceX),
        ('pointingDeviceY', _PointingDeviceEvent_pointingDeviceY),
        ('nonStandardParameters', _PointingDeviceEvent_nonStandardParameters),
        ])
    PointingDeviceEvent._ext = []
    
    #-----< SynchronizeEvent >-----#
    SynchronizeEvent = SEQ(name='SynchronizeEvent', mode=MODE_TYPE)
    _SynchronizeEvent_eventTime = INT(name='eventTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer32')))
    _SynchronizeEvent_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SynchronizeEvent_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _SynchronizeEvent_nonStandardParameters._cont = __SynchronizeEvent_nonStandardParameters__item_
    SynchronizeEvent._cont = ASN1Dict([
        ('eventTime', _SynchronizeEvent_eventTime),
        ('nonStandardParameters', _SynchronizeEvent_nonStandardParameters),
        ])
    SynchronizeEvent._ext = []
    
    #-----< PrimaryOrderHeader >-----#
    PrimaryOrderHeader = SEQ(name='PrimaryOrderHeader', mode=MODE_TYPE)
    _PrimaryOrderHeader_boundsLeft = CHOICE(name='boundsLeft', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _PrimaryOrderHeader_boundsTop = CHOICE(name='boundsTop', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _PrimaryOrderHeader_boundsRight = CHOICE(name='boundsRight', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _PrimaryOrderHeader_boundsBottom = CHOICE(name='boundsBottom', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    PrimaryOrderHeader._cont = ASN1Dict([
        ('boundsLeft', _PrimaryOrderHeader_boundsLeft),
        ('boundsTop', _PrimaryOrderHeader_boundsTop),
        ('boundsRight', _PrimaryOrderHeader_boundsRight),
        ('boundsBottom', _PrimaryOrderHeader_boundsBottom),
        ])
    PrimaryOrderHeader._ext = []
    
    #-----< ShareDataHeader >-----#
    ShareDataHeader = SEQ(name='ShareDataHeader', mode=MODE_TYPE)
    _ShareDataHeader_shareID = INT(name='shareID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ShareID')))
    _ShareDataHeader_generalCompressionSpecifier = CHOICE(name='generalCompressionSpecifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'GeneralCompressionSpecifier')), opt=True)
    ShareDataHeader._cont = ASN1Dict([
        ('shareID', _ShareDataHeader_shareID),
        ('generalCompressionSpecifier', _ShareDataHeader_generalCompressionSpecifier),
        ])
    ShareDataHeader._ext = []
    
    #-----< DestinationBltOrder >-----#
    DestinationBltOrder = SEQ(name='DestinationBltOrder', mode=MODE_TYPE)
    _DestinationBltOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'PrimaryOrderHeader')))
    _DestinationBltOrder_destLeft = CHOICE(name='destLeft', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _DestinationBltOrder_destTop = CHOICE(name='destTop', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _DestinationBltOrder_destWidth = CHOICE(name='destWidth', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _DestinationBltOrder_destHeight = CHOICE(name='destHeight', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _DestinationBltOrder_rop3 = INT(name='rop3', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ROP3')), opt=True)
    _DestinationBltOrder_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __DestinationBltOrder_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _DestinationBltOrder_nonStandardParameters._cont = __DestinationBltOrder_nonStandardParameters__item_
    DestinationBltOrder._cont = ASN1Dict([
        ('header', _DestinationBltOrder_header),
        ('destLeft', _DestinationBltOrder_destLeft),
        ('destTop', _DestinationBltOrder_destTop),
        ('destWidth', _DestinationBltOrder_destWidth),
        ('destHeight', _DestinationBltOrder_destHeight),
        ('rop3', _DestinationBltOrder_rop3),
        ('nonStandardParameters', _DestinationBltOrder_nonStandardParameters),
        ])
    DestinationBltOrder._ext = []
    
    #-----< PatternBltOrder >-----#
    PatternBltOrder = SEQ(name='PatternBltOrder', mode=MODE_TYPE)
    _PatternBltOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'PrimaryOrderHeader')))
    _PatternBltOrder_destLeft = CHOICE(name='destLeft', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _PatternBltOrder_destTop = CHOICE(name='destTop', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _PatternBltOrder_destWidth = CHOICE(name='destWidth', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _PatternBltOrder_destHeight = CHOICE(name='destHeight', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _PatternBltOrder_rop3 = INT(name='rop3', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ROP3')), opt=True)
    _PatternBltOrder_backgroundColor = SEQ(name='backgroundColor', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Color')), opt=True)
    _PatternBltOrder_foregroundColor = SEQ(name='foregroundColor', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Color')), opt=True)
    _PatternBltOrder_brush = SEQ(name='brush', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Brush')), opt=True)
    _PatternBltOrder_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PatternBltOrder_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _PatternBltOrder_nonStandardParameters._cont = __PatternBltOrder_nonStandardParameters__item_
    PatternBltOrder._cont = ASN1Dict([
        ('header', _PatternBltOrder_header),
        ('destLeft', _PatternBltOrder_destLeft),
        ('destTop', _PatternBltOrder_destTop),
        ('destWidth', _PatternBltOrder_destWidth),
        ('destHeight', _PatternBltOrder_destHeight),
        ('rop3', _PatternBltOrder_rop3),
        ('backgroundColor', _PatternBltOrder_backgroundColor),
        ('foregroundColor', _PatternBltOrder_foregroundColor),
        ('brush', _PatternBltOrder_brush),
        ('nonStandardParameters', _PatternBltOrder_nonStandardParameters),
        ])
    PatternBltOrder._ext = []
    
    #-----< ScreenBltOrder >-----#
    ScreenBltOrder = SEQ(name='ScreenBltOrder', mode=MODE_TYPE)
    _ScreenBltOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'PrimaryOrderHeader')))
    _ScreenBltOrder_destLeft = CHOICE(name='destLeft', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _ScreenBltOrder_destTop = CHOICE(name='destTop', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _ScreenBltOrder_destWidth = CHOICE(name='destWidth', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _ScreenBltOrder_destHeight = CHOICE(name='destHeight', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _ScreenBltOrder_rop3 = INT(name='rop3', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ROP3')), opt=True)
    _ScreenBltOrder_sourceX = CHOICE(name='sourceX', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _ScreenBltOrder_sourceY = CHOICE(name='sourceY', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _ScreenBltOrder_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ScreenBltOrder_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _ScreenBltOrder_nonStandardParameters._cont = __ScreenBltOrder_nonStandardParameters__item_
    ScreenBltOrder._cont = ASN1Dict([
        ('header', _ScreenBltOrder_header),
        ('destLeft', _ScreenBltOrder_destLeft),
        ('destTop', _ScreenBltOrder_destTop),
        ('destWidth', _ScreenBltOrder_destWidth),
        ('destHeight', _ScreenBltOrder_destHeight),
        ('rop3', _ScreenBltOrder_rop3),
        ('sourceX', _ScreenBltOrder_sourceX),
        ('sourceY', _ScreenBltOrder_sourceY),
        ('nonStandardParameters', _ScreenBltOrder_nonStandardParameters),
        ])
    ScreenBltOrder._ext = []
    
    #-----< CacheBitmapOrder >-----#
    CacheBitmapOrder = SEQ(name='CacheBitmapOrder', mode=MODE_TYPE)
    _CacheBitmapOrder_cacheId = INT(name='cacheId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CacheBitmapOrder_cacheId._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=2)], ev=None, er=[])
    _CacheBitmapOrder_bitmapWidth = INT(name='bitmapWidth', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer8')))
    _CacheBitmapOrder_bitmapHeight = INT(name='bitmapHeight', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer8')))
    _CacheBitmapOrder_bitmapBitsPerPel = INT(name='bitmapBitsPerPel', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CacheBitmapOrder_bitmapBitsPerPel._const_val = ASN1Set(rv=[1, 4, 8], rr=[], ev=None, er=[])
    _CacheBitmapOrder_cacheIndex = INT(name='cacheIndex', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _CacheBitmapOrder_bitmapData = CHOICE(name='bitmapData', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'BitmapData')))
    _CacheBitmapOrder_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __CacheBitmapOrder_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _CacheBitmapOrder_nonStandardParameters._cont = __CacheBitmapOrder_nonStandardParameters__item_
    CacheBitmapOrder._cont = ASN1Dict([
        ('cacheId', _CacheBitmapOrder_cacheId),
        ('bitmapWidth', _CacheBitmapOrder_bitmapWidth),
        ('bitmapHeight', _CacheBitmapOrder_bitmapHeight),
        ('bitmapBitsPerPel', _CacheBitmapOrder_bitmapBitsPerPel),
        ('cacheIndex', _CacheBitmapOrder_cacheIndex),
        ('bitmapData', _CacheBitmapOrder_bitmapData),
        ('nonStandardParameters', _CacheBitmapOrder_nonStandardParameters),
        ])
    CacheBitmapOrder._ext = []
    
    #-----< CacheColorTableOrder >-----#
    CacheColorTableOrder = SEQ(name='CacheColorTableOrder', mode=MODE_TYPE)
    _CacheColorTableOrder_cacheIndex = INT(name='cacheIndex', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer8')))
    _CacheColorTableOrder_colorTable = CHOICE(name='colorTable', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ColorPalette')))
    _CacheColorTableOrder_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __CacheColorTableOrder_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _CacheColorTableOrder_nonStandardParameters._cont = __CacheColorTableOrder_nonStandardParameters__item_
    CacheColorTableOrder._cont = ASN1Dict([
        ('cacheIndex', _CacheColorTableOrder_cacheIndex),
        ('colorTable', _CacheColorTableOrder_colorTable),
        ('nonStandardParameters', _CacheColorTableOrder_nonStandardParameters),
        ])
    CacheColorTableOrder._ext = []
    
    #-----< MemoryBltOrder >-----#
    MemoryBltOrder = SEQ(name='MemoryBltOrder', mode=MODE_TYPE)
    _MemoryBltOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'PrimaryOrderHeader')))
    _MemoryBltOrder_colorTableCacheIndex = INT(name='colorTableCacheIndex', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer8')), opt=True)
    _MemoryBltOrder_bitmapCacheID = INT(name='bitmapCacheID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer8')), opt=True)
    _MemoryBltOrder_destLeft = CHOICE(name='destLeft', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _MemoryBltOrder_destTop = CHOICE(name='destTop', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _MemoryBltOrder_destWidth = CHOICE(name='destWidth', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _MemoryBltOrder_destHeight = CHOICE(name='destHeight', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _MemoryBltOrder_rop3 = INT(name='rop3', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ROP3')), opt=True)
    _MemoryBltOrder_sourceX = CHOICE(name='sourceX', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _MemoryBltOrder_sourceY = CHOICE(name='sourceY', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _MemoryBltOrder_bitmapCacheIndex = INT(name='bitmapCacheIndex', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')), opt=True)
    _MemoryBltOrder_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __MemoryBltOrder_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _MemoryBltOrder_nonStandardParameters._cont = __MemoryBltOrder_nonStandardParameters__item_
    MemoryBltOrder._cont = ASN1Dict([
        ('header', _MemoryBltOrder_header),
        ('colorTableCacheIndex', _MemoryBltOrder_colorTableCacheIndex),
        ('bitmapCacheID', _MemoryBltOrder_bitmapCacheID),
        ('destLeft', _MemoryBltOrder_destLeft),
        ('destTop', _MemoryBltOrder_destTop),
        ('destWidth', _MemoryBltOrder_destWidth),
        ('destHeight', _MemoryBltOrder_destHeight),
        ('rop3', _MemoryBltOrder_rop3),
        ('sourceX', _MemoryBltOrder_sourceX),
        ('sourceY', _MemoryBltOrder_sourceY),
        ('bitmapCacheIndex', _MemoryBltOrder_bitmapCacheIndex),
        ('nonStandardParameters', _MemoryBltOrder_nonStandardParameters),
        ])
    MemoryBltOrder._ext = []
    
    #-----< MemoryThreeWayBltOrder >-----#
    MemoryThreeWayBltOrder = SEQ(name='MemoryThreeWayBltOrder', mode=MODE_TYPE)
    _MemoryThreeWayBltOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'PrimaryOrderHeader')))
    _MemoryThreeWayBltOrder_colorTableCacheIndex = INT(name='colorTableCacheIndex', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer8')), opt=True)
    _MemoryThreeWayBltOrder_bitmapCacheID = INT(name='bitmapCacheID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer8')), opt=True)
    _MemoryThreeWayBltOrder_destLeft = CHOICE(name='destLeft', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _MemoryThreeWayBltOrder_destTop = CHOICE(name='destTop', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _MemoryThreeWayBltOrder_destWidth = CHOICE(name='destWidth', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _MemoryThreeWayBltOrder_destHeight = CHOICE(name='destHeight', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _MemoryThreeWayBltOrder_rop3 = INT(name='rop3', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ROP3')), opt=True)
    _MemoryThreeWayBltOrder_sourceX = CHOICE(name='sourceX', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _MemoryThreeWayBltOrder_sourceY = CHOICE(name='sourceY', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _MemoryThreeWayBltOrder_backgroundColor = SEQ(name='backgroundColor', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Color')), opt=True)
    _MemoryThreeWayBltOrder_foregroundColor = SEQ(name='foregroundColor', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Color')), opt=True)
    _MemoryThreeWayBltOrder_brush = SEQ(name='brush', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Brush')), opt=True)
    _MemoryThreeWayBltOrder_bitmapCacheIndex = INT(name='bitmapCacheIndex', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')), opt=True)
    _MemoryThreeWayBltOrder_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __MemoryThreeWayBltOrder_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _MemoryThreeWayBltOrder_nonStandardParameters._cont = __MemoryThreeWayBltOrder_nonStandardParameters__item_
    MemoryThreeWayBltOrder._cont = ASN1Dict([
        ('header', _MemoryThreeWayBltOrder_header),
        ('colorTableCacheIndex', _MemoryThreeWayBltOrder_colorTableCacheIndex),
        ('bitmapCacheID', _MemoryThreeWayBltOrder_bitmapCacheID),
        ('destLeft', _MemoryThreeWayBltOrder_destLeft),
        ('destTop', _MemoryThreeWayBltOrder_destTop),
        ('destWidth', _MemoryThreeWayBltOrder_destWidth),
        ('destHeight', _MemoryThreeWayBltOrder_destHeight),
        ('rop3', _MemoryThreeWayBltOrder_rop3),
        ('sourceX', _MemoryThreeWayBltOrder_sourceX),
        ('sourceY', _MemoryThreeWayBltOrder_sourceY),
        ('backgroundColor', _MemoryThreeWayBltOrder_backgroundColor),
        ('foregroundColor', _MemoryThreeWayBltOrder_foregroundColor),
        ('brush', _MemoryThreeWayBltOrder_brush),
        ('bitmapCacheIndex', _MemoryThreeWayBltOrder_bitmapCacheIndex),
        ('nonStandardParameters', _MemoryThreeWayBltOrder_nonStandardParameters),
        ])
    MemoryThreeWayBltOrder._ext = []
    
    #-----< TextOrder >-----#
    TextOrder = SEQ(name='TextOrder', mode=MODE_TYPE)
    _TextOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'PrimaryOrderHeader')))
    _TextOrder_backMixMode = CHOICE(name='backMixMode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'BackgroundMixMode')), opt=True)
    _TextOrder_startX = CHOICE(name='startX', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _TextOrder_startY = CHOICE(name='startY', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _TextOrder_backgroundColor = SEQ(name='backgroundColor', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Color')), opt=True)
    _TextOrder_foregroundColor = SEQ(name='foregroundColor', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Color')), opt=True)
    _TextOrder_extraSpacing = INT(name='extraSpacing', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')), opt=True)
    _TextOrder_totalBreakSpacing = INT(name='totalBreakSpacing', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')), opt=True)
    _TextOrder_breakCount = INT(name='breakCount', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')), opt=True)
    _TextOrder_fontHeight = INT(name='fontHeight', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')), opt=True)
    _TextOrder_fontWidth = INT(name='fontWidth', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')), opt=True)
    _TextOrder_fontWeight = INT(name='fontWeight', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')), opt=True)
    _TextOrder_textFlags = BIT_STR(name='textFlags', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'TextAttributeFlags')), opt=True)
    _TextOrder_fontID = INT(name='fontID', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')), opt=True)
    _TextOrder_codePointList = OCT_STR(name='codePointList', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ASString')), opt=True)
    _TextOrder_codePointList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    _TextOrder_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __TextOrder_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _TextOrder_nonStandardParameters._cont = __TextOrder_nonStandardParameters__item_
    TextOrder._cont = ASN1Dict([
        ('header', _TextOrder_header),
        ('backMixMode', _TextOrder_backMixMode),
        ('startX', _TextOrder_startX),
        ('startY', _TextOrder_startY),
        ('backgroundColor', _TextOrder_backgroundColor),
        ('foregroundColor', _TextOrder_foregroundColor),
        ('extraSpacing', _TextOrder_extraSpacing),
        ('totalBreakSpacing', _TextOrder_totalBreakSpacing),
        ('breakCount', _TextOrder_breakCount),
        ('fontHeight', _TextOrder_fontHeight),
        ('fontWidth', _TextOrder_fontWidth),
        ('fontWeight', _TextOrder_fontWeight),
        ('textFlags', _TextOrder_textFlags),
        ('fontID', _TextOrder_fontID),
        ('codePointList', _TextOrder_codePointList),
        ('nonStandardParameters', _TextOrder_nonStandardParameters),
        ])
    TextOrder._ext = []
    
    #-----< ExtendedTextOrder >-----#
    ExtendedTextOrder = SEQ(name='ExtendedTextOrder', mode=MODE_TYPE)
    _ExtendedTextOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'PrimaryOrderHeader')))
    _ExtendedTextOrder_backMixMode = CHOICE(name='backMixMode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'BackgroundMixMode')), opt=True)
    _ExtendedTextOrder_startX = CHOICE(name='startX', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _ExtendedTextOrder_startY = CHOICE(name='startY', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _ExtendedTextOrder_backgroundColor = SEQ(name='backgroundColor', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Color')), opt=True)
    _ExtendedTextOrder_foregroundColor = SEQ(name='foregroundColor', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Color')), opt=True)
    _ExtendedTextOrder_extraSpacing = INT(name='extraSpacing', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')), opt=True)
    _ExtendedTextOrder_totalBreakSpacing = INT(name='totalBreakSpacing', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')), opt=True)
    _ExtendedTextOrder_breakCount = INT(name='breakCount', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')), opt=True)
    _ExtendedTextOrder_fontHeight = INT(name='fontHeight', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')), opt=True)
    _ExtendedTextOrder_fontWidth = INT(name='fontWidth', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')), opt=True)
    _ExtendedTextOrder_fontWeight = INT(name='fontWeight', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')), opt=True)
    _ExtendedTextOrder_textFlags1 = BIT_STR(name='textFlags1', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'TextAttributeFlags')), opt=True)
    _ExtendedTextOrder_fontID = INT(name='fontID', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')), opt=True)
    _ExtendedTextOrder_textFlags2 = BIT_STR(name='textFlags2', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ExtraTextFlags')), opt=True)
    _ExtendedTextOrder_clipLeft = CHOICE(name='clipLeft', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _ExtendedTextOrder_clipTop = CHOICE(name='clipTop', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _ExtendedTextOrder_clipRight = CHOICE(name='clipRight', mode=MODE_TYPE, tag=(17, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _ExtendedTextOrder_clipBottom = CHOICE(name='clipBottom', mode=MODE_TYPE, tag=(18, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _ExtendedTextOrder_codePointList = OCT_STR(name='codePointList', mode=MODE_TYPE, tag=(19, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ASString')), opt=True)
    _ExtendedTextOrder_codePointList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    _ExtendedTextOrder_deltaXList = SEQ_OF(name='deltaXList', mode=MODE_TYPE, tag=(20, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ExtendedTextOrder_deltaXList__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')))
    _ExtendedTextOrder_deltaXList._cont = __ExtendedTextOrder_deltaXList__item_
    _ExtendedTextOrder_deltaXList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=127)], ev=None, er=[])
    _ExtendedTextOrder_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(21, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ExtendedTextOrder_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _ExtendedTextOrder_nonStandardParameters._cont = __ExtendedTextOrder_nonStandardParameters__item_
    ExtendedTextOrder._cont = ASN1Dict([
        ('header', _ExtendedTextOrder_header),
        ('backMixMode', _ExtendedTextOrder_backMixMode),
        ('startX', _ExtendedTextOrder_startX),
        ('startY', _ExtendedTextOrder_startY),
        ('backgroundColor', _ExtendedTextOrder_backgroundColor),
        ('foregroundColor', _ExtendedTextOrder_foregroundColor),
        ('extraSpacing', _ExtendedTextOrder_extraSpacing),
        ('totalBreakSpacing', _ExtendedTextOrder_totalBreakSpacing),
        ('breakCount', _ExtendedTextOrder_breakCount),
        ('fontHeight', _ExtendedTextOrder_fontHeight),
        ('fontWidth', _ExtendedTextOrder_fontWidth),
        ('fontWeight', _ExtendedTextOrder_fontWeight),
        ('textFlags1', _ExtendedTextOrder_textFlags1),
        ('fontID', _ExtendedTextOrder_fontID),
        ('textFlags2', _ExtendedTextOrder_textFlags2),
        ('clipLeft', _ExtendedTextOrder_clipLeft),
        ('clipTop', _ExtendedTextOrder_clipTop),
        ('clipRight', _ExtendedTextOrder_clipRight),
        ('clipBottom', _ExtendedTextOrder_clipBottom),
        ('codePointList', _ExtendedTextOrder_codePointList),
        ('deltaXList', _ExtendedTextOrder_deltaXList),
        ('nonStandardParameters', _ExtendedTextOrder_nonStandardParameters),
        ])
    ExtendedTextOrder._ext = []
    
    #-----< FrameOrder >-----#
    FrameOrder = SEQ(name='FrameOrder', mode=MODE_TYPE)
    _FrameOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'PrimaryOrderHeader')))
    _FrameOrder_destLeft = CHOICE(name='destLeft', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _FrameOrder_destTop = CHOICE(name='destTop', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _FrameOrder_destWidth = CHOICE(name='destWidth', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _FrameOrder_destHeight = CHOICE(name='destHeight', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _FrameOrder_rop3 = INT(name='rop3', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ROP3')), opt=True)
    _FrameOrder_backgroundColor = SEQ(name='backgroundColor', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Color')), opt=True)
    _FrameOrder_foregroundColor = SEQ(name='foregroundColor', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Color')), opt=True)
    _FrameOrder_brush = SEQ(name='brush', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Brush')), opt=True)
    _FrameOrder_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __FrameOrder_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _FrameOrder_nonStandardParameters._cont = __FrameOrder_nonStandardParameters__item_
    FrameOrder._cont = ASN1Dict([
        ('header', _FrameOrder_header),
        ('destLeft', _FrameOrder_destLeft),
        ('destTop', _FrameOrder_destTop),
        ('destWidth', _FrameOrder_destWidth),
        ('destHeight', _FrameOrder_destHeight),
        ('rop3', _FrameOrder_rop3),
        ('backgroundColor', _FrameOrder_backgroundColor),
        ('foregroundColor', _FrameOrder_foregroundColor),
        ('brush', _FrameOrder_brush),
        ('nonStandardParameters', _FrameOrder_nonStandardParameters),
        ])
    FrameOrder._ext = []
    
    #-----< RectangleOrder >-----#
    RectangleOrder = SEQ(name='RectangleOrder', mode=MODE_TYPE)
    _RectangleOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'PrimaryOrderHeader')))
    _RectangleOrder_backMixMode = CHOICE(name='backMixMode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'BackgroundMixMode')), opt=True)
    _RectangleOrder_destLeft = CHOICE(name='destLeft', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _RectangleOrder_destTop = CHOICE(name='destTop', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _RectangleOrder_destRight = CHOICE(name='destRight', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _RectangleOrder_destBottom = CHOICE(name='destBottom', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _RectangleOrder_backgroundColor = SEQ(name='backgroundColor', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Color')), opt=True)
    _RectangleOrder_foregroundColor = SEQ(name='foregroundColor', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Color')), opt=True)
    _RectangleOrder_brush = SEQ(name='brush', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Brush')), opt=True)
    _RectangleOrder_rop2 = INT(name='rop2', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ROP2')), opt=True)
    _RectangleOrder_pen = SEQ(name='pen', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Pen')), opt=True)
    _RectangleOrder_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __RectangleOrder_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _RectangleOrder_nonStandardParameters._cont = __RectangleOrder_nonStandardParameters__item_
    RectangleOrder._cont = ASN1Dict([
        ('header', _RectangleOrder_header),
        ('backMixMode', _RectangleOrder_backMixMode),
        ('destLeft', _RectangleOrder_destLeft),
        ('destTop', _RectangleOrder_destTop),
        ('destRight', _RectangleOrder_destRight),
        ('destBottom', _RectangleOrder_destBottom),
        ('backgroundColor', _RectangleOrder_backgroundColor),
        ('foregroundColor', _RectangleOrder_foregroundColor),
        ('brush', _RectangleOrder_brush),
        ('rop2', _RectangleOrder_rop2),
        ('pen', _RectangleOrder_pen),
        ('nonStandardParameters', _RectangleOrder_nonStandardParameters),
        ])
    RectangleOrder._ext = []
    
    #-----< OpaqueRectangleOrder >-----#
    OpaqueRectangleOrder = SEQ(name='OpaqueRectangleOrder', mode=MODE_TYPE)
    _OpaqueRectangleOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'PrimaryOrderHeader')))
    _OpaqueRectangleOrder_destLeft = CHOICE(name='destLeft', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _OpaqueRectangleOrder_destTop = CHOICE(name='destTop', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _OpaqueRectangleOrder_destWidth = CHOICE(name='destWidth', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _OpaqueRectangleOrder_destHeight = CHOICE(name='destHeight', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _OpaqueRectangleOrder_color = SEQ(name='color', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Color')), opt=True)
    _OpaqueRectangleOrder_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __OpaqueRectangleOrder_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _OpaqueRectangleOrder_nonStandardParameters._cont = __OpaqueRectangleOrder_nonStandardParameters__item_
    OpaqueRectangleOrder._cont = ASN1Dict([
        ('header', _OpaqueRectangleOrder_header),
        ('destLeft', _OpaqueRectangleOrder_destLeft),
        ('destTop', _OpaqueRectangleOrder_destTop),
        ('destWidth', _OpaqueRectangleOrder_destWidth),
        ('destHeight', _OpaqueRectangleOrder_destHeight),
        ('color', _OpaqueRectangleOrder_color),
        ('nonStandardParameters', _OpaqueRectangleOrder_nonStandardParameters),
        ])
    OpaqueRectangleOrder._ext = []
    
    #-----< LineOrder >-----#
    LineOrder = SEQ(name='LineOrder', mode=MODE_TYPE)
    _LineOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'PrimaryOrderHeader')))
    _LineOrder_backMixMode = CHOICE(name='backMixMode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'BackgroundMixMode')), opt=True)
    _LineOrder_startX = CHOICE(name='startX', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _LineOrder_startY = CHOICE(name='startY', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _LineOrder_endX = CHOICE(name='endX', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _LineOrder_endY = CHOICE(name='endY', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _LineOrder_backgroundColor = SEQ(name='backgroundColor', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Color')), opt=True)
    _LineOrder_rop2 = INT(name='rop2', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ROP2')), opt=True)
    _LineOrder_pen = SEQ(name='pen', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Pen')), opt=True)
    _LineOrder_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __LineOrder_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _LineOrder_nonStandardParameters._cont = __LineOrder_nonStandardParameters__item_
    LineOrder._cont = ASN1Dict([
        ('header', _LineOrder_header),
        ('backMixMode', _LineOrder_backMixMode),
        ('startX', _LineOrder_startX),
        ('startY', _LineOrder_startY),
        ('endX', _LineOrder_endX),
        ('endY', _LineOrder_endY),
        ('backgroundColor', _LineOrder_backgroundColor),
        ('rop2', _LineOrder_rop2),
        ('pen', _LineOrder_pen),
        ('nonStandardParameters', _LineOrder_nonStandardParameters),
        ])
    LineOrder._ext = []
    
    #-----< DesktopSaveOrder >-----#
    DesktopSaveOrder = SEQ(name='DesktopSaveOrder', mode=MODE_TYPE)
    _DesktopSaveOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'PrimaryOrderHeader')))
    _DesktopSaveOrder_saveOffset = INT(name='saveOffset', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer32')), opt=True)
    _DesktopSaveOrder_destLeft = CHOICE(name='destLeft', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _DesktopSaveOrder_destTop = CHOICE(name='destTop', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _DesktopSaveOrder_destWidth = CHOICE(name='destWidth', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _DesktopSaveOrder_destHeight = CHOICE(name='destHeight', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _DesktopSaveOrder_action = CHOICE(name='action', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'DesktopSaveAction')), opt=True)
    _DesktopSaveOrder_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __DesktopSaveOrder_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _DesktopSaveOrder_nonStandardParameters._cont = __DesktopSaveOrder_nonStandardParameters__item_
    DesktopSaveOrder._cont = ASN1Dict([
        ('header', _DesktopSaveOrder_header),
        ('saveOffset', _DesktopSaveOrder_saveOffset),
        ('destLeft', _DesktopSaveOrder_destLeft),
        ('destTop', _DesktopSaveOrder_destTop),
        ('destWidth', _DesktopSaveOrder_destWidth),
        ('destHeight', _DesktopSaveOrder_destHeight),
        ('action', _DesktopSaveOrder_action),
        ('nonStandardParameters', _DesktopSaveOrder_nonStandardParameters),
        ])
    DesktopSaveOrder._ext = []
    
    #-----< DesktopOriginOrder >-----#
    DesktopOriginOrder = SEQ(name='DesktopOriginOrder', mode=MODE_TYPE)
    _DesktopOriginOrder_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'PrimaryOrderHeader')))
    _DesktopOriginOrder_desktopLeft = CHOICE(name='desktopLeft', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _DesktopOriginOrder_desktopTop = CHOICE(name='desktopTop', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate')), opt=True)
    _DesktopOriginOrder_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __DesktopOriginOrder_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _DesktopOriginOrder_nonStandardParameters._cont = __DesktopOriginOrder_nonStandardParameters__item_
    DesktopOriginOrder._cont = ASN1Dict([
        ('header', _DesktopOriginOrder_header),
        ('desktopLeft', _DesktopOriginOrder_desktopLeft),
        ('desktopTop', _DesktopOriginOrder_desktopTop),
        ('nonStandardParameters', _DesktopOriginOrder_nonStandardParameters),
        ])
    DesktopOriginOrder._ext = []
    
    #-----< ColorSpaceOrder >-----#
    ColorSpaceOrder = SEQ(name='ColorSpaceOrder', mode=MODE_TYPE)
    _ColorSpaceOrder_colorSpace = CHOICE(name='colorSpace', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ColorSpaceSpecifier')))
    _ColorSpaceOrder_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ColorSpaceOrder_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _ColorSpaceOrder_nonStandardParameters._cont = __ColorSpaceOrder_nonStandardParameters__item_
    ColorSpaceOrder._cont = ASN1Dict([
        ('colorSpace', _ColorSpaceOrder_colorSpace),
        ('nonStandardParameters', _ColorSpaceOrder_nonStandardParameters),
        ])
    ColorSpaceOrder._ext = []
    
    #-----< PrimaryOrder >-----#
    PrimaryOrder = CHOICE(name='PrimaryOrder', mode=MODE_TYPE)
    _PrimaryOrder_destinationBlt = SEQ(name='destinationBlt', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'DestinationBltOrder')))
    _PrimaryOrder_patternBlt = SEQ(name='patternBlt', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'PatternBltOrder')))
    _PrimaryOrder_screenBlt = SEQ(name='screenBlt', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ScreenBltOrder')))
    _PrimaryOrder_memoryBlt = SEQ(name='memoryBlt', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'MemoryBltOrder')))
    _PrimaryOrder_memoryThreeWayBlt = SEQ(name='memoryThreeWayBlt', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'MemoryThreeWayBltOrder')))
    _PrimaryOrder_text = SEQ(name='text', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'TextOrder')))
    _PrimaryOrder_extendedText = SEQ(name='extendedText', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ExtendedTextOrder')))
    _PrimaryOrder_frame = SEQ(name='frame', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'FrameOrder')))
    _PrimaryOrder_rectangle = SEQ(name='rectangle', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'RectangleOrder')))
    _PrimaryOrder_line = SEQ(name='line', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'LineOrder')))
    _PrimaryOrder_opaqueRectangle = SEQ(name='opaqueRectangle', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'OpaqueRectangleOrder')))
    _PrimaryOrder_desktopSave = SEQ(name='desktopSave', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'DesktopSaveOrder')))
    _PrimaryOrder_desktopOrigin = SEQ(name='desktopOrigin', mode=MODE_TYPE, tag=(32, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'DesktopOriginOrder')))
    _PrimaryOrder_nonStandardPrimaryOrder = SEQ(name='nonStandardPrimaryOrder', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    PrimaryOrder._cont = ASN1Dict([
        ('destinationBlt', _PrimaryOrder_destinationBlt),
        ('patternBlt', _PrimaryOrder_patternBlt),
        ('screenBlt', _PrimaryOrder_screenBlt),
        ('memoryBlt', _PrimaryOrder_memoryBlt),
        ('memoryThreeWayBlt', _PrimaryOrder_memoryThreeWayBlt),
        ('text', _PrimaryOrder_text),
        ('extendedText', _PrimaryOrder_extendedText),
        ('frame', _PrimaryOrder_frame),
        ('rectangle', _PrimaryOrder_rectangle),
        ('line', _PrimaryOrder_line),
        ('opaqueRectangle', _PrimaryOrder_opaqueRectangle),
        ('desktopSave', _PrimaryOrder_desktopSave),
        ('desktopOrigin', _PrimaryOrder_desktopOrigin),
        ('nonStandardPrimaryOrder', _PrimaryOrder_nonStandardPrimaryOrder),
        ])
    PrimaryOrder._ext = []
    
    #-----< SecondaryOrder >-----#
    SecondaryOrder = CHOICE(name='SecondaryOrder', mode=MODE_TYPE)
    _SecondaryOrder_cacheBitmap = SEQ(name='cacheBitmap', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'CacheBitmapOrder')))
    _SecondaryOrder_cacheColorTable = SEQ(name='cacheColorTable', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'CacheColorTableOrder')))
    _SecondaryOrder_colorSpaceOrder = SEQ(name='colorSpaceOrder', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ColorSpaceOrder')))
    _SecondaryOrder_nonStandardSecondaryOrder = SEQ(name='nonStandardSecondaryOrder', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    SecondaryOrder._cont = ASN1Dict([
        ('cacheBitmap', _SecondaryOrder_cacheBitmap),
        ('cacheColorTable', _SecondaryOrder_cacheColorTable),
        ('colorSpaceOrder', _SecondaryOrder_colorSpaceOrder),
        ('nonStandardSecondaryOrder', _SecondaryOrder_nonStandardSecondaryOrder),
        ])
    SecondaryOrder._ext = []
    
    #-----< UpdateOrder >-----#
    UpdateOrder = CHOICE(name='UpdateOrder', mode=MODE_TYPE)
    _UpdateOrder_primaryOrder = CHOICE(name='primaryOrder', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'PrimaryOrder')))
    _UpdateOrder_secondaryOrder = CHOICE(name='secondaryOrder', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'SecondaryOrder')))
    _UpdateOrder_nonStandardOrder = SEQ(name='nonStandardOrder', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    UpdateOrder._cont = ASN1Dict([
        ('primaryOrder', _UpdateOrder_primaryOrder),
        ('secondaryOrder', _UpdateOrder_secondaryOrder),
        ('nonStandardOrder', _UpdateOrder_nonStandardOrder),
        ])
    UpdateOrder._ext = []
    
    #-----< ApplicationPDU >-----#
    ApplicationPDU = SEQ(name='ApplicationPDU', mode=MODE_TYPE)
    _ApplicationPDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ShareDataHeader')))
    _ApplicationPDU_action = CHOICE(name='action', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __ApplicationPDU_action_notifyHostedApplications = SEQ(name='notifyHostedApplications', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'NotifyHostedApplications')))
    __ApplicationPDU_action_unhostApplication = SEQ(name='unhostApplication', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'UnhostApplication')))
    __ApplicationPDU_action_nonStandardAction = SEQ(name='nonStandardAction', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _ApplicationPDU_action._cont = ASN1Dict([
        ('notifyHostedApplications', __ApplicationPDU_action_notifyHostedApplications),
        ('unhostApplication', __ApplicationPDU_action_unhostApplication),
        ('nonStandardAction', __ApplicationPDU_action_nonStandardAction),
        ])
    _ApplicationPDU_action._ext = []
    _ApplicationPDU_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ApplicationPDU_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _ApplicationPDU_nonStandardParameters._cont = __ApplicationPDU_nonStandardParameters__item_
    ApplicationPDU._cont = ASN1Dict([
        ('shareDataHeader', _ApplicationPDU_shareDataHeader),
        ('action', _ApplicationPDU_action),
        ('nonStandardParameters', _ApplicationPDU_nonStandardParameters),
        ])
    ApplicationPDU._ext = []
    
    #-----< ControlPDU >-----#
    ControlPDU = SEQ(name='ControlPDU', mode=MODE_TYPE)
    _ControlPDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ShareDataHeader')))
    _ControlPDU_action = CHOICE(name='action', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __ControlPDU_action_requestControl = SEQ(name='requestControl', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'RequestControl')))
    __ControlPDU_action_grantControl = SEQ(name='grantControl', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'GrantControl')))
    __ControlPDU_action_detach = SEQ(name='detach', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Detach')))
    __ControlPDU_action_cooperate = SEQ(name='cooperate', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Cooperate')))
    __ControlPDU_action_nonStandardAction = SEQ(name='nonStandardAction', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _ControlPDU_action._cont = ASN1Dict([
        ('requestControl', __ControlPDU_action_requestControl),
        ('grantControl', __ControlPDU_action_grantControl),
        ('detach', __ControlPDU_action_detach),
        ('cooperate', __ControlPDU_action_cooperate),
        ('nonStandardAction', __ControlPDU_action_nonStandardAction),
        ])
    _ControlPDU_action._ext = []
    _ControlPDU_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ControlPDU_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _ControlPDU_nonStandardParameters._cont = __ControlPDU_nonStandardParameters__item_
    ControlPDU._cont = ASN1Dict([
        ('shareDataHeader', _ControlPDU_shareDataHeader),
        ('action', _ControlPDU_action),
        ('nonStandardParameters', _ControlPDU_nonStandardParameters),
        ])
    ControlPDU._ext = []
    
    #-----< FlowResponsePDU >-----#
    FlowResponsePDU = SEQ(name='FlowResponsePDU', mode=MODE_TYPE)
    _FlowResponsePDU_flowIdentifier = INT(name='flowIdentifier', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _FlowResponsePDU_flowIdentifier._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=None, er=[])
    _FlowResponsePDU_flowNumber = INT(name='flowNumber', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer8')))
    _FlowResponsePDU_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __FlowResponsePDU_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _FlowResponsePDU_nonStandardParameters._cont = __FlowResponsePDU_nonStandardParameters__item_
    FlowResponsePDU._cont = ASN1Dict([
        ('flowIdentifier', _FlowResponsePDU_flowIdentifier),
        ('flowNumber', _FlowResponsePDU_flowNumber),
        ('nonStandardParameters', _FlowResponsePDU_nonStandardParameters),
        ])
    FlowResponsePDU._ext = []
    
    #-----< FlowStopPDU >-----#
    FlowStopPDU = SEQ(name='FlowStopPDU', mode=MODE_TYPE)
    _FlowStopPDU_flowIdentifier = INT(name='flowIdentifier', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _FlowStopPDU_flowIdentifier._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=None, er=[])
    _FlowStopPDU_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __FlowStopPDU_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _FlowStopPDU_nonStandardParameters._cont = __FlowStopPDU_nonStandardParameters__item_
    FlowStopPDU._cont = ASN1Dict([
        ('flowIdentifier', _FlowStopPDU_flowIdentifier),
        ('nonStandardParameters', _FlowStopPDU_nonStandardParameters),
        ])
    FlowStopPDU._ext = []
    
    #-----< FlowTestPDU >-----#
    FlowTestPDU = SEQ(name='FlowTestPDU', mode=MODE_TYPE)
    _FlowTestPDU_flowIdentifier = INT(name='flowIdentifier', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _FlowTestPDU_flowIdentifier._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=None, er=[])
    _FlowTestPDU_flowNumber = INT(name='flowNumber', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer8')))
    _FlowTestPDU_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __FlowTestPDU_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _FlowTestPDU_nonStandardParameters._cont = __FlowTestPDU_nonStandardParameters__item_
    FlowTestPDU._cont = ASN1Dict([
        ('flowIdentifier', _FlowTestPDU_flowIdentifier),
        ('flowNumber', _FlowTestPDU_flowNumber),
        ('nonStandardParameters', _FlowTestPDU_nonStandardParameters),
        ])
    FlowTestPDU._ext = []
    
    #-----< FontPDU >-----#
    FontPDU = SEQ(name='FontPDU', mode=MODE_TYPE)
    _FontPDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ShareDataHeader')))
    _FontPDU_fontList = SEQ_OF(name='fontList', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __FontPDU_fontList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'FontAttribute')))
    _FontPDU_fontList._cont = __FontPDU_fontList__item_
    _FontPDU_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __FontPDU_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _FontPDU_nonStandardParameters._cont = __FontPDU_nonStandardParameters__item_
    FontPDU._cont = ASN1Dict([
        ('shareDataHeader', _FontPDU_shareDataHeader),
        ('fontList', _FontPDU_fontList),
        ('nonStandardParameters', _FontPDU_nonStandardParameters),
        ])
    FontPDU._ext = []
    
    #-----< InputPDU >-----#
    InputPDU = SEQ(name='InputPDU', mode=MODE_TYPE)
    _InputPDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ShareDataHeader')))
    _InputPDU_eventList = SEQ_OF(name='eventList', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __InputPDU_eventList__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'InputEvent')))
    _InputPDU_eventList._cont = __InputPDU_eventList__item_
    _InputPDU_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __InputPDU_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _InputPDU_nonStandardParameters._cont = __InputPDU_nonStandardParameters__item_
    InputPDU._cont = ASN1Dict([
        ('shareDataHeader', _InputPDU_shareDataHeader),
        ('eventList', _InputPDU_eventList),
        ('nonStandardParameters', _InputPDU_nonStandardParameters),
        ])
    InputPDU._ext = []
    
    #-----< MediatedControlPDU >-----#
    MediatedControlPDU = SEQ(name='MediatedControlPDU', mode=MODE_TYPE)
    _MediatedControlPDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ShareDataHeader')))
    _MediatedControlPDU_action = CHOICE(name='action', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __MediatedControlPDU_action_takeControlRequest = SEQ(name='takeControlRequest', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'TakeControlRequest')))
    __MediatedControlPDU_action_passControlRequest = SEQ(name='passControlRequest', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'PassControlRequest')))
    __MediatedControlPDU_action_detachRequest = SEQ(name='detachRequest', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'DetachRequest')))
    __MediatedControlPDU_action_confirmTakeResponse = SEQ(name='confirmTakeResponse', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ConfirmTakeResponse')))
    __MediatedControlPDU_action_denyTakeResponse = SEQ(name='denyTakeResponse', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'DenyTakeResponse')))
    __MediatedControlPDU_action_confirmDetachResponse = SEQ(name='confirmDetachResponse', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ConfirmDetachResponse')))
    __MediatedControlPDU_action_denyDetachResponse = SEQ(name='denyDetachResponse', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'DenyDetachResponse')))
    __MediatedControlPDU_action_denyPassResponse = SEQ(name='denyPassResponse', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'DenyPassResponse')))
    __MediatedControlPDU_action_remoteDetachRequest = SEQ(name='remoteDetachRequest', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'RemoteDetachRequest')))
    __MediatedControlPDU_action_denyRemoteDetachResponse = SEQ(name='denyRemoteDetachResponse', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'DenyRemoteDetachResponse')))
    __MediatedControlPDU_action_nonStandardAction = SEQ(name='nonStandardAction', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _MediatedControlPDU_action._cont = ASN1Dict([
        ('takeControlRequest', __MediatedControlPDU_action_takeControlRequest),
        ('passControlRequest', __MediatedControlPDU_action_passControlRequest),
        ('detachRequest', __MediatedControlPDU_action_detachRequest),
        ('confirmTakeResponse', __MediatedControlPDU_action_confirmTakeResponse),
        ('denyTakeResponse', __MediatedControlPDU_action_denyTakeResponse),
        ('confirmDetachResponse', __MediatedControlPDU_action_confirmDetachResponse),
        ('denyDetachResponse', __MediatedControlPDU_action_denyDetachResponse),
        ('denyPassResponse', __MediatedControlPDU_action_denyPassResponse),
        ('remoteDetachRequest', __MediatedControlPDU_action_remoteDetachRequest),
        ('denyRemoteDetachResponse', __MediatedControlPDU_action_denyRemoteDetachResponse),
        ('nonStandardAction', __MediatedControlPDU_action_nonStandardAction),
        ])
    _MediatedControlPDU_action._ext = []
    _MediatedControlPDU_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __MediatedControlPDU_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _MediatedControlPDU_nonStandardParameters._cont = __MediatedControlPDU_nonStandardParameters__item_
    MediatedControlPDU._cont = ASN1Dict([
        ('shareDataHeader', _MediatedControlPDU_shareDataHeader),
        ('action', _MediatedControlPDU_action),
        ('nonStandardParameters', _MediatedControlPDU_nonStandardParameters),
        ])
    MediatedControlPDU._ext = []
    
    #-----< PointerPDU >-----#
    PointerPDU = SEQ(name='PointerPDU', mode=MODE_TYPE)
    _PointerPDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ShareDataHeader')))
    _PointerPDU_pointerData = CHOICE(name='pointerData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __PointerPDU_pointerData_systemPointerType = CHOICE(name='systemPointerType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'SystemPointerType')))
    __PointerPDU_pointerData_monoPointerAttribute = SEQ(name='monoPointerAttribute', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'MonoPointerAttribute')))
    __PointerPDU_pointerData_colorPointerAttribute = SEQ(name='colorPointerAttribute', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ColorPointerAttribute')))
    __PointerPDU_pointerData_cachedPointerIndex = INT(name='cachedPointerIndex', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    __PointerPDU_pointerData_pointerPosition = SEQ(name='pointerPosition', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Point16')))
    __PointerPDU_pointerData_nonStandardPointer = SEQ(name='nonStandardPointer', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _PointerPDU_pointerData._cont = ASN1Dict([
        ('systemPointerType', __PointerPDU_pointerData_systemPointerType),
        ('monoPointerAttribute', __PointerPDU_pointerData_monoPointerAttribute),
        ('colorPointerAttribute', __PointerPDU_pointerData_colorPointerAttribute),
        ('cachedPointerIndex', __PointerPDU_pointerData_cachedPointerIndex),
        ('pointerPosition', __PointerPDU_pointerData_pointerPosition),
        ('nonStandardPointer', __PointerPDU_pointerData_nonStandardPointer),
        ])
    _PointerPDU_pointerData._ext = []
    _PointerPDU_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PointerPDU_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _PointerPDU_nonStandardParameters._cont = __PointerPDU_nonStandardParameters__item_
    PointerPDU._cont = ASN1Dict([
        ('shareDataHeader', _PointerPDU_shareDataHeader),
        ('pointerData', _PointerPDU_pointerData),
        ('nonStandardParameters', _PointerPDU_nonStandardParameters),
        ])
    PointerPDU._ext = []
    
    #-----< RemoteSharePDU >-----#
    RemoteSharePDU = SEQ(name='RemoteSharePDU', mode=MODE_TYPE)
    _RemoteSharePDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ShareDataHeader')))
    _RemoteSharePDU_action = CHOICE(name='action', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __RemoteSharePDU_action_requestRemoteShare = SEQ(name='requestRemoteShare', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'RequestRemoteShare')))
    __RemoteSharePDU_action_confirmRemoteShare = SEQ(name='confirmRemoteShare', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ConfirmRemoteShare')))
    __RemoteSharePDU_action_denyRemoteShare = CHOICE(name='denyRemoteShare', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'DenyRemoteShare')))
    __RemoteSharePDU_action_nonStandardAction = SEQ(name='nonStandardAction', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _RemoteSharePDU_action._cont = ASN1Dict([
        ('requestRemoteShare', __RemoteSharePDU_action_requestRemoteShare),
        ('confirmRemoteShare', __RemoteSharePDU_action_confirmRemoteShare),
        ('denyRemoteShare', __RemoteSharePDU_action_denyRemoteShare),
        ('nonStandardAction', __RemoteSharePDU_action_nonStandardAction),
        ])
    _RemoteSharePDU_action._ext = []
    _RemoteSharePDU_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __RemoteSharePDU_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _RemoteSharePDU_nonStandardParameters._cont = __RemoteSharePDU_nonStandardParameters__item_
    RemoteSharePDU._cont = ASN1Dict([
        ('shareDataHeader', _RemoteSharePDU_shareDataHeader),
        ('action', _RemoteSharePDU_action),
        ('nonStandardParameters', _RemoteSharePDU_nonStandardParameters),
        ])
    RemoteSharePDU._ext = []
    
    #-----< SynchronizePDU >-----#
    SynchronizePDU = SEQ(name='SynchronizePDU', mode=MODE_TYPE)
    _SynchronizePDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ShareDataHeader')))
    _SynchronizePDU_targetUser = INT(name='targetUser', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'UserID')))
    _SynchronizePDU_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SynchronizePDU_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _SynchronizePDU_nonStandardParameters._cont = __SynchronizePDU_nonStandardParameters__item_
    SynchronizePDU._cont = ASN1Dict([
        ('shareDataHeader', _SynchronizePDU_shareDataHeader),
        ('targetUser', _SynchronizePDU_targetUser),
        ('nonStandardParameters', _SynchronizePDU_nonStandardParameters),
        ])
    SynchronizePDU._ext = []
    
    #-----< UpdateBitmapPDU >-----#
    UpdateBitmapPDU = SEQ(name='UpdateBitmapPDU', mode=MODE_TYPE)
    _UpdateBitmapPDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ShareDataHeader')))
    _UpdateBitmapPDU_destLeft = INT(name='destLeft', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate16')))
    _UpdateBitmapPDU_destTop = INT(name='destTop', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate16')))
    _UpdateBitmapPDU_destRight = INT(name='destRight', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate16')))
    _UpdateBitmapPDU_destBottom = INT(name='destBottom', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Coordinate16')))
    _UpdateBitmapPDU_width = INT(name='width', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _UpdateBitmapPDU_height = INT(name='height', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _UpdateBitmapPDU_bitsPerPixel = INT(name='bitsPerPixel', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _UpdateBitmapPDU_bitsPerPixel._const_val = ASN1Set(rv=[1, 4, 8], rr=[], ev=None, er=[])
    _UpdateBitmapPDU_compressedFlag = BOOL(name='compressedFlag', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _UpdateBitmapPDU_bitmapData = CHOICE(name='bitmapData', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'BitmapData')))
    _UpdateBitmapPDU_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __UpdateBitmapPDU_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _UpdateBitmapPDU_nonStandardParameters._cont = __UpdateBitmapPDU_nonStandardParameters__item_
    UpdateBitmapPDU._cont = ASN1Dict([
        ('shareDataHeader', _UpdateBitmapPDU_shareDataHeader),
        ('destLeft', _UpdateBitmapPDU_destLeft),
        ('destTop', _UpdateBitmapPDU_destTop),
        ('destRight', _UpdateBitmapPDU_destRight),
        ('destBottom', _UpdateBitmapPDU_destBottom),
        ('width', _UpdateBitmapPDU_width),
        ('height', _UpdateBitmapPDU_height),
        ('bitsPerPixel', _UpdateBitmapPDU_bitsPerPixel),
        ('compressedFlag', _UpdateBitmapPDU_compressedFlag),
        ('bitmapData', _UpdateBitmapPDU_bitmapData),
        ('nonStandardParameters', _UpdateBitmapPDU_nonStandardParameters),
        ])
    UpdateBitmapPDU._ext = []
    
    #-----< UpdateOrdersPDU >-----#
    UpdateOrdersPDU = SEQ(name='UpdateOrdersPDU', mode=MODE_TYPE)
    _UpdateOrdersPDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ShareDataHeader')))
    _UpdateOrdersPDU_orderList = SEQ_OF(name='orderList', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __UpdateOrdersPDU_orderList__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'UpdateOrder')))
    _UpdateOrdersPDU_orderList._cont = __UpdateOrdersPDU_orderList__item_
    _UpdateOrdersPDU_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __UpdateOrdersPDU_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _UpdateOrdersPDU_nonStandardParameters._cont = __UpdateOrdersPDU_nonStandardParameters__item_
    UpdateOrdersPDU._cont = ASN1Dict([
        ('shareDataHeader', _UpdateOrdersPDU_shareDataHeader),
        ('orderList', _UpdateOrdersPDU_orderList),
        ('nonStandardParameters', _UpdateOrdersPDU_nonStandardParameters),
        ])
    UpdateOrdersPDU._ext = []
    
    #-----< UpdatePalettePDU >-----#
    UpdatePalettePDU = SEQ(name='UpdatePalettePDU', mode=MODE_TYPE)
    _UpdatePalettePDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ShareDataHeader')))
    _UpdatePalettePDU_palette = CHOICE(name='palette', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ColorPalette')))
    _UpdatePalettePDU_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __UpdatePalettePDU_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _UpdatePalettePDU_nonStandardParameters._cont = __UpdatePalettePDU_nonStandardParameters__item_
    UpdatePalettePDU._cont = ASN1Dict([
        ('shareDataHeader', _UpdatePalettePDU_shareDataHeader),
        ('palette', _UpdatePalettePDU_palette),
        ('nonStandardParameters', _UpdatePalettePDU_nonStandardParameters),
        ])
    UpdatePalettePDU._ext = []
    
    #-----< UpdateSynchronizePDU >-----#
    UpdateSynchronizePDU = SEQ(name='UpdateSynchronizePDU', mode=MODE_TYPE)
    _UpdateSynchronizePDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ShareDataHeader')))
    _UpdateSynchronizePDU_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __UpdateSynchronizePDU_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _UpdateSynchronizePDU_nonStandardParameters._cont = __UpdateSynchronizePDU_nonStandardParameters__item_
    UpdateSynchronizePDU._cont = ASN1Dict([
        ('shareDataHeader', _UpdateSynchronizePDU_shareDataHeader),
        ('nonStandardParameters', _UpdateSynchronizePDU_nonStandardParameters),
        ])
    UpdateSynchronizePDU._ext = []
    
    #-----< WindowActivationPDU >-----#
    WindowActivationPDU = SEQ(name='WindowActivationPDU', mode=MODE_TYPE)
    _WindowActivationPDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ShareDataHeader')))
    _WindowActivationPDU_action = CHOICE(name='action', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __WindowActivationPDU_action_localWindowActive = SEQ(name='localWindowActive', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'LocalWindowActiveIndication')))
    __WindowActivationPDU_action_hostedWindowActive = SEQ(name='hostedWindowActive', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'HostedWindowActiveIndication')))
    __WindowActivationPDU_action_hostedWindowInvisible = SEQ(name='hostedWindowInvisible', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'HostedWindowInvisibleIndication')))
    __WindowActivationPDU_action_pointerDeviceCapture = SEQ(name='pointerDeviceCapture', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'PointerDeviceCaptureIndication')))
    __WindowActivationPDU_action_activateWindow = SEQ(name='activateWindow', mode=MODE_TYPE, tag=(12769, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ActivateWindowRequest')))
    __WindowActivationPDU_action_closeWindow = SEQ(name='closeWindow', mode=MODE_TYPE, tag=(12770, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'CloseWindowRequest')))
    __WindowActivationPDU_action_restoreWindow = SEQ(name='restoreWindow', mode=MODE_TYPE, tag=(12771, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'RestoreWindowRequest')))
    __WindowActivationPDU_action_windowManagerMenu = SEQ(name='windowManagerMenu', mode=MODE_TYPE, tag=(12772, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'WindowManagerMenuRequest')))
    __WindowActivationPDU_action_activationHelpKey = SEQ(name='activationHelpKey', mode=MODE_TYPE, tag=(12785, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ActivationHelpKeyRequest')))
    __WindowActivationPDU_action_activationHelpIndexKey = SEQ(name='activationHelpIndexKey', mode=MODE_TYPE, tag=(12786, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ActivationHelpIndexKeyRequest')))
    __WindowActivationPDU_action_activationHelpExtendedKey = SEQ(name='activationHelpExtendedKey', mode=MODE_TYPE, tag=(12787, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ActivationHelpExtendedKeyRequest')))
    __WindowActivationPDU_action_nonStandardAction = SEQ(name='nonStandardAction', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _WindowActivationPDU_action._cont = ASN1Dict([
        ('localWindowActive', __WindowActivationPDU_action_localWindowActive),
        ('hostedWindowActive', __WindowActivationPDU_action_hostedWindowActive),
        ('hostedWindowInvisible', __WindowActivationPDU_action_hostedWindowInvisible),
        ('pointerDeviceCapture', __WindowActivationPDU_action_pointerDeviceCapture),
        ('activateWindow', __WindowActivationPDU_action_activateWindow),
        ('closeWindow', __WindowActivationPDU_action_closeWindow),
        ('restoreWindow', __WindowActivationPDU_action_restoreWindow),
        ('windowManagerMenu', __WindowActivationPDU_action_windowManagerMenu),
        ('activationHelpKey', __WindowActivationPDU_action_activationHelpKey),
        ('activationHelpIndexKey', __WindowActivationPDU_action_activationHelpIndexKey),
        ('activationHelpExtendedKey', __WindowActivationPDU_action_activationHelpExtendedKey),
        ('nonStandardAction', __WindowActivationPDU_action_nonStandardAction),
        ])
    _WindowActivationPDU_action._ext = []
    _WindowActivationPDU_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __WindowActivationPDU_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _WindowActivationPDU_nonStandardParameters._cont = __WindowActivationPDU_nonStandardParameters__item_
    WindowActivationPDU._cont = ASN1Dict([
        ('shareDataHeader', _WindowActivationPDU_shareDataHeader),
        ('action', _WindowActivationPDU_action),
        ('nonStandardParameters', _WindowActivationPDU_nonStandardParameters),
        ])
    WindowActivationPDU._ext = []
    
    #-----< WindowListPDU >-----#
    WindowListPDU = SEQ(name='WindowListPDU', mode=MODE_TYPE)
    _WindowListPDU_shareDataHeader = SEQ(name='shareDataHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ShareDataHeader')))
    _WindowListPDU_listTime = INT(name='listTime', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _WindowListPDU_listID = INT(name='listID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'Integer16')))
    _WindowListPDU_windowAttributeList = SEQ_OF(name='windowAttributeList', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __WindowListPDU_windowAttributeList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'WindowAttribute')))
    _WindowListPDU_windowAttributeList._cont = __WindowListPDU_windowAttributeList__item_
    _WindowListPDU_windowTitleList = SEQ_OF(name='windowTitleList', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __WindowListPDU_windowTitleList__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'WindowTitle')))
    _WindowListPDU_windowTitleList._cont = __WindowListPDU_windowTitleList__item_
    _WindowListPDU_nonStandardParameters = SEQ_OF(name='nonStandardParameters', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __WindowListPDU_nonStandardParameters__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    _WindowListPDU_nonStandardParameters._cont = __WindowListPDU_nonStandardParameters__item_
    WindowListPDU._cont = ASN1Dict([
        ('shareDataHeader', _WindowListPDU_shareDataHeader),
        ('listTime', _WindowListPDU_listTime),
        ('listID', _WindowListPDU_listID),
        ('windowAttributeList', _WindowListPDU_windowAttributeList),
        ('windowTitleList', _WindowListPDU_windowTitleList),
        ('nonStandardParameters', _WindowListPDU_nonStandardParameters),
        ])
    WindowListPDU._ext = []
    
    #-----< ASNonStandardPDU >-----#
    ASNonStandardPDU = SEQ(name='ASNonStandardPDU', mode=MODE_TYPE)
    _ASNonStandardPDU_nonStandardParameter = SEQ(name='nonStandardParameter', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('GCC-PROTOCOL', 'NonStandardParameter')))
    ASNonStandardPDU._cont = ASN1Dict([
        ('nonStandardParameter', _ASNonStandardPDU_nonStandardParameter),
        ])
    ASNonStandardPDU._ext = []
    
    #-----< SharePDU >-----#
    SharePDU = CHOICE(name='SharePDU', mode=MODE_TYPE)
    _SharePDU_applicationPDU = SEQ(name='applicationPDU', mode=MODE_TYPE, tag=(25, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ApplicationPDU')))
    _SharePDU_controlPDU = SEQ(name='controlPDU', mode=MODE_TYPE, tag=(20, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ControlPDU')))
    _SharePDU_flowResponsePDU = SEQ(name='flowResponsePDU', mode=MODE_TYPE, tag=(66, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'FlowResponsePDU')))
    _SharePDU_flowStopPDU = SEQ(name='flowStopPDU', mode=MODE_TYPE, tag=(67, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'FlowStopPDU')))
    _SharePDU_flowTestPDU = SEQ(name='flowTestPDU', mode=MODE_TYPE, tag=(65, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'FlowTestPDU')))
    _SharePDU_fontPDU = SEQ(name='fontPDU', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'FontPDU')))
    _SharePDU_inputPDU = SEQ(name='inputPDU', mode=MODE_TYPE, tag=(28, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'InputPDU')))
    _SharePDU_mediatedControlPDU = SEQ(name='mediatedControlPDU', mode=MODE_TYPE, tag=(29, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'MediatedControlPDU')))
    _SharePDU_pointerPDU = SEQ(name='pointerPDU', mode=MODE_TYPE, tag=(27, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'PointerPDU')))
    _SharePDU_remoteSharePDU = SEQ(name='remoteSharePDU', mode=MODE_TYPE, tag=(30, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'RemoteSharePDU')))
    _SharePDU_synchronizePDU = SEQ(name='synchronizePDU', mode=MODE_TYPE, tag=(31, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'SynchronizePDU')))
    _SharePDU_updateBitmapPDU = SEQ(name='updateBitmapPDU', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'UpdateBitmapPDU')))
    _SharePDU_updateOrdersPDU = SEQ(name='updateOrdersPDU', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'UpdateOrdersPDU')))
    _SharePDU_updateSynchronizePDU = SEQ(name='updateSynchronizePDU', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'UpdateSynchronizePDU')))
    _SharePDU_updatePalettePDU = SEQ(name='updatePalettePDU', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'UpdatePalettePDU')))
    _SharePDU_windowActivationPDU = SEQ(name='windowActivationPDU', mode=MODE_TYPE, tag=(23, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'WindowActivationPDU')))
    _SharePDU_windowListPDU = SEQ(name='windowListPDU', mode=MODE_TYPE, tag=(24, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'WindowListPDU')))
    _SharePDU_asNonStandardPDU = SEQ(name='asNonStandardPDU', mode=MODE_TYPE, typeref=ASN1RefType(('AS-PROTOCOL-for-PER-encoding', 'ASNonStandardPDU')))
    SharePDU._cont = ASN1Dict([
        ('applicationPDU', _SharePDU_applicationPDU),
        ('controlPDU', _SharePDU_controlPDU),
        ('flowResponsePDU', _SharePDU_flowResponsePDU),
        ('flowStopPDU', _SharePDU_flowStopPDU),
        ('flowTestPDU', _SharePDU_flowTestPDU),
        ('fontPDU', _SharePDU_fontPDU),
        ('inputPDU', _SharePDU_inputPDU),
        ('mediatedControlPDU', _SharePDU_mediatedControlPDU),
        ('pointerPDU', _SharePDU_pointerPDU),
        ('remoteSharePDU', _SharePDU_remoteSharePDU),
        ('synchronizePDU', _SharePDU_synchronizePDU),
        ('updateBitmapPDU', _SharePDU_updateBitmapPDU),
        ('updateOrdersPDU', _SharePDU_updateOrdersPDU),
        ('updateSynchronizePDU', _SharePDU_updateSynchronizePDU),
        ('updatePalettePDU', _SharePDU_updatePalettePDU),
        ('windowActivationPDU', _SharePDU_windowActivationPDU),
        ('windowListPDU', _SharePDU_windowListPDU),
        ('asNonStandardPDU', _SharePDU_asNonStandardPDU),
        ])
    SharePDU._ext = []
    
    _all_ = [
        Coordinate8,
        Coordinate16,
        Integer8,
        Integer12,
        Integer16,
        Integer32,
        Signed16,
        ShareID,
        WindowID,
        T50String,
        ASString,
        ExtraTextFlags,
        FontAttributeFlags,
        KeyboardFlags,
        PointingDeviceFlags,
        TextAttributeFlags,
        WindowAttributeFlags,
        _ActivateWindowRequest_activationWindow,
        __ActivateWindowRequest_nonStandardParameters__item_,
        _ActivateWindowRequest_nonStandardParameters,
        ActivateWindowRequest,
        _ActivationHelpKeyRequest_activationWindow,
        __ActivationHelpKeyRequest_nonStandardParameters__item_,
        _ActivationHelpKeyRequest_nonStandardParameters,
        ActivationHelpKeyRequest,
        _ActivationHelpIndexKeyRequest_activationWindow,
        __ActivationHelpIndexKeyRequest_nonStandardParameters__item_,
        _ActivationHelpIndexKeyRequest_nonStandardParameters,
        ActivationHelpIndexKeyRequest,
        _ActivationHelpExtendedKeyRequest_activationWindow,
        __ActivationHelpExtendedKeyRequest_nonStandardParameters__item_,
        _ActivationHelpExtendedKeyRequest_nonStandardParameters,
        ActivationHelpExtendedKeyRequest,
        _BackgroundMixMode_transparent,
        _BackgroundMixMode_opaque,
        _BackgroundMixMode_nonStandardBackgroundMixMode,
        BackgroundMixMode,
        _BitmapData_uncompressedBitmapData,
        _BitmapData_compressedBitmapData,
        _BitmapData_nonStandardBitmapData,
        BitmapData,
        _Brush_originX,
        _Brush_originY,
        _Brush_style,
        _Brush_hatch,
        _Brush_pattern,
        __Brush_nonStandardParameters__item_,
        _Brush_nonStandardParameters,
        Brush,
        _BrushHatch_style,
        _BrushHatch_patternZero,
        _BrushHatch_nonStandardBrushHatch,
        BrushHatch,
        _BrushStyle_solid,
        _BrushStyle_null,
        _BrushStyle_hatched,
        _BrushStyle_pattern,
        _BrushStyle_nonStandardBrushStyle,
        BrushStyle,
        _CloseWindowRequest_activationWindow,
        __CloseWindowRequest_nonStandardParameters__item_,
        _CloseWindowRequest_nonStandardParameters,
        CloseWindowRequest,
        _Color_c1,
        _Color_c2,
        _Color_c3,
        Color,
        __ColorAccuracyEnhancementRGB_predefinedRGBSpace_nonStandardRGBSpace,
        _ColorAccuracyEnhancementRGB_predefinedRGBSpace,
        __ColorAccuracyEnhancementRGB_generalRGBParameters_gamma,
        __ColorAccuracyEnhancementRGB_generalRGBParameters_colorTemperature,
        ___ColorAccuracyEnhancementRGB_generalRGBParameters_primaries_red,
        ___ColorAccuracyEnhancementRGB_generalRGBParameters_primaries_green,
        ___ColorAccuracyEnhancementRGB_generalRGBParameters_primaries_blue,
        __ColorAccuracyEnhancementRGB_generalRGBParameters_primaries,
        _ColorAccuracyEnhancementRGB_generalRGBParameters,
        ColorAccuracyEnhancementRGB,
        _ColorCIExyChromaticity_x,
        _ColorCIExyChromaticity_y,
        ColorCIExyChromaticity,
        ___ColorPalette_paletteRGB_palette__item_,
        __ColorPalette_paletteRGB_palette,
        __ColorPalette_paletteRGB_enhancement,
        _ColorPalette_paletteRGB,
        _ColorPalette_nonStandardPalette,
        ColorPalette,
        _ColorPointerAttribute_cacheIndex,
        _ColorPointerAttribute_hotSpot,
        _ColorPointerAttribute_width,
        _ColorPointerAttribute_height,
        _ColorPointerAttribute_colorPointerData,
        __ColorPointerAttribute_nonStandardParameters__item_,
        _ColorPointerAttribute_nonStandardParameters,
        ColorPointerAttribute,
        _ColorRGB_red,
        _ColorRGB_green,
        _ColorRGB_blue,
        ColorRGB,
        _ColorSpaceSpecifier_colorSpaceDefault,
        _ColorSpaceSpecifier_colorSpaceRGB,
        _ColorSpaceSpecifier_nonStandardColorSpace,
        ColorSpaceSpecifier,
        _CompressedBitmapData_mainBodySize,
        _CompressedBitmapData_rowSize,
        _CompressedBitmapData_uncompressedSize,
        _CompressedBitmapData_compressedBitmap,
        __CompressedBitmapData_nonStandardParameters__item_,
        _CompressedBitmapData_nonStandardParameters,
        CompressedBitmapData,
        _ConfirmDetachResponse_passControlFlag,
        _ConfirmDetachResponse_sendingReference,
        _ConfirmDetachResponse_originatorReference,
        _ConfirmDetachResponse_originatorID,
        __ConfirmDetachResponse_nonStandardParameters__item_,
        _ConfirmDetachResponse_nonStandardParameters,
        ConfirmDetachResponse,
        __ConfirmRemoteShare_nonStandardParameters__item_,
        _ConfirmRemoteShare_nonStandardParameters,
        ConfirmRemoteShare,
        _ConfirmTakeResponse_passControlFlag,
        _ConfirmTakeResponse_sendingReference,
        _ConfirmTakeResponse_originatorReference,
        _ConfirmTakeResponse_originatorID,
        __ConfirmTakeResponse_nonStandardParameters__item_,
        _ConfirmTakeResponse_nonStandardParameters,
        ConfirmTakeResponse,
        _ControlPriority_always,
        _ControlPriority_never,
        _ControlPriority_confirm,
        _ControlPriority_nonStandardControlPriority,
        ControlPriority,
        __Cooperate_nonStandardParameters__item_,
        _Cooperate_nonStandardParameters,
        Cooperate,
        _Coordinate_absolute,
        _Coordinate_delta,
        _Coordinate_nonStandardCoordinate,
        Coordinate,
        _DesktopSaveAction_desktopSave,
        _DesktopSaveAction_desktopRestore,
        _DesktopSaveAction_nonStandardDesktopSaveAction,
        DesktopSaveAction,
        _DenyDetachResponse_passControlFlag,
        _DenyDetachResponse_sendingReference,
        _DenyDetachResponse_originatorReference,
        _DenyDetachResponse_originatorID,
        __DenyDetachResponse_nonStandardParameters__item_,
        _DenyDetachResponse_nonStandardParameters,
        DenyDetachResponse,
        _DenyPassResponse_passControlFlag,
        _DenyPassResponse_sendingReference,
        _DenyPassResponse_originatorReference,
        _DenyPassResponse_originatorID,
        __DenyPassResponse_nonStandardParameters__item_,
        _DenyPassResponse_nonStandardParameters,
        DenyPassResponse,
        _DenyTakeResponse_passControlFlag,
        _DenyTakeResponse_sendingReference,
        _DenyTakeResponse_originatorReference,
        _DenyTakeResponse_originatorID,
        __DenyTakeResponse_nonStandardParameters__item_,
        _DenyTakeResponse_nonStandardParameters,
        DenyTakeResponse,
        _DenyRemoteDetachResponse_passControlFlag,
        _DenyRemoteDetachResponse_sendingReference,
        _DenyRemoteDetachResponse_originatorReference,
        _DenyRemoteDetachResponse_originatorID,
        __DenyRemoteDetachResponse_nonStandardParameters__item_,
        _DenyRemoteDetachResponse_nonStandardParameters,
        DenyRemoteDetachResponse,
        _DenyRemoteShare_remoteShareDenial,
        _DenyRemoteShare_nonStandardDenial,
        DenyRemoteShare,
        __Detach_nonStandardParameters__item_,
        _Detach_nonStandardParameters,
        Detach,
        _DetachRequest_passControlFlag,
        _DetachRequest_sendingReference,
        _DetachRequest_originatorID,
        __DetachRequest_nonStandardParameters__item_,
        _DetachRequest_nonStandardParameters,
        DetachRequest,
        _FontAttribute_faceName,
        _FontAttribute_fontFlags,
        _FontAttribute_averageWidth,
        _FontAttribute_height,
        _FontAttribute_aspectX,
        _FontAttribute_aspectY,
        _FontAttribute_signature1,
        _FontAttribute_signature2,
        _FontAttribute_signature3,
        _FontAttribute_codePage,
        _FontAttribute_ascent,
        __FontAttribute_nonStandardParameters__item_,
        _FontAttribute_nonStandardParameters,
        FontAttribute,
        _FontCodePage_allCodePoints,
        _FontCodePage_coreCodePoints,
        _FontCodePage_nonStandardFontCodePage,
        FontCodePage,
        _GeneralCompressionSpecifier_v42bisCompression,
        _GeneralCompressionSpecifier_nonStandardCompression,
        GeneralCompressionSpecifier,
        _GrantControl_grantID,
        _GrantControl_controlID,
        __GrantControl_nonStandardParameters__item_,
        _GrantControl_nonStandardParameters,
        GrantControl,
        _HatchStyle_horizontal,
        _HatchStyle_vertical,
        _HatchStyle_forward,
        _HatchStyle_backward,
        _HatchStyle_cross,
        _HatchStyle_diagonal,
        _HatchStyle_nonStandardHatchStyle,
        HatchStyle,
        _HostedWindowActiveIndication_activationID,
        _HostedWindowActiveIndication_activationWindow,
        __HostedWindowActiveIndication_nonStandardParameters__item_,
        _HostedWindowActiveIndication_nonStandardParameters,
        HostedWindowActiveIndication,
        _HostedWindowInvisibleIndication_activationID,
        __HostedWindowInvisibleIndication_nonStandardParameters__item_,
        _HostedWindowInvisibleIndication_nonStandardParameters,
        HostedWindowInvisibleIndication,
        _LocalWindowActiveIndication_activationID,
        __LocalWindowActiveIndication_nonStandardParameters__item_,
        _LocalWindowActiveIndication_nonStandardParameters,
        LocalWindowActiveIndication,
        _MonoPointerAttribute_hotSpot,
        _MonoPointerAttribute_width,
        _MonoPointerAttribute_height,
        _MonoPointerAttribute_monoPointerData,
        __MonoPointerAttribute_nonStandardParameters__item_,
        _MonoPointerAttribute_nonStandardParameters,
        MonoPointerAttribute,
        _NotifyHostedApplications_numberApplications,
        __NotifyHostedApplications_nonStandardParameters__item_,
        _NotifyHostedApplications_nonStandardParameters,
        NotifyHostedApplications,
        _PassControlRequest_passControlFlag,
        _PassControlRequest_sendingReference,
        _PassControlRequest_originatorID,
        __PassControlRequest_nonStandardParameters__item_,
        _PassControlRequest_nonStandardParameters,
        PassControlRequest,
        _Pen_style,
        _Pen_width,
        _Pen_color,
        __Pen_nonStandardParameters__item_,
        _Pen_nonStandardParameters,
        Pen,
        _PenStyle_solid,
        _PenStyle_dashed,
        _PenStyle_dotted,
        _PenStyle_dash_dot,
        _PenStyle_dash_dot_dot,
        _PenStyle_null,
        _PenStyle_nonStandardPenStyle,
        PenStyle,
        _Point16_x,
        _Point16_y,
        Point16,
        _PointerDeviceCaptureIndication_activationID,
        _PointerDeviceCaptureIndication_activationWindow,
        __PointerDeviceCaptureIndication_nonStandardParameters__item_,
        _PointerDeviceCaptureIndication_nonStandardParameters,
        PointerDeviceCaptureIndication,
        _Rectangle16_left,
        _Rectangle16_top,
        _Rectangle16_right,
        _Rectangle16_bottom,
        Rectangle16,
        _RemoteDetachRequest_passControlFlag,
        _RemoteDetachRequest_sendingReference,
        _RemoteDetachRequest_originatorID,
        __RemoteDetachRequest_nonStandardParameters__item_,
        _RemoteDetachRequest_nonStandardParameters,
        RemoteDetachRequest,
        _RemoteShareDenial_incorrectPassword,
        _RemoteShareDenial_remoteShareNotEnabled,
        _RemoteShareDenial_remoteShareInOperationIncoming,
        _RemoteShareDenial_remoteShareInOperationOutgoing,
        _RemoteShareDenial_nonStandardRemoteShareDenial,
        RemoteShareDenial,
        __RequestControl_nonStandardParameters__item_,
        _RequestControl_nonStandardParameters,
        RequestControl,
        _RequestRemoteShare_requestingID,
        _RequestRemoteShare_encryptedPassword,
        __RequestRemoteShare_nonStandardParameters__item_,
        _RequestRemoteShare_nonStandardParameters,
        RequestRemoteShare,
        _RestoreWindowRequest_activationWindow,
        __RestoreWindowRequest_nonStandardParameters__item_,
        _RestoreWindowRequest_nonStandardParameters,
        RestoreWindowRequest,
        ROP2,
        ROP3,
        _SystemPointerType_null,
        _SystemPointerType_default,
        _SystemPointerType_nonStandardSystemPointerValue,
        SystemPointerType,
        _TakeControlRequest_passControlFlag,
        _TakeControlRequest_sendingReference,
        _TakeControlRequest_originatorReference,
        _TakeControlRequest_originatorID,
        __TakeControlRequest_nonStandardParameters__item_,
        _TakeControlRequest_nonStandardParameters,
        TakeControlRequest,
        _UnhostApplication_windowID,
        __UnhostApplication_nonStandardParameters__item_,
        _UnhostApplication_nonStandardParameters,
        UnhostApplication,
        _V42bisCompression_p1,
        _V42bisCompression_p2,
        V42bisCompression,
        _WindowAttribute_windowID,
        _WindowAttribute_windowExtra,
        _WindowAttribute_windowOwner,
        _WindowAttribute_windowFlags,
        _WindowAttribute_windowRectangle,
        __WindowAttribute_nonStandardParameters__item_,
        _WindowAttribute_nonStandardParameters,
        WindowAttribute,
        _WindowManagerMenuRequest_activationWindow,
        _WindowManagerMenuRequest_activationPoint,
        __WindowManagerMenuRequest_nonStandardParameters__item_,
        _WindowManagerMenuRequest_nonStandardParameters,
        WindowManagerMenuRequest,
        _WindowTitle_noTitle,
        _WindowTitle_titleString,
        _WindowTitle_nonStandardWindowTitle,
        WindowTitle,
        _InputEvent_pointingDeviceEvent,
        _InputEvent_codePointEvent,
        _InputEvent_virtualKeyEvent,
        _InputEvent_synchronizeEvent,
        _InputEvent_nonStandardInputEvent,
        InputEvent,
        _CodePointEvent_eventTime,
        _CodePointEvent_keyboardFlags,
        _CodePointEvent_codePoint,
        __CodePointEvent_nonStandardParameters__item_,
        _CodePointEvent_nonStandardParameters,
        CodePointEvent,
        _VirtualKeyEvent_eventTime,
        _VirtualKeyEvent_keyboardFlags,
        _VirtualKeyEvent_virtualKey,
        __VirtualKeyEvent_nonStandardParameters__item_,
        _VirtualKeyEvent_nonStandardParameters,
        VirtualKeyEvent,
        _PointingDeviceEvent_eventTime,
        _PointingDeviceEvent_pointingDeviceFlags,
        _PointingDeviceEvent_pointingDeviceX,
        _PointingDeviceEvent_pointingDeviceY,
        __PointingDeviceEvent_nonStandardParameters__item_,
        _PointingDeviceEvent_nonStandardParameters,
        PointingDeviceEvent,
        _SynchronizeEvent_eventTime,
        __SynchronizeEvent_nonStandardParameters__item_,
        _SynchronizeEvent_nonStandardParameters,
        SynchronizeEvent,
        _PrimaryOrderHeader_boundsLeft,
        _PrimaryOrderHeader_boundsTop,
        _PrimaryOrderHeader_boundsRight,
        _PrimaryOrderHeader_boundsBottom,
        PrimaryOrderHeader,
        _ShareDataHeader_shareID,
        _ShareDataHeader_generalCompressionSpecifier,
        ShareDataHeader,
        _DestinationBltOrder_header,
        _DestinationBltOrder_destLeft,
        _DestinationBltOrder_destTop,
        _DestinationBltOrder_destWidth,
        _DestinationBltOrder_destHeight,
        _DestinationBltOrder_rop3,
        __DestinationBltOrder_nonStandardParameters__item_,
        _DestinationBltOrder_nonStandardParameters,
        DestinationBltOrder,
        _PatternBltOrder_header,
        _PatternBltOrder_destLeft,
        _PatternBltOrder_destTop,
        _PatternBltOrder_destWidth,
        _PatternBltOrder_destHeight,
        _PatternBltOrder_rop3,
        _PatternBltOrder_backgroundColor,
        _PatternBltOrder_foregroundColor,
        _PatternBltOrder_brush,
        __PatternBltOrder_nonStandardParameters__item_,
        _PatternBltOrder_nonStandardParameters,
        PatternBltOrder,
        _ScreenBltOrder_header,
        _ScreenBltOrder_destLeft,
        _ScreenBltOrder_destTop,
        _ScreenBltOrder_destWidth,
        _ScreenBltOrder_destHeight,
        _ScreenBltOrder_rop3,
        _ScreenBltOrder_sourceX,
        _ScreenBltOrder_sourceY,
        __ScreenBltOrder_nonStandardParameters__item_,
        _ScreenBltOrder_nonStandardParameters,
        ScreenBltOrder,
        _CacheBitmapOrder_cacheId,
        _CacheBitmapOrder_bitmapWidth,
        _CacheBitmapOrder_bitmapHeight,
        _CacheBitmapOrder_bitmapBitsPerPel,
        _CacheBitmapOrder_cacheIndex,
        _CacheBitmapOrder_bitmapData,
        __CacheBitmapOrder_nonStandardParameters__item_,
        _CacheBitmapOrder_nonStandardParameters,
        CacheBitmapOrder,
        _CacheColorTableOrder_cacheIndex,
        _CacheColorTableOrder_colorTable,
        __CacheColorTableOrder_nonStandardParameters__item_,
        _CacheColorTableOrder_nonStandardParameters,
        CacheColorTableOrder,
        _MemoryBltOrder_header,
        _MemoryBltOrder_colorTableCacheIndex,
        _MemoryBltOrder_bitmapCacheID,
        _MemoryBltOrder_destLeft,
        _MemoryBltOrder_destTop,
        _MemoryBltOrder_destWidth,
        _MemoryBltOrder_destHeight,
        _MemoryBltOrder_rop3,
        _MemoryBltOrder_sourceX,
        _MemoryBltOrder_sourceY,
        _MemoryBltOrder_bitmapCacheIndex,
        __MemoryBltOrder_nonStandardParameters__item_,
        _MemoryBltOrder_nonStandardParameters,
        MemoryBltOrder,
        _MemoryThreeWayBltOrder_header,
        _MemoryThreeWayBltOrder_colorTableCacheIndex,
        _MemoryThreeWayBltOrder_bitmapCacheID,
        _MemoryThreeWayBltOrder_destLeft,
        _MemoryThreeWayBltOrder_destTop,
        _MemoryThreeWayBltOrder_destWidth,
        _MemoryThreeWayBltOrder_destHeight,
        _MemoryThreeWayBltOrder_rop3,
        _MemoryThreeWayBltOrder_sourceX,
        _MemoryThreeWayBltOrder_sourceY,
        _MemoryThreeWayBltOrder_backgroundColor,
        _MemoryThreeWayBltOrder_foregroundColor,
        _MemoryThreeWayBltOrder_brush,
        _MemoryThreeWayBltOrder_bitmapCacheIndex,
        __MemoryThreeWayBltOrder_nonStandardParameters__item_,
        _MemoryThreeWayBltOrder_nonStandardParameters,
        MemoryThreeWayBltOrder,
        _TextOrder_header,
        _TextOrder_backMixMode,
        _TextOrder_startX,
        _TextOrder_startY,
        _TextOrder_backgroundColor,
        _TextOrder_foregroundColor,
        _TextOrder_extraSpacing,
        _TextOrder_totalBreakSpacing,
        _TextOrder_breakCount,
        _TextOrder_fontHeight,
        _TextOrder_fontWidth,
        _TextOrder_fontWeight,
        _TextOrder_textFlags,
        _TextOrder_fontID,
        _TextOrder_codePointList,
        __TextOrder_nonStandardParameters__item_,
        _TextOrder_nonStandardParameters,
        TextOrder,
        _ExtendedTextOrder_header,
        _ExtendedTextOrder_backMixMode,
        _ExtendedTextOrder_startX,
        _ExtendedTextOrder_startY,
        _ExtendedTextOrder_backgroundColor,
        _ExtendedTextOrder_foregroundColor,
        _ExtendedTextOrder_extraSpacing,
        _ExtendedTextOrder_totalBreakSpacing,
        _ExtendedTextOrder_breakCount,
        _ExtendedTextOrder_fontHeight,
        _ExtendedTextOrder_fontWidth,
        _ExtendedTextOrder_fontWeight,
        _ExtendedTextOrder_textFlags1,
        _ExtendedTextOrder_fontID,
        _ExtendedTextOrder_textFlags2,
        _ExtendedTextOrder_clipLeft,
        _ExtendedTextOrder_clipTop,
        _ExtendedTextOrder_clipRight,
        _ExtendedTextOrder_clipBottom,
        _ExtendedTextOrder_codePointList,
        __ExtendedTextOrder_deltaXList__item_,
        _ExtendedTextOrder_deltaXList,
        __ExtendedTextOrder_nonStandardParameters__item_,
        _ExtendedTextOrder_nonStandardParameters,
        ExtendedTextOrder,
        _FrameOrder_header,
        _FrameOrder_destLeft,
        _FrameOrder_destTop,
        _FrameOrder_destWidth,
        _FrameOrder_destHeight,
        _FrameOrder_rop3,
        _FrameOrder_backgroundColor,
        _FrameOrder_foregroundColor,
        _FrameOrder_brush,
        __FrameOrder_nonStandardParameters__item_,
        _FrameOrder_nonStandardParameters,
        FrameOrder,
        _RectangleOrder_header,
        _RectangleOrder_backMixMode,
        _RectangleOrder_destLeft,
        _RectangleOrder_destTop,
        _RectangleOrder_destRight,
        _RectangleOrder_destBottom,
        _RectangleOrder_backgroundColor,
        _RectangleOrder_foregroundColor,
        _RectangleOrder_brush,
        _RectangleOrder_rop2,
        _RectangleOrder_pen,
        __RectangleOrder_nonStandardParameters__item_,
        _RectangleOrder_nonStandardParameters,
        RectangleOrder,
        _OpaqueRectangleOrder_header,
        _OpaqueRectangleOrder_destLeft,
        _OpaqueRectangleOrder_destTop,
        _OpaqueRectangleOrder_destWidth,
        _OpaqueRectangleOrder_destHeight,
        _OpaqueRectangleOrder_color,
        __OpaqueRectangleOrder_nonStandardParameters__item_,
        _OpaqueRectangleOrder_nonStandardParameters,
        OpaqueRectangleOrder,
        _LineOrder_header,
        _LineOrder_backMixMode,
        _LineOrder_startX,
        _LineOrder_startY,
        _LineOrder_endX,
        _LineOrder_endY,
        _LineOrder_backgroundColor,
        _LineOrder_rop2,
        _LineOrder_pen,
        __LineOrder_nonStandardParameters__item_,
        _LineOrder_nonStandardParameters,
        LineOrder,
        _DesktopSaveOrder_header,
        _DesktopSaveOrder_saveOffset,
        _DesktopSaveOrder_destLeft,
        _DesktopSaveOrder_destTop,
        _DesktopSaveOrder_destWidth,
        _DesktopSaveOrder_destHeight,
        _DesktopSaveOrder_action,
        __DesktopSaveOrder_nonStandardParameters__item_,
        _DesktopSaveOrder_nonStandardParameters,
        DesktopSaveOrder,
        _DesktopOriginOrder_header,
        _DesktopOriginOrder_desktopLeft,
        _DesktopOriginOrder_desktopTop,
        __DesktopOriginOrder_nonStandardParameters__item_,
        _DesktopOriginOrder_nonStandardParameters,
        DesktopOriginOrder,
        _ColorSpaceOrder_colorSpace,
        __ColorSpaceOrder_nonStandardParameters__item_,
        _ColorSpaceOrder_nonStandardParameters,
        ColorSpaceOrder,
        _PrimaryOrder_destinationBlt,
        _PrimaryOrder_patternBlt,
        _PrimaryOrder_screenBlt,
        _PrimaryOrder_memoryBlt,
        _PrimaryOrder_memoryThreeWayBlt,
        _PrimaryOrder_text,
        _PrimaryOrder_extendedText,
        _PrimaryOrder_frame,
        _PrimaryOrder_rectangle,
        _PrimaryOrder_line,
        _PrimaryOrder_opaqueRectangle,
        _PrimaryOrder_desktopSave,
        _PrimaryOrder_desktopOrigin,
        _PrimaryOrder_nonStandardPrimaryOrder,
        PrimaryOrder,
        _SecondaryOrder_cacheBitmap,
        _SecondaryOrder_cacheColorTable,
        _SecondaryOrder_colorSpaceOrder,
        _SecondaryOrder_nonStandardSecondaryOrder,
        SecondaryOrder,
        _UpdateOrder_primaryOrder,
        _UpdateOrder_secondaryOrder,
        _UpdateOrder_nonStandardOrder,
        UpdateOrder,
        _ApplicationPDU_shareDataHeader,
        __ApplicationPDU_action_notifyHostedApplications,
        __ApplicationPDU_action_unhostApplication,
        __ApplicationPDU_action_nonStandardAction,
        _ApplicationPDU_action,
        __ApplicationPDU_nonStandardParameters__item_,
        _ApplicationPDU_nonStandardParameters,
        ApplicationPDU,
        _ControlPDU_shareDataHeader,
        __ControlPDU_action_requestControl,
        __ControlPDU_action_grantControl,
        __ControlPDU_action_detach,
        __ControlPDU_action_cooperate,
        __ControlPDU_action_nonStandardAction,
        _ControlPDU_action,
        __ControlPDU_nonStandardParameters__item_,
        _ControlPDU_nonStandardParameters,
        ControlPDU,
        _FlowResponsePDU_flowIdentifier,
        _FlowResponsePDU_flowNumber,
        __FlowResponsePDU_nonStandardParameters__item_,
        _FlowResponsePDU_nonStandardParameters,
        FlowResponsePDU,
        _FlowStopPDU_flowIdentifier,
        __FlowStopPDU_nonStandardParameters__item_,
        _FlowStopPDU_nonStandardParameters,
        FlowStopPDU,
        _FlowTestPDU_flowIdentifier,
        _FlowTestPDU_flowNumber,
        __FlowTestPDU_nonStandardParameters__item_,
        _FlowTestPDU_nonStandardParameters,
        FlowTestPDU,
        _FontPDU_shareDataHeader,
        __FontPDU_fontList__item_,
        _FontPDU_fontList,
        __FontPDU_nonStandardParameters__item_,
        _FontPDU_nonStandardParameters,
        FontPDU,
        _InputPDU_shareDataHeader,
        __InputPDU_eventList__item_,
        _InputPDU_eventList,
        __InputPDU_nonStandardParameters__item_,
        _InputPDU_nonStandardParameters,
        InputPDU,
        _MediatedControlPDU_shareDataHeader,
        __MediatedControlPDU_action_takeControlRequest,
        __MediatedControlPDU_action_passControlRequest,
        __MediatedControlPDU_action_detachRequest,
        __MediatedControlPDU_action_confirmTakeResponse,
        __MediatedControlPDU_action_denyTakeResponse,
        __MediatedControlPDU_action_confirmDetachResponse,
        __MediatedControlPDU_action_denyDetachResponse,
        __MediatedControlPDU_action_denyPassResponse,
        __MediatedControlPDU_action_remoteDetachRequest,
        __MediatedControlPDU_action_denyRemoteDetachResponse,
        __MediatedControlPDU_action_nonStandardAction,
        _MediatedControlPDU_action,
        __MediatedControlPDU_nonStandardParameters__item_,
        _MediatedControlPDU_nonStandardParameters,
        MediatedControlPDU,
        _PointerPDU_shareDataHeader,
        __PointerPDU_pointerData_systemPointerType,
        __PointerPDU_pointerData_monoPointerAttribute,
        __PointerPDU_pointerData_colorPointerAttribute,
        __PointerPDU_pointerData_cachedPointerIndex,
        __PointerPDU_pointerData_pointerPosition,
        __PointerPDU_pointerData_nonStandardPointer,
        _PointerPDU_pointerData,
        __PointerPDU_nonStandardParameters__item_,
        _PointerPDU_nonStandardParameters,
        PointerPDU,
        _RemoteSharePDU_shareDataHeader,
        __RemoteSharePDU_action_requestRemoteShare,
        __RemoteSharePDU_action_confirmRemoteShare,
        __RemoteSharePDU_action_denyRemoteShare,
        __RemoteSharePDU_action_nonStandardAction,
        _RemoteSharePDU_action,
        __RemoteSharePDU_nonStandardParameters__item_,
        _RemoteSharePDU_nonStandardParameters,
        RemoteSharePDU,
        _SynchronizePDU_shareDataHeader,
        _SynchronizePDU_targetUser,
        __SynchronizePDU_nonStandardParameters__item_,
        _SynchronizePDU_nonStandardParameters,
        SynchronizePDU,
        _UpdateBitmapPDU_shareDataHeader,
        _UpdateBitmapPDU_destLeft,
        _UpdateBitmapPDU_destTop,
        _UpdateBitmapPDU_destRight,
        _UpdateBitmapPDU_destBottom,
        _UpdateBitmapPDU_width,
        _UpdateBitmapPDU_height,
        _UpdateBitmapPDU_bitsPerPixel,
        _UpdateBitmapPDU_compressedFlag,
        _UpdateBitmapPDU_bitmapData,
        __UpdateBitmapPDU_nonStandardParameters__item_,
        _UpdateBitmapPDU_nonStandardParameters,
        UpdateBitmapPDU,
        _UpdateOrdersPDU_shareDataHeader,
        __UpdateOrdersPDU_orderList__item_,
        _UpdateOrdersPDU_orderList,
        __UpdateOrdersPDU_nonStandardParameters__item_,
        _UpdateOrdersPDU_nonStandardParameters,
        UpdateOrdersPDU,
        _UpdatePalettePDU_shareDataHeader,
        _UpdatePalettePDU_palette,
        __UpdatePalettePDU_nonStandardParameters__item_,
        _UpdatePalettePDU_nonStandardParameters,
        UpdatePalettePDU,
        _UpdateSynchronizePDU_shareDataHeader,
        __UpdateSynchronizePDU_nonStandardParameters__item_,
        _UpdateSynchronizePDU_nonStandardParameters,
        UpdateSynchronizePDU,
        _WindowActivationPDU_shareDataHeader,
        __WindowActivationPDU_action_localWindowActive,
        __WindowActivationPDU_action_hostedWindowActive,
        __WindowActivationPDU_action_hostedWindowInvisible,
        __WindowActivationPDU_action_pointerDeviceCapture,
        __WindowActivationPDU_action_activateWindow,
        __WindowActivationPDU_action_closeWindow,
        __WindowActivationPDU_action_restoreWindow,
        __WindowActivationPDU_action_windowManagerMenu,
        __WindowActivationPDU_action_activationHelpKey,
        __WindowActivationPDU_action_activationHelpIndexKey,
        __WindowActivationPDU_action_activationHelpExtendedKey,
        __WindowActivationPDU_action_nonStandardAction,
        _WindowActivationPDU_action,
        __WindowActivationPDU_nonStandardParameters__item_,
        _WindowActivationPDU_nonStandardParameters,
        WindowActivationPDU,
        _WindowListPDU_shareDataHeader,
        _WindowListPDU_listTime,
        _WindowListPDU_listID,
        __WindowListPDU_windowAttributeList__item_,
        _WindowListPDU_windowAttributeList,
        __WindowListPDU_windowTitleList__item_,
        _WindowListPDU_windowTitleList,
        __WindowListPDU_nonStandardParameters__item_,
        _WindowListPDU_nonStandardParameters,
        WindowListPDU,
        _ASNonStandardPDU_nonStandardParameter,
        ASNonStandardPDU,
        _SharePDU_applicationPDU,
        _SharePDU_controlPDU,
        _SharePDU_flowResponsePDU,
        _SharePDU_flowStopPDU,
        _SharePDU_flowTestPDU,
        _SharePDU_fontPDU,
        _SharePDU_inputPDU,
        _SharePDU_mediatedControlPDU,
        _SharePDU_pointerPDU,
        _SharePDU_remoteSharePDU,
        _SharePDU_synchronizePDU,
        _SharePDU_updateBitmapPDU,
        _SharePDU_updateOrdersPDU,
        _SharePDU_updateSynchronizePDU,
        _SharePDU_updatePalettePDU,
        _SharePDU_windowActivationPDU,
        _SharePDU_windowListPDU,
        _SharePDU_asNonStandardPDU,
        SharePDU,
    ]

class _IMPL_:

    _name_ = '_IMPL_'
    _oid_  = []
    _obj_  = ['REAL', 'EXTERNAL', 'EMBEDDED PDV', 'CHARACTER STRING', 'TYPE-IDENTIFIER', 'ABSTRACT-SYNTAX']
    
    #-----< REAL >-----#
    REAL = SEQ(name='REAL', mode=MODE_TYPE)
    _REAL_mantissa = INT(name='mantissa', mode=MODE_TYPE)
    _REAL_base = INT(name='base', mode=MODE_TYPE)
    _REAL_base._const_val = ASN1Set(rv=[2, 10], rr=[], ev=None, er=[])
    _REAL_exponent = INT(name='exponent', mode=MODE_TYPE)
    REAL._cont = ASN1Dict([
        ('mantissa', _REAL_mantissa),
        ('base', _REAL_base),
        ('exponent', _REAL_exponent),
        ])
    REAL._ext = None
    
    #-----< EXTERNAL >-----#
    EXTERNAL = SEQ(name='EXTERNAL', mode=MODE_TYPE)
    _EXTERNAL_identification = CHOICE(name='identification', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_syntaxes = SEQ(name='syntaxes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EXTERNAL_identification_syntaxes_abstract = OID(name='abstract', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EXTERNAL_identification_syntaxes_transfer = OID(name='transfer', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_syntaxes._cont = ASN1Dict([
        ('abstract', ___EXTERNAL_identification_syntaxes_abstract),
        ('transfer', ___EXTERNAL_identification_syntaxes_transfer),
        ])
    __EXTERNAL_identification_syntaxes._ext = None
    __EXTERNAL_identification_syntax = OID(name='syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_context_negotiation = SEQ(name='context-negotiation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EXTERNAL_identification_context_negotiation_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EXTERNAL_identification_context_negotiation_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_context_negotiation._cont = ASN1Dict([
        ('presentation-context-id', ___EXTERNAL_identification_context_negotiation_presentation_context_id),
        ('transfer-syntax', ___EXTERNAL_identification_context_negotiation_transfer_syntax),
        ])
    __EXTERNAL_identification_context_negotiation._ext = None
    __EXTERNAL_identification_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_fixed = NULL(name='fixed', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    _EXTERNAL_identification._cont = ASN1Dict([
        ('syntaxes', __EXTERNAL_identification_syntaxes),
        ('syntax', __EXTERNAL_identification_syntax),
        ('presentation-context-id', __EXTERNAL_identification_presentation_context_id),
        ('context-negotiation', __EXTERNAL_identification_context_negotiation),
        ('transfer-syntax', __EXTERNAL_identification_transfer_syntax),
        ('fixed', __EXTERNAL_identification_fixed),
        ])
    _EXTERNAL_identification._ext = None
    _EXTERNAL_data_value_descriptor = OBJ_DESC(name='data-value-descriptor', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), opt=True)
    _EXTERNAL_data_value = OCT_STR(name='data-value', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    EXTERNAL._cont = ASN1Dict([
        ('identification', _EXTERNAL_identification),
        ('data-value-descriptor', _EXTERNAL_data_value_descriptor),
        ('data-value', _EXTERNAL_data_value),
        ])
    EXTERNAL._ext = None
    
    #-----< EMBEDDED PDV >-----#
    EMBEDDED_PDV = SEQ(name='EMBEDDED PDV', mode=MODE_TYPE)
    _EMBEDDED_PDV_identification = CHOICE(name='identification', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_syntaxes = SEQ(name='syntaxes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EMBEDDED_PDV_identification_syntaxes_abstract = OID(name='abstract', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EMBEDDED_PDV_identification_syntaxes_transfer = OID(name='transfer', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_syntaxes._cont = ASN1Dict([
        ('abstract', ___EMBEDDED_PDV_identification_syntaxes_abstract),
        ('transfer', ___EMBEDDED_PDV_identification_syntaxes_transfer),
        ])
    __EMBEDDED_PDV_identification_syntaxes._ext = None
    __EMBEDDED_PDV_identification_syntax = OID(name='syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_context_negotiation = SEQ(name='context-negotiation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EMBEDDED_PDV_identification_context_negotiation_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EMBEDDED_PDV_identification_context_negotiation_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_context_negotiation._cont = ASN1Dict([
        ('presentation-context-id', ___EMBEDDED_PDV_identification_context_negotiation_presentation_context_id),
        ('transfer-syntax', ___EMBEDDED_PDV_identification_context_negotiation_transfer_syntax),
        ])
    __EMBEDDED_PDV_identification_context_negotiation._ext = None
    __EMBEDDED_PDV_identification_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_fixed = NULL(name='fixed', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    _EMBEDDED_PDV_identification._cont = ASN1Dict([
        ('syntaxes', __EMBEDDED_PDV_identification_syntaxes),
        ('syntax', __EMBEDDED_PDV_identification_syntax),
        ('presentation-context-id', __EMBEDDED_PDV_identification_presentation_context_id),
        ('context-negotiation', __EMBEDDED_PDV_identification_context_negotiation),
        ('transfer-syntax', __EMBEDDED_PDV_identification_transfer_syntax),
        ('fixed', __EMBEDDED_PDV_identification_fixed),
        ])
    _EMBEDDED_PDV_identification._ext = None
    _EMBEDDED_PDV_data_value_descriptor = OBJ_DESC(name='data-value-descriptor', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), opt=True)
    _EMBEDDED_PDV_data_value = OCT_STR(name='data-value', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    EMBEDDED_PDV._cont = ASN1Dict([
        ('identification', _EMBEDDED_PDV_identification),
        ('data-value-descriptor', _EMBEDDED_PDV_data_value_descriptor),
        ('data-value', _EMBEDDED_PDV_data_value),
        ])
    EMBEDDED_PDV._ext = None
    
    #-----< CHARACTER STRING >-----#
    CHARACTER_STRING = SEQ(name='CHARACTER STRING', mode=MODE_TYPE)
    _CHARACTER_STRING_identification = CHOICE(name='identification', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_syntaxes = SEQ(name='syntaxes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___CHARACTER_STRING_identification_syntaxes_abstract = OID(name='abstract', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___CHARACTER_STRING_identification_syntaxes_transfer = OID(name='transfer', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_syntaxes._cont = ASN1Dict([
        ('abstract', ___CHARACTER_STRING_identification_syntaxes_abstract),
        ('transfer', ___CHARACTER_STRING_identification_syntaxes_transfer),
        ])
    __CHARACTER_STRING_identification_syntaxes._ext = None
    __CHARACTER_STRING_identification_syntax = OID(name='syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_context_negotiation = SEQ(name='context-negotiation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___CHARACTER_STRING_identification_context_negotiation_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___CHARACTER_STRING_identification_context_negotiation_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_context_negotiation._cont = ASN1Dict([
        ('presentation-context-id', ___CHARACTER_STRING_identification_context_negotiation_presentation_context_id),
        ('transfer-syntax', ___CHARACTER_STRING_identification_context_negotiation_transfer_syntax),
        ])
    __CHARACTER_STRING_identification_context_negotiation._ext = None
    __CHARACTER_STRING_identification_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_fixed = NULL(name='fixed', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    _CHARACTER_STRING_identification._cont = ASN1Dict([
        ('syntaxes', __CHARACTER_STRING_identification_syntaxes),
        ('syntax', __CHARACTER_STRING_identification_syntax),
        ('presentation-context-id', __CHARACTER_STRING_identification_presentation_context_id),
        ('context-negotiation', __CHARACTER_STRING_identification_context_negotiation),
        ('transfer-syntax', __CHARACTER_STRING_identification_transfer_syntax),
        ('fixed', __CHARACTER_STRING_identification_fixed),
        ])
    _CHARACTER_STRING_identification._ext = None
    _CHARACTER_STRING_data_value_descriptor = OBJ_DESC(name='data-value-descriptor', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), opt=True)
    _CHARACTER_STRING_string_value = OCT_STR(name='string-value', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    CHARACTER_STRING._cont = ASN1Dict([
        ('identification', _CHARACTER_STRING_identification),
        ('data-value-descriptor', _CHARACTER_STRING_data_value_descriptor),
        ('string-value', _CHARACTER_STRING_string_value),
        ])
    CHARACTER_STRING._ext = None
    
    #-----< TYPE-IDENTIFIER >-----#
    TYPE_IDENTIFIER = CLASS(name='TYPE-IDENTIFIER', mode=MODE_TYPE)
    _TYPE_IDENTIFIER_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    _TYPE_IDENTIFIER_Type = OPEN(name='Type', mode=MODE_TYPE)
    TYPE_IDENTIFIER._cont = ASN1Dict([
        ('id', _TYPE_IDENTIFIER_id),
        ('Type', _TYPE_IDENTIFIER_Type),
        ])
    
    #-----< ABSTRACT-SYNTAX >-----#
    ABSTRACT_SYNTAX = CLASS(name='ABSTRACT-SYNTAX', mode=MODE_TYPE)
    _ABSTRACT_SYNTAX_id = OID(name='id', mode=MODE_VALUE)
    _ABSTRACT_SYNTAX_Type = OPEN(name='Type', mode=MODE_TYPE)
    _ABSTRACT_SYNTAX_property = BIT_STR(name='property', mode=MODE_VALUE, default=(0, 0))
    _ABSTRACT_SYNTAX_property._cont = ASN1Dict([('handles-invalid-encodings', 0)])
    ABSTRACT_SYNTAX._cont = ASN1Dict([
        ('id', _ABSTRACT_SYNTAX_id),
        ('Type', _ABSTRACT_SYNTAX_Type),
        ('property', _ABSTRACT_SYNTAX_property),
        ])
    
    _all_ = [
        _REAL_mantissa,
        _REAL_base,
        _REAL_exponent,
        REAL,
        ___EXTERNAL_identification_syntaxes_abstract,
        ___EXTERNAL_identification_syntaxes_transfer,
        __EXTERNAL_identification_syntaxes,
        __EXTERNAL_identification_syntax,
        __EXTERNAL_identification_presentation_context_id,
        ___EXTERNAL_identification_context_negotiation_presentation_context_id,
        ___EXTERNAL_identification_context_negotiation_transfer_syntax,
        __EXTERNAL_identification_context_negotiation,
        __EXTERNAL_identification_transfer_syntax,
        __EXTERNAL_identification_fixed,
        _EXTERNAL_identification,
        _EXTERNAL_data_value_descriptor,
        _EXTERNAL_data_value,
        EXTERNAL,
        ___EMBEDDED_PDV_identification_syntaxes_abstract,
        ___EMBEDDED_PDV_identification_syntaxes_transfer,
        __EMBEDDED_PDV_identification_syntaxes,
        __EMBEDDED_PDV_identification_syntax,
        __EMBEDDED_PDV_identification_presentation_context_id,
        ___EMBEDDED_PDV_identification_context_negotiation_presentation_context_id,
        ___EMBEDDED_PDV_identification_context_negotiation_transfer_syntax,
        __EMBEDDED_PDV_identification_context_negotiation,
        __EMBEDDED_PDV_identification_transfer_syntax,
        __EMBEDDED_PDV_identification_fixed,
        _EMBEDDED_PDV_identification,
        _EMBEDDED_PDV_data_value_descriptor,
        _EMBEDDED_PDV_data_value,
        EMBEDDED_PDV,
        ___CHARACTER_STRING_identification_syntaxes_abstract,
        ___CHARACTER_STRING_identification_syntaxes_transfer,
        __CHARACTER_STRING_identification_syntaxes,
        __CHARACTER_STRING_identification_syntax,
        __CHARACTER_STRING_identification_presentation_context_id,
        ___CHARACTER_STRING_identification_context_negotiation_presentation_context_id,
        ___CHARACTER_STRING_identification_context_negotiation_transfer_syntax,
        __CHARACTER_STRING_identification_context_negotiation,
        __CHARACTER_STRING_identification_transfer_syntax,
        __CHARACTER_STRING_identification_fixed,
        _CHARACTER_STRING_identification,
        _CHARACTER_STRING_data_value_descriptor,
        _CHARACTER_STRING_string_value,
        CHARACTER_STRING,
        _TYPE_IDENTIFIER_id,
        _TYPE_IDENTIFIER_Type,
        TYPE_IDENTIFIER,
        _ABSTRACT_SYNTAX_id,
        _ABSTRACT_SYNTAX_Type,
        _ABSTRACT_SYNTAX_property,
        ABSTRACT_SYNTAX,
    ]

init_modules(AS_PROTOCOL_for_legacy_mode, GCC_PROTOCOL, AS_PROTOCOL_for_PER_encoding, _IMPL_)
