# -*- coding: UTF-8 -*-
# Code automatically generated by pycrate_asn1c

from pycrate_asn1rt.utils            import *
from pycrate_asn1rt.err              import *
from pycrate_asn1rt.glob             import make_GLOBAL, GLOBAL
from pycrate_asn1rt.dictobj          import ASN1Dict
from pycrate_asn1rt.refobj           import *
from pycrate_asn1rt.setobj           import *
from pycrate_asn1rt.asnobj_basic     import *
from pycrate_asn1rt.asnobj_str       import *
from pycrate_asn1rt.asnobj_construct import *
from pycrate_asn1rt.asnobj_class     import *
from pycrate_asn1rt.asnobj_ext       import *
from pycrate_asn1rt.init             import init_modules

class DialoguePDUs:

    _name_  = 'DialoguePDUs'
    _oid_   = [0, 0, 17, 773, 2, 2, 1]
    
    _obj_ = [
        'dialogue-as-id',
        'DialoguePDU',
        'AARQ-apdu',
        'AARE-apdu',
        'RLRQ-apdu',
        'RLRE-apdu',
        'ABRT-apdu',
        'ABRT-source',
        'Associate-result',
        'Associate-source-diagnostic',
        'Release-request-reason',
        'Release-response-reason',
        ]
    _type_ = [
        'DialoguePDU',
        'AARQ-apdu',
        'AARE-apdu',
        'RLRQ-apdu',
        'RLRE-apdu',
        'ABRT-apdu',
        'ABRT-source',
        'Associate-result',
        'Associate-source-diagnostic',
        'Release-request-reason',
        'Release-response-reason',
        ]
    _set_ = [
        ]
    _val_ = [
        'dialogue-as-id',
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< dialogue-as-id >-----#
    dialogue_as_id = OID(name='dialogue-as-id', mode=MODE_VALUE)
    dialogue_as_id._val = (0, 0, 17, 773, 1, 1, 1)
    
    #-----< DialoguePDU >-----#
    DialoguePDU = CHOICE(name='DialoguePDU', mode=MODE_TYPE)
    _DialoguePDU_dialogueRequest = SEQ(name='dialogueRequest', mode=MODE_TYPE, typeref=ASN1RefType(('DialoguePDUs', 'AARQ-apdu')))
    _DialoguePDU_dialogueResponse = SEQ(name='dialogueResponse', mode=MODE_TYPE, typeref=ASN1RefType(('DialoguePDUs', 'AARE-apdu')))
    _DialoguePDU_dialogueAbort = SEQ(name='dialogueAbort', mode=MODE_TYPE, typeref=ASN1RefType(('DialoguePDUs', 'ABRT-apdu')))
    DialoguePDU._cont = ASN1Dict([
        ('dialogueRequest', _DialoguePDU_dialogueRequest),
        ('dialogueResponse', _DialoguePDU_dialogueResponse),
        ('dialogueAbort', _DialoguePDU_dialogueAbort),
        ])
    DialoguePDU._ext = None
    
    #-----< AARQ-apdu >-----#
    AARQ_apdu = SEQ(name='AARQ-apdu', mode=MODE_TYPE, tag=(0, TAG_APPLICATION, TAG_IMPLICIT))
    _AARQ_apdu_protocol_version = BIT_STR(name='protocol-version', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=(1, 1))
    _AARQ_apdu_protocol_version._cont = ASN1Dict([('version1', 0)])
    _AARQ_apdu_application_context_name = OID(name='application-context-name', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    _AARQ_apdu_user_information = SEQ_OF(name='user-information', mode=MODE_TYPE, tag=(30, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __AARQ_apdu_user_information__item_ = EXT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('_IMPL_', 'EXTERNAL')))
    _AARQ_apdu_user_information._cont = __AARQ_apdu_user_information__item_
    AARQ_apdu._cont = ASN1Dict([
        ('protocol-version', _AARQ_apdu_protocol_version),
        ('application-context-name', _AARQ_apdu_application_context_name),
        ('user-information', _AARQ_apdu_user_information),
        ])
    AARQ_apdu._ext = None
    
    #-----< AARE-apdu >-----#
    AARE_apdu = SEQ(name='AARE-apdu', mode=MODE_TYPE, tag=(1, TAG_APPLICATION, TAG_IMPLICIT))
    _AARE_apdu_protocol_version = BIT_STR(name='protocol-version', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=(1, 1))
    _AARE_apdu_protocol_version._cont = ASN1Dict([('version1', 0)])
    _AARE_apdu_application_context_name = OID(name='application-context-name', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    _AARE_apdu_result = INT(name='result', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('DialoguePDUs', 'Associate-result')))
    _AARE_apdu_result_source_diagnostic = CHOICE(name='result-source-diagnostic', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('DialoguePDUs', 'Associate-source-diagnostic')))
    _AARE_apdu_user_information = SEQ_OF(name='user-information', mode=MODE_TYPE, tag=(30, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __AARE_apdu_user_information__item_ = EXT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('_IMPL_', 'EXTERNAL')))
    _AARE_apdu_user_information._cont = __AARE_apdu_user_information__item_
    AARE_apdu._cont = ASN1Dict([
        ('protocol-version', _AARE_apdu_protocol_version),
        ('application-context-name', _AARE_apdu_application_context_name),
        ('result', _AARE_apdu_result),
        ('result-source-diagnostic', _AARE_apdu_result_source_diagnostic),
        ('user-information', _AARE_apdu_user_information),
        ])
    AARE_apdu._ext = None
    
    #-----< RLRQ-apdu >-----#
    RLRQ_apdu = SEQ(name='RLRQ-apdu', mode=MODE_TYPE, tag=(2, TAG_APPLICATION, TAG_IMPLICIT))
    _RLRQ_apdu_reason = INT(name='reason', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DialoguePDUs', 'Release-request-reason')), opt=True)
    _RLRQ_apdu_user_information = SEQ_OF(name='user-information', mode=MODE_TYPE, tag=(30, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __RLRQ_apdu_user_information__item_ = EXT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('_IMPL_', 'EXTERNAL')))
    _RLRQ_apdu_user_information._cont = __RLRQ_apdu_user_information__item_
    RLRQ_apdu._cont = ASN1Dict([
        ('reason', _RLRQ_apdu_reason),
        ('user-information', _RLRQ_apdu_user_information),
        ])
    RLRQ_apdu._ext = None
    
    #-----< RLRE-apdu >-----#
    RLRE_apdu = SEQ(name='RLRE-apdu', mode=MODE_TYPE, tag=(3, TAG_APPLICATION, TAG_IMPLICIT))
    _RLRE_apdu_reason = INT(name='reason', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DialoguePDUs', 'Release-response-reason')), opt=True)
    _RLRE_apdu_user_information = SEQ_OF(name='user-information', mode=MODE_TYPE, tag=(30, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __RLRE_apdu_user_information__item_ = EXT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('_IMPL_', 'EXTERNAL')))
    _RLRE_apdu_user_information._cont = __RLRE_apdu_user_information__item_
    RLRE_apdu._cont = ASN1Dict([
        ('reason', _RLRE_apdu_reason),
        ('user-information', _RLRE_apdu_user_information),
        ])
    RLRE_apdu._ext = None
    
    #-----< ABRT-apdu >-----#
    ABRT_apdu = SEQ(name='ABRT-apdu', mode=MODE_TYPE, tag=(4, TAG_APPLICATION, TAG_IMPLICIT))
    _ABRT_apdu_abort_source = INT(name='abort-source', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DialoguePDUs', 'ABRT-source')))
    _ABRT_apdu_user_information = SEQ_OF(name='user-information', mode=MODE_TYPE, tag=(30, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ABRT_apdu_user_information__item_ = EXT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('_IMPL_', 'EXTERNAL')))
    _ABRT_apdu_user_information._cont = __ABRT_apdu_user_information__item_
    ABRT_apdu._cont = ASN1Dict([
        ('abort-source', _ABRT_apdu_abort_source),
        ('user-information', _ABRT_apdu_user_information),
        ])
    ABRT_apdu._ext = None
    
    #-----< ABRT-source >-----#
    ABRT_source = INT(name='ABRT-source', mode=MODE_TYPE)
    ABRT_source._cont = ASN1Dict([('dialogue-service-user', 0), ('dialogue-service-provider', 1)])
    
    #-----< Associate-result >-----#
    Associate_result = INT(name='Associate-result', mode=MODE_TYPE)
    Associate_result._cont = ASN1Dict([('accepted', 0), ('reject-permanent', 1)])
    
    #-----< Associate-source-diagnostic >-----#
    Associate_source_diagnostic = CHOICE(name='Associate-source-diagnostic', mode=MODE_TYPE)
    _Associate_source_diagnostic_dialogue_service_user = INT(name='dialogue-service-user', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    _Associate_source_diagnostic_dialogue_service_user._cont = ASN1Dict([('null', 0), ('no-reason-given', 1), ('application-context-name-not-supported', 2)])
    _Associate_source_diagnostic_dialogue_service_provider = INT(name='dialogue-service-provider', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    _Associate_source_diagnostic_dialogue_service_provider._cont = ASN1Dict([('null', 0), ('no-reason-given', 1), ('no-common-dialogue-portion', 2)])
    Associate_source_diagnostic._cont = ASN1Dict([
        ('dialogue-service-user', _Associate_source_diagnostic_dialogue_service_user),
        ('dialogue-service-provider', _Associate_source_diagnostic_dialogue_service_provider),
        ])
    Associate_source_diagnostic._ext = None
    
    #-----< Release-request-reason >-----#
    Release_request_reason = INT(name='Release-request-reason', mode=MODE_TYPE)
    Release_request_reason._cont = ASN1Dict([('normal', 0), ('urgent', 1), ('user-defined', 30)])
    
    #-----< Release-response-reason >-----#
    Release_response_reason = INT(name='Release-response-reason', mode=MODE_TYPE)
    Release_response_reason._cont = ASN1Dict([('normal', 0), ('not-finished', 1), ('user-defined', 30)])
    
    _all_ = [
        dialogue_as_id,
        _DialoguePDU_dialogueRequest,
        _DialoguePDU_dialogueResponse,
        _DialoguePDU_dialogueAbort,
        DialoguePDU,
        _AARQ_apdu_protocol_version,
        _AARQ_apdu_application_context_name,
        __AARQ_apdu_user_information__item_,
        _AARQ_apdu_user_information,
        AARQ_apdu,
        _AARE_apdu_protocol_version,
        _AARE_apdu_application_context_name,
        _AARE_apdu_result,
        _AARE_apdu_result_source_diagnostic,
        __AARE_apdu_user_information__item_,
        _AARE_apdu_user_information,
        AARE_apdu,
        _RLRQ_apdu_reason,
        __RLRQ_apdu_user_information__item_,
        _RLRQ_apdu_user_information,
        RLRQ_apdu,
        _RLRE_apdu_reason,
        __RLRE_apdu_user_information__item_,
        _RLRE_apdu_user_information,
        RLRE_apdu,
        _ABRT_apdu_abort_source,
        __ABRT_apdu_user_information__item_,
        _ABRT_apdu_user_information,
        ABRT_apdu,
        ABRT_source,
        Associate_result,
        _Associate_source_diagnostic_dialogue_service_user,
        _Associate_source_diagnostic_dialogue_service_provider,
        Associate_source_diagnostic,
        Release_request_reason,
        Release_response_reason,
    ]

class UnidialoguePDUs:

    _name_  = 'UnidialoguePDUs'
    _oid_   = [0, 0, 17, 773, 2, 3, 1]
    
    _obj_ = [
        'uniDialogue-as-id',
        'UniDialoguePDU',
        'AUDT-apdu',
        ]
    _type_ = [
        'UniDialoguePDU',
        'AUDT-apdu',
        ]
    _set_ = [
        ]
    _val_ = [
        'uniDialogue-as-id',
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< uniDialogue-as-id >-----#
    uniDialogue_as_id = OID(name='uniDialogue-as-id', mode=MODE_VALUE)
    uniDialogue_as_id._val = (0, 0, 17, 773, 1, 2, 1)
    
    #-----< UniDialoguePDU >-----#
    UniDialoguePDU = CHOICE(name='UniDialoguePDU', mode=MODE_TYPE)
    _UniDialoguePDU_unidialoguePDU = SEQ(name='unidialoguePDU', mode=MODE_TYPE, typeref=ASN1RefType(('UnidialoguePDUs', 'AUDT-apdu')))
    UniDialoguePDU._cont = ASN1Dict([
        ('unidialoguePDU', _UniDialoguePDU_unidialoguePDU),
        ])
    UniDialoguePDU._ext = None
    
    #-----< AUDT-apdu >-----#
    AUDT_apdu = SEQ(name='AUDT-apdu', mode=MODE_TYPE, tag=(0, TAG_APPLICATION, TAG_IMPLICIT))
    _AUDT_apdu_protocol_version = BIT_STR(name='protocol-version', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=(1, 1))
    _AUDT_apdu_protocol_version._cont = ASN1Dict([('version1', 0)])
    _AUDT_apdu_application_context_name = OID(name='application-context-name', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    _AUDT_apdu_user_information = SEQ_OF(name='user-information', mode=MODE_TYPE, tag=(30, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __AUDT_apdu_user_information__item_ = EXT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('_IMPL_', 'EXTERNAL')))
    _AUDT_apdu_user_information._cont = __AUDT_apdu_user_information__item_
    AUDT_apdu._cont = ASN1Dict([
        ('protocol-version', _AUDT_apdu_protocol_version),
        ('application-context-name', _AUDT_apdu_application_context_name),
        ('user-information', _AUDT_apdu_user_information),
        ])
    AUDT_apdu._ext = None
    
    _all_ = [
        uniDialogue_as_id,
        _UniDialoguePDU_unidialoguePDU,
        UniDialoguePDU,
        _AUDT_apdu_protocol_version,
        _AUDT_apdu_application_context_name,
        __AUDT_apdu_user_information__item_,
        _AUDT_apdu_user_information,
        AUDT_apdu,
    ]

class Remote_Operations_Information_Objects:

    _name_  = 'Remote-Operations-Information-Objects'
    _oid_   = [2, 4, 5, 0]
    
    _obj_ = [
        'OPERATION',
        'ERROR',
        'OPERATION-PACKAGE',
        'CONNECTION-PACKAGE',
        'CONTRACT',
        'ROS-OBJECT-CLASS',
        'Code',
        'Priority',
        ]
    _type_ = [
        'OPERATION',
        'ERROR',
        'OPERATION-PACKAGE',
        'CONNECTION-PACKAGE',
        'CONTRACT',
        'ROS-OBJECT-CLASS',
        'Code',
        'Priority',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        'OPERATION',
        'ERROR',
        'OPERATION-PACKAGE',
        'CONNECTION-PACKAGE',
        'CONTRACT',
        'ROS-OBJECT-CLASS',
        ]
    _param_ = [
        ]
    
    #-----< OPERATION >-----#
    OPERATION = CLASS(name='OPERATION', mode=MODE_TYPE)
    _OPERATION_ArgumentType = OPEN(name='ArgumentType', mode=MODE_TYPE, opt=True)
    _OPERATION_argumentTypeOptional = BOOL(name='argumentTypeOptional', mode=MODE_VALUE, opt=True)
    _OPERATION_returnResult = BOOL(name='returnResult', mode=MODE_VALUE, default=True)
    _OPERATION_ResultType = OPEN(name='ResultType', mode=MODE_TYPE, opt=True)
    _OPERATION_resultTypeOptional = BOOL(name='resultTypeOptional', mode=MODE_VALUE, opt=True)
    _OPERATION_Errors = CLASS(name='Errors', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')), opt=True)
    _OPERATION_Linked = CLASS(name='Linked', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')), opt=True)
    _OPERATION_synchronous = BOOL(name='synchronous', mode=MODE_VALUE, default=False)
    _OPERATION_alwaysReturns = BOOL(name='alwaysReturns', mode=MODE_VALUE, default=True)
    _OPERATION_InvokePriority = INT(name='InvokePriority', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'Priority')), opt=True)
    _OPERATION_ResultPriority = INT(name='ResultPriority', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'Priority')), opt=True)
    _OPERATION_operationCode = CHOICE(name='operationCode', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'Code')), opt=True, uniq=True)
    OPERATION._cont = ASN1Dict([
        ('ArgumentType', _OPERATION_ArgumentType),
        ('argumentTypeOptional', _OPERATION_argumentTypeOptional),
        ('returnResult', _OPERATION_returnResult),
        ('ResultType', _OPERATION_ResultType),
        ('resultTypeOptional', _OPERATION_resultTypeOptional),
        ('Errors', _OPERATION_Errors),
        ('Linked', _OPERATION_Linked),
        ('synchronous', _OPERATION_synchronous),
        ('alwaysReturns', _OPERATION_alwaysReturns),
        ('InvokePriority', _OPERATION_InvokePriority),
        ('ResultPriority', _OPERATION_ResultPriority),
        ('operationCode', _OPERATION_operationCode),
        ])
    
    #-----< ERROR >-----#
    ERROR = CLASS(name='ERROR', mode=MODE_TYPE)
    _ERROR_ParameterType = OPEN(name='ParameterType', mode=MODE_TYPE, opt=True)
    _ERROR_parameterTypeOptional = BOOL(name='parameterTypeOptional', mode=MODE_VALUE, opt=True)
    _ERROR_ErrorPriority = INT(name='ErrorPriority', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'Priority')), opt=True)
    _ERROR_errorCode = CHOICE(name='errorCode', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'Code')), opt=True, uniq=True)
    ERROR._cont = ASN1Dict([
        ('ParameterType', _ERROR_ParameterType),
        ('parameterTypeOptional', _ERROR_parameterTypeOptional),
        ('ErrorPriority', _ERROR_ErrorPriority),
        ('errorCode', _ERROR_errorCode),
        ])
    
    #-----< OPERATION-PACKAGE >-----#
    OPERATION_PACKAGE = CLASS(name='OPERATION-PACKAGE', mode=MODE_TYPE)
    _OPERATION_PACKAGE_Both = CLASS(name='Both', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')), opt=True)
    _OPERATION_PACKAGE_Consumer = CLASS(name='Consumer', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')), opt=True)
    _OPERATION_PACKAGE_Supplier = CLASS(name='Supplier', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')), opt=True)
    _OPERATION_PACKAGE_id = OID(name='id', mode=MODE_VALUE, opt=True, uniq=True)
    OPERATION_PACKAGE._cont = ASN1Dict([
        ('Both', _OPERATION_PACKAGE_Both),
        ('Consumer', _OPERATION_PACKAGE_Consumer),
        ('Supplier', _OPERATION_PACKAGE_Supplier),
        ('id', _OPERATION_PACKAGE_id),
        ])
    
    #-----< CONNECTION-PACKAGE >-----#
    CONNECTION_PACKAGE = CLASS(name='CONNECTION-PACKAGE', mode=MODE_TYPE)
    _CONNECTION_PACKAGE_bind = CLASS(name='bind', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')), default=dict([('Errors', ASN1Set(rv=[dict([('errorCode', ('local', -1))])], rr=[], ev=None, er=[])), ('synchronous', True)]))
    _CONNECTION_PACKAGE_unbind = CLASS(name='unbind', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')), default=dict([('synchronous', True)]))
    _CONNECTION_PACKAGE_responderCanUnbind = BOOL(name='responderCanUnbind', mode=MODE_VALUE, default=False)
    _CONNECTION_PACKAGE_unbindCanFail = BOOL(name='unbindCanFail', mode=MODE_VALUE, default=False)
    _CONNECTION_PACKAGE_id = OID(name='id', mode=MODE_VALUE, opt=True, uniq=True)
    CONNECTION_PACKAGE._cont = ASN1Dict([
        ('bind', _CONNECTION_PACKAGE_bind),
        ('unbind', _CONNECTION_PACKAGE_unbind),
        ('responderCanUnbind', _CONNECTION_PACKAGE_responderCanUnbind),
        ('unbindCanFail', _CONNECTION_PACKAGE_unbindCanFail),
        ('id', _CONNECTION_PACKAGE_id),
        ])
    
    #-----< CONTRACT >-----#
    CONTRACT = CLASS(name='CONTRACT', mode=MODE_TYPE)
    _CONTRACT_connection = CLASS(name='connection', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'CONNECTION-PACKAGE')), opt=True)
    _CONTRACT_OperationsOf = CLASS(name='OperationsOf', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION-PACKAGE')), opt=True)
    _CONTRACT_InitiatorConsumerOf = CLASS(name='InitiatorConsumerOf', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION-PACKAGE')), opt=True)
    _CONTRACT_InitiatorSupplierOf = CLASS(name='InitiatorSupplierOf', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION-PACKAGE')), opt=True)
    _CONTRACT_id = OID(name='id', mode=MODE_VALUE, opt=True, uniq=True)
    CONTRACT._cont = ASN1Dict([
        ('connection', _CONTRACT_connection),
        ('OperationsOf', _CONTRACT_OperationsOf),
        ('InitiatorConsumerOf', _CONTRACT_InitiatorConsumerOf),
        ('InitiatorSupplierOf', _CONTRACT_InitiatorSupplierOf),
        ('id', _CONTRACT_id),
        ])
    
    #-----< ROS-OBJECT-CLASS >-----#
    ROS_OBJECT_CLASS = CLASS(name='ROS-OBJECT-CLASS', mode=MODE_TYPE)
    _ROS_OBJECT_CLASS_Is = CLASS(name='Is', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ROS-OBJECT-CLASS')), opt=True)
    _ROS_OBJECT_CLASS_Initiates = CLASS(name='Initiates', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'CONTRACT')), opt=True)
    _ROS_OBJECT_CLASS_Responds = CLASS(name='Responds', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'CONTRACT')), opt=True)
    _ROS_OBJECT_CLASS_InitiatesAndResponds = CLASS(name='InitiatesAndResponds', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'CONTRACT')), opt=True)
    _ROS_OBJECT_CLASS_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    ROS_OBJECT_CLASS._cont = ASN1Dict([
        ('Is', _ROS_OBJECT_CLASS_Is),
        ('Initiates', _ROS_OBJECT_CLASS_Initiates),
        ('Responds', _ROS_OBJECT_CLASS_Responds),
        ('InitiatesAndResponds', _ROS_OBJECT_CLASS_InitiatesAndResponds),
        ('id', _ROS_OBJECT_CLASS_id),
        ])
    
    #-----< Code >-----#
    Code = CHOICE(name='Code', mode=MODE_TYPE)
    _Code_local = INT(name='local', mode=MODE_TYPE)
    _Code_global_ = OID(name='global', mode=MODE_TYPE)
    Code._cont = ASN1Dict([
        ('local', _Code_local),
        ('global', _Code_global_),
        ])
    Code._ext = None
    
    #-----< Priority >-----#
    Priority = INT(name='Priority', mode=MODE_TYPE)
    Priority._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    
    _all_ = [
        _OPERATION_ArgumentType,
        _OPERATION_argumentTypeOptional,
        _OPERATION_returnResult,
        _OPERATION_ResultType,
        _OPERATION_resultTypeOptional,
        _OPERATION_Errors,
        _OPERATION_Linked,
        _OPERATION_synchronous,
        _OPERATION_alwaysReturns,
        _OPERATION_InvokePriority,
        _OPERATION_ResultPriority,
        _OPERATION_operationCode,
        OPERATION,
        _ERROR_ParameterType,
        _ERROR_parameterTypeOptional,
        _ERROR_ErrorPriority,
        _ERROR_errorCode,
        ERROR,
        _OPERATION_PACKAGE_Both,
        _OPERATION_PACKAGE_Consumer,
        _OPERATION_PACKAGE_Supplier,
        _OPERATION_PACKAGE_id,
        OPERATION_PACKAGE,
        _CONNECTION_PACKAGE_bind,
        _CONNECTION_PACKAGE_unbind,
        _CONNECTION_PACKAGE_responderCanUnbind,
        _CONNECTION_PACKAGE_unbindCanFail,
        _CONNECTION_PACKAGE_id,
        CONNECTION_PACKAGE,
        _CONTRACT_connection,
        _CONTRACT_OperationsOf,
        _CONTRACT_InitiatorConsumerOf,
        _CONTRACT_InitiatorSupplierOf,
        _CONTRACT_id,
        CONTRACT,
        _ROS_OBJECT_CLASS_Is,
        _ROS_OBJECT_CLASS_Initiates,
        _ROS_OBJECT_CLASS_Responds,
        _ROS_OBJECT_CLASS_InitiatesAndResponds,
        _ROS_OBJECT_CLASS_id,
        ROS_OBJECT_CLASS,
        _Code_local,
        _Code_global_,
        Code,
        Priority,
    ]

class Remote_Operations_Generic_ROS_PDUs:

    _name_  = 'Remote-Operations-Generic-ROS-PDUs'
    _oid_   = [2, 4, 6, 0]
    
    _obj_ = [
        'ROS',
        'Invoke',
        'ReturnResult',
        'ReturnError',
        'Reject',
        'GeneralProblem',
        'InvokeProblem',
        'ReturnResultProblem',
        'ReturnErrorProblem',
        'RejectProblem',
        'InvokeId',
        'noInvokeId',
        'NoInvokeId',
        'Errors',
        'Bind',
        'Unbind',
        ]
    _type_ = [
        'ROS',
        'Invoke',
        'ReturnResult',
        'ReturnError',
        'Reject',
        'GeneralProblem',
        'InvokeProblem',
        'ReturnResultProblem',
        'ReturnErrorProblem',
        'RejectProblem',
        'InvokeId',
        'Bind',
        'Unbind',
        ]
    _set_ = [
        'NoInvokeId',
        'Errors',
        ]
    _val_ = [
        'noInvokeId',
        ]
    _class_ = [
        'Errors',
        ]
    _param_ = [
        'ROS',
        'Invoke',
        'ReturnResult',
        'ReturnError',
        'Errors',
        'Bind',
        'Unbind',
        ]
    
    #-----< ROS >-----#
    ROS = CHOICE(name='ROS', mode=MODE_TYPE, param=True)
    
    #-----< Invoke >-----#
    Invoke = SEQ(name='Invoke', mode=MODE_TYPE, param=True)
    
    #-----< ReturnResult >-----#
    ReturnResult = SEQ(name='ReturnResult', mode=MODE_TYPE, param=True)
    
    #-----< ReturnError >-----#
    ReturnError = SEQ(name='ReturnError', mode=MODE_TYPE, param=True)
    
    #-----< Reject >-----#
    Reject = SEQ(name='Reject', mode=MODE_TYPE)
    _Reject_invokeId = CHOICE(name='invokeId', mode=MODE_TYPE, typeref=ASN1RefType(('Remote-Operations-Generic-ROS-PDUs', 'InvokeId')))
    _Reject_problem = CHOICE(name='problem', mode=MODE_TYPE)
    __Reject_problem_general = INT(name='general', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Remote-Operations-Generic-ROS-PDUs', 'GeneralProblem')))
    __Reject_problem_invoke = INT(name='invoke', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Remote-Operations-Generic-ROS-PDUs', 'InvokeProblem')))
    __Reject_problem_returnResult = INT(name='returnResult', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Remote-Operations-Generic-ROS-PDUs', 'ReturnResultProblem')))
    __Reject_problem_returnError = INT(name='returnError', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Remote-Operations-Generic-ROS-PDUs', 'ReturnErrorProblem')))
    _Reject_problem._cont = ASN1Dict([
        ('general', __Reject_problem_general),
        ('invoke', __Reject_problem_invoke),
        ('returnResult', __Reject_problem_returnResult),
        ('returnError', __Reject_problem_returnError),
        ])
    _Reject_problem._ext = None
    Reject._cont = ASN1Dict([
        ('invokeId', _Reject_invokeId),
        ('problem', _Reject_problem),
        ])
    Reject._ext = None
    
    #-----< GeneralProblem >-----#
    GeneralProblem = INT(name='GeneralProblem', mode=MODE_TYPE)
    GeneralProblem._cont = ASN1Dict([('unrecognizedPDU', 0), ('mistypedPDU', 1), ('badlyStructuredPDU', 2)])
    
    #-----< InvokeProblem >-----#
    InvokeProblem = INT(name='InvokeProblem', mode=MODE_TYPE)
    InvokeProblem._cont = ASN1Dict([('duplicateInvocation', 0), ('unrecognizedOperation', 1), ('mistypedArgument', 2), ('resourceLimitation', 3), ('releaseInProgress', 4), ('unrecognizedLinkedId', 5), ('linkedResponseUnexpected', 6), ('unexpectedLinkedOperation', 7)])
    
    #-----< ReturnResultProblem >-----#
    ReturnResultProblem = INT(name='ReturnResultProblem', mode=MODE_TYPE)
    ReturnResultProblem._cont = ASN1Dict([('unrecognizedInvocation', 0), ('resultResponseUnexpected', 1), ('mistypedResult', 2)])
    
    #-----< ReturnErrorProblem >-----#
    ReturnErrorProblem = INT(name='ReturnErrorProblem', mode=MODE_TYPE)
    ReturnErrorProblem._cont = ASN1Dict([('unrecognizedInvocation', 0), ('errorResponseUnexpected', 1), ('unrecognizedError', 2), ('unexpectedError', 3), ('mistypedParameter', 4)])
    
    #-----< RejectProblem >-----#
    RejectProblem = INT(name='RejectProblem', mode=MODE_TYPE)
    RejectProblem._cont = ASN1Dict([('general-unrecognizedPDU', 0), ('general-mistypedPDU', 1), ('general-badlyStructuredPDU', 2), ('invoke-duplicateInvocation', 10), ('invoke-unrecognizedOperation', 11), ('invoke-mistypedArgument', 12), ('invoke-resourceLimitation', 13), ('invoke-releaseInProgress', 14), ('invoke-unrecognizedLinkedId', 15), ('invoke-linkedResponseUnexpected', 16), ('invoke-unexpectedLinkedOperation', 17), ('returnResult-unrecognizedInvocation', 20), ('returnResult-resultResponseUnexpected', 21), ('returnResult-mistypedResult', 22), ('returnError-unrecognizedInvocation', 30), ('returnError-errorResponseUnexpected', 31), ('returnError-unrecognizedError', 32), ('returnError-unexpectedError', 33), ('returnError-mistypedParameter', 34)])
    
    #-----< InvokeId >-----#
    InvokeId = CHOICE(name='InvokeId', mode=MODE_TYPE)
    _InvokeId_present = INT(name='present', mode=MODE_TYPE)
    _InvokeId_absent = NULL(name='absent', mode=MODE_TYPE)
    InvokeId._cont = ASN1Dict([
        ('present', _InvokeId_present),
        ('absent', _InvokeId_absent),
        ])
    InvokeId._ext = None
    
    #-----< noInvokeId >-----#
    noInvokeId = CHOICE(name='noInvokeId', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Generic-ROS-PDUs', 'InvokeId')))
    noInvokeId._val = ('absent', 0)
    
    #-----< NoInvokeId >-----#
    NoInvokeId = CHOICE(name='NoInvokeId', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Generic-ROS-PDUs', 'InvokeId')))
    NoInvokeId._val = ASN1Set(rv=[('absent', 0)], rr=[], ev=None, er=[])
    
    #-----< Errors >-----#
    Errors = CLASS(name='Errors', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')), param=True)
    
    #-----< Bind >-----#
    Bind = CHOICE(name='Bind', mode=MODE_TYPE, param=True)
    
    #-----< Unbind >-----#
    Unbind = CHOICE(name='Unbind', mode=MODE_TYPE, param=True)
    
    _all_ = [
        _Reject_invokeId,
        __Reject_problem_general,
        __Reject_problem_invoke,
        __Reject_problem_returnResult,
        __Reject_problem_returnError,
        _Reject_problem,
        Reject,
        GeneralProblem,
        InvokeProblem,
        ReturnResultProblem,
        ReturnErrorProblem,
        RejectProblem,
        _InvokeId_present,
        _InvokeId_absent,
        InvokeId,
        noInvokeId,
        NoInvokeId,
    ]

class Remote_Operations_Useful_Definitions:

    _name_  = 'Remote-Operations-Useful-Definitions'
    _oid_   = [2, 4, 7, 0]
    
    _obj_ = [
        'emptyBind',
        'emptyUnbind',
        'refuse',
        'no-op',
        'Forward',
        'Reverse',
        'ConsumerPerforms',
        'SupplierPerforms',
        'AllOperations',
        'recode',
        'switch',
        'combine',
        'ROS-SingleAS',
        'ROS-ConsumerAS',
        'ROS-SupplierAS',
        ]
    _type_ = [
        'ROS-SingleAS',
        'ROS-ConsumerAS',
        'ROS-SupplierAS',
        ]
    _set_ = [
        'Forward',
        'Reverse',
        'ConsumerPerforms',
        'SupplierPerforms',
        'AllOperations',
        ]
    _val_ = [
        'emptyBind',
        'emptyUnbind',
        'refuse',
        'no-op',
        'recode',
        'switch',
        'combine',
        ]
    _class_ = [
        'emptyBind',
        'emptyUnbind',
        'refuse',
        'no-op',
        'Forward',
        'Reverse',
        'ConsumerPerforms',
        'SupplierPerforms',
        'AllOperations',
        'recode',
        'switch',
        'combine',
        ]
    _param_ = [
        'Forward',
        'Reverse',
        'ConsumerPerforms',
        'SupplierPerforms',
        'AllOperations',
        'recode',
        'switch',
        'combine',
        'ROS-SingleAS',
        'ROS-ConsumerAS',
        'ROS-SupplierAS',
        ]
    
    #-----< emptyBind >-----#
    emptyBind = CLASS(name='emptyBind', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')))
    emptyBind._val = dict([('Errors', ASN1Set(rv=[dict([('errorCode', ('local', -1))])], rr=[], ev=None, er=[])), ('synchronous', True)])
    
    #-----< emptyUnbind >-----#
    emptyUnbind = CLASS(name='emptyUnbind', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')))
    emptyUnbind._val = dict([('synchronous', True)])
    
    #-----< refuse >-----#
    refuse = CLASS(name='refuse', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    refuse._val = dict([('errorCode', ('local', -1))])
    
    #-----< no-op >-----#
    no_op = CLASS(name='no-op', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')))
    no_op._val = dict([('alwaysReturns', False), ('operationCode', ('local', -1))])
    
    #-----< Forward >-----#
    Forward = CLASS(name='Forward', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')), param=True)
    
    #-----< Reverse >-----#
    Reverse = CLASS(name='Reverse', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')), param=True)
    
    #-----< ConsumerPerforms >-----#
    ConsumerPerforms = CLASS(name='ConsumerPerforms', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')), param=True)
    
    #-----< SupplierPerforms >-----#
    SupplierPerforms = CLASS(name='SupplierPerforms', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')), param=True)
    
    #-----< AllOperations >-----#
    AllOperations = CLASS(name='AllOperations', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')), param=True)
    
    #-----< recode >-----#
    recode = CLASS(name='recode', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')), param=True)
    
    #-----< switch >-----#
    switch = CLASS(name='switch', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION-PACKAGE')), param=True)
    
    #-----< combine >-----#
    combine = CLASS(name='combine', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION-PACKAGE')), param=True)
    
    #-----< ROS-SingleAS >-----#
    ROS_SingleAS = CHOICE(name='ROS-SingleAS', mode=MODE_TYPE, typeref=ASN1RefType(('Remote-Operations-Generic-ROS-PDUs', 'ROS')), param=True)
    
    #-----< ROS-ConsumerAS >-----#
    ROS_ConsumerAS = CHOICE(name='ROS-ConsumerAS', mode=MODE_TYPE, typeref=ASN1RefType(('Remote-Operations-Generic-ROS-PDUs', 'ROS')), param=True)
    
    #-----< ROS-SupplierAS >-----#
    ROS_SupplierAS = CHOICE(name='ROS-SupplierAS', mode=MODE_TYPE, typeref=ASN1RefType(('Remote-Operations-Generic-ROS-PDUs', 'ROS')), param=True)
    
    _all_ = [
        emptyBind,
        emptyUnbind,
        refuse,
        no_op,
    ]

class TCAPMessages:

    _name_  = 'TCAPMessages'
    _oid_   = [0, 0, 17, 773, 2, 1, 3]
    
    _obj_ = [
        'TCMessage',
        'Unidirectional',
        'Begin',
        'End',
        'Continue',
        'Abort',
        'DialoguePortion',
        'OrigTransactionID',
        'DestTransactionID',
        'P-AbortCause',
        'ComponentPortion',
        'Component',
        'TCInvokeIdSet',
        ]
    _type_ = [
        'TCMessage',
        'Unidirectional',
        'Begin',
        'End',
        'Continue',
        'Abort',
        'DialoguePortion',
        'OrigTransactionID',
        'DestTransactionID',
        'P-AbortCause',
        'ComponentPortion',
        'Component',
        ]
    _set_ = [
        'TCInvokeIdSet',
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        'TCMessage',
        'Unidirectional',
        'Begin',
        'End',
        'Continue',
        'ComponentPortion',
        'Component',
        ]
    
    #-----< TCMessage >-----#
    TCMessage = CHOICE(name='TCMessage', mode=MODE_TYPE, param=True)
    
    #-----< Unidirectional >-----#
    Unidirectional = SEQ(name='Unidirectional', mode=MODE_TYPE, param=True)
    
    #-----< Begin >-----#
    Begin = SEQ(name='Begin', mode=MODE_TYPE, param=True)
    
    #-----< End >-----#
    End = SEQ(name='End', mode=MODE_TYPE, param=True)
    
    #-----< Continue >-----#
    Continue = SEQ(name='Continue', mode=MODE_TYPE, param=True)
    
    #-----< Abort >-----#
    Abort = SEQ(name='Abort', mode=MODE_TYPE)
    _Abort_dtid = OCT_STR(name='dtid', mode=MODE_TYPE, typeref=ASN1RefType(('TCAPMessages', 'DestTransactionID')))
    _Abort_reason = CHOICE(name='reason', mode=MODE_TYPE, opt=True)
    __Abort_reason_p_abortCause = INT(name='p-abortCause', mode=MODE_TYPE, typeref=ASN1RefType(('TCAPMessages', 'P-AbortCause')))
    __Abort_reason_u_abortCause = EXT(name='u-abortCause', mode=MODE_TYPE, typeref=ASN1RefType(('TCAPMessages', 'DialoguePortion')))
    _Abort_reason._cont = ASN1Dict([
        ('p-abortCause', __Abort_reason_p_abortCause),
        ('u-abortCause', __Abort_reason_u_abortCause),
        ])
    _Abort_reason._ext = None
    Abort._cont = ASN1Dict([
        ('dtid', _Abort_dtid),
        ('reason', _Abort_reason),
        ])
    Abort._ext = None
    
    #-----< DialoguePortion >-----#
    DialoguePortion = EXT(name='DialoguePortion', mode=MODE_TYPE, tag=(11, TAG_APPLICATION, TAG_EXPLICIT), typeref=ASN1RefType(('_IMPL_', 'EXTERNAL')))
    
    #-----< OrigTransactionID >-----#
    OrigTransactionID = OCT_STR(name='OrigTransactionID', mode=MODE_TYPE, tag=(8, TAG_APPLICATION, TAG_IMPLICIT))
    OrigTransactionID._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    
    #-----< DestTransactionID >-----#
    DestTransactionID = OCT_STR(name='DestTransactionID', mode=MODE_TYPE, tag=(9, TAG_APPLICATION, TAG_IMPLICIT))
    DestTransactionID._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    
    #-----< P-AbortCause >-----#
    P_AbortCause = INT(name='P-AbortCause', mode=MODE_TYPE, tag=(10, TAG_APPLICATION, TAG_IMPLICIT))
    P_AbortCause._cont = ASN1Dict([('unrecognizedMessageType', 0), ('unrecognizedTransactionID', 1), ('badlyFormattedTransactionPortion', 2), ('incorrectTransactionPortion', 3), ('resourceLimitation', 4)])
    P_AbortCause._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=None, er=[])
    
    #-----< ComponentPortion >-----#
    ComponentPortion = SEQ_OF(name='ComponentPortion', mode=MODE_TYPE, tag=(12, TAG_APPLICATION, TAG_IMPLICIT), param=True)
    
    #-----< Component >-----#
    Component = CHOICE(name='Component', mode=MODE_TYPE, param=True)
    
    #-----< TCInvokeIdSet >-----#
    TCInvokeIdSet = CHOICE(name='TCInvokeIdSet', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Generic-ROS-PDUs', 'InvokeId')))
    TCInvokeIdSet._val = ASN1Set(rv=[('present', -128), ('present', -127), ('present', -126), ('present', -125), ('present', -124), ('present', -123), ('present', -122), ('present', -121), ('present', -120), ('present', -119), ('present', -118), ('present', -117), ('present', -116), ('present', -115), ('present', -114), ('present', -113), ('present', -112), ('present', -111), ('present', -110), ('present', -109), ('present', -108), ('present', -107), ('present', -106), ('present', -105), ('present', -104), ('present', -103), ('present', -102), ('present', -101), ('present', -100), ('present', -99), ('present', -98), ('present', -97), ('present', -96), ('present', -95), ('present', -94), ('present', -93), ('present', -92), ('present', -91), ('present', -90), ('present', -89), ('present', -88), ('present', -87), ('present', -86), ('present', -85), ('present', -84), ('present', -83), ('present', -82), ('present', -81), ('present', -80), ('present', -79), ('present', -78), ('present', -77), ('present', -76), ('present', -75), ('present', -74), ('present', -73), ('present', -72), ('present', -71), ('present', -70), ('present', -69), ('present', -68), ('present', -67), ('present', -66), ('present', -65), ('present', -64), ('present', -63), ('present', -62), ('present', -61), ('present', -60), ('present', -59), ('present', -58), ('present', -57), ('present', -56), ('present', -55), ('present', -54), ('present', -53), ('present', -52), ('present', -51), ('present', -50), ('present', -49), ('present', -48), ('present', -47), ('present', -46), ('present', -45), ('present', -44), ('present', -43), ('present', -42), ('present', -41), ('present', -40), ('present', -39), ('present', -38), ('present', -37), ('present', -36), ('present', -35), ('present', -34), ('present', -33), ('present', -32), ('present', -31), ('present', -30), ('present', -29), ('present', -28), ('present', -27), ('present', -26), ('present', -25), ('present', -24), ('present', -23), ('present', -22), ('present', -21), ('present', -20), ('present', -19), ('present', -18), ('present', -17), ('present', -16), ('present', -15), ('present', -14), ('present', -13), ('present', -12), ('present', -11), ('present', -10), ('present', -9), ('present', -8), ('present', -7), ('present', -6), ('present', -5), ('present', -4), ('present', -3), ('present', -2), ('present', -1), ('present', 0), ('present', 1), ('present', 2), ('present', 3), ('present', 4), ('present', 5), ('present', 6), ('present', 7), ('present', 8), ('present', 9), ('present', 10), ('present', 11), ('present', 12), ('present', 13), ('present', 14), ('present', 15), ('present', 16), ('present', 17), ('present', 18), ('present', 19), ('present', 20), ('present', 21), ('present', 22), ('present', 23), ('present', 24), ('present', 25), ('present', 26), ('present', 27), ('present', 28), ('present', 29), ('present', 30), ('present', 31), ('present', 32), ('present', 33), ('present', 34), ('present', 35), ('present', 36), ('present', 37), ('present', 38), ('present', 39), ('present', 40), ('present', 41), ('present', 42), ('present', 43), ('present', 44), ('present', 45), ('present', 46), ('present', 47), ('present', 48), ('present', 49), ('present', 50), ('present', 51), ('present', 52), ('present', 53), ('present', 54), ('present', 55), ('present', 56), ('present', 57), ('present', 58), ('present', 59), ('present', 60), ('present', 61), ('present', 62), ('present', 63), ('present', 64), ('present', 65), ('present', 66), ('present', 67), ('present', 68), ('present', 69), ('present', 70), ('present', 71), ('present', 72), ('present', 73), ('present', 74), ('present', 75), ('present', 76), ('present', 77), ('present', 78), ('present', 79), ('present', 80), ('present', 81), ('present', 82), ('present', 83), ('present', 84), ('present', 85), ('present', 86), ('present', 87), ('present', 88), ('present', 89), ('present', 90), ('present', 91), ('present', 92), ('present', 93), ('present', 94), ('present', 95), ('present', 96), ('present', 97), ('present', 98), ('present', 99), ('present', 100), ('present', 101), ('present', 102), ('present', 103), ('present', 104), ('present', 105), ('present', 106), ('present', 107), ('present', 108), ('present', 109), ('present', 110), ('present', 111), ('present', 112), ('present', 113), ('present', 114), ('present', 115), ('present', 116), ('present', 117), ('present', 118), ('present', 119), ('present', 120), ('present', 121), ('present', 122), ('present', 123), ('present', 124), ('present', 125), ('present', 126), ('present', 127)], rr=[], ev=None, er=[])
    
    _all_ = [
        _Abort_dtid,
        __Abort_reason_p_abortCause,
        __Abort_reason_u_abortCause,
        _Abort_reason,
        Abort,
        DialoguePortion,
        OrigTransactionID,
        DestTransactionID,
        P_AbortCause,
        TCInvokeIdSet,
    ]

class TCAP_Tools:

    _name_  = 'TCAP-Tools'
    _oid_   = [0, 0, 17, 775, 2, 1, 1]
    
    _obj_ = [
        'cancel',
        'cancelFailed',
        'CancelProblem',
        'cancelled',
        ]
    _type_ = [
        'CancelProblem',
        ]
    _set_ = [
        ]
    _val_ = [
        'cancel',
        'cancelFailed',
        'cancelled',
        ]
    _class_ = [
        'cancel',
        'cancelFailed',
        'cancelled',
        ]
    _param_ = [
        ]
    
    #-----< cancel >-----#
    cancel = CLASS(name='cancel', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')))
    _cancel_val_ArgumentType = INT(name='ArgumentType', mode=MODE_TYPE, typeref=ASN1RefChoiceComp(('TCAPMessages', 'TCInvokeIdSet'), ['present']))
    __OPERATION_Errors_val_ParameterType_0 = SET(name='ParameterType', mode=MODE_TYPE)
    ___OPERATION_Errors_val_ParameterType_0_problem = ENUM(name='problem', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('TCAP-Tools', 'CancelProblem')))
    ___OPERATION_Errors_val_ParameterType_0_invokeId = INT(name='invokeId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefChoiceComp(('TCAPMessages', 'TCInvokeIdSet'), ['present']))
    __OPERATION_Errors_val_ParameterType_0._cont = ASN1Dict([
        ('problem', ___OPERATION_Errors_val_ParameterType_0_problem),
        ('invokeId', ___OPERATION_Errors_val_ParameterType_0_invokeId),
        ])
    __OPERATION_Errors_val_ParameterType_0._ext = None
    cancel._val = dict([('ArgumentType', _cancel_val_ArgumentType), ('Errors', ASN1Set(rv=[dict([('ParameterType', __OPERATION_Errors_val_ParameterType_0)])], rr=[], ev=None, er=[]))])
    
    #-----< cancelFailed >-----#
    cancelFailed = CLASS(name='cancelFailed', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    _cancelFailed_val_ParameterType = SET(name='ParameterType', mode=MODE_TYPE)
    __cancelFailed_val_ParameterType_problem = ENUM(name='problem', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('TCAP-Tools', 'CancelProblem')))
    __cancelFailed_val_ParameterType_invokeId = INT(name='invokeId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefChoiceComp(('TCAPMessages', 'TCInvokeIdSet'), ['present']))
    _cancelFailed_val_ParameterType._cont = ASN1Dict([
        ('problem', __cancelFailed_val_ParameterType_problem),
        ('invokeId', __cancelFailed_val_ParameterType_invokeId),
        ])
    _cancelFailed_val_ParameterType._ext = None
    cancelFailed._val = dict([('ParameterType', _cancelFailed_val_ParameterType)])
    
    #-----< CancelProblem >-----#
    CancelProblem = ENUM(name='CancelProblem', mode=MODE_TYPE)
    CancelProblem._cont = ASN1Dict([('unknownInvocation', 0), ('tooLate', 1), ('notCancellable', 2)])
    CancelProblem._ext = None
    
    #-----< cancelled >-----#
    cancelled = CLASS(name='cancelled', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    cancelled._val = dict([])
    
    _all_ = [
        cancel,
        _cancel_val_ArgumentType,
        ___OPERATION_Errors_val_ParameterType_0_problem,
        ___OPERATION_Errors_val_ParameterType_0_invokeId,
        __OPERATION_Errors_val_ParameterType_0,
        cancelFailed,
        __cancelFailed_val_ParameterType_problem,
        __cancelFailed_val_ParameterType_invokeId,
        _cancelFailed_val_ParameterType,
        CancelProblem,
        cancelled,
    ]

class TCAP_Examples:

    _name_  = 'TCAP-Examples'
    _oid_   = [0, 0, 17, 775, 2, 2, 1]
    
    _obj_ = [
        'provideRoutingInformation',
        'getCallingPartyAddress',
        'invalidCalledNumber',
        'subscriberNotReachable',
        'calledBarred',
        'callingPartyAddressNotAvailable',
        'processingFailure',
        'RequestArgument',
        'RoutingInformation',
        'BasicServiceIndicator',
        'CallingPartyAddress',
        'IsdnNumber',
        'TypeOfAddress',
        'TelephonyString',
        ]
    _type_ = [
        'RequestArgument',
        'RoutingInformation',
        'BasicServiceIndicator',
        'CallingPartyAddress',
        'IsdnNumber',
        'TypeOfAddress',
        'TelephonyString',
        ]
    _set_ = [
        ]
    _val_ = [
        'provideRoutingInformation',
        'getCallingPartyAddress',
        'invalidCalledNumber',
        'subscriberNotReachable',
        'calledBarred',
        'callingPartyAddressNotAvailable',
        'processingFailure',
        ]
    _class_ = [
        'provideRoutingInformation',
        'getCallingPartyAddress',
        'invalidCalledNumber',
        'subscriberNotReachable',
        'calledBarred',
        'callingPartyAddressNotAvailable',
        'processingFailure',
        ]
    _param_ = [
        ]
    
    #-----< provideRoutingInformation >-----#
    provideRoutingInformation = CLASS(name='provideRoutingInformation', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')))
    _provideRoutingInformation_val_ArgumentType = SEQ(name='ArgumentType', mode=MODE_TYPE, typeref=ASN1RefType(('TCAP-Examples', 'RequestArgument')))
    _provideRoutingInformation_val_ResultType = CHOICE(name='ResultType', mode=MODE_TYPE, typeref=ASN1RefType(('TCAP-Examples', 'RoutingInformation')))
    __OPERATION_Linked_val_ResultType_0 = SEQ(name='ResultType', mode=MODE_TYPE, typeref=ASN1RefType(('TCAP-Examples', 'CallingPartyAddress')))
    provideRoutingInformation._val = dict([('ArgumentType', _provideRoutingInformation_val_ArgumentType), ('ResultType', _provideRoutingInformation_val_ResultType), ('Errors', ASN1Set(rv=[dict([('errorCode', ('local', 1))]), dict([('errorCode', ('local', 2))]), dict([('errorCode', ('local', 3))]), dict([('errorCode', ('local', 5))])], rr=[], ev=None, er=[])), ('Linked', ASN1Set(rv=[dict([('ResultType', __OPERATION_Linked_val_ResultType_0), ('Errors', ASN1Set(rv=[dict([('errorCode', ('local', 4))]), dict([('errorCode', ('local', 5))])], rr=[], ev=None, er=[]))])], rr=[], ev=None, er=[]))])
    
    #-----< getCallingPartyAddress >-----#
    getCallingPartyAddress = CLASS(name='getCallingPartyAddress', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')))
    _getCallingPartyAddress_val_ResultType = SEQ(name='ResultType', mode=MODE_TYPE, typeref=ASN1RefType(('TCAP-Examples', 'CallingPartyAddress')))
    getCallingPartyAddress._val = dict([('ResultType', _getCallingPartyAddress_val_ResultType), ('Errors', ASN1Set(rv=[dict([('errorCode', ('local', 4))]), dict([('errorCode', ('local', 5))])], rr=[], ev=None, er=[]))])
    
    #-----< invalidCalledNumber >-----#
    invalidCalledNumber = CLASS(name='invalidCalledNumber', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    invalidCalledNumber._val = dict([('errorCode', ('local', 1))])
    
    #-----< subscriberNotReachable >-----#
    subscriberNotReachable = CLASS(name='subscriberNotReachable', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    subscriberNotReachable._val = dict([('errorCode', ('local', 2))])
    
    #-----< calledBarred >-----#
    calledBarred = CLASS(name='calledBarred', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    calledBarred._val = dict([('errorCode', ('local', 3))])
    
    #-----< callingPartyAddressNotAvailable >-----#
    callingPartyAddressNotAvailable = CLASS(name='callingPartyAddressNotAvailable', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    callingPartyAddressNotAvailable._val = dict([('errorCode', ('local', 4))])
    
    #-----< processingFailure >-----#
    processingFailure = CLASS(name='processingFailure', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    processingFailure._val = dict([('errorCode', ('local', 5))])
    
    #-----< RequestArgument >-----#
    RequestArgument = SEQ(name='RequestArgument', mode=MODE_TYPE)
    _RequestArgument_calledNumber = SEQ(name='calledNumber', mode=MODE_TYPE, typeref=ASN1RefType(('TCAP-Examples', 'IsdnNumber')))
    _RequestArgument_basicService = ENUM(name='basicService', mode=MODE_TYPE, typeref=ASN1RefType(('TCAP-Examples', 'BasicServiceIndicator')), opt=True)
    RequestArgument._cont = ASN1Dict([
        ('calledNumber', _RequestArgument_calledNumber),
        ('basicService', _RequestArgument_basicService),
        ])
    RequestArgument._ext = None
    
    #-----< RoutingInformation >-----#
    RoutingInformation = CHOICE(name='RoutingInformation', mode=MODE_TYPE)
    _RoutingInformation_reroutingNumber = SEQ(name='reroutingNumber', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TCAP-Examples', 'IsdnNumber')))
    _RoutingInformation_forwardedToNumber = SEQ(name='forwardedToNumber', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TCAP-Examples', 'IsdnNumber')))
    RoutingInformation._cont = ASN1Dict([
        ('reroutingNumber', _RoutingInformation_reroutingNumber),
        ('forwardedToNumber', _RoutingInformation_forwardedToNumber),
        ])
    RoutingInformation._ext = None
    
    #-----< BasicServiceIndicator >-----#
    BasicServiceIndicator = ENUM(name='BasicServiceIndicator', mode=MODE_TYPE)
    BasicServiceIndicator._cont = ASN1Dict([('speech', 0), ('unrestrictedDigital', 1)])
    BasicServiceIndicator._ext = None
    
    #-----< CallingPartyAddress >-----#
    CallingPartyAddress = SEQ(name='CallingPartyAddress', mode=MODE_TYPE, typeref=ASN1RefType(('TCAP-Examples', 'IsdnNumber')))
    
    #-----< IsdnNumber >-----#
    IsdnNumber = SEQ(name='IsdnNumber', mode=MODE_TYPE)
    _IsdnNumber_typeOfAddress = ENUM(name='typeOfAddress', mode=MODE_TYPE, typeref=ASN1RefType(('TCAP-Examples', 'TypeOfAddress')))
    _IsdnNumber_digits = STR_IA5(name='digits', mode=MODE_TYPE, typeref=ASN1RefType(('TCAP-Examples', 'TelephonyString')))
    _IsdnNumber_digits._const_alpha = ASN1Set(rv=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '*', '#'], rr=[], ev=None, er=[])
    IsdnNumber._cont = ASN1Dict([
        ('typeOfAddress', _IsdnNumber_typeOfAddress),
        ('digits', _IsdnNumber_digits),
        ])
    IsdnNumber._ext = None
    
    #-----< TypeOfAddress >-----#
    TypeOfAddress = ENUM(name='TypeOfAddress', mode=MODE_TYPE)
    TypeOfAddress._cont = ASN1Dict([('national', 0), ('international', 1), ('private', 2)])
    TypeOfAddress._ext = None
    
    #-----< TelephonyString >-----#
    TelephonyString = STR_IA5(name='TelephonyString', mode=MODE_TYPE)
    TelephonyString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=15)], ev=None, er=[])
    TelephonyString._const_alpha = ASN1Set(rv=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '*', '#'], rr=[], ev=None, er=[])
    
    _all_ = [
        provideRoutingInformation,
        _provideRoutingInformation_val_ArgumentType,
        _provideRoutingInformation_val_ResultType,
        __OPERATION_Linked_val_ResultType_0,
        getCallingPartyAddress,
        _getCallingPartyAddress_val_ResultType,
        invalidCalledNumber,
        subscriberNotReachable,
        calledBarred,
        callingPartyAddressNotAvailable,
        processingFailure,
        _RequestArgument_calledNumber,
        _RequestArgument_basicService,
        RequestArgument,
        _RoutingInformation_reroutingNumber,
        _RoutingInformation_forwardedToNumber,
        RoutingInformation,
        BasicServiceIndicator,
        CallingPartyAddress,
        _IsdnNumber_typeOfAddress,
        _IsdnNumber_digits,
        IsdnNumber,
        TypeOfAddress,
        TelephonyString,
    ]

class TC_Notation_Extensions:

    _name_  = 'TC-Notation-Extensions'
    _oid_   = [0, 0, 17, 775, 2, 4, 1]
    
    _obj_ = [
        'APPLICATION-CONTEXT',
        'DialogueMode',
        'Termination',
        'dialogue-abstract-syntax',
        'uniDialogue-abstract-syntax',
        'TCSingleAS',
        'TCConsumerAS',
        'TCSupplierAS',
        'ConnectionAS',
        ]
    _type_ = [
        'APPLICATION-CONTEXT',
        'DialogueMode',
        'Termination',
        'TCSingleAS',
        'TCConsumerAS',
        'TCSupplierAS',
        'ConnectionAS',
        ]
    _set_ = [
        ]
    _val_ = [
        'dialogue-abstract-syntax',
        'uniDialogue-abstract-syntax',
        ]
    _class_ = [
        'APPLICATION-CONTEXT',
        'dialogue-abstract-syntax',
        'uniDialogue-abstract-syntax',
        ]
    _param_ = [
        'TCSingleAS',
        'TCConsumerAS',
        'TCSupplierAS',
        'ConnectionAS',
        ]
    
    #-----< APPLICATION-CONTEXT >-----#
    APPLICATION_CONTEXT = CLASS(name='APPLICATION-CONTEXT', mode=MODE_TYPE)
    _APPLICATION_CONTEXT_associationContract = CLASS(name='associationContract', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'CONTRACT')))
    _APPLICATION_CONTEXT_dialogueMode = ENUM(name='dialogueMode', mode=MODE_VALUE, typeref=ASN1RefType(('TC-Notation-Extensions', 'DialogueMode')))
    _APPLICATION_CONTEXT_termination = ENUM(name='termination', mode=MODE_VALUE, typeref=ASN1RefType(('TC-Notation-Extensions', 'Termination')), opt=True)
    _APPLICATION_CONTEXT_componentGrouping = BOOL(name='componentGrouping', mode=MODE_VALUE, default=True)
    _APPLICATION_CONTEXT_dialogueAndComponentGrouping = BOOL(name='dialogueAndComponentGrouping', mode=MODE_VALUE, default=True)
    _APPLICATION_CONTEXT_AdditionalASEs = OID(name='AdditionalASEs', mode=MODE_SET, opt=True)
    _APPLICATION_CONTEXT_AbstractSyntaxes = CLASS(name='AbstractSyntaxes', mode=MODE_SET, typeref=ASN1RefType(('_IMPL_', 'ABSTRACT-SYNTAX'), []))
    _APPLICATION_CONTEXT_applicationContextName = OID(name='applicationContextName', mode=MODE_VALUE, uniq=True)
    APPLICATION_CONTEXT._cont = ASN1Dict([
        ('associationContract', _APPLICATION_CONTEXT_associationContract),
        ('dialogueMode', _APPLICATION_CONTEXT_dialogueMode),
        ('termination', _APPLICATION_CONTEXT_termination),
        ('componentGrouping', _APPLICATION_CONTEXT_componentGrouping),
        ('dialogueAndComponentGrouping', _APPLICATION_CONTEXT_dialogueAndComponentGrouping),
        ('AdditionalASEs', _APPLICATION_CONTEXT_AdditionalASEs),
        ('AbstractSyntaxes', _APPLICATION_CONTEXT_AbstractSyntaxes),
        ('applicationContextName', _APPLICATION_CONTEXT_applicationContextName),
        ])
    
    #-----< DialogueMode >-----#
    DialogueMode = ENUM(name='DialogueMode', mode=MODE_TYPE)
    DialogueMode._cont = ASN1Dict([('structured', 1), ('unstructured', 2)])
    DialogueMode._ext = None
    
    #-----< Termination >-----#
    Termination = ENUM(name='Termination', mode=MODE_TYPE)
    Termination._cont = ASN1Dict([('basic', 1), ('prearranged', 2)])
    Termination._ext = None
    
    #-----< dialogue-abstract-syntax >-----#
    dialogue_abstract_syntax = CLASS(name='dialogue-abstract-syntax', mode=MODE_VALUE, typeref=ASN1RefType(('_IMPL_', 'ABSTRACT-SYNTAX'), []))
    _dialogue_abstract_syntax_val_Type = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('DialoguePDUs', 'DialoguePDU')))
    dialogue_abstract_syntax._val = dict([('Type', _dialogue_abstract_syntax_val_Type), ('id', (0, 0, 17, 773, 1, 1, 1))])
    
    #-----< uniDialogue-abstract-syntax >-----#
    uniDialogue_abstract_syntax = CLASS(name='uniDialogue-abstract-syntax', mode=MODE_VALUE, typeref=ASN1RefType(('_IMPL_', 'ABSTRACT-SYNTAX'), []))
    _uniDialogue_abstract_syntax_val_Type = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('UnidialoguePDUs', 'UniDialoguePDU')))
    uniDialogue_abstract_syntax._val = dict([('Type', _uniDialogue_abstract_syntax_val_Type), ('id', (0, 0, 17, 773, 1, 2, 1))])
    
    #-----< TCSingleAS >-----#
    TCSingleAS = CHOICE(name='TCSingleAS', mode=MODE_TYPE, typeref=ASN1RefType(('TCAPMessages', 'TCMessage')), param=True)
    
    #-----< TCConsumerAS >-----#
    TCConsumerAS = CHOICE(name='TCConsumerAS', mode=MODE_TYPE, typeref=ASN1RefType(('TCAPMessages', 'TCMessage')), param=True)
    
    #-----< TCSupplierAS >-----#
    TCSupplierAS = CHOICE(name='TCSupplierAS', mode=MODE_TYPE, typeref=ASN1RefType(('TCAPMessages', 'TCMessage')), param=True)
    
    #-----< ConnectionAS >-----#
    ConnectionAS = CHOICE(name='ConnectionAS', mode=MODE_TYPE, param=True)
    
    _all_ = [
        _APPLICATION_CONTEXT_associationContract,
        _APPLICATION_CONTEXT_dialogueMode,
        _APPLICATION_CONTEXT_termination,
        _APPLICATION_CONTEXT_componentGrouping,
        _APPLICATION_CONTEXT_dialogueAndComponentGrouping,
        _APPLICATION_CONTEXT_AdditionalASEs,
        _APPLICATION_CONTEXT_AbstractSyntaxes,
        _APPLICATION_CONTEXT_applicationContextName,
        APPLICATION_CONTEXT,
        DialogueMode,
        Termination,
        dialogue_abstract_syntax,
        _dialogue_abstract_syntax_val_Type,
        uniDialogue_abstract_syntax,
        _uniDialogue_abstract_syntax_val_Type,
    ]

class _IMPL_:

    _name_ = '_IMPL_'
    _oid_  = []
    _obj_  = ['REAL', 'EXTERNAL', 'EMBEDDED PDV', 'CHARACTER STRING', 'TYPE-IDENTIFIER', 'ABSTRACT-SYNTAX']
    
    #-----< REAL >-----#
    REAL = SEQ(name='REAL', mode=MODE_TYPE)
    _REAL_mantissa = INT(name='mantissa', mode=MODE_TYPE)
    _REAL_base = INT(name='base', mode=MODE_TYPE)
    _REAL_base._const_val = ASN1Set(rv=[2, 10], rr=[], ev=None, er=[])
    _REAL_exponent = INT(name='exponent', mode=MODE_TYPE)
    REAL._cont = ASN1Dict([
        ('mantissa', _REAL_mantissa),
        ('base', _REAL_base),
        ('exponent', _REAL_exponent),
        ])
    REAL._ext = None
    
    #-----< EXTERNAL >-----#
    EXTERNAL = SEQ(name='EXTERNAL', mode=MODE_TYPE)
    _EXTERNAL_identification = CHOICE(name='identification', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_syntaxes = SEQ(name='syntaxes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EXTERNAL_identification_syntaxes_abstract = OID(name='abstract', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EXTERNAL_identification_syntaxes_transfer = OID(name='transfer', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_syntaxes._cont = ASN1Dict([
        ('abstract', ___EXTERNAL_identification_syntaxes_abstract),
        ('transfer', ___EXTERNAL_identification_syntaxes_transfer),
        ])
    __EXTERNAL_identification_syntaxes._ext = None
    __EXTERNAL_identification_syntax = OID(name='syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_context_negotiation = SEQ(name='context-negotiation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EXTERNAL_identification_context_negotiation_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EXTERNAL_identification_context_negotiation_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_context_negotiation._cont = ASN1Dict([
        ('presentation-context-id', ___EXTERNAL_identification_context_negotiation_presentation_context_id),
        ('transfer-syntax', ___EXTERNAL_identification_context_negotiation_transfer_syntax),
        ])
    __EXTERNAL_identification_context_negotiation._ext = None
    __EXTERNAL_identification_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_fixed = NULL(name='fixed', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    _EXTERNAL_identification._cont = ASN1Dict([
        ('syntaxes', __EXTERNAL_identification_syntaxes),
        ('syntax', __EXTERNAL_identification_syntax),
        ('presentation-context-id', __EXTERNAL_identification_presentation_context_id),
        ('context-negotiation', __EXTERNAL_identification_context_negotiation),
        ('transfer-syntax', __EXTERNAL_identification_transfer_syntax),
        ('fixed', __EXTERNAL_identification_fixed),
        ])
    _EXTERNAL_identification._ext = None
    _EXTERNAL_data_value_descriptor = OBJ_DESC(name='data-value-descriptor', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), opt=True)
    _EXTERNAL_data_value = OCT_STR(name='data-value', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    EXTERNAL._cont = ASN1Dict([
        ('identification', _EXTERNAL_identification),
        ('data-value-descriptor', _EXTERNAL_data_value_descriptor),
        ('data-value', _EXTERNAL_data_value),
        ])
    EXTERNAL._ext = None
    
    #-----< EMBEDDED PDV >-----#
    EMBEDDED_PDV = SEQ(name='EMBEDDED PDV', mode=MODE_TYPE)
    _EMBEDDED_PDV_identification = CHOICE(name='identification', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_syntaxes = SEQ(name='syntaxes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EMBEDDED_PDV_identification_syntaxes_abstract = OID(name='abstract', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EMBEDDED_PDV_identification_syntaxes_transfer = OID(name='transfer', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_syntaxes._cont = ASN1Dict([
        ('abstract', ___EMBEDDED_PDV_identification_syntaxes_abstract),
        ('transfer', ___EMBEDDED_PDV_identification_syntaxes_transfer),
        ])
    __EMBEDDED_PDV_identification_syntaxes._ext = None
    __EMBEDDED_PDV_identification_syntax = OID(name='syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_context_negotiation = SEQ(name='context-negotiation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EMBEDDED_PDV_identification_context_negotiation_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EMBEDDED_PDV_identification_context_negotiation_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_context_negotiation._cont = ASN1Dict([
        ('presentation-context-id', ___EMBEDDED_PDV_identification_context_negotiation_presentation_context_id),
        ('transfer-syntax', ___EMBEDDED_PDV_identification_context_negotiation_transfer_syntax),
        ])
    __EMBEDDED_PDV_identification_context_negotiation._ext = None
    __EMBEDDED_PDV_identification_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_fixed = NULL(name='fixed', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    _EMBEDDED_PDV_identification._cont = ASN1Dict([
        ('syntaxes', __EMBEDDED_PDV_identification_syntaxes),
        ('syntax', __EMBEDDED_PDV_identification_syntax),
        ('presentation-context-id', __EMBEDDED_PDV_identification_presentation_context_id),
        ('context-negotiation', __EMBEDDED_PDV_identification_context_negotiation),
        ('transfer-syntax', __EMBEDDED_PDV_identification_transfer_syntax),
        ('fixed', __EMBEDDED_PDV_identification_fixed),
        ])
    _EMBEDDED_PDV_identification._ext = None
    _EMBEDDED_PDV_data_value_descriptor = OBJ_DESC(name='data-value-descriptor', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), opt=True)
    _EMBEDDED_PDV_data_value = OCT_STR(name='data-value', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    EMBEDDED_PDV._cont = ASN1Dict([
        ('identification', _EMBEDDED_PDV_identification),
        ('data-value-descriptor', _EMBEDDED_PDV_data_value_descriptor),
        ('data-value', _EMBEDDED_PDV_data_value),
        ])
    EMBEDDED_PDV._ext = None
    
    #-----< CHARACTER STRING >-----#
    CHARACTER_STRING = SEQ(name='CHARACTER STRING', mode=MODE_TYPE)
    _CHARACTER_STRING_identification = CHOICE(name='identification', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_syntaxes = SEQ(name='syntaxes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___CHARACTER_STRING_identification_syntaxes_abstract = OID(name='abstract', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___CHARACTER_STRING_identification_syntaxes_transfer = OID(name='transfer', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_syntaxes._cont = ASN1Dict([
        ('abstract', ___CHARACTER_STRING_identification_syntaxes_abstract),
        ('transfer', ___CHARACTER_STRING_identification_syntaxes_transfer),
        ])
    __CHARACTER_STRING_identification_syntaxes._ext = None
    __CHARACTER_STRING_identification_syntax = OID(name='syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_context_negotiation = SEQ(name='context-negotiation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___CHARACTER_STRING_identification_context_negotiation_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___CHARACTER_STRING_identification_context_negotiation_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_context_negotiation._cont = ASN1Dict([
        ('presentation-context-id', ___CHARACTER_STRING_identification_context_negotiation_presentation_context_id),
        ('transfer-syntax', ___CHARACTER_STRING_identification_context_negotiation_transfer_syntax),
        ])
    __CHARACTER_STRING_identification_context_negotiation._ext = None
    __CHARACTER_STRING_identification_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_fixed = NULL(name='fixed', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    _CHARACTER_STRING_identification._cont = ASN1Dict([
        ('syntaxes', __CHARACTER_STRING_identification_syntaxes),
        ('syntax', __CHARACTER_STRING_identification_syntax),
        ('presentation-context-id', __CHARACTER_STRING_identification_presentation_context_id),
        ('context-negotiation', __CHARACTER_STRING_identification_context_negotiation),
        ('transfer-syntax', __CHARACTER_STRING_identification_transfer_syntax),
        ('fixed', __CHARACTER_STRING_identification_fixed),
        ])
    _CHARACTER_STRING_identification._ext = None
    _CHARACTER_STRING_data_value_descriptor = OBJ_DESC(name='data-value-descriptor', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), opt=True)
    _CHARACTER_STRING_string_value = OCT_STR(name='string-value', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    CHARACTER_STRING._cont = ASN1Dict([
        ('identification', _CHARACTER_STRING_identification),
        ('data-value-descriptor', _CHARACTER_STRING_data_value_descriptor),
        ('string-value', _CHARACTER_STRING_string_value),
        ])
    CHARACTER_STRING._ext = None
    
    #-----< TYPE-IDENTIFIER >-----#
    TYPE_IDENTIFIER = CLASS(name='TYPE-IDENTIFIER', mode=MODE_TYPE)
    _TYPE_IDENTIFIER_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    _TYPE_IDENTIFIER_Type = OPEN(name='Type', mode=MODE_TYPE)
    TYPE_IDENTIFIER._cont = ASN1Dict([
        ('id', _TYPE_IDENTIFIER_id),
        ('Type', _TYPE_IDENTIFIER_Type),
        ])
    
    #-----< ABSTRACT-SYNTAX >-----#
    ABSTRACT_SYNTAX = CLASS(name='ABSTRACT-SYNTAX', mode=MODE_TYPE)
    _ABSTRACT_SYNTAX_id = OID(name='id', mode=MODE_VALUE)
    _ABSTRACT_SYNTAX_Type = OPEN(name='Type', mode=MODE_TYPE)
    _ABSTRACT_SYNTAX_property = BIT_STR(name='property', mode=MODE_VALUE, default=(0, 0))
    _ABSTRACT_SYNTAX_property._cont = ASN1Dict([('handles-invalid-encodings', 0)])
    ABSTRACT_SYNTAX._cont = ASN1Dict([
        ('id', _ABSTRACT_SYNTAX_id),
        ('Type', _ABSTRACT_SYNTAX_Type),
        ('property', _ABSTRACT_SYNTAX_property),
        ])
    
    _all_ = [
        _REAL_mantissa,
        _REAL_base,
        _REAL_exponent,
        REAL,
        ___EXTERNAL_identification_syntaxes_abstract,
        ___EXTERNAL_identification_syntaxes_transfer,
        __EXTERNAL_identification_syntaxes,
        __EXTERNAL_identification_syntax,
        __EXTERNAL_identification_presentation_context_id,
        ___EXTERNAL_identification_context_negotiation_presentation_context_id,
        ___EXTERNAL_identification_context_negotiation_transfer_syntax,
        __EXTERNAL_identification_context_negotiation,
        __EXTERNAL_identification_transfer_syntax,
        __EXTERNAL_identification_fixed,
        _EXTERNAL_identification,
        _EXTERNAL_data_value_descriptor,
        _EXTERNAL_data_value,
        EXTERNAL,
        ___EMBEDDED_PDV_identification_syntaxes_abstract,
        ___EMBEDDED_PDV_identification_syntaxes_transfer,
        __EMBEDDED_PDV_identification_syntaxes,
        __EMBEDDED_PDV_identification_syntax,
        __EMBEDDED_PDV_identification_presentation_context_id,
        ___EMBEDDED_PDV_identification_context_negotiation_presentation_context_id,
        ___EMBEDDED_PDV_identification_context_negotiation_transfer_syntax,
        __EMBEDDED_PDV_identification_context_negotiation,
        __EMBEDDED_PDV_identification_transfer_syntax,
        __EMBEDDED_PDV_identification_fixed,
        _EMBEDDED_PDV_identification,
        _EMBEDDED_PDV_data_value_descriptor,
        _EMBEDDED_PDV_data_value,
        EMBEDDED_PDV,
        ___CHARACTER_STRING_identification_syntaxes_abstract,
        ___CHARACTER_STRING_identification_syntaxes_transfer,
        __CHARACTER_STRING_identification_syntaxes,
        __CHARACTER_STRING_identification_syntax,
        __CHARACTER_STRING_identification_presentation_context_id,
        ___CHARACTER_STRING_identification_context_negotiation_presentation_context_id,
        ___CHARACTER_STRING_identification_context_negotiation_transfer_syntax,
        __CHARACTER_STRING_identification_context_negotiation,
        __CHARACTER_STRING_identification_transfer_syntax,
        __CHARACTER_STRING_identification_fixed,
        _CHARACTER_STRING_identification,
        _CHARACTER_STRING_data_value_descriptor,
        _CHARACTER_STRING_string_value,
        CHARACTER_STRING,
        _TYPE_IDENTIFIER_id,
        _TYPE_IDENTIFIER_Type,
        TYPE_IDENTIFIER,
        _ABSTRACT_SYNTAX_id,
        _ABSTRACT_SYNTAX_Type,
        _ABSTRACT_SYNTAX_property,
        ABSTRACT_SYNTAX,
    ]

init_modules(DialoguePDUs, UnidialoguePDUs, Remote_Operations_Information_Objects, Remote_Operations_Generic_ROS_PDUs, Remote_Operations_Useful_Definitions, TCAPMessages, TCAP_Tools, TCAP_Examples, TC_Notation_Extensions, _IMPL_)
