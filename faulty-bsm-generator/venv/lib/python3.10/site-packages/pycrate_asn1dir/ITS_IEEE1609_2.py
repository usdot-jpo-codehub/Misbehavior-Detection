# -*- coding: UTF-8 -*-
# Code automatically generated by pycrate_asn1c

from pycrate_asn1rt.utils            import *
from pycrate_asn1rt.err              import *
from pycrate_asn1rt.glob             import make_GLOBAL, GLOBAL
from pycrate_asn1rt.dictobj          import ASN1Dict
from pycrate_asn1rt.refobj           import *
from pycrate_asn1rt.setobj           import *
from pycrate_asn1rt.asnobj_basic     import *
from pycrate_asn1rt.asnobj_str       import *
from pycrate_asn1rt.asnobj_construct import *
from pycrate_asn1rt.asnobj_class     import *
from pycrate_asn1rt.asnobj_ext       import *
from pycrate_asn1rt.init             import init_modules

class EtsiTs103097ExtensionModule:

    _name_  = 'EtsiTs103097ExtensionModule'
    _oid_   = [0, 4, 0, 5, 5, 103097, 2, 1, 1]
    
    _obj_ = [
        'ExtensionModuleVersion',
        'Extension',
        'EXT-TYPE',
        'ExtId',
        'EtsiOriginatingHeaderInfoExtension',
        'EtsiTs103097HeaderInfoExtensionId',
        'etsiTs102941CrlRequestId',
        'etsiTs102941DeltaCtlRequestId',
        'EtsiTs103097HeaderInfoExtensions',
        'EtsiTs102941CrlRequest',
        'EtsiTs102941CtlRequest',
        'EtsiTs102941DeltaCtlRequest',
        ]
    _type_ = [
        'ExtensionModuleVersion',
        'Extension',
        'EXT-TYPE',
        'ExtId',
        'EtsiOriginatingHeaderInfoExtension',
        'EtsiTs103097HeaderInfoExtensionId',
        'EtsiTs102941CrlRequest',
        'EtsiTs102941CtlRequest',
        'EtsiTs102941DeltaCtlRequest',
        ]
    _set_ = [
        'EtsiTs103097HeaderInfoExtensions',
        ]
    _val_ = [
        'etsiTs102941CrlRequestId',
        'etsiTs102941DeltaCtlRequestId',
        ]
    _class_ = [
        'EXT-TYPE',
        'EtsiTs103097HeaderInfoExtensions',
        ]
    _param_ = [
        'Extension',
        ]
    
    #-----< ExtensionModuleVersion >-----#
    ExtensionModuleVersion = INT(name='ExtensionModuleVersion', mode=MODE_TYPE)
    ExtensionModuleVersion._const_val = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    
    #-----< Extension >-----#
    Extension = SEQ(name='Extension', mode=MODE_TYPE, param=True)
    
    #-----< EXT-TYPE >-----#
    EXT_TYPE = CLASS(name='EXT-TYPE', mode=MODE_TYPE)
    _EXT_TYPE_extId = INT(name='extId', mode=MODE_VALUE, typeref=ASN1RefType(('EtsiTs103097ExtensionModule', 'ExtId')))
    _EXT_TYPE_ExtContent = OPEN(name='ExtContent', mode=MODE_TYPE)
    EXT_TYPE._cont = ASN1Dict([
        ('extId', _EXT_TYPE_extId),
        ('ExtContent', _EXT_TYPE_ExtContent),
        ])
    
    #-----< ExtId >-----#
    ExtId = INT(name='ExtId', mode=MODE_TYPE)
    ExtId._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< EtsiOriginatingHeaderInfoExtension >-----#
    EtsiOriginatingHeaderInfoExtension = SEQ(name='EtsiOriginatingHeaderInfoExtension', mode=MODE_TYPE, typeref=ASN1RefType(('EtsiTs103097ExtensionModule', 'Extension')))
    _EtsiOriginatingHeaderInfoExtension_id = INT(name='id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('EtsiTs103097ExtensionModule', 'EXT-TYPE'), ['extId']))
    __EtsiOriginatingHeaderInfoExtension_id_tab = CLASS(name='_tab_EXT-TYPE', mode=MODE_SET, typeref=ASN1RefType(('EtsiTs103097ExtensionModule', 'EXT-TYPE')))
    ___EtsiOriginatingHeaderInfoExtension_id_tab_val_ExtContent_0 = SEQ(name='ExtContent', mode=MODE_TYPE, typeref=ASN1RefType(('EtsiTs103097ExtensionModule', 'EtsiTs102941CrlRequest')))
    ___EtsiOriginatingHeaderInfoExtension_id_tab_val_ExtContent_1 = SEQ(name='ExtContent', mode=MODE_TYPE, typeref=ASN1RefType(('EtsiTs103097ExtensionModule', 'EtsiTs102941DeltaCtlRequest')))
    __EtsiOriginatingHeaderInfoExtension_id_tab._val = ASN1Set(rv=[dict([('ExtContent', ___EtsiOriginatingHeaderInfoExtension_id_tab_val_ExtContent_0), ('extId', 1)]), dict([('ExtContent', ___EtsiOriginatingHeaderInfoExtension_id_tab_val_ExtContent_1), ('extId', 2)])], rr=[], ev=None, er=[])
    _EtsiOriginatingHeaderInfoExtension_id._const_tab = __EtsiOriginatingHeaderInfoExtension_id_tab
    _EtsiOriginatingHeaderInfoExtension_id._const_tab_at = None
    _EtsiOriginatingHeaderInfoExtension_id._const_tab_id = 'extId'
    _EtsiOriginatingHeaderInfoExtension_content = OPEN(name='content', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('EtsiTs103097ExtensionModule', 'EXT-TYPE'), ['ExtContent']))
    _EtsiOriginatingHeaderInfoExtension_content._const_tab = __EtsiOriginatingHeaderInfoExtension_id_tab
    _EtsiOriginatingHeaderInfoExtension_content._const_tab_at = ('..', 'id')
    _EtsiOriginatingHeaderInfoExtension_content._const_tab_id = 'ExtContent'
    EtsiOriginatingHeaderInfoExtension._cont = ASN1Dict([
        ('id', _EtsiOriginatingHeaderInfoExtension_id),
        ('content', _EtsiOriginatingHeaderInfoExtension_content),
        ])
    EtsiOriginatingHeaderInfoExtension._ext = None
    
    #-----< EtsiTs103097HeaderInfoExtensionId >-----#
    EtsiTs103097HeaderInfoExtensionId = INT(name='EtsiTs103097HeaderInfoExtensionId', mode=MODE_TYPE, typeref=ASN1RefType(('EtsiTs103097ExtensionModule', 'ExtId')))
    
    #-----< etsiTs102941CrlRequestId >-----#
    etsiTs102941CrlRequestId = INT(name='etsiTs102941CrlRequestId', mode=MODE_VALUE, typeref=ASN1RefType(('EtsiTs103097ExtensionModule', 'EtsiTs103097HeaderInfoExtensionId')))
    etsiTs102941CrlRequestId._val = 1
    
    #-----< etsiTs102941DeltaCtlRequestId >-----#
    etsiTs102941DeltaCtlRequestId = INT(name='etsiTs102941DeltaCtlRequestId', mode=MODE_VALUE, typeref=ASN1RefType(('EtsiTs103097ExtensionModule', 'EtsiTs103097HeaderInfoExtensionId')))
    etsiTs102941DeltaCtlRequestId._val = 2
    
    #-----< EtsiTs103097HeaderInfoExtensions >-----#
    EtsiTs103097HeaderInfoExtensions = CLASS(name='EtsiTs103097HeaderInfoExtensions', mode=MODE_SET, typeref=ASN1RefType(('EtsiTs103097ExtensionModule', 'EXT-TYPE')))
    _EtsiTs103097HeaderInfoExtensions_val_ExtContent_0 = SEQ(name='ExtContent', mode=MODE_TYPE, typeref=ASN1RefType(('EtsiTs103097ExtensionModule', 'EtsiTs102941CrlRequest')))
    _EtsiTs103097HeaderInfoExtensions_val_ExtContent_1 = SEQ(name='ExtContent', mode=MODE_TYPE, typeref=ASN1RefType(('EtsiTs103097ExtensionModule', 'EtsiTs102941DeltaCtlRequest')))
    EtsiTs103097HeaderInfoExtensions._val = ASN1Set(rv=[dict([('ExtContent', _EtsiTs103097HeaderInfoExtensions_val_ExtContent_0), ('extId', 1)]), dict([('ExtContent', _EtsiTs103097HeaderInfoExtensions_val_ExtContent_1), ('extId', 2)])], rr=[], ev=[], er=[])
    
    #-----< EtsiTs102941CrlRequest >-----#
    EtsiTs102941CrlRequest = SEQ(name='EtsiTs102941CrlRequest', mode=MODE_TYPE)
    _EtsiTs102941CrlRequest_issuerId = OCT_STR(name='issuerId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'HashedId8')))
    _EtsiTs102941CrlRequest_lastKnownUpdate = INT(name='lastKnownUpdate', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Time32')), opt=True)
    EtsiTs102941CrlRequest._cont = ASN1Dict([
        ('issuerId', _EtsiTs102941CrlRequest_issuerId),
        ('lastKnownUpdate', _EtsiTs102941CrlRequest_lastKnownUpdate),
        ])
    EtsiTs102941CrlRequest._ext = None
    
    #-----< EtsiTs102941CtlRequest >-----#
    EtsiTs102941CtlRequest = SEQ(name='EtsiTs102941CtlRequest', mode=MODE_TYPE)
    _EtsiTs102941CtlRequest_issuerId = OCT_STR(name='issuerId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'HashedId8')))
    _EtsiTs102941CtlRequest_lastKnownCtlSequence = INT(name='lastKnownCtlSequence', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _EtsiTs102941CtlRequest_lastKnownCtlSequence._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    EtsiTs102941CtlRequest._cont = ASN1Dict([
        ('issuerId', _EtsiTs102941CtlRequest_issuerId),
        ('lastKnownCtlSequence', _EtsiTs102941CtlRequest_lastKnownCtlSequence),
        ])
    EtsiTs102941CtlRequest._ext = None
    
    #-----< EtsiTs102941DeltaCtlRequest >-----#
    EtsiTs102941DeltaCtlRequest = SEQ(name='EtsiTs102941DeltaCtlRequest', mode=MODE_TYPE, typeref=ASN1RefType(('EtsiTs103097ExtensionModule', 'EtsiTs102941CtlRequest')))
    
    _all_ = [
        ExtensionModuleVersion,
        _EXT_TYPE_extId,
        _EXT_TYPE_ExtContent,
        EXT_TYPE,
        ExtId,
        __EtsiOriginatingHeaderInfoExtension_id_tab,
        ___EtsiOriginatingHeaderInfoExtension_id_tab_val_ExtContent_0,
        ___EtsiOriginatingHeaderInfoExtension_id_tab_val_ExtContent_1,
        _EtsiOriginatingHeaderInfoExtension_id,
        _EtsiOriginatingHeaderInfoExtension_content,
        EtsiOriginatingHeaderInfoExtension,
        EtsiTs103097HeaderInfoExtensionId,
        etsiTs102941CrlRequestId,
        etsiTs102941DeltaCtlRequestId,
        EtsiTs103097HeaderInfoExtensions,
        _EtsiTs103097HeaderInfoExtensions_val_ExtContent_0,
        _EtsiTs103097HeaderInfoExtensions_val_ExtContent_1,
        _EtsiTs102941CrlRequest_issuerId,
        _EtsiTs102941CrlRequest_lastKnownUpdate,
        EtsiTs102941CrlRequest,
        _EtsiTs102941CtlRequest_issuerId,
        _EtsiTs102941CtlRequest_lastKnownCtlSequence,
        EtsiTs102941CtlRequest,
        EtsiTs102941DeltaCtlRequest,
    ]

class Ieee1609Dot2:

    _name_  = 'Ieee1609Dot2'
    _oid_   = [1, 3, 111, 2, 1609, 2, 1, 1, 2, 3]
    
    _obj_ = [
        'Ieee1609Dot2Data',
        'Ieee1609Dot2Content',
        'SignedData',
        'ToBeSignedData',
        'SignedDataPayload',
        'HashedData',
        'HeaderInfo',
        'MissingCrlIdentifier',
        'PduFunctionalType',
        'tlsHandshake',
        'iso21177ExtendedAuth',
        'ContributedExtensionBlocks',
        'ContributedExtensionBlock',
        'IEEE1609DOT2-HEADERINFO-CONTRIBUTED-EXTENSION',
        'Ieee1609Dot2HeaderInfoContributedExtensions',
        'HeaderInfoContributorId',
        'etsiHeaderInfoContributorId',
        'SignerIdentifier',
        'EncryptedData',
        'RecipientInfo',
        'SequenceOfRecipientInfo',
        'PreSharedKeyRecipientInfo',
        'SymmRecipientInfo',
        'PKRecipientInfo',
        'EncryptedDataEncryptionKey',
        'SymmetricCiphertext',
        'AesCcmCiphertext',
        'Countersignature',
        'Certificate',
        'SequenceOfCertificate',
        'CertificateBase',
        'CertificateType',
        'ImplicitCertificate',
        'ExplicitCertificate',
        'IssuerIdentifier',
        'ToBeSignedCertificate',
        'CertificateId',
        'LinkageData',
        'EndEntityType',
        'PsidGroupPermissions',
        'SequenceOfPsidGroupPermissions',
        'SubjectPermissions',
        'VerificationKeyIndicator',
        ]
    _type_ = [
        'Ieee1609Dot2Data',
        'Ieee1609Dot2Content',
        'SignedData',
        'ToBeSignedData',
        'SignedDataPayload',
        'HashedData',
        'HeaderInfo',
        'MissingCrlIdentifier',
        'PduFunctionalType',
        'ContributedExtensionBlocks',
        'ContributedExtensionBlock',
        'IEEE1609DOT2-HEADERINFO-CONTRIBUTED-EXTENSION',
        'HeaderInfoContributorId',
        'SignerIdentifier',
        'EncryptedData',
        'RecipientInfo',
        'SequenceOfRecipientInfo',
        'PreSharedKeyRecipientInfo',
        'SymmRecipientInfo',
        'PKRecipientInfo',
        'EncryptedDataEncryptionKey',
        'SymmetricCiphertext',
        'AesCcmCiphertext',
        'Countersignature',
        'Certificate',
        'SequenceOfCertificate',
        'CertificateBase',
        'CertificateType',
        'ImplicitCertificate',
        'ExplicitCertificate',
        'IssuerIdentifier',
        'ToBeSignedCertificate',
        'CertificateId',
        'LinkageData',
        'EndEntityType',
        'PsidGroupPermissions',
        'SequenceOfPsidGroupPermissions',
        'SubjectPermissions',
        'VerificationKeyIndicator',
        ]
    _set_ = [
        'Ieee1609Dot2HeaderInfoContributedExtensions',
        ]
    _val_ = [
        'tlsHandshake',
        'iso21177ExtendedAuth',
        'etsiHeaderInfoContributorId',
        ]
    _class_ = [
        'IEEE1609DOT2-HEADERINFO-CONTRIBUTED-EXTENSION',
        'Ieee1609Dot2HeaderInfoContributedExtensions',
        ]
    _param_ = [
        ]
    
    #-----< Ieee1609Dot2Data >-----#
    Ieee1609Dot2Data = SEQ(name='Ieee1609Dot2Data', mode=MODE_TYPE)
    _Ieee1609Dot2Data_protocolVersion = INT(name='protocolVersion', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Uint8')))
    _Ieee1609Dot2Data_protocolVersion._const_val = ASN1Set(rv=[3], rr=[], ev=None, er=[])
    _Ieee1609Dot2Data_content = CHOICE(name='content', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'Ieee1609Dot2Content')))
    Ieee1609Dot2Data._cont = ASN1Dict([
        ('protocolVersion', _Ieee1609Dot2Data_protocolVersion),
        ('content', _Ieee1609Dot2Data_content),
        ])
    Ieee1609Dot2Data._ext = None
    
    #-----< Ieee1609Dot2Content >-----#
    Ieee1609Dot2Content = CHOICE(name='Ieee1609Dot2Content', mode=MODE_TYPE)
    _Ieee1609Dot2Content_unsecuredData = OCT_STR(name='unsecuredData', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Opaque')))
    _Ieee1609Dot2Content_signedData = SEQ(name='signedData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'SignedData')))
    _Ieee1609Dot2Content_encryptedData = SEQ(name='encryptedData', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'EncryptedData')))
    _Ieee1609Dot2Content_signedCertificateRequest = OCT_STR(name='signedCertificateRequest', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Opaque')))
    Ieee1609Dot2Content._cont = ASN1Dict([
        ('unsecuredData', _Ieee1609Dot2Content_unsecuredData),
        ('signedData', _Ieee1609Dot2Content_signedData),
        ('encryptedData', _Ieee1609Dot2Content_encryptedData),
        ('signedCertificateRequest', _Ieee1609Dot2Content_signedCertificateRequest),
        ])
    Ieee1609Dot2Content._ext = []
    
    #-----< SignedData >-----#
    SignedData = SEQ(name='SignedData', mode=MODE_TYPE)
    _SignedData_hashId = ENUM(name='hashId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'HashAlgorithm')))
    _SignedData_tbsData = SEQ(name='tbsData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'ToBeSignedData')))
    _SignedData_signer = CHOICE(name='signer', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'SignerIdentifier')))
    _SignedData_signature = CHOICE(name='signature', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Signature')))
    SignedData._cont = ASN1Dict([
        ('hashId', _SignedData_hashId),
        ('tbsData', _SignedData_tbsData),
        ('signer', _SignedData_signer),
        ('signature', _SignedData_signature),
        ])
    SignedData._ext = None
    
    #-----< ToBeSignedData >-----#
    ToBeSignedData = SEQ(name='ToBeSignedData', mode=MODE_TYPE)
    _ToBeSignedData_payload = SEQ(name='payload', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'SignedDataPayload')))
    _ToBeSignedData_headerInfo = SEQ(name='headerInfo', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'HeaderInfo')))
    ToBeSignedData._cont = ASN1Dict([
        ('payload', _ToBeSignedData_payload),
        ('headerInfo', _ToBeSignedData_headerInfo),
        ])
    ToBeSignedData._ext = None
    
    #-----< SignedDataPayload >-----#
    SignedDataPayload = SEQ(name='SignedDataPayload', mode=MODE_TYPE)
    _SignedDataPayload_data = SEQ(name='data', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'Ieee1609Dot2Data')), opt=True)
    _SignedDataPayload_extDataHash = CHOICE(name='extDataHash', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'HashedData')), opt=True)
    SignedDataPayload._cont = ASN1Dict([
        ('data', _SignedDataPayload_data),
        ('extDataHash', _SignedDataPayload_extDataHash),
        ])
    SignedDataPayload._ext = []
    
    #-----< HashedData >-----#
    HashedData = CHOICE(name='HashedData', mode=MODE_TYPE)
    _HashedData_sha256HashedData = OCT_STR(name='sha256HashedData', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _HashedData_sha256HashedData._const_sz = ASN1Set(rv=[32], rr=[], ev=None, er=[])
    _HashedData_sha384HashedData = OCT_STR(name='sha384HashedData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _HashedData_sha384HashedData._const_sz = ASN1Set(rv=[48], rr=[], ev=None, er=[])
    _HashedData_reserved = OCT_STR(name='reserved', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _HashedData_reserved._const_sz = ASN1Set(rv=[32], rr=[], ev=None, er=[])
    HashedData._cont = ASN1Dict([
        ('sha256HashedData', _HashedData_sha256HashedData),
        ('sha384HashedData', _HashedData_sha384HashedData),
        ('reserved', _HashedData_reserved),
        ])
    HashedData._ext = ['sha384HashedData', 'reserved']
    
    #-----< HeaderInfo >-----#
    HeaderInfo = SEQ(name='HeaderInfo', mode=MODE_TYPE)
    _HeaderInfo_psid = INT(name='psid', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Psid')))
    _HeaderInfo_generationTime = INT(name='generationTime', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Time64')), opt=True)
    _HeaderInfo_expiryTime = INT(name='expiryTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Time64')), opt=True)
    _HeaderInfo_generationLocation = SEQ(name='generationLocation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'ThreeDLocation')), opt=True)
    _HeaderInfo_p2pcdLearningRequest = OCT_STR(name='p2pcdLearningRequest', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'HashedId3')), opt=True)
    _HeaderInfo_missingCrlIdentifier = SEQ(name='missingCrlIdentifier', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'MissingCrlIdentifier')), opt=True)
    _HeaderInfo_encryptionKey = CHOICE(name='encryptionKey', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'EncryptionKey')), opt=True)
    _HeaderInfo_inlineP2pcdRequest = SEQ_OF(name='inlineP2pcdRequest', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'SequenceOfHashedId3')), opt=True)
    _HeaderInfo_requestedCertificate = SEQ(name='requestedCertificate', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'Certificate')), opt=True)
    _HeaderInfo_pduFunctionalType = INT(name='pduFunctionalType', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'PduFunctionalType')), opt=True)
    _HeaderInfo_contributedExtensions = SEQ_OF(name='contributedExtensions', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'ContributedExtensionBlocks')), opt=True)
    HeaderInfo._cont = ASN1Dict([
        ('psid', _HeaderInfo_psid),
        ('generationTime', _HeaderInfo_generationTime),
        ('expiryTime', _HeaderInfo_expiryTime),
        ('generationLocation', _HeaderInfo_generationLocation),
        ('p2pcdLearningRequest', _HeaderInfo_p2pcdLearningRequest),
        ('missingCrlIdentifier', _HeaderInfo_missingCrlIdentifier),
        ('encryptionKey', _HeaderInfo_encryptionKey),
        ('inlineP2pcdRequest', _HeaderInfo_inlineP2pcdRequest),
        ('requestedCertificate', _HeaderInfo_requestedCertificate),
        ('pduFunctionalType', _HeaderInfo_pduFunctionalType),
        ('contributedExtensions', _HeaderInfo_contributedExtensions),
        ])
    HeaderInfo._ext = ['inlineP2pcdRequest', 'requestedCertificate', 'pduFunctionalType', 'contributedExtensions']
    
    #-----< MissingCrlIdentifier >-----#
    MissingCrlIdentifier = SEQ(name='MissingCrlIdentifier', mode=MODE_TYPE)
    _MissingCrlIdentifier_cracaId = OCT_STR(name='cracaId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'HashedId3')))
    _MissingCrlIdentifier_crlSeries = INT(name='crlSeries', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'CrlSeries')))
    MissingCrlIdentifier._cont = ASN1Dict([
        ('cracaId', _MissingCrlIdentifier_cracaId),
        ('crlSeries', _MissingCrlIdentifier_crlSeries),
        ])
    MissingCrlIdentifier._ext = []
    
    #-----< PduFunctionalType >-----#
    PduFunctionalType = INT(name='PduFunctionalType', mode=MODE_TYPE)
    PduFunctionalType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< tlsHandshake >-----#
    tlsHandshake = INT(name='tlsHandshake', mode=MODE_VALUE, typeref=ASN1RefType(('Ieee1609Dot2', 'PduFunctionalType')))
    tlsHandshake._val = 1
    
    #-----< iso21177ExtendedAuth >-----#
    iso21177ExtendedAuth = INT(name='iso21177ExtendedAuth', mode=MODE_VALUE, typeref=ASN1RefType(('Ieee1609Dot2', 'PduFunctionalType')))
    iso21177ExtendedAuth._val = 2
    
    #-----< ContributedExtensionBlocks >-----#
    ContributedExtensionBlocks = SEQ_OF(name='ContributedExtensionBlocks', mode=MODE_TYPE)
    _ContributedExtensionBlocks__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2', 'ContributedExtensionBlock')))
    ContributedExtensionBlocks._cont = _ContributedExtensionBlocks__item_
    ContributedExtensionBlocks._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    
    #-----< ContributedExtensionBlock >-----#
    ContributedExtensionBlock = SEQ(name='ContributedExtensionBlock', mode=MODE_TYPE)
    _ContributedExtensionBlock_contributorId = INT(name='contributorId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('Ieee1609Dot2', 'IEEE1609DOT2-HEADERINFO-CONTRIBUTED-EXTENSION'), ['id']))
    __ContributedExtensionBlock_contributorId_tab = CLASS(name='_tab_IEEE1609DOT2-HEADERINFO-CONTRIBUTED-EXTENSION', mode=MODE_SET, typeref=ASN1RefType(('Ieee1609Dot2', 'IEEE1609DOT2-HEADERINFO-CONTRIBUTED-EXTENSION')))
    ___ContributedExtensionBlock_contributorId_tab_val_Extn_0 = SEQ(name='Extn', mode=MODE_TYPE, typeref=ASN1RefType(('EtsiTs103097ExtensionModule', 'EtsiOriginatingHeaderInfoExtension')))
    __ContributedExtensionBlock_contributorId_tab._val = ASN1Set(rv=[dict([('Extn', ___ContributedExtensionBlock_contributorId_tab_val_Extn_0), ('id', 2)])], rr=[], ev=None, er=[])
    _ContributedExtensionBlock_contributorId._const_tab = __ContributedExtensionBlock_contributorId_tab
    _ContributedExtensionBlock_contributorId._const_tab_at = None
    _ContributedExtensionBlock_contributorId._const_tab_id = 'id'
    _ContributedExtensionBlock_extns = SEQ_OF(name='extns', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __ContributedExtensionBlock_extns__item_ = OPEN(name='_item_', mode=MODE_TYPE, typeref=ASN1RefClassField(('Ieee1609Dot2', 'IEEE1609DOT2-HEADERINFO-CONTRIBUTED-EXTENSION'), ['Extn']))
    __ContributedExtensionBlock_extns__item_._const_tab = __ContributedExtensionBlock_contributorId_tab
    __ContributedExtensionBlock_extns__item_._const_tab_at = ('..', '..', 'contributorId')
    __ContributedExtensionBlock_extns__item_._const_tab_id = 'Extn'
    _ContributedExtensionBlock_extns._cont = __ContributedExtensionBlock_extns__item_
    _ContributedExtensionBlock_extns._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    ContributedExtensionBlock._cont = ASN1Dict([
        ('contributorId', _ContributedExtensionBlock_contributorId),
        ('extns', _ContributedExtensionBlock_extns),
        ])
    ContributedExtensionBlock._ext = None
    
    #-----< IEEE1609DOT2-HEADERINFO-CONTRIBUTED-EXTENSION >-----#
    IEEE1609DOT2_HEADERINFO_CONTRIBUTED_EXTENSION = CLASS(name='IEEE1609DOT2-HEADERINFO-CONTRIBUTED-EXTENSION', mode=MODE_TYPE)
    _IEEE1609DOT2_HEADERINFO_CONTRIBUTED_EXTENSION_id = INT(name='id', mode=MODE_VALUE, typeref=ASN1RefType(('Ieee1609Dot2', 'HeaderInfoContributorId')), uniq=True)
    _IEEE1609DOT2_HEADERINFO_CONTRIBUTED_EXTENSION_Extn = OPEN(name='Extn', mode=MODE_TYPE)
    IEEE1609DOT2_HEADERINFO_CONTRIBUTED_EXTENSION._cont = ASN1Dict([
        ('id', _IEEE1609DOT2_HEADERINFO_CONTRIBUTED_EXTENSION_id),
        ('Extn', _IEEE1609DOT2_HEADERINFO_CONTRIBUTED_EXTENSION_Extn),
        ])
    
    #-----< Ieee1609Dot2HeaderInfoContributedExtensions >-----#
    Ieee1609Dot2HeaderInfoContributedExtensions = CLASS(name='Ieee1609Dot2HeaderInfoContributedExtensions', mode=MODE_SET, typeref=ASN1RefType(('Ieee1609Dot2', 'IEEE1609DOT2-HEADERINFO-CONTRIBUTED-EXTENSION')))
    _Ieee1609Dot2HeaderInfoContributedExtensions_val_Extn_0 = SEQ(name='Extn', mode=MODE_TYPE, typeref=ASN1RefType(('EtsiTs103097ExtensionModule', 'EtsiOriginatingHeaderInfoExtension')))
    Ieee1609Dot2HeaderInfoContributedExtensions._val = ASN1Set(rv=[dict([('Extn', _Ieee1609Dot2HeaderInfoContributedExtensions_val_Extn_0), ('id', 2)])], rr=[], ev=[], er=[])
    
    #-----< HeaderInfoContributorId >-----#
    HeaderInfoContributorId = INT(name='HeaderInfoContributorId', mode=MODE_TYPE)
    HeaderInfoContributorId._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< etsiHeaderInfoContributorId >-----#
    etsiHeaderInfoContributorId = INT(name='etsiHeaderInfoContributorId', mode=MODE_VALUE, typeref=ASN1RefType(('Ieee1609Dot2', 'HeaderInfoContributorId')))
    etsiHeaderInfoContributorId._val = 2
    
    #-----< SignerIdentifier >-----#
    SignerIdentifier = CHOICE(name='SignerIdentifier', mode=MODE_TYPE)
    _SignerIdentifier_digest = OCT_STR(name='digest', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'HashedId8')))
    _SignerIdentifier_certificate = SEQ_OF(name='certificate', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'SequenceOfCertificate')))
    _SignerIdentifier_self = NULL(name='self', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    SignerIdentifier._cont = ASN1Dict([
        ('digest', _SignerIdentifier_digest),
        ('certificate', _SignerIdentifier_certificate),
        ('self', _SignerIdentifier_self),
        ])
    SignerIdentifier._ext = []
    
    #-----< EncryptedData >-----#
    EncryptedData = SEQ(name='EncryptedData', mode=MODE_TYPE)
    _EncryptedData_recipients = SEQ_OF(name='recipients', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'SequenceOfRecipientInfo')))
    _EncryptedData_ciphertext = CHOICE(name='ciphertext', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'SymmetricCiphertext')))
    EncryptedData._cont = ASN1Dict([
        ('recipients', _EncryptedData_recipients),
        ('ciphertext', _EncryptedData_ciphertext),
        ])
    EncryptedData._ext = None
    
    #-----< RecipientInfo >-----#
    RecipientInfo = CHOICE(name='RecipientInfo', mode=MODE_TYPE)
    _RecipientInfo_pskRecipInfo = OCT_STR(name='pskRecipInfo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'PreSharedKeyRecipientInfo')))
    _RecipientInfo_symmRecipInfo = SEQ(name='symmRecipInfo', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'SymmRecipientInfo')))
    _RecipientInfo_certRecipInfo = SEQ(name='certRecipInfo', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'PKRecipientInfo')))
    _RecipientInfo_signedDataRecipInfo = SEQ(name='signedDataRecipInfo', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'PKRecipientInfo')))
    _RecipientInfo_rekRecipInfo = SEQ(name='rekRecipInfo', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'PKRecipientInfo')))
    RecipientInfo._cont = ASN1Dict([
        ('pskRecipInfo', _RecipientInfo_pskRecipInfo),
        ('symmRecipInfo', _RecipientInfo_symmRecipInfo),
        ('certRecipInfo', _RecipientInfo_certRecipInfo),
        ('signedDataRecipInfo', _RecipientInfo_signedDataRecipInfo),
        ('rekRecipInfo', _RecipientInfo_rekRecipInfo),
        ])
    RecipientInfo._ext = None
    
    #-----< SequenceOfRecipientInfo >-----#
    SequenceOfRecipientInfo = SEQ_OF(name='SequenceOfRecipientInfo', mode=MODE_TYPE)
    _SequenceOfRecipientInfo__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2', 'RecipientInfo')))
    SequenceOfRecipientInfo._cont = _SequenceOfRecipientInfo__item_
    
    #-----< PreSharedKeyRecipientInfo >-----#
    PreSharedKeyRecipientInfo = OCT_STR(name='PreSharedKeyRecipientInfo', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'HashedId8')))
    
    #-----< SymmRecipientInfo >-----#
    SymmRecipientInfo = SEQ(name='SymmRecipientInfo', mode=MODE_TYPE)
    _SymmRecipientInfo_recipientId = OCT_STR(name='recipientId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'HashedId8')))
    _SymmRecipientInfo_encKey = CHOICE(name='encKey', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'SymmetricCiphertext')))
    SymmRecipientInfo._cont = ASN1Dict([
        ('recipientId', _SymmRecipientInfo_recipientId),
        ('encKey', _SymmRecipientInfo_encKey),
        ])
    SymmRecipientInfo._ext = None
    
    #-----< PKRecipientInfo >-----#
    PKRecipientInfo = SEQ(name='PKRecipientInfo', mode=MODE_TYPE)
    _PKRecipientInfo_recipientId = OCT_STR(name='recipientId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'HashedId8')))
    _PKRecipientInfo_encKey = CHOICE(name='encKey', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'EncryptedDataEncryptionKey')))
    PKRecipientInfo._cont = ASN1Dict([
        ('recipientId', _PKRecipientInfo_recipientId),
        ('encKey', _PKRecipientInfo_encKey),
        ])
    PKRecipientInfo._ext = None
    
    #-----< EncryptedDataEncryptionKey >-----#
    EncryptedDataEncryptionKey = CHOICE(name='EncryptedDataEncryptionKey', mode=MODE_TYPE)
    _EncryptedDataEncryptionKey_eciesNistP256 = SEQ(name='eciesNistP256', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'EciesP256EncryptedKey')))
    _EncryptedDataEncryptionKey_eciesBrainpoolP256r1 = SEQ(name='eciesBrainpoolP256r1', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'EciesP256EncryptedKey')))
    EncryptedDataEncryptionKey._cont = ASN1Dict([
        ('eciesNistP256', _EncryptedDataEncryptionKey_eciesNistP256),
        ('eciesBrainpoolP256r1', _EncryptedDataEncryptionKey_eciesBrainpoolP256r1),
        ])
    EncryptedDataEncryptionKey._ext = []
    
    #-----< SymmetricCiphertext >-----#
    SymmetricCiphertext = CHOICE(name='SymmetricCiphertext', mode=MODE_TYPE)
    _SymmetricCiphertext_aes128ccm = SEQ(name='aes128ccm', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'AesCcmCiphertext')))
    SymmetricCiphertext._cont = ASN1Dict([
        ('aes128ccm', _SymmetricCiphertext_aes128ccm),
        ])
    SymmetricCiphertext._ext = []
    
    #-----< AesCcmCiphertext >-----#
    AesCcmCiphertext = SEQ(name='AesCcmCiphertext', mode=MODE_TYPE)
    _AesCcmCiphertext_nonce = OCT_STR(name='nonce', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _AesCcmCiphertext_nonce._const_sz = ASN1Set(rv=[12], rr=[], ev=None, er=[])
    _AesCcmCiphertext_ccmCiphertext = OCT_STR(name='ccmCiphertext', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Opaque')))
    AesCcmCiphertext._cont = ASN1Dict([
        ('nonce', _AesCcmCiphertext_nonce),
        ('ccmCiphertext', _AesCcmCiphertext_ccmCiphertext),
        ])
    AesCcmCiphertext._ext = None
    
    #-----< Countersignature >-----#
    Countersignature = SEQ(name='Countersignature', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2', 'Ieee1609Dot2Data')))
    
    #-----< Certificate >-----#
    Certificate = SEQ(name='Certificate', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2', 'CertificateBase')))
    Certificate._const_val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    
    #-----< SequenceOfCertificate >-----#
    SequenceOfCertificate = SEQ_OF(name='SequenceOfCertificate', mode=MODE_TYPE)
    _SequenceOfCertificate__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2', 'Certificate')))
    SequenceOfCertificate._cont = _SequenceOfCertificate__item_
    
    #-----< CertificateBase >-----#
    CertificateBase = SEQ(name='CertificateBase', mode=MODE_TYPE)
    _CertificateBase_version = INT(name='version', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Uint8')))
    _CertificateBase_version._const_val = ASN1Set(rv=[3], rr=[], ev=None, er=[])
    _CertificateBase_type = ENUM(name='type', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'CertificateType')))
    _CertificateBase_issuer = CHOICE(name='issuer', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'IssuerIdentifier')))
    _CertificateBase_toBeSigned = SEQ(name='toBeSigned', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'ToBeSignedCertificate')))
    _CertificateBase_signature = CHOICE(name='signature', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Signature')), opt=True)
    CertificateBase._cont = ASN1Dict([
        ('version', _CertificateBase_version),
        ('type', _CertificateBase_type),
        ('issuer', _CertificateBase_issuer),
        ('toBeSigned', _CertificateBase_toBeSigned),
        ('signature', _CertificateBase_signature),
        ])
    CertificateBase._ext = None
    
    #-----< CertificateType >-----#
    CertificateType = ENUM(name='CertificateType', mode=MODE_TYPE)
    CertificateType._cont = ASN1Dict([('explicit', 0), ('implicit', 1)])
    CertificateType._ext = []
    
    #-----< ImplicitCertificate >-----#
    ImplicitCertificate = SEQ(name='ImplicitCertificate', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2', 'CertificateBase')))
    
    #-----< ExplicitCertificate >-----#
    ExplicitCertificate = SEQ(name='ExplicitCertificate', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2', 'CertificateBase')))
    
    #-----< IssuerIdentifier >-----#
    IssuerIdentifier = CHOICE(name='IssuerIdentifier', mode=MODE_TYPE)
    _IssuerIdentifier_sha256AndDigest = OCT_STR(name='sha256AndDigest', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'HashedId8')))
    _IssuerIdentifier_self = ENUM(name='self', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'HashAlgorithm')))
    _IssuerIdentifier_sha384AndDigest = OCT_STR(name='sha384AndDigest', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'HashedId8')))
    IssuerIdentifier._cont = ASN1Dict([
        ('sha256AndDigest', _IssuerIdentifier_sha256AndDigest),
        ('self', _IssuerIdentifier_self),
        ('sha384AndDigest', _IssuerIdentifier_sha384AndDigest),
        ])
    IssuerIdentifier._ext = ['sha384AndDigest']
    
    #-----< ToBeSignedCertificate >-----#
    ToBeSignedCertificate = SEQ(name='ToBeSignedCertificate', mode=MODE_TYPE)
    _ToBeSignedCertificate_id = CHOICE(name='id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'CertificateId')))
    _ToBeSignedCertificate_cracaId = OCT_STR(name='cracaId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'HashedId3')))
    _ToBeSignedCertificate_crlSeries = INT(name='crlSeries', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'CrlSeries')))
    _ToBeSignedCertificate_validityPeriod = SEQ(name='validityPeriod', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'ValidityPeriod')))
    _ToBeSignedCertificate_region = CHOICE(name='region', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'GeographicRegion')), opt=True)
    _ToBeSignedCertificate_assuranceLevel = OCT_STR(name='assuranceLevel', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'SubjectAssurance')), opt=True)
    _ToBeSignedCertificate_appPermissions = SEQ_OF(name='appPermissions', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'SequenceOfPsidSsp')), opt=True)
    _ToBeSignedCertificate_certIssuePermissions = SEQ_OF(name='certIssuePermissions', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'SequenceOfPsidGroupPermissions')), opt=True)
    _ToBeSignedCertificate_certRequestPermissions = SEQ_OF(name='certRequestPermissions', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'SequenceOfPsidGroupPermissions')), opt=True)
    _ToBeSignedCertificate_canRequestRollover = NULL(name='canRequestRollover', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ToBeSignedCertificate_encryptionKey = SEQ(name='encryptionKey', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'PublicEncryptionKey')), opt=True)
    _ToBeSignedCertificate_verifyKeyIndicator = CHOICE(name='verifyKeyIndicator', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'VerificationKeyIndicator')))
    ToBeSignedCertificate._cont = ASN1Dict([
        ('id', _ToBeSignedCertificate_id),
        ('cracaId', _ToBeSignedCertificate_cracaId),
        ('crlSeries', _ToBeSignedCertificate_crlSeries),
        ('validityPeriod', _ToBeSignedCertificate_validityPeriod),
        ('region', _ToBeSignedCertificate_region),
        ('assuranceLevel', _ToBeSignedCertificate_assuranceLevel),
        ('appPermissions', _ToBeSignedCertificate_appPermissions),
        ('certIssuePermissions', _ToBeSignedCertificate_certIssuePermissions),
        ('certRequestPermissions', _ToBeSignedCertificate_certRequestPermissions),
        ('canRequestRollover', _ToBeSignedCertificate_canRequestRollover),
        ('encryptionKey', _ToBeSignedCertificate_encryptionKey),
        ('verifyKeyIndicator', _ToBeSignedCertificate_verifyKeyIndicator),
        ])
    ToBeSignedCertificate._ext = []
    
    #-----< CertificateId >-----#
    CertificateId = CHOICE(name='CertificateId', mode=MODE_TYPE)
    _CertificateId_linkageData = SEQ(name='linkageData', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'LinkageData')))
    _CertificateId_name = STR_UTF8(name='name', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Hostname')))
    _CertificateId_binaryId = OCT_STR(name='binaryId', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CertificateId_binaryId._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _CertificateId_none = NULL(name='none', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    CertificateId._cont = ASN1Dict([
        ('linkageData', _CertificateId_linkageData),
        ('name', _CertificateId_name),
        ('binaryId', _CertificateId_binaryId),
        ('none', _CertificateId_none),
        ])
    CertificateId._ext = []
    
    #-----< LinkageData >-----#
    LinkageData = SEQ(name='LinkageData', mode=MODE_TYPE)
    _LinkageData_iCert = INT(name='iCert', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'IValue')))
    _LinkageData_linkage_value = OCT_STR(name='linkage-value', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'LinkageValue')))
    _LinkageData_group_linkage_value = SEQ(name='group-linkage-value', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'GroupLinkageValue')), opt=True)
    LinkageData._cont = ASN1Dict([
        ('iCert', _LinkageData_iCert),
        ('linkage-value', _LinkageData_linkage_value),
        ('group-linkage-value', _LinkageData_group_linkage_value),
        ])
    LinkageData._ext = None
    
    #-----< EndEntityType >-----#
    EndEntityType = BIT_STR(name='EndEntityType', mode=MODE_TYPE)
    EndEntityType._cont = ASN1Dict([('app', 0), ('enroll', 1)])
    EndEntityType._const_sz = ASN1Set(rv=[8], rr=[], ev=None, er=[])
    
    #-----< PsidGroupPermissions >-----#
    PsidGroupPermissions = SEQ(name='PsidGroupPermissions', mode=MODE_TYPE)
    _PsidGroupPermissions_subjectPermissions = CHOICE(name='subjectPermissions', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'SubjectPermissions')))
    _PsidGroupPermissions_minChainLength = INT(name='minChainLength', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=1)
    _PsidGroupPermissions_chainLengthRange = INT(name='chainLengthRange', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=0)
    _PsidGroupPermissions_eeType = BIT_STR(name='eeType', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2', 'EndEntityType')), default=(128, 8))
    PsidGroupPermissions._cont = ASN1Dict([
        ('subjectPermissions', _PsidGroupPermissions_subjectPermissions),
        ('minChainLength', _PsidGroupPermissions_minChainLength),
        ('chainLengthRange', _PsidGroupPermissions_chainLengthRange),
        ('eeType', _PsidGroupPermissions_eeType),
        ])
    PsidGroupPermissions._ext = None
    
    #-----< SequenceOfPsidGroupPermissions >-----#
    SequenceOfPsidGroupPermissions = SEQ_OF(name='SequenceOfPsidGroupPermissions', mode=MODE_TYPE)
    _SequenceOfPsidGroupPermissions__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2', 'PsidGroupPermissions')))
    SequenceOfPsidGroupPermissions._cont = _SequenceOfPsidGroupPermissions__item_
    
    #-----< SubjectPermissions >-----#
    SubjectPermissions = CHOICE(name='SubjectPermissions', mode=MODE_TYPE)
    _SubjectPermissions_explicit = SEQ_OF(name='explicit', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'SequenceOfPsidSspRange')))
    _SubjectPermissions_all = NULL(name='all', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    SubjectPermissions._cont = ASN1Dict([
        ('explicit', _SubjectPermissions_explicit),
        ('all', _SubjectPermissions_all),
        ])
    SubjectPermissions._ext = []
    
    #-----< VerificationKeyIndicator >-----#
    VerificationKeyIndicator = CHOICE(name='VerificationKeyIndicator', mode=MODE_TYPE)
    _VerificationKeyIndicator_verificationKey = CHOICE(name='verificationKey', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'PublicVerificationKey')))
    _VerificationKeyIndicator_reconstructionValue = CHOICE(name='reconstructionValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'EccP256CurvePoint')))
    VerificationKeyIndicator._cont = ASN1Dict([
        ('verificationKey', _VerificationKeyIndicator_verificationKey),
        ('reconstructionValue', _VerificationKeyIndicator_reconstructionValue),
        ])
    VerificationKeyIndicator._ext = []
    
    _all_ = [
        _Ieee1609Dot2Data_protocolVersion,
        _Ieee1609Dot2Data_content,
        Ieee1609Dot2Data,
        _Ieee1609Dot2Content_unsecuredData,
        _Ieee1609Dot2Content_signedData,
        _Ieee1609Dot2Content_encryptedData,
        _Ieee1609Dot2Content_signedCertificateRequest,
        Ieee1609Dot2Content,
        _SignedData_hashId,
        _SignedData_tbsData,
        _SignedData_signer,
        _SignedData_signature,
        SignedData,
        _ToBeSignedData_payload,
        _ToBeSignedData_headerInfo,
        ToBeSignedData,
        _SignedDataPayload_data,
        _SignedDataPayload_extDataHash,
        SignedDataPayload,
        _HashedData_sha256HashedData,
        _HashedData_sha384HashedData,
        _HashedData_reserved,
        HashedData,
        _HeaderInfo_psid,
        _HeaderInfo_generationTime,
        _HeaderInfo_expiryTime,
        _HeaderInfo_generationLocation,
        _HeaderInfo_p2pcdLearningRequest,
        _HeaderInfo_missingCrlIdentifier,
        _HeaderInfo_encryptionKey,
        _HeaderInfo_inlineP2pcdRequest,
        _HeaderInfo_requestedCertificate,
        _HeaderInfo_pduFunctionalType,
        _HeaderInfo_contributedExtensions,
        HeaderInfo,
        _MissingCrlIdentifier_cracaId,
        _MissingCrlIdentifier_crlSeries,
        MissingCrlIdentifier,
        PduFunctionalType,
        tlsHandshake,
        iso21177ExtendedAuth,
        _ContributedExtensionBlocks__item_,
        ContributedExtensionBlocks,
        __ContributedExtensionBlock_contributorId_tab,
        ___ContributedExtensionBlock_contributorId_tab_val_Extn_0,
        _ContributedExtensionBlock_contributorId,
        __ContributedExtensionBlock_extns__item_,
        _ContributedExtensionBlock_extns,
        ContributedExtensionBlock,
        _IEEE1609DOT2_HEADERINFO_CONTRIBUTED_EXTENSION_id,
        _IEEE1609DOT2_HEADERINFO_CONTRIBUTED_EXTENSION_Extn,
        IEEE1609DOT2_HEADERINFO_CONTRIBUTED_EXTENSION,
        Ieee1609Dot2HeaderInfoContributedExtensions,
        _Ieee1609Dot2HeaderInfoContributedExtensions_val_Extn_0,
        HeaderInfoContributorId,
        etsiHeaderInfoContributorId,
        _SignerIdentifier_digest,
        _SignerIdentifier_certificate,
        _SignerIdentifier_self,
        SignerIdentifier,
        _EncryptedData_recipients,
        _EncryptedData_ciphertext,
        EncryptedData,
        _RecipientInfo_pskRecipInfo,
        _RecipientInfo_symmRecipInfo,
        _RecipientInfo_certRecipInfo,
        _RecipientInfo_signedDataRecipInfo,
        _RecipientInfo_rekRecipInfo,
        RecipientInfo,
        _SequenceOfRecipientInfo__item_,
        SequenceOfRecipientInfo,
        PreSharedKeyRecipientInfo,
        _SymmRecipientInfo_recipientId,
        _SymmRecipientInfo_encKey,
        SymmRecipientInfo,
        _PKRecipientInfo_recipientId,
        _PKRecipientInfo_encKey,
        PKRecipientInfo,
        _EncryptedDataEncryptionKey_eciesNistP256,
        _EncryptedDataEncryptionKey_eciesBrainpoolP256r1,
        EncryptedDataEncryptionKey,
        _SymmetricCiphertext_aes128ccm,
        SymmetricCiphertext,
        _AesCcmCiphertext_nonce,
        _AesCcmCiphertext_ccmCiphertext,
        AesCcmCiphertext,
        Countersignature,
        Certificate,
        _SequenceOfCertificate__item_,
        SequenceOfCertificate,
        _CertificateBase_version,
        _CertificateBase_type,
        _CertificateBase_issuer,
        _CertificateBase_toBeSigned,
        _CertificateBase_signature,
        CertificateBase,
        CertificateType,
        ImplicitCertificate,
        ExplicitCertificate,
        _IssuerIdentifier_sha256AndDigest,
        _IssuerIdentifier_self,
        _IssuerIdentifier_sha384AndDigest,
        IssuerIdentifier,
        _ToBeSignedCertificate_id,
        _ToBeSignedCertificate_cracaId,
        _ToBeSignedCertificate_crlSeries,
        _ToBeSignedCertificate_validityPeriod,
        _ToBeSignedCertificate_region,
        _ToBeSignedCertificate_assuranceLevel,
        _ToBeSignedCertificate_appPermissions,
        _ToBeSignedCertificate_certIssuePermissions,
        _ToBeSignedCertificate_certRequestPermissions,
        _ToBeSignedCertificate_canRequestRollover,
        _ToBeSignedCertificate_encryptionKey,
        _ToBeSignedCertificate_verifyKeyIndicator,
        ToBeSignedCertificate,
        _CertificateId_linkageData,
        _CertificateId_name,
        _CertificateId_binaryId,
        _CertificateId_none,
        CertificateId,
        _LinkageData_iCert,
        _LinkageData_linkage_value,
        _LinkageData_group_linkage_value,
        LinkageData,
        EndEntityType,
        _PsidGroupPermissions_subjectPermissions,
        _PsidGroupPermissions_minChainLength,
        _PsidGroupPermissions_chainLengthRange,
        _PsidGroupPermissions_eeType,
        PsidGroupPermissions,
        _SequenceOfPsidGroupPermissions__item_,
        SequenceOfPsidGroupPermissions,
        _SubjectPermissions_explicit,
        _SubjectPermissions_all,
        SubjectPermissions,
        _VerificationKeyIndicator_verificationKey,
        _VerificationKeyIndicator_reconstructionValue,
        VerificationKeyIndicator,
    ]

class Ieee1609Dot2BaseTypes:

    _name_  = 'Ieee1609Dot2BaseTypes'
    _oid_   = [1, 3, 111, 2, 1609, 2, 1, 2, 2, 2]
    
    _obj_ = [
        'Uint3',
        'Uint8',
        'Uint16',
        'Uint32',
        'Uint64',
        'SequenceOfUint8',
        'SequenceOfUint16',
        'Opaque',
        'HashedId3',
        'SequenceOfHashedId3',
        'HashedId8',
        'HashedId10',
        'HashedId32',
        'Time32',
        'Time64',
        'ValidityPeriod',
        'Duration',
        'GeographicRegion',
        'CircularRegion',
        'RectangularRegion',
        'SequenceOfRectangularRegion',
        'PolygonalRegion',
        'TwoDLocation',
        'IdentifiedRegion',
        'SequenceOfIdentifiedRegion',
        'CountryOnly',
        'CountryAndRegions',
        'CountryAndSubregions',
        'RegionAndSubregions',
        'SequenceOfRegionAndSubregions',
        'ThreeDLocation',
        'Latitude',
        'Longitude',
        'Elevation',
        'NinetyDegreeInt',
        'KnownLatitude',
        'UnknownLatitude',
        'OneEightyDegreeInt',
        'KnownLongitude',
        'UnknownLongitude',
        'Signature',
        'EcdsaP256Signature',
        'EcdsaP384Signature',
        'EccP256CurvePoint',
        'EccP384CurvePoint',
        'SymmAlgorithm',
        'HashAlgorithm',
        'EciesP256EncryptedKey',
        'EncryptionKey',
        'PublicEncryptionKey',
        'BasePublicEncryptionKey',
        'PublicVerificationKey',
        'SymmetricEncryptionKey',
        'PsidSsp',
        'SequenceOfPsidSsp',
        'Psid',
        'SequenceOfPsid',
        'ServiceSpecificPermissions',
        'BitmapSsp',
        'PsidSspRange',
        'SequenceOfPsidSspRange',
        'SspRange',
        'BitmapSspRange',
        'SequenceOfOctetString',
        'SubjectAssurance',
        'CrlSeries',
        'IValue',
        'Hostname',
        'LinkageValue',
        'GroupLinkageValue',
        'LaId',
        'LinkageSeed',
        ]
    _type_ = [
        'Uint3',
        'Uint8',
        'Uint16',
        'Uint32',
        'Uint64',
        'SequenceOfUint8',
        'SequenceOfUint16',
        'Opaque',
        'HashedId3',
        'SequenceOfHashedId3',
        'HashedId8',
        'HashedId10',
        'HashedId32',
        'Time32',
        'Time64',
        'ValidityPeriod',
        'Duration',
        'GeographicRegion',
        'CircularRegion',
        'RectangularRegion',
        'SequenceOfRectangularRegion',
        'PolygonalRegion',
        'TwoDLocation',
        'IdentifiedRegion',
        'SequenceOfIdentifiedRegion',
        'CountryOnly',
        'CountryAndRegions',
        'CountryAndSubregions',
        'RegionAndSubregions',
        'SequenceOfRegionAndSubregions',
        'ThreeDLocation',
        'Latitude',
        'Longitude',
        'Elevation',
        'NinetyDegreeInt',
        'KnownLatitude',
        'UnknownLatitude',
        'OneEightyDegreeInt',
        'KnownLongitude',
        'UnknownLongitude',
        'Signature',
        'EcdsaP256Signature',
        'EcdsaP384Signature',
        'EccP256CurvePoint',
        'EccP384CurvePoint',
        'SymmAlgorithm',
        'HashAlgorithm',
        'EciesP256EncryptedKey',
        'EncryptionKey',
        'PublicEncryptionKey',
        'BasePublicEncryptionKey',
        'PublicVerificationKey',
        'SymmetricEncryptionKey',
        'PsidSsp',
        'SequenceOfPsidSsp',
        'Psid',
        'SequenceOfPsid',
        'ServiceSpecificPermissions',
        'BitmapSsp',
        'PsidSspRange',
        'SequenceOfPsidSspRange',
        'SspRange',
        'BitmapSspRange',
        'SequenceOfOctetString',
        'SubjectAssurance',
        'CrlSeries',
        'IValue',
        'Hostname',
        'LinkageValue',
        'GroupLinkageValue',
        'LaId',
        'LinkageSeed',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< Uint3 >-----#
    Uint3 = INT(name='Uint3', mode=MODE_TYPE)
    Uint3._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=7)], ev=None, er=[])
    
    #-----< Uint8 >-----#
    Uint8 = INT(name='Uint8', mode=MODE_TYPE)
    Uint8._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< Uint16 >-----#
    Uint16 = INT(name='Uint16', mode=MODE_TYPE)
    Uint16._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< Uint32 >-----#
    Uint32 = INT(name='Uint32', mode=MODE_TYPE)
    Uint32._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=4294967295)], ev=None, er=[])
    
    #-----< Uint64 >-----#
    Uint64 = INT(name='Uint64', mode=MODE_TYPE)
    Uint64._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=18446744073709551615)], ev=None, er=[])
    
    #-----< SequenceOfUint8 >-----#
    SequenceOfUint8 = SEQ_OF(name='SequenceOfUint8', mode=MODE_TYPE)
    _SequenceOfUint8__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Uint8')))
    SequenceOfUint8._cont = _SequenceOfUint8__item_
    
    #-----< SequenceOfUint16 >-----#
    SequenceOfUint16 = SEQ_OF(name='SequenceOfUint16', mode=MODE_TYPE)
    _SequenceOfUint16__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Uint16')))
    SequenceOfUint16._cont = _SequenceOfUint16__item_
    
    #-----< Opaque >-----#
    Opaque = OCT_STR(name='Opaque', mode=MODE_TYPE)
    
    #-----< HashedId3 >-----#
    HashedId3 = OCT_STR(name='HashedId3', mode=MODE_TYPE)
    HashedId3._const_sz = ASN1Set(rv=[3], rr=[], ev=None, er=[])
    
    #-----< SequenceOfHashedId3 >-----#
    SequenceOfHashedId3 = SEQ_OF(name='SequenceOfHashedId3', mode=MODE_TYPE)
    _SequenceOfHashedId3__item_ = OCT_STR(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'HashedId3')))
    SequenceOfHashedId3._cont = _SequenceOfHashedId3__item_
    
    #-----< HashedId8 >-----#
    HashedId8 = OCT_STR(name='HashedId8', mode=MODE_TYPE)
    HashedId8._const_sz = ASN1Set(rv=[8], rr=[], ev=None, er=[])
    
    #-----< HashedId10 >-----#
    HashedId10 = OCT_STR(name='HashedId10', mode=MODE_TYPE)
    HashedId10._const_sz = ASN1Set(rv=[10], rr=[], ev=None, er=[])
    
    #-----< HashedId32 >-----#
    HashedId32 = OCT_STR(name='HashedId32', mode=MODE_TYPE)
    HashedId32._const_sz = ASN1Set(rv=[32], rr=[], ev=None, er=[])
    
    #-----< Time32 >-----#
    Time32 = INT(name='Time32', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Uint32')))
    
    #-----< Time64 >-----#
    Time64 = INT(name='Time64', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Uint64')))
    
    #-----< ValidityPeriod >-----#
    ValidityPeriod = SEQ(name='ValidityPeriod', mode=MODE_TYPE)
    _ValidityPeriod_start = INT(name='start', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Time32')))
    _ValidityPeriod_duration = CHOICE(name='duration', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Duration')))
    ValidityPeriod._cont = ASN1Dict([
        ('start', _ValidityPeriod_start),
        ('duration', _ValidityPeriod_duration),
        ])
    ValidityPeriod._ext = None
    
    #-----< Duration >-----#
    Duration = CHOICE(name='Duration', mode=MODE_TYPE)
    _Duration_microseconds = INT(name='microseconds', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Uint16')))
    _Duration_milliseconds = INT(name='milliseconds', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Uint16')))
    _Duration_seconds = INT(name='seconds', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Uint16')))
    _Duration_minutes = INT(name='minutes', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Uint16')))
    _Duration_hours = INT(name='hours', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Uint16')))
    _Duration_sixtyHours = INT(name='sixtyHours', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Uint16')))
    _Duration_years = INT(name='years', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Uint16')))
    Duration._cont = ASN1Dict([
        ('microseconds', _Duration_microseconds),
        ('milliseconds', _Duration_milliseconds),
        ('seconds', _Duration_seconds),
        ('minutes', _Duration_minutes),
        ('hours', _Duration_hours),
        ('sixtyHours', _Duration_sixtyHours),
        ('years', _Duration_years),
        ])
    Duration._ext = None
    
    #-----< GeographicRegion >-----#
    GeographicRegion = CHOICE(name='GeographicRegion', mode=MODE_TYPE)
    _GeographicRegion_circularRegion = SEQ(name='circularRegion', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'CircularRegion')))
    _GeographicRegion_rectangularRegion = SEQ_OF(name='rectangularRegion', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'SequenceOfRectangularRegion')))
    _GeographicRegion_polygonalRegion = SEQ_OF(name='polygonalRegion', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'PolygonalRegion')))
    _GeographicRegion_identifiedRegion = SEQ_OF(name='identifiedRegion', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'SequenceOfIdentifiedRegion')))
    GeographicRegion._cont = ASN1Dict([
        ('circularRegion', _GeographicRegion_circularRegion),
        ('rectangularRegion', _GeographicRegion_rectangularRegion),
        ('polygonalRegion', _GeographicRegion_polygonalRegion),
        ('identifiedRegion', _GeographicRegion_identifiedRegion),
        ])
    GeographicRegion._ext = []
    
    #-----< CircularRegion >-----#
    CircularRegion = SEQ(name='CircularRegion', mode=MODE_TYPE)
    _CircularRegion_center = SEQ(name='center', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'TwoDLocation')))
    _CircularRegion_radius = INT(name='radius', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Uint16')))
    CircularRegion._cont = ASN1Dict([
        ('center', _CircularRegion_center),
        ('radius', _CircularRegion_radius),
        ])
    CircularRegion._ext = None
    
    #-----< RectangularRegion >-----#
    RectangularRegion = SEQ(name='RectangularRegion', mode=MODE_TYPE)
    _RectangularRegion_northWest = SEQ(name='northWest', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'TwoDLocation')))
    _RectangularRegion_southEast = SEQ(name='southEast', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'TwoDLocation')))
    RectangularRegion._cont = ASN1Dict([
        ('northWest', _RectangularRegion_northWest),
        ('southEast', _RectangularRegion_southEast),
        ])
    RectangularRegion._ext = None
    
    #-----< SequenceOfRectangularRegion >-----#
    SequenceOfRectangularRegion = SEQ_OF(name='SequenceOfRectangularRegion', mode=MODE_TYPE)
    _SequenceOfRectangularRegion__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'RectangularRegion')))
    SequenceOfRectangularRegion._cont = _SequenceOfRectangularRegion__item_
    
    #-----< PolygonalRegion >-----#
    PolygonalRegion = SEQ_OF(name='PolygonalRegion', mode=MODE_TYPE)
    _PolygonalRegion__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'TwoDLocation')))
    PolygonalRegion._cont = _PolygonalRegion__item_
    PolygonalRegion._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=3, ub=None)], ev=None, er=[])
    
    #-----< TwoDLocation >-----#
    TwoDLocation = SEQ(name='TwoDLocation', mode=MODE_TYPE)
    _TwoDLocation_latitude = INT(name='latitude', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Latitude')))
    _TwoDLocation_longitude = INT(name='longitude', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Longitude')))
    TwoDLocation._cont = ASN1Dict([
        ('latitude', _TwoDLocation_latitude),
        ('longitude', _TwoDLocation_longitude),
        ])
    TwoDLocation._ext = None
    
    #-----< IdentifiedRegion >-----#
    IdentifiedRegion = CHOICE(name='IdentifiedRegion', mode=MODE_TYPE)
    _IdentifiedRegion_countryOnly = INT(name='countryOnly', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'CountryOnly')))
    _IdentifiedRegion_countryAndRegions = SEQ(name='countryAndRegions', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'CountryAndRegions')))
    _IdentifiedRegion_countryAndSubregions = SEQ(name='countryAndSubregions', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'CountryAndSubregions')))
    IdentifiedRegion._cont = ASN1Dict([
        ('countryOnly', _IdentifiedRegion_countryOnly),
        ('countryAndRegions', _IdentifiedRegion_countryAndRegions),
        ('countryAndSubregions', _IdentifiedRegion_countryAndSubregions),
        ])
    IdentifiedRegion._ext = []
    
    #-----< SequenceOfIdentifiedRegion >-----#
    SequenceOfIdentifiedRegion = SEQ_OF(name='SequenceOfIdentifiedRegion', mode=MODE_TYPE)
    _SequenceOfIdentifiedRegion__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'IdentifiedRegion')))
    SequenceOfIdentifiedRegion._cont = _SequenceOfIdentifiedRegion__item_
    
    #-----< CountryOnly >-----#
    CountryOnly = INT(name='CountryOnly', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Uint16')))
    
    #-----< CountryAndRegions >-----#
    CountryAndRegions = SEQ(name='CountryAndRegions', mode=MODE_TYPE)
    _CountryAndRegions_countryOnly = INT(name='countryOnly', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'CountryOnly')))
    _CountryAndRegions_regions = SEQ_OF(name='regions', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'SequenceOfUint8')))
    CountryAndRegions._cont = ASN1Dict([
        ('countryOnly', _CountryAndRegions_countryOnly),
        ('regions', _CountryAndRegions_regions),
        ])
    CountryAndRegions._ext = None
    
    #-----< CountryAndSubregions >-----#
    CountryAndSubregions = SEQ(name='CountryAndSubregions', mode=MODE_TYPE)
    _CountryAndSubregions_country = INT(name='country', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'CountryOnly')))
    _CountryAndSubregions_regionAndSubregions = SEQ_OF(name='regionAndSubregions', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'SequenceOfRegionAndSubregions')))
    CountryAndSubregions._cont = ASN1Dict([
        ('country', _CountryAndSubregions_country),
        ('regionAndSubregions', _CountryAndSubregions_regionAndSubregions),
        ])
    CountryAndSubregions._ext = None
    
    #-----< RegionAndSubregions >-----#
    RegionAndSubregions = SEQ(name='RegionAndSubregions', mode=MODE_TYPE)
    _RegionAndSubregions_region = INT(name='region', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Uint8')))
    _RegionAndSubregions_subregions = SEQ_OF(name='subregions', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'SequenceOfUint16')))
    RegionAndSubregions._cont = ASN1Dict([
        ('region', _RegionAndSubregions_region),
        ('subregions', _RegionAndSubregions_subregions),
        ])
    RegionAndSubregions._ext = None
    
    #-----< SequenceOfRegionAndSubregions >-----#
    SequenceOfRegionAndSubregions = SEQ_OF(name='SequenceOfRegionAndSubregions', mode=MODE_TYPE)
    _SequenceOfRegionAndSubregions__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'RegionAndSubregions')))
    SequenceOfRegionAndSubregions._cont = _SequenceOfRegionAndSubregions__item_
    
    #-----< ThreeDLocation >-----#
    ThreeDLocation = SEQ(name='ThreeDLocation', mode=MODE_TYPE)
    _ThreeDLocation_latitude = INT(name='latitude', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Latitude')))
    _ThreeDLocation_longitude = INT(name='longitude', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Longitude')))
    _ThreeDLocation_elevation = INT(name='elevation', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Elevation')))
    ThreeDLocation._cont = ASN1Dict([
        ('latitude', _ThreeDLocation_latitude),
        ('longitude', _ThreeDLocation_longitude),
        ('elevation', _ThreeDLocation_elevation),
        ])
    ThreeDLocation._ext = None
    
    #-----< Latitude >-----#
    Latitude = INT(name='Latitude', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'NinetyDegreeInt')))
    
    #-----< Longitude >-----#
    Longitude = INT(name='Longitude', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'OneEightyDegreeInt')))
    
    #-----< Elevation >-----#
    Elevation = INT(name='Elevation', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Uint16')))
    
    #-----< NinetyDegreeInt >-----#
    NinetyDegreeInt = INT(name='NinetyDegreeInt', mode=MODE_TYPE)
    NinetyDegreeInt._cont = ASN1Dict([('min', -900000000), ('max', 900000000), ('unknown', 900000001)])
    NinetyDegreeInt._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-900000000, ub=900000001)], ev=None, er=[])
    
    #-----< KnownLatitude >-----#
    KnownLatitude = INT(name='KnownLatitude', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'NinetyDegreeInt')))
    KnownLatitude._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-900000000, ub=900000000)], ev=None, er=[])
    
    #-----< UnknownLatitude >-----#
    UnknownLatitude = INT(name='UnknownLatitude', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'NinetyDegreeInt')))
    UnknownLatitude._const_val = ASN1Set(rv=[900000001], rr=[], ev=None, er=[])
    
    #-----< OneEightyDegreeInt >-----#
    OneEightyDegreeInt = INT(name='OneEightyDegreeInt', mode=MODE_TYPE)
    OneEightyDegreeInt._cont = ASN1Dict([('min', -1799999999), ('max', 1800000000), ('unknown', 1800000001)])
    OneEightyDegreeInt._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-1799999999, ub=1800000001)], ev=None, er=[])
    
    #-----< KnownLongitude >-----#
    KnownLongitude = INT(name='KnownLongitude', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'OneEightyDegreeInt')))
    KnownLongitude._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-1799999999, ub=1800000000)], ev=None, er=[])
    
    #-----< UnknownLongitude >-----#
    UnknownLongitude = INT(name='UnknownLongitude', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'OneEightyDegreeInt')))
    UnknownLongitude._const_val = ASN1Set(rv=[1800000001], rr=[], ev=None, er=[])
    
    #-----< Signature >-----#
    Signature = CHOICE(name='Signature', mode=MODE_TYPE)
    _Signature_ecdsaNistP256Signature = SEQ(name='ecdsaNistP256Signature', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'EcdsaP256Signature')))
    _Signature_ecdsaBrainpoolP256r1Signature = SEQ(name='ecdsaBrainpoolP256r1Signature', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'EcdsaP256Signature')))
    _Signature_ecdsaBrainpoolP384r1Signature = SEQ(name='ecdsaBrainpoolP384r1Signature', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'EcdsaP384Signature')))
    Signature._cont = ASN1Dict([
        ('ecdsaNistP256Signature', _Signature_ecdsaNistP256Signature),
        ('ecdsaBrainpoolP256r1Signature', _Signature_ecdsaBrainpoolP256r1Signature),
        ('ecdsaBrainpoolP384r1Signature', _Signature_ecdsaBrainpoolP384r1Signature),
        ])
    Signature._ext = ['ecdsaBrainpoolP384r1Signature']
    
    #-----< EcdsaP256Signature >-----#
    EcdsaP256Signature = SEQ(name='EcdsaP256Signature', mode=MODE_TYPE)
    _EcdsaP256Signature_rSig = CHOICE(name='rSig', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'EccP256CurvePoint')))
    _EcdsaP256Signature_sSig = OCT_STR(name='sSig', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EcdsaP256Signature_sSig._const_sz = ASN1Set(rv=[32], rr=[], ev=None, er=[])
    EcdsaP256Signature._cont = ASN1Dict([
        ('rSig', _EcdsaP256Signature_rSig),
        ('sSig', _EcdsaP256Signature_sSig),
        ])
    EcdsaP256Signature._ext = None
    
    #-----< EcdsaP384Signature >-----#
    EcdsaP384Signature = SEQ(name='EcdsaP384Signature', mode=MODE_TYPE)
    _EcdsaP384Signature_rSig = CHOICE(name='rSig', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'EccP384CurvePoint')))
    _EcdsaP384Signature_sSig = OCT_STR(name='sSig', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EcdsaP384Signature_sSig._const_sz = ASN1Set(rv=[48], rr=[], ev=None, er=[])
    EcdsaP384Signature._cont = ASN1Dict([
        ('rSig', _EcdsaP384Signature_rSig),
        ('sSig', _EcdsaP384Signature_sSig),
        ])
    EcdsaP384Signature._ext = None
    
    #-----< EccP256CurvePoint >-----#
    EccP256CurvePoint = CHOICE(name='EccP256CurvePoint', mode=MODE_TYPE)
    _EccP256CurvePoint_x_only = OCT_STR(name='x-only', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EccP256CurvePoint_x_only._const_sz = ASN1Set(rv=[32], rr=[], ev=None, er=[])
    _EccP256CurvePoint_fill = NULL(name='fill', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EccP256CurvePoint_compressed_y_0 = OCT_STR(name='compressed-y-0', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EccP256CurvePoint_compressed_y_0._const_sz = ASN1Set(rv=[32], rr=[], ev=None, er=[])
    _EccP256CurvePoint_compressed_y_1 = OCT_STR(name='compressed-y-1', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EccP256CurvePoint_compressed_y_1._const_sz = ASN1Set(rv=[32], rr=[], ev=None, er=[])
    _EccP256CurvePoint_uncompressedP256 = SEQ(name='uncompressedP256', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __EccP256CurvePoint_uncompressedP256_x = OCT_STR(name='x', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __EccP256CurvePoint_uncompressedP256_x._const_sz = ASN1Set(rv=[32], rr=[], ev=None, er=[])
    __EccP256CurvePoint_uncompressedP256_y = OCT_STR(name='y', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __EccP256CurvePoint_uncompressedP256_y._const_sz = ASN1Set(rv=[32], rr=[], ev=None, er=[])
    _EccP256CurvePoint_uncompressedP256._cont = ASN1Dict([
        ('x', __EccP256CurvePoint_uncompressedP256_x),
        ('y', __EccP256CurvePoint_uncompressedP256_y),
        ])
    _EccP256CurvePoint_uncompressedP256._ext = None
    EccP256CurvePoint._cont = ASN1Dict([
        ('x-only', _EccP256CurvePoint_x_only),
        ('fill', _EccP256CurvePoint_fill),
        ('compressed-y-0', _EccP256CurvePoint_compressed_y_0),
        ('compressed-y-1', _EccP256CurvePoint_compressed_y_1),
        ('uncompressedP256', _EccP256CurvePoint_uncompressedP256),
        ])
    EccP256CurvePoint._ext = None
    
    #-----< EccP384CurvePoint >-----#
    EccP384CurvePoint = CHOICE(name='EccP384CurvePoint', mode=MODE_TYPE)
    _EccP384CurvePoint_x_only = OCT_STR(name='x-only', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EccP384CurvePoint_x_only._const_sz = ASN1Set(rv=[48], rr=[], ev=None, er=[])
    _EccP384CurvePoint_fill = NULL(name='fill', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EccP384CurvePoint_compressed_y_0 = OCT_STR(name='compressed-y-0', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EccP384CurvePoint_compressed_y_0._const_sz = ASN1Set(rv=[48], rr=[], ev=None, er=[])
    _EccP384CurvePoint_compressed_y_1 = OCT_STR(name='compressed-y-1', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EccP384CurvePoint_compressed_y_1._const_sz = ASN1Set(rv=[48], rr=[], ev=None, er=[])
    _EccP384CurvePoint_uncompressedP384 = SEQ(name='uncompressedP384', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __EccP384CurvePoint_uncompressedP384_x = OCT_STR(name='x', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __EccP384CurvePoint_uncompressedP384_x._const_sz = ASN1Set(rv=[48], rr=[], ev=None, er=[])
    __EccP384CurvePoint_uncompressedP384_y = OCT_STR(name='y', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __EccP384CurvePoint_uncompressedP384_y._const_sz = ASN1Set(rv=[48], rr=[], ev=None, er=[])
    _EccP384CurvePoint_uncompressedP384._cont = ASN1Dict([
        ('x', __EccP384CurvePoint_uncompressedP384_x),
        ('y', __EccP384CurvePoint_uncompressedP384_y),
        ])
    _EccP384CurvePoint_uncompressedP384._ext = None
    EccP384CurvePoint._cont = ASN1Dict([
        ('x-only', _EccP384CurvePoint_x_only),
        ('fill', _EccP384CurvePoint_fill),
        ('compressed-y-0', _EccP384CurvePoint_compressed_y_0),
        ('compressed-y-1', _EccP384CurvePoint_compressed_y_1),
        ('uncompressedP384', _EccP384CurvePoint_uncompressedP384),
        ])
    EccP384CurvePoint._ext = None
    
    #-----< SymmAlgorithm >-----#
    SymmAlgorithm = ENUM(name='SymmAlgorithm', mode=MODE_TYPE)
    SymmAlgorithm._cont = ASN1Dict([('aes128Ccm', 0)])
    SymmAlgorithm._ext = []
    
    #-----< HashAlgorithm >-----#
    HashAlgorithm = ENUM(name='HashAlgorithm', mode=MODE_TYPE)
    HashAlgorithm._cont = ASN1Dict([('sha256', 0), ('sha384', 1)])
    HashAlgorithm._ext = ['sha384']
    
    #-----< EciesP256EncryptedKey >-----#
    EciesP256EncryptedKey = SEQ(name='EciesP256EncryptedKey', mode=MODE_TYPE)
    _EciesP256EncryptedKey_v = CHOICE(name='v', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'EccP256CurvePoint')))
    _EciesP256EncryptedKey_c = OCT_STR(name='c', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EciesP256EncryptedKey_c._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    _EciesP256EncryptedKey_t = OCT_STR(name='t', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EciesP256EncryptedKey_t._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    EciesP256EncryptedKey._cont = ASN1Dict([
        ('v', _EciesP256EncryptedKey_v),
        ('c', _EciesP256EncryptedKey_c),
        ('t', _EciesP256EncryptedKey_t),
        ])
    EciesP256EncryptedKey._ext = None
    
    #-----< EncryptionKey >-----#
    EncryptionKey = CHOICE(name='EncryptionKey', mode=MODE_TYPE)
    _EncryptionKey_public = SEQ(name='public', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'PublicEncryptionKey')))
    _EncryptionKey_symmetric = CHOICE(name='symmetric', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'SymmetricEncryptionKey')))
    EncryptionKey._cont = ASN1Dict([
        ('public', _EncryptionKey_public),
        ('symmetric', _EncryptionKey_symmetric),
        ])
    EncryptionKey._ext = None
    
    #-----< PublicEncryptionKey >-----#
    PublicEncryptionKey = SEQ(name='PublicEncryptionKey', mode=MODE_TYPE)
    _PublicEncryptionKey_supportedSymmAlg = ENUM(name='supportedSymmAlg', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'SymmAlgorithm')))
    _PublicEncryptionKey_publicKey = CHOICE(name='publicKey', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'BasePublicEncryptionKey')))
    PublicEncryptionKey._cont = ASN1Dict([
        ('supportedSymmAlg', _PublicEncryptionKey_supportedSymmAlg),
        ('publicKey', _PublicEncryptionKey_publicKey),
        ])
    PublicEncryptionKey._ext = None
    
    #-----< BasePublicEncryptionKey >-----#
    BasePublicEncryptionKey = CHOICE(name='BasePublicEncryptionKey', mode=MODE_TYPE)
    _BasePublicEncryptionKey_eciesNistP256 = CHOICE(name='eciesNistP256', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'EccP256CurvePoint')))
    _BasePublicEncryptionKey_eciesBrainpoolP256r1 = CHOICE(name='eciesBrainpoolP256r1', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'EccP256CurvePoint')))
    BasePublicEncryptionKey._cont = ASN1Dict([
        ('eciesNistP256', _BasePublicEncryptionKey_eciesNistP256),
        ('eciesBrainpoolP256r1', _BasePublicEncryptionKey_eciesBrainpoolP256r1),
        ])
    BasePublicEncryptionKey._ext = []
    
    #-----< PublicVerificationKey >-----#
    PublicVerificationKey = CHOICE(name='PublicVerificationKey', mode=MODE_TYPE)
    _PublicVerificationKey_ecdsaNistP256 = CHOICE(name='ecdsaNistP256', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'EccP256CurvePoint')))
    _PublicVerificationKey_ecdsaBrainpoolP256r1 = CHOICE(name='ecdsaBrainpoolP256r1', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'EccP256CurvePoint')))
    _PublicVerificationKey_ecdsaBrainpoolP384r1 = CHOICE(name='ecdsaBrainpoolP384r1', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'EccP384CurvePoint')))
    PublicVerificationKey._cont = ASN1Dict([
        ('ecdsaNistP256', _PublicVerificationKey_ecdsaNistP256),
        ('ecdsaBrainpoolP256r1', _PublicVerificationKey_ecdsaBrainpoolP256r1),
        ('ecdsaBrainpoolP384r1', _PublicVerificationKey_ecdsaBrainpoolP384r1),
        ])
    PublicVerificationKey._ext = ['ecdsaBrainpoolP384r1']
    
    #-----< SymmetricEncryptionKey >-----#
    SymmetricEncryptionKey = CHOICE(name='SymmetricEncryptionKey', mode=MODE_TYPE)
    _SymmetricEncryptionKey_aes128Ccm = OCT_STR(name='aes128Ccm', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SymmetricEncryptionKey_aes128Ccm._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    SymmetricEncryptionKey._cont = ASN1Dict([
        ('aes128Ccm', _SymmetricEncryptionKey_aes128Ccm),
        ])
    SymmetricEncryptionKey._ext = []
    
    #-----< PsidSsp >-----#
    PsidSsp = SEQ(name='PsidSsp', mode=MODE_TYPE)
    _PsidSsp_psid = INT(name='psid', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Psid')))
    _PsidSsp_ssp = CHOICE(name='ssp', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'ServiceSpecificPermissions')), opt=True)
    PsidSsp._cont = ASN1Dict([
        ('psid', _PsidSsp_psid),
        ('ssp', _PsidSsp_ssp),
        ])
    PsidSsp._ext = None
    
    #-----< SequenceOfPsidSsp >-----#
    SequenceOfPsidSsp = SEQ_OF(name='SequenceOfPsidSsp', mode=MODE_TYPE)
    _SequenceOfPsidSsp__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'PsidSsp')))
    SequenceOfPsidSsp._cont = _SequenceOfPsidSsp__item_
    
    #-----< Psid >-----#
    Psid = INT(name='Psid', mode=MODE_TYPE)
    Psid._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    
    #-----< SequenceOfPsid >-----#
    SequenceOfPsid = SEQ_OF(name='SequenceOfPsid', mode=MODE_TYPE)
    _SequenceOfPsid__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Psid')))
    SequenceOfPsid._cont = _SequenceOfPsid__item_
    
    #-----< ServiceSpecificPermissions >-----#
    ServiceSpecificPermissions = CHOICE(name='ServiceSpecificPermissions', mode=MODE_TYPE)
    _ServiceSpecificPermissions_opaque = OCT_STR(name='opaque', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ServiceSpecificPermissions_opaque._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    _ServiceSpecificPermissions_bitmapSsp = OCT_STR(name='bitmapSsp', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'BitmapSsp')))
    ServiceSpecificPermissions._cont = ASN1Dict([
        ('opaque', _ServiceSpecificPermissions_opaque),
        ('bitmapSsp', _ServiceSpecificPermissions_bitmapSsp),
        ])
    ServiceSpecificPermissions._ext = ['bitmapSsp']
    
    #-----< BitmapSsp >-----#
    BitmapSsp = OCT_STR(name='BitmapSsp', mode=MODE_TYPE)
    BitmapSsp._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=31)], ev=None, er=[])
    
    #-----< PsidSspRange >-----#
    PsidSspRange = SEQ(name='PsidSspRange', mode=MODE_TYPE)
    _PsidSspRange_psid = INT(name='psid', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Psid')))
    _PsidSspRange_sspRange = CHOICE(name='sspRange', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'SspRange')), opt=True)
    PsidSspRange._cont = ASN1Dict([
        ('psid', _PsidSspRange_psid),
        ('sspRange', _PsidSspRange_sspRange),
        ])
    PsidSspRange._ext = None
    
    #-----< SequenceOfPsidSspRange >-----#
    SequenceOfPsidSspRange = SEQ_OF(name='SequenceOfPsidSspRange', mode=MODE_TYPE)
    _SequenceOfPsidSspRange__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'PsidSspRange')))
    SequenceOfPsidSspRange._cont = _SequenceOfPsidSspRange__item_
    
    #-----< SspRange >-----#
    SspRange = CHOICE(name='SspRange', mode=MODE_TYPE)
    _SspRange_opaque = SEQ_OF(name='opaque', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'SequenceOfOctetString')))
    _SspRange_all = NULL(name='all', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SspRange_bitmapSspRange = SEQ(name='bitmapSspRange', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'BitmapSspRange')))
    SspRange._cont = ASN1Dict([
        ('opaque', _SspRange_opaque),
        ('all', _SspRange_all),
        ('bitmapSspRange', _SspRange_bitmapSspRange),
        ])
    SspRange._ext = ['bitmapSspRange']
    
    #-----< BitmapSspRange >-----#
    BitmapSspRange = SEQ(name='BitmapSspRange', mode=MODE_TYPE)
    _BitmapSspRange_sspValue = OCT_STR(name='sspValue', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _BitmapSspRange_sspValue._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    _BitmapSspRange_sspBitmask = OCT_STR(name='sspBitmask', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _BitmapSspRange_sspBitmask._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    BitmapSspRange._cont = ASN1Dict([
        ('sspValue', _BitmapSspRange_sspValue),
        ('sspBitmask', _BitmapSspRange_sspBitmask),
        ])
    BitmapSspRange._ext = None
    
    #-----< SequenceOfOctetString >-----#
    SequenceOfOctetString = SEQ_OF(name='SequenceOfOctetString', mode=MODE_TYPE)
    _SequenceOfOctetString__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _SequenceOfOctetString__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    SequenceOfOctetString._cont = _SequenceOfOctetString__item_
    SequenceOfOctetString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    
    #-----< SubjectAssurance >-----#
    SubjectAssurance = OCT_STR(name='SubjectAssurance', mode=MODE_TYPE)
    SubjectAssurance._const_sz = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    
    #-----< CrlSeries >-----#
    CrlSeries = INT(name='CrlSeries', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Uint16')))
    
    #-----< IValue >-----#
    IValue = INT(name='IValue', mode=MODE_TYPE, typeref=ASN1RefType(('Ieee1609Dot2BaseTypes', 'Uint16')))
    
    #-----< Hostname >-----#
    Hostname = STR_UTF8(name='Hostname', mode=MODE_TYPE)
    Hostname._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< LinkageValue >-----#
    LinkageValue = OCT_STR(name='LinkageValue', mode=MODE_TYPE)
    LinkageValue._const_sz = ASN1Set(rv=[9], rr=[], ev=None, er=[])
    
    #-----< GroupLinkageValue >-----#
    GroupLinkageValue = SEQ(name='GroupLinkageValue', mode=MODE_TYPE)
    _GroupLinkageValue_jValue = OCT_STR(name='jValue', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _GroupLinkageValue_jValue._const_sz = ASN1Set(rv=[4], rr=[], ev=None, er=[])
    _GroupLinkageValue_value = OCT_STR(name='value', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _GroupLinkageValue_value._const_sz = ASN1Set(rv=[9], rr=[], ev=None, er=[])
    GroupLinkageValue._cont = ASN1Dict([
        ('jValue', _GroupLinkageValue_jValue),
        ('value', _GroupLinkageValue_value),
        ])
    GroupLinkageValue._ext = None
    
    #-----< LaId >-----#
    LaId = OCT_STR(name='LaId', mode=MODE_TYPE)
    LaId._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    
    #-----< LinkageSeed >-----#
    LinkageSeed = OCT_STR(name='LinkageSeed', mode=MODE_TYPE)
    LinkageSeed._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    _all_ = [
        Uint3,
        Uint8,
        Uint16,
        Uint32,
        Uint64,
        _SequenceOfUint8__item_,
        SequenceOfUint8,
        _SequenceOfUint16__item_,
        SequenceOfUint16,
        Opaque,
        HashedId3,
        _SequenceOfHashedId3__item_,
        SequenceOfHashedId3,
        HashedId8,
        HashedId10,
        HashedId32,
        Time32,
        Time64,
        _ValidityPeriod_start,
        _ValidityPeriod_duration,
        ValidityPeriod,
        _Duration_microseconds,
        _Duration_milliseconds,
        _Duration_seconds,
        _Duration_minutes,
        _Duration_hours,
        _Duration_sixtyHours,
        _Duration_years,
        Duration,
        _GeographicRegion_circularRegion,
        _GeographicRegion_rectangularRegion,
        _GeographicRegion_polygonalRegion,
        _GeographicRegion_identifiedRegion,
        GeographicRegion,
        _CircularRegion_center,
        _CircularRegion_radius,
        CircularRegion,
        _RectangularRegion_northWest,
        _RectangularRegion_southEast,
        RectangularRegion,
        _SequenceOfRectangularRegion__item_,
        SequenceOfRectangularRegion,
        _PolygonalRegion__item_,
        PolygonalRegion,
        _TwoDLocation_latitude,
        _TwoDLocation_longitude,
        TwoDLocation,
        _IdentifiedRegion_countryOnly,
        _IdentifiedRegion_countryAndRegions,
        _IdentifiedRegion_countryAndSubregions,
        IdentifiedRegion,
        _SequenceOfIdentifiedRegion__item_,
        SequenceOfIdentifiedRegion,
        CountryOnly,
        _CountryAndRegions_countryOnly,
        _CountryAndRegions_regions,
        CountryAndRegions,
        _CountryAndSubregions_country,
        _CountryAndSubregions_regionAndSubregions,
        CountryAndSubregions,
        _RegionAndSubregions_region,
        _RegionAndSubregions_subregions,
        RegionAndSubregions,
        _SequenceOfRegionAndSubregions__item_,
        SequenceOfRegionAndSubregions,
        _ThreeDLocation_latitude,
        _ThreeDLocation_longitude,
        _ThreeDLocation_elevation,
        ThreeDLocation,
        Latitude,
        Longitude,
        Elevation,
        NinetyDegreeInt,
        KnownLatitude,
        UnknownLatitude,
        OneEightyDegreeInt,
        KnownLongitude,
        UnknownLongitude,
        _Signature_ecdsaNistP256Signature,
        _Signature_ecdsaBrainpoolP256r1Signature,
        _Signature_ecdsaBrainpoolP384r1Signature,
        Signature,
        _EcdsaP256Signature_rSig,
        _EcdsaP256Signature_sSig,
        EcdsaP256Signature,
        _EcdsaP384Signature_rSig,
        _EcdsaP384Signature_sSig,
        EcdsaP384Signature,
        _EccP256CurvePoint_x_only,
        _EccP256CurvePoint_fill,
        _EccP256CurvePoint_compressed_y_0,
        _EccP256CurvePoint_compressed_y_1,
        __EccP256CurvePoint_uncompressedP256_x,
        __EccP256CurvePoint_uncompressedP256_y,
        _EccP256CurvePoint_uncompressedP256,
        EccP256CurvePoint,
        _EccP384CurvePoint_x_only,
        _EccP384CurvePoint_fill,
        _EccP384CurvePoint_compressed_y_0,
        _EccP384CurvePoint_compressed_y_1,
        __EccP384CurvePoint_uncompressedP384_x,
        __EccP384CurvePoint_uncompressedP384_y,
        _EccP384CurvePoint_uncompressedP384,
        EccP384CurvePoint,
        SymmAlgorithm,
        HashAlgorithm,
        _EciesP256EncryptedKey_v,
        _EciesP256EncryptedKey_c,
        _EciesP256EncryptedKey_t,
        EciesP256EncryptedKey,
        _EncryptionKey_public,
        _EncryptionKey_symmetric,
        EncryptionKey,
        _PublicEncryptionKey_supportedSymmAlg,
        _PublicEncryptionKey_publicKey,
        PublicEncryptionKey,
        _BasePublicEncryptionKey_eciesNistP256,
        _BasePublicEncryptionKey_eciesBrainpoolP256r1,
        BasePublicEncryptionKey,
        _PublicVerificationKey_ecdsaNistP256,
        _PublicVerificationKey_ecdsaBrainpoolP256r1,
        _PublicVerificationKey_ecdsaBrainpoolP384r1,
        PublicVerificationKey,
        _SymmetricEncryptionKey_aes128Ccm,
        SymmetricEncryptionKey,
        _PsidSsp_psid,
        _PsidSsp_ssp,
        PsidSsp,
        _SequenceOfPsidSsp__item_,
        SequenceOfPsidSsp,
        Psid,
        _SequenceOfPsid__item_,
        SequenceOfPsid,
        _ServiceSpecificPermissions_opaque,
        _ServiceSpecificPermissions_bitmapSsp,
        ServiceSpecificPermissions,
        BitmapSsp,
        _PsidSspRange_psid,
        _PsidSspRange_sspRange,
        PsidSspRange,
        _SequenceOfPsidSspRange__item_,
        SequenceOfPsidSspRange,
        _SspRange_opaque,
        _SspRange_all,
        _SspRange_bitmapSspRange,
        SspRange,
        _BitmapSspRange_sspValue,
        _BitmapSspRange_sspBitmask,
        BitmapSspRange,
        _SequenceOfOctetString__item_,
        SequenceOfOctetString,
        SubjectAssurance,
        CrlSeries,
        IValue,
        Hostname,
        LinkageValue,
        _GroupLinkageValue_jValue,
        _GroupLinkageValue_value,
        GroupLinkageValue,
        LaId,
        LinkageSeed,
    ]

init_modules(EtsiTs103097ExtensionModule, Ieee1609Dot2, Ieee1609Dot2BaseTypes)
