# -*- coding: UTF-8 -*-
# Code automatically generated by pycrate_asn1c

from pycrate_asn1rt.utils            import *
from pycrate_asn1rt.err              import *
from pycrate_asn1rt.glob             import make_GLOBAL, GLOBAL
from pycrate_asn1rt.dictobj          import ASN1Dict
from pycrate_asn1rt.refobj           import *
from pycrate_asn1rt.setobj           import *
from pycrate_asn1rt.asnobj_basic     import *
from pycrate_asn1rt.asnobj_str       import *
from pycrate_asn1rt.asnobj_construct import *
from pycrate_asn1rt.asnobj_class     import *
from pycrate_asn1rt.asnobj_ext       import *
from pycrate_asn1rt.init             import init_modules

class AttributeCertificateVersion1_2009:

    _name_  = 'AttributeCertificateVersion1-2009'
    _oid_   = [1, 2, 840, 113549, 1, 9, 16, 0, 49]
    
    _obj_ = [
        'AttributeCertificateV1',
        'AttributeCertificateInfoV1',
        'AttCertVersionV1',
        'AttrList',
        'AttributeCertExtensionsV1',
        ]
    _type_ = [
        'AttributeCertificateV1',
        'AttributeCertificateInfoV1',
        'AttCertVersionV1',
        ]
    _set_ = [
        'AttrList',
        'AttributeCertExtensionsV1',
        ]
    _val_ = [
        ]
    _class_ = [
        'AttrList',
        'AttributeCertExtensionsV1',
        ]
    _param_ = [
        ]
    
    #-----< AttributeCertificateV1 >-----#
    AttributeCertificateV1 = SEQ(name='AttributeCertificateV1', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'SIGNED')))
    _AttributeCertificateV1_toBeSigned = SEQ(name='toBeSigned', mode=MODE_TYPE, typeref=ASN1RefType(('AttributeCertificateVersion1-2009', 'AttributeCertificateInfoV1')))
    _AttributeCertificateV1_algorithmIdentifier = SEQ(name='algorithmIdentifier', mode=MODE_TYPE)
    __AttributeCertificateV1_algorithmIdentifier_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['id']))
    ___AttributeCertificateV1_algorithmIdentifier_algorithm_tab = CLASS(name='_tab_SIGNATURE-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_2 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_3 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_3 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0 = INT(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSAPublicKey')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Params')))
    ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_4 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_4 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1 = OCT_STR(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECPoint')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1 = CHOICE(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECParameters')))
    ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_5 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_5 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_6 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_6 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_7 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_7 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_8 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_8 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_9 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_9 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_10 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_10 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_11 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    ___AttributeCertificateV1_algorithmIdentifier_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 2)), ('Params', ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_0), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 2))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 4)), ('Params', ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_1), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 5)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 5)), ('Params', ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_2), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 5))]))]), dict([('id', (1, 2, 840, 10040, 4, 3)), ('Value', ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_3), ('Params', ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_3), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10040, 4, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 1)), ('Value', ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_4), ('Params', ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_4), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 1))]))])], rr=[], ev=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1)), ('Value', ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_5), ('Params', ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_5), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1))]))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2)), ('Value', ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_6), ('Params', ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_6), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 1)), ('Value', ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_7), ('Params', ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_7), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 1))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 2)), ('Value', ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_8), ('Params', ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_8), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 3)), ('Value', ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_9), ('Params', ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_9), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 4)), ('Value', ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_10), ('Params', ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_10), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('Params', ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_11), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1), ('paramPresence', 'optional'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 10))]))])], er=[])
    __AttributeCertificateV1_algorithmIdentifier_algorithm._const_tab = ___AttributeCertificateV1_algorithmIdentifier_algorithm_tab
    __AttributeCertificateV1_algorithmIdentifier_algorithm._const_tab_at = None
    __AttributeCertificateV1_algorithmIdentifier_algorithm._const_tab_id = 'id'
    __AttributeCertificateV1_algorithmIdentifier_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['Params']), opt=True)
    __AttributeCertificateV1_algorithmIdentifier_parameters._const_tab = ___AttributeCertificateV1_algorithmIdentifier_algorithm_tab
    __AttributeCertificateV1_algorithmIdentifier_parameters._const_tab_at = ('..', '..', 'algorithmIdentifier', 'algorithm')
    __AttributeCertificateV1_algorithmIdentifier_parameters._const_tab_id = 'Params'
    _AttributeCertificateV1_algorithmIdentifier._cont = ASN1Dict([
        ('algorithm', __AttributeCertificateV1_algorithmIdentifier_algorithm),
        ('parameters', __AttributeCertificateV1_algorithmIdentifier_parameters),
        ])
    _AttributeCertificateV1_algorithmIdentifier._ext = None
    _AttributeCertificateV1_signature = BIT_STR(name='signature', mode=MODE_TYPE)
    __AttributeCertificateV1_signature_contain = OPEN(name='_cont_signature', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['Value']))
    __AttributeCertificateV1_signature_contain._const_tab = ___AttributeCertificateV1_algorithmIdentifier_algorithm_tab
    __AttributeCertificateV1_signature_contain._const_tab_at = ('..', 'algorithmIdentifier', 'algorithm')
    __AttributeCertificateV1_signature_contain._const_tab_id = 'Value'
    _AttributeCertificateV1_signature._const_cont = __AttributeCertificateV1_signature_contain
    AttributeCertificateV1._cont = ASN1Dict([
        ('toBeSigned', _AttributeCertificateV1_toBeSigned),
        ('algorithmIdentifier', _AttributeCertificateV1_algorithmIdentifier),
        ('signature', _AttributeCertificateV1_signature),
        ])
    AttributeCertificateV1._ext = None
    
    #-----< AttributeCertificateInfoV1 >-----#
    AttributeCertificateInfoV1 = SEQ(name='AttributeCertificateInfoV1', mode=MODE_TYPE)
    _AttributeCertificateInfoV1_version = INT(name='version', mode=MODE_TYPE, typeref=ASN1RefType(('AttributeCertificateVersion1-2009', 'AttCertVersionV1')), default=0)
    _AttributeCertificateInfoV1_subject = CHOICE(name='subject', mode=MODE_TYPE)
    __AttributeCertificateInfoV1_subject_baseCertificateID = SEQ(name='baseCertificateID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'IssuerSerial')))
    __AttributeCertificateInfoV1_subject_subjectName = SEQ_OF(name='subjectName', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    _AttributeCertificateInfoV1_subject._cont = ASN1Dict([
        ('baseCertificateID', __AttributeCertificateInfoV1_subject_baseCertificateID),
        ('subjectName', __AttributeCertificateInfoV1_subject_subjectName),
        ])
    _AttributeCertificateInfoV1_subject._ext = None
    _AttributeCertificateInfoV1_issuer = SEQ_OF(name='issuer', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    _AttributeCertificateInfoV1_signature = SEQ(name='signature', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __AttributeCertificateInfoV1_signature_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['id']))
    ___AttributeCertificateInfoV1_signature_algorithm_tab = CLASS(name='_tab_SIGNATURE-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    ___AttributeCertificateInfoV1_signature_algorithm_tab._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    __AttributeCertificateInfoV1_signature_algorithm._const_tab = ___AttributeCertificateInfoV1_signature_algorithm_tab
    __AttributeCertificateInfoV1_signature_algorithm._const_tab_at = None
    __AttributeCertificateInfoV1_signature_algorithm._const_tab_id = 'id'
    __AttributeCertificateInfoV1_signature_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['Params']), opt=True)
    ___AttributeCertificateInfoV1_signature_parameters_tab = CLASS(name='_tab_SIGNATURE-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    ___AttributeCertificateInfoV1_signature_parameters_tab._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    __AttributeCertificateInfoV1_signature_parameters._const_tab = ___AttributeCertificateInfoV1_signature_parameters_tab
    __AttributeCertificateInfoV1_signature_parameters._const_tab_at = ('..', 'algorithm')
    __AttributeCertificateInfoV1_signature_parameters._const_tab_id = 'Params'
    _AttributeCertificateInfoV1_signature._cont = ASN1Dict([
        ('algorithm', __AttributeCertificateInfoV1_signature_algorithm),
        ('parameters', __AttributeCertificateInfoV1_signature_parameters),
        ])
    _AttributeCertificateInfoV1_signature._ext = None
    _AttributeCertificateInfoV1_serialNumber = INT(name='serialNumber', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'CertificateSerialNumber')))
    _AttributeCertificateInfoV1_attCertValidityPeriod = SEQ(name='attCertValidityPeriod', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'AttCertValidityPeriod')))
    _AttributeCertificateInfoV1_attributes = SEQ_OF(name='attributes', mode=MODE_TYPE)
    __AttributeCertificateInfoV1_attributes__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'AttributeSet')))
    ___AttributeCertificateInfoV1_attributes__item__type = OID(name='type', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['id']))
    ____AttributeCertificateInfoV1_attributes__item__type_tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    ____AttributeCertificateInfoV1_attributes__item__type_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___AttributeCertificateInfoV1_attributes__item__type._const_tab = ____AttributeCertificateInfoV1_attributes__item__type_tab
    ___AttributeCertificateInfoV1_attributes__item__type._const_tab_at = None
    ___AttributeCertificateInfoV1_attributes__item__type._const_tab_id = 'id'
    ___AttributeCertificateInfoV1_attributes__item__values = SET_OF(name='values', mode=MODE_TYPE)
    ____AttributeCertificateInfoV1_attributes__item__values__item_ = OPEN(name='_item_', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['Type']))
    _____AttributeCertificateInfoV1_attributes__item__values__item__tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _____AttributeCertificateInfoV1_attributes__item__values__item__tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ____AttributeCertificateInfoV1_attributes__item__values__item_._const_tab = _____AttributeCertificateInfoV1_attributes__item__values__item__tab
    ____AttributeCertificateInfoV1_attributes__item__values__item_._const_tab_at = ('..', '..', 'type')
    ____AttributeCertificateInfoV1_attributes__item__values__item_._const_tab_id = 'Type'
    ___AttributeCertificateInfoV1_attributes__item__values._cont = ____AttributeCertificateInfoV1_attributes__item__values__item_
    ___AttributeCertificateInfoV1_attributes__item__values._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    __AttributeCertificateInfoV1_attributes__item_._cont = ASN1Dict([
        ('type', ___AttributeCertificateInfoV1_attributes__item__type),
        ('values', ___AttributeCertificateInfoV1_attributes__item__values),
        ])
    __AttributeCertificateInfoV1_attributes__item_._ext = None
    _AttributeCertificateInfoV1_attributes._cont = __AttributeCertificateInfoV1_attributes__item_
    _AttributeCertificateInfoV1_issuerUniqueID = BIT_STR(name='issuerUniqueID', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'UniqueIdentifier')), opt=True)
    _AttributeCertificateInfoV1_extensions = SEQ_OF(name='extensions', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'Extensions')), opt=True)
    __AttributeCertificateInfoV1_extensions__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'Extension')))
    ___AttributeCertificateInfoV1_extensions__item__extnID = OID(name='extnID', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'EXTENSION'), ['id']))
    ____AttributeCertificateInfoV1_extensions__item__extnID_tab = CLASS(name='_tab_EXTENSION', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    ____AttributeCertificateInfoV1_extensions__item__extnID_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___AttributeCertificateInfoV1_extensions__item__extnID._const_tab = ____AttributeCertificateInfoV1_extensions__item__extnID_tab
    ___AttributeCertificateInfoV1_extensions__item__extnID._const_tab_at = None
    ___AttributeCertificateInfoV1_extensions__item__extnID._const_tab_id = 'id'
    ___AttributeCertificateInfoV1_extensions__item__critical = BOOL(name='critical', mode=MODE_TYPE, default=False)
    ___AttributeCertificateInfoV1_extensions__item__extnValue = OCT_STR(name='extnValue', mode=MODE_TYPE)
    ____AttributeCertificateInfoV1_extensions__item__extnValue_contain = OPEN(name='_cont_extnValue', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'EXTENSION'), ['ExtnType']))
    _____AttributeCertificateInfoV1_extensions__item__extnValue_contain_tab = CLASS(name='_tab_EXTENSION', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _____AttributeCertificateInfoV1_extensions__item__extnValue_contain_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ____AttributeCertificateInfoV1_extensions__item__extnValue_contain._const_tab = _____AttributeCertificateInfoV1_extensions__item__extnValue_contain_tab
    ____AttributeCertificateInfoV1_extensions__item__extnValue_contain._const_tab_at = ('..', 'extnID')
    ____AttributeCertificateInfoV1_extensions__item__extnValue_contain._const_tab_id = 'ExtnType'
    ___AttributeCertificateInfoV1_extensions__item__extnValue._const_cont = ____AttributeCertificateInfoV1_extensions__item__extnValue_contain
    __AttributeCertificateInfoV1_extensions__item_._cont = ASN1Dict([
        ('extnID', ___AttributeCertificateInfoV1_extensions__item__extnID),
        ('critical', ___AttributeCertificateInfoV1_extensions__item__critical),
        ('extnValue', ___AttributeCertificateInfoV1_extensions__item__extnValue),
        ])
    __AttributeCertificateInfoV1_extensions__item_._ext = None
    _AttributeCertificateInfoV1_extensions._cont = __AttributeCertificateInfoV1_extensions__item_
    _AttributeCertificateInfoV1_extensions._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    AttributeCertificateInfoV1._cont = ASN1Dict([
        ('version', _AttributeCertificateInfoV1_version),
        ('subject', _AttributeCertificateInfoV1_subject),
        ('issuer', _AttributeCertificateInfoV1_issuer),
        ('signature', _AttributeCertificateInfoV1_signature),
        ('serialNumber', _AttributeCertificateInfoV1_serialNumber),
        ('attCertValidityPeriod', _AttributeCertificateInfoV1_attCertValidityPeriod),
        ('attributes', _AttributeCertificateInfoV1_attributes),
        ('issuerUniqueID', _AttributeCertificateInfoV1_issuerUniqueID),
        ('extensions', _AttributeCertificateInfoV1_extensions),
        ])
    AttributeCertificateInfoV1._ext = None
    
    #-----< AttCertVersionV1 >-----#
    AttCertVersionV1 = INT(name='AttCertVersionV1', mode=MODE_TYPE)
    AttCertVersionV1._cont = ASN1Dict([('v1', 0)])
    
    #-----< AttrList >-----#
    AttrList = CLASS(name='AttrList', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    AttrList._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< AttributeCertExtensionsV1 >-----#
    AttributeCertExtensionsV1 = CLASS(name='AttributeCertExtensionsV1', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    AttributeCertExtensionsV1._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    _all_ = [
        _AttributeCertificateV1_toBeSigned,
        ___AttributeCertificateV1_algorithmIdentifier_algorithm_tab,
        ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0,
        ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_1,
        ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_2,
        ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_3,
        ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_3,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0,
        ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_4,
        ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_4,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1,
        ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_5,
        ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_5,
        ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_6,
        ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_6,
        ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_7,
        ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_7,
        ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_8,
        ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_8,
        ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_9,
        ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_9,
        ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Value_10,
        ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_10,
        ____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_val_Params_11,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1,
        __AttributeCertificateV1_algorithmIdentifier_algorithm,
        __AttributeCertificateV1_algorithmIdentifier_parameters,
        _AttributeCertificateV1_algorithmIdentifier,
        __AttributeCertificateV1_signature_contain,
        _AttributeCertificateV1_signature,
        AttributeCertificateV1,
        _AttributeCertificateInfoV1_version,
        __AttributeCertificateInfoV1_subject_baseCertificateID,
        __AttributeCertificateInfoV1_subject_subjectName,
        _AttributeCertificateInfoV1_subject,
        _AttributeCertificateInfoV1_issuer,
        ___AttributeCertificateInfoV1_signature_algorithm_tab,
        __AttributeCertificateInfoV1_signature_algorithm,
        ___AttributeCertificateInfoV1_signature_parameters_tab,
        __AttributeCertificateInfoV1_signature_parameters,
        _AttributeCertificateInfoV1_signature,
        _AttributeCertificateInfoV1_serialNumber,
        _AttributeCertificateInfoV1_attCertValidityPeriod,
        ____AttributeCertificateInfoV1_attributes__item__type_tab,
        ___AttributeCertificateInfoV1_attributes__item__type,
        _____AttributeCertificateInfoV1_attributes__item__values__item__tab,
        ____AttributeCertificateInfoV1_attributes__item__values__item_,
        ___AttributeCertificateInfoV1_attributes__item__values,
        __AttributeCertificateInfoV1_attributes__item_,
        _AttributeCertificateInfoV1_attributes,
        _AttributeCertificateInfoV1_issuerUniqueID,
        ____AttributeCertificateInfoV1_extensions__item__extnID_tab,
        ___AttributeCertificateInfoV1_extensions__item__extnID,
        ___AttributeCertificateInfoV1_extensions__item__critical,
        _____AttributeCertificateInfoV1_extensions__item__extnValue_contain_tab,
        ____AttributeCertificateInfoV1_extensions__item__extnValue_contain,
        ___AttributeCertificateInfoV1_extensions__item__extnValue,
        __AttributeCertificateInfoV1_extensions__item_,
        _AttributeCertificateInfoV1_extensions,
        AttributeCertificateInfoV1,
        AttCertVersionV1,
        AttrList,
        AttributeCertExtensionsV1,
    ]

class PKIX_CommonTypes_2009:

    _name_  = 'PKIX-CommonTypes-2009'
    _oid_   = [1, 3, 6, 1, 5, 5, 7, 0, 57]
    
    _obj_ = [
        'ATTRIBUTE',
        'MATCHING-RULE',
        'AttributeSet',
        'SingleAttribute',
        'EXTENSION',
        'Extensions',
        'Extension',
        'SECURITY-CATEGORY',
        'SecurityCategory',
        ]
    _type_ = [
        'ATTRIBUTE',
        'MATCHING-RULE',
        'AttributeSet',
        'SingleAttribute',
        'EXTENSION',
        'Extensions',
        'Extension',
        'SECURITY-CATEGORY',
        'SecurityCategory',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        'ATTRIBUTE',
        'MATCHING-RULE',
        'EXTENSION',
        'SECURITY-CATEGORY',
        ]
    _param_ = [
        'AttributeSet',
        'SingleAttribute',
        'Extensions',
        'Extension',
        'SecurityCategory',
        ]
    
    #-----< ATTRIBUTE >-----#
    ATTRIBUTE = CLASS(name='ATTRIBUTE', mode=MODE_TYPE)
    _ATTRIBUTE_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    _ATTRIBUTE_Type = OPEN(name='Type', mode=MODE_TYPE, opt=True)
    _ATTRIBUTE_equality_match = CLASS(name='equality-match', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'MATCHING-RULE')), opt=True)
    _ATTRIBUTE_minCount = INT(name='minCount', mode=MODE_VALUE, default=1)
    _ATTRIBUTE_maxCount = INT(name='maxCount', mode=MODE_VALUE, opt=True)
    ATTRIBUTE._cont = ASN1Dict([
        ('id', _ATTRIBUTE_id),
        ('Type', _ATTRIBUTE_Type),
        ('equality-match', _ATTRIBUTE_equality_match),
        ('minCount', _ATTRIBUTE_minCount),
        ('maxCount', _ATTRIBUTE_maxCount),
        ])
    
    #-----< MATCHING-RULE >-----#
    MATCHING_RULE = CLASS(name='MATCHING-RULE', mode=MODE_TYPE)
    _MATCHING_RULE_ParentMatchingRules = CLASS(name='ParentMatchingRules', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'MATCHING-RULE')), opt=True)
    _MATCHING_RULE_AssertionType = OPEN(name='AssertionType', mode=MODE_TYPE, opt=True)
    _MATCHING_RULE_uniqueMatchIndicator = CLASS(name='uniqueMatchIndicator', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')), opt=True)
    _MATCHING_RULE_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    MATCHING_RULE._cont = ASN1Dict([
        ('ParentMatchingRules', _MATCHING_RULE_ParentMatchingRules),
        ('AssertionType', _MATCHING_RULE_AssertionType),
        ('uniqueMatchIndicator', _MATCHING_RULE_uniqueMatchIndicator),
        ('id', _MATCHING_RULE_id),
        ])
    
    #-----< AttributeSet >-----#
    AttributeSet = SEQ(name='AttributeSet', mode=MODE_TYPE, param=True)
    
    #-----< SingleAttribute >-----#
    SingleAttribute = SEQ(name='SingleAttribute', mode=MODE_TYPE, param=True)
    
    #-----< EXTENSION >-----#
    EXTENSION = CLASS(name='EXTENSION', mode=MODE_TYPE)
    _EXTENSION_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    _EXTENSION_ExtnType = OPEN(name='ExtnType', mode=MODE_TYPE)
    _EXTENSION_Critical = BOOL(name='Critical', mode=MODE_SET, default=ASN1Set(rv=[True, False], rr=[], ev=None, er=[]))
    EXTENSION._cont = ASN1Dict([
        ('id', _EXTENSION_id),
        ('ExtnType', _EXTENSION_ExtnType),
        ('Critical', _EXTENSION_Critical),
        ])
    
    #-----< Extensions >-----#
    Extensions = SEQ_OF(name='Extensions', mode=MODE_TYPE, param=True)
    
    #-----< Extension >-----#
    Extension = SEQ(name='Extension', mode=MODE_TYPE, param=True)
    
    #-----< SECURITY-CATEGORY >-----#
    SECURITY_CATEGORY = CLASS(name='SECURITY-CATEGORY', mode=MODE_TYPE, typeref=ASN1RefType(('_IMPL_', 'TYPE-IDENTIFIER'), []))
    
    #-----< SecurityCategory >-----#
    SecurityCategory = SEQ(name='SecurityCategory', mode=MODE_TYPE, param=True)
    
    _all_ = [
        _ATTRIBUTE_id,
        _ATTRIBUTE_Type,
        _ATTRIBUTE_equality_match,
        _ATTRIBUTE_minCount,
        _ATTRIBUTE_maxCount,
        ATTRIBUTE,
        _MATCHING_RULE_ParentMatchingRules,
        _MATCHING_RULE_AssertionType,
        _MATCHING_RULE_uniqueMatchIndicator,
        _MATCHING_RULE_id,
        MATCHING_RULE,
        _EXTENSION_id,
        _EXTENSION_ExtnType,
        _EXTENSION_Critical,
        EXTENSION,
        SECURITY_CATEGORY,
    ]

class PKIX_X400Address_2009:

    _name_  = 'PKIX-X400Address-2009'
    _oid_   = [1, 3, 6, 1, 5, 5, 7, 0, 60]
    
    _obj_ = [
        'ORAddress',
        'BuiltInStandardAttributes',
        'CountryName',
        'AdministrationDomainName',
        'NetworkAddress',
        'X121Address',
        'TerminalIdentifier',
        'PrivateDomainName',
        'OrganizationName',
        'NumericUserIdentifier',
        'PersonalName',
        'OrganizationalUnitNames',
        'OrganizationalUnitName',
        'BuiltInDomainDefinedAttributes',
        'BuiltInDomainDefinedAttribute',
        'ExtensionAttributes',
        'EXTENSION-ATTRIBUTE',
        'ExtensionAttribute',
        'SupportedExtensionAttributes',
        'ea-commonName',
        'ea-teletexCommonName',
        'ea-teletexOrganizationName',
        'ea-teletexPersonalName',
        'ea-teletexOrganizationalUnitNames',
        'TeletexOrganizationalUnitName',
        'ea-pDSName',
        'ea-physicalDeliveryCountryName',
        'ea-postalCode',
        'ea-physicalDeliveryOfficeName',
        'ea-physicalDeliveryOfficeNumber',
        'ea-extensionORAddressComponents',
        'ea-physicalDeliveryPersonalName',
        'ea-physicalDeliveryOrganizationName',
        'ea-extensionPhysicalDeliveryAddressComponents',
        'ea-unformattedPostalAddress',
        'ea-streetAddress',
        'ea-postOfficeBoxAddress',
        'ea-posteRestanteAddress',
        'ea-uniquePostalName',
        'ea-localPostalAttributes',
        'PDSParameter',
        'ea-extendedNetworkAddress',
        'PresentationAddress',
        'ea-terminalType',
        'ea-teletexDomainDefinedAttributes',
        'TeletexDomainDefinedAttribute',
        'ub-match',
        'ub-common-name-length',
        'ub-country-name-alpha-length',
        'ub-country-name-numeric-length',
        'ub-domain-defined-attributes',
        'ub-domain-defined-attribute-type-length',
        'ub-domain-defined-attribute-value-length',
        'ub-domain-name-length',
        'ub-extension-attributes',
        'ub-e163-4-number-length',
        'ub-e163-4-sub-address-length',
        'ub-generation-qualifier-length',
        'ub-given-name-length',
        'ub-initials-length',
        'ub-integer-options',
        'ub-numeric-user-id-length',
        'ub-organization-name-length',
        'ub-organizational-unit-name-length',
        'ub-organizational-units',
        'ub-pds-name-length',
        'ub-pds-parameter-length',
        'ub-pds-physical-address-lines',
        'ub-postal-code-length',
        'ub-surname-length',
        'ub-terminal-id-length',
        'ub-unformatted-address-length',
        'ub-x121-address-length',
        ]
    _type_ = [
        'ORAddress',
        'BuiltInStandardAttributes',
        'CountryName',
        'AdministrationDomainName',
        'NetworkAddress',
        'X121Address',
        'TerminalIdentifier',
        'PrivateDomainName',
        'OrganizationName',
        'NumericUserIdentifier',
        'PersonalName',
        'OrganizationalUnitNames',
        'OrganizationalUnitName',
        'BuiltInDomainDefinedAttributes',
        'BuiltInDomainDefinedAttribute',
        'ExtensionAttributes',
        'EXTENSION-ATTRIBUTE',
        'ExtensionAttribute',
        'TeletexOrganizationalUnitName',
        'PDSParameter',
        'PresentationAddress',
        'TeletexDomainDefinedAttribute',
        ]
    _set_ = [
        'SupportedExtensionAttributes',
        ]
    _val_ = [
        'ea-commonName',
        'ea-teletexCommonName',
        'ea-teletexOrganizationName',
        'ea-teletexPersonalName',
        'ea-teletexOrganizationalUnitNames',
        'ea-pDSName',
        'ea-physicalDeliveryCountryName',
        'ea-postalCode',
        'ea-physicalDeliveryOfficeName',
        'ea-physicalDeliveryOfficeNumber',
        'ea-extensionORAddressComponents',
        'ea-physicalDeliveryPersonalName',
        'ea-physicalDeliveryOrganizationName',
        'ea-extensionPhysicalDeliveryAddressComponents',
        'ea-unformattedPostalAddress',
        'ea-streetAddress',
        'ea-postOfficeBoxAddress',
        'ea-posteRestanteAddress',
        'ea-uniquePostalName',
        'ea-localPostalAttributes',
        'ea-extendedNetworkAddress',
        'ea-terminalType',
        'ea-teletexDomainDefinedAttributes',
        'ub-match',
        'ub-common-name-length',
        'ub-country-name-alpha-length',
        'ub-country-name-numeric-length',
        'ub-domain-defined-attributes',
        'ub-domain-defined-attribute-type-length',
        'ub-domain-defined-attribute-value-length',
        'ub-domain-name-length',
        'ub-extension-attributes',
        'ub-e163-4-number-length',
        'ub-e163-4-sub-address-length',
        'ub-generation-qualifier-length',
        'ub-given-name-length',
        'ub-initials-length',
        'ub-integer-options',
        'ub-numeric-user-id-length',
        'ub-organization-name-length',
        'ub-organizational-unit-name-length',
        'ub-organizational-units',
        'ub-pds-name-length',
        'ub-pds-parameter-length',
        'ub-pds-physical-address-lines',
        'ub-postal-code-length',
        'ub-surname-length',
        'ub-terminal-id-length',
        'ub-unformatted-address-length',
        'ub-x121-address-length',
        ]
    _class_ = [
        'EXTENSION-ATTRIBUTE',
        'SupportedExtensionAttributes',
        'ea-commonName',
        'ea-teletexCommonName',
        'ea-teletexOrganizationName',
        'ea-teletexPersonalName',
        'ea-teletexOrganizationalUnitNames',
        'ea-pDSName',
        'ea-physicalDeliveryCountryName',
        'ea-postalCode',
        'ea-physicalDeliveryOfficeName',
        'ea-physicalDeliveryOfficeNumber',
        'ea-extensionORAddressComponents',
        'ea-physicalDeliveryPersonalName',
        'ea-physicalDeliveryOrganizationName',
        'ea-extensionPhysicalDeliveryAddressComponents',
        'ea-unformattedPostalAddress',
        'ea-streetAddress',
        'ea-postOfficeBoxAddress',
        'ea-posteRestanteAddress',
        'ea-uniquePostalName',
        'ea-localPostalAttributes',
        'ea-extendedNetworkAddress',
        'ea-terminalType',
        'ea-teletexDomainDefinedAttributes',
        ]
    _param_ = [
        ]
    
    #-----< ORAddress >-----#
    ORAddress = SEQ(name='ORAddress', mode=MODE_TYPE)
    _ORAddress_built_in_standard_attributes = SEQ(name='built-in-standard-attributes', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'BuiltInStandardAttributes')))
    _ORAddress_built_in_domain_defined_attributes = SEQ_OF(name='built-in-domain-defined-attributes', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'BuiltInDomainDefinedAttributes')), opt=True)
    _ORAddress_extension_attributes = SET_OF(name='extension-attributes', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'ExtensionAttributes')), opt=True)
    ORAddress._cont = ASN1Dict([
        ('built-in-standard-attributes', _ORAddress_built_in_standard_attributes),
        ('built-in-domain-defined-attributes', _ORAddress_built_in_domain_defined_attributes),
        ('extension-attributes', _ORAddress_extension_attributes),
        ])
    ORAddress._ext = None
    
    #-----< BuiltInStandardAttributes >-----#
    BuiltInStandardAttributes = SEQ(name='BuiltInStandardAttributes', mode=MODE_TYPE)
    _BuiltInStandardAttributes_country_name = CHOICE(name='country-name', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'CountryName')), opt=True)
    _BuiltInStandardAttributes_administration_domain_name = CHOICE(name='administration-domain-name', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'AdministrationDomainName')), opt=True)
    _BuiltInStandardAttributes_network_address = STR_NUM(name='network-address', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX-X400Address-2009', 'NetworkAddress')), opt=True)
    _BuiltInStandardAttributes_terminal_identifier = STR_PRINT(name='terminal-identifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX-X400Address-2009', 'TerminalIdentifier')), opt=True)
    _BuiltInStandardAttributes_private_domain_name = CHOICE(name='private-domain-name', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('PKIX-X400Address-2009', 'PrivateDomainName')), opt=True)
    _BuiltInStandardAttributes_organization_name = STR_PRINT(name='organization-name', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX-X400Address-2009', 'OrganizationName')), opt=True)
    _BuiltInStandardAttributes_numeric_user_identifier = STR_NUM(name='numeric-user-identifier', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX-X400Address-2009', 'NumericUserIdentifier')), opt=True)
    _BuiltInStandardAttributes_personal_name = SET(name='personal-name', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX-X400Address-2009', 'PersonalName')), opt=True)
    _BuiltInStandardAttributes_organizational_unit_names = SEQ_OF(name='organizational-unit-names', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX-X400Address-2009', 'OrganizationalUnitNames')), opt=True)
    BuiltInStandardAttributes._cont = ASN1Dict([
        ('country-name', _BuiltInStandardAttributes_country_name),
        ('administration-domain-name', _BuiltInStandardAttributes_administration_domain_name),
        ('network-address', _BuiltInStandardAttributes_network_address),
        ('terminal-identifier', _BuiltInStandardAttributes_terminal_identifier),
        ('private-domain-name', _BuiltInStandardAttributes_private_domain_name),
        ('organization-name', _BuiltInStandardAttributes_organization_name),
        ('numeric-user-identifier', _BuiltInStandardAttributes_numeric_user_identifier),
        ('personal-name', _BuiltInStandardAttributes_personal_name),
        ('organizational-unit-names', _BuiltInStandardAttributes_organizational_unit_names),
        ])
    BuiltInStandardAttributes._ext = None
    
    #-----< CountryName >-----#
    CountryName = CHOICE(name='CountryName', mode=MODE_TYPE, tag=(1, TAG_APPLICATION, TAG_EXPLICIT))
    _CountryName_x121_dcc_code = STR_NUM(name='x121-dcc-code', mode=MODE_TYPE)
    _CountryName_x121_dcc_code._const_sz = ASN1Set(rv=[3], rr=[], ev=None, er=[])
    _CountryName_iso_3166_alpha2_code = STR_PRINT(name='iso-3166-alpha2-code', mode=MODE_TYPE)
    _CountryName_iso_3166_alpha2_code._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    CountryName._cont = ASN1Dict([
        ('x121-dcc-code', _CountryName_x121_dcc_code),
        ('iso-3166-alpha2-code', _CountryName_iso_3166_alpha2_code),
        ])
    CountryName._ext = None
    
    #-----< AdministrationDomainName >-----#
    AdministrationDomainName = CHOICE(name='AdministrationDomainName', mode=MODE_TYPE, tag=(2, TAG_APPLICATION, TAG_EXPLICIT))
    _AdministrationDomainName_numeric = STR_NUM(name='numeric', mode=MODE_TYPE)
    _AdministrationDomainName_numeric._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=16)], ev=None, er=[])
    _AdministrationDomainName_printable = STR_PRINT(name='printable', mode=MODE_TYPE)
    _AdministrationDomainName_printable._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=16)], ev=None, er=[])
    AdministrationDomainName._cont = ASN1Dict([
        ('numeric', _AdministrationDomainName_numeric),
        ('printable', _AdministrationDomainName_printable),
        ])
    AdministrationDomainName._ext = None
    
    #-----< NetworkAddress >-----#
    NetworkAddress = STR_NUM(name='NetworkAddress', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'X121Address')))
    
    #-----< X121Address >-----#
    X121Address = STR_NUM(name='X121Address', mode=MODE_TYPE)
    X121Address._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< TerminalIdentifier >-----#
    TerminalIdentifier = STR_PRINT(name='TerminalIdentifier', mode=MODE_TYPE)
    TerminalIdentifier._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=24)], ev=None, er=[])
    
    #-----< PrivateDomainName >-----#
    PrivateDomainName = CHOICE(name='PrivateDomainName', mode=MODE_TYPE)
    _PrivateDomainName_numeric = STR_NUM(name='numeric', mode=MODE_TYPE)
    _PrivateDomainName_numeric._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    _PrivateDomainName_printable = STR_PRINT(name='printable', mode=MODE_TYPE)
    _PrivateDomainName_printable._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    PrivateDomainName._cont = ASN1Dict([
        ('numeric', _PrivateDomainName_numeric),
        ('printable', _PrivateDomainName_printable),
        ])
    PrivateDomainName._ext = None
    
    #-----< OrganizationName >-----#
    OrganizationName = STR_PRINT(name='OrganizationName', mode=MODE_TYPE)
    OrganizationName._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    
    #-----< NumericUserIdentifier >-----#
    NumericUserIdentifier = STR_NUM(name='NumericUserIdentifier', mode=MODE_TYPE)
    NumericUserIdentifier._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< PersonalName >-----#
    PersonalName = SET(name='PersonalName', mode=MODE_TYPE)
    _PersonalName_surname = STR_PRINT(name='surname', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PersonalName_surname._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=40)], ev=None, er=[])
    _PersonalName_given_name = STR_PRINT(name='given-name', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PersonalName_given_name._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    _PersonalName_initials = STR_PRINT(name='initials', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PersonalName_initials._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=5)], ev=None, er=[])
    _PersonalName_generation_qualifier = STR_PRINT(name='generation-qualifier', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PersonalName_generation_qualifier._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=3)], ev=None, er=[])
    PersonalName._cont = ASN1Dict([
        ('surname', _PersonalName_surname),
        ('given-name', _PersonalName_given_name),
        ('initials', _PersonalName_initials),
        ('generation-qualifier', _PersonalName_generation_qualifier),
        ])
    PersonalName._ext = None
    
    #-----< OrganizationalUnitNames >-----#
    OrganizationalUnitNames = SEQ_OF(name='OrganizationalUnitNames', mode=MODE_TYPE)
    _OrganizationalUnitNames__item_ = STR_PRINT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'OrganizationalUnitName')))
    OrganizationalUnitNames._cont = _OrganizationalUnitNames__item_
    OrganizationalUnitNames._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    
    #-----< OrganizationalUnitName >-----#
    OrganizationalUnitName = STR_PRINT(name='OrganizationalUnitName', mode=MODE_TYPE)
    OrganizationalUnitName._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< BuiltInDomainDefinedAttributes >-----#
    BuiltInDomainDefinedAttributes = SEQ_OF(name='BuiltInDomainDefinedAttributes', mode=MODE_TYPE)
    _BuiltInDomainDefinedAttributes__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'BuiltInDomainDefinedAttribute')))
    BuiltInDomainDefinedAttributes._cont = _BuiltInDomainDefinedAttributes__item_
    BuiltInDomainDefinedAttributes._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    
    #-----< BuiltInDomainDefinedAttribute >-----#
    BuiltInDomainDefinedAttribute = SEQ(name='BuiltInDomainDefinedAttribute', mode=MODE_TYPE)
    _BuiltInDomainDefinedAttribute_type = STR_PRINT(name='type', mode=MODE_TYPE)
    _BuiltInDomainDefinedAttribute_type._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    _BuiltInDomainDefinedAttribute_value = STR_PRINT(name='value', mode=MODE_TYPE)
    _BuiltInDomainDefinedAttribute_value._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    BuiltInDomainDefinedAttribute._cont = ASN1Dict([
        ('type', _BuiltInDomainDefinedAttribute_type),
        ('value', _BuiltInDomainDefinedAttribute_value),
        ])
    BuiltInDomainDefinedAttribute._ext = None
    
    #-----< ExtensionAttributes >-----#
    ExtensionAttributes = SET_OF(name='ExtensionAttributes', mode=MODE_TYPE)
    _ExtensionAttributes__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'ExtensionAttribute')))
    ExtensionAttributes._cont = _ExtensionAttributes__item_
    ExtensionAttributes._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< EXTENSION-ATTRIBUTE >-----#
    EXTENSION_ATTRIBUTE = CLASS(name='EXTENSION-ATTRIBUTE', mode=MODE_TYPE)
    _EXTENSION_ATTRIBUTE_id = INT(name='id', mode=MODE_VALUE, uniq=True)
    _EXTENSION_ATTRIBUTE_id._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=256)], ev=None, er=[])
    _EXTENSION_ATTRIBUTE_Type = OPEN(name='Type', mode=MODE_TYPE)
    EXTENSION_ATTRIBUTE._cont = ASN1Dict([
        ('id', _EXTENSION_ATTRIBUTE_id),
        ('Type', _EXTENSION_ATTRIBUTE_Type),
        ])
    
    #-----< ExtensionAttribute >-----#
    ExtensionAttribute = SEQ(name='ExtensionAttribute', mode=MODE_TYPE)
    _ExtensionAttribute_extension_attribute_type = INT(name='extension-attribute-type', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE'), ['id']))
    __ExtensionAttribute_extension_attribute_type_tab = CLASS(name='_tab_EXTENSION-ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_0 = STR_PRINT(name='Type', mode=MODE_TYPE)
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_0._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_1 = STR_TELE(name='Type', mode=MODE_TYPE)
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_1._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_2 = STR_TELE(name='Type', mode=MODE_TYPE)
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_2._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_3 = SET(name='Type', mode=MODE_TYPE)
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_3_surname = STR_TELE(name='surname', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_3_surname._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=40)], ev=None, er=[])
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_3_given_name = STR_TELE(name='given-name', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_3_given_name._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_3_initials = STR_TELE(name='initials', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_3_initials._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=5)], ev=None, er=[])
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_3_generation_qualifier = STR_TELE(name='generation-qualifier', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_3_generation_qualifier._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=3)], ev=None, er=[])
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_3._cont = ASN1Dict([
        ('surname', ____ExtensionAttribute_extension_attribute_type_tab_val_Type_3_surname),
        ('given-name', ____ExtensionAttribute_extension_attribute_type_tab_val_Type_3_given_name),
        ('initials', ____ExtensionAttribute_extension_attribute_type_tab_val_Type_3_initials),
        ('generation-qualifier', ____ExtensionAttribute_extension_attribute_type_tab_val_Type_3_generation_qualifier),
        ])
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_3._ext = None
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_4 = SEQ_OF(name='Type', mode=MODE_TYPE)
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_4__item_ = STR_TELE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'TeletexOrganizationalUnitName')))
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_4._cont = ____ExtensionAttribute_extension_attribute_type_tab_val_Type_4__item_
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_4._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_5 = STR_PRINT(name='Type', mode=MODE_TYPE)
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_5._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_6 = CHOICE(name='Type', mode=MODE_TYPE)
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_6_x121_dcc_code = STR_NUM(name='x121-dcc-code', mode=MODE_TYPE)
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_6_x121_dcc_code._const_sz = ASN1Set(rv=[3], rr=[], ev=None, er=[])
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_6_iso_3166_alpha2_code = STR_PRINT(name='iso-3166-alpha2-code', mode=MODE_TYPE)
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_6_iso_3166_alpha2_code._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_6._cont = ASN1Dict([
        ('x121-dcc-code', ____ExtensionAttribute_extension_attribute_type_tab_val_Type_6_x121_dcc_code),
        ('iso-3166-alpha2-code', ____ExtensionAttribute_extension_attribute_type_tab_val_Type_6_iso_3166_alpha2_code),
        ])
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_6._ext = None
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_7 = CHOICE(name='Type', mode=MODE_TYPE)
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_7_numeric_code = STR_NUM(name='numeric-code', mode=MODE_TYPE)
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_7_numeric_code._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_7_printable_code = STR_PRINT(name='printable-code', mode=MODE_TYPE)
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_7_printable_code._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_7._cont = ASN1Dict([
        ('numeric-code', ____ExtensionAttribute_extension_attribute_type_tab_val_Type_7_numeric_code),
        ('printable-code', ____ExtensionAttribute_extension_attribute_type_tab_val_Type_7_printable_code),
        ])
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_7._ext = None
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_8 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_9 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_10 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_11 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_12 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_13 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_14 = SET(name='Type', mode=MODE_TYPE)
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_14_printable_address = SEQ_OF(name='printable-address', mode=MODE_TYPE, opt=True)
    _____ExtensionAttribute_extension_attribute_type_tab_val_Type_14_printable_address__item_ = STR_PRINT(name='_item_', mode=MODE_TYPE)
    _____ExtensionAttribute_extension_attribute_type_tab_val_Type_14_printable_address__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=30)], ev=None, er=[])
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_14_printable_address._cont = _____ExtensionAttribute_extension_attribute_type_tab_val_Type_14_printable_address__item_
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_14_printable_address._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=6)], ev=None, er=[])
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_14_teletex_string = STR_TELE(name='teletex-string', mode=MODE_TYPE, opt=True)
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_14_teletex_string._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=180)], ev=None, er=[])
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_14._cont = ASN1Dict([
        ('printable-address', ____ExtensionAttribute_extension_attribute_type_tab_val_Type_14_printable_address),
        ('teletex-string', ____ExtensionAttribute_extension_attribute_type_tab_val_Type_14_teletex_string),
        ])
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_14._ext = None
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_15 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_16 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_17 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_18 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_19 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_20 = CHOICE(name='Type', mode=MODE_TYPE)
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_20_e163_4_address = SEQ(name='e163-4-address', mode=MODE_TYPE)
    _____ExtensionAttribute_extension_attribute_type_tab_val_Type_20_e163_4_address_number = STR_NUM(name='number', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _____ExtensionAttribute_extension_attribute_type_tab_val_Type_20_e163_4_address_number._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=15)], ev=None, er=[])
    _____ExtensionAttribute_extension_attribute_type_tab_val_Type_20_e163_4_address_sub_address = STR_NUM(name='sub-address', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _____ExtensionAttribute_extension_attribute_type_tab_val_Type_20_e163_4_address_sub_address._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=40)], ev=None, er=[])
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_20_e163_4_address._cont = ASN1Dict([
        ('number', _____ExtensionAttribute_extension_attribute_type_tab_val_Type_20_e163_4_address_number),
        ('sub-address', _____ExtensionAttribute_extension_attribute_type_tab_val_Type_20_e163_4_address_sub_address),
        ])
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_20_e163_4_address._ext = None
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_20_psap_address = SEQ(name='psap-address', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX-X400Address-2009', 'PresentationAddress')))
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_20._cont = ASN1Dict([
        ('e163-4-address', ____ExtensionAttribute_extension_attribute_type_tab_val_Type_20_e163_4_address),
        ('psap-address', ____ExtensionAttribute_extension_attribute_type_tab_val_Type_20_psap_address),
        ])
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_20._ext = None
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_21 = INT(name='Type', mode=MODE_TYPE)
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_21._cont = ASN1Dict([('telex', 3), ('teletex', 4), ('g3-facsimile', 5), ('g4-facsimile', 6), ('ia5-terminal', 7), ('videotex', 8)])
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_21._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=256)], ev=None, er=[])
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_22 = SEQ_OF(name='Type', mode=MODE_TYPE)
    ____ExtensionAttribute_extension_attribute_type_tab_val_Type_22__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'TeletexDomainDefinedAttribute')))
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_22._cont = ____ExtensionAttribute_extension_attribute_type_tab_val_Type_22__item_
    ___ExtensionAttribute_extension_attribute_type_tab_val_Type_22._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    __ExtensionAttribute_extension_attribute_type_tab._val = ASN1Set(rv=[dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_0), ('id', 1)]), dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_1), ('id', 2)]), dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_2), ('id', 3)]), dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_3), ('id', 4)]), dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_4), ('id', 5)]), dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_5), ('id', 7)]), dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_6), ('id', 8)]), dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_7), ('id', 9)]), dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_8), ('id', 10)]), dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_9), ('id', 11)]), dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_10), ('id', 12)]), dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_11), ('id', 13)]), dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_12), ('id', 14)]), dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_13), ('id', 15)]), dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_14), ('id', 16)]), dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_15), ('id', 17)]), dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_16), ('id', 18)]), dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_17), ('id', 19)]), dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_18), ('id', 20)]), dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_19), ('id', 21)]), dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_20), ('id', 22)]), dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_21), ('id', 23)]), dict([('Type', ___ExtensionAttribute_extension_attribute_type_tab_val_Type_22), ('id', 6)])], rr=[], ev=None, er=[])
    _ExtensionAttribute_extension_attribute_type._const_tab = __ExtensionAttribute_extension_attribute_type_tab
    _ExtensionAttribute_extension_attribute_type._const_tab_at = None
    _ExtensionAttribute_extension_attribute_type._const_tab_id = 'id'
    _ExtensionAttribute_extension_attribute_value = OPEN(name='extension-attribute-value', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE'), ['Type']))
    _ExtensionAttribute_extension_attribute_value._const_tab = __ExtensionAttribute_extension_attribute_type_tab
    _ExtensionAttribute_extension_attribute_value._const_tab_at = ('..', 'extension-attribute-type')
    _ExtensionAttribute_extension_attribute_value._const_tab_id = 'Type'
    ExtensionAttribute._cont = ASN1Dict([
        ('extension-attribute-type', _ExtensionAttribute_extension_attribute_type),
        ('extension-attribute-value', _ExtensionAttribute_extension_attribute_value),
        ])
    ExtensionAttribute._ext = None
    
    #-----< SupportedExtensionAttributes >-----#
    SupportedExtensionAttributes = CLASS(name='SupportedExtensionAttributes', mode=MODE_SET, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _SupportedExtensionAttributes_val_Type_0 = STR_PRINT(name='Type', mode=MODE_TYPE)
    _SupportedExtensionAttributes_val_Type_0._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _SupportedExtensionAttributes_val_Type_1 = STR_TELE(name='Type', mode=MODE_TYPE)
    _SupportedExtensionAttributes_val_Type_1._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _SupportedExtensionAttributes_val_Type_2 = STR_TELE(name='Type', mode=MODE_TYPE)
    _SupportedExtensionAttributes_val_Type_2._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _SupportedExtensionAttributes_val_Type_3 = SET(name='Type', mode=MODE_TYPE)
    __SupportedExtensionAttributes_val_Type_3_surname = STR_TELE(name='surname', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __SupportedExtensionAttributes_val_Type_3_surname._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=40)], ev=None, er=[])
    __SupportedExtensionAttributes_val_Type_3_given_name = STR_TELE(name='given-name', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SupportedExtensionAttributes_val_Type_3_given_name._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    __SupportedExtensionAttributes_val_Type_3_initials = STR_TELE(name='initials', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SupportedExtensionAttributes_val_Type_3_initials._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=5)], ev=None, er=[])
    __SupportedExtensionAttributes_val_Type_3_generation_qualifier = STR_TELE(name='generation-qualifier', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SupportedExtensionAttributes_val_Type_3_generation_qualifier._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=3)], ev=None, er=[])
    _SupportedExtensionAttributes_val_Type_3._cont = ASN1Dict([
        ('surname', __SupportedExtensionAttributes_val_Type_3_surname),
        ('given-name', __SupportedExtensionAttributes_val_Type_3_given_name),
        ('initials', __SupportedExtensionAttributes_val_Type_3_initials),
        ('generation-qualifier', __SupportedExtensionAttributes_val_Type_3_generation_qualifier),
        ])
    _SupportedExtensionAttributes_val_Type_3._ext = None
    _SupportedExtensionAttributes_val_Type_4 = SEQ_OF(name='Type', mode=MODE_TYPE)
    __SupportedExtensionAttributes_val_Type_4__item_ = STR_TELE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'TeletexOrganizationalUnitName')))
    _SupportedExtensionAttributes_val_Type_4._cont = __SupportedExtensionAttributes_val_Type_4__item_
    _SupportedExtensionAttributes_val_Type_4._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    _SupportedExtensionAttributes_val_Type_5 = STR_PRINT(name='Type', mode=MODE_TYPE)
    _SupportedExtensionAttributes_val_Type_5._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    _SupportedExtensionAttributes_val_Type_6 = CHOICE(name='Type', mode=MODE_TYPE)
    __SupportedExtensionAttributes_val_Type_6_x121_dcc_code = STR_NUM(name='x121-dcc-code', mode=MODE_TYPE)
    __SupportedExtensionAttributes_val_Type_6_x121_dcc_code._const_sz = ASN1Set(rv=[3], rr=[], ev=None, er=[])
    __SupportedExtensionAttributes_val_Type_6_iso_3166_alpha2_code = STR_PRINT(name='iso-3166-alpha2-code', mode=MODE_TYPE)
    __SupportedExtensionAttributes_val_Type_6_iso_3166_alpha2_code._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _SupportedExtensionAttributes_val_Type_6._cont = ASN1Dict([
        ('x121-dcc-code', __SupportedExtensionAttributes_val_Type_6_x121_dcc_code),
        ('iso-3166-alpha2-code', __SupportedExtensionAttributes_val_Type_6_iso_3166_alpha2_code),
        ])
    _SupportedExtensionAttributes_val_Type_6._ext = None
    _SupportedExtensionAttributes_val_Type_7 = CHOICE(name='Type', mode=MODE_TYPE)
    __SupportedExtensionAttributes_val_Type_7_numeric_code = STR_NUM(name='numeric-code', mode=MODE_TYPE)
    __SupportedExtensionAttributes_val_Type_7_numeric_code._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    __SupportedExtensionAttributes_val_Type_7_printable_code = STR_PRINT(name='printable-code', mode=MODE_TYPE)
    __SupportedExtensionAttributes_val_Type_7_printable_code._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    _SupportedExtensionAttributes_val_Type_7._cont = ASN1Dict([
        ('numeric-code', __SupportedExtensionAttributes_val_Type_7_numeric_code),
        ('printable-code', __SupportedExtensionAttributes_val_Type_7_printable_code),
        ])
    _SupportedExtensionAttributes_val_Type_7._ext = None
    _SupportedExtensionAttributes_val_Type_8 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    _SupportedExtensionAttributes_val_Type_9 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    _SupportedExtensionAttributes_val_Type_10 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    _SupportedExtensionAttributes_val_Type_11 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    _SupportedExtensionAttributes_val_Type_12 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    _SupportedExtensionAttributes_val_Type_13 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    _SupportedExtensionAttributes_val_Type_14 = SET(name='Type', mode=MODE_TYPE)
    __SupportedExtensionAttributes_val_Type_14_printable_address = SEQ_OF(name='printable-address', mode=MODE_TYPE, opt=True)
    ___SupportedExtensionAttributes_val_Type_14_printable_address__item_ = STR_PRINT(name='_item_', mode=MODE_TYPE)
    ___SupportedExtensionAttributes_val_Type_14_printable_address__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=30)], ev=None, er=[])
    __SupportedExtensionAttributes_val_Type_14_printable_address._cont = ___SupportedExtensionAttributes_val_Type_14_printable_address__item_
    __SupportedExtensionAttributes_val_Type_14_printable_address._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=6)], ev=None, er=[])
    __SupportedExtensionAttributes_val_Type_14_teletex_string = STR_TELE(name='teletex-string', mode=MODE_TYPE, opt=True)
    __SupportedExtensionAttributes_val_Type_14_teletex_string._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=180)], ev=None, er=[])
    _SupportedExtensionAttributes_val_Type_14._cont = ASN1Dict([
        ('printable-address', __SupportedExtensionAttributes_val_Type_14_printable_address),
        ('teletex-string', __SupportedExtensionAttributes_val_Type_14_teletex_string),
        ])
    _SupportedExtensionAttributes_val_Type_14._ext = None
    _SupportedExtensionAttributes_val_Type_15 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    _SupportedExtensionAttributes_val_Type_16 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    _SupportedExtensionAttributes_val_Type_17 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    _SupportedExtensionAttributes_val_Type_18 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    _SupportedExtensionAttributes_val_Type_19 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    _SupportedExtensionAttributes_val_Type_20 = CHOICE(name='Type', mode=MODE_TYPE)
    __SupportedExtensionAttributes_val_Type_20_e163_4_address = SEQ(name='e163-4-address', mode=MODE_TYPE)
    ___SupportedExtensionAttributes_val_Type_20_e163_4_address_number = STR_NUM(name='number', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___SupportedExtensionAttributes_val_Type_20_e163_4_address_number._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=15)], ev=None, er=[])
    ___SupportedExtensionAttributes_val_Type_20_e163_4_address_sub_address = STR_NUM(name='sub-address', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    ___SupportedExtensionAttributes_val_Type_20_e163_4_address_sub_address._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=40)], ev=None, er=[])
    __SupportedExtensionAttributes_val_Type_20_e163_4_address._cont = ASN1Dict([
        ('number', ___SupportedExtensionAttributes_val_Type_20_e163_4_address_number),
        ('sub-address', ___SupportedExtensionAttributes_val_Type_20_e163_4_address_sub_address),
        ])
    __SupportedExtensionAttributes_val_Type_20_e163_4_address._ext = None
    __SupportedExtensionAttributes_val_Type_20_psap_address = SEQ(name='psap-address', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX-X400Address-2009', 'PresentationAddress')))
    _SupportedExtensionAttributes_val_Type_20._cont = ASN1Dict([
        ('e163-4-address', __SupportedExtensionAttributes_val_Type_20_e163_4_address),
        ('psap-address', __SupportedExtensionAttributes_val_Type_20_psap_address),
        ])
    _SupportedExtensionAttributes_val_Type_20._ext = None
    _SupportedExtensionAttributes_val_Type_21 = INT(name='Type', mode=MODE_TYPE)
    _SupportedExtensionAttributes_val_Type_21._cont = ASN1Dict([('telex', 3), ('teletex', 4), ('g3-facsimile', 5), ('g4-facsimile', 6), ('ia5-terminal', 7), ('videotex', 8)])
    _SupportedExtensionAttributes_val_Type_21._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=256)], ev=None, er=[])
    _SupportedExtensionAttributes_val_Type_22 = SEQ_OF(name='Type', mode=MODE_TYPE)
    __SupportedExtensionAttributes_val_Type_22__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'TeletexDomainDefinedAttribute')))
    _SupportedExtensionAttributes_val_Type_22._cont = __SupportedExtensionAttributes_val_Type_22__item_
    _SupportedExtensionAttributes_val_Type_22._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    SupportedExtensionAttributes._val = ASN1Set(rv=[dict([('Type', _SupportedExtensionAttributes_val_Type_0), ('id', 1)]), dict([('Type', _SupportedExtensionAttributes_val_Type_1), ('id', 2)]), dict([('Type', _SupportedExtensionAttributes_val_Type_2), ('id', 3)]), dict([('Type', _SupportedExtensionAttributes_val_Type_3), ('id', 4)]), dict([('Type', _SupportedExtensionAttributes_val_Type_4), ('id', 5)]), dict([('Type', _SupportedExtensionAttributes_val_Type_5), ('id', 7)]), dict([('Type', _SupportedExtensionAttributes_val_Type_6), ('id', 8)]), dict([('Type', _SupportedExtensionAttributes_val_Type_7), ('id', 9)]), dict([('Type', _SupportedExtensionAttributes_val_Type_8), ('id', 10)]), dict([('Type', _SupportedExtensionAttributes_val_Type_9), ('id', 11)]), dict([('Type', _SupportedExtensionAttributes_val_Type_10), ('id', 12)]), dict([('Type', _SupportedExtensionAttributes_val_Type_11), ('id', 13)]), dict([('Type', _SupportedExtensionAttributes_val_Type_12), ('id', 14)]), dict([('Type', _SupportedExtensionAttributes_val_Type_13), ('id', 15)]), dict([('Type', _SupportedExtensionAttributes_val_Type_14), ('id', 16)]), dict([('Type', _SupportedExtensionAttributes_val_Type_15), ('id', 17)]), dict([('Type', _SupportedExtensionAttributes_val_Type_16), ('id', 18)]), dict([('Type', _SupportedExtensionAttributes_val_Type_17), ('id', 19)]), dict([('Type', _SupportedExtensionAttributes_val_Type_18), ('id', 20)]), dict([('Type', _SupportedExtensionAttributes_val_Type_19), ('id', 21)]), dict([('Type', _SupportedExtensionAttributes_val_Type_20), ('id', 22)]), dict([('Type', _SupportedExtensionAttributes_val_Type_21), ('id', 23)]), dict([('Type', _SupportedExtensionAttributes_val_Type_22), ('id', 6)])], rr=[], ev=[], er=[])
    
    #-----< ea-commonName >-----#
    ea_commonName = CLASS(name='ea-commonName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_commonName_val_Type = STR_PRINT(name='Type', mode=MODE_TYPE)
    _ea_commonName_val_Type._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    ea_commonName._val = dict([('Type', _ea_commonName_val_Type), ('id', 1)])
    
    #-----< ea-teletexCommonName >-----#
    ea_teletexCommonName = CLASS(name='ea-teletexCommonName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_teletexCommonName_val_Type = STR_TELE(name='Type', mode=MODE_TYPE)
    _ea_teletexCommonName_val_Type._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    ea_teletexCommonName._val = dict([('Type', _ea_teletexCommonName_val_Type), ('id', 2)])
    
    #-----< ea-teletexOrganizationName >-----#
    ea_teletexOrganizationName = CLASS(name='ea-teletexOrganizationName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_teletexOrganizationName_val_Type = STR_TELE(name='Type', mode=MODE_TYPE)
    _ea_teletexOrganizationName_val_Type._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    ea_teletexOrganizationName._val = dict([('Type', _ea_teletexOrganizationName_val_Type), ('id', 3)])
    
    #-----< ea-teletexPersonalName >-----#
    ea_teletexPersonalName = CLASS(name='ea-teletexPersonalName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_teletexPersonalName_val_Type = SET(name='Type', mode=MODE_TYPE)
    __ea_teletexPersonalName_val_Type_surname = STR_TELE(name='surname', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __ea_teletexPersonalName_val_Type_surname._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=40)], ev=None, er=[])
    __ea_teletexPersonalName_val_Type_given_name = STR_TELE(name='given-name', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ea_teletexPersonalName_val_Type_given_name._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    __ea_teletexPersonalName_val_Type_initials = STR_TELE(name='initials', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ea_teletexPersonalName_val_Type_initials._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=5)], ev=None, er=[])
    __ea_teletexPersonalName_val_Type_generation_qualifier = STR_TELE(name='generation-qualifier', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ea_teletexPersonalName_val_Type_generation_qualifier._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=3)], ev=None, er=[])
    _ea_teletexPersonalName_val_Type._cont = ASN1Dict([
        ('surname', __ea_teletexPersonalName_val_Type_surname),
        ('given-name', __ea_teletexPersonalName_val_Type_given_name),
        ('initials', __ea_teletexPersonalName_val_Type_initials),
        ('generation-qualifier', __ea_teletexPersonalName_val_Type_generation_qualifier),
        ])
    _ea_teletexPersonalName_val_Type._ext = None
    ea_teletexPersonalName._val = dict([('Type', _ea_teletexPersonalName_val_Type), ('id', 4)])
    
    #-----< ea-teletexOrganizationalUnitNames >-----#
    ea_teletexOrganizationalUnitNames = CLASS(name='ea-teletexOrganizationalUnitNames', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_teletexOrganizationalUnitNames_val_Type = SEQ_OF(name='Type', mode=MODE_TYPE)
    __ea_teletexOrganizationalUnitNames_val_Type__item_ = STR_TELE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'TeletexOrganizationalUnitName')))
    _ea_teletexOrganizationalUnitNames_val_Type._cont = __ea_teletexOrganizationalUnitNames_val_Type__item_
    _ea_teletexOrganizationalUnitNames_val_Type._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    ea_teletexOrganizationalUnitNames._val = dict([('Type', _ea_teletexOrganizationalUnitNames_val_Type), ('id', 5)])
    
    #-----< TeletexOrganizationalUnitName >-----#
    TeletexOrganizationalUnitName = STR_TELE(name='TeletexOrganizationalUnitName', mode=MODE_TYPE)
    TeletexOrganizationalUnitName._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< ea-pDSName >-----#
    ea_pDSName = CLASS(name='ea-pDSName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_pDSName_val_Type = STR_PRINT(name='Type', mode=MODE_TYPE)
    _ea_pDSName_val_Type._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    ea_pDSName._val = dict([('Type', _ea_pDSName_val_Type), ('id', 7)])
    
    #-----< ea-physicalDeliveryCountryName >-----#
    ea_physicalDeliveryCountryName = CLASS(name='ea-physicalDeliveryCountryName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_physicalDeliveryCountryName_val_Type = CHOICE(name='Type', mode=MODE_TYPE)
    __ea_physicalDeliveryCountryName_val_Type_x121_dcc_code = STR_NUM(name='x121-dcc-code', mode=MODE_TYPE)
    __ea_physicalDeliveryCountryName_val_Type_x121_dcc_code._const_sz = ASN1Set(rv=[3], rr=[], ev=None, er=[])
    __ea_physicalDeliveryCountryName_val_Type_iso_3166_alpha2_code = STR_PRINT(name='iso-3166-alpha2-code', mode=MODE_TYPE)
    __ea_physicalDeliveryCountryName_val_Type_iso_3166_alpha2_code._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _ea_physicalDeliveryCountryName_val_Type._cont = ASN1Dict([
        ('x121-dcc-code', __ea_physicalDeliveryCountryName_val_Type_x121_dcc_code),
        ('iso-3166-alpha2-code', __ea_physicalDeliveryCountryName_val_Type_iso_3166_alpha2_code),
        ])
    _ea_physicalDeliveryCountryName_val_Type._ext = None
    ea_physicalDeliveryCountryName._val = dict([('Type', _ea_physicalDeliveryCountryName_val_Type), ('id', 8)])
    
    #-----< ea-postalCode >-----#
    ea_postalCode = CLASS(name='ea-postalCode', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_postalCode_val_Type = CHOICE(name='Type', mode=MODE_TYPE)
    __ea_postalCode_val_Type_numeric_code = STR_NUM(name='numeric-code', mode=MODE_TYPE)
    __ea_postalCode_val_Type_numeric_code._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    __ea_postalCode_val_Type_printable_code = STR_PRINT(name='printable-code', mode=MODE_TYPE)
    __ea_postalCode_val_Type_printable_code._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    _ea_postalCode_val_Type._cont = ASN1Dict([
        ('numeric-code', __ea_postalCode_val_Type_numeric_code),
        ('printable-code', __ea_postalCode_val_Type_printable_code),
        ])
    _ea_postalCode_val_Type._ext = None
    ea_postalCode._val = dict([('Type', _ea_postalCode_val_Type), ('id', 9)])
    
    #-----< ea-physicalDeliveryOfficeName >-----#
    ea_physicalDeliveryOfficeName = CLASS(name='ea-physicalDeliveryOfficeName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_physicalDeliveryOfficeName_val_Type = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    ea_physicalDeliveryOfficeName._val = dict([('Type', _ea_physicalDeliveryOfficeName_val_Type), ('id', 10)])
    
    #-----< ea-physicalDeliveryOfficeNumber >-----#
    ea_physicalDeliveryOfficeNumber = CLASS(name='ea-physicalDeliveryOfficeNumber', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_physicalDeliveryOfficeNumber_val_Type = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    ea_physicalDeliveryOfficeNumber._val = dict([('Type', _ea_physicalDeliveryOfficeNumber_val_Type), ('id', 11)])
    
    #-----< ea-extensionORAddressComponents >-----#
    ea_extensionORAddressComponents = CLASS(name='ea-extensionORAddressComponents', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_extensionORAddressComponents_val_Type = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    ea_extensionORAddressComponents._val = dict([('Type', _ea_extensionORAddressComponents_val_Type), ('id', 12)])
    
    #-----< ea-physicalDeliveryPersonalName >-----#
    ea_physicalDeliveryPersonalName = CLASS(name='ea-physicalDeliveryPersonalName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_physicalDeliveryPersonalName_val_Type = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    ea_physicalDeliveryPersonalName._val = dict([('Type', _ea_physicalDeliveryPersonalName_val_Type), ('id', 13)])
    
    #-----< ea-physicalDeliveryOrganizationName >-----#
    ea_physicalDeliveryOrganizationName = CLASS(name='ea-physicalDeliveryOrganizationName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_physicalDeliveryOrganizationName_val_Type = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    ea_physicalDeliveryOrganizationName._val = dict([('Type', _ea_physicalDeliveryOrganizationName_val_Type), ('id', 14)])
    
    #-----< ea-extensionPhysicalDeliveryAddressComponents >-----#
    ea_extensionPhysicalDeliveryAddressComponents = CLASS(name='ea-extensionPhysicalDeliveryAddressComponents', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_extensionPhysicalDeliveryAddressComponents_val_Type = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    ea_extensionPhysicalDeliveryAddressComponents._val = dict([('Type', _ea_extensionPhysicalDeliveryAddressComponents_val_Type), ('id', 15)])
    
    #-----< ea-unformattedPostalAddress >-----#
    ea_unformattedPostalAddress = CLASS(name='ea-unformattedPostalAddress', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_unformattedPostalAddress_val_Type = SET(name='Type', mode=MODE_TYPE)
    __ea_unformattedPostalAddress_val_Type_printable_address = SEQ_OF(name='printable-address', mode=MODE_TYPE, opt=True)
    ___ea_unformattedPostalAddress_val_Type_printable_address__item_ = STR_PRINT(name='_item_', mode=MODE_TYPE)
    ___ea_unformattedPostalAddress_val_Type_printable_address__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=30)], ev=None, er=[])
    __ea_unformattedPostalAddress_val_Type_printable_address._cont = ___ea_unformattedPostalAddress_val_Type_printable_address__item_
    __ea_unformattedPostalAddress_val_Type_printable_address._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=6)], ev=None, er=[])
    __ea_unformattedPostalAddress_val_Type_teletex_string = STR_TELE(name='teletex-string', mode=MODE_TYPE, opt=True)
    __ea_unformattedPostalAddress_val_Type_teletex_string._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=180)], ev=None, er=[])
    _ea_unformattedPostalAddress_val_Type._cont = ASN1Dict([
        ('printable-address', __ea_unformattedPostalAddress_val_Type_printable_address),
        ('teletex-string', __ea_unformattedPostalAddress_val_Type_teletex_string),
        ])
    _ea_unformattedPostalAddress_val_Type._ext = None
    ea_unformattedPostalAddress._val = dict([('Type', _ea_unformattedPostalAddress_val_Type), ('id', 16)])
    
    #-----< ea-streetAddress >-----#
    ea_streetAddress = CLASS(name='ea-streetAddress', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_streetAddress_val_Type = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    ea_streetAddress._val = dict([('Type', _ea_streetAddress_val_Type), ('id', 17)])
    
    #-----< ea-postOfficeBoxAddress >-----#
    ea_postOfficeBoxAddress = CLASS(name='ea-postOfficeBoxAddress', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_postOfficeBoxAddress_val_Type = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    ea_postOfficeBoxAddress._val = dict([('Type', _ea_postOfficeBoxAddress_val_Type), ('id', 18)])
    
    #-----< ea-posteRestanteAddress >-----#
    ea_posteRestanteAddress = CLASS(name='ea-posteRestanteAddress', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_posteRestanteAddress_val_Type = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    ea_posteRestanteAddress._val = dict([('Type', _ea_posteRestanteAddress_val_Type), ('id', 19)])
    
    #-----< ea-uniquePostalName >-----#
    ea_uniquePostalName = CLASS(name='ea-uniquePostalName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_uniquePostalName_val_Type = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    ea_uniquePostalName._val = dict([('Type', _ea_uniquePostalName_val_Type), ('id', 20)])
    
    #-----< ea-localPostalAttributes >-----#
    ea_localPostalAttributes = CLASS(name='ea-localPostalAttributes', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_localPostalAttributes_val_Type = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'PDSParameter')))
    ea_localPostalAttributes._val = dict([('Type', _ea_localPostalAttributes_val_Type), ('id', 21)])
    
    #-----< PDSParameter >-----#
    PDSParameter = SET(name='PDSParameter', mode=MODE_TYPE)
    _PDSParameter_printable_string = STR_PRINT(name='printable-string', mode=MODE_TYPE, opt=True)
    _PDSParameter_printable_string._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=30)], ev=None, er=[])
    _PDSParameter_teletex_string = STR_TELE(name='teletex-string', mode=MODE_TYPE, opt=True)
    _PDSParameter_teletex_string._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=30)], ev=None, er=[])
    PDSParameter._cont = ASN1Dict([
        ('printable-string', _PDSParameter_printable_string),
        ('teletex-string', _PDSParameter_teletex_string),
        ])
    PDSParameter._ext = None
    
    #-----< ea-extendedNetworkAddress >-----#
    ea_extendedNetworkAddress = CLASS(name='ea-extendedNetworkAddress', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_extendedNetworkAddress_val_Type = CHOICE(name='Type', mode=MODE_TYPE)
    __ea_extendedNetworkAddress_val_Type_e163_4_address = SEQ(name='e163-4-address', mode=MODE_TYPE)
    ___ea_extendedNetworkAddress_val_Type_e163_4_address_number = STR_NUM(name='number', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___ea_extendedNetworkAddress_val_Type_e163_4_address_number._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=15)], ev=None, er=[])
    ___ea_extendedNetworkAddress_val_Type_e163_4_address_sub_address = STR_NUM(name='sub-address', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    ___ea_extendedNetworkAddress_val_Type_e163_4_address_sub_address._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=40)], ev=None, er=[])
    __ea_extendedNetworkAddress_val_Type_e163_4_address._cont = ASN1Dict([
        ('number', ___ea_extendedNetworkAddress_val_Type_e163_4_address_number),
        ('sub-address', ___ea_extendedNetworkAddress_val_Type_e163_4_address_sub_address),
        ])
    __ea_extendedNetworkAddress_val_Type_e163_4_address._ext = None
    __ea_extendedNetworkAddress_val_Type_psap_address = SEQ(name='psap-address', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX-X400Address-2009', 'PresentationAddress')))
    _ea_extendedNetworkAddress_val_Type._cont = ASN1Dict([
        ('e163-4-address', __ea_extendedNetworkAddress_val_Type_e163_4_address),
        ('psap-address', __ea_extendedNetworkAddress_val_Type_psap_address),
        ])
    _ea_extendedNetworkAddress_val_Type._ext = None
    ea_extendedNetworkAddress._val = dict([('Type', _ea_extendedNetworkAddress_val_Type), ('id', 22)])
    
    #-----< PresentationAddress >-----#
    PresentationAddress = SEQ(name='PresentationAddress', mode=MODE_TYPE)
    _PresentationAddress_pSelector = OCT_STR(name='pSelector', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), opt=True)
    _PresentationAddress_sSelector = OCT_STR(name='sSelector', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), opt=True)
    _PresentationAddress_tSelector = OCT_STR(name='tSelector', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), opt=True)
    _PresentationAddress_nAddresses = SET_OF(name='nAddresses', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __PresentationAddress_nAddresses__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _PresentationAddress_nAddresses._cont = __PresentationAddress_nAddresses__item_
    _PresentationAddress_nAddresses._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    PresentationAddress._cont = ASN1Dict([
        ('pSelector', _PresentationAddress_pSelector),
        ('sSelector', _PresentationAddress_sSelector),
        ('tSelector', _PresentationAddress_tSelector),
        ('nAddresses', _PresentationAddress_nAddresses),
        ])
    PresentationAddress._ext = None
    
    #-----< ea-terminalType >-----#
    ea_terminalType = CLASS(name='ea-terminalType', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_terminalType_val_Type = INT(name='Type', mode=MODE_TYPE)
    _ea_terminalType_val_Type._cont = ASN1Dict([('telex', 3), ('teletex', 4), ('g3-facsimile', 5), ('g4-facsimile', 6), ('ia5-terminal', 7), ('videotex', 8)])
    _ea_terminalType_val_Type._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=256)], ev=None, er=[])
    ea_terminalType._val = dict([('Type', _ea_terminalType_val_Type), ('id', 23)])
    
    #-----< ea-teletexDomainDefinedAttributes >-----#
    ea_teletexDomainDefinedAttributes = CLASS(name='ea-teletexDomainDefinedAttributes', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'EXTENSION-ATTRIBUTE')))
    _ea_teletexDomainDefinedAttributes_val_Type = SEQ_OF(name='Type', mode=MODE_TYPE)
    __ea_teletexDomainDefinedAttributes_val_Type__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-X400Address-2009', 'TeletexDomainDefinedAttribute')))
    _ea_teletexDomainDefinedAttributes_val_Type._cont = __ea_teletexDomainDefinedAttributes_val_Type__item_
    _ea_teletexDomainDefinedAttributes_val_Type._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    ea_teletexDomainDefinedAttributes._val = dict([('Type', _ea_teletexDomainDefinedAttributes_val_Type), ('id', 6)])
    
    #-----< TeletexDomainDefinedAttribute >-----#
    TeletexDomainDefinedAttribute = SEQ(name='TeletexDomainDefinedAttribute', mode=MODE_TYPE)
    _TeletexDomainDefinedAttribute_type = STR_TELE(name='type', mode=MODE_TYPE)
    _TeletexDomainDefinedAttribute_type._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    _TeletexDomainDefinedAttribute_value = STR_TELE(name='value', mode=MODE_TYPE)
    _TeletexDomainDefinedAttribute_value._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    TeletexDomainDefinedAttribute._cont = ASN1Dict([
        ('type', _TeletexDomainDefinedAttribute_type),
        ('value', _TeletexDomainDefinedAttribute_value),
        ])
    TeletexDomainDefinedAttribute._ext = None
    
    #-----< ub-match >-----#
    ub_match = INT(name='ub-match', mode=MODE_VALUE)
    ub_match._val = 128
    
    #-----< ub-common-name-length >-----#
    ub_common_name_length = INT(name='ub-common-name-length', mode=MODE_VALUE)
    ub_common_name_length._val = 64
    
    #-----< ub-country-name-alpha-length >-----#
    ub_country_name_alpha_length = INT(name='ub-country-name-alpha-length', mode=MODE_VALUE)
    ub_country_name_alpha_length._val = 2
    
    #-----< ub-country-name-numeric-length >-----#
    ub_country_name_numeric_length = INT(name='ub-country-name-numeric-length', mode=MODE_VALUE)
    ub_country_name_numeric_length._val = 3
    
    #-----< ub-domain-defined-attributes >-----#
    ub_domain_defined_attributes = INT(name='ub-domain-defined-attributes', mode=MODE_VALUE)
    ub_domain_defined_attributes._val = 4
    
    #-----< ub-domain-defined-attribute-type-length >-----#
    ub_domain_defined_attribute_type_length = INT(name='ub-domain-defined-attribute-type-length', mode=MODE_VALUE)
    ub_domain_defined_attribute_type_length._val = 8
    
    #-----< ub-domain-defined-attribute-value-length >-----#
    ub_domain_defined_attribute_value_length = INT(name='ub-domain-defined-attribute-value-length', mode=MODE_VALUE)
    ub_domain_defined_attribute_value_length._val = 128
    
    #-----< ub-domain-name-length >-----#
    ub_domain_name_length = INT(name='ub-domain-name-length', mode=MODE_VALUE)
    ub_domain_name_length._val = 16
    
    #-----< ub-extension-attributes >-----#
    ub_extension_attributes = INT(name='ub-extension-attributes', mode=MODE_VALUE)
    ub_extension_attributes._val = 256
    
    #-----< ub-e163-4-number-length >-----#
    ub_e163_4_number_length = INT(name='ub-e163-4-number-length', mode=MODE_VALUE)
    ub_e163_4_number_length._val = 15
    
    #-----< ub-e163-4-sub-address-length >-----#
    ub_e163_4_sub_address_length = INT(name='ub-e163-4-sub-address-length', mode=MODE_VALUE)
    ub_e163_4_sub_address_length._val = 40
    
    #-----< ub-generation-qualifier-length >-----#
    ub_generation_qualifier_length = INT(name='ub-generation-qualifier-length', mode=MODE_VALUE)
    ub_generation_qualifier_length._val = 3
    
    #-----< ub-given-name-length >-----#
    ub_given_name_length = INT(name='ub-given-name-length', mode=MODE_VALUE)
    ub_given_name_length._val = 16
    
    #-----< ub-initials-length >-----#
    ub_initials_length = INT(name='ub-initials-length', mode=MODE_VALUE)
    ub_initials_length._val = 5
    
    #-----< ub-integer-options >-----#
    ub_integer_options = INT(name='ub-integer-options', mode=MODE_VALUE)
    ub_integer_options._val = 256
    
    #-----< ub-numeric-user-id-length >-----#
    ub_numeric_user_id_length = INT(name='ub-numeric-user-id-length', mode=MODE_VALUE)
    ub_numeric_user_id_length._val = 32
    
    #-----< ub-organization-name-length >-----#
    ub_organization_name_length = INT(name='ub-organization-name-length', mode=MODE_VALUE)
    ub_organization_name_length._val = 64
    
    #-----< ub-organizational-unit-name-length >-----#
    ub_organizational_unit_name_length = INT(name='ub-organizational-unit-name-length', mode=MODE_VALUE)
    ub_organizational_unit_name_length._val = 32
    
    #-----< ub-organizational-units >-----#
    ub_organizational_units = INT(name='ub-organizational-units', mode=MODE_VALUE)
    ub_organizational_units._val = 4
    
    #-----< ub-pds-name-length >-----#
    ub_pds_name_length = INT(name='ub-pds-name-length', mode=MODE_VALUE)
    ub_pds_name_length._val = 16
    
    #-----< ub-pds-parameter-length >-----#
    ub_pds_parameter_length = INT(name='ub-pds-parameter-length', mode=MODE_VALUE)
    ub_pds_parameter_length._val = 30
    
    #-----< ub-pds-physical-address-lines >-----#
    ub_pds_physical_address_lines = INT(name='ub-pds-physical-address-lines', mode=MODE_VALUE)
    ub_pds_physical_address_lines._val = 6
    
    #-----< ub-postal-code-length >-----#
    ub_postal_code_length = INT(name='ub-postal-code-length', mode=MODE_VALUE)
    ub_postal_code_length._val = 16
    
    #-----< ub-surname-length >-----#
    ub_surname_length = INT(name='ub-surname-length', mode=MODE_VALUE)
    ub_surname_length._val = 40
    
    #-----< ub-terminal-id-length >-----#
    ub_terminal_id_length = INT(name='ub-terminal-id-length', mode=MODE_VALUE)
    ub_terminal_id_length._val = 24
    
    #-----< ub-unformatted-address-length >-----#
    ub_unformatted_address_length = INT(name='ub-unformatted-address-length', mode=MODE_VALUE)
    ub_unformatted_address_length._val = 180
    
    #-----< ub-x121-address-length >-----#
    ub_x121_address_length = INT(name='ub-x121-address-length', mode=MODE_VALUE)
    ub_x121_address_length._val = 16
    
    _all_ = [
        _ORAddress_built_in_standard_attributes,
        _ORAddress_built_in_domain_defined_attributes,
        _ORAddress_extension_attributes,
        ORAddress,
        _BuiltInStandardAttributes_country_name,
        _BuiltInStandardAttributes_administration_domain_name,
        _BuiltInStandardAttributes_network_address,
        _BuiltInStandardAttributes_terminal_identifier,
        _BuiltInStandardAttributes_private_domain_name,
        _BuiltInStandardAttributes_organization_name,
        _BuiltInStandardAttributes_numeric_user_identifier,
        _BuiltInStandardAttributes_personal_name,
        _BuiltInStandardAttributes_organizational_unit_names,
        BuiltInStandardAttributes,
        _CountryName_x121_dcc_code,
        _CountryName_iso_3166_alpha2_code,
        CountryName,
        _AdministrationDomainName_numeric,
        _AdministrationDomainName_printable,
        AdministrationDomainName,
        NetworkAddress,
        X121Address,
        TerminalIdentifier,
        _PrivateDomainName_numeric,
        _PrivateDomainName_printable,
        PrivateDomainName,
        OrganizationName,
        NumericUserIdentifier,
        _PersonalName_surname,
        _PersonalName_given_name,
        _PersonalName_initials,
        _PersonalName_generation_qualifier,
        PersonalName,
        _OrganizationalUnitNames__item_,
        OrganizationalUnitNames,
        OrganizationalUnitName,
        _BuiltInDomainDefinedAttributes__item_,
        BuiltInDomainDefinedAttributes,
        _BuiltInDomainDefinedAttribute_type,
        _BuiltInDomainDefinedAttribute_value,
        BuiltInDomainDefinedAttribute,
        _ExtensionAttributes__item_,
        ExtensionAttributes,
        _EXTENSION_ATTRIBUTE_id,
        _EXTENSION_ATTRIBUTE_Type,
        EXTENSION_ATTRIBUTE,
        __ExtensionAttribute_extension_attribute_type_tab,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_0,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_1,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_2,
        ____ExtensionAttribute_extension_attribute_type_tab_val_Type_3_surname,
        ____ExtensionAttribute_extension_attribute_type_tab_val_Type_3_given_name,
        ____ExtensionAttribute_extension_attribute_type_tab_val_Type_3_initials,
        ____ExtensionAttribute_extension_attribute_type_tab_val_Type_3_generation_qualifier,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_3,
        ____ExtensionAttribute_extension_attribute_type_tab_val_Type_4__item_,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_4,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_5,
        ____ExtensionAttribute_extension_attribute_type_tab_val_Type_6_x121_dcc_code,
        ____ExtensionAttribute_extension_attribute_type_tab_val_Type_6_iso_3166_alpha2_code,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_6,
        ____ExtensionAttribute_extension_attribute_type_tab_val_Type_7_numeric_code,
        ____ExtensionAttribute_extension_attribute_type_tab_val_Type_7_printable_code,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_7,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_8,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_9,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_10,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_11,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_12,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_13,
        _____ExtensionAttribute_extension_attribute_type_tab_val_Type_14_printable_address__item_,
        ____ExtensionAttribute_extension_attribute_type_tab_val_Type_14_printable_address,
        ____ExtensionAttribute_extension_attribute_type_tab_val_Type_14_teletex_string,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_14,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_15,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_16,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_17,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_18,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_19,
        _____ExtensionAttribute_extension_attribute_type_tab_val_Type_20_e163_4_address_number,
        _____ExtensionAttribute_extension_attribute_type_tab_val_Type_20_e163_4_address_sub_address,
        ____ExtensionAttribute_extension_attribute_type_tab_val_Type_20_e163_4_address,
        ____ExtensionAttribute_extension_attribute_type_tab_val_Type_20_psap_address,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_20,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_21,
        ____ExtensionAttribute_extension_attribute_type_tab_val_Type_22__item_,
        ___ExtensionAttribute_extension_attribute_type_tab_val_Type_22,
        _ExtensionAttribute_extension_attribute_type,
        _ExtensionAttribute_extension_attribute_value,
        ExtensionAttribute,
        SupportedExtensionAttributes,
        _SupportedExtensionAttributes_val_Type_0,
        _SupportedExtensionAttributes_val_Type_1,
        _SupportedExtensionAttributes_val_Type_2,
        __SupportedExtensionAttributes_val_Type_3_surname,
        __SupportedExtensionAttributes_val_Type_3_given_name,
        __SupportedExtensionAttributes_val_Type_3_initials,
        __SupportedExtensionAttributes_val_Type_3_generation_qualifier,
        _SupportedExtensionAttributes_val_Type_3,
        __SupportedExtensionAttributes_val_Type_4__item_,
        _SupportedExtensionAttributes_val_Type_4,
        _SupportedExtensionAttributes_val_Type_5,
        __SupportedExtensionAttributes_val_Type_6_x121_dcc_code,
        __SupportedExtensionAttributes_val_Type_6_iso_3166_alpha2_code,
        _SupportedExtensionAttributes_val_Type_6,
        __SupportedExtensionAttributes_val_Type_7_numeric_code,
        __SupportedExtensionAttributes_val_Type_7_printable_code,
        _SupportedExtensionAttributes_val_Type_7,
        _SupportedExtensionAttributes_val_Type_8,
        _SupportedExtensionAttributes_val_Type_9,
        _SupportedExtensionAttributes_val_Type_10,
        _SupportedExtensionAttributes_val_Type_11,
        _SupportedExtensionAttributes_val_Type_12,
        _SupportedExtensionAttributes_val_Type_13,
        ___SupportedExtensionAttributes_val_Type_14_printable_address__item_,
        __SupportedExtensionAttributes_val_Type_14_printable_address,
        __SupportedExtensionAttributes_val_Type_14_teletex_string,
        _SupportedExtensionAttributes_val_Type_14,
        _SupportedExtensionAttributes_val_Type_15,
        _SupportedExtensionAttributes_val_Type_16,
        _SupportedExtensionAttributes_val_Type_17,
        _SupportedExtensionAttributes_val_Type_18,
        _SupportedExtensionAttributes_val_Type_19,
        ___SupportedExtensionAttributes_val_Type_20_e163_4_address_number,
        ___SupportedExtensionAttributes_val_Type_20_e163_4_address_sub_address,
        __SupportedExtensionAttributes_val_Type_20_e163_4_address,
        __SupportedExtensionAttributes_val_Type_20_psap_address,
        _SupportedExtensionAttributes_val_Type_20,
        _SupportedExtensionAttributes_val_Type_21,
        __SupportedExtensionAttributes_val_Type_22__item_,
        _SupportedExtensionAttributes_val_Type_22,
        ea_commonName,
        _ea_commonName_val_Type,
        ea_teletexCommonName,
        _ea_teletexCommonName_val_Type,
        ea_teletexOrganizationName,
        _ea_teletexOrganizationName_val_Type,
        ea_teletexPersonalName,
        __ea_teletexPersonalName_val_Type_surname,
        __ea_teletexPersonalName_val_Type_given_name,
        __ea_teletexPersonalName_val_Type_initials,
        __ea_teletexPersonalName_val_Type_generation_qualifier,
        _ea_teletexPersonalName_val_Type,
        ea_teletexOrganizationalUnitNames,
        __ea_teletexOrganizationalUnitNames_val_Type__item_,
        _ea_teletexOrganizationalUnitNames_val_Type,
        TeletexOrganizationalUnitName,
        ea_pDSName,
        _ea_pDSName_val_Type,
        ea_physicalDeliveryCountryName,
        __ea_physicalDeliveryCountryName_val_Type_x121_dcc_code,
        __ea_physicalDeliveryCountryName_val_Type_iso_3166_alpha2_code,
        _ea_physicalDeliveryCountryName_val_Type,
        ea_postalCode,
        __ea_postalCode_val_Type_numeric_code,
        __ea_postalCode_val_Type_printable_code,
        _ea_postalCode_val_Type,
        ea_physicalDeliveryOfficeName,
        _ea_physicalDeliveryOfficeName_val_Type,
        ea_physicalDeliveryOfficeNumber,
        _ea_physicalDeliveryOfficeNumber_val_Type,
        ea_extensionORAddressComponents,
        _ea_extensionORAddressComponents_val_Type,
        ea_physicalDeliveryPersonalName,
        _ea_physicalDeliveryPersonalName_val_Type,
        ea_physicalDeliveryOrganizationName,
        _ea_physicalDeliveryOrganizationName_val_Type,
        ea_extensionPhysicalDeliveryAddressComponents,
        _ea_extensionPhysicalDeliveryAddressComponents_val_Type,
        ea_unformattedPostalAddress,
        ___ea_unformattedPostalAddress_val_Type_printable_address__item_,
        __ea_unformattedPostalAddress_val_Type_printable_address,
        __ea_unformattedPostalAddress_val_Type_teletex_string,
        _ea_unformattedPostalAddress_val_Type,
        ea_streetAddress,
        _ea_streetAddress_val_Type,
        ea_postOfficeBoxAddress,
        _ea_postOfficeBoxAddress_val_Type,
        ea_posteRestanteAddress,
        _ea_posteRestanteAddress_val_Type,
        ea_uniquePostalName,
        _ea_uniquePostalName_val_Type,
        ea_localPostalAttributes,
        _ea_localPostalAttributes_val_Type,
        _PDSParameter_printable_string,
        _PDSParameter_teletex_string,
        PDSParameter,
        ea_extendedNetworkAddress,
        ___ea_extendedNetworkAddress_val_Type_e163_4_address_number,
        ___ea_extendedNetworkAddress_val_Type_e163_4_address_sub_address,
        __ea_extendedNetworkAddress_val_Type_e163_4_address,
        __ea_extendedNetworkAddress_val_Type_psap_address,
        _ea_extendedNetworkAddress_val_Type,
        _PresentationAddress_pSelector,
        _PresentationAddress_sSelector,
        _PresentationAddress_tSelector,
        __PresentationAddress_nAddresses__item_,
        _PresentationAddress_nAddresses,
        PresentationAddress,
        ea_terminalType,
        _ea_terminalType_val_Type,
        ea_teletexDomainDefinedAttributes,
        __ea_teletexDomainDefinedAttributes_val_Type__item_,
        _ea_teletexDomainDefinedAttributes_val_Type,
        _TeletexDomainDefinedAttribute_type,
        _TeletexDomainDefinedAttribute_value,
        TeletexDomainDefinedAttribute,
        ub_match,
        ub_common_name_length,
        ub_country_name_alpha_length,
        ub_country_name_numeric_length,
        ub_domain_defined_attributes,
        ub_domain_defined_attribute_type_length,
        ub_domain_defined_attribute_value_length,
        ub_domain_name_length,
        ub_extension_attributes,
        ub_e163_4_number_length,
        ub_e163_4_sub_address_length,
        ub_generation_qualifier_length,
        ub_given_name_length,
        ub_initials_length,
        ub_integer_options,
        ub_numeric_user_id_length,
        ub_organization_name_length,
        ub_organizational_unit_name_length,
        ub_organizational_units,
        ub_pds_name_length,
        ub_pds_parameter_length,
        ub_pds_physical_address_lines,
        ub_postal_code_length,
        ub_surname_length,
        ub_terminal_id_length,
        ub_unformatted_address_length,
        ub_x121_address_length,
    ]

class PKIXAlgs_2009:

    _name_  = 'PKIXAlgs-2009'
    _oid_   = [1, 3, 6, 1, 5, 5, 7, 0, 56]
    
    _obj_ = [
        'PublicKeys',
        'SignatureAlgs',
        'SMimeCaps',
        'pk-rsa',
        'rsaEncryption',
        'RSAPublicKey',
        'pk-dsa',
        'id-dsa',
        'DSA-Params',
        'DSAPublicKey',
        'pk-dh',
        'dhpublicnumber',
        'DomainParameters',
        'ValidationParams',
        'DHPublicKey',
        'pk-kea',
        'id-keyExchangeAlgorithm',
        'KEA-Params-Id',
        'pk-ec',
        'ECPoint',
        'id-ecPublicKey',
        'pk-ecDH',
        'id-ecDH',
        'pk-ecMQV',
        'id-ecMQV',
        'ECParameters',
        'CURVE',
        'NamedCurve',
        'secp192r1',
        'sect163k1',
        'sect163r2',
        'secp224r1',
        'sect233k1',
        'sect233r1',
        'secp256r1',
        'sect283k1',
        'sect283r1',
        'secp384r1',
        'sect409k1',
        'sect409r1',
        'secp521r1',
        'sect571k1',
        'sect571r1',
        'sa-rsaWithMD2',
        'md2WithRSAEncryption',
        'sa-rsaWithMD5',
        'md5WithRSAEncryption',
        'sa-rsaWithSHA1',
        'sha1WithRSAEncryption',
        'sa-dsaWithSHA1',
        'dsa-with-sha1',
        'sa-dsaWithSHA224',
        'dsa-with-sha224',
        'sa-dsaWithSHA256',
        'dsa-with-sha256',
        'sa-ecdsaWithSHA1',
        'ecdsa-with-SHA1',
        'sa-ecdsaWithSHA224',
        'ecdsa-with-SHA224',
        'sa-ecdsaWithSHA256',
        'ecdsa-with-SHA256',
        'sa-ecdsaWithSHA384',
        'ecdsa-with-SHA384',
        'sa-ecdsaWithSHA512',
        'ecdsa-with-SHA512',
        'DSA-Sig-Value',
        'ECDSA-Sig-Value',
        'HashAlgs',
        'mda-md2',
        'id-md2',
        'mda-md5',
        'id-md5',
        'mda-sha1',
        'id-sha1',
        ]
    _type_ = [
        'RSAPublicKey',
        'DSA-Params',
        'DSAPublicKey',
        'DomainParameters',
        'ValidationParams',
        'DHPublicKey',
        'KEA-Params-Id',
        'ECPoint',
        'ECParameters',
        'CURVE',
        'DSA-Sig-Value',
        'ECDSA-Sig-Value',
        ]
    _set_ = [
        'PublicKeys',
        'SignatureAlgs',
        'SMimeCaps',
        'NamedCurve',
        'HashAlgs',
        ]
    _val_ = [
        'pk-rsa',
        'rsaEncryption',
        'pk-dsa',
        'id-dsa',
        'pk-dh',
        'dhpublicnumber',
        'pk-kea',
        'id-keyExchangeAlgorithm',
        'pk-ec',
        'id-ecPublicKey',
        'pk-ecDH',
        'id-ecDH',
        'pk-ecMQV',
        'id-ecMQV',
        'secp192r1',
        'sect163k1',
        'sect163r2',
        'secp224r1',
        'sect233k1',
        'sect233r1',
        'secp256r1',
        'sect283k1',
        'sect283r1',
        'secp384r1',
        'sect409k1',
        'sect409r1',
        'secp521r1',
        'sect571k1',
        'sect571r1',
        'sa-rsaWithMD2',
        'md2WithRSAEncryption',
        'sa-rsaWithMD5',
        'md5WithRSAEncryption',
        'sa-rsaWithSHA1',
        'sha1WithRSAEncryption',
        'sa-dsaWithSHA1',
        'dsa-with-sha1',
        'sa-dsaWithSHA224',
        'dsa-with-sha224',
        'sa-dsaWithSHA256',
        'dsa-with-sha256',
        'sa-ecdsaWithSHA1',
        'ecdsa-with-SHA1',
        'sa-ecdsaWithSHA224',
        'ecdsa-with-SHA224',
        'sa-ecdsaWithSHA256',
        'ecdsa-with-SHA256',
        'sa-ecdsaWithSHA384',
        'ecdsa-with-SHA384',
        'sa-ecdsaWithSHA512',
        'ecdsa-with-SHA512',
        'mda-md2',
        'id-md2',
        'mda-md5',
        'id-md5',
        'mda-sha1',
        'id-sha1',
        ]
    _class_ = [
        'PublicKeys',
        'SignatureAlgs',
        'SMimeCaps',
        'pk-rsa',
        'pk-dsa',
        'pk-dh',
        'pk-kea',
        'pk-ec',
        'pk-ecDH',
        'pk-ecMQV',
        'CURVE',
        'NamedCurve',
        'sa-rsaWithMD2',
        'sa-rsaWithMD5',
        'sa-rsaWithSHA1',
        'sa-dsaWithSHA1',
        'sa-dsaWithSHA224',
        'sa-dsaWithSHA256',
        'sa-ecdsaWithSHA1',
        'sa-ecdsaWithSHA224',
        'sa-ecdsaWithSHA256',
        'sa-ecdsaWithSHA384',
        'sa-ecdsaWithSHA512',
        'HashAlgs',
        'mda-md2',
        'mda-md5',
        'mda-sha1',
        ]
    _param_ = [
        ]
    
    #-----< PublicKeys >-----#
    PublicKeys = CLASS(name='PublicKeys', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')))
    _PublicKeys_val_KeyValue_0 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    _PublicKeys_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _PublicKeys_val_KeyValue_1 = INT(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSAPublicKey')))
    _PublicKeys_val_Params_1 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Params')))
    _PublicKeys_val_KeyValue_2 = INT(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DHPublicKey')))
    _PublicKeys_val_Params_2 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DomainParameters')))
    _PublicKeys_val_Params_3 = OCT_STR(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'KEA-Params-Id')))
    _PublicKeys_val_KeyValue_4 = OCT_STR(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECPoint')))
    _PublicKeys_val_Params_4 = CHOICE(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECParameters')))
    _PublicKeys_val_KeyValue_5 = OCT_STR(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECPoint')))
    _PublicKeys_val_Params_5 = CHOICE(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECParameters')))
    _PublicKeys_val_KeyValue_6 = OCT_STR(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECPoint')))
    _PublicKeys_val_Params_6 = CHOICE(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECParameters')))
    PublicKeys._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _PublicKeys_val_KeyValue_0), ('Params', _PublicKeys_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))]), dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _PublicKeys_val_KeyValue_1), ('Params', _PublicKeys_val_Params_1), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))]), dict([('id', (1, 2, 840, 10046, 2, 1)), ('KeyValue', _PublicKeys_val_KeyValue_2), ('Params', _PublicKeys_val_Params_2), ('paramPresence', 'inheritable'), ('keyUsage', (19, 9))]), dict([('id', (2, 16, 840, 1, 101, 2, 1, 1, 22)), ('Params', _PublicKeys_val_Params_3), ('paramPresence', 'required'), ('keyUsage', (19, 9))])], rr=[], ev=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _PublicKeys_val_KeyValue_4), ('Params', _PublicKeys_val_Params_4), ('paramPresence', 'required'), ('keyUsage', (103, 7))]), dict([('id', (1, 3, 132, 1, 12)), ('KeyValue', _PublicKeys_val_KeyValue_5), ('Params', _PublicKeys_val_Params_5), ('paramPresence', 'required'), ('keyUsage', (19, 9))]), dict([('id', (1, 3, 132, 1, 13)), ('KeyValue', _PublicKeys_val_KeyValue_6), ('Params', _PublicKeys_val_Params_6), ('paramPresence', 'required'), ('keyUsage', (19, 9))])], er=[])
    
    #-----< SignatureAlgs >-----#
    SignatureAlgs = CLASS(name='SignatureAlgs', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    _SignatureAlgs_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _SignatureAlgs_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    _SignatureAlgs_val_Params_2 = NULL(name='Params', mode=MODE_TYPE)
    _SignatureAlgs_val_Value_3 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    _SignatureAlgs_val_Params_3 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0 = INT(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSAPublicKey')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Params')))
    _SignatureAlgs_val_Value_4 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    _SignatureAlgs_val_Params_4 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1 = OCT_STR(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECPoint')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1 = CHOICE(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECParameters')))
    _SignatureAlgs_val_Value_5 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    _SignatureAlgs_val_Params_5 = NULL(name='Params', mode=MODE_TYPE)
    _SignatureAlgs_val_Value_6 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    _SignatureAlgs_val_Params_6 = NULL(name='Params', mode=MODE_TYPE)
    _SignatureAlgs_val_Value_7 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    _SignatureAlgs_val_Params_7 = NULL(name='Params', mode=MODE_TYPE)
    _SignatureAlgs_val_Value_8 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    _SignatureAlgs_val_Params_8 = NULL(name='Params', mode=MODE_TYPE)
    _SignatureAlgs_val_Value_9 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    _SignatureAlgs_val_Params_9 = NULL(name='Params', mode=MODE_TYPE)
    _SignatureAlgs_val_Value_10 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    _SignatureAlgs_val_Params_10 = NULL(name='Params', mode=MODE_TYPE)
    SignatureAlgs._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 2)), ('Params', _SignatureAlgs_val_Params_0), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 2))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 4)), ('Params', _SignatureAlgs_val_Params_1), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 5)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 5)), ('Params', _SignatureAlgs_val_Params_2), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 5))]))]), dict([('id', (1, 2, 840, 10040, 4, 3)), ('Value', _SignatureAlgs_val_Value_3), ('Params', _SignatureAlgs_val_Params_3), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10040, 4, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 1)), ('Value', _SignatureAlgs_val_Value_4), ('Params', _SignatureAlgs_val_Params_4), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 1))]))])], rr=[], ev=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1)), ('Value', _SignatureAlgs_val_Value_5), ('Params', _SignatureAlgs_val_Params_5), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1))]))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2)), ('Value', _SignatureAlgs_val_Value_6), ('Params', _SignatureAlgs_val_Params_6), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 1)), ('Value', _SignatureAlgs_val_Value_7), ('Params', _SignatureAlgs_val_Params_7), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 1))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 2)), ('Value', _SignatureAlgs_val_Value_8), ('Params', _SignatureAlgs_val_Params_8), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 3)), ('Value', _SignatureAlgs_val_Value_9), ('Params', _SignatureAlgs_val_Params_9), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 4)), ('Value', _SignatureAlgs_val_Value_10), ('Params', _SignatureAlgs_val_Params_10), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 4))]))])], er=[])
    
    #-----< SMimeCaps >-----#
    SMimeCaps = CLASS(name='SMimeCaps', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')))
    SMimeCaps._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 2))]), dict([('id', (1, 2, 840, 113549, 1, 1, 4))]), dict([('id', (1, 2, 840, 113549, 1, 1, 5))]), dict([('id', (1, 2, 840, 10040, 4, 3))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2))]), dict([('id', (1, 2, 840, 10045, 4, 1))]), dict([('id', (1, 2, 840, 10045, 4, 3, 1))]), dict([('id', (1, 2, 840, 10045, 4, 3, 2))]), dict([('id', (1, 2, 840, 10045, 4, 3, 3))]), dict([('id', (1, 2, 840, 10045, 4, 3, 4))])], rr=[], ev=[], er=[])
    
    #-----< pk-rsa >-----#
    pk_rsa = CLASS(name='pk-rsa', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')))
    _pk_rsa_val_KeyValue = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    _pk_rsa_val_Params = NULL(name='Params', mode=MODE_TYPE)
    pk_rsa._val = dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _pk_rsa_val_KeyValue), ('Params', _pk_rsa_val_Params), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])
    
    #-----< rsaEncryption >-----#
    rsaEncryption = OID(name='rsaEncryption', mode=MODE_VALUE)
    rsaEncryption._val = (1, 2, 840, 113549, 1, 1, 1)
    
    #-----< RSAPublicKey >-----#
    RSAPublicKey = SEQ(name='RSAPublicKey', mode=MODE_TYPE)
    _RSAPublicKey_modulus = INT(name='modulus', mode=MODE_TYPE)
    _RSAPublicKey_publicExponent = INT(name='publicExponent', mode=MODE_TYPE)
    RSAPublicKey._cont = ASN1Dict([
        ('modulus', _RSAPublicKey_modulus),
        ('publicExponent', _RSAPublicKey_publicExponent),
        ])
    RSAPublicKey._ext = None
    
    #-----< pk-dsa >-----#
    pk_dsa = CLASS(name='pk-dsa', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')))
    _pk_dsa_val_KeyValue = INT(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSAPublicKey')))
    _pk_dsa_val_Params = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Params')))
    pk_dsa._val = dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _pk_dsa_val_KeyValue), ('Params', _pk_dsa_val_Params), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])
    
    #-----< id-dsa >-----#
    id_dsa = OID(name='id-dsa', mode=MODE_VALUE)
    id_dsa._val = (1, 2, 840, 10040, 4, 1)
    
    #-----< DSA-Params >-----#
    DSA_Params = SEQ(name='DSA-Params', mode=MODE_TYPE)
    _DSA_Params_p = INT(name='p', mode=MODE_TYPE)
    _DSA_Params_q = INT(name='q', mode=MODE_TYPE)
    _DSA_Params_g = INT(name='g', mode=MODE_TYPE)
    DSA_Params._cont = ASN1Dict([
        ('p', _DSA_Params_p),
        ('q', _DSA_Params_q),
        ('g', _DSA_Params_g),
        ])
    DSA_Params._ext = None
    
    #-----< DSAPublicKey >-----#
    DSAPublicKey = INT(name='DSAPublicKey', mode=MODE_TYPE)
    
    #-----< pk-dh >-----#
    pk_dh = CLASS(name='pk-dh', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')))
    _pk_dh_val_KeyValue = INT(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DHPublicKey')))
    _pk_dh_val_Params = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DomainParameters')))
    pk_dh._val = dict([('id', (1, 2, 840, 10046, 2, 1)), ('KeyValue', _pk_dh_val_KeyValue), ('Params', _pk_dh_val_Params), ('paramPresence', 'inheritable'), ('keyUsage', (19, 9))])
    
    #-----< dhpublicnumber >-----#
    dhpublicnumber = OID(name='dhpublicnumber', mode=MODE_VALUE)
    dhpublicnumber._val = (1, 2, 840, 10046, 2, 1)
    
    #-----< DomainParameters >-----#
    DomainParameters = SEQ(name='DomainParameters', mode=MODE_TYPE)
    _DomainParameters_p = INT(name='p', mode=MODE_TYPE)
    _DomainParameters_g = INT(name='g', mode=MODE_TYPE)
    _DomainParameters_q = INT(name='q', mode=MODE_TYPE)
    _DomainParameters_j = INT(name='j', mode=MODE_TYPE, opt=True)
    _DomainParameters_validationParams = SEQ(name='validationParams', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ValidationParams')), opt=True)
    DomainParameters._cont = ASN1Dict([
        ('p', _DomainParameters_p),
        ('g', _DomainParameters_g),
        ('q', _DomainParameters_q),
        ('j', _DomainParameters_j),
        ('validationParams', _DomainParameters_validationParams),
        ])
    DomainParameters._ext = None
    
    #-----< ValidationParams >-----#
    ValidationParams = SEQ(name='ValidationParams', mode=MODE_TYPE)
    _ValidationParams_seed = BIT_STR(name='seed', mode=MODE_TYPE)
    _ValidationParams_pgenCounter = INT(name='pgenCounter', mode=MODE_TYPE)
    ValidationParams._cont = ASN1Dict([
        ('seed', _ValidationParams_seed),
        ('pgenCounter', _ValidationParams_pgenCounter),
        ])
    ValidationParams._ext = None
    
    #-----< DHPublicKey >-----#
    DHPublicKey = INT(name='DHPublicKey', mode=MODE_TYPE)
    
    #-----< pk-kea >-----#
    pk_kea = CLASS(name='pk-kea', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')))
    _pk_kea_val_Params = OCT_STR(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'KEA-Params-Id')))
    pk_kea._val = dict([('id', (2, 16, 840, 1, 101, 2, 1, 1, 22)), ('Params', _pk_kea_val_Params), ('paramPresence', 'required'), ('keyUsage', (19, 9))])
    
    #-----< id-keyExchangeAlgorithm >-----#
    id_keyExchangeAlgorithm = OID(name='id-keyExchangeAlgorithm', mode=MODE_VALUE)
    id_keyExchangeAlgorithm._val = (2, 16, 840, 1, 101, 2, 1, 1, 22)
    
    #-----< KEA-Params-Id >-----#
    KEA_Params_Id = OCT_STR(name='KEA-Params-Id', mode=MODE_TYPE)
    
    #-----< pk-ec >-----#
    pk_ec = CLASS(name='pk-ec', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')))
    _pk_ec_val_KeyValue = OCT_STR(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECPoint')))
    _pk_ec_val_Params = CHOICE(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECParameters')))
    pk_ec._val = dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _pk_ec_val_KeyValue), ('Params', _pk_ec_val_Params), ('paramPresence', 'required'), ('keyUsage', (103, 7))])
    
    #-----< ECPoint >-----#
    ECPoint = OCT_STR(name='ECPoint', mode=MODE_TYPE)
    
    #-----< id-ecPublicKey >-----#
    id_ecPublicKey = OID(name='id-ecPublicKey', mode=MODE_VALUE)
    id_ecPublicKey._val = (1, 2, 840, 10045, 2, 1)
    
    #-----< pk-ecDH >-----#
    pk_ecDH = CLASS(name='pk-ecDH', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')))
    _pk_ecDH_val_KeyValue = OCT_STR(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECPoint')))
    _pk_ecDH_val_Params = CHOICE(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECParameters')))
    pk_ecDH._val = dict([('id', (1, 3, 132, 1, 12)), ('KeyValue', _pk_ecDH_val_KeyValue), ('Params', _pk_ecDH_val_Params), ('paramPresence', 'required'), ('keyUsage', (19, 9))])
    
    #-----< id-ecDH >-----#
    id_ecDH = OID(name='id-ecDH', mode=MODE_VALUE)
    id_ecDH._val = (1, 3, 132, 1, 12)
    
    #-----< pk-ecMQV >-----#
    pk_ecMQV = CLASS(name='pk-ecMQV', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')))
    _pk_ecMQV_val_KeyValue = OCT_STR(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECPoint')))
    _pk_ecMQV_val_Params = CHOICE(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECParameters')))
    pk_ecMQV._val = dict([('id', (1, 3, 132, 1, 13)), ('KeyValue', _pk_ecMQV_val_KeyValue), ('Params', _pk_ecMQV_val_Params), ('paramPresence', 'required'), ('keyUsage', (19, 9))])
    
    #-----< id-ecMQV >-----#
    id_ecMQV = OID(name='id-ecMQV', mode=MODE_VALUE)
    id_ecMQV._val = (1, 3, 132, 1, 13)
    
    #-----< ECParameters >-----#
    ECParameters = CHOICE(name='ECParameters', mode=MODE_TYPE)
    _ECParameters_namedCurve = OID(name='namedCurve', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIXAlgs-2009', 'CURVE'), ['id']))
    __ECParameters_namedCurve_tab = CLASS(name='_tab_CURVE', mode=MODE_SET, typeref=ASN1RefType(('PKIXAlgs-2009', 'CURVE')))
    __ECParameters_namedCurve_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 3, 1, 1))]), dict([('id', (1, 3, 132, 0, 1))]), dict([('id', (1, 3, 132, 0, 15))]), dict([('id', (1, 3, 132, 0, 33))]), dict([('id', (1, 3, 132, 0, 26))]), dict([('id', (1, 3, 132, 0, 27))]), dict([('id', (1, 2, 840, 10045, 3, 1, 7))]), dict([('id', (1, 3, 132, 0, 16))]), dict([('id', (1, 3, 132, 0, 17))]), dict([('id', (1, 3, 132, 0, 34))]), dict([('id', (1, 3, 132, 0, 36))]), dict([('id', (1, 3, 132, 0, 37))]), dict([('id', (1, 3, 132, 0, 35))]), dict([('id', (1, 3, 132, 0, 38))]), dict([('id', (1, 3, 132, 0, 39))])], rr=[], ev=None, er=[])
    _ECParameters_namedCurve._const_tab = __ECParameters_namedCurve_tab
    _ECParameters_namedCurve._const_tab_at = None
    _ECParameters_namedCurve._const_tab_id = 'id'
    ECParameters._cont = ASN1Dict([
        ('namedCurve', _ECParameters_namedCurve),
        ])
    ECParameters._ext = None
    
    #-----< CURVE >-----#
    CURVE = CLASS(name='CURVE', mode=MODE_TYPE)
    _CURVE_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    CURVE._cont = ASN1Dict([
        ('id', _CURVE_id),
        ])
    
    #-----< NamedCurve >-----#
    NamedCurve = CLASS(name='NamedCurve', mode=MODE_SET, typeref=ASN1RefType(('PKIXAlgs-2009', 'CURVE')))
    NamedCurve._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 3, 1, 1))]), dict([('id', (1, 3, 132, 0, 1))]), dict([('id', (1, 3, 132, 0, 15))]), dict([('id', (1, 3, 132, 0, 33))]), dict([('id', (1, 3, 132, 0, 26))]), dict([('id', (1, 3, 132, 0, 27))]), dict([('id', (1, 2, 840, 10045, 3, 1, 7))]), dict([('id', (1, 3, 132, 0, 16))]), dict([('id', (1, 3, 132, 0, 17))]), dict([('id', (1, 3, 132, 0, 34))]), dict([('id', (1, 3, 132, 0, 36))]), dict([('id', (1, 3, 132, 0, 37))]), dict([('id', (1, 3, 132, 0, 35))]), dict([('id', (1, 3, 132, 0, 38))]), dict([('id', (1, 3, 132, 0, 39))])], rr=[], ev=[], er=[])
    
    #-----< secp192r1 >-----#
    secp192r1 = OID(name='secp192r1', mode=MODE_VALUE)
    secp192r1._val = (1, 2, 840, 10045, 3, 1, 1)
    
    #-----< sect163k1 >-----#
    sect163k1 = OID(name='sect163k1', mode=MODE_VALUE)
    sect163k1._val = (1, 3, 132, 0, 1)
    
    #-----< sect163r2 >-----#
    sect163r2 = OID(name='sect163r2', mode=MODE_VALUE)
    sect163r2._val = (1, 3, 132, 0, 15)
    
    #-----< secp224r1 >-----#
    secp224r1 = OID(name='secp224r1', mode=MODE_VALUE)
    secp224r1._val = (1, 3, 132, 0, 33)
    
    #-----< sect233k1 >-----#
    sect233k1 = OID(name='sect233k1', mode=MODE_VALUE)
    sect233k1._val = (1, 3, 132, 0, 26)
    
    #-----< sect233r1 >-----#
    sect233r1 = OID(name='sect233r1', mode=MODE_VALUE)
    sect233r1._val = (1, 3, 132, 0, 27)
    
    #-----< secp256r1 >-----#
    secp256r1 = OID(name='secp256r1', mode=MODE_VALUE)
    secp256r1._val = (1, 2, 840, 10045, 3, 1, 7)
    
    #-----< sect283k1 >-----#
    sect283k1 = OID(name='sect283k1', mode=MODE_VALUE)
    sect283k1._val = (1, 3, 132, 0, 16)
    
    #-----< sect283r1 >-----#
    sect283r1 = OID(name='sect283r1', mode=MODE_VALUE)
    sect283r1._val = (1, 3, 132, 0, 17)
    
    #-----< secp384r1 >-----#
    secp384r1 = OID(name='secp384r1', mode=MODE_VALUE)
    secp384r1._val = (1, 3, 132, 0, 34)
    
    #-----< sect409k1 >-----#
    sect409k1 = OID(name='sect409k1', mode=MODE_VALUE)
    sect409k1._val = (1, 3, 132, 0, 36)
    
    #-----< sect409r1 >-----#
    sect409r1 = OID(name='sect409r1', mode=MODE_VALUE)
    sect409r1._val = (1, 3, 132, 0, 37)
    
    #-----< secp521r1 >-----#
    secp521r1 = OID(name='secp521r1', mode=MODE_VALUE)
    secp521r1._val = (1, 3, 132, 0, 35)
    
    #-----< sect571k1 >-----#
    sect571k1 = OID(name='sect571k1', mode=MODE_VALUE)
    sect571k1._val = (1, 3, 132, 0, 38)
    
    #-----< sect571r1 >-----#
    sect571r1 = OID(name='sect571r1', mode=MODE_VALUE)
    sect571r1._val = (1, 3, 132, 0, 39)
    
    #-----< sa-rsaWithMD2 >-----#
    sa_rsaWithMD2 = CLASS(name='sa-rsaWithMD2', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    _sa_rsaWithMD2_val_Params = NULL(name='Params', mode=MODE_TYPE)
    sa_rsaWithMD2._val = dict([('id', (1, 2, 840, 113549, 1, 1, 2)), ('Params', _sa_rsaWithMD2_val_Params), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 2))]))])
    
    #-----< md2WithRSAEncryption >-----#
    md2WithRSAEncryption = OID(name='md2WithRSAEncryption', mode=MODE_VALUE)
    md2WithRSAEncryption._val = (1, 2, 840, 113549, 1, 1, 2)
    
    #-----< sa-rsaWithMD5 >-----#
    sa_rsaWithMD5 = CLASS(name='sa-rsaWithMD5', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    _sa_rsaWithMD5_val_Params = NULL(name='Params', mode=MODE_TYPE)
    sa_rsaWithMD5._val = dict([('id', (1, 2, 840, 113549, 1, 1, 4)), ('Params', _sa_rsaWithMD5_val_Params), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 5)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 4))]))])
    
    #-----< md5WithRSAEncryption >-----#
    md5WithRSAEncryption = OID(name='md5WithRSAEncryption', mode=MODE_VALUE)
    md5WithRSAEncryption._val = (1, 2, 840, 113549, 1, 1, 4)
    
    #-----< sa-rsaWithSHA1 >-----#
    sa_rsaWithSHA1 = CLASS(name='sa-rsaWithSHA1', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    _sa_rsaWithSHA1_val_Params = NULL(name='Params', mode=MODE_TYPE)
    sa_rsaWithSHA1._val = dict([('id', (1, 2, 840, 113549, 1, 1, 5)), ('Params', _sa_rsaWithSHA1_val_Params), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 5))]))])
    
    #-----< sha1WithRSAEncryption >-----#
    sha1WithRSAEncryption = OID(name='sha1WithRSAEncryption', mode=MODE_VALUE)
    sha1WithRSAEncryption._val = (1, 2, 840, 113549, 1, 1, 5)
    
    #-----< sa-dsaWithSHA1 >-----#
    sa_dsaWithSHA1 = CLASS(name='sa-dsaWithSHA1', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    _sa_dsaWithSHA1_val_Value = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    _sa_dsaWithSHA1_val_Params = NULL(name='Params', mode=MODE_TYPE)
    sa_dsaWithSHA1._val = dict([('id', (1, 2, 840, 10040, 4, 3)), ('Value', _sa_dsaWithSHA1_val_Value), ('Params', _sa_dsaWithSHA1_val_Params), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10040, 4, 3))]))])
    
    #-----< dsa-with-sha1 >-----#
    dsa_with_sha1 = OID(name='dsa-with-sha1', mode=MODE_VALUE)
    dsa_with_sha1._val = (1, 2, 840, 10040, 4, 3)
    
    #-----< sa-dsaWithSHA224 >-----#
    sa_dsaWithSHA224 = CLASS(name='sa-dsaWithSHA224', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    _sa_dsaWithSHA224_val_Value = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    _sa_dsaWithSHA224_val_Params = NULL(name='Params', mode=MODE_TYPE)
    sa_dsaWithSHA224._val = dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1)), ('Value', _sa_dsaWithSHA224_val_Value), ('Params', _sa_dsaWithSHA224_val_Params), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1))]))])
    
    #-----< dsa-with-sha224 >-----#
    dsa_with_sha224 = OID(name='dsa-with-sha224', mode=MODE_VALUE)
    dsa_with_sha224._val = (2, 16, 840, 1, 101, 3, 4, 3, 1)
    
    #-----< sa-dsaWithSHA256 >-----#
    sa_dsaWithSHA256 = CLASS(name='sa-dsaWithSHA256', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    _sa_dsaWithSHA256_val_Value = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    _sa_dsaWithSHA256_val_Params = NULL(name='Params', mode=MODE_TYPE)
    sa_dsaWithSHA256._val = dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2)), ('Value', _sa_dsaWithSHA256_val_Value), ('Params', _sa_dsaWithSHA256_val_Params), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2))]))])
    
    #-----< dsa-with-sha256 >-----#
    dsa_with_sha256 = OID(name='dsa-with-sha256', mode=MODE_VALUE)
    dsa_with_sha256._val = (2, 16, 840, 1, 101, 3, 4, 3, 2)
    
    #-----< sa-ecdsaWithSHA1 >-----#
    sa_ecdsaWithSHA1 = CLASS(name='sa-ecdsaWithSHA1', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    _sa_ecdsaWithSHA1_val_Value = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    _sa_ecdsaWithSHA1_val_Params = NULL(name='Params', mode=MODE_TYPE)
    sa_ecdsaWithSHA1._val = dict([('id', (1, 2, 840, 10045, 4, 1)), ('Value', _sa_ecdsaWithSHA1_val_Value), ('Params', _sa_ecdsaWithSHA1_val_Params), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 1))]))])
    
    #-----< ecdsa-with-SHA1 >-----#
    ecdsa_with_SHA1 = OID(name='ecdsa-with-SHA1', mode=MODE_VALUE)
    ecdsa_with_SHA1._val = (1, 2, 840, 10045, 4, 1)
    
    #-----< sa-ecdsaWithSHA224 >-----#
    sa_ecdsaWithSHA224 = CLASS(name='sa-ecdsaWithSHA224', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    _sa_ecdsaWithSHA224_val_Value = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    _sa_ecdsaWithSHA224_val_Params = NULL(name='Params', mode=MODE_TYPE)
    sa_ecdsaWithSHA224._val = dict([('id', (1, 2, 840, 10045, 4, 3, 1)), ('Value', _sa_ecdsaWithSHA224_val_Value), ('Params', _sa_ecdsaWithSHA224_val_Params), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 1))]))])
    
    #-----< ecdsa-with-SHA224 >-----#
    ecdsa_with_SHA224 = OID(name='ecdsa-with-SHA224', mode=MODE_VALUE)
    ecdsa_with_SHA224._val = (1, 2, 840, 10045, 4, 3, 1)
    
    #-----< sa-ecdsaWithSHA256 >-----#
    sa_ecdsaWithSHA256 = CLASS(name='sa-ecdsaWithSHA256', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    _sa_ecdsaWithSHA256_val_Value = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    _sa_ecdsaWithSHA256_val_Params = NULL(name='Params', mode=MODE_TYPE)
    sa_ecdsaWithSHA256._val = dict([('id', (1, 2, 840, 10045, 4, 3, 2)), ('Value', _sa_ecdsaWithSHA256_val_Value), ('Params', _sa_ecdsaWithSHA256_val_Params), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 2))]))])
    
    #-----< ecdsa-with-SHA256 >-----#
    ecdsa_with_SHA256 = OID(name='ecdsa-with-SHA256', mode=MODE_VALUE)
    ecdsa_with_SHA256._val = (1, 2, 840, 10045, 4, 3, 2)
    
    #-----< sa-ecdsaWithSHA384 >-----#
    sa_ecdsaWithSHA384 = CLASS(name='sa-ecdsaWithSHA384', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    _sa_ecdsaWithSHA384_val_Value = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    _sa_ecdsaWithSHA384_val_Params = NULL(name='Params', mode=MODE_TYPE)
    sa_ecdsaWithSHA384._val = dict([('id', (1, 2, 840, 10045, 4, 3, 3)), ('Value', _sa_ecdsaWithSHA384_val_Value), ('Params', _sa_ecdsaWithSHA384_val_Params), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 3))]))])
    
    #-----< ecdsa-with-SHA384 >-----#
    ecdsa_with_SHA384 = OID(name='ecdsa-with-SHA384', mode=MODE_VALUE)
    ecdsa_with_SHA384._val = (1, 2, 840, 10045, 4, 3, 3)
    
    #-----< sa-ecdsaWithSHA512 >-----#
    sa_ecdsaWithSHA512 = CLASS(name='sa-ecdsaWithSHA512', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    _sa_ecdsaWithSHA512_val_Value = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    _sa_ecdsaWithSHA512_val_Params = NULL(name='Params', mode=MODE_TYPE)
    sa_ecdsaWithSHA512._val = dict([('id', (1, 2, 840, 10045, 4, 3, 4)), ('Value', _sa_ecdsaWithSHA512_val_Value), ('Params', _sa_ecdsaWithSHA512_val_Params), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 4))]))])
    
    #-----< ecdsa-with-SHA512 >-----#
    ecdsa_with_SHA512 = OID(name='ecdsa-with-SHA512', mode=MODE_VALUE)
    ecdsa_with_SHA512._val = (1, 2, 840, 10045, 4, 3, 4)
    
    #-----< DSA-Sig-Value >-----#
    DSA_Sig_Value = SEQ(name='DSA-Sig-Value', mode=MODE_TYPE)
    _DSA_Sig_Value_r = INT(name='r', mode=MODE_TYPE)
    _DSA_Sig_Value_s = INT(name='s', mode=MODE_TYPE)
    DSA_Sig_Value._cont = ASN1Dict([
        ('r', _DSA_Sig_Value_r),
        ('s', _DSA_Sig_Value_s),
        ])
    DSA_Sig_Value._ext = None
    
    #-----< ECDSA-Sig-Value >-----#
    ECDSA_Sig_Value = SEQ(name='ECDSA-Sig-Value', mode=MODE_TYPE)
    _ECDSA_Sig_Value_r = INT(name='r', mode=MODE_TYPE)
    _ECDSA_Sig_Value_s = INT(name='s', mode=MODE_TYPE)
    ECDSA_Sig_Value._cont = ASN1Dict([
        ('r', _ECDSA_Sig_Value_r),
        ('s', _ECDSA_Sig_Value_s),
        ])
    ECDSA_Sig_Value._ext = None
    
    #-----< HashAlgs >-----#
    HashAlgs = CLASS(name='HashAlgs', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    _HashAlgs_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _HashAlgs_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    _HashAlgs_val_Params_2 = NULL(name='Params', mode=MODE_TYPE)
    HashAlgs._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 2)), ('Params', _HashAlgs_val_Params_0), ('paramPresence', 'preferredAbsent')]), dict([('id', (1, 2, 840, 113549, 2, 5)), ('Params', _HashAlgs_val_Params_1), ('paramPresence', 'preferredAbsent')]), dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _HashAlgs_val_Params_2), ('paramPresence', 'preferredAbsent')])], rr=[], ev=[], er=[])
    
    #-----< mda-md2 >-----#
    mda_md2 = CLASS(name='mda-md2', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    _mda_md2_val_Params = NULL(name='Params', mode=MODE_TYPE)
    mda_md2._val = dict([('id', (1, 2, 840, 113549, 2, 2)), ('Params', _mda_md2_val_Params), ('paramPresence', 'preferredAbsent')])
    
    #-----< id-md2 >-----#
    id_md2 = OID(name='id-md2', mode=MODE_VALUE)
    id_md2._val = (1, 2, 840, 113549, 2, 2)
    
    #-----< mda-md5 >-----#
    mda_md5 = CLASS(name='mda-md5', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    _mda_md5_val_Params = NULL(name='Params', mode=MODE_TYPE)
    mda_md5._val = dict([('id', (1, 2, 840, 113549, 2, 5)), ('Params', _mda_md5_val_Params), ('paramPresence', 'preferredAbsent')])
    
    #-----< id-md5 >-----#
    id_md5 = OID(name='id-md5', mode=MODE_VALUE)
    id_md5._val = (1, 2, 840, 113549, 2, 5)
    
    #-----< mda-sha1 >-----#
    mda_sha1 = CLASS(name='mda-sha1', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    _mda_sha1_val_Params = NULL(name='Params', mode=MODE_TYPE)
    mda_sha1._val = dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _mda_sha1_val_Params), ('paramPresence', 'preferredAbsent')])
    
    #-----< id-sha1 >-----#
    id_sha1 = OID(name='id-sha1', mode=MODE_VALUE)
    id_sha1._val = (1, 3, 14, 3, 2, 26)
    
    _all_ = [
        PublicKeys,
        _PublicKeys_val_KeyValue_0,
        _PublicKeys_val_Params_0,
        _PublicKeys_val_KeyValue_1,
        _PublicKeys_val_Params_1,
        _PublicKeys_val_KeyValue_2,
        _PublicKeys_val_Params_2,
        _PublicKeys_val_Params_3,
        _PublicKeys_val_KeyValue_4,
        _PublicKeys_val_Params_4,
        _PublicKeys_val_KeyValue_5,
        _PublicKeys_val_Params_5,
        _PublicKeys_val_KeyValue_6,
        _PublicKeys_val_Params_6,
        SignatureAlgs,
        _SignatureAlgs_val_Params_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0,
        _SignatureAlgs_val_Params_1,
        _SignatureAlgs_val_Params_2,
        _SignatureAlgs_val_Value_3,
        _SignatureAlgs_val_Params_3,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0,
        _SignatureAlgs_val_Value_4,
        _SignatureAlgs_val_Params_4,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1,
        _SignatureAlgs_val_Value_5,
        _SignatureAlgs_val_Params_5,
        _SignatureAlgs_val_Value_6,
        _SignatureAlgs_val_Params_6,
        _SignatureAlgs_val_Value_7,
        _SignatureAlgs_val_Params_7,
        _SignatureAlgs_val_Value_8,
        _SignatureAlgs_val_Params_8,
        _SignatureAlgs_val_Value_9,
        _SignatureAlgs_val_Params_9,
        _SignatureAlgs_val_Value_10,
        _SignatureAlgs_val_Params_10,
        SMimeCaps,
        pk_rsa,
        _pk_rsa_val_KeyValue,
        _pk_rsa_val_Params,
        rsaEncryption,
        _RSAPublicKey_modulus,
        _RSAPublicKey_publicExponent,
        RSAPublicKey,
        pk_dsa,
        _pk_dsa_val_KeyValue,
        _pk_dsa_val_Params,
        id_dsa,
        _DSA_Params_p,
        _DSA_Params_q,
        _DSA_Params_g,
        DSA_Params,
        DSAPublicKey,
        pk_dh,
        _pk_dh_val_KeyValue,
        _pk_dh_val_Params,
        dhpublicnumber,
        _DomainParameters_p,
        _DomainParameters_g,
        _DomainParameters_q,
        _DomainParameters_j,
        _DomainParameters_validationParams,
        DomainParameters,
        _ValidationParams_seed,
        _ValidationParams_pgenCounter,
        ValidationParams,
        DHPublicKey,
        pk_kea,
        _pk_kea_val_Params,
        id_keyExchangeAlgorithm,
        KEA_Params_Id,
        pk_ec,
        _pk_ec_val_KeyValue,
        _pk_ec_val_Params,
        ECPoint,
        id_ecPublicKey,
        pk_ecDH,
        _pk_ecDH_val_KeyValue,
        _pk_ecDH_val_Params,
        id_ecDH,
        pk_ecMQV,
        _pk_ecMQV_val_KeyValue,
        _pk_ecMQV_val_Params,
        id_ecMQV,
        __ECParameters_namedCurve_tab,
        _ECParameters_namedCurve,
        ECParameters,
        _CURVE_id,
        CURVE,
        NamedCurve,
        secp192r1,
        sect163k1,
        sect163r2,
        secp224r1,
        sect233k1,
        sect233r1,
        secp256r1,
        sect283k1,
        sect283r1,
        secp384r1,
        sect409k1,
        sect409r1,
        secp521r1,
        sect571k1,
        sect571r1,
        sa_rsaWithMD2,
        _sa_rsaWithMD2_val_Params,
        md2WithRSAEncryption,
        sa_rsaWithMD5,
        _sa_rsaWithMD5_val_Params,
        md5WithRSAEncryption,
        sa_rsaWithSHA1,
        _sa_rsaWithSHA1_val_Params,
        sha1WithRSAEncryption,
        sa_dsaWithSHA1,
        _sa_dsaWithSHA1_val_Value,
        _sa_dsaWithSHA1_val_Params,
        dsa_with_sha1,
        sa_dsaWithSHA224,
        _sa_dsaWithSHA224_val_Value,
        _sa_dsaWithSHA224_val_Params,
        dsa_with_sha224,
        sa_dsaWithSHA256,
        _sa_dsaWithSHA256_val_Value,
        _sa_dsaWithSHA256_val_Params,
        dsa_with_sha256,
        sa_ecdsaWithSHA1,
        _sa_ecdsaWithSHA1_val_Value,
        _sa_ecdsaWithSHA1_val_Params,
        ecdsa_with_SHA1,
        sa_ecdsaWithSHA224,
        _sa_ecdsaWithSHA224_val_Value,
        _sa_ecdsaWithSHA224_val_Params,
        ecdsa_with_SHA224,
        sa_ecdsaWithSHA256,
        _sa_ecdsaWithSHA256_val_Value,
        _sa_ecdsaWithSHA256_val_Params,
        ecdsa_with_SHA256,
        sa_ecdsaWithSHA384,
        _sa_ecdsaWithSHA384_val_Value,
        _sa_ecdsaWithSHA384_val_Params,
        ecdsa_with_SHA384,
        sa_ecdsaWithSHA512,
        _sa_ecdsaWithSHA512_val_Value,
        _sa_ecdsaWithSHA512_val_Params,
        ecdsa_with_SHA512,
        _DSA_Sig_Value_r,
        _DSA_Sig_Value_s,
        DSA_Sig_Value,
        _ECDSA_Sig_Value_r,
        _ECDSA_Sig_Value_s,
        ECDSA_Sig_Value,
        HashAlgs,
        _HashAlgs_val_Params_0,
        _HashAlgs_val_Params_1,
        _HashAlgs_val_Params_2,
        mda_md2,
        _mda_md2_val_Params,
        id_md2,
        mda_md5,
        _mda_md5_val_Params,
        id_md5,
        mda_sha1,
        _mda_sha1_val_Params,
        id_sha1,
    ]

class PKIXAttributeCertificate_2009:

    _name_  = 'PKIXAttributeCertificate-2009'
    _oid_   = [1, 3, 6, 1, 5, 5, 7, 0, 47]
    
    _obj_ = [
        'AttributeCertExtensions',
        'ext-auditIdentity',
        'ext-targetInformation',
        'ext-noRevAvail',
        'ext-ac-proxying',
        'ext-aaControls',
        'AttributesDefined',
        'at-authenticationInfo',
        'at-accesIdentity',
        'at-chargingIdentity',
        'at-group',
        'at-role',
        'at-clearance',
        'at-clearance-RFC3281',
        'at-encAttrs',
        'id-pe-ac-auditIdentity',
        'id-pe-aaControls',
        'id-pe-ac-proxying',
        'id-ce-targetInformation',
        'id-ce-noRevAvail',
        'id-aca',
        'id-aca-authenticationInfo',
        'id-aca-accessIdentity',
        'id-aca-chargingIdentity',
        'id-aca-group',
        'id-aca-encAttrs',
        'id-at-role',
        'id-at-clearance',
        'id-at-clearance-rfc3281',
        'AttributeCertificate',
        'AttributeCertificateInfo',
        'AttCertVersion',
        'Holder',
        'ObjectDigestInfo',
        'AttCertIssuer',
        'V2Form',
        'IssuerSerial',
        'AttCertValidityPeriod',
        'Targets',
        'Target',
        'TargetCert',
        'AAControls',
        'AttrSpec',
        'ProxyInfo',
        'IetfAttrSyntax',
        'SvceAuthInfo',
        'RoleSyntax',
        'Clearance',
        'Clearance-rfc3281',
        'ClassList',
        'SupportedSecurityCategories',
        'SecurityCategory-rfc3281',
        'ACClearAttrs',
        ]
    _type_ = [
        'AttributeCertificate',
        'AttributeCertificateInfo',
        'AttCertVersion',
        'Holder',
        'ObjectDigestInfo',
        'AttCertIssuer',
        'V2Form',
        'IssuerSerial',
        'AttCertValidityPeriod',
        'Targets',
        'Target',
        'TargetCert',
        'AAControls',
        'AttrSpec',
        'ProxyInfo',
        'IetfAttrSyntax',
        'SvceAuthInfo',
        'RoleSyntax',
        'Clearance',
        'Clearance-rfc3281',
        'ClassList',
        'SecurityCategory-rfc3281',
        'ACClearAttrs',
        ]
    _set_ = [
        'AttributeCertExtensions',
        'AttributesDefined',
        'SupportedSecurityCategories',
        ]
    _val_ = [
        'ext-auditIdentity',
        'ext-targetInformation',
        'ext-noRevAvail',
        'ext-ac-proxying',
        'ext-aaControls',
        'at-authenticationInfo',
        'at-accesIdentity',
        'at-chargingIdentity',
        'at-group',
        'at-role',
        'at-clearance',
        'at-clearance-RFC3281',
        'at-encAttrs',
        'id-pe-ac-auditIdentity',
        'id-pe-aaControls',
        'id-pe-ac-proxying',
        'id-ce-targetInformation',
        'id-ce-noRevAvail',
        'id-aca',
        'id-aca-authenticationInfo',
        'id-aca-accessIdentity',
        'id-aca-chargingIdentity',
        'id-aca-group',
        'id-aca-encAttrs',
        'id-at-role',
        'id-at-clearance',
        'id-at-clearance-rfc3281',
        ]
    _class_ = [
        'AttributeCertExtensions',
        'ext-auditIdentity',
        'ext-targetInformation',
        'ext-noRevAvail',
        'ext-ac-proxying',
        'ext-aaControls',
        'AttributesDefined',
        'at-authenticationInfo',
        'at-accesIdentity',
        'at-chargingIdentity',
        'at-group',
        'at-role',
        'at-clearance',
        'at-clearance-RFC3281',
        'at-encAttrs',
        'SupportedSecurityCategories',
        ]
    _param_ = [
        'SecurityCategory-rfc3281',
        ]
    
    #-----< AttributeCertExtensions >-----#
    AttributeCertExtensions = CLASS(name='AttributeCertExtensions', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _AttributeCertExtensions_val_ExtnType_0 = OCT_STR(name='ExtnType', mode=MODE_TYPE)
    _AttributeCertExtensions_val_ExtnType_1 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'Targets')))
    _AttributeCertExtensions_val_ExtnType_2 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'AuthorityKeyIdentifier')))
    _AttributeCertExtensions_val_ExtnType_3 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'AuthorityInfoAccessSyntax')))
    _AttributeCertExtensions_val_ExtnType_4 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLDistributionPoints')))
    _AttributeCertExtensions_val_ExtnType_5 = NULL(name='ExtnType', mode=MODE_TYPE)
    _AttributeCertExtensions_val_ExtnType_6 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'ProxyInfo')))
    _AttributeCertExtensions_val_ExtnType_7 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'AAControls')))
    AttributeCertExtensions._val = ASN1Set(rv=[dict([('ExtnType', _AttributeCertExtensions_val_ExtnType_0), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 4))]), dict([('ExtnType', _AttributeCertExtensions_val_ExtnType_1), ('id', (2, 5, 29, 55))]), dict([('ExtnType', _AttributeCertExtensions_val_ExtnType_2), ('id', (2, 5, 29, 35))]), dict([('ExtnType', _AttributeCertExtensions_val_ExtnType_3), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 1))]), dict([('ExtnType', _AttributeCertExtensions_val_ExtnType_4), ('id', (2, 5, 29, 31))]), dict([('ExtnType', _AttributeCertExtensions_val_ExtnType_5), ('id', (2, 5, 29, 56))]), dict([('ExtnType', _AttributeCertExtensions_val_ExtnType_6), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 10))]), dict([('ExtnType', _AttributeCertExtensions_val_ExtnType_7), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 6))])], rr=[], ev=[], er=[])
    
    #-----< ext-auditIdentity >-----#
    ext_auditIdentity = CLASS(name='ext-auditIdentity', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_auditIdentity_val_ExtnType = OCT_STR(name='ExtnType', mode=MODE_TYPE)
    ext_auditIdentity._val = dict([('ExtnType', _ext_auditIdentity_val_ExtnType), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 4))])
    
    #-----< ext-targetInformation >-----#
    ext_targetInformation = CLASS(name='ext-targetInformation', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_targetInformation_val_ExtnType = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'Targets')))
    ext_targetInformation._val = dict([('ExtnType', _ext_targetInformation_val_ExtnType), ('id', (2, 5, 29, 55))])
    
    #-----< ext-noRevAvail >-----#
    ext_noRevAvail = CLASS(name='ext-noRevAvail', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_noRevAvail_val_ExtnType = NULL(name='ExtnType', mode=MODE_TYPE)
    ext_noRevAvail._val = dict([('ExtnType', _ext_noRevAvail_val_ExtnType), ('id', (2, 5, 29, 56))])
    
    #-----< ext-ac-proxying >-----#
    ext_ac_proxying = CLASS(name='ext-ac-proxying', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_ac_proxying_val_ExtnType = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'ProxyInfo')))
    ext_ac_proxying._val = dict([('ExtnType', _ext_ac_proxying_val_ExtnType), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 10))])
    
    #-----< ext-aaControls >-----#
    ext_aaControls = CLASS(name='ext-aaControls', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_aaControls_val_ExtnType = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'AAControls')))
    ext_aaControls._val = dict([('ExtnType', _ext_aaControls_val_ExtnType), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 6))])
    
    #-----< AttributesDefined >-----#
    AttributesDefined = CLASS(name='AttributesDefined', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _AttributesDefined_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'SvceAuthInfo')))
    _AttributesDefined_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'SvceAuthInfo')))
    _AttributesDefined_val_Type_2 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'IetfAttrSyntax')))
    _AttributesDefined_val_Type_3 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'IetfAttrSyntax')))
    _AttributesDefined_val_Type_4 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'RoleSyntax')))
    _AttributesDefined_val_Type_5 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'Clearance')))
    _AttributesDefined_val_Type_6 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'ContentInfo')))
    AttributesDefined._val = ASN1Set(rv=[dict([('Type', _AttributesDefined_val_Type_0), ('id', (1, 3, 6, 1, 5, 5, 7, 10, 1))]), dict([('Type', _AttributesDefined_val_Type_1), ('id', (1, 3, 6, 1, 5, 5, 7, 10, 2))]), dict([('Type', _AttributesDefined_val_Type_2), ('id', (1, 3, 6, 1, 5, 5, 7, 10, 3))]), dict([('Type', _AttributesDefined_val_Type_3), ('id', (1, 3, 6, 1, 5, 5, 7, 10, 4))]), dict([('Type', _AttributesDefined_val_Type_4), ('id', (2, 5, 4, 72))]), dict([('Type', _AttributesDefined_val_Type_5), ('id', (2, 5, 4, 55))]), dict([('Type', _AttributesDefined_val_Type_6), ('id', (1, 3, 6, 1, 5, 5, 7, 10, 6))])], rr=[], ev=[], er=[])
    
    #-----< at-authenticationInfo >-----#
    at_authenticationInfo = CLASS(name='at-authenticationInfo', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_authenticationInfo_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'SvceAuthInfo')))
    at_authenticationInfo._val = dict([('Type', _at_authenticationInfo_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 10, 1))])
    
    #-----< at-accesIdentity >-----#
    at_accesIdentity = CLASS(name='at-accesIdentity', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_accesIdentity_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'SvceAuthInfo')))
    at_accesIdentity._val = dict([('Type', _at_accesIdentity_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 10, 2))])
    
    #-----< at-chargingIdentity >-----#
    at_chargingIdentity = CLASS(name='at-chargingIdentity', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_chargingIdentity_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'IetfAttrSyntax')))
    at_chargingIdentity._val = dict([('Type', _at_chargingIdentity_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 10, 3))])
    
    #-----< at-group >-----#
    at_group = CLASS(name='at-group', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_group_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'IetfAttrSyntax')))
    at_group._val = dict([('Type', _at_group_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 10, 4))])
    
    #-----< at-role >-----#
    at_role = CLASS(name='at-role', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_role_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'RoleSyntax')))
    at_role._val = dict([('Type', _at_role_val_Type), ('id', (2, 5, 4, 72))])
    
    #-----< at-clearance >-----#
    at_clearance = CLASS(name='at-clearance', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_clearance_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'Clearance')))
    at_clearance._val = dict([('Type', _at_clearance_val_Type), ('id', (2, 5, 4, 55))])
    
    #-----< at-clearance-RFC3281 >-----#
    at_clearance_RFC3281 = CLASS(name='at-clearance-RFC3281', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_clearance_RFC3281_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'Clearance-rfc3281')))
    at_clearance_RFC3281._val = dict([('Type', _at_clearance_RFC3281_val_Type), ('id', (2, 5, 1, 5, 55))])
    
    #-----< at-encAttrs >-----#
    at_encAttrs = CLASS(name='at-encAttrs', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_encAttrs_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'ContentInfo')))
    at_encAttrs._val = dict([('Type', _at_encAttrs_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 10, 6))])
    
    #-----< id-pe-ac-auditIdentity >-----#
    id_pe_ac_auditIdentity = OID(name='id-pe-ac-auditIdentity', mode=MODE_VALUE)
    id_pe_ac_auditIdentity._val = (1, 3, 6, 1, 5, 5, 7, 1, 4)
    
    #-----< id-pe-aaControls >-----#
    id_pe_aaControls = OID(name='id-pe-aaControls', mode=MODE_VALUE)
    id_pe_aaControls._val = (1, 3, 6, 1, 5, 5, 7, 1, 6)
    
    #-----< id-pe-ac-proxying >-----#
    id_pe_ac_proxying = OID(name='id-pe-ac-proxying', mode=MODE_VALUE)
    id_pe_ac_proxying._val = (1, 3, 6, 1, 5, 5, 7, 1, 10)
    
    #-----< id-ce-targetInformation >-----#
    id_ce_targetInformation = OID(name='id-ce-targetInformation', mode=MODE_VALUE)
    id_ce_targetInformation._val = (2, 5, 29, 55)
    
    #-----< id-ce-noRevAvail >-----#
    id_ce_noRevAvail = OID(name='id-ce-noRevAvail', mode=MODE_VALUE)
    id_ce_noRevAvail._val = (2, 5, 29, 56)
    
    #-----< id-aca >-----#
    id_aca = OID(name='id-aca', mode=MODE_VALUE)
    id_aca._val = (1, 3, 6, 1, 5, 5, 7, 10)
    
    #-----< id-aca-authenticationInfo >-----#
    id_aca_authenticationInfo = OID(name='id-aca-authenticationInfo', mode=MODE_VALUE)
    id_aca_authenticationInfo._val = (1, 3, 6, 1, 5, 5, 7, 10, 1)
    
    #-----< id-aca-accessIdentity >-----#
    id_aca_accessIdentity = OID(name='id-aca-accessIdentity', mode=MODE_VALUE)
    id_aca_accessIdentity._val = (1, 3, 6, 1, 5, 5, 7, 10, 2)
    
    #-----< id-aca-chargingIdentity >-----#
    id_aca_chargingIdentity = OID(name='id-aca-chargingIdentity', mode=MODE_VALUE)
    id_aca_chargingIdentity._val = (1, 3, 6, 1, 5, 5, 7, 10, 3)
    
    #-----< id-aca-group >-----#
    id_aca_group = OID(name='id-aca-group', mode=MODE_VALUE)
    id_aca_group._val = (1, 3, 6, 1, 5, 5, 7, 10, 4)
    
    #-----< id-aca-encAttrs >-----#
    id_aca_encAttrs = OID(name='id-aca-encAttrs', mode=MODE_VALUE)
    id_aca_encAttrs._val = (1, 3, 6, 1, 5, 5, 7, 10, 6)
    
    #-----< id-at-role >-----#
    id_at_role = OID(name='id-at-role', mode=MODE_VALUE)
    id_at_role._val = (2, 5, 4, 72)
    
    #-----< id-at-clearance >-----#
    id_at_clearance = OID(name='id-at-clearance', mode=MODE_VALUE)
    id_at_clearance._val = (2, 5, 4, 55)
    
    #-----< id-at-clearance-rfc3281 >-----#
    id_at_clearance_rfc3281 = OID(name='id-at-clearance-rfc3281', mode=MODE_VALUE)
    id_at_clearance_rfc3281._val = (2, 5, 1, 5, 55)
    
    #-----< AttributeCertificate >-----#
    AttributeCertificate = SEQ(name='AttributeCertificate', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'SIGNED')))
    _AttributeCertificate_toBeSigned = SEQ(name='toBeSigned', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'AttributeCertificateInfo')))
    _AttributeCertificate_algorithmIdentifier = SEQ(name='algorithmIdentifier', mode=MODE_TYPE)
    __AttributeCertificate_algorithmIdentifier_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['id']))
    ___AttributeCertificate_algorithmIdentifier_algorithm_tab = CLASS(name='_tab_SIGNATURE-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_2 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_3 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_3 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0 = INT(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSAPublicKey')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Params')))
    ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_4 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_4 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1 = OCT_STR(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECPoint')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1 = CHOICE(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECParameters')))
    ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_5 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_5 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_6 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_6 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_7 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_7 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_8 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_8 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_9 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_9 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_10 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_10 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_11 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    ___AttributeCertificate_algorithmIdentifier_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 2)), ('Params', ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_0), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 2))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 4)), ('Params', ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_1), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 5)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 5)), ('Params', ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_2), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 5))]))]), dict([('id', (1, 2, 840, 10040, 4, 3)), ('Value', ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_3), ('Params', ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_3), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10040, 4, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 1)), ('Value', ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_4), ('Params', ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_4), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 1))]))])], rr=[], ev=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1)), ('Value', ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_5), ('Params', ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_5), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1))]))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2)), ('Value', ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_6), ('Params', ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_6), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 1)), ('Value', ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_7), ('Params', ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_7), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 1))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 2)), ('Value', ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_8), ('Params', ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_8), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 3)), ('Value', ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_9), ('Params', ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_9), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 4)), ('Value', ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_10), ('Params', ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_10), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('Params', ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_11), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1), ('paramPresence', 'optional'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 10))]))])], er=[])
    __AttributeCertificate_algorithmIdentifier_algorithm._const_tab = ___AttributeCertificate_algorithmIdentifier_algorithm_tab
    __AttributeCertificate_algorithmIdentifier_algorithm._const_tab_at = None
    __AttributeCertificate_algorithmIdentifier_algorithm._const_tab_id = 'id'
    __AttributeCertificate_algorithmIdentifier_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['Params']), opt=True)
    __AttributeCertificate_algorithmIdentifier_parameters._const_tab = ___AttributeCertificate_algorithmIdentifier_algorithm_tab
    __AttributeCertificate_algorithmIdentifier_parameters._const_tab_at = ('..', '..', 'algorithmIdentifier', 'algorithm')
    __AttributeCertificate_algorithmIdentifier_parameters._const_tab_id = 'Params'
    _AttributeCertificate_algorithmIdentifier._cont = ASN1Dict([
        ('algorithm', __AttributeCertificate_algorithmIdentifier_algorithm),
        ('parameters', __AttributeCertificate_algorithmIdentifier_parameters),
        ])
    _AttributeCertificate_algorithmIdentifier._ext = None
    _AttributeCertificate_signature = BIT_STR(name='signature', mode=MODE_TYPE)
    __AttributeCertificate_signature_contain = OPEN(name='_cont_signature', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['Value']))
    __AttributeCertificate_signature_contain._const_tab = ___AttributeCertificate_algorithmIdentifier_algorithm_tab
    __AttributeCertificate_signature_contain._const_tab_at = ('..', 'algorithmIdentifier', 'algorithm')
    __AttributeCertificate_signature_contain._const_tab_id = 'Value'
    _AttributeCertificate_signature._const_cont = __AttributeCertificate_signature_contain
    AttributeCertificate._cont = ASN1Dict([
        ('toBeSigned', _AttributeCertificate_toBeSigned),
        ('algorithmIdentifier', _AttributeCertificate_algorithmIdentifier),
        ('signature', _AttributeCertificate_signature),
        ])
    AttributeCertificate._ext = None
    
    #-----< AttributeCertificateInfo >-----#
    AttributeCertificateInfo = SEQ(name='AttributeCertificateInfo', mode=MODE_TYPE)
    _AttributeCertificateInfo_version = INT(name='version', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'AttCertVersion')))
    _AttributeCertificateInfo_holder = SEQ(name='holder', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'Holder')))
    _AttributeCertificateInfo_issuer = CHOICE(name='issuer', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'AttCertIssuer')))
    _AttributeCertificateInfo_signature = SEQ(name='signature', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __AttributeCertificateInfo_signature_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['id']))
    ___AttributeCertificateInfo_signature_algorithm_tab = CLASS(name='_tab_SIGNATURE-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_2 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_3 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_3 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_4 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_4 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_5 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_5 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_6 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_6 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_7 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_7 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_8 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_8 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_9 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_9 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_10 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_10 = NULL(name='Params', mode=MODE_TYPE)
    ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_11 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    ___AttributeCertificateInfo_signature_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 2)), ('Params', ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_0), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 2))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 4)), ('Params', ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_1), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 5)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 5)), ('Params', ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_2), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 5))]))]), dict([('id', (1, 2, 840, 10040, 4, 3)), ('Value', ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_3), ('Params', ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_3), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10040, 4, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 1)), ('Value', ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_4), ('Params', ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_4), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 1))]))])], rr=[], ev=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1)), ('Value', ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_5), ('Params', ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_5), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1))]))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2)), ('Value', ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_6), ('Params', ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_6), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 1)), ('Value', ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_7), ('Params', ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_7), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 1))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 2)), ('Value', ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_8), ('Params', ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_8), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 3)), ('Value', ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_9), ('Params', ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_9), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 4)), ('Value', ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_10), ('Params', ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_10), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('Params', ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_11), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1), ('paramPresence', 'optional'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 10))]))])], er=[])
    __AttributeCertificateInfo_signature_algorithm._const_tab = ___AttributeCertificateInfo_signature_algorithm_tab
    __AttributeCertificateInfo_signature_algorithm._const_tab_at = None
    __AttributeCertificateInfo_signature_algorithm._const_tab_id = 'id'
    __AttributeCertificateInfo_signature_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['Params']), opt=True)
    __AttributeCertificateInfo_signature_parameters._const_tab = ___AttributeCertificateInfo_signature_algorithm_tab
    __AttributeCertificateInfo_signature_parameters._const_tab_at = ('..', 'algorithm')
    __AttributeCertificateInfo_signature_parameters._const_tab_id = 'Params'
    _AttributeCertificateInfo_signature._cont = ASN1Dict([
        ('algorithm', __AttributeCertificateInfo_signature_algorithm),
        ('parameters', __AttributeCertificateInfo_signature_parameters),
        ])
    _AttributeCertificateInfo_signature._ext = None
    _AttributeCertificateInfo_serialNumber = INT(name='serialNumber', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'CertificateSerialNumber')))
    _AttributeCertificateInfo_attrCertValidityPeriod = SEQ(name='attrCertValidityPeriod', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'AttCertValidityPeriod')))
    _AttributeCertificateInfo_attributes = SEQ_OF(name='attributes', mode=MODE_TYPE)
    __AttributeCertificateInfo_attributes__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'AttributeSet')))
    ___AttributeCertificateInfo_attributes__item__type = OID(name='type', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['id']))
    ____AttributeCertificateInfo_attributes__item__type_tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _____AttributeCertificateInfo_attributes__item__type_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'SvceAuthInfo')))
    _____AttributeCertificateInfo_attributes__item__type_tab_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'SvceAuthInfo')))
    _____AttributeCertificateInfo_attributes__item__type_tab_val_Type_2 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'IetfAttrSyntax')))
    _____AttributeCertificateInfo_attributes__item__type_tab_val_Type_3 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'IetfAttrSyntax')))
    _____AttributeCertificateInfo_attributes__item__type_tab_val_Type_4 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'RoleSyntax')))
    _____AttributeCertificateInfo_attributes__item__type_tab_val_Type_5 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'Clearance')))
    _____AttributeCertificateInfo_attributes__item__type_tab_val_Type_6 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'ContentInfo')))
    ____AttributeCertificateInfo_attributes__item__type_tab._val = ASN1Set(rv=[dict([('Type', _____AttributeCertificateInfo_attributes__item__type_tab_val_Type_0), ('id', (1, 3, 6, 1, 5, 5, 7, 10, 1))]), dict([('Type', _____AttributeCertificateInfo_attributes__item__type_tab_val_Type_1), ('id', (1, 3, 6, 1, 5, 5, 7, 10, 2))]), dict([('Type', _____AttributeCertificateInfo_attributes__item__type_tab_val_Type_2), ('id', (1, 3, 6, 1, 5, 5, 7, 10, 3))]), dict([('Type', _____AttributeCertificateInfo_attributes__item__type_tab_val_Type_3), ('id', (1, 3, 6, 1, 5, 5, 7, 10, 4))]), dict([('Type', _____AttributeCertificateInfo_attributes__item__type_tab_val_Type_4), ('id', (2, 5, 4, 72))]), dict([('Type', _____AttributeCertificateInfo_attributes__item__type_tab_val_Type_5), ('id', (2, 5, 4, 55))]), dict([('Type', _____AttributeCertificateInfo_attributes__item__type_tab_val_Type_6), ('id', (1, 3, 6, 1, 5, 5, 7, 10, 6))])], rr=[], ev=None, er=[])
    ___AttributeCertificateInfo_attributes__item__type._const_tab = ____AttributeCertificateInfo_attributes__item__type_tab
    ___AttributeCertificateInfo_attributes__item__type._const_tab_at = None
    ___AttributeCertificateInfo_attributes__item__type._const_tab_id = 'id'
    ___AttributeCertificateInfo_attributes__item__values = SET_OF(name='values', mode=MODE_TYPE)
    ____AttributeCertificateInfo_attributes__item__values__item_ = OPEN(name='_item_', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['Type']))
    ____AttributeCertificateInfo_attributes__item__values__item_._const_tab = ____AttributeCertificateInfo_attributes__item__type_tab
    ____AttributeCertificateInfo_attributes__item__values__item_._const_tab_at = ('..', '..', 'type')
    ____AttributeCertificateInfo_attributes__item__values__item_._const_tab_id = 'Type'
    ___AttributeCertificateInfo_attributes__item__values._cont = ____AttributeCertificateInfo_attributes__item__values__item_
    ___AttributeCertificateInfo_attributes__item__values._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    __AttributeCertificateInfo_attributes__item_._cont = ASN1Dict([
        ('type', ___AttributeCertificateInfo_attributes__item__type),
        ('values', ___AttributeCertificateInfo_attributes__item__values),
        ])
    __AttributeCertificateInfo_attributes__item_._ext = None
    _AttributeCertificateInfo_attributes._cont = __AttributeCertificateInfo_attributes__item_
    _AttributeCertificateInfo_issuerUniqueID = BIT_STR(name='issuerUniqueID', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'UniqueIdentifier')), opt=True)
    _AttributeCertificateInfo_extensions = SEQ_OF(name='extensions', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'Extensions')), opt=True)
    __AttributeCertificateInfo_extensions__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'Extension')))
    ___AttributeCertificateInfo_extensions__item__extnID = OID(name='extnID', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'EXTENSION'), ['id']))
    ____AttributeCertificateInfo_extensions__item__extnID_tab = CLASS(name='_tab_EXTENSION', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_0 = OCT_STR(name='ExtnType', mode=MODE_TYPE)
    _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_1 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'Targets')))
    _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_2 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'AuthorityKeyIdentifier')))
    _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_3 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'AuthorityInfoAccessSyntax')))
    _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_4 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLDistributionPoints')))
    _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_5 = NULL(name='ExtnType', mode=MODE_TYPE)
    _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_6 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'ProxyInfo')))
    _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_7 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'AAControls')))
    ____AttributeCertificateInfo_extensions__item__extnID_tab._val = ASN1Set(rv=[dict([('ExtnType', _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_0), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 4))]), dict([('ExtnType', _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_1), ('id', (2, 5, 29, 55))]), dict([('ExtnType', _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_2), ('id', (2, 5, 29, 35))]), dict([('ExtnType', _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_3), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 1))]), dict([('ExtnType', _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_4), ('id', (2, 5, 29, 31))]), dict([('ExtnType', _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_5), ('id', (2, 5, 29, 56))]), dict([('ExtnType', _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_6), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 10))]), dict([('ExtnType', _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_7), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 6))])], rr=[], ev=None, er=[])
    ___AttributeCertificateInfo_extensions__item__extnID._const_tab = ____AttributeCertificateInfo_extensions__item__extnID_tab
    ___AttributeCertificateInfo_extensions__item__extnID._const_tab_at = None
    ___AttributeCertificateInfo_extensions__item__extnID._const_tab_id = 'id'
    ___AttributeCertificateInfo_extensions__item__critical = BOOL(name='critical', mode=MODE_TYPE, default=False)
    ___AttributeCertificateInfo_extensions__item__extnValue = OCT_STR(name='extnValue', mode=MODE_TYPE)
    ____AttributeCertificateInfo_extensions__item__extnValue_contain = OPEN(name='_cont_extnValue', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'EXTENSION'), ['ExtnType']))
    ____AttributeCertificateInfo_extensions__item__extnValue_contain._const_tab = ____AttributeCertificateInfo_extensions__item__extnID_tab
    ____AttributeCertificateInfo_extensions__item__extnValue_contain._const_tab_at = ('..', 'extnID')
    ____AttributeCertificateInfo_extensions__item__extnValue_contain._const_tab_id = 'ExtnType'
    ___AttributeCertificateInfo_extensions__item__extnValue._const_cont = ____AttributeCertificateInfo_extensions__item__extnValue_contain
    __AttributeCertificateInfo_extensions__item_._cont = ASN1Dict([
        ('extnID', ___AttributeCertificateInfo_extensions__item__extnID),
        ('critical', ___AttributeCertificateInfo_extensions__item__critical),
        ('extnValue', ___AttributeCertificateInfo_extensions__item__extnValue),
        ])
    __AttributeCertificateInfo_extensions__item_._ext = None
    _AttributeCertificateInfo_extensions._cont = __AttributeCertificateInfo_extensions__item_
    _AttributeCertificateInfo_extensions._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    AttributeCertificateInfo._cont = ASN1Dict([
        ('version', _AttributeCertificateInfo_version),
        ('holder', _AttributeCertificateInfo_holder),
        ('issuer', _AttributeCertificateInfo_issuer),
        ('signature', _AttributeCertificateInfo_signature),
        ('serialNumber', _AttributeCertificateInfo_serialNumber),
        ('attrCertValidityPeriod', _AttributeCertificateInfo_attrCertValidityPeriod),
        ('attributes', _AttributeCertificateInfo_attributes),
        ('issuerUniqueID', _AttributeCertificateInfo_issuerUniqueID),
        ('extensions', _AttributeCertificateInfo_extensions),
        ])
    AttributeCertificateInfo._ext = None
    
    #-----< AttCertVersion >-----#
    AttCertVersion = INT(name='AttCertVersion', mode=MODE_TYPE)
    AttCertVersion._cont = ASN1Dict([('v2', 1)])
    
    #-----< Holder >-----#
    Holder = SEQ(name='Holder', mode=MODE_TYPE)
    _Holder_baseCertificateID = SEQ(name='baseCertificateID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'IssuerSerial')), opt=True)
    _Holder_entityName = SEQ_OF(name='entityName', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')), opt=True)
    _Holder_objectDigestInfo = SEQ(name='objectDigestInfo', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'ObjectDigestInfo')), opt=True)
    Holder._cont = ASN1Dict([
        ('baseCertificateID', _Holder_baseCertificateID),
        ('entityName', _Holder_entityName),
        ('objectDigestInfo', _Holder_objectDigestInfo),
        ])
    Holder._ext = None
    
    #-----< ObjectDigestInfo >-----#
    ObjectDigestInfo = SEQ(name='ObjectDigestInfo', mode=MODE_TYPE)
    _ObjectDigestInfo_digestedObjectType = ENUM(name='digestedObjectType', mode=MODE_TYPE)
    _ObjectDigestInfo_digestedObjectType._cont = ASN1Dict([('publicKey', 0), ('publicKeyCert', 1), ('otherObjectTypes', 2)])
    _ObjectDigestInfo_digestedObjectType._ext = None
    _ObjectDigestInfo_otherObjectTypeID = OID(name='otherObjectTypeID', mode=MODE_TYPE, opt=True)
    _ObjectDigestInfo_digestAlgorithm = SEQ(name='digestAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __ObjectDigestInfo_digestAlgorithm_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM'), ['id']))
    ___ObjectDigestInfo_digestAlgorithm_algorithm_tab = CLASS(name='_tab_DIGEST-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    ___ObjectDigestInfo_digestAlgorithm_algorithm_tab._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    __ObjectDigestInfo_digestAlgorithm_algorithm._const_tab = ___ObjectDigestInfo_digestAlgorithm_algorithm_tab
    __ObjectDigestInfo_digestAlgorithm_algorithm._const_tab_at = None
    __ObjectDigestInfo_digestAlgorithm_algorithm._const_tab_id = 'id'
    __ObjectDigestInfo_digestAlgorithm_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM'), ['Params']), opt=True)
    ___ObjectDigestInfo_digestAlgorithm_parameters_tab = CLASS(name='_tab_DIGEST-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    ___ObjectDigestInfo_digestAlgorithm_parameters_tab._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    __ObjectDigestInfo_digestAlgorithm_parameters._const_tab = ___ObjectDigestInfo_digestAlgorithm_parameters_tab
    __ObjectDigestInfo_digestAlgorithm_parameters._const_tab_at = ('..', 'algorithm')
    __ObjectDigestInfo_digestAlgorithm_parameters._const_tab_id = 'Params'
    _ObjectDigestInfo_digestAlgorithm._cont = ASN1Dict([
        ('algorithm', __ObjectDigestInfo_digestAlgorithm_algorithm),
        ('parameters', __ObjectDigestInfo_digestAlgorithm_parameters),
        ])
    _ObjectDigestInfo_digestAlgorithm._ext = None
    _ObjectDigestInfo_objectDigest = BIT_STR(name='objectDigest', mode=MODE_TYPE)
    ObjectDigestInfo._cont = ASN1Dict([
        ('digestedObjectType', _ObjectDigestInfo_digestedObjectType),
        ('otherObjectTypeID', _ObjectDigestInfo_otherObjectTypeID),
        ('digestAlgorithm', _ObjectDigestInfo_digestAlgorithm),
        ('objectDigest', _ObjectDigestInfo_objectDigest),
        ])
    ObjectDigestInfo._ext = None
    
    #-----< AttCertIssuer >-----#
    AttCertIssuer = CHOICE(name='AttCertIssuer', mode=MODE_TYPE)
    _AttCertIssuer_v1Form = SEQ_OF(name='v1Form', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    _AttCertIssuer_v2Form = SEQ(name='v2Form', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'V2Form')))
    AttCertIssuer._cont = ASN1Dict([
        ('v1Form', _AttCertIssuer_v1Form),
        ('v2Form', _AttCertIssuer_v2Form),
        ])
    AttCertIssuer._ext = None
    
    #-----< V2Form >-----#
    V2Form = SEQ(name='V2Form', mode=MODE_TYPE)
    _V2Form_issuerName = SEQ_OF(name='issuerName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')), opt=True)
    _V2Form_baseCertificateID = SEQ(name='baseCertificateID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'IssuerSerial')), opt=True)
    _V2Form_objectDigestInfo = SEQ(name='objectDigestInfo', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'ObjectDigestInfo')), opt=True)
    V2Form._cont = ASN1Dict([
        ('issuerName', _V2Form_issuerName),
        ('baseCertificateID', _V2Form_baseCertificateID),
        ('objectDigestInfo', _V2Form_objectDigestInfo),
        ])
    V2Form._ext = None
    
    #-----< IssuerSerial >-----#
    IssuerSerial = SEQ(name='IssuerSerial', mode=MODE_TYPE)
    _IssuerSerial_issuer = SEQ_OF(name='issuer', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    _IssuerSerial_serial = INT(name='serial', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'CertificateSerialNumber')))
    _IssuerSerial_issuerUID = BIT_STR(name='issuerUID', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'UniqueIdentifier')), opt=True)
    IssuerSerial._cont = ASN1Dict([
        ('issuer', _IssuerSerial_issuer),
        ('serial', _IssuerSerial_serial),
        ('issuerUID', _IssuerSerial_issuerUID),
        ])
    IssuerSerial._ext = None
    
    #-----< AttCertValidityPeriod >-----#
    AttCertValidityPeriod = SEQ(name='AttCertValidityPeriod', mode=MODE_TYPE)
    _AttCertValidityPeriod_notBeforeTime = TIME_GEN(name='notBeforeTime', mode=MODE_TYPE)
    _AttCertValidityPeriod_notAfterTime = TIME_GEN(name='notAfterTime', mode=MODE_TYPE)
    AttCertValidityPeriod._cont = ASN1Dict([
        ('notBeforeTime', _AttCertValidityPeriod_notBeforeTime),
        ('notAfterTime', _AttCertValidityPeriod_notAfterTime),
        ])
    AttCertValidityPeriod._ext = None
    
    #-----< Targets >-----#
    Targets = SEQ_OF(name='Targets', mode=MODE_TYPE)
    _Targets__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'Target')))
    Targets._cont = _Targets__item_
    
    #-----< Target >-----#
    Target = CHOICE(name='Target', mode=MODE_TYPE)
    _Target_targetName = CHOICE(name='targetName', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    _Target_targetGroup = CHOICE(name='targetGroup', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    _Target_targetCert = SEQ(name='targetCert', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'TargetCert')))
    Target._cont = ASN1Dict([
        ('targetName', _Target_targetName),
        ('targetGroup', _Target_targetGroup),
        ('targetCert', _Target_targetCert),
        ])
    Target._ext = None
    
    #-----< TargetCert >-----#
    TargetCert = SEQ(name='TargetCert', mode=MODE_TYPE)
    _TargetCert_targetCertificate = SEQ(name='targetCertificate', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'IssuerSerial')))
    _TargetCert_targetName = CHOICE(name='targetName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')), opt=True)
    _TargetCert_certDigestInfo = SEQ(name='certDigestInfo', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'ObjectDigestInfo')), opt=True)
    TargetCert._cont = ASN1Dict([
        ('targetCertificate', _TargetCert_targetCertificate),
        ('targetName', _TargetCert_targetName),
        ('certDigestInfo', _TargetCert_certDigestInfo),
        ])
    TargetCert._ext = None
    
    #-----< AAControls >-----#
    AAControls = SEQ(name='AAControls', mode=MODE_TYPE)
    _AAControls_pathLenConstraint = INT(name='pathLenConstraint', mode=MODE_TYPE, opt=True)
    _AAControls_pathLenConstraint._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    _AAControls_permittedAttrs = SEQ_OF(name='permittedAttrs', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'AttrSpec')), opt=True)
    _AAControls_excludedAttrs = SEQ_OF(name='excludedAttrs', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'AttrSpec')), opt=True)
    _AAControls_permitUnSpecified = BOOL(name='permitUnSpecified', mode=MODE_TYPE, default=True)
    AAControls._cont = ASN1Dict([
        ('pathLenConstraint', _AAControls_pathLenConstraint),
        ('permittedAttrs', _AAControls_permittedAttrs),
        ('excludedAttrs', _AAControls_excludedAttrs),
        ('permitUnSpecified', _AAControls_permitUnSpecified),
        ])
    AAControls._ext = None
    
    #-----< AttrSpec >-----#
    AttrSpec = SEQ_OF(name='AttrSpec', mode=MODE_TYPE)
    _AttrSpec__item_ = OID(name='_item_', mode=MODE_TYPE)
    AttrSpec._cont = _AttrSpec__item_
    
    #-----< ProxyInfo >-----#
    ProxyInfo = SEQ_OF(name='ProxyInfo', mode=MODE_TYPE)
    _ProxyInfo__item_ = SEQ_OF(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'Targets')))
    ProxyInfo._cont = _ProxyInfo__item_
    
    #-----< IetfAttrSyntax >-----#
    IetfAttrSyntax = SEQ(name='IetfAttrSyntax', mode=MODE_TYPE)
    _IetfAttrSyntax_policyAuthority = SEQ_OF(name='policyAuthority', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')), opt=True)
    _IetfAttrSyntax_values = SEQ_OF(name='values', mode=MODE_TYPE)
    __IetfAttrSyntax_values__item_ = CHOICE(name='_item_', mode=MODE_TYPE)
    ___IetfAttrSyntax_values__item__octets = OCT_STR(name='octets', mode=MODE_TYPE)
    ___IetfAttrSyntax_values__item__oid = OID(name='oid', mode=MODE_TYPE)
    ___IetfAttrSyntax_values__item__string = STR_UTF8(name='string', mode=MODE_TYPE)
    __IetfAttrSyntax_values__item_._cont = ASN1Dict([
        ('octets', ___IetfAttrSyntax_values__item__octets),
        ('oid', ___IetfAttrSyntax_values__item__oid),
        ('string', ___IetfAttrSyntax_values__item__string),
        ])
    __IetfAttrSyntax_values__item_._ext = None
    _IetfAttrSyntax_values._cont = __IetfAttrSyntax_values__item_
    IetfAttrSyntax._cont = ASN1Dict([
        ('policyAuthority', _IetfAttrSyntax_policyAuthority),
        ('values', _IetfAttrSyntax_values),
        ])
    IetfAttrSyntax._ext = None
    
    #-----< SvceAuthInfo >-----#
    SvceAuthInfo = SEQ(name='SvceAuthInfo', mode=MODE_TYPE)
    _SvceAuthInfo_service = CHOICE(name='service', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    _SvceAuthInfo_ident = CHOICE(name='ident', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    _SvceAuthInfo_authInfo = OCT_STR(name='authInfo', mode=MODE_TYPE, opt=True)
    SvceAuthInfo._cont = ASN1Dict([
        ('service', _SvceAuthInfo_service),
        ('ident', _SvceAuthInfo_ident),
        ('authInfo', _SvceAuthInfo_authInfo),
        ])
    SvceAuthInfo._ext = None
    
    #-----< RoleSyntax >-----#
    RoleSyntax = SEQ(name='RoleSyntax', mode=MODE_TYPE)
    _RoleSyntax_roleAuthority = SEQ_OF(name='roleAuthority', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')), opt=True)
    _RoleSyntax_roleName = CHOICE(name='roleName', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    RoleSyntax._cont = ASN1Dict([
        ('roleAuthority', _RoleSyntax_roleAuthority),
        ('roleName', _RoleSyntax_roleName),
        ])
    RoleSyntax._ext = None
    
    #-----< Clearance >-----#
    Clearance = SEQ(name='Clearance', mode=MODE_TYPE)
    _Clearance_policyId = OID(name='policyId', mode=MODE_TYPE)
    _Clearance_classList = BIT_STR(name='classList', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'ClassList')), default=(1, 2))
    _Clearance_securityCategories = SET_OF(name='securityCategories', mode=MODE_TYPE, opt=True)
    __Clearance_securityCategories__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'SecurityCategory')))
    ___Clearance_securityCategories__item__type = OID(name='type', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'SECURITY-CATEGORY'), ['id']))
    ____Clearance_securityCategories__item__type_tab = CLASS(name='_tab_SECURITY-CATEGORY', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'SECURITY-CATEGORY')))
    ____Clearance_securityCategories__item__type_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___Clearance_securityCategories__item__type._const_tab = ____Clearance_securityCategories__item__type_tab
    ___Clearance_securityCategories__item__type._const_tab_at = None
    ___Clearance_securityCategories__item__type._const_tab_id = 'id'
    ___Clearance_securityCategories__item__value = OPEN(name='value', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'SECURITY-CATEGORY'), ['Type']))
    ____Clearance_securityCategories__item__value_tab = CLASS(name='_tab_SECURITY-CATEGORY', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'SECURITY-CATEGORY')))
    ____Clearance_securityCategories__item__value_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___Clearance_securityCategories__item__value._const_tab = ____Clearance_securityCategories__item__value_tab
    ___Clearance_securityCategories__item__value._const_tab_at = ('..', 'type')
    ___Clearance_securityCategories__item__value._const_tab_id = 'Type'
    __Clearance_securityCategories__item_._cont = ASN1Dict([
        ('type', ___Clearance_securityCategories__item__type),
        ('value', ___Clearance_securityCategories__item__value),
        ])
    __Clearance_securityCategories__item_._ext = None
    _Clearance_securityCategories._cont = __Clearance_securityCategories__item_
    Clearance._cont = ASN1Dict([
        ('policyId', _Clearance_policyId),
        ('classList', _Clearance_classList),
        ('securityCategories', _Clearance_securityCategories),
        ])
    Clearance._ext = None
    
    #-----< Clearance-rfc3281 >-----#
    Clearance_rfc3281 = SEQ(name='Clearance-rfc3281', mode=MODE_TYPE)
    _Clearance_rfc3281_policyId = OID(name='policyId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Clearance_rfc3281_classList = BIT_STR(name='classList', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'ClassList')), default=(1, 2))
    _Clearance_rfc3281_securityCategories = SET_OF(name='securityCategories', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __Clearance_rfc3281_securityCategories__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'SecurityCategory-rfc3281')))
    ___Clearance_rfc3281_securityCategories__item__type = OID(name='type', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'SECURITY-CATEGORY'), ['id']))
    ____Clearance_rfc3281_securityCategories__item__type_tab = CLASS(name='_tab_SECURITY-CATEGORY', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'SECURITY-CATEGORY')))
    ____Clearance_rfc3281_securityCategories__item__type_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___Clearance_rfc3281_securityCategories__item__type._const_tab = ____Clearance_rfc3281_securityCategories__item__type_tab
    ___Clearance_rfc3281_securityCategories__item__type._const_tab_at = None
    ___Clearance_rfc3281_securityCategories__item__type._const_tab_id = 'id'
    ___Clearance_rfc3281_securityCategories__item__value = OPEN(name='value', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'SECURITY-CATEGORY'), ['Type']))
    ____Clearance_rfc3281_securityCategories__item__value_tab = CLASS(name='_tab_SECURITY-CATEGORY', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'SECURITY-CATEGORY')))
    ____Clearance_rfc3281_securityCategories__item__value_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___Clearance_rfc3281_securityCategories__item__value._const_tab = ____Clearance_rfc3281_securityCategories__item__value_tab
    ___Clearance_rfc3281_securityCategories__item__value._const_tab_at = ('..', 'type')
    ___Clearance_rfc3281_securityCategories__item__value._const_tab_id = 'Type'
    __Clearance_rfc3281_securityCategories__item_._cont = ASN1Dict([
        ('type', ___Clearance_rfc3281_securityCategories__item__type),
        ('value', ___Clearance_rfc3281_securityCategories__item__value),
        ])
    __Clearance_rfc3281_securityCategories__item_._ext = None
    _Clearance_rfc3281_securityCategories._cont = __Clearance_rfc3281_securityCategories__item_
    Clearance_rfc3281._cont = ASN1Dict([
        ('policyId', _Clearance_rfc3281_policyId),
        ('classList', _Clearance_rfc3281_classList),
        ('securityCategories', _Clearance_rfc3281_securityCategories),
        ])
    Clearance_rfc3281._ext = None
    
    #-----< ClassList >-----#
    ClassList = BIT_STR(name='ClassList', mode=MODE_TYPE)
    ClassList._cont = ASN1Dict([('unmarked', 0), ('unclassified', 1), ('restricted', 2), ('confidential', 3), ('secret', 4), ('topSecret', 5)])
    
    #-----< SupportedSecurityCategories >-----#
    SupportedSecurityCategories = CLASS(name='SupportedSecurityCategories', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'SECURITY-CATEGORY')))
    SupportedSecurityCategories._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< SecurityCategory-rfc3281 >-----#
    SecurityCategory_rfc3281 = SEQ(name='SecurityCategory-rfc3281', mode=MODE_TYPE, param=True)
    
    #-----< ACClearAttrs >-----#
    ACClearAttrs = SEQ(name='ACClearAttrs', mode=MODE_TYPE)
    _ACClearAttrs_acIssuer = CHOICE(name='acIssuer', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    _ACClearAttrs_acSerial = INT(name='acSerial', mode=MODE_TYPE)
    _ACClearAttrs_attrs = SEQ_OF(name='attrs', mode=MODE_TYPE)
    __ACClearAttrs_attrs__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'AttributeSet')))
    ___ACClearAttrs_attrs__item__type = OID(name='type', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['id']))
    ____ACClearAttrs_attrs__item__type_tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _____ACClearAttrs_attrs__item__type_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'SvceAuthInfo')))
    _____ACClearAttrs_attrs__item__type_tab_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'SvceAuthInfo')))
    _____ACClearAttrs_attrs__item__type_tab_val_Type_2 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'IetfAttrSyntax')))
    _____ACClearAttrs_attrs__item__type_tab_val_Type_3 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'IetfAttrSyntax')))
    _____ACClearAttrs_attrs__item__type_tab_val_Type_4 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'RoleSyntax')))
    _____ACClearAttrs_attrs__item__type_tab_val_Type_5 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'Clearance')))
    _____ACClearAttrs_attrs__item__type_tab_val_Type_6 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'ContentInfo')))
    ____ACClearAttrs_attrs__item__type_tab._val = ASN1Set(rv=[dict([('Type', _____ACClearAttrs_attrs__item__type_tab_val_Type_0), ('id', (1, 3, 6, 1, 5, 5, 7, 10, 1))]), dict([('Type', _____ACClearAttrs_attrs__item__type_tab_val_Type_1), ('id', (1, 3, 6, 1, 5, 5, 7, 10, 2))]), dict([('Type', _____ACClearAttrs_attrs__item__type_tab_val_Type_2), ('id', (1, 3, 6, 1, 5, 5, 7, 10, 3))]), dict([('Type', _____ACClearAttrs_attrs__item__type_tab_val_Type_3), ('id', (1, 3, 6, 1, 5, 5, 7, 10, 4))]), dict([('Type', _____ACClearAttrs_attrs__item__type_tab_val_Type_4), ('id', (2, 5, 4, 72))]), dict([('Type', _____ACClearAttrs_attrs__item__type_tab_val_Type_5), ('id', (2, 5, 4, 55))]), dict([('Type', _____ACClearAttrs_attrs__item__type_tab_val_Type_6), ('id', (1, 3, 6, 1, 5, 5, 7, 10, 6))])], rr=[], ev=None, er=[])
    ___ACClearAttrs_attrs__item__type._const_tab = ____ACClearAttrs_attrs__item__type_tab
    ___ACClearAttrs_attrs__item__type._const_tab_at = None
    ___ACClearAttrs_attrs__item__type._const_tab_id = 'id'
    ___ACClearAttrs_attrs__item__values = SET_OF(name='values', mode=MODE_TYPE)
    ____ACClearAttrs_attrs__item__values__item_ = OPEN(name='_item_', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['Type']))
    ____ACClearAttrs_attrs__item__values__item_._const_tab = ____ACClearAttrs_attrs__item__type_tab
    ____ACClearAttrs_attrs__item__values__item_._const_tab_at = ('..', '..', 'type')
    ____ACClearAttrs_attrs__item__values__item_._const_tab_id = 'Type'
    ___ACClearAttrs_attrs__item__values._cont = ____ACClearAttrs_attrs__item__values__item_
    ___ACClearAttrs_attrs__item__values._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    __ACClearAttrs_attrs__item_._cont = ASN1Dict([
        ('type', ___ACClearAttrs_attrs__item__type),
        ('values', ___ACClearAttrs_attrs__item__values),
        ])
    __ACClearAttrs_attrs__item_._ext = None
    _ACClearAttrs_attrs._cont = __ACClearAttrs_attrs__item_
    ACClearAttrs._cont = ASN1Dict([
        ('acIssuer', _ACClearAttrs_acIssuer),
        ('acSerial', _ACClearAttrs_acSerial),
        ('attrs', _ACClearAttrs_attrs),
        ])
    ACClearAttrs._ext = None
    
    _all_ = [
        AttributeCertExtensions,
        _AttributeCertExtensions_val_ExtnType_0,
        _AttributeCertExtensions_val_ExtnType_1,
        _AttributeCertExtensions_val_ExtnType_2,
        _AttributeCertExtensions_val_ExtnType_3,
        _AttributeCertExtensions_val_ExtnType_4,
        _AttributeCertExtensions_val_ExtnType_5,
        _AttributeCertExtensions_val_ExtnType_6,
        _AttributeCertExtensions_val_ExtnType_7,
        ext_auditIdentity,
        _ext_auditIdentity_val_ExtnType,
        ext_targetInformation,
        _ext_targetInformation_val_ExtnType,
        ext_noRevAvail,
        _ext_noRevAvail_val_ExtnType,
        ext_ac_proxying,
        _ext_ac_proxying_val_ExtnType,
        ext_aaControls,
        _ext_aaControls_val_ExtnType,
        AttributesDefined,
        _AttributesDefined_val_Type_0,
        _AttributesDefined_val_Type_1,
        _AttributesDefined_val_Type_2,
        _AttributesDefined_val_Type_3,
        _AttributesDefined_val_Type_4,
        _AttributesDefined_val_Type_5,
        _AttributesDefined_val_Type_6,
        at_authenticationInfo,
        _at_authenticationInfo_val_Type,
        at_accesIdentity,
        _at_accesIdentity_val_Type,
        at_chargingIdentity,
        _at_chargingIdentity_val_Type,
        at_group,
        _at_group_val_Type,
        at_role,
        _at_role_val_Type,
        at_clearance,
        _at_clearance_val_Type,
        at_clearance_RFC3281,
        _at_clearance_RFC3281_val_Type,
        at_encAttrs,
        _at_encAttrs_val_Type,
        id_pe_ac_auditIdentity,
        id_pe_aaControls,
        id_pe_ac_proxying,
        id_ce_targetInformation,
        id_ce_noRevAvail,
        id_aca,
        id_aca_authenticationInfo,
        id_aca_accessIdentity,
        id_aca_chargingIdentity,
        id_aca_group,
        id_aca_encAttrs,
        id_at_role,
        id_at_clearance,
        id_at_clearance_rfc3281,
        _AttributeCertificate_toBeSigned,
        ___AttributeCertificate_algorithmIdentifier_algorithm_tab,
        ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0,
        ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_1,
        ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_2,
        ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_3,
        ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_3,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0,
        ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_4,
        ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_4,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1,
        ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_5,
        ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_5,
        ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_6,
        ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_6,
        ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_7,
        ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_7,
        ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_8,
        ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_8,
        ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_9,
        ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_9,
        ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Value_10,
        ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_10,
        ____AttributeCertificate_algorithmIdentifier_algorithm_tab_val_Params_11,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1,
        __AttributeCertificate_algorithmIdentifier_algorithm,
        __AttributeCertificate_algorithmIdentifier_parameters,
        _AttributeCertificate_algorithmIdentifier,
        __AttributeCertificate_signature_contain,
        _AttributeCertificate_signature,
        AttributeCertificate,
        _AttributeCertificateInfo_version,
        _AttributeCertificateInfo_holder,
        _AttributeCertificateInfo_issuer,
        ___AttributeCertificateInfo_signature_algorithm_tab,
        ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_0,
        ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_1,
        ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_2,
        ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_3,
        ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_3,
        ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_4,
        ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_4,
        ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_5,
        ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_5,
        ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_6,
        ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_6,
        ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_7,
        ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_7,
        ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_8,
        ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_8,
        ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_9,
        ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_9,
        ____AttributeCertificateInfo_signature_algorithm_tab_val_Value_10,
        ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_10,
        ____AttributeCertificateInfo_signature_algorithm_tab_val_Params_11,
        __AttributeCertificateInfo_signature_algorithm,
        __AttributeCertificateInfo_signature_parameters,
        _AttributeCertificateInfo_signature,
        _AttributeCertificateInfo_serialNumber,
        _AttributeCertificateInfo_attrCertValidityPeriod,
        ____AttributeCertificateInfo_attributes__item__type_tab,
        _____AttributeCertificateInfo_attributes__item__type_tab_val_Type_0,
        _____AttributeCertificateInfo_attributes__item__type_tab_val_Type_1,
        _____AttributeCertificateInfo_attributes__item__type_tab_val_Type_2,
        _____AttributeCertificateInfo_attributes__item__type_tab_val_Type_3,
        _____AttributeCertificateInfo_attributes__item__type_tab_val_Type_4,
        _____AttributeCertificateInfo_attributes__item__type_tab_val_Type_5,
        _____AttributeCertificateInfo_attributes__item__type_tab_val_Type_6,
        ___AttributeCertificateInfo_attributes__item__type,
        ____AttributeCertificateInfo_attributes__item__values__item_,
        ___AttributeCertificateInfo_attributes__item__values,
        __AttributeCertificateInfo_attributes__item_,
        _AttributeCertificateInfo_attributes,
        _AttributeCertificateInfo_issuerUniqueID,
        ____AttributeCertificateInfo_extensions__item__extnID_tab,
        _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_0,
        _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_1,
        _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_2,
        _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_3,
        _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_4,
        _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_5,
        _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_6,
        _____AttributeCertificateInfo_extensions__item__extnID_tab_val_ExtnType_7,
        ___AttributeCertificateInfo_extensions__item__extnID,
        ___AttributeCertificateInfo_extensions__item__critical,
        ____AttributeCertificateInfo_extensions__item__extnValue_contain,
        ___AttributeCertificateInfo_extensions__item__extnValue,
        __AttributeCertificateInfo_extensions__item_,
        _AttributeCertificateInfo_extensions,
        AttributeCertificateInfo,
        AttCertVersion,
        _Holder_baseCertificateID,
        _Holder_entityName,
        _Holder_objectDigestInfo,
        Holder,
        _ObjectDigestInfo_digestedObjectType,
        _ObjectDigestInfo_otherObjectTypeID,
        ___ObjectDigestInfo_digestAlgorithm_algorithm_tab,
        __ObjectDigestInfo_digestAlgorithm_algorithm,
        ___ObjectDigestInfo_digestAlgorithm_parameters_tab,
        __ObjectDigestInfo_digestAlgorithm_parameters,
        _ObjectDigestInfo_digestAlgorithm,
        _ObjectDigestInfo_objectDigest,
        ObjectDigestInfo,
        _AttCertIssuer_v1Form,
        _AttCertIssuer_v2Form,
        AttCertIssuer,
        _V2Form_issuerName,
        _V2Form_baseCertificateID,
        _V2Form_objectDigestInfo,
        V2Form,
        _IssuerSerial_issuer,
        _IssuerSerial_serial,
        _IssuerSerial_issuerUID,
        IssuerSerial,
        _AttCertValidityPeriod_notBeforeTime,
        _AttCertValidityPeriod_notAfterTime,
        AttCertValidityPeriod,
        _Targets__item_,
        Targets,
        _Target_targetName,
        _Target_targetGroup,
        _Target_targetCert,
        Target,
        _TargetCert_targetCertificate,
        _TargetCert_targetName,
        _TargetCert_certDigestInfo,
        TargetCert,
        _AAControls_pathLenConstraint,
        _AAControls_permittedAttrs,
        _AAControls_excludedAttrs,
        _AAControls_permitUnSpecified,
        AAControls,
        _AttrSpec__item_,
        AttrSpec,
        _ProxyInfo__item_,
        ProxyInfo,
        _IetfAttrSyntax_policyAuthority,
        ___IetfAttrSyntax_values__item__octets,
        ___IetfAttrSyntax_values__item__oid,
        ___IetfAttrSyntax_values__item__string,
        __IetfAttrSyntax_values__item_,
        _IetfAttrSyntax_values,
        IetfAttrSyntax,
        _SvceAuthInfo_service,
        _SvceAuthInfo_ident,
        _SvceAuthInfo_authInfo,
        SvceAuthInfo,
        _RoleSyntax_roleAuthority,
        _RoleSyntax_roleName,
        RoleSyntax,
        _Clearance_policyId,
        _Clearance_classList,
        ____Clearance_securityCategories__item__type_tab,
        ___Clearance_securityCategories__item__type,
        ____Clearance_securityCategories__item__value_tab,
        ___Clearance_securityCategories__item__value,
        __Clearance_securityCategories__item_,
        _Clearance_securityCategories,
        Clearance,
        _Clearance_rfc3281_policyId,
        _Clearance_rfc3281_classList,
        ____Clearance_rfc3281_securityCategories__item__type_tab,
        ___Clearance_rfc3281_securityCategories__item__type,
        ____Clearance_rfc3281_securityCategories__item__value_tab,
        ___Clearance_rfc3281_securityCategories__item__value,
        __Clearance_rfc3281_securityCategories__item_,
        _Clearance_rfc3281_securityCategories,
        Clearance_rfc3281,
        ClassList,
        SupportedSecurityCategories,
        _ACClearAttrs_acIssuer,
        _ACClearAttrs_acSerial,
        ____ACClearAttrs_attrs__item__type_tab,
        _____ACClearAttrs_attrs__item__type_tab_val_Type_0,
        _____ACClearAttrs_attrs__item__type_tab_val_Type_1,
        _____ACClearAttrs_attrs__item__type_tab_val_Type_2,
        _____ACClearAttrs_attrs__item__type_tab_val_Type_3,
        _____ACClearAttrs_attrs__item__type_tab_val_Type_4,
        _____ACClearAttrs_attrs__item__type_tab_val_Type_5,
        _____ACClearAttrs_attrs__item__type_tab_val_Type_6,
        ___ACClearAttrs_attrs__item__type,
        ____ACClearAttrs_attrs__item__values__item_,
        ___ACClearAttrs_attrs__item__values,
        __ACClearAttrs_attrs__item_,
        _ACClearAttrs_attrs,
        ACClearAttrs,
    ]

class PKIXCRMF_2009:

    _name_  = 'PKIXCRMF-2009'
    _oid_   = [1, 3, 6, 1, 5, 5, 7, 0, 55]
    
    _obj_ = [
        'id-pkip',
        'id-smime',
        'id-ct',
        'CertReqMessages',
        'CertReqMsg',
        'CertRequest',
        'CertTemplate',
        'OptionalValidity',
        'Controls',
        'ProofOfPossession',
        'POPOSigningKey',
        'POPOSigningKeyInput',
        'PKMACValue',
        'id-PasswordBasedMac',
        'Password-MACAlgorithms',
        'PBMParameter',
        'DigestAlgorithms',
        'MACAlgorithms',
        'POPOPrivKey',
        'SubsequentMessage',
        'ct-encKeyWithID',
        'id-ct-encKeyWithID',
        'EncKeyWithID',
        'PrivateKeyInfo',
        'Attributes',
        'PrivateKeyAttributes',
        'id-regCtrl',
        'RegControlSet',
        'regCtrl-regToken',
        'id-regCtrl-regToken',
        'RegToken',
        'regCtrl-authenticator',
        'id-regCtrl-authenticator',
        'Authenticator',
        'regCtrl-pkiPublicationInfo',
        'id-regCtrl-pkiPublicationInfo',
        'PKIPublicationInfo',
        'SinglePubInfo',
        'regCtrl-pkiArchiveOptions',
        'id-regCtrl-pkiArchiveOptions',
        'PKIArchiveOptions',
        'EncryptedKey',
        'EncryptedValue',
        'KeyGenParameters',
        'regCtrl-oldCertID',
        'id-regCtrl-oldCertID',
        'OldCertId',
        'CertId',
        'regCtrl-protocolEncrKey',
        'id-regCtrl-protocolEncrKey',
        'ProtocolEncrKey',
        'id-regInfo',
        'RegInfoSet',
        'regInfo-utf8Pairs',
        'id-regInfo-utf8Pairs',
        'UTF8Pairs',
        'regInfo-certReq',
        'id-regInfo-certReq',
        'CertReq',
        ]
    _type_ = [
        'CertReqMessages',
        'CertReqMsg',
        'CertRequest',
        'CertTemplate',
        'OptionalValidity',
        'Controls',
        'ProofOfPossession',
        'POPOSigningKey',
        'POPOSigningKeyInput',
        'PKMACValue',
        'PBMParameter',
        'POPOPrivKey',
        'SubsequentMessage',
        'EncKeyWithID',
        'PrivateKeyInfo',
        'Attributes',
        'RegToken',
        'Authenticator',
        'PKIPublicationInfo',
        'SinglePubInfo',
        'PKIArchiveOptions',
        'EncryptedKey',
        'EncryptedValue',
        'KeyGenParameters',
        'OldCertId',
        'CertId',
        'ProtocolEncrKey',
        'UTF8Pairs',
        'CertReq',
        ]
    _set_ = [
        'Password-MACAlgorithms',
        'DigestAlgorithms',
        'MACAlgorithms',
        'PrivateKeyAttributes',
        'RegControlSet',
        'RegInfoSet',
        ]
    _val_ = [
        'id-pkip',
        'id-smime',
        'id-ct',
        'id-PasswordBasedMac',
        'ct-encKeyWithID',
        'id-ct-encKeyWithID',
        'id-regCtrl',
        'regCtrl-regToken',
        'id-regCtrl-regToken',
        'regCtrl-authenticator',
        'id-regCtrl-authenticator',
        'regCtrl-pkiPublicationInfo',
        'id-regCtrl-pkiPublicationInfo',
        'regCtrl-pkiArchiveOptions',
        'id-regCtrl-pkiArchiveOptions',
        'regCtrl-oldCertID',
        'id-regCtrl-oldCertID',
        'regCtrl-protocolEncrKey',
        'id-regCtrl-protocolEncrKey',
        'id-regInfo',
        'regInfo-utf8Pairs',
        'id-regInfo-utf8Pairs',
        'regInfo-certReq',
        'id-regInfo-certReq',
        ]
    _class_ = [
        'Password-MACAlgorithms',
        'DigestAlgorithms',
        'MACAlgorithms',
        'ct-encKeyWithID',
        'PrivateKeyAttributes',
        'RegControlSet',
        'regCtrl-regToken',
        'regCtrl-authenticator',
        'regCtrl-pkiPublicationInfo',
        'regCtrl-pkiArchiveOptions',
        'regCtrl-oldCertID',
        'regCtrl-protocolEncrKey',
        'RegInfoSet',
        'regInfo-utf8Pairs',
        'regInfo-certReq',
        ]
    _param_ = [
        ]
    
    #-----< id-pkip >-----#
    id_pkip = OID(name='id-pkip', mode=MODE_VALUE)
    id_pkip._val = (1, 3, 6, 1, 5, 5, 7, 5)
    
    #-----< id-smime >-----#
    id_smime = OID(name='id-smime', mode=MODE_VALUE)
    id_smime._val = (1, 2, 840, 113549, 1, 9, 16)
    
    #-----< id-ct >-----#
    id_ct = OID(name='id-ct', mode=MODE_VALUE)
    id_ct._val = (1, 2, 840, 113549, 1, 9, 16, 1)
    
    #-----< CertReqMessages >-----#
    CertReqMessages = SEQ_OF(name='CertReqMessages', mode=MODE_TYPE)
    _CertReqMessages__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'CertReqMsg')))
    CertReqMessages._cont = _CertReqMessages__item_
    CertReqMessages._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    
    #-----< CertReqMsg >-----#
    CertReqMsg = SEQ(name='CertReqMsg', mode=MODE_TYPE)
    _CertReqMsg_certReq = SEQ(name='certReq', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'CertRequest')))
    _CertReqMsg_popo = CHOICE(name='popo', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'ProofOfPossession')), opt=True)
    _CertReqMsg_regInfo = SEQ_OF(name='regInfo', mode=MODE_TYPE, opt=True)
    __CertReqMsg_regInfo__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'SingleAttribute')))
    ___CertReqMsg_regInfo__item__type = OID(name='type', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['id']))
    ____CertReqMsg_regInfo__item__type_tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _____CertReqMsg_regInfo__item__type_tab_val_Type_0 = STR_UTF8(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'UTF8Pairs')))
    _____CertReqMsg_regInfo__item__type_tab_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'CertReq')))
    ____CertReqMsg_regInfo__item__type_tab._val = ASN1Set(rv=[dict([('Type', _____CertReqMsg_regInfo__item__type_tab_val_Type_0), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 2, 1))]), dict([('Type', _____CertReqMsg_regInfo__item__type_tab_val_Type_1), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 2, 2))])], rr=[], ev=None, er=[])
    ___CertReqMsg_regInfo__item__type._const_tab = ____CertReqMsg_regInfo__item__type_tab
    ___CertReqMsg_regInfo__item__type._const_tab_at = None
    ___CertReqMsg_regInfo__item__type._const_tab_id = 'id'
    ___CertReqMsg_regInfo__item__value = OPEN(name='value', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['Type']))
    ___CertReqMsg_regInfo__item__value._const_tab = ____CertReqMsg_regInfo__item__type_tab
    ___CertReqMsg_regInfo__item__value._const_tab_at = ('..', 'type')
    ___CertReqMsg_regInfo__item__value._const_tab_id = 'Type'
    __CertReqMsg_regInfo__item_._cont = ASN1Dict([
        ('type', ___CertReqMsg_regInfo__item__type),
        ('value', ___CertReqMsg_regInfo__item__value),
        ])
    __CertReqMsg_regInfo__item_._ext = None
    _CertReqMsg_regInfo._cont = __CertReqMsg_regInfo__item_
    _CertReqMsg_regInfo._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    CertReqMsg._cont = ASN1Dict([
        ('certReq', _CertReqMsg_certReq),
        ('popo', _CertReqMsg_popo),
        ('regInfo', _CertReqMsg_regInfo),
        ])
    CertReqMsg._ext = None
    
    #-----< CertRequest >-----#
    CertRequest = SEQ(name='CertRequest', mode=MODE_TYPE)
    _CertRequest_certReqId = INT(name='certReqId', mode=MODE_TYPE)
    _CertRequest_certTemplate = SEQ(name='certTemplate', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'CertTemplate')))
    _CertRequest_controls = SEQ_OF(name='controls', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'Controls')), opt=True)
    CertRequest._cont = ASN1Dict([
        ('certReqId', _CertRequest_certReqId),
        ('certTemplate', _CertRequest_certTemplate),
        ('controls', _CertRequest_controls),
        ])
    CertRequest._ext = None
    
    #-----< CertTemplate >-----#
    CertTemplate = SEQ(name='CertTemplate', mode=MODE_TYPE)
    _CertTemplate_version = INT(name='version', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Explicit-2009', 'Version')), opt=True)
    _CertTemplate_serialNumber = INT(name='serialNumber', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CertTemplate_signingAlg = SEQ(name='signingAlg', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')), opt=True)
    __CertTemplate_signingAlg_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['id']))
    ___CertTemplate_signingAlg_algorithm_tab = CLASS(name='_tab_SIGNATURE-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    ____CertTemplate_signingAlg_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ____CertTemplate_signingAlg_algorithm_tab_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    ____CertTemplate_signingAlg_algorithm_tab_val_Params_2 = NULL(name='Params', mode=MODE_TYPE)
    ____CertTemplate_signingAlg_algorithm_tab_val_Value_3 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____CertTemplate_signingAlg_algorithm_tab_val_Params_3 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0 = INT(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSAPublicKey')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Params')))
    ____CertTemplate_signingAlg_algorithm_tab_val_Value_4 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____CertTemplate_signingAlg_algorithm_tab_val_Params_4 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1 = OCT_STR(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECPoint')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1 = CHOICE(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECParameters')))
    ____CertTemplate_signingAlg_algorithm_tab_val_Value_5 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____CertTemplate_signingAlg_algorithm_tab_val_Params_5 = NULL(name='Params', mode=MODE_TYPE)
    ____CertTemplate_signingAlg_algorithm_tab_val_Value_6 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____CertTemplate_signingAlg_algorithm_tab_val_Params_6 = NULL(name='Params', mode=MODE_TYPE)
    ____CertTemplate_signingAlg_algorithm_tab_val_Value_7 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____CertTemplate_signingAlg_algorithm_tab_val_Params_7 = NULL(name='Params', mode=MODE_TYPE)
    ____CertTemplate_signingAlg_algorithm_tab_val_Value_8 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____CertTemplate_signingAlg_algorithm_tab_val_Params_8 = NULL(name='Params', mode=MODE_TYPE)
    ____CertTemplate_signingAlg_algorithm_tab_val_Value_9 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____CertTemplate_signingAlg_algorithm_tab_val_Params_9 = NULL(name='Params', mode=MODE_TYPE)
    ____CertTemplate_signingAlg_algorithm_tab_val_Value_10 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____CertTemplate_signingAlg_algorithm_tab_val_Params_10 = NULL(name='Params', mode=MODE_TYPE)
    ____CertTemplate_signingAlg_algorithm_tab_val_Params_11 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    ___CertTemplate_signingAlg_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 2)), ('Params', ____CertTemplate_signingAlg_algorithm_tab_val_Params_0), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 2))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 4)), ('Params', ____CertTemplate_signingAlg_algorithm_tab_val_Params_1), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 5)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 5)), ('Params', ____CertTemplate_signingAlg_algorithm_tab_val_Params_2), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 5))]))]), dict([('id', (1, 2, 840, 10040, 4, 3)), ('Value', ____CertTemplate_signingAlg_algorithm_tab_val_Value_3), ('Params', ____CertTemplate_signingAlg_algorithm_tab_val_Params_3), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10040, 4, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 1)), ('Value', ____CertTemplate_signingAlg_algorithm_tab_val_Value_4), ('Params', ____CertTemplate_signingAlg_algorithm_tab_val_Params_4), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 1))]))])], rr=[], ev=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1)), ('Value', ____CertTemplate_signingAlg_algorithm_tab_val_Value_5), ('Params', ____CertTemplate_signingAlg_algorithm_tab_val_Params_5), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1))]))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2)), ('Value', ____CertTemplate_signingAlg_algorithm_tab_val_Value_6), ('Params', ____CertTemplate_signingAlg_algorithm_tab_val_Params_6), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 1)), ('Value', ____CertTemplate_signingAlg_algorithm_tab_val_Value_7), ('Params', ____CertTemplate_signingAlg_algorithm_tab_val_Params_7), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 1))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 2)), ('Value', ____CertTemplate_signingAlg_algorithm_tab_val_Value_8), ('Params', ____CertTemplate_signingAlg_algorithm_tab_val_Params_8), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 3)), ('Value', ____CertTemplate_signingAlg_algorithm_tab_val_Value_9), ('Params', ____CertTemplate_signingAlg_algorithm_tab_val_Params_9), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 4)), ('Value', ____CertTemplate_signingAlg_algorithm_tab_val_Value_10), ('Params', ____CertTemplate_signingAlg_algorithm_tab_val_Params_10), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('Params', ____CertTemplate_signingAlg_algorithm_tab_val_Params_11), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1), ('paramPresence', 'optional'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 10))]))])], er=[])
    __CertTemplate_signingAlg_algorithm._const_tab = ___CertTemplate_signingAlg_algorithm_tab
    __CertTemplate_signingAlg_algorithm._const_tab_at = None
    __CertTemplate_signingAlg_algorithm._const_tab_id = 'id'
    __CertTemplate_signingAlg_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['Params']), opt=True)
    __CertTemplate_signingAlg_parameters._const_tab = ___CertTemplate_signingAlg_algorithm_tab
    __CertTemplate_signingAlg_parameters._const_tab_at = ('..', 'algorithm')
    __CertTemplate_signingAlg_parameters._const_tab_id = 'Params'
    _CertTemplate_signingAlg._cont = ASN1Dict([
        ('algorithm', __CertTemplate_signingAlg_algorithm),
        ('parameters', __CertTemplate_signingAlg_parameters),
        ])
    _CertTemplate_signingAlg._ext = None
    _CertTemplate_issuer = CHOICE(name='issuer', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Explicit-2009', 'Name')), opt=True)
    _CertTemplate_validity = SEQ(name='validity', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIXCRMF-2009', 'OptionalValidity')), opt=True)
    _CertTemplate_subject = CHOICE(name='subject', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Explicit-2009', 'Name')), opt=True)
    _CertTemplate_publicKey = SEQ(name='publicKey', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Explicit-2009', 'SubjectPublicKeyInfo')), opt=True)
    _CertTemplate_issuerUID = BIT_STR(name='issuerUID', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Explicit-2009', 'UniqueIdentifier')), opt=True)
    _CertTemplate_subjectUID = BIT_STR(name='subjectUID', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Explicit-2009', 'UniqueIdentifier')), opt=True)
    _CertTemplate_extensions = SEQ_OF(name='extensions', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'Extensions')), opt=True)
    __CertTemplate_extensions__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'Extension')))
    ___CertTemplate_extensions__item__extnID = OID(name='extnID', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'EXTENSION'), ['id']))
    ____CertTemplate_extensions__item__extnID_tab = CLASS(name='_tab_EXTENSION', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_0 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'AuthorityKeyIdentifier')))
    _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_1 = OCT_STR(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'KeyIdentifier')))
    _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_2 = BIT_STR(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'KeyUsage')))
    _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_3 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'PrivateKeyUsagePeriod')))
    _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_4 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CertificatePolicies')))
    _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_5 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'PolicyMappings')))
    _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_6 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_7 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_8 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'SubjectDirectoryAttributes')))
    _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_9 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'BasicConstraints')))
    _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_10 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'NameConstraints')))
    _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_11 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'PolicyConstraints')))
    _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_12 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'ExtKeyUsageSyntax')))
    _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_13 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLDistributionPoints')))
    _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_14 = INT(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'SkipCerts')))
    _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_15 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLDistributionPoints')))
    _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_16 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'AuthorityInfoAccessSyntax')))
    _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_17 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'SubjectInfoAccessSyntax')))
    ____CertTemplate_extensions__item__extnID_tab._val = ASN1Set(rv=[dict([('ExtnType', _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_0), ('id', (2, 5, 29, 35))]), dict([('ExtnType', _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_1), ('id', (2, 5, 29, 14))]), dict([('ExtnType', _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_2), ('id', (2, 5, 29, 15))]), dict([('ExtnType', _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_3), ('id', (2, 5, 29, 16))]), dict([('ExtnType', _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_4), ('id', (2, 5, 29, 32))]), dict([('ExtnType', _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_5), ('id', (2, 5, 29, 33))]), dict([('ExtnType', _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_6), ('id', (2, 5, 29, 17))]), dict([('ExtnType', _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_7), ('id', (2, 5, 29, 18))]), dict([('ExtnType', _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_8), ('id', (2, 5, 29, 9))]), dict([('ExtnType', _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_9), ('id', (2, 5, 29, 19))]), dict([('ExtnType', _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_10), ('id', (2, 5, 29, 30))]), dict([('ExtnType', _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_11), ('id', (2, 5, 29, 36))]), dict([('ExtnType', _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_12), ('id', (2, 5, 29, 37))]), dict([('ExtnType', _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_13), ('id', (2, 5, 29, 31))]), dict([('ExtnType', _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_14), ('id', (2, 5, 29, 54))]), dict([('ExtnType', _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_15), ('id', (2, 5, 29, 46))]), dict([('ExtnType', _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_16), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 1))]), dict([('ExtnType', _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_17), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 11))])], rr=[], ev=None, er=[])
    ___CertTemplate_extensions__item__extnID._const_tab = ____CertTemplate_extensions__item__extnID_tab
    ___CertTemplate_extensions__item__extnID._const_tab_at = None
    ___CertTemplate_extensions__item__extnID._const_tab_id = 'id'
    ___CertTemplate_extensions__item__critical = BOOL(name='critical', mode=MODE_TYPE, default=False)
    ___CertTemplate_extensions__item__extnValue = OCT_STR(name='extnValue', mode=MODE_TYPE)
    ____CertTemplate_extensions__item__extnValue_contain = OPEN(name='_cont_extnValue', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'EXTENSION'), ['ExtnType']))
    ____CertTemplate_extensions__item__extnValue_contain._const_tab = ____CertTemplate_extensions__item__extnID_tab
    ____CertTemplate_extensions__item__extnValue_contain._const_tab_at = ('..', 'extnID')
    ____CertTemplate_extensions__item__extnValue_contain._const_tab_id = 'ExtnType'
    ___CertTemplate_extensions__item__extnValue._const_cont = ____CertTemplate_extensions__item__extnValue_contain
    __CertTemplate_extensions__item_._cont = ASN1Dict([
        ('extnID', ___CertTemplate_extensions__item__extnID),
        ('critical', ___CertTemplate_extensions__item__critical),
        ('extnValue', ___CertTemplate_extensions__item__extnValue),
        ])
    __CertTemplate_extensions__item_._ext = None
    _CertTemplate_extensions._cont = __CertTemplate_extensions__item_
    _CertTemplate_extensions._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    CertTemplate._cont = ASN1Dict([
        ('version', _CertTemplate_version),
        ('serialNumber', _CertTemplate_serialNumber),
        ('signingAlg', _CertTemplate_signingAlg),
        ('issuer', _CertTemplate_issuer),
        ('validity', _CertTemplate_validity),
        ('subject', _CertTemplate_subject),
        ('publicKey', _CertTemplate_publicKey),
        ('issuerUID', _CertTemplate_issuerUID),
        ('subjectUID', _CertTemplate_subjectUID),
        ('extensions', _CertTemplate_extensions),
        ])
    CertTemplate._ext = None
    
    #-----< OptionalValidity >-----#
    OptionalValidity = SEQ(name='OptionalValidity', mode=MODE_TYPE)
    _OptionalValidity_notBefore = CHOICE(name='notBefore', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Explicit-2009', 'Time')), opt=True)
    _OptionalValidity_notAfter = CHOICE(name='notAfter', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Explicit-2009', 'Time')), opt=True)
    OptionalValidity._cont = ASN1Dict([
        ('notBefore', _OptionalValidity_notBefore),
        ('notAfter', _OptionalValidity_notAfter),
        ])
    OptionalValidity._ext = None
    
    #-----< Controls >-----#
    Controls = SEQ_OF(name='Controls', mode=MODE_TYPE)
    _Controls__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'SingleAttribute')))
    __Controls__item__type = OID(name='type', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['id']))
    ___Controls__item__type_tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    ____Controls__item__type_tab_val_Type_0 = STR_UTF8(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'RegToken')))
    ____Controls__item__type_tab_val_Type_1 = STR_UTF8(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'Authenticator')))
    ____Controls__item__type_tab_val_Type_2 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'PKIPublicationInfo')))
    ____Controls__item__type_tab_val_Type_3 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'PKIArchiveOptions')))
    ____Controls__item__type_tab_val_Type_4 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'OldCertId')))
    ____Controls__item__type_tab_val_Type_5 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'ProtocolEncrKey')))
    ___Controls__item__type_tab._val = ASN1Set(rv=[dict([('Type', ____Controls__item__type_tab_val_Type_0), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 1, 1))]), dict([('Type', ____Controls__item__type_tab_val_Type_1), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 1, 2))]), dict([('Type', ____Controls__item__type_tab_val_Type_2), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 1, 3))]), dict([('Type', ____Controls__item__type_tab_val_Type_3), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 1, 4))]), dict([('Type', ____Controls__item__type_tab_val_Type_4), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 1, 5))]), dict([('Type', ____Controls__item__type_tab_val_Type_5), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 1, 6))])], rr=[], ev=None, er=[])
    __Controls__item__type._const_tab = ___Controls__item__type_tab
    __Controls__item__type._const_tab_at = None
    __Controls__item__type._const_tab_id = 'id'
    __Controls__item__value = OPEN(name='value', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['Type']))
    __Controls__item__value._const_tab = ___Controls__item__type_tab
    __Controls__item__value._const_tab_at = ('..', 'type')
    __Controls__item__value._const_tab_id = 'Type'
    _Controls__item_._cont = ASN1Dict([
        ('type', __Controls__item__type),
        ('value', __Controls__item__value),
        ])
    _Controls__item_._ext = None
    Controls._cont = _Controls__item_
    Controls._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    
    #-----< ProofOfPossession >-----#
    ProofOfPossession = CHOICE(name='ProofOfPossession', mode=MODE_TYPE)
    _ProofOfPossession_raVerified = NULL(name='raVerified', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ProofOfPossession_signature = SEQ(name='signature', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIXCRMF-2009', 'POPOSigningKey')))
    _ProofOfPossession_keyEncipherment = CHOICE(name='keyEncipherment', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIXCRMF-2009', 'POPOPrivKey')))
    _ProofOfPossession_keyAgreement = CHOICE(name='keyAgreement', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIXCRMF-2009', 'POPOPrivKey')))
    ProofOfPossession._cont = ASN1Dict([
        ('raVerified', _ProofOfPossession_raVerified),
        ('signature', _ProofOfPossession_signature),
        ('keyEncipherment', _ProofOfPossession_keyEncipherment),
        ('keyAgreement', _ProofOfPossession_keyAgreement),
        ])
    ProofOfPossession._ext = None
    
    #-----< POPOSigningKey >-----#
    POPOSigningKey = SEQ(name='POPOSigningKey', mode=MODE_TYPE)
    _POPOSigningKey_poposkInput = SEQ(name='poposkInput', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIXCRMF-2009', 'POPOSigningKeyInput')), opt=True)
    _POPOSigningKey_algorithmIdentifier = SEQ(name='algorithmIdentifier', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __POPOSigningKey_algorithmIdentifier_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['id']))
    ___POPOSigningKey_algorithmIdentifier_algorithm_tab = CLASS(name='_tab_SIGNATURE-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_2 = NULL(name='Params', mode=MODE_TYPE)
    ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_3 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_3 = NULL(name='Params', mode=MODE_TYPE)
    ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_4 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_4 = NULL(name='Params', mode=MODE_TYPE)
    ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_5 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_5 = NULL(name='Params', mode=MODE_TYPE)
    ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_6 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_6 = NULL(name='Params', mode=MODE_TYPE)
    ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_7 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_7 = NULL(name='Params', mode=MODE_TYPE)
    ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_8 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_8 = NULL(name='Params', mode=MODE_TYPE)
    ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_9 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_9 = NULL(name='Params', mode=MODE_TYPE)
    ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_10 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_10 = NULL(name='Params', mode=MODE_TYPE)
    ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_11 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    ___POPOSigningKey_algorithmIdentifier_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 2)), ('Params', ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_0), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 2))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 4)), ('Params', ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_1), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 5)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 5)), ('Params', ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_2), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 5))]))]), dict([('id', (1, 2, 840, 10040, 4, 3)), ('Value', ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_3), ('Params', ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_3), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10040, 4, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 1)), ('Value', ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_4), ('Params', ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_4), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 1))]))])], rr=[], ev=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1)), ('Value', ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_5), ('Params', ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_5), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1))]))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2)), ('Value', ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_6), ('Params', ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_6), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 1)), ('Value', ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_7), ('Params', ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_7), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 1))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 2)), ('Value', ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_8), ('Params', ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_8), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 3)), ('Value', ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_9), ('Params', ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_9), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 4)), ('Value', ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_10), ('Params', ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_10), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('Params', ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_11), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1), ('paramPresence', 'optional'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 10))]))])], er=[])
    __POPOSigningKey_algorithmIdentifier_algorithm._const_tab = ___POPOSigningKey_algorithmIdentifier_algorithm_tab
    __POPOSigningKey_algorithmIdentifier_algorithm._const_tab_at = None
    __POPOSigningKey_algorithmIdentifier_algorithm._const_tab_id = 'id'
    __POPOSigningKey_algorithmIdentifier_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['Params']), opt=True)
    __POPOSigningKey_algorithmIdentifier_parameters._const_tab = ___POPOSigningKey_algorithmIdentifier_algorithm_tab
    __POPOSigningKey_algorithmIdentifier_parameters._const_tab_at = ('..', 'algorithm')
    __POPOSigningKey_algorithmIdentifier_parameters._const_tab_id = 'Params'
    _POPOSigningKey_algorithmIdentifier._cont = ASN1Dict([
        ('algorithm', __POPOSigningKey_algorithmIdentifier_algorithm),
        ('parameters', __POPOSigningKey_algorithmIdentifier_parameters),
        ])
    _POPOSigningKey_algorithmIdentifier._ext = None
    _POPOSigningKey_signature = BIT_STR(name='signature', mode=MODE_TYPE)
    POPOSigningKey._cont = ASN1Dict([
        ('poposkInput', _POPOSigningKey_poposkInput),
        ('algorithmIdentifier', _POPOSigningKey_algorithmIdentifier),
        ('signature', _POPOSigningKey_signature),
        ])
    POPOSigningKey._ext = None
    
    #-----< POPOSigningKeyInput >-----#
    POPOSigningKeyInput = SEQ(name='POPOSigningKeyInput', mode=MODE_TYPE)
    _POPOSigningKeyInput_authInfo = CHOICE(name='authInfo', mode=MODE_TYPE)
    __POPOSigningKeyInput_authInfo_sender = CHOICE(name='sender', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    __POPOSigningKeyInput_authInfo_publicKeyMAC = SEQ(name='publicKeyMAC', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'PKMACValue')))
    _POPOSigningKeyInput_authInfo._cont = ASN1Dict([
        ('sender', __POPOSigningKeyInput_authInfo_sender),
        ('publicKeyMAC', __POPOSigningKeyInput_authInfo_publicKeyMAC),
        ])
    _POPOSigningKeyInput_authInfo._ext = None
    _POPOSigningKeyInput_publicKey = SEQ(name='publicKey', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'SubjectPublicKeyInfo')))
    POPOSigningKeyInput._cont = ASN1Dict([
        ('authInfo', _POPOSigningKeyInput_authInfo),
        ('publicKey', _POPOSigningKeyInput_publicKey),
        ])
    POPOSigningKeyInput._ext = None
    
    #-----< PKMACValue >-----#
    PKMACValue = SEQ(name='PKMACValue', mode=MODE_TYPE)
    _PKMACValue_algId = SEQ(name='algId', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __PKMACValue_algId_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'MAC-ALGORITHM'), ['id']))
    ___PKMACValue_algId_algorithm_tab = CLASS(name='_tab_MAC-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'MAC-ALGORITHM')))
    ____PKMACValue_algId_algorithm_tab_val_Params_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'PBMParameter')))
    ___PKMACValue_algId_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113533, 7, 66, 13)), ('Params', ____PKMACValue_algId_algorithm_tab_val_Params_0), ('paramPresence', 'required'), ('keyed', True)])], rr=[], ev=None, er=[])
    __PKMACValue_algId_algorithm._const_tab = ___PKMACValue_algId_algorithm_tab
    __PKMACValue_algId_algorithm._const_tab_at = None
    __PKMACValue_algId_algorithm._const_tab_id = 'id'
    __PKMACValue_algId_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'MAC-ALGORITHM'), ['Params']), opt=True)
    __PKMACValue_algId_parameters._const_tab = ___PKMACValue_algId_algorithm_tab
    __PKMACValue_algId_parameters._const_tab_at = ('..', 'algorithm')
    __PKMACValue_algId_parameters._const_tab_id = 'Params'
    _PKMACValue_algId._cont = ASN1Dict([
        ('algorithm', __PKMACValue_algId_algorithm),
        ('parameters', __PKMACValue_algId_parameters),
        ])
    _PKMACValue_algId._ext = None
    _PKMACValue_value = BIT_STR(name='value', mode=MODE_TYPE)
    PKMACValue._cont = ASN1Dict([
        ('algId', _PKMACValue_algId),
        ('value', _PKMACValue_value),
        ])
    PKMACValue._ext = None
    
    #-----< id-PasswordBasedMac >-----#
    id_PasswordBasedMac = OID(name='id-PasswordBasedMac', mode=MODE_VALUE)
    id_PasswordBasedMac._val = (1, 2, 840, 113533, 7, 66, 13)
    
    #-----< Password-MACAlgorithms >-----#
    Password_MACAlgorithms = CLASS(name='Password-MACAlgorithms', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'MAC-ALGORITHM')))
    _Password_MACAlgorithms_val_Params_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'PBMParameter')))
    Password_MACAlgorithms._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113533, 7, 66, 13)), ('Params', _Password_MACAlgorithms_val_Params_0), ('paramPresence', 'required'), ('keyed', True)])], rr=[], ev=[], er=[])
    
    #-----< PBMParameter >-----#
    PBMParameter = SEQ(name='PBMParameter', mode=MODE_TYPE)
    _PBMParameter_salt = OCT_STR(name='salt', mode=MODE_TYPE)
    _PBMParameter_owf = SEQ(name='owf', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __PBMParameter_owf_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM'), ['id']))
    ___PBMParameter_owf_algorithm_tab = CLASS(name='_tab_DIGEST-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    ____PBMParameter_owf_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ___PBMParameter_owf_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', ____PBMParameter_owf_algorithm_tab_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])
    __PBMParameter_owf_algorithm._const_tab = ___PBMParameter_owf_algorithm_tab
    __PBMParameter_owf_algorithm._const_tab_at = None
    __PBMParameter_owf_algorithm._const_tab_id = 'id'
    __PBMParameter_owf_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM'), ['Params']), opt=True)
    __PBMParameter_owf_parameters._const_tab = ___PBMParameter_owf_algorithm_tab
    __PBMParameter_owf_parameters._const_tab_at = ('..', 'algorithm')
    __PBMParameter_owf_parameters._const_tab_id = 'Params'
    _PBMParameter_owf._cont = ASN1Dict([
        ('algorithm', __PBMParameter_owf_algorithm),
        ('parameters', __PBMParameter_owf_parameters),
        ])
    _PBMParameter_owf._ext = None
    _PBMParameter_iterationCount = INT(name='iterationCount', mode=MODE_TYPE)
    _PBMParameter_mac = SEQ(name='mac', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __PBMParameter_mac_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'MAC-ALGORITHM'), ['id']))
    ___PBMParameter_mac_algorithm_tab = CLASS(name='_tab_MAC-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'MAC-ALGORITHM')))
    ____PBMParameter_mac_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ___PBMParameter_mac_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2)), ('Params', ____PBMParameter_mac_algorithm_tab_val_Params_0), ('paramPresence', 'preferredAbsent'), ('keyed', True), ('smimeCaps', dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2))]))])], rr=[], ev=None, er=[])
    __PBMParameter_mac_algorithm._const_tab = ___PBMParameter_mac_algorithm_tab
    __PBMParameter_mac_algorithm._const_tab_at = None
    __PBMParameter_mac_algorithm._const_tab_id = 'id'
    __PBMParameter_mac_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'MAC-ALGORITHM'), ['Params']), opt=True)
    __PBMParameter_mac_parameters._const_tab = ___PBMParameter_mac_algorithm_tab
    __PBMParameter_mac_parameters._const_tab_at = ('..', 'algorithm')
    __PBMParameter_mac_parameters._const_tab_id = 'Params'
    _PBMParameter_mac._cont = ASN1Dict([
        ('algorithm', __PBMParameter_mac_algorithm),
        ('parameters', __PBMParameter_mac_parameters),
        ])
    _PBMParameter_mac._ext = None
    PBMParameter._cont = ASN1Dict([
        ('salt', _PBMParameter_salt),
        ('owf', _PBMParameter_owf),
        ('iterationCount', _PBMParameter_iterationCount),
        ('mac', _PBMParameter_mac),
        ])
    PBMParameter._ext = None
    
    #-----< DigestAlgorithms >-----#
    DigestAlgorithms = CLASS(name='DigestAlgorithms', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    _DigestAlgorithms_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    DigestAlgorithms._val = ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _DigestAlgorithms_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=[], er=[])
    
    #-----< MACAlgorithms >-----#
    MACAlgorithms = CLASS(name='MACAlgorithms', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'MAC-ALGORITHM')))
    _MACAlgorithms_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    MACAlgorithms._val = ASN1Set(rv=[dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2)), ('Params', _MACAlgorithms_val_Params_0), ('paramPresence', 'preferredAbsent'), ('keyed', True), ('smimeCaps', dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2))]))])], rr=[], ev=[], er=[])
    
    #-----< POPOPrivKey >-----#
    POPOPrivKey = CHOICE(name='POPOPrivKey', mode=MODE_TYPE)
    _POPOPrivKey_thisMessage = BIT_STR(name='thisMessage', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _POPOPrivKey_subsequentMessage = INT(name='subsequentMessage', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIXCRMF-2009', 'SubsequentMessage')))
    _POPOPrivKey_dhMAC = BIT_STR(name='dhMAC', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _POPOPrivKey_agreeMAC = SEQ(name='agreeMAC', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIXCRMF-2009', 'PKMACValue')))
    _POPOPrivKey_encryptedKey = SEQ(name='encryptedKey', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EnvelopedData')))
    POPOPrivKey._cont = ASN1Dict([
        ('thisMessage', _POPOPrivKey_thisMessage),
        ('subsequentMessage', _POPOPrivKey_subsequentMessage),
        ('dhMAC', _POPOPrivKey_dhMAC),
        ('agreeMAC', _POPOPrivKey_agreeMAC),
        ('encryptedKey', _POPOPrivKey_encryptedKey),
        ])
    POPOPrivKey._ext = None
    
    #-----< SubsequentMessage >-----#
    SubsequentMessage = INT(name='SubsequentMessage', mode=MODE_TYPE)
    SubsequentMessage._cont = ASN1Dict([('encrCert', 0), ('challengeResp', 1)])
    
    #-----< ct-encKeyWithID >-----#
    ct_encKeyWithID = CLASS(name='ct-encKeyWithID', mode=MODE_VALUE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE')))
    _ct_encKeyWithID_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'EncKeyWithID')))
    ct_encKeyWithID._val = dict([('Type', _ct_encKeyWithID_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 1, 21))])
    
    #-----< id-ct-encKeyWithID >-----#
    id_ct_encKeyWithID = OID(name='id-ct-encKeyWithID', mode=MODE_VALUE)
    id_ct_encKeyWithID._val = (1, 2, 840, 113549, 1, 9, 16, 1, 21)
    
    #-----< EncKeyWithID >-----#
    EncKeyWithID = SEQ(name='EncKeyWithID', mode=MODE_TYPE)
    _EncKeyWithID_privateKey = SEQ(name='privateKey', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'PrivateKeyInfo')))
    _EncKeyWithID_identifier = CHOICE(name='identifier', mode=MODE_TYPE, opt=True)
    __EncKeyWithID_identifier_string = STR_UTF8(name='string', mode=MODE_TYPE)
    __EncKeyWithID_identifier_generalName = CHOICE(name='generalName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    _EncKeyWithID_identifier._cont = ASN1Dict([
        ('string', __EncKeyWithID_identifier_string),
        ('generalName', __EncKeyWithID_identifier_generalName),
        ])
    _EncKeyWithID_identifier._ext = None
    EncKeyWithID._cont = ASN1Dict([
        ('privateKey', _EncKeyWithID_privateKey),
        ('identifier', _EncKeyWithID_identifier),
        ])
    EncKeyWithID._ext = None
    
    #-----< PrivateKeyInfo >-----#
    PrivateKeyInfo = SEQ(name='PrivateKeyInfo', mode=MODE_TYPE)
    _PrivateKeyInfo_version = INT(name='version', mode=MODE_TYPE)
    _PrivateKeyInfo_privateKeyAlgorithm = SEQ(name='privateKeyAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __PrivateKeyInfo_privateKeyAlgorithm_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'PUBLIC-KEY'), ['id']))
    ___PrivateKeyInfo_privateKeyAlgorithm_algorithm_tab = CLASS(name='_tab_PUBLIC-KEY', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')))
    ___PrivateKeyInfo_privateKeyAlgorithm_algorithm_tab._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    __PrivateKeyInfo_privateKeyAlgorithm_algorithm._const_tab = ___PrivateKeyInfo_privateKeyAlgorithm_algorithm_tab
    __PrivateKeyInfo_privateKeyAlgorithm_algorithm._const_tab_at = None
    __PrivateKeyInfo_privateKeyAlgorithm_algorithm._const_tab_id = 'id'
    __PrivateKeyInfo_privateKeyAlgorithm_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'PUBLIC-KEY'), ['Params']), opt=True)
    ___PrivateKeyInfo_privateKeyAlgorithm_parameters_tab = CLASS(name='_tab_PUBLIC-KEY', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')))
    ___PrivateKeyInfo_privateKeyAlgorithm_parameters_tab._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    __PrivateKeyInfo_privateKeyAlgorithm_parameters._const_tab = ___PrivateKeyInfo_privateKeyAlgorithm_parameters_tab
    __PrivateKeyInfo_privateKeyAlgorithm_parameters._const_tab_at = ('..', 'algorithm')
    __PrivateKeyInfo_privateKeyAlgorithm_parameters._const_tab_id = 'Params'
    _PrivateKeyInfo_privateKeyAlgorithm._cont = ASN1Dict([
        ('algorithm', __PrivateKeyInfo_privateKeyAlgorithm_algorithm),
        ('parameters', __PrivateKeyInfo_privateKeyAlgorithm_parameters),
        ])
    _PrivateKeyInfo_privateKeyAlgorithm._ext = None
    _PrivateKeyInfo_privateKey = OCT_STR(name='privateKey', mode=MODE_TYPE)
    _PrivateKeyInfo_attributes = SET_OF(name='attributes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIXCRMF-2009', 'Attributes')), opt=True)
    PrivateKeyInfo._cont = ASN1Dict([
        ('version', _PrivateKeyInfo_version),
        ('privateKeyAlgorithm', _PrivateKeyInfo_privateKeyAlgorithm),
        ('privateKey', _PrivateKeyInfo_privateKey),
        ('attributes', _PrivateKeyInfo_attributes),
        ])
    PrivateKeyInfo._ext = None
    
    #-----< Attributes >-----#
    Attributes = SET_OF(name='Attributes', mode=MODE_TYPE)
    _Attributes__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'AttributeSet')))
    __Attributes__item__type = OID(name='type', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['id']))
    ___Attributes__item__type_tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    ___Attributes__item__type_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __Attributes__item__type._const_tab = ___Attributes__item__type_tab
    __Attributes__item__type._const_tab_at = None
    __Attributes__item__type._const_tab_id = 'id'
    __Attributes__item__values = SET_OF(name='values', mode=MODE_TYPE)
    ___Attributes__item__values__item_ = OPEN(name='_item_', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['Type']))
    ____Attributes__item__values__item__tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    ____Attributes__item__values__item__tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___Attributes__item__values__item_._const_tab = ____Attributes__item__values__item__tab
    ___Attributes__item__values__item_._const_tab_at = ('..', '..', 'type')
    ___Attributes__item__values__item_._const_tab_id = 'Type'
    __Attributes__item__values._cont = ___Attributes__item__values__item_
    __Attributes__item__values._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    _Attributes__item_._cont = ASN1Dict([
        ('type', __Attributes__item__type),
        ('values', __Attributes__item__values),
        ])
    _Attributes__item_._ext = None
    Attributes._cont = _Attributes__item_
    
    #-----< PrivateKeyAttributes >-----#
    PrivateKeyAttributes = CLASS(name='PrivateKeyAttributes', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    PrivateKeyAttributes._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< id-regCtrl >-----#
    id_regCtrl = OID(name='id-regCtrl', mode=MODE_VALUE)
    id_regCtrl._val = (1, 3, 6, 1, 5, 5, 7, 5, 1)
    
    #-----< RegControlSet >-----#
    RegControlSet = CLASS(name='RegControlSet', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _RegControlSet_val_Type_0 = STR_UTF8(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'RegToken')))
    _RegControlSet_val_Type_1 = STR_UTF8(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'Authenticator')))
    _RegControlSet_val_Type_2 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'PKIPublicationInfo')))
    _RegControlSet_val_Type_3 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'PKIArchiveOptions')))
    _RegControlSet_val_Type_4 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'OldCertId')))
    _RegControlSet_val_Type_5 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'ProtocolEncrKey')))
    RegControlSet._val = ASN1Set(rv=[dict([('Type', _RegControlSet_val_Type_0), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 1, 1))]), dict([('Type', _RegControlSet_val_Type_1), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 1, 2))]), dict([('Type', _RegControlSet_val_Type_2), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 1, 3))]), dict([('Type', _RegControlSet_val_Type_3), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 1, 4))]), dict([('Type', _RegControlSet_val_Type_4), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 1, 5))]), dict([('Type', _RegControlSet_val_Type_5), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 1, 6))])], rr=[], ev=[], er=[])
    
    #-----< regCtrl-regToken >-----#
    regCtrl_regToken = CLASS(name='regCtrl-regToken', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _regCtrl_regToken_val_Type = STR_UTF8(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'RegToken')))
    regCtrl_regToken._val = dict([('Type', _regCtrl_regToken_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 1, 1))])
    
    #-----< id-regCtrl-regToken >-----#
    id_regCtrl_regToken = OID(name='id-regCtrl-regToken', mode=MODE_VALUE)
    id_regCtrl_regToken._val = (1, 3, 6, 1, 5, 5, 7, 5, 1, 1)
    
    #-----< RegToken >-----#
    RegToken = STR_UTF8(name='RegToken', mode=MODE_TYPE)
    
    #-----< regCtrl-authenticator >-----#
    regCtrl_authenticator = CLASS(name='regCtrl-authenticator', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _regCtrl_authenticator_val_Type = STR_UTF8(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'Authenticator')))
    regCtrl_authenticator._val = dict([('Type', _regCtrl_authenticator_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 1, 2))])
    
    #-----< id-regCtrl-authenticator >-----#
    id_regCtrl_authenticator = OID(name='id-regCtrl-authenticator', mode=MODE_VALUE)
    id_regCtrl_authenticator._val = (1, 3, 6, 1, 5, 5, 7, 5, 1, 2)
    
    #-----< Authenticator >-----#
    Authenticator = STR_UTF8(name='Authenticator', mode=MODE_TYPE)
    
    #-----< regCtrl-pkiPublicationInfo >-----#
    regCtrl_pkiPublicationInfo = CLASS(name='regCtrl-pkiPublicationInfo', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _regCtrl_pkiPublicationInfo_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'PKIPublicationInfo')))
    regCtrl_pkiPublicationInfo._val = dict([('Type', _regCtrl_pkiPublicationInfo_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 1, 3))])
    
    #-----< id-regCtrl-pkiPublicationInfo >-----#
    id_regCtrl_pkiPublicationInfo = OID(name='id-regCtrl-pkiPublicationInfo', mode=MODE_VALUE)
    id_regCtrl_pkiPublicationInfo._val = (1, 3, 6, 1, 5, 5, 7, 5, 1, 3)
    
    #-----< PKIPublicationInfo >-----#
    PKIPublicationInfo = SEQ(name='PKIPublicationInfo', mode=MODE_TYPE)
    _PKIPublicationInfo_action = INT(name='action', mode=MODE_TYPE)
    _PKIPublicationInfo_action._cont = ASN1Dict([('dontPublish', 0), ('pleasePublish', 1)])
    _PKIPublicationInfo_pubInfos = SEQ_OF(name='pubInfos', mode=MODE_TYPE, opt=True)
    __PKIPublicationInfo_pubInfos__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'SinglePubInfo')))
    _PKIPublicationInfo_pubInfos._cont = __PKIPublicationInfo_pubInfos__item_
    _PKIPublicationInfo_pubInfos._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    PKIPublicationInfo._cont = ASN1Dict([
        ('action', _PKIPublicationInfo_action),
        ('pubInfos', _PKIPublicationInfo_pubInfos),
        ])
    PKIPublicationInfo._ext = None
    
    #-----< SinglePubInfo >-----#
    SinglePubInfo = SEQ(name='SinglePubInfo', mode=MODE_TYPE)
    _SinglePubInfo_pubMethod = INT(name='pubMethod', mode=MODE_TYPE)
    _SinglePubInfo_pubMethod._cont = ASN1Dict([('dontCare', 0), ('x500', 1), ('web', 2), ('ldap', 3)])
    _SinglePubInfo_pubLocation = CHOICE(name='pubLocation', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')), opt=True)
    SinglePubInfo._cont = ASN1Dict([
        ('pubMethod', _SinglePubInfo_pubMethod),
        ('pubLocation', _SinglePubInfo_pubLocation),
        ])
    SinglePubInfo._ext = None
    
    #-----< regCtrl-pkiArchiveOptions >-----#
    regCtrl_pkiArchiveOptions = CLASS(name='regCtrl-pkiArchiveOptions', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _regCtrl_pkiArchiveOptions_val_Type = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'PKIArchiveOptions')))
    regCtrl_pkiArchiveOptions._val = dict([('Type', _regCtrl_pkiArchiveOptions_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 1, 4))])
    
    #-----< id-regCtrl-pkiArchiveOptions >-----#
    id_regCtrl_pkiArchiveOptions = OID(name='id-regCtrl-pkiArchiveOptions', mode=MODE_VALUE)
    id_regCtrl_pkiArchiveOptions._val = (1, 3, 6, 1, 5, 5, 7, 5, 1, 4)
    
    #-----< PKIArchiveOptions >-----#
    PKIArchiveOptions = CHOICE(name='PKIArchiveOptions', mode=MODE_TYPE)
    _PKIArchiveOptions_encryptedPrivKey = CHOICE(name='encryptedPrivKey', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIXCRMF-2009', 'EncryptedKey')))
    _PKIArchiveOptions_keyGenParameters = OCT_STR(name='keyGenParameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIXCRMF-2009', 'KeyGenParameters')))
    _PKIArchiveOptions_archiveRemGenPrivKey = BOOL(name='archiveRemGenPrivKey', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    PKIArchiveOptions._cont = ASN1Dict([
        ('encryptedPrivKey', _PKIArchiveOptions_encryptedPrivKey),
        ('keyGenParameters', _PKIArchiveOptions_keyGenParameters),
        ('archiveRemGenPrivKey', _PKIArchiveOptions_archiveRemGenPrivKey),
        ])
    PKIArchiveOptions._ext = None
    
    #-----< EncryptedKey >-----#
    EncryptedKey = CHOICE(name='EncryptedKey', mode=MODE_TYPE)
    _EncryptedKey_encryptedValue = SEQ(name='encryptedValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'EncryptedValue')))
    _EncryptedKey_envelopedData = SEQ(name='envelopedData', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EnvelopedData')))
    EncryptedKey._cont = ASN1Dict([
        ('encryptedValue', _EncryptedKey_encryptedValue),
        ('envelopedData', _EncryptedKey_envelopedData),
        ])
    EncryptedKey._ext = None
    
    #-----< EncryptedValue >-----#
    EncryptedValue = SEQ(name='EncryptedValue', mode=MODE_TYPE)
    _EncryptedValue_intendedAlg = SEQ(name='intendedAlg', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')), opt=True)
    __EncryptedValue_intendedAlg_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'ALGORITHM'), ['id']))
    ___EncryptedValue_intendedAlg_algorithm_tab = CLASS(name='_tab_ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ALGORITHM')))
    ___EncryptedValue_intendedAlg_algorithm_tab._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    __EncryptedValue_intendedAlg_algorithm._const_tab = ___EncryptedValue_intendedAlg_algorithm_tab
    __EncryptedValue_intendedAlg_algorithm._const_tab_at = None
    __EncryptedValue_intendedAlg_algorithm._const_tab_id = 'id'
    __EncryptedValue_intendedAlg_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'ALGORITHM'), ['Params']), opt=True)
    ___EncryptedValue_intendedAlg_parameters_tab = CLASS(name='_tab_ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ALGORITHM')))
    ___EncryptedValue_intendedAlg_parameters_tab._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    __EncryptedValue_intendedAlg_parameters._const_tab = ___EncryptedValue_intendedAlg_parameters_tab
    __EncryptedValue_intendedAlg_parameters._const_tab_at = ('..', 'algorithm')
    __EncryptedValue_intendedAlg_parameters._const_tab_id = 'Params'
    _EncryptedValue_intendedAlg._cont = ASN1Dict([
        ('algorithm', __EncryptedValue_intendedAlg_algorithm),
        ('parameters', __EncryptedValue_intendedAlg_parameters),
        ])
    _EncryptedValue_intendedAlg._ext = None
    _EncryptedValue_symmAlg = SEQ(name='symmAlg', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')), opt=True)
    __EncryptedValue_symmAlg_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'ALGORITHM'), ['id']))
    ___EncryptedValue_symmAlg_algorithm_tab = CLASS(name='_tab_ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ALGORITHM')))
    ___EncryptedValue_symmAlg_algorithm_tab._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    __EncryptedValue_symmAlg_algorithm._const_tab = ___EncryptedValue_symmAlg_algorithm_tab
    __EncryptedValue_symmAlg_algorithm._const_tab_at = None
    __EncryptedValue_symmAlg_algorithm._const_tab_id = 'id'
    __EncryptedValue_symmAlg_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'ALGORITHM'), ['Params']), opt=True)
    ___EncryptedValue_symmAlg_parameters_tab = CLASS(name='_tab_ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ALGORITHM')))
    ___EncryptedValue_symmAlg_parameters_tab._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    __EncryptedValue_symmAlg_parameters._const_tab = ___EncryptedValue_symmAlg_parameters_tab
    __EncryptedValue_symmAlg_parameters._const_tab_at = ('..', 'algorithm')
    __EncryptedValue_symmAlg_parameters._const_tab_id = 'Params'
    _EncryptedValue_symmAlg._cont = ASN1Dict([
        ('algorithm', __EncryptedValue_symmAlg_algorithm),
        ('parameters', __EncryptedValue_symmAlg_parameters),
        ])
    _EncryptedValue_symmAlg._ext = None
    _EncryptedValue_encSymmKey = BIT_STR(name='encSymmKey', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _EncryptedValue_keyAlg = SEQ(name='keyAlg', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')), opt=True)
    __EncryptedValue_keyAlg_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'ALGORITHM'), ['id']))
    ___EncryptedValue_keyAlg_algorithm_tab = CLASS(name='_tab_ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ALGORITHM')))
    ___EncryptedValue_keyAlg_algorithm_tab._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    __EncryptedValue_keyAlg_algorithm._const_tab = ___EncryptedValue_keyAlg_algorithm_tab
    __EncryptedValue_keyAlg_algorithm._const_tab_at = None
    __EncryptedValue_keyAlg_algorithm._const_tab_id = 'id'
    __EncryptedValue_keyAlg_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'ALGORITHM'), ['Params']), opt=True)
    ___EncryptedValue_keyAlg_parameters_tab = CLASS(name='_tab_ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ALGORITHM')))
    ___EncryptedValue_keyAlg_parameters_tab._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    __EncryptedValue_keyAlg_parameters._const_tab = ___EncryptedValue_keyAlg_parameters_tab
    __EncryptedValue_keyAlg_parameters._const_tab_at = ('..', 'algorithm')
    __EncryptedValue_keyAlg_parameters._const_tab_id = 'Params'
    _EncryptedValue_keyAlg._cont = ASN1Dict([
        ('algorithm', __EncryptedValue_keyAlg_algorithm),
        ('parameters', __EncryptedValue_keyAlg_parameters),
        ])
    _EncryptedValue_keyAlg._ext = None
    _EncryptedValue_valueHint = OCT_STR(name='valueHint', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _EncryptedValue_encValue = BIT_STR(name='encValue', mode=MODE_TYPE)
    EncryptedValue._cont = ASN1Dict([
        ('intendedAlg', _EncryptedValue_intendedAlg),
        ('symmAlg', _EncryptedValue_symmAlg),
        ('encSymmKey', _EncryptedValue_encSymmKey),
        ('keyAlg', _EncryptedValue_keyAlg),
        ('valueHint', _EncryptedValue_valueHint),
        ('encValue', _EncryptedValue_encValue),
        ])
    EncryptedValue._ext = None
    
    #-----< KeyGenParameters >-----#
    KeyGenParameters = OCT_STR(name='KeyGenParameters', mode=MODE_TYPE)
    
    #-----< regCtrl-oldCertID >-----#
    regCtrl_oldCertID = CLASS(name='regCtrl-oldCertID', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _regCtrl_oldCertID_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'OldCertId')))
    regCtrl_oldCertID._val = dict([('Type', _regCtrl_oldCertID_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 1, 5))])
    
    #-----< id-regCtrl-oldCertID >-----#
    id_regCtrl_oldCertID = OID(name='id-regCtrl-oldCertID', mode=MODE_VALUE)
    id_regCtrl_oldCertID._val = (1, 3, 6, 1, 5, 5, 7, 5, 1, 5)
    
    #-----< OldCertId >-----#
    OldCertId = SEQ(name='OldCertId', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'CertId')))
    
    #-----< CertId >-----#
    CertId = SEQ(name='CertId', mode=MODE_TYPE)
    _CertId_issuer = CHOICE(name='issuer', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    _CertId_serialNumber = INT(name='serialNumber', mode=MODE_TYPE)
    CertId._cont = ASN1Dict([
        ('issuer', _CertId_issuer),
        ('serialNumber', _CertId_serialNumber),
        ])
    CertId._ext = None
    
    #-----< regCtrl-protocolEncrKey >-----#
    regCtrl_protocolEncrKey = CLASS(name='regCtrl-protocolEncrKey', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _regCtrl_protocolEncrKey_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'ProtocolEncrKey')))
    regCtrl_protocolEncrKey._val = dict([('Type', _regCtrl_protocolEncrKey_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 1, 6))])
    
    #-----< id-regCtrl-protocolEncrKey >-----#
    id_regCtrl_protocolEncrKey = OID(name='id-regCtrl-protocolEncrKey', mode=MODE_VALUE)
    id_regCtrl_protocolEncrKey._val = (1, 3, 6, 1, 5, 5, 7, 5, 1, 6)
    
    #-----< ProtocolEncrKey >-----#
    ProtocolEncrKey = SEQ(name='ProtocolEncrKey', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'SubjectPublicKeyInfo')))
    
    #-----< id-regInfo >-----#
    id_regInfo = OID(name='id-regInfo', mode=MODE_VALUE)
    id_regInfo._val = (1, 3, 6, 1, 5, 5, 7, 5, 2)
    
    #-----< RegInfoSet >-----#
    RegInfoSet = CLASS(name='RegInfoSet', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _RegInfoSet_val_Type_0 = STR_UTF8(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'UTF8Pairs')))
    _RegInfoSet_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'CertReq')))
    RegInfoSet._val = ASN1Set(rv=[dict([('Type', _RegInfoSet_val_Type_0), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 2, 1))]), dict([('Type', _RegInfoSet_val_Type_1), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 2, 2))])], rr=[], ev=None, er=[])
    
    #-----< regInfo-utf8Pairs >-----#
    regInfo_utf8Pairs = CLASS(name='regInfo-utf8Pairs', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _regInfo_utf8Pairs_val_Type = STR_UTF8(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'UTF8Pairs')))
    regInfo_utf8Pairs._val = dict([('Type', _regInfo_utf8Pairs_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 2, 1))])
    
    #-----< id-regInfo-utf8Pairs >-----#
    id_regInfo_utf8Pairs = OID(name='id-regInfo-utf8Pairs', mode=MODE_VALUE)
    id_regInfo_utf8Pairs._val = (1, 3, 6, 1, 5, 5, 7, 5, 2, 1)
    
    #-----< UTF8Pairs >-----#
    UTF8Pairs = STR_UTF8(name='UTF8Pairs', mode=MODE_TYPE)
    
    #-----< regInfo-certReq >-----#
    regInfo_certReq = CLASS(name='regInfo-certReq', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _regInfo_certReq_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'CertReq')))
    regInfo_certReq._val = dict([('Type', _regInfo_certReq_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 5, 2, 2))])
    
    #-----< id-regInfo-certReq >-----#
    id_regInfo_certReq = OID(name='id-regInfo-certReq', mode=MODE_VALUE)
    id_regInfo_certReq._val = (1, 3, 6, 1, 5, 5, 7, 5, 2, 2)
    
    #-----< CertReq >-----#
    CertReq = SEQ(name='CertReq', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'CertRequest')))
    
    _all_ = [
        id_pkip,
        id_smime,
        id_ct,
        _CertReqMessages__item_,
        CertReqMessages,
        _CertReqMsg_certReq,
        _CertReqMsg_popo,
        ____CertReqMsg_regInfo__item__type_tab,
        _____CertReqMsg_regInfo__item__type_tab_val_Type_0,
        _____CertReqMsg_regInfo__item__type_tab_val_Type_1,
        ___CertReqMsg_regInfo__item__type,
        ___CertReqMsg_regInfo__item__value,
        __CertReqMsg_regInfo__item_,
        _CertReqMsg_regInfo,
        CertReqMsg,
        _CertRequest_certReqId,
        _CertRequest_certTemplate,
        _CertRequest_controls,
        CertRequest,
        _CertTemplate_version,
        _CertTemplate_serialNumber,
        ___CertTemplate_signingAlg_algorithm_tab,
        ____CertTemplate_signingAlg_algorithm_tab_val_Params_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0,
        ____CertTemplate_signingAlg_algorithm_tab_val_Params_1,
        ____CertTemplate_signingAlg_algorithm_tab_val_Params_2,
        ____CertTemplate_signingAlg_algorithm_tab_val_Value_3,
        ____CertTemplate_signingAlg_algorithm_tab_val_Params_3,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0,
        ____CertTemplate_signingAlg_algorithm_tab_val_Value_4,
        ____CertTemplate_signingAlg_algorithm_tab_val_Params_4,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1,
        ____CertTemplate_signingAlg_algorithm_tab_val_Value_5,
        ____CertTemplate_signingAlg_algorithm_tab_val_Params_5,
        ____CertTemplate_signingAlg_algorithm_tab_val_Value_6,
        ____CertTemplate_signingAlg_algorithm_tab_val_Params_6,
        ____CertTemplate_signingAlg_algorithm_tab_val_Value_7,
        ____CertTemplate_signingAlg_algorithm_tab_val_Params_7,
        ____CertTemplate_signingAlg_algorithm_tab_val_Value_8,
        ____CertTemplate_signingAlg_algorithm_tab_val_Params_8,
        ____CertTemplate_signingAlg_algorithm_tab_val_Value_9,
        ____CertTemplate_signingAlg_algorithm_tab_val_Params_9,
        ____CertTemplate_signingAlg_algorithm_tab_val_Value_10,
        ____CertTemplate_signingAlg_algorithm_tab_val_Params_10,
        ____CertTemplate_signingAlg_algorithm_tab_val_Params_11,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1,
        __CertTemplate_signingAlg_algorithm,
        __CertTemplate_signingAlg_parameters,
        _CertTemplate_signingAlg,
        _CertTemplate_issuer,
        _CertTemplate_validity,
        _CertTemplate_subject,
        _CertTemplate_publicKey,
        _CertTemplate_issuerUID,
        _CertTemplate_subjectUID,
        ____CertTemplate_extensions__item__extnID_tab,
        _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_0,
        _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_1,
        _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_2,
        _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_3,
        _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_4,
        _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_5,
        _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_6,
        _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_7,
        _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_8,
        _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_9,
        _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_10,
        _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_11,
        _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_12,
        _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_13,
        _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_14,
        _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_15,
        _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_16,
        _____CertTemplate_extensions__item__extnID_tab_val_ExtnType_17,
        ___CertTemplate_extensions__item__extnID,
        ___CertTemplate_extensions__item__critical,
        ____CertTemplate_extensions__item__extnValue_contain,
        ___CertTemplate_extensions__item__extnValue,
        __CertTemplate_extensions__item_,
        _CertTemplate_extensions,
        CertTemplate,
        _OptionalValidity_notBefore,
        _OptionalValidity_notAfter,
        OptionalValidity,
        ___Controls__item__type_tab,
        ____Controls__item__type_tab_val_Type_0,
        ____Controls__item__type_tab_val_Type_1,
        ____Controls__item__type_tab_val_Type_2,
        ____Controls__item__type_tab_val_Type_3,
        ____Controls__item__type_tab_val_Type_4,
        ____Controls__item__type_tab_val_Type_5,
        __Controls__item__type,
        __Controls__item__value,
        _Controls__item_,
        Controls,
        _ProofOfPossession_raVerified,
        _ProofOfPossession_signature,
        _ProofOfPossession_keyEncipherment,
        _ProofOfPossession_keyAgreement,
        ProofOfPossession,
        _POPOSigningKey_poposkInput,
        ___POPOSigningKey_algorithmIdentifier_algorithm_tab,
        ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_0,
        ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_1,
        ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_2,
        ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_3,
        ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_3,
        ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_4,
        ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_4,
        ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_5,
        ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_5,
        ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_6,
        ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_6,
        ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_7,
        ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_7,
        ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_8,
        ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_8,
        ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_9,
        ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_9,
        ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Value_10,
        ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_10,
        ____POPOSigningKey_algorithmIdentifier_algorithm_tab_val_Params_11,
        __POPOSigningKey_algorithmIdentifier_algorithm,
        __POPOSigningKey_algorithmIdentifier_parameters,
        _POPOSigningKey_algorithmIdentifier,
        _POPOSigningKey_signature,
        POPOSigningKey,
        __POPOSigningKeyInput_authInfo_sender,
        __POPOSigningKeyInput_authInfo_publicKeyMAC,
        _POPOSigningKeyInput_authInfo,
        _POPOSigningKeyInput_publicKey,
        POPOSigningKeyInput,
        ___PKMACValue_algId_algorithm_tab,
        ____PKMACValue_algId_algorithm_tab_val_Params_0,
        __PKMACValue_algId_algorithm,
        __PKMACValue_algId_parameters,
        _PKMACValue_algId,
        _PKMACValue_value,
        PKMACValue,
        id_PasswordBasedMac,
        Password_MACAlgorithms,
        _Password_MACAlgorithms_val_Params_0,
        _PBMParameter_salt,
        ___PBMParameter_owf_algorithm_tab,
        ____PBMParameter_owf_algorithm_tab_val_Params_0,
        __PBMParameter_owf_algorithm,
        __PBMParameter_owf_parameters,
        _PBMParameter_owf,
        _PBMParameter_iterationCount,
        ___PBMParameter_mac_algorithm_tab,
        ____PBMParameter_mac_algorithm_tab_val_Params_0,
        __PBMParameter_mac_algorithm,
        __PBMParameter_mac_parameters,
        _PBMParameter_mac,
        PBMParameter,
        DigestAlgorithms,
        _DigestAlgorithms_val_Params_0,
        MACAlgorithms,
        _MACAlgorithms_val_Params_0,
        _POPOPrivKey_thisMessage,
        _POPOPrivKey_subsequentMessage,
        _POPOPrivKey_dhMAC,
        _POPOPrivKey_agreeMAC,
        _POPOPrivKey_encryptedKey,
        POPOPrivKey,
        SubsequentMessage,
        ct_encKeyWithID,
        _ct_encKeyWithID_val_Type,
        id_ct_encKeyWithID,
        _EncKeyWithID_privateKey,
        __EncKeyWithID_identifier_string,
        __EncKeyWithID_identifier_generalName,
        _EncKeyWithID_identifier,
        EncKeyWithID,
        _PrivateKeyInfo_version,
        ___PrivateKeyInfo_privateKeyAlgorithm_algorithm_tab,
        __PrivateKeyInfo_privateKeyAlgorithm_algorithm,
        ___PrivateKeyInfo_privateKeyAlgorithm_parameters_tab,
        __PrivateKeyInfo_privateKeyAlgorithm_parameters,
        _PrivateKeyInfo_privateKeyAlgorithm,
        _PrivateKeyInfo_privateKey,
        _PrivateKeyInfo_attributes,
        PrivateKeyInfo,
        ___Attributes__item__type_tab,
        __Attributes__item__type,
        ____Attributes__item__values__item__tab,
        ___Attributes__item__values__item_,
        __Attributes__item__values,
        _Attributes__item_,
        Attributes,
        PrivateKeyAttributes,
        id_regCtrl,
        RegControlSet,
        _RegControlSet_val_Type_0,
        _RegControlSet_val_Type_1,
        _RegControlSet_val_Type_2,
        _RegControlSet_val_Type_3,
        _RegControlSet_val_Type_4,
        _RegControlSet_val_Type_5,
        regCtrl_regToken,
        _regCtrl_regToken_val_Type,
        id_regCtrl_regToken,
        RegToken,
        regCtrl_authenticator,
        _regCtrl_authenticator_val_Type,
        id_regCtrl_authenticator,
        Authenticator,
        regCtrl_pkiPublicationInfo,
        _regCtrl_pkiPublicationInfo_val_Type,
        id_regCtrl_pkiPublicationInfo,
        _PKIPublicationInfo_action,
        __PKIPublicationInfo_pubInfos__item_,
        _PKIPublicationInfo_pubInfos,
        PKIPublicationInfo,
        _SinglePubInfo_pubMethod,
        _SinglePubInfo_pubLocation,
        SinglePubInfo,
        regCtrl_pkiArchiveOptions,
        _regCtrl_pkiArchiveOptions_val_Type,
        id_regCtrl_pkiArchiveOptions,
        _PKIArchiveOptions_encryptedPrivKey,
        _PKIArchiveOptions_keyGenParameters,
        _PKIArchiveOptions_archiveRemGenPrivKey,
        PKIArchiveOptions,
        _EncryptedKey_encryptedValue,
        _EncryptedKey_envelopedData,
        EncryptedKey,
        ___EncryptedValue_intendedAlg_algorithm_tab,
        __EncryptedValue_intendedAlg_algorithm,
        ___EncryptedValue_intendedAlg_parameters_tab,
        __EncryptedValue_intendedAlg_parameters,
        _EncryptedValue_intendedAlg,
        ___EncryptedValue_symmAlg_algorithm_tab,
        __EncryptedValue_symmAlg_algorithm,
        ___EncryptedValue_symmAlg_parameters_tab,
        __EncryptedValue_symmAlg_parameters,
        _EncryptedValue_symmAlg,
        _EncryptedValue_encSymmKey,
        ___EncryptedValue_keyAlg_algorithm_tab,
        __EncryptedValue_keyAlg_algorithm,
        ___EncryptedValue_keyAlg_parameters_tab,
        __EncryptedValue_keyAlg_parameters,
        _EncryptedValue_keyAlg,
        _EncryptedValue_valueHint,
        _EncryptedValue_encValue,
        EncryptedValue,
        KeyGenParameters,
        regCtrl_oldCertID,
        _regCtrl_oldCertID_val_Type,
        id_regCtrl_oldCertID,
        OldCertId,
        _CertId_issuer,
        _CertId_serialNumber,
        CertId,
        regCtrl_protocolEncrKey,
        _regCtrl_protocolEncrKey_val_Type,
        id_regCtrl_protocolEncrKey,
        ProtocolEncrKey,
        id_regInfo,
        RegInfoSet,
        _RegInfoSet_val_Type_0,
        _RegInfoSet_val_Type_1,
        regInfo_utf8Pairs,
        _regInfo_utf8Pairs_val_Type,
        id_regInfo_utf8Pairs,
        UTF8Pairs,
        regInfo_certReq,
        _regInfo_certReq_val_Type,
        id_regInfo_certReq,
        CertReq,
    ]

class PKIX1Implicit_2009:

    _name_  = 'PKIX1Implicit-2009'
    _oid_   = [1, 3, 6, 1, 5, 5, 7, 0, 59]
    
    _obj_ = [
        'CertExtensions',
        'CrlExtensions',
        'CrlEntryExtensions',
        'id-ce',
        'ext-AuthorityKeyIdentifier',
        'id-ce-authorityKeyIdentifier',
        'AuthorityKeyIdentifier',
        'KeyIdentifier',
        'ext-SubjectKeyIdentifier',
        'id-ce-subjectKeyIdentifier',
        'ext-KeyUsage',
        'id-ce-keyUsage',
        'KeyUsage',
        'ext-PrivateKeyUsagePeriod',
        'id-ce-privateKeyUsagePeriod',
        'PrivateKeyUsagePeriod',
        'ext-CertificatePolicies',
        'id-ce-certificatePolicies',
        'CertificatePolicies',
        'PolicyInformation',
        'CertPolicyId',
        'CERT-POLICY-QUALIFIER',
        'PolicyQualifierInfo',
        'PolicyQualifierId',
        'pqid-cps',
        'pqid-unotice',
        'CPSuri',
        'UserNotice',
        'NoticeReference',
        'DisplayText',
        'ext-PolicyMappings',
        'id-ce-policyMappings',
        'PolicyMappings',
        'ext-SubjectAltName',
        'id-ce-subjectAltName',
        'GeneralNames',
        'GeneralName',
        'OTHER-NAME',
        'EDIPartyName',
        'ext-IssuerAltName',
        'id-ce-issuerAltName',
        'ext-SubjectDirectoryAttributes',
        'id-ce-subjectDirectoryAttributes',
        'SubjectDirectoryAttributes',
        'ext-BasicConstraints',
        'id-ce-basicConstraints',
        'BasicConstraints',
        'ext-NameConstraints',
        'id-ce-nameConstraints',
        'NameConstraints',
        'GeneralSubtrees',
        'GeneralSubtree',
        'BaseDistance',
        'ext-PolicyConstraints',
        'id-ce-policyConstraints',
        'PolicyConstraints',
        'SkipCerts',
        'ext-CRLDistributionPoints',
        'id-ce-cRLDistributionPoints',
        'CRLDistributionPoints',
        'DistributionPoint',
        'DistributionPointName',
        'ReasonFlags',
        'ext-ExtKeyUsage',
        'id-ce-extKeyUsage',
        'ExtKeyUsageSyntax',
        'KeyPurposeId',
        'anyExtendedKeyUsage',
        'id-kp-serverAuth',
        'id-kp-clientAuth',
        'id-kp-codeSigning',
        'id-kp-emailProtection',
        'id-kp-timeStamping',
        'id-kp-OCSPSigning',
        'ext-InhibitAnyPolicy',
        'id-ce-inhibitAnyPolicy',
        'ext-FreshestCRL',
        'id-ce-freshestCRL',
        'ext-AuthorityInfoAccess',
        'id-pe-authorityInfoAccess',
        'AuthorityInfoAccessSyntax',
        'AccessDescription',
        'ext-SubjectInfoAccessSyntax',
        'id-pe-subjectInfoAccess',
        'SubjectInfoAccessSyntax',
        'ext-CRLNumber',
        'id-ce-cRLNumber',
        'CRLNumber',
        'ext-IssuingDistributionPoint',
        'id-ce-issuingDistributionPoint',
        'IssuingDistributionPoint',
        'ext-DeltaCRLIndicator',
        'id-ce-deltaCRLIndicator',
        'ext-CRLReason',
        'id-ce-cRLReasons',
        'CRLReason',
        'ext-CertificateIssuer',
        'id-ce-certificateIssuer',
        'ext-HoldInstructionCode',
        'id-ce-holdInstructionCode',
        'holdInstruction',
        'id-holdinstruction-none',
        'id-holdinstruction-callissuer',
        'id-holdinstruction-reject',
        'ext-InvalidityDate',
        'id-ce-invalidityDate',
        'ubMax',
        ]
    _type_ = [
        'AuthorityKeyIdentifier',
        'KeyIdentifier',
        'KeyUsage',
        'PrivateKeyUsagePeriod',
        'CertificatePolicies',
        'PolicyInformation',
        'CertPolicyId',
        'CERT-POLICY-QUALIFIER',
        'PolicyQualifierInfo',
        'CPSuri',
        'UserNotice',
        'NoticeReference',
        'DisplayText',
        'PolicyMappings',
        'GeneralNames',
        'GeneralName',
        'OTHER-NAME',
        'EDIPartyName',
        'SubjectDirectoryAttributes',
        'BasicConstraints',
        'NameConstraints',
        'GeneralSubtrees',
        'GeneralSubtree',
        'BaseDistance',
        'PolicyConstraints',
        'SkipCerts',
        'CRLDistributionPoints',
        'DistributionPoint',
        'DistributionPointName',
        'ReasonFlags',
        'ExtKeyUsageSyntax',
        'KeyPurposeId',
        'AuthorityInfoAccessSyntax',
        'AccessDescription',
        'SubjectInfoAccessSyntax',
        'CRLNumber',
        'IssuingDistributionPoint',
        'CRLReason',
        ]
    _set_ = [
        'CertExtensions',
        'CrlExtensions',
        'CrlEntryExtensions',
        'PolicyQualifierId',
        ]
    _val_ = [
        'id-ce',
        'ext-AuthorityKeyIdentifier',
        'id-ce-authorityKeyIdentifier',
        'ext-SubjectKeyIdentifier',
        'id-ce-subjectKeyIdentifier',
        'ext-KeyUsage',
        'id-ce-keyUsage',
        'ext-PrivateKeyUsagePeriod',
        'id-ce-privateKeyUsagePeriod',
        'ext-CertificatePolicies',
        'id-ce-certificatePolicies',
        'pqid-cps',
        'pqid-unotice',
        'ext-PolicyMappings',
        'id-ce-policyMappings',
        'ext-SubjectAltName',
        'id-ce-subjectAltName',
        'ext-IssuerAltName',
        'id-ce-issuerAltName',
        'ext-SubjectDirectoryAttributes',
        'id-ce-subjectDirectoryAttributes',
        'ext-BasicConstraints',
        'id-ce-basicConstraints',
        'ext-NameConstraints',
        'id-ce-nameConstraints',
        'ext-PolicyConstraints',
        'id-ce-policyConstraints',
        'ext-CRLDistributionPoints',
        'id-ce-cRLDistributionPoints',
        'ext-ExtKeyUsage',
        'id-ce-extKeyUsage',
        'anyExtendedKeyUsage',
        'id-kp-serverAuth',
        'id-kp-clientAuth',
        'id-kp-codeSigning',
        'id-kp-emailProtection',
        'id-kp-timeStamping',
        'id-kp-OCSPSigning',
        'ext-InhibitAnyPolicy',
        'id-ce-inhibitAnyPolicy',
        'ext-FreshestCRL',
        'id-ce-freshestCRL',
        'ext-AuthorityInfoAccess',
        'id-pe-authorityInfoAccess',
        'ext-SubjectInfoAccessSyntax',
        'id-pe-subjectInfoAccess',
        'ext-CRLNumber',
        'id-ce-cRLNumber',
        'ext-IssuingDistributionPoint',
        'id-ce-issuingDistributionPoint',
        'ext-DeltaCRLIndicator',
        'id-ce-deltaCRLIndicator',
        'ext-CRLReason',
        'id-ce-cRLReasons',
        'ext-CertificateIssuer',
        'id-ce-certificateIssuer',
        'ext-HoldInstructionCode',
        'id-ce-holdInstructionCode',
        'holdInstruction',
        'id-holdinstruction-none',
        'id-holdinstruction-callissuer',
        'id-holdinstruction-reject',
        'ext-InvalidityDate',
        'id-ce-invalidityDate',
        'ubMax',
        ]
    _class_ = [
        'CertExtensions',
        'CrlExtensions',
        'CrlEntryExtensions',
        'ext-AuthorityKeyIdentifier',
        'ext-SubjectKeyIdentifier',
        'ext-KeyUsage',
        'ext-PrivateKeyUsagePeriod',
        'ext-CertificatePolicies',
        'CERT-POLICY-QUALIFIER',
        'PolicyQualifierId',
        'pqid-cps',
        'pqid-unotice',
        'ext-PolicyMappings',
        'ext-SubjectAltName',
        'OTHER-NAME',
        'ext-IssuerAltName',
        'ext-SubjectDirectoryAttributes',
        'ext-BasicConstraints',
        'ext-NameConstraints',
        'ext-PolicyConstraints',
        'ext-CRLDistributionPoints',
        'ext-ExtKeyUsage',
        'ext-InhibitAnyPolicy',
        'ext-FreshestCRL',
        'ext-AuthorityInfoAccess',
        'ext-SubjectInfoAccessSyntax',
        'ext-CRLNumber',
        'ext-IssuingDistributionPoint',
        'ext-DeltaCRLIndicator',
        'ext-CRLReason',
        'ext-CertificateIssuer',
        'ext-HoldInstructionCode',
        'ext-InvalidityDate',
        ]
    _param_ = [
        ]
    
    #-----< CertExtensions >-----#
    CertExtensions = CLASS(name='CertExtensions', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _CertExtensions_val_ExtnType_0 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'AuthorityKeyIdentifier')))
    _CertExtensions_val_ExtnType_1 = OCT_STR(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'KeyIdentifier')))
    _CertExtensions_val_ExtnType_2 = BIT_STR(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'KeyUsage')))
    _CertExtensions_val_ExtnType_3 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'PrivateKeyUsagePeriod')))
    _CertExtensions_val_ExtnType_4 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CertificatePolicies')))
    _CertExtensions_val_ExtnType_5 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'PolicyMappings')))
    _CertExtensions_val_ExtnType_6 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    _CertExtensions_val_ExtnType_7 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    _CertExtensions_val_ExtnType_8 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'SubjectDirectoryAttributes')))
    _CertExtensions_val_ExtnType_9 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'BasicConstraints')))
    _CertExtensions_val_ExtnType_10 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'NameConstraints')))
    _CertExtensions_val_ExtnType_11 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'PolicyConstraints')))
    _CertExtensions_val_ExtnType_12 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'ExtKeyUsageSyntax')))
    _CertExtensions_val_ExtnType_13 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLDistributionPoints')))
    _CertExtensions_val_ExtnType_14 = INT(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'SkipCerts')))
    _CertExtensions_val_ExtnType_15 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLDistributionPoints')))
    _CertExtensions_val_ExtnType_16 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'AuthorityInfoAccessSyntax')))
    _CertExtensions_val_ExtnType_17 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'SubjectInfoAccessSyntax')))
    CertExtensions._val = ASN1Set(rv=[dict([('ExtnType', _CertExtensions_val_ExtnType_0), ('id', (2, 5, 29, 35))]), dict([('ExtnType', _CertExtensions_val_ExtnType_1), ('id', (2, 5, 29, 14))]), dict([('ExtnType', _CertExtensions_val_ExtnType_2), ('id', (2, 5, 29, 15))]), dict([('ExtnType', _CertExtensions_val_ExtnType_3), ('id', (2, 5, 29, 16))]), dict([('ExtnType', _CertExtensions_val_ExtnType_4), ('id', (2, 5, 29, 32))]), dict([('ExtnType', _CertExtensions_val_ExtnType_5), ('id', (2, 5, 29, 33))]), dict([('ExtnType', _CertExtensions_val_ExtnType_6), ('id', (2, 5, 29, 17))]), dict([('ExtnType', _CertExtensions_val_ExtnType_7), ('id', (2, 5, 29, 18))]), dict([('ExtnType', _CertExtensions_val_ExtnType_8), ('id', (2, 5, 29, 9))]), dict([('ExtnType', _CertExtensions_val_ExtnType_9), ('id', (2, 5, 29, 19))]), dict([('ExtnType', _CertExtensions_val_ExtnType_10), ('id', (2, 5, 29, 30))]), dict([('ExtnType', _CertExtensions_val_ExtnType_11), ('id', (2, 5, 29, 36))]), dict([('ExtnType', _CertExtensions_val_ExtnType_12), ('id', (2, 5, 29, 37))]), dict([('ExtnType', _CertExtensions_val_ExtnType_13), ('id', (2, 5, 29, 31))]), dict([('ExtnType', _CertExtensions_val_ExtnType_14), ('id', (2, 5, 29, 54))]), dict([('ExtnType', _CertExtensions_val_ExtnType_15), ('id', (2, 5, 29, 46))]), dict([('ExtnType', _CertExtensions_val_ExtnType_16), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 1))]), dict([('ExtnType', _CertExtensions_val_ExtnType_17), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 11))])], rr=[], ev=[], er=[])
    
    #-----< CrlExtensions >-----#
    CrlExtensions = CLASS(name='CrlExtensions', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _CrlExtensions_val_ExtnType_0 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'AuthorityKeyIdentifier')))
    _CrlExtensions_val_ExtnType_1 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    _CrlExtensions_val_ExtnType_2 = INT(name='ExtnType', mode=MODE_TYPE)
    _CrlExtensions_val_ExtnType_2._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    _CrlExtensions_val_ExtnType_3 = INT(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLNumber')))
    _CrlExtensions_val_ExtnType_4 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'IssuingDistributionPoint')))
    _CrlExtensions_val_ExtnType_5 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLDistributionPoints')))
    CrlExtensions._val = ASN1Set(rv=[dict([('ExtnType', _CrlExtensions_val_ExtnType_0), ('id', (2, 5, 29, 35))]), dict([('ExtnType', _CrlExtensions_val_ExtnType_1), ('id', (2, 5, 29, 18))]), dict([('ExtnType', _CrlExtensions_val_ExtnType_2), ('id', (2, 5, 29, 20))]), dict([('ExtnType', _CrlExtensions_val_ExtnType_3), ('id', (2, 5, 29, 27))]), dict([('ExtnType', _CrlExtensions_val_ExtnType_4), ('id', (2, 5, 29, 28))]), dict([('ExtnType', _CrlExtensions_val_ExtnType_5), ('id', (2, 5, 29, 46))])], rr=[], ev=[], er=[])
    
    #-----< CrlEntryExtensions >-----#
    CrlEntryExtensions = CLASS(name='CrlEntryExtensions', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _CrlEntryExtensions_val_ExtnType_0 = ENUM(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLReason')))
    _CrlEntryExtensions_val_ExtnType_1 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    _CrlEntryExtensions_val_ExtnType_2 = OID(name='ExtnType', mode=MODE_TYPE)
    _CrlEntryExtensions_val_ExtnType_3 = TIME_GEN(name='ExtnType', mode=MODE_TYPE)
    CrlEntryExtensions._val = ASN1Set(rv=[dict([('ExtnType', _CrlEntryExtensions_val_ExtnType_0), ('id', (2, 5, 29, 21))]), dict([('ExtnType', _CrlEntryExtensions_val_ExtnType_1), ('id', (2, 5, 29, 29))]), dict([('ExtnType', _CrlEntryExtensions_val_ExtnType_2), ('id', (2, 5, 29, 23))]), dict([('ExtnType', _CrlEntryExtensions_val_ExtnType_3), ('id', (2, 5, 29, 24))])], rr=[], ev=[], er=[])
    
    #-----< id-ce >-----#
    id_ce = OID(name='id-ce', mode=MODE_VALUE)
    id_ce._val = (2, 5, 29)
    
    #-----< ext-AuthorityKeyIdentifier >-----#
    ext_AuthorityKeyIdentifier = CLASS(name='ext-AuthorityKeyIdentifier', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_AuthorityKeyIdentifier_val_ExtnType = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'AuthorityKeyIdentifier')))
    ext_AuthorityKeyIdentifier._val = dict([('ExtnType', _ext_AuthorityKeyIdentifier_val_ExtnType), ('id', (2, 5, 29, 35))])
    
    #-----< id-ce-authorityKeyIdentifier >-----#
    id_ce_authorityKeyIdentifier = OID(name='id-ce-authorityKeyIdentifier', mode=MODE_VALUE)
    id_ce_authorityKeyIdentifier._val = (2, 5, 29, 35)
    
    #-----< AuthorityKeyIdentifier >-----#
    AuthorityKeyIdentifier = SEQ(name='AuthorityKeyIdentifier', mode=MODE_TYPE)
    _AuthorityKeyIdentifier_keyIdentifier = OCT_STR(name='keyIdentifier', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'KeyIdentifier')), opt=True)
    _AuthorityKeyIdentifier_authorityCertIssuer = SEQ_OF(name='authorityCertIssuer', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')), opt=True)
    _AuthorityKeyIdentifier_authorityCertSerialNumber = INT(name='authorityCertSerialNumber', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Explicit-2009', 'CertificateSerialNumber')), opt=True)
    AuthorityKeyIdentifier._cont = ASN1Dict([
        ('keyIdentifier', _AuthorityKeyIdentifier_keyIdentifier),
        ('authorityCertIssuer', _AuthorityKeyIdentifier_authorityCertIssuer),
        ('authorityCertSerialNumber', _AuthorityKeyIdentifier_authorityCertSerialNumber),
        ])
    AuthorityKeyIdentifier._ext = None
    
    #-----< KeyIdentifier >-----#
    KeyIdentifier = OCT_STR(name='KeyIdentifier', mode=MODE_TYPE)
    
    #-----< ext-SubjectKeyIdentifier >-----#
    ext_SubjectKeyIdentifier = CLASS(name='ext-SubjectKeyIdentifier', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_SubjectKeyIdentifier_val_ExtnType = OCT_STR(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'KeyIdentifier')))
    ext_SubjectKeyIdentifier._val = dict([('ExtnType', _ext_SubjectKeyIdentifier_val_ExtnType), ('id', (2, 5, 29, 14))])
    
    #-----< id-ce-subjectKeyIdentifier >-----#
    id_ce_subjectKeyIdentifier = OID(name='id-ce-subjectKeyIdentifier', mode=MODE_VALUE)
    id_ce_subjectKeyIdentifier._val = (2, 5, 29, 14)
    
    #-----< ext-KeyUsage >-----#
    ext_KeyUsage = CLASS(name='ext-KeyUsage', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_KeyUsage_val_ExtnType = BIT_STR(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'KeyUsage')))
    ext_KeyUsage._val = dict([('ExtnType', _ext_KeyUsage_val_ExtnType), ('id', (2, 5, 29, 15))])
    
    #-----< id-ce-keyUsage >-----#
    id_ce_keyUsage = OID(name='id-ce-keyUsage', mode=MODE_VALUE)
    id_ce_keyUsage._val = (2, 5, 29, 15)
    
    #-----< KeyUsage >-----#
    KeyUsage = BIT_STR(name='KeyUsage', mode=MODE_TYPE)
    KeyUsage._cont = ASN1Dict([('digitalSignature', 0), ('nonRepudiation', 1), ('keyEncipherment', 2), ('dataEncipherment', 3), ('keyAgreement', 4), ('keyCertSign', 5), ('cRLSign', 6), ('encipherOnly', 7), ('decipherOnly', 8)])
    
    #-----< ext-PrivateKeyUsagePeriod >-----#
    ext_PrivateKeyUsagePeriod = CLASS(name='ext-PrivateKeyUsagePeriod', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_PrivateKeyUsagePeriod_val_ExtnType = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'PrivateKeyUsagePeriod')))
    ext_PrivateKeyUsagePeriod._val = dict([('ExtnType', _ext_PrivateKeyUsagePeriod_val_ExtnType), ('id', (2, 5, 29, 16))])
    
    #-----< id-ce-privateKeyUsagePeriod >-----#
    id_ce_privateKeyUsagePeriod = OID(name='id-ce-privateKeyUsagePeriod', mode=MODE_VALUE)
    id_ce_privateKeyUsagePeriod._val = (2, 5, 29, 16)
    
    #-----< PrivateKeyUsagePeriod >-----#
    PrivateKeyUsagePeriod = SEQ(name='PrivateKeyUsagePeriod', mode=MODE_TYPE)
    _PrivateKeyUsagePeriod_notBefore = TIME_GEN(name='notBefore', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PrivateKeyUsagePeriod_notAfter = TIME_GEN(name='notAfter', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    PrivateKeyUsagePeriod._cont = ASN1Dict([
        ('notBefore', _PrivateKeyUsagePeriod_notBefore),
        ('notAfter', _PrivateKeyUsagePeriod_notAfter),
        ])
    PrivateKeyUsagePeriod._ext = None
    
    #-----< ext-CertificatePolicies >-----#
    ext_CertificatePolicies = CLASS(name='ext-CertificatePolicies', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_CertificatePolicies_val_ExtnType = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CertificatePolicies')))
    ext_CertificatePolicies._val = dict([('ExtnType', _ext_CertificatePolicies_val_ExtnType), ('id', (2, 5, 29, 32))])
    
    #-----< id-ce-certificatePolicies >-----#
    id_ce_certificatePolicies = OID(name='id-ce-certificatePolicies', mode=MODE_VALUE)
    id_ce_certificatePolicies._val = (2, 5, 29, 32)
    
    #-----< CertificatePolicies >-----#
    CertificatePolicies = SEQ_OF(name='CertificatePolicies', mode=MODE_TYPE)
    _CertificatePolicies__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'PolicyInformation')))
    CertificatePolicies._cont = _CertificatePolicies__item_
    CertificatePolicies._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    
    #-----< PolicyInformation >-----#
    PolicyInformation = SEQ(name='PolicyInformation', mode=MODE_TYPE)
    _PolicyInformation_policyIdentifier = OID(name='policyIdentifier', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CertPolicyId')))
    _PolicyInformation_policyQualifiers = SEQ_OF(name='policyQualifiers', mode=MODE_TYPE, opt=True)
    __PolicyInformation_policyQualifiers__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'PolicyQualifierInfo')))
    _PolicyInformation_policyQualifiers._cont = __PolicyInformation_policyQualifiers__item_
    _PolicyInformation_policyQualifiers._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    PolicyInformation._cont = ASN1Dict([
        ('policyIdentifier', _PolicyInformation_policyIdentifier),
        ('policyQualifiers', _PolicyInformation_policyQualifiers),
        ])
    PolicyInformation._ext = None
    
    #-----< CertPolicyId >-----#
    CertPolicyId = OID(name='CertPolicyId', mode=MODE_TYPE)
    
    #-----< CERT-POLICY-QUALIFIER >-----#
    CERT_POLICY_QUALIFIER = CLASS(name='CERT-POLICY-QUALIFIER', mode=MODE_TYPE, typeref=ASN1RefType(('_IMPL_', 'TYPE-IDENTIFIER'), []))
    
    #-----< PolicyQualifierInfo >-----#
    PolicyQualifierInfo = SEQ(name='PolicyQualifierInfo', mode=MODE_TYPE)
    _PolicyQualifierInfo_policyQualifierId = OID(name='policyQualifierId', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX1Implicit-2009', 'CERT-POLICY-QUALIFIER'), ['id']))
    __PolicyQualifierInfo_policyQualifierId_tab = CLASS(name='_tab_CERT-POLICY-QUALIFIER', mode=MODE_SET, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CERT-POLICY-QUALIFIER')))
    ___PolicyQualifierInfo_policyQualifierId_tab_val_Type_0 = STR_IA5(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CPSuri')))
    ___PolicyQualifierInfo_policyQualifierId_tab_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'UserNotice')))
    __PolicyQualifierInfo_policyQualifierId_tab._val = ASN1Set(rv=[dict([('Type', ___PolicyQualifierInfo_policyQualifierId_tab_val_Type_0), ('id', (1, 3, 6, 1, 5, 5, 7, 2, 1))]), dict([('Type', ___PolicyQualifierInfo_policyQualifierId_tab_val_Type_1), ('id', (1, 3, 6, 1, 5, 5, 7, 2, 2))])], rr=[], ev=None, er=[])
    _PolicyQualifierInfo_policyQualifierId._const_tab = __PolicyQualifierInfo_policyQualifierId_tab
    _PolicyQualifierInfo_policyQualifierId._const_tab_at = None
    _PolicyQualifierInfo_policyQualifierId._const_tab_id = 'id'
    _PolicyQualifierInfo_qualifier = OPEN(name='qualifier', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX1Implicit-2009', 'CERT-POLICY-QUALIFIER'), ['Type']))
    _PolicyQualifierInfo_qualifier._const_tab = __PolicyQualifierInfo_policyQualifierId_tab
    _PolicyQualifierInfo_qualifier._const_tab_at = ('..', 'policyQualifierId')
    _PolicyQualifierInfo_qualifier._const_tab_id = 'Type'
    PolicyQualifierInfo._cont = ASN1Dict([
        ('policyQualifierId', _PolicyQualifierInfo_policyQualifierId),
        ('qualifier', _PolicyQualifierInfo_qualifier),
        ])
    PolicyQualifierInfo._ext = None
    
    #-----< PolicyQualifierId >-----#
    PolicyQualifierId = CLASS(name='PolicyQualifierId', mode=MODE_SET, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CERT-POLICY-QUALIFIER')))
    _PolicyQualifierId_val_Type_0 = STR_IA5(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CPSuri')))
    _PolicyQualifierId_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'UserNotice')))
    PolicyQualifierId._val = ASN1Set(rv=[dict([('Type', _PolicyQualifierId_val_Type_0), ('id', (1, 3, 6, 1, 5, 5, 7, 2, 1))]), dict([('Type', _PolicyQualifierId_val_Type_1), ('id', (1, 3, 6, 1, 5, 5, 7, 2, 2))])], rr=[], ev=[], er=[])
    
    #-----< pqid-cps >-----#
    pqid_cps = CLASS(name='pqid-cps', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CERT-POLICY-QUALIFIER')))
    _pqid_cps_val_Type = STR_IA5(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CPSuri')))
    pqid_cps._val = dict([('Type', _pqid_cps_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 2, 1))])
    
    #-----< pqid-unotice >-----#
    pqid_unotice = CLASS(name='pqid-unotice', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CERT-POLICY-QUALIFIER')))
    _pqid_unotice_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'UserNotice')))
    pqid_unotice._val = dict([('Type', _pqid_unotice_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 2, 2))])
    
    #-----< CPSuri >-----#
    CPSuri = STR_IA5(name='CPSuri', mode=MODE_TYPE)
    
    #-----< UserNotice >-----#
    UserNotice = SEQ(name='UserNotice', mode=MODE_TYPE)
    _UserNotice_noticeRef = SEQ(name='noticeRef', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'NoticeReference')), opt=True)
    _UserNotice_explicitText = CHOICE(name='explicitText', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'DisplayText')), opt=True)
    UserNotice._cont = ASN1Dict([
        ('noticeRef', _UserNotice_noticeRef),
        ('explicitText', _UserNotice_explicitText),
        ])
    UserNotice._ext = None
    
    #-----< NoticeReference >-----#
    NoticeReference = SEQ(name='NoticeReference', mode=MODE_TYPE)
    _NoticeReference_organization = CHOICE(name='organization', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'DisplayText')))
    _NoticeReference_noticeNumbers = SEQ_OF(name='noticeNumbers', mode=MODE_TYPE)
    __NoticeReference_noticeNumbers__item_ = INT(name='_item_', mode=MODE_TYPE)
    _NoticeReference_noticeNumbers._cont = __NoticeReference_noticeNumbers__item_
    NoticeReference._cont = ASN1Dict([
        ('organization', _NoticeReference_organization),
        ('noticeNumbers', _NoticeReference_noticeNumbers),
        ])
    NoticeReference._ext = None
    
    #-----< DisplayText >-----#
    DisplayText = CHOICE(name='DisplayText', mode=MODE_TYPE)
    _DisplayText_ia5String = STR_IA5(name='ia5String', mode=MODE_TYPE)
    _DisplayText_ia5String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=200)], ev=None, er=[])
    _DisplayText_visibleString = STR_VIS(name='visibleString', mode=MODE_TYPE)
    _DisplayText_visibleString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=200)], ev=None, er=[])
    _DisplayText_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    _DisplayText_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=200)], ev=None, er=[])
    _DisplayText_utf8String = STR_UTF8(name='utf8String', mode=MODE_TYPE)
    _DisplayText_utf8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=200)], ev=None, er=[])
    DisplayText._cont = ASN1Dict([
        ('ia5String', _DisplayText_ia5String),
        ('visibleString', _DisplayText_visibleString),
        ('bmpString', _DisplayText_bmpString),
        ('utf8String', _DisplayText_utf8String),
        ])
    DisplayText._ext = None
    
    #-----< ext-PolicyMappings >-----#
    ext_PolicyMappings = CLASS(name='ext-PolicyMappings', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_PolicyMappings_val_ExtnType = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'PolicyMappings')))
    ext_PolicyMappings._val = dict([('ExtnType', _ext_PolicyMappings_val_ExtnType), ('id', (2, 5, 29, 33))])
    
    #-----< id-ce-policyMappings >-----#
    id_ce_policyMappings = OID(name='id-ce-policyMappings', mode=MODE_VALUE)
    id_ce_policyMappings._val = (2, 5, 29, 33)
    
    #-----< PolicyMappings >-----#
    PolicyMappings = SEQ_OF(name='PolicyMappings', mode=MODE_TYPE)
    _PolicyMappings__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    __PolicyMappings__item__issuerDomainPolicy = OID(name='issuerDomainPolicy', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CertPolicyId')))
    __PolicyMappings__item__subjectDomainPolicy = OID(name='subjectDomainPolicy', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CertPolicyId')))
    _PolicyMappings__item_._cont = ASN1Dict([
        ('issuerDomainPolicy', __PolicyMappings__item__issuerDomainPolicy),
        ('subjectDomainPolicy', __PolicyMappings__item__subjectDomainPolicy),
        ])
    _PolicyMappings__item_._ext = None
    PolicyMappings._cont = _PolicyMappings__item_
    PolicyMappings._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    
    #-----< ext-SubjectAltName >-----#
    ext_SubjectAltName = CLASS(name='ext-SubjectAltName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_SubjectAltName_val_ExtnType = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    ext_SubjectAltName._val = dict([('ExtnType', _ext_SubjectAltName_val_ExtnType), ('id', (2, 5, 29, 17))])
    
    #-----< id-ce-subjectAltName >-----#
    id_ce_subjectAltName = OID(name='id-ce-subjectAltName', mode=MODE_VALUE)
    id_ce_subjectAltName._val = (2, 5, 29, 17)
    
    #-----< GeneralNames >-----#
    GeneralNames = SEQ_OF(name='GeneralNames', mode=MODE_TYPE)
    _GeneralNames__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    GeneralNames._cont = _GeneralNames__item_
    GeneralNames._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    
    #-----< GeneralName >-----#
    GeneralName = CHOICE(name='GeneralName', mode=MODE_TYPE)
    _GeneralName_otherName = SEQ(name='otherName', mode=MODE_TYPE)
    __GeneralName_otherName_type_id = OID(name='type-id', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX1Implicit-2009', 'OTHER-NAME'), ['id']))
    __GeneralName_otherName_value = OPEN(name='value', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('PKIX1Implicit-2009', 'OTHER-NAME'), ['Type']))
    _GeneralName_otherName._cont = ASN1Dict([
        ('type-id', __GeneralName_otherName_type_id),
        ('value', __GeneralName_otherName_value),
        ])
    _GeneralName_otherName._ext = None
    _GeneralName_otherName.TAG = 8
    _GeneralName_rfc822Name = STR_IA5(name='rfc822Name', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _GeneralName_dNSName = STR_IA5(name='dNSName', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _GeneralName_x400Address = SEQ(name='x400Address', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX-X400Address-2009', 'ORAddress')))
    _GeneralName_directoryName = CHOICE(name='directoryName', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Explicit-2009', 'Name')))
    _GeneralName_ediPartyName = SEQ(name='ediPartyName', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'EDIPartyName')))
    _GeneralName_uniformResourceIdentifier = STR_IA5(name='uniformResourceIdentifier', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _GeneralName_iPAddress = OCT_STR(name='iPAddress', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _GeneralName_registeredID = OID(name='registeredID', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    GeneralName._cont = ASN1Dict([
        ('otherName', _GeneralName_otherName),
        ('rfc822Name', _GeneralName_rfc822Name),
        ('dNSName', _GeneralName_dNSName),
        ('x400Address', _GeneralName_x400Address),
        ('directoryName', _GeneralName_directoryName),
        ('ediPartyName', _GeneralName_ediPartyName),
        ('uniformResourceIdentifier', _GeneralName_uniformResourceIdentifier),
        ('iPAddress', _GeneralName_iPAddress),
        ('registeredID', _GeneralName_registeredID),
        ])
    GeneralName._ext = None
    
    #-----< OTHER-NAME >-----#
    OTHER_NAME = CLASS(name='OTHER-NAME', mode=MODE_TYPE, typeref=ASN1RefType(('_IMPL_', 'TYPE-IDENTIFIER'), []))
    
    #-----< EDIPartyName >-----#
    EDIPartyName = SEQ(name='EDIPartyName', mode=MODE_TYPE)
    _EDIPartyName_nameAssigner = CHOICE(name='nameAssigner', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')), opt=True)
    __EDIPartyName_nameAssigner_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    __EDIPartyName_nameAssigner_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32768)], ev=None, er=[])
    __EDIPartyName_nameAssigner_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    __EDIPartyName_nameAssigner_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32768)], ev=None, er=[])
    __EDIPartyName_nameAssigner_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    __EDIPartyName_nameAssigner_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32768)], ev=None, er=[])
    __EDIPartyName_nameAssigner_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    __EDIPartyName_nameAssigner_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32768)], ev=None, er=[])
    __EDIPartyName_nameAssigner_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    __EDIPartyName_nameAssigner_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32768)], ev=None, er=[])
    _EDIPartyName_nameAssigner._cont = ASN1Dict([
        ('teletexString', __EDIPartyName_nameAssigner_teletexString),
        ('printableString', __EDIPartyName_nameAssigner_printableString),
        ('bmpString', __EDIPartyName_nameAssigner_bmpString),
        ('universalString', __EDIPartyName_nameAssigner_universalString),
        ('uTF8String', __EDIPartyName_nameAssigner_uTF8String),
        ])
    _EDIPartyName_nameAssigner._ext = None
    _EDIPartyName_partyName = CHOICE(name='partyName', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    __EDIPartyName_partyName_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    __EDIPartyName_partyName_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32768)], ev=None, er=[])
    __EDIPartyName_partyName_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    __EDIPartyName_partyName_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32768)], ev=None, er=[])
    __EDIPartyName_partyName_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    __EDIPartyName_partyName_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32768)], ev=None, er=[])
    __EDIPartyName_partyName_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    __EDIPartyName_partyName_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32768)], ev=None, er=[])
    __EDIPartyName_partyName_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    __EDIPartyName_partyName_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32768)], ev=None, er=[])
    _EDIPartyName_partyName._cont = ASN1Dict([
        ('teletexString', __EDIPartyName_partyName_teletexString),
        ('printableString', __EDIPartyName_partyName_printableString),
        ('bmpString', __EDIPartyName_partyName_bmpString),
        ('universalString', __EDIPartyName_partyName_universalString),
        ('uTF8String', __EDIPartyName_partyName_uTF8String),
        ])
    _EDIPartyName_partyName._ext = None
    EDIPartyName._cont = ASN1Dict([
        ('nameAssigner', _EDIPartyName_nameAssigner),
        ('partyName', _EDIPartyName_partyName),
        ])
    EDIPartyName._ext = None
    
    #-----< ext-IssuerAltName >-----#
    ext_IssuerAltName = CLASS(name='ext-IssuerAltName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_IssuerAltName_val_ExtnType = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    ext_IssuerAltName._val = dict([('ExtnType', _ext_IssuerAltName_val_ExtnType), ('id', (2, 5, 29, 18))])
    
    #-----< id-ce-issuerAltName >-----#
    id_ce_issuerAltName = OID(name='id-ce-issuerAltName', mode=MODE_VALUE)
    id_ce_issuerAltName._val = (2, 5, 29, 18)
    
    #-----< ext-SubjectDirectoryAttributes >-----#
    ext_SubjectDirectoryAttributes = CLASS(name='ext-SubjectDirectoryAttributes', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_SubjectDirectoryAttributes_val_ExtnType = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'SubjectDirectoryAttributes')))
    ext_SubjectDirectoryAttributes._val = dict([('ExtnType', _ext_SubjectDirectoryAttributes_val_ExtnType), ('id', (2, 5, 29, 9))])
    
    #-----< id-ce-subjectDirectoryAttributes >-----#
    id_ce_subjectDirectoryAttributes = OID(name='id-ce-subjectDirectoryAttributes', mode=MODE_VALUE)
    id_ce_subjectDirectoryAttributes._val = (2, 5, 29, 9)
    
    #-----< SubjectDirectoryAttributes >-----#
    SubjectDirectoryAttributes = SEQ_OF(name='SubjectDirectoryAttributes', mode=MODE_TYPE)
    _SubjectDirectoryAttributes__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'AttributeSet')))
    __SubjectDirectoryAttributes__item__type = OID(name='type', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['id']))
    ___SubjectDirectoryAttributes__item__type_tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_0 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520name')))
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_1 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520name')))
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_2 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520name')))
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_3 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520name')))
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_4 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520name')))
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_5 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520CommonName')))
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_6 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520LocalityName')))
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_7 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_7_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_7_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_7_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_7_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_7_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_7_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_7_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_7_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_7_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_7_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_7._cont = ASN1Dict([
        ('teletexString', _____SubjectDirectoryAttributes__item__type_tab_val_Type_7_teletexString),
        ('printableString', _____SubjectDirectoryAttributes__item__type_tab_val_Type_7_printableString),
        ('bmpString', _____SubjectDirectoryAttributes__item__type_tab_val_Type_7_bmpString),
        ('universalString', _____SubjectDirectoryAttributes__item__type_tab_val_Type_7_universalString),
        ('uTF8String', _____SubjectDirectoryAttributes__item__type_tab_val_Type_7_uTF8String),
        ])
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_7._ext = None
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_8 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_8_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_8_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_8_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_8_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_8_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_8_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_8_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_8_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_8_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_8_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_8._cont = ASN1Dict([
        ('teletexString', _____SubjectDirectoryAttributes__item__type_tab_val_Type_8_teletexString),
        ('printableString', _____SubjectDirectoryAttributes__item__type_tab_val_Type_8_printableString),
        ('bmpString', _____SubjectDirectoryAttributes__item__type_tab_val_Type_8_bmpString),
        ('universalString', _____SubjectDirectoryAttributes__item__type_tab_val_Type_8_universalString),
        ('uTF8String', _____SubjectDirectoryAttributes__item__type_tab_val_Type_8_uTF8String),
        ])
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_8._ext = None
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_9 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_9_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_9_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_9_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_9_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_9_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_9_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_9_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_9_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_9_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_9_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_9._cont = ASN1Dict([
        ('teletexString', _____SubjectDirectoryAttributes__item__type_tab_val_Type_9_teletexString),
        ('printableString', _____SubjectDirectoryAttributes__item__type_tab_val_Type_9_printableString),
        ('bmpString', _____SubjectDirectoryAttributes__item__type_tab_val_Type_9_bmpString),
        ('universalString', _____SubjectDirectoryAttributes__item__type_tab_val_Type_9_universalString),
        ('uTF8String', _____SubjectDirectoryAttributes__item__type_tab_val_Type_9_uTF8String),
        ])
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_9._ext = None
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_10 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_10_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_10_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_10_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_10_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_10_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_10_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_10_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_10_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_10_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_10_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_10._cont = ASN1Dict([
        ('teletexString', _____SubjectDirectoryAttributes__item__type_tab_val_Type_10_teletexString),
        ('printableString', _____SubjectDirectoryAttributes__item__type_tab_val_Type_10_printableString),
        ('bmpString', _____SubjectDirectoryAttributes__item__type_tab_val_Type_10_bmpString),
        ('universalString', _____SubjectDirectoryAttributes__item__type_tab_val_Type_10_universalString),
        ('uTF8String', _____SubjectDirectoryAttributes__item__type_tab_val_Type_10_uTF8String),
        ])
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_10._ext = None
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_11 = STR_PRINT(name='Type', mode=MODE_TYPE)
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_12 = STR_PRINT(name='Type', mode=MODE_TYPE)
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_12._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_13 = STR_PRINT(name='Type', mode=MODE_TYPE)
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_13._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_14 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_14_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_14_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_14_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_14_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_14_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_14_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_14_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_14_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_14_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    _____SubjectDirectoryAttributes__item__type_tab_val_Type_14_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_14._cont = ASN1Dict([
        ('teletexString', _____SubjectDirectoryAttributes__item__type_tab_val_Type_14_teletexString),
        ('printableString', _____SubjectDirectoryAttributes__item__type_tab_val_Type_14_printableString),
        ('bmpString', _____SubjectDirectoryAttributes__item__type_tab_val_Type_14_bmpString),
        ('universalString', _____SubjectDirectoryAttributes__item__type_tab_val_Type_14_universalString),
        ('uTF8String', _____SubjectDirectoryAttributes__item__type_tab_val_Type_14_uTF8String),
        ])
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_14._ext = None
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_15 = STR_IA5(name='Type', mode=MODE_TYPE)
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_16 = STR_IA5(name='Type', mode=MODE_TYPE)
    ____SubjectDirectoryAttributes__item__type_tab_val_Type_16._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    ___SubjectDirectoryAttributes__item__type_tab._val = ASN1Set(rv=[dict([('Type', ____SubjectDirectoryAttributes__item__type_tab_val_Type_0), ('id', (2, 5, 4, 41))]), dict([('Type', ____SubjectDirectoryAttributes__item__type_tab_val_Type_1), ('id', (2, 5, 4, 4))]), dict([('Type', ____SubjectDirectoryAttributes__item__type_tab_val_Type_2), ('id', (2, 5, 4, 42))]), dict([('Type', ____SubjectDirectoryAttributes__item__type_tab_val_Type_3), ('id', (2, 5, 4, 43))]), dict([('Type', ____SubjectDirectoryAttributes__item__type_tab_val_Type_4), ('id', (2, 5, 4, 44))]), dict([('Type', ____SubjectDirectoryAttributes__item__type_tab_val_Type_5), ('id', (2, 5, 4, 3))]), dict([('Type', ____SubjectDirectoryAttributes__item__type_tab_val_Type_6), ('id', (2, 5, 4, 7))]), dict([('Type', ____SubjectDirectoryAttributes__item__type_tab_val_Type_7), ('id', (2, 5, 4, 8))]), dict([('Type', ____SubjectDirectoryAttributes__item__type_tab_val_Type_8), ('id', (2, 5, 4, 10))]), dict([('Type', ____SubjectDirectoryAttributes__item__type_tab_val_Type_9), ('id', (2, 5, 4, 11))]), dict([('Type', ____SubjectDirectoryAttributes__item__type_tab_val_Type_10), ('id', (2, 5, 4, 12))]), dict([('Type', ____SubjectDirectoryAttributes__item__type_tab_val_Type_11), ('id', (2, 5, 4, 46))]), dict([('Type', ____SubjectDirectoryAttributes__item__type_tab_val_Type_12), ('id', (2, 5, 4, 6))]), dict([('Type', ____SubjectDirectoryAttributes__item__type_tab_val_Type_13), ('id', (2, 5, 4, 5))]), dict([('Type', ____SubjectDirectoryAttributes__item__type_tab_val_Type_14), ('id', (2, 5, 4, 65))]), dict([('Type', ____SubjectDirectoryAttributes__item__type_tab_val_Type_15), ('id', (0, 9, 2342, 19200300, 100, 1, 25))]), dict([('Type', ____SubjectDirectoryAttributes__item__type_tab_val_Type_16), ('id', (1, 2, 840, 113549, 1, 9, 1))])], rr=[], ev=None, er=[])
    __SubjectDirectoryAttributes__item__type._const_tab = ___SubjectDirectoryAttributes__item__type_tab
    __SubjectDirectoryAttributes__item__type._const_tab_at = None
    __SubjectDirectoryAttributes__item__type._const_tab_id = 'id'
    __SubjectDirectoryAttributes__item__values = SET_OF(name='values', mode=MODE_TYPE)
    ___SubjectDirectoryAttributes__item__values__item_ = OPEN(name='_item_', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['Type']))
    ___SubjectDirectoryAttributes__item__values__item_._const_tab = ___SubjectDirectoryAttributes__item__type_tab
    ___SubjectDirectoryAttributes__item__values__item_._const_tab_at = ('..', '..', 'type')
    ___SubjectDirectoryAttributes__item__values__item_._const_tab_id = 'Type'
    __SubjectDirectoryAttributes__item__values._cont = ___SubjectDirectoryAttributes__item__values__item_
    __SubjectDirectoryAttributes__item__values._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    _SubjectDirectoryAttributes__item_._cont = ASN1Dict([
        ('type', __SubjectDirectoryAttributes__item__type),
        ('values', __SubjectDirectoryAttributes__item__values),
        ])
    _SubjectDirectoryAttributes__item_._ext = None
    SubjectDirectoryAttributes._cont = _SubjectDirectoryAttributes__item_
    SubjectDirectoryAttributes._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    
    #-----< ext-BasicConstraints >-----#
    ext_BasicConstraints = CLASS(name='ext-BasicConstraints', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_BasicConstraints_val_ExtnType = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'BasicConstraints')))
    ext_BasicConstraints._val = dict([('ExtnType', _ext_BasicConstraints_val_ExtnType), ('id', (2, 5, 29, 19))])
    
    #-----< id-ce-basicConstraints >-----#
    id_ce_basicConstraints = OID(name='id-ce-basicConstraints', mode=MODE_VALUE)
    id_ce_basicConstraints._val = (2, 5, 29, 19)
    
    #-----< BasicConstraints >-----#
    BasicConstraints = SEQ(name='BasicConstraints', mode=MODE_TYPE)
    _BasicConstraints_cA = BOOL(name='cA', mode=MODE_TYPE, default=False)
    _BasicConstraints_pathLenConstraint = INT(name='pathLenConstraint', mode=MODE_TYPE, opt=True)
    _BasicConstraints_pathLenConstraint._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    BasicConstraints._cont = ASN1Dict([
        ('cA', _BasicConstraints_cA),
        ('pathLenConstraint', _BasicConstraints_pathLenConstraint),
        ])
    BasicConstraints._ext = None
    
    #-----< ext-NameConstraints >-----#
    ext_NameConstraints = CLASS(name='ext-NameConstraints', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_NameConstraints_val_ExtnType = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'NameConstraints')))
    ext_NameConstraints._val = dict([('ExtnType', _ext_NameConstraints_val_ExtnType), ('id', (2, 5, 29, 30))])
    
    #-----< id-ce-nameConstraints >-----#
    id_ce_nameConstraints = OID(name='id-ce-nameConstraints', mode=MODE_VALUE)
    id_ce_nameConstraints._val = (2, 5, 29, 30)
    
    #-----< NameConstraints >-----#
    NameConstraints = SEQ(name='NameConstraints', mode=MODE_TYPE)
    _NameConstraints_permittedSubtrees = SEQ_OF(name='permittedSubtrees', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralSubtrees')), opt=True)
    _NameConstraints_excludedSubtrees = SEQ_OF(name='excludedSubtrees', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralSubtrees')), opt=True)
    NameConstraints._cont = ASN1Dict([
        ('permittedSubtrees', _NameConstraints_permittedSubtrees),
        ('excludedSubtrees', _NameConstraints_excludedSubtrees),
        ])
    NameConstraints._ext = None
    
    #-----< GeneralSubtrees >-----#
    GeneralSubtrees = SEQ_OF(name='GeneralSubtrees', mode=MODE_TYPE)
    _GeneralSubtrees__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralSubtree')))
    GeneralSubtrees._cont = _GeneralSubtrees__item_
    GeneralSubtrees._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    
    #-----< GeneralSubtree >-----#
    GeneralSubtree = SEQ(name='GeneralSubtree', mode=MODE_TYPE)
    _GeneralSubtree_base = CHOICE(name='base', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    _GeneralSubtree_minimum = INT(name='minimum', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'BaseDistance')), default=0)
    _GeneralSubtree_maximum = INT(name='maximum', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'BaseDistance')), opt=True)
    GeneralSubtree._cont = ASN1Dict([
        ('base', _GeneralSubtree_base),
        ('minimum', _GeneralSubtree_minimum),
        ('maximum', _GeneralSubtree_maximum),
        ])
    GeneralSubtree._ext = None
    
    #-----< BaseDistance >-----#
    BaseDistance = INT(name='BaseDistance', mode=MODE_TYPE)
    BaseDistance._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    
    #-----< ext-PolicyConstraints >-----#
    ext_PolicyConstraints = CLASS(name='ext-PolicyConstraints', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_PolicyConstraints_val_ExtnType = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'PolicyConstraints')))
    ext_PolicyConstraints._val = dict([('ExtnType', _ext_PolicyConstraints_val_ExtnType), ('id', (2, 5, 29, 36))])
    
    #-----< id-ce-policyConstraints >-----#
    id_ce_policyConstraints = OID(name='id-ce-policyConstraints', mode=MODE_VALUE)
    id_ce_policyConstraints._val = (2, 5, 29, 36)
    
    #-----< PolicyConstraints >-----#
    PolicyConstraints = SEQ(name='PolicyConstraints', mode=MODE_TYPE)
    _PolicyConstraints_requireExplicitPolicy = INT(name='requireExplicitPolicy', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'SkipCerts')), opt=True)
    _PolicyConstraints_inhibitPolicyMapping = INT(name='inhibitPolicyMapping', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'SkipCerts')), opt=True)
    PolicyConstraints._cont = ASN1Dict([
        ('requireExplicitPolicy', _PolicyConstraints_requireExplicitPolicy),
        ('inhibitPolicyMapping', _PolicyConstraints_inhibitPolicyMapping),
        ])
    PolicyConstraints._ext = None
    
    #-----< SkipCerts >-----#
    SkipCerts = INT(name='SkipCerts', mode=MODE_TYPE)
    SkipCerts._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    
    #-----< ext-CRLDistributionPoints >-----#
    ext_CRLDistributionPoints = CLASS(name='ext-CRLDistributionPoints', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_CRLDistributionPoints_val_ExtnType = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLDistributionPoints')))
    ext_CRLDistributionPoints._val = dict([('ExtnType', _ext_CRLDistributionPoints_val_ExtnType), ('id', (2, 5, 29, 31))])
    
    #-----< id-ce-cRLDistributionPoints >-----#
    id_ce_cRLDistributionPoints = OID(name='id-ce-cRLDistributionPoints', mode=MODE_VALUE)
    id_ce_cRLDistributionPoints._val = (2, 5, 29, 31)
    
    #-----< CRLDistributionPoints >-----#
    CRLDistributionPoints = SEQ_OF(name='CRLDistributionPoints', mode=MODE_TYPE)
    _CRLDistributionPoints__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'DistributionPoint')))
    CRLDistributionPoints._cont = _CRLDistributionPoints__item_
    CRLDistributionPoints._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    
    #-----< DistributionPoint >-----#
    DistributionPoint = SEQ(name='DistributionPoint', mode=MODE_TYPE)
    _DistributionPoint_distributionPoint = CHOICE(name='distributionPoint', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'DistributionPointName')), opt=True)
    _DistributionPoint_reasons = BIT_STR(name='reasons', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'ReasonFlags')), opt=True)
    _DistributionPoint_cRLIssuer = SEQ_OF(name='cRLIssuer', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')), opt=True)
    DistributionPoint._cont = ASN1Dict([
        ('distributionPoint', _DistributionPoint_distributionPoint),
        ('reasons', _DistributionPoint_reasons),
        ('cRLIssuer', _DistributionPoint_cRLIssuer),
        ])
    DistributionPoint._ext = None
    
    #-----< DistributionPointName >-----#
    DistributionPointName = CHOICE(name='DistributionPointName', mode=MODE_TYPE)
    _DistributionPointName_fullName = SEQ_OF(name='fullName', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    _DistributionPointName_nameRelativeToCRLIssuer = SET_OF(name='nameRelativeToCRLIssuer', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Explicit-2009', 'RelativeDistinguishedName')))
    DistributionPointName._cont = ASN1Dict([
        ('fullName', _DistributionPointName_fullName),
        ('nameRelativeToCRLIssuer', _DistributionPointName_nameRelativeToCRLIssuer),
        ])
    DistributionPointName._ext = None
    
    #-----< ReasonFlags >-----#
    ReasonFlags = BIT_STR(name='ReasonFlags', mode=MODE_TYPE)
    ReasonFlags._cont = ASN1Dict([('unused', 0), ('keyCompromise', 1), ('cACompromise', 2), ('affiliationChanged', 3), ('superseded', 4), ('cessationOfOperation', 5), ('certificateHold', 6), ('privilegeWithdrawn', 7), ('aACompromise', 8)])
    
    #-----< ext-ExtKeyUsage >-----#
    ext_ExtKeyUsage = CLASS(name='ext-ExtKeyUsage', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_ExtKeyUsage_val_ExtnType = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'ExtKeyUsageSyntax')))
    ext_ExtKeyUsage._val = dict([('ExtnType', _ext_ExtKeyUsage_val_ExtnType), ('id', (2, 5, 29, 37))])
    
    #-----< id-ce-extKeyUsage >-----#
    id_ce_extKeyUsage = OID(name='id-ce-extKeyUsage', mode=MODE_VALUE)
    id_ce_extKeyUsage._val = (2, 5, 29, 37)
    
    #-----< ExtKeyUsageSyntax >-----#
    ExtKeyUsageSyntax = SEQ_OF(name='ExtKeyUsageSyntax', mode=MODE_TYPE)
    _ExtKeyUsageSyntax__item_ = OID(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'KeyPurposeId')))
    ExtKeyUsageSyntax._cont = _ExtKeyUsageSyntax__item_
    ExtKeyUsageSyntax._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    
    #-----< KeyPurposeId >-----#
    KeyPurposeId = OID(name='KeyPurposeId', mode=MODE_TYPE)
    
    #-----< anyExtendedKeyUsage >-----#
    anyExtendedKeyUsage = OID(name='anyExtendedKeyUsage', mode=MODE_VALUE)
    anyExtendedKeyUsage._val = (2, 5, 29, 37, 0)
    
    #-----< id-kp-serverAuth >-----#
    id_kp_serverAuth = OID(name='id-kp-serverAuth', mode=MODE_VALUE)
    id_kp_serverAuth._val = (1, 3, 6, 1, 5, 5, 7, 3, 1)
    
    #-----< id-kp-clientAuth >-----#
    id_kp_clientAuth = OID(name='id-kp-clientAuth', mode=MODE_VALUE)
    id_kp_clientAuth._val = (1, 3, 6, 1, 5, 5, 7, 3, 2)
    
    #-----< id-kp-codeSigning >-----#
    id_kp_codeSigning = OID(name='id-kp-codeSigning', mode=MODE_VALUE)
    id_kp_codeSigning._val = (1, 3, 6, 1, 5, 5, 7, 3, 3)
    
    #-----< id-kp-emailProtection >-----#
    id_kp_emailProtection = OID(name='id-kp-emailProtection', mode=MODE_VALUE)
    id_kp_emailProtection._val = (1, 3, 6, 1, 5, 5, 7, 3, 4)
    
    #-----< id-kp-timeStamping >-----#
    id_kp_timeStamping = OID(name='id-kp-timeStamping', mode=MODE_VALUE)
    id_kp_timeStamping._val = (1, 3, 6, 1, 5, 5, 7, 3, 8)
    
    #-----< id-kp-OCSPSigning >-----#
    id_kp_OCSPSigning = OID(name='id-kp-OCSPSigning', mode=MODE_VALUE)
    id_kp_OCSPSigning._val = (1, 3, 6, 1, 5, 5, 7, 3, 9)
    
    #-----< ext-InhibitAnyPolicy >-----#
    ext_InhibitAnyPolicy = CLASS(name='ext-InhibitAnyPolicy', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_InhibitAnyPolicy_val_ExtnType = INT(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'SkipCerts')))
    ext_InhibitAnyPolicy._val = dict([('ExtnType', _ext_InhibitAnyPolicy_val_ExtnType), ('id', (2, 5, 29, 54))])
    
    #-----< id-ce-inhibitAnyPolicy >-----#
    id_ce_inhibitAnyPolicy = OID(name='id-ce-inhibitAnyPolicy', mode=MODE_VALUE)
    id_ce_inhibitAnyPolicy._val = (2, 5, 29, 54)
    
    #-----< ext-FreshestCRL >-----#
    ext_FreshestCRL = CLASS(name='ext-FreshestCRL', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_FreshestCRL_val_ExtnType = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLDistributionPoints')))
    ext_FreshestCRL._val = dict([('ExtnType', _ext_FreshestCRL_val_ExtnType), ('id', (2, 5, 29, 46))])
    
    #-----< id-ce-freshestCRL >-----#
    id_ce_freshestCRL = OID(name='id-ce-freshestCRL', mode=MODE_VALUE)
    id_ce_freshestCRL._val = (2, 5, 29, 46)
    
    #-----< ext-AuthorityInfoAccess >-----#
    ext_AuthorityInfoAccess = CLASS(name='ext-AuthorityInfoAccess', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_AuthorityInfoAccess_val_ExtnType = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'AuthorityInfoAccessSyntax')))
    ext_AuthorityInfoAccess._val = dict([('ExtnType', _ext_AuthorityInfoAccess_val_ExtnType), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 1))])
    
    #-----< id-pe-authorityInfoAccess >-----#
    id_pe_authorityInfoAccess = OID(name='id-pe-authorityInfoAccess', mode=MODE_VALUE)
    id_pe_authorityInfoAccess._val = (1, 3, 6, 1, 5, 5, 7, 1, 1)
    
    #-----< AuthorityInfoAccessSyntax >-----#
    AuthorityInfoAccessSyntax = SEQ_OF(name='AuthorityInfoAccessSyntax', mode=MODE_TYPE)
    _AuthorityInfoAccessSyntax__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'AccessDescription')))
    AuthorityInfoAccessSyntax._cont = _AuthorityInfoAccessSyntax__item_
    AuthorityInfoAccessSyntax._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    
    #-----< AccessDescription >-----#
    AccessDescription = SEQ(name='AccessDescription', mode=MODE_TYPE)
    _AccessDescription_accessMethod = OID(name='accessMethod', mode=MODE_TYPE)
    _AccessDescription_accessLocation = CHOICE(name='accessLocation', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    AccessDescription._cont = ASN1Dict([
        ('accessMethod', _AccessDescription_accessMethod),
        ('accessLocation', _AccessDescription_accessLocation),
        ])
    AccessDescription._ext = None
    
    #-----< ext-SubjectInfoAccessSyntax >-----#
    ext_SubjectInfoAccessSyntax = CLASS(name='ext-SubjectInfoAccessSyntax', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_SubjectInfoAccessSyntax_val_ExtnType = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'SubjectInfoAccessSyntax')))
    ext_SubjectInfoAccessSyntax._val = dict([('ExtnType', _ext_SubjectInfoAccessSyntax_val_ExtnType), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 11))])
    
    #-----< id-pe-subjectInfoAccess >-----#
    id_pe_subjectInfoAccess = OID(name='id-pe-subjectInfoAccess', mode=MODE_VALUE)
    id_pe_subjectInfoAccess._val = (1, 3, 6, 1, 5, 5, 7, 1, 11)
    
    #-----< SubjectInfoAccessSyntax >-----#
    SubjectInfoAccessSyntax = SEQ_OF(name='SubjectInfoAccessSyntax', mode=MODE_TYPE)
    _SubjectInfoAccessSyntax__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'AccessDescription')))
    SubjectInfoAccessSyntax._cont = _SubjectInfoAccessSyntax__item_
    SubjectInfoAccessSyntax._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    
    #-----< ext-CRLNumber >-----#
    ext_CRLNumber = CLASS(name='ext-CRLNumber', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_CRLNumber_val_ExtnType = INT(name='ExtnType', mode=MODE_TYPE)
    _ext_CRLNumber_val_ExtnType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    ext_CRLNumber._val = dict([('ExtnType', _ext_CRLNumber_val_ExtnType), ('id', (2, 5, 29, 20))])
    
    #-----< id-ce-cRLNumber >-----#
    id_ce_cRLNumber = OID(name='id-ce-cRLNumber', mode=MODE_VALUE)
    id_ce_cRLNumber._val = (2, 5, 29, 20)
    
    #-----< CRLNumber >-----#
    CRLNumber = INT(name='CRLNumber', mode=MODE_TYPE)
    CRLNumber._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    
    #-----< ext-IssuingDistributionPoint >-----#
    ext_IssuingDistributionPoint = CLASS(name='ext-IssuingDistributionPoint', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_IssuingDistributionPoint_val_ExtnType = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'IssuingDistributionPoint')))
    ext_IssuingDistributionPoint._val = dict([('ExtnType', _ext_IssuingDistributionPoint_val_ExtnType), ('id', (2, 5, 29, 28))])
    
    #-----< id-ce-issuingDistributionPoint >-----#
    id_ce_issuingDistributionPoint = OID(name='id-ce-issuingDistributionPoint', mode=MODE_VALUE)
    id_ce_issuingDistributionPoint._val = (2, 5, 29, 28)
    
    #-----< IssuingDistributionPoint >-----#
    IssuingDistributionPoint = SEQ(name='IssuingDistributionPoint', mode=MODE_TYPE)
    _IssuingDistributionPoint_distributionPoint = CHOICE(name='distributionPoint', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'DistributionPointName')), opt=True)
    _IssuingDistributionPoint_onlyContainsUserCerts = BOOL(name='onlyContainsUserCerts', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=False)
    _IssuingDistributionPoint_onlyContainsCACerts = BOOL(name='onlyContainsCACerts', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=False)
    _IssuingDistributionPoint_onlySomeReasons = BIT_STR(name='onlySomeReasons', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Implicit-2009', 'ReasonFlags')), opt=True)
    _IssuingDistributionPoint_indirectCRL = BOOL(name='indirectCRL', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=False)
    _IssuingDistributionPoint_onlyContainsAttributeCerts = BOOL(name='onlyContainsAttributeCerts', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=False)
    IssuingDistributionPoint._cont = ASN1Dict([
        ('distributionPoint', _IssuingDistributionPoint_distributionPoint),
        ('onlyContainsUserCerts', _IssuingDistributionPoint_onlyContainsUserCerts),
        ('onlyContainsCACerts', _IssuingDistributionPoint_onlyContainsCACerts),
        ('onlySomeReasons', _IssuingDistributionPoint_onlySomeReasons),
        ('indirectCRL', _IssuingDistributionPoint_indirectCRL),
        ('onlyContainsAttributeCerts', _IssuingDistributionPoint_onlyContainsAttributeCerts),
        ])
    IssuingDistributionPoint._ext = None
    
    #-----< ext-DeltaCRLIndicator >-----#
    ext_DeltaCRLIndicator = CLASS(name='ext-DeltaCRLIndicator', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_DeltaCRLIndicator_val_ExtnType = INT(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLNumber')))
    ext_DeltaCRLIndicator._val = dict([('ExtnType', _ext_DeltaCRLIndicator_val_ExtnType), ('id', (2, 5, 29, 27))])
    
    #-----< id-ce-deltaCRLIndicator >-----#
    id_ce_deltaCRLIndicator = OID(name='id-ce-deltaCRLIndicator', mode=MODE_VALUE)
    id_ce_deltaCRLIndicator._val = (2, 5, 29, 27)
    
    #-----< ext-CRLReason >-----#
    ext_CRLReason = CLASS(name='ext-CRLReason', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_CRLReason_val_ExtnType = ENUM(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLReason')))
    ext_CRLReason._val = dict([('ExtnType', _ext_CRLReason_val_ExtnType), ('id', (2, 5, 29, 21))])
    
    #-----< id-ce-cRLReasons >-----#
    id_ce_cRLReasons = OID(name='id-ce-cRLReasons', mode=MODE_VALUE)
    id_ce_cRLReasons._val = (2, 5, 29, 21)
    
    #-----< CRLReason >-----#
    CRLReason = ENUM(name='CRLReason', mode=MODE_TYPE)
    CRLReason._cont = ASN1Dict([('unspecified', 0), ('keyCompromise', 1), ('cACompromise', 2), ('affiliationChanged', 3), ('superseded', 4), ('cessationOfOperation', 5), ('certificateHold', 6), ('removeFromCRL', 8), ('privilegeWithdrawn', 9), ('aACompromise', 10)])
    CRLReason._ext = None
    
    #-----< ext-CertificateIssuer >-----#
    ext_CertificateIssuer = CLASS(name='ext-CertificateIssuer', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_CertificateIssuer_val_ExtnType = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    ext_CertificateIssuer._val = dict([('ExtnType', _ext_CertificateIssuer_val_ExtnType), ('id', (2, 5, 29, 29))])
    
    #-----< id-ce-certificateIssuer >-----#
    id_ce_certificateIssuer = OID(name='id-ce-certificateIssuer', mode=MODE_VALUE)
    id_ce_certificateIssuer._val = (2, 5, 29, 29)
    
    #-----< ext-HoldInstructionCode >-----#
    ext_HoldInstructionCode = CLASS(name='ext-HoldInstructionCode', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_HoldInstructionCode_val_ExtnType = OID(name='ExtnType', mode=MODE_TYPE)
    ext_HoldInstructionCode._val = dict([('ExtnType', _ext_HoldInstructionCode_val_ExtnType), ('id', (2, 5, 29, 23))])
    
    #-----< id-ce-holdInstructionCode >-----#
    id_ce_holdInstructionCode = OID(name='id-ce-holdInstructionCode', mode=MODE_VALUE)
    id_ce_holdInstructionCode._val = (2, 5, 29, 23)
    
    #-----< holdInstruction >-----#
    holdInstruction = OID(name='holdInstruction', mode=MODE_VALUE)
    holdInstruction._val = (2, 2, 840, 10040, 2)
    
    #-----< id-holdinstruction-none >-----#
    id_holdinstruction_none = OID(name='id-holdinstruction-none', mode=MODE_VALUE)
    id_holdinstruction_none._val = (2, 2, 840, 10040, 2, 1)
    
    #-----< id-holdinstruction-callissuer >-----#
    id_holdinstruction_callissuer = OID(name='id-holdinstruction-callissuer', mode=MODE_VALUE)
    id_holdinstruction_callissuer._val = (2, 2, 840, 10040, 2, 2)
    
    #-----< id-holdinstruction-reject >-----#
    id_holdinstruction_reject = OID(name='id-holdinstruction-reject', mode=MODE_VALUE)
    id_holdinstruction_reject._val = (2, 2, 840, 10040, 2, 3)
    
    #-----< ext-InvalidityDate >-----#
    ext_InvalidityDate = CLASS(name='ext-InvalidityDate', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _ext_InvalidityDate_val_ExtnType = TIME_GEN(name='ExtnType', mode=MODE_TYPE)
    ext_InvalidityDate._val = dict([('ExtnType', _ext_InvalidityDate_val_ExtnType), ('id', (2, 5, 29, 24))])
    
    #-----< id-ce-invalidityDate >-----#
    id_ce_invalidityDate = OID(name='id-ce-invalidityDate', mode=MODE_VALUE)
    id_ce_invalidityDate._val = (2, 5, 29, 24)
    
    #-----< ubMax >-----#
    ubMax = INT(name='ubMax', mode=MODE_VALUE)
    ubMax._val = 32768
    
    _all_ = [
        CertExtensions,
        _CertExtensions_val_ExtnType_0,
        _CertExtensions_val_ExtnType_1,
        _CertExtensions_val_ExtnType_2,
        _CertExtensions_val_ExtnType_3,
        _CertExtensions_val_ExtnType_4,
        _CertExtensions_val_ExtnType_5,
        _CertExtensions_val_ExtnType_6,
        _CertExtensions_val_ExtnType_7,
        _CertExtensions_val_ExtnType_8,
        _CertExtensions_val_ExtnType_9,
        _CertExtensions_val_ExtnType_10,
        _CertExtensions_val_ExtnType_11,
        _CertExtensions_val_ExtnType_12,
        _CertExtensions_val_ExtnType_13,
        _CertExtensions_val_ExtnType_14,
        _CertExtensions_val_ExtnType_15,
        _CertExtensions_val_ExtnType_16,
        _CertExtensions_val_ExtnType_17,
        CrlExtensions,
        _CrlExtensions_val_ExtnType_0,
        _CrlExtensions_val_ExtnType_1,
        _CrlExtensions_val_ExtnType_2,
        _CrlExtensions_val_ExtnType_3,
        _CrlExtensions_val_ExtnType_4,
        _CrlExtensions_val_ExtnType_5,
        CrlEntryExtensions,
        _CrlEntryExtensions_val_ExtnType_0,
        _CrlEntryExtensions_val_ExtnType_1,
        _CrlEntryExtensions_val_ExtnType_2,
        _CrlEntryExtensions_val_ExtnType_3,
        id_ce,
        ext_AuthorityKeyIdentifier,
        _ext_AuthorityKeyIdentifier_val_ExtnType,
        id_ce_authorityKeyIdentifier,
        _AuthorityKeyIdentifier_keyIdentifier,
        _AuthorityKeyIdentifier_authorityCertIssuer,
        _AuthorityKeyIdentifier_authorityCertSerialNumber,
        AuthorityKeyIdentifier,
        KeyIdentifier,
        ext_SubjectKeyIdentifier,
        _ext_SubjectKeyIdentifier_val_ExtnType,
        id_ce_subjectKeyIdentifier,
        ext_KeyUsage,
        _ext_KeyUsage_val_ExtnType,
        id_ce_keyUsage,
        KeyUsage,
        ext_PrivateKeyUsagePeriod,
        _ext_PrivateKeyUsagePeriod_val_ExtnType,
        id_ce_privateKeyUsagePeriod,
        _PrivateKeyUsagePeriod_notBefore,
        _PrivateKeyUsagePeriod_notAfter,
        PrivateKeyUsagePeriod,
        ext_CertificatePolicies,
        _ext_CertificatePolicies_val_ExtnType,
        id_ce_certificatePolicies,
        _CertificatePolicies__item_,
        CertificatePolicies,
        _PolicyInformation_policyIdentifier,
        __PolicyInformation_policyQualifiers__item_,
        _PolicyInformation_policyQualifiers,
        PolicyInformation,
        CertPolicyId,
        CERT_POLICY_QUALIFIER,
        __PolicyQualifierInfo_policyQualifierId_tab,
        ___PolicyQualifierInfo_policyQualifierId_tab_val_Type_0,
        ___PolicyQualifierInfo_policyQualifierId_tab_val_Type_1,
        _PolicyQualifierInfo_policyQualifierId,
        _PolicyQualifierInfo_qualifier,
        PolicyQualifierInfo,
        PolicyQualifierId,
        _PolicyQualifierId_val_Type_0,
        _PolicyQualifierId_val_Type_1,
        pqid_cps,
        _pqid_cps_val_Type,
        pqid_unotice,
        _pqid_unotice_val_Type,
        CPSuri,
        _UserNotice_noticeRef,
        _UserNotice_explicitText,
        UserNotice,
        _NoticeReference_organization,
        __NoticeReference_noticeNumbers__item_,
        _NoticeReference_noticeNumbers,
        NoticeReference,
        _DisplayText_ia5String,
        _DisplayText_visibleString,
        _DisplayText_bmpString,
        _DisplayText_utf8String,
        DisplayText,
        ext_PolicyMappings,
        _ext_PolicyMappings_val_ExtnType,
        id_ce_policyMappings,
        __PolicyMappings__item__issuerDomainPolicy,
        __PolicyMappings__item__subjectDomainPolicy,
        _PolicyMappings__item_,
        PolicyMappings,
        ext_SubjectAltName,
        _ext_SubjectAltName_val_ExtnType,
        id_ce_subjectAltName,
        _GeneralNames__item_,
        GeneralNames,
        __GeneralName_otherName_type_id,
        __GeneralName_otherName_value,
        _GeneralName_otherName,
        _GeneralName_otherName,
        _GeneralName_rfc822Name,
        _GeneralName_dNSName,
        _GeneralName_x400Address,
        _GeneralName_directoryName,
        _GeneralName_ediPartyName,
        _GeneralName_uniformResourceIdentifier,
        _GeneralName_iPAddress,
        _GeneralName_registeredID,
        GeneralName,
        OTHER_NAME,
        __EDIPartyName_nameAssigner_teletexString,
        __EDIPartyName_nameAssigner_printableString,
        __EDIPartyName_nameAssigner_bmpString,
        __EDIPartyName_nameAssigner_universalString,
        __EDIPartyName_nameAssigner_uTF8String,
        _EDIPartyName_nameAssigner,
        __EDIPartyName_partyName_teletexString,
        __EDIPartyName_partyName_printableString,
        __EDIPartyName_partyName_bmpString,
        __EDIPartyName_partyName_universalString,
        __EDIPartyName_partyName_uTF8String,
        _EDIPartyName_partyName,
        EDIPartyName,
        ext_IssuerAltName,
        _ext_IssuerAltName_val_ExtnType,
        id_ce_issuerAltName,
        ext_SubjectDirectoryAttributes,
        _ext_SubjectDirectoryAttributes_val_ExtnType,
        id_ce_subjectDirectoryAttributes,
        ___SubjectDirectoryAttributes__item__type_tab,
        ____SubjectDirectoryAttributes__item__type_tab_val_Type_0,
        ____SubjectDirectoryAttributes__item__type_tab_val_Type_1,
        ____SubjectDirectoryAttributes__item__type_tab_val_Type_2,
        ____SubjectDirectoryAttributes__item__type_tab_val_Type_3,
        ____SubjectDirectoryAttributes__item__type_tab_val_Type_4,
        ____SubjectDirectoryAttributes__item__type_tab_val_Type_5,
        ____SubjectDirectoryAttributes__item__type_tab_val_Type_6,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_7_teletexString,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_7_printableString,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_7_bmpString,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_7_universalString,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_7_uTF8String,
        ____SubjectDirectoryAttributes__item__type_tab_val_Type_7,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_8_teletexString,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_8_printableString,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_8_bmpString,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_8_universalString,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_8_uTF8String,
        ____SubjectDirectoryAttributes__item__type_tab_val_Type_8,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_9_teletexString,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_9_printableString,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_9_bmpString,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_9_universalString,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_9_uTF8String,
        ____SubjectDirectoryAttributes__item__type_tab_val_Type_9,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_10_teletexString,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_10_printableString,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_10_bmpString,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_10_universalString,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_10_uTF8String,
        ____SubjectDirectoryAttributes__item__type_tab_val_Type_10,
        ____SubjectDirectoryAttributes__item__type_tab_val_Type_11,
        ____SubjectDirectoryAttributes__item__type_tab_val_Type_12,
        ____SubjectDirectoryAttributes__item__type_tab_val_Type_13,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_14_teletexString,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_14_printableString,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_14_bmpString,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_14_universalString,
        _____SubjectDirectoryAttributes__item__type_tab_val_Type_14_uTF8String,
        ____SubjectDirectoryAttributes__item__type_tab_val_Type_14,
        ____SubjectDirectoryAttributes__item__type_tab_val_Type_15,
        ____SubjectDirectoryAttributes__item__type_tab_val_Type_16,
        __SubjectDirectoryAttributes__item__type,
        ___SubjectDirectoryAttributes__item__values__item_,
        __SubjectDirectoryAttributes__item__values,
        _SubjectDirectoryAttributes__item_,
        SubjectDirectoryAttributes,
        ext_BasicConstraints,
        _ext_BasicConstraints_val_ExtnType,
        id_ce_basicConstraints,
        _BasicConstraints_cA,
        _BasicConstraints_pathLenConstraint,
        BasicConstraints,
        ext_NameConstraints,
        _ext_NameConstraints_val_ExtnType,
        id_ce_nameConstraints,
        _NameConstraints_permittedSubtrees,
        _NameConstraints_excludedSubtrees,
        NameConstraints,
        _GeneralSubtrees__item_,
        GeneralSubtrees,
        _GeneralSubtree_base,
        _GeneralSubtree_minimum,
        _GeneralSubtree_maximum,
        GeneralSubtree,
        BaseDistance,
        ext_PolicyConstraints,
        _ext_PolicyConstraints_val_ExtnType,
        id_ce_policyConstraints,
        _PolicyConstraints_requireExplicitPolicy,
        _PolicyConstraints_inhibitPolicyMapping,
        PolicyConstraints,
        SkipCerts,
        ext_CRLDistributionPoints,
        _ext_CRLDistributionPoints_val_ExtnType,
        id_ce_cRLDistributionPoints,
        _CRLDistributionPoints__item_,
        CRLDistributionPoints,
        _DistributionPoint_distributionPoint,
        _DistributionPoint_reasons,
        _DistributionPoint_cRLIssuer,
        DistributionPoint,
        _DistributionPointName_fullName,
        _DistributionPointName_nameRelativeToCRLIssuer,
        DistributionPointName,
        ReasonFlags,
        ext_ExtKeyUsage,
        _ext_ExtKeyUsage_val_ExtnType,
        id_ce_extKeyUsage,
        _ExtKeyUsageSyntax__item_,
        ExtKeyUsageSyntax,
        KeyPurposeId,
        anyExtendedKeyUsage,
        id_kp_serverAuth,
        id_kp_clientAuth,
        id_kp_codeSigning,
        id_kp_emailProtection,
        id_kp_timeStamping,
        id_kp_OCSPSigning,
        ext_InhibitAnyPolicy,
        _ext_InhibitAnyPolicy_val_ExtnType,
        id_ce_inhibitAnyPolicy,
        ext_FreshestCRL,
        _ext_FreshestCRL_val_ExtnType,
        id_ce_freshestCRL,
        ext_AuthorityInfoAccess,
        _ext_AuthorityInfoAccess_val_ExtnType,
        id_pe_authorityInfoAccess,
        _AuthorityInfoAccessSyntax__item_,
        AuthorityInfoAccessSyntax,
        _AccessDescription_accessMethod,
        _AccessDescription_accessLocation,
        AccessDescription,
        ext_SubjectInfoAccessSyntax,
        _ext_SubjectInfoAccessSyntax_val_ExtnType,
        id_pe_subjectInfoAccess,
        _SubjectInfoAccessSyntax__item_,
        SubjectInfoAccessSyntax,
        ext_CRLNumber,
        _ext_CRLNumber_val_ExtnType,
        id_ce_cRLNumber,
        CRLNumber,
        ext_IssuingDistributionPoint,
        _ext_IssuingDistributionPoint_val_ExtnType,
        id_ce_issuingDistributionPoint,
        _IssuingDistributionPoint_distributionPoint,
        _IssuingDistributionPoint_onlyContainsUserCerts,
        _IssuingDistributionPoint_onlyContainsCACerts,
        _IssuingDistributionPoint_onlySomeReasons,
        _IssuingDistributionPoint_indirectCRL,
        _IssuingDistributionPoint_onlyContainsAttributeCerts,
        IssuingDistributionPoint,
        ext_DeltaCRLIndicator,
        _ext_DeltaCRLIndicator_val_ExtnType,
        id_ce_deltaCRLIndicator,
        ext_CRLReason,
        _ext_CRLReason_val_ExtnType,
        id_ce_cRLReasons,
        CRLReason,
        ext_CertificateIssuer,
        _ext_CertificateIssuer_val_ExtnType,
        id_ce_certificateIssuer,
        ext_HoldInstructionCode,
        _ext_HoldInstructionCode_val_ExtnType,
        id_ce_holdInstructionCode,
        holdInstruction,
        id_holdinstruction_none,
        id_holdinstruction_callissuer,
        id_holdinstruction_reject,
        ext_InvalidityDate,
        _ext_InvalidityDate_val_ExtnType,
        id_ce_invalidityDate,
        ubMax,
    ]

class PKIX1Explicit_2009:

    _name_  = 'PKIX1Explicit-2009'
    _oid_   = [1, 3, 6, 1, 5, 5, 7, 0, 51]
    
    _obj_ = [
        'id-pkix',
        'id-pe',
        'id-qt',
        'id-kp',
        'id-ad',
        'id-qt-cps',
        'id-qt-unotice',
        'id-ad-ocsp',
        'id-ad-caIssuers',
        'id-ad-timeStamping',
        'id-ad-caRepository',
        'AttributeType',
        'id-at',
        'id-at-name',
        'at-name',
        'id-at-surname',
        'at-surname',
        'id-at-givenName',
        'at-givenName',
        'id-at-initials',
        'at-initials',
        'id-at-generationQualifier',
        'at-generationQualifier',
        'DirectoryString',
        'X520name',
        'id-at-commonName',
        'at-x520CommonName',
        'X520CommonName',
        'id-at-localityName',
        'at-x520LocalityName',
        'X520LocalityName',
        'id-at-stateOrProvinceName',
        'at-x520StateOrProvinceName',
        'X520StateOrProvinceName',
        'id-at-organizationName',
        'at-x520OrganizationName',
        'X520OrganizationName',
        'id-at-organizationalUnitName',
        'at-x520OrganizationalUnitName',
        'X520OrganizationalUnitName',
        'id-at-title',
        'at-x520Title',
        'id-at-dnQualifier',
        'at-x520dnQualifier',
        'id-at-countryName',
        'at-x520countryName',
        'id-at-serialNumber',
        'at-x520SerialNumber',
        'id-at-pseudonym',
        'at-x520Pseudonym',
        'id-domainComponent',
        'at-domainComponent',
        'pkcs-9',
        'id-emailAddress',
        'at-emailAddress',
        'Name',
        'RDNSequence',
        'DistinguishedName',
        'RelativeDistinguishedName',
        'SupportedAttributes',
        'Certificate',
        'TBSCertificate',
        'Version',
        'CertificateSerialNumber',
        'Validity',
        'Time',
        'UniqueIdentifier',
        'SubjectPublicKeyInfo',
        'CertificateList',
        'TBSCertList',
        'SignatureAlgorithms',
        'PublicKeyAlgorithms',
        'ub-state-name',
        'ub-organization-name',
        'ub-organizational-unit-name',
        'ub-title',
        'ub-serial-number',
        'ub-pseudonym',
        'ub-emailaddress-length',
        'ub-locality-name',
        'ub-common-name',
        'ub-name',
        'SIGNED',
        ]
    _type_ = [
        'AttributeType',
        'DirectoryString',
        'X520name',
        'X520CommonName',
        'X520LocalityName',
        'X520StateOrProvinceName',
        'X520OrganizationName',
        'X520OrganizationalUnitName',
        'Name',
        'RDNSequence',
        'DistinguishedName',
        'RelativeDistinguishedName',
        'Certificate',
        'TBSCertificate',
        'Version',
        'CertificateSerialNumber',
        'Validity',
        'Time',
        'UniqueIdentifier',
        'SubjectPublicKeyInfo',
        'CertificateList',
        'TBSCertList',
        'SIGNED',
        ]
    _set_ = [
        'SupportedAttributes',
        'SignatureAlgorithms',
        'PublicKeyAlgorithms',
        ]
    _val_ = [
        'id-pkix',
        'id-pe',
        'id-qt',
        'id-kp',
        'id-ad',
        'id-qt-cps',
        'id-qt-unotice',
        'id-ad-ocsp',
        'id-ad-caIssuers',
        'id-ad-timeStamping',
        'id-ad-caRepository',
        'id-at',
        'id-at-name',
        'at-name',
        'id-at-surname',
        'at-surname',
        'id-at-givenName',
        'at-givenName',
        'id-at-initials',
        'at-initials',
        'id-at-generationQualifier',
        'at-generationQualifier',
        'id-at-commonName',
        'at-x520CommonName',
        'id-at-localityName',
        'at-x520LocalityName',
        'id-at-stateOrProvinceName',
        'at-x520StateOrProvinceName',
        'id-at-organizationName',
        'at-x520OrganizationName',
        'id-at-organizationalUnitName',
        'at-x520OrganizationalUnitName',
        'id-at-title',
        'at-x520Title',
        'id-at-dnQualifier',
        'at-x520dnQualifier',
        'id-at-countryName',
        'at-x520countryName',
        'id-at-serialNumber',
        'at-x520SerialNumber',
        'id-at-pseudonym',
        'at-x520Pseudonym',
        'id-domainComponent',
        'at-domainComponent',
        'pkcs-9',
        'id-emailAddress',
        'at-emailAddress',
        'ub-state-name',
        'ub-organization-name',
        'ub-organizational-unit-name',
        'ub-title',
        'ub-serial-number',
        'ub-pseudonym',
        'ub-emailaddress-length',
        'ub-locality-name',
        'ub-common-name',
        'ub-name',
        ]
    _class_ = [
        'at-name',
        'at-surname',
        'at-givenName',
        'at-initials',
        'at-generationQualifier',
        'at-x520CommonName',
        'at-x520LocalityName',
        'at-x520StateOrProvinceName',
        'at-x520OrganizationName',
        'at-x520OrganizationalUnitName',
        'at-x520Title',
        'at-x520dnQualifier',
        'at-x520countryName',
        'at-x520SerialNumber',
        'at-x520Pseudonym',
        'at-domainComponent',
        'at-emailAddress',
        'SupportedAttributes',
        'SignatureAlgorithms',
        'PublicKeyAlgorithms',
        ]
    _param_ = [
        'DirectoryString',
        'SIGNED',
        ]
    
    #-----< id-pkix >-----#
    id_pkix = OID(name='id-pkix', mode=MODE_VALUE)
    id_pkix._val = (1, 3, 6, 1, 5, 5, 7)
    
    #-----< id-pe >-----#
    id_pe = OID(name='id-pe', mode=MODE_VALUE)
    id_pe._val = (1, 3, 6, 1, 5, 5, 7, 1)
    
    #-----< id-qt >-----#
    id_qt = OID(name='id-qt', mode=MODE_VALUE)
    id_qt._val = (1, 3, 6, 1, 5, 5, 7, 2)
    
    #-----< id-kp >-----#
    id_kp = OID(name='id-kp', mode=MODE_VALUE)
    id_kp._val = (1, 3, 6, 1, 5, 5, 7, 3)
    
    #-----< id-ad >-----#
    id_ad = OID(name='id-ad', mode=MODE_VALUE)
    id_ad._val = (1, 3, 6, 1, 5, 5, 7, 48)
    
    #-----< id-qt-cps >-----#
    id_qt_cps = OID(name='id-qt-cps', mode=MODE_VALUE)
    id_qt_cps._val = (1, 3, 6, 1, 5, 5, 7, 2, 1)
    
    #-----< id-qt-unotice >-----#
    id_qt_unotice = OID(name='id-qt-unotice', mode=MODE_VALUE)
    id_qt_unotice._val = (1, 3, 6, 1, 5, 5, 7, 2, 2)
    
    #-----< id-ad-ocsp >-----#
    id_ad_ocsp = OID(name='id-ad-ocsp', mode=MODE_VALUE)
    id_ad_ocsp._val = (1, 3, 6, 1, 5, 5, 7, 48, 1)
    
    #-----< id-ad-caIssuers >-----#
    id_ad_caIssuers = OID(name='id-ad-caIssuers', mode=MODE_VALUE)
    id_ad_caIssuers._val = (1, 3, 6, 1, 5, 5, 7, 48, 2)
    
    #-----< id-ad-timeStamping >-----#
    id_ad_timeStamping = OID(name='id-ad-timeStamping', mode=MODE_VALUE)
    id_ad_timeStamping._val = (1, 3, 6, 1, 5, 5, 7, 48, 3)
    
    #-----< id-ad-caRepository >-----#
    id_ad_caRepository = OID(name='id-ad-caRepository', mode=MODE_VALUE)
    id_ad_caRepository._val = (1, 3, 6, 1, 5, 5, 7, 48, 5)
    
    #-----< AttributeType >-----#
    AttributeType = OID(name='AttributeType', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['id']))
    
    #-----< id-at >-----#
    id_at = OID(name='id-at', mode=MODE_VALUE)
    id_at._val = (2, 5, 4)
    
    #-----< id-at-name >-----#
    id_at_name = OID(name='id-at-name', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'AttributeType')))
    id_at_name._val = (2, 5, 4, 41)
    
    #-----< at-name >-----#
    at_name = CLASS(name='at-name', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_name_val_Type = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520name')))
    at_name._val = dict([('Type', _at_name_val_Type), ('id', (2, 5, 4, 41))])
    
    #-----< id-at-surname >-----#
    id_at_surname = OID(name='id-at-surname', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'AttributeType')))
    id_at_surname._val = (2, 5, 4, 4)
    
    #-----< at-surname >-----#
    at_surname = CLASS(name='at-surname', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_surname_val_Type = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520name')))
    at_surname._val = dict([('Type', _at_surname_val_Type), ('id', (2, 5, 4, 4))])
    
    #-----< id-at-givenName >-----#
    id_at_givenName = OID(name='id-at-givenName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'AttributeType')))
    id_at_givenName._val = (2, 5, 4, 42)
    
    #-----< at-givenName >-----#
    at_givenName = CLASS(name='at-givenName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_givenName_val_Type = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520name')))
    at_givenName._val = dict([('Type', _at_givenName_val_Type), ('id', (2, 5, 4, 42))])
    
    #-----< id-at-initials >-----#
    id_at_initials = OID(name='id-at-initials', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'AttributeType')))
    id_at_initials._val = (2, 5, 4, 43)
    
    #-----< at-initials >-----#
    at_initials = CLASS(name='at-initials', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_initials_val_Type = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520name')))
    at_initials._val = dict([('Type', _at_initials_val_Type), ('id', (2, 5, 4, 43))])
    
    #-----< id-at-generationQualifier >-----#
    id_at_generationQualifier = OID(name='id-at-generationQualifier', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'AttributeType')))
    id_at_generationQualifier._val = (2, 5, 4, 44)
    
    #-----< at-generationQualifier >-----#
    at_generationQualifier = CLASS(name='at-generationQualifier', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_generationQualifier_val_Type = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520name')))
    at_generationQualifier._val = dict([('Type', _at_generationQualifier_val_Type), ('id', (2, 5, 4, 44))])
    
    #-----< DirectoryString >-----#
    DirectoryString = CHOICE(name='DirectoryString', mode=MODE_TYPE, param=True)
    
    #-----< X520name >-----#
    X520name = CHOICE(name='X520name', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    _X520name_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    _X520name_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32768)], ev=None, er=[])
    _X520name_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    _X520name_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32768)], ev=None, er=[])
    _X520name_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    _X520name_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32768)], ev=None, er=[])
    _X520name_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    _X520name_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32768)], ev=None, er=[])
    _X520name_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    _X520name_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32768)], ev=None, er=[])
    X520name._cont = ASN1Dict([
        ('teletexString', _X520name_teletexString),
        ('printableString', _X520name_printableString),
        ('bmpString', _X520name_bmpString),
        ('universalString', _X520name_universalString),
        ('uTF8String', _X520name_uTF8String),
        ])
    X520name._ext = None
    
    #-----< id-at-commonName >-----#
    id_at_commonName = OID(name='id-at-commonName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'AttributeType')))
    id_at_commonName._val = (2, 5, 4, 3)
    
    #-----< at-x520CommonName >-----#
    at_x520CommonName = CLASS(name='at-x520CommonName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_x520CommonName_val_Type = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520CommonName')))
    at_x520CommonName._val = dict([('Type', _at_x520CommonName_val_Type), ('id', (2, 5, 4, 3))])
    
    #-----< X520CommonName >-----#
    X520CommonName = CHOICE(name='X520CommonName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    _X520CommonName_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    _X520CommonName_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _X520CommonName_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    _X520CommonName_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _X520CommonName_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    _X520CommonName_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _X520CommonName_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    _X520CommonName_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _X520CommonName_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    _X520CommonName_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    X520CommonName._cont = ASN1Dict([
        ('teletexString', _X520CommonName_teletexString),
        ('printableString', _X520CommonName_printableString),
        ('bmpString', _X520CommonName_bmpString),
        ('universalString', _X520CommonName_universalString),
        ('uTF8String', _X520CommonName_uTF8String),
        ])
    X520CommonName._ext = None
    
    #-----< id-at-localityName >-----#
    id_at_localityName = OID(name='id-at-localityName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'AttributeType')))
    id_at_localityName._val = (2, 5, 4, 7)
    
    #-----< at-x520LocalityName >-----#
    at_x520LocalityName = CLASS(name='at-x520LocalityName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_x520LocalityName_val_Type = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520LocalityName')))
    at_x520LocalityName._val = dict([('Type', _at_x520LocalityName_val_Type), ('id', (2, 5, 4, 7))])
    
    #-----< X520LocalityName >-----#
    X520LocalityName = CHOICE(name='X520LocalityName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    _X520LocalityName_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    _X520LocalityName_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _X520LocalityName_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    _X520LocalityName_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _X520LocalityName_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    _X520LocalityName_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _X520LocalityName_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    _X520LocalityName_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _X520LocalityName_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    _X520LocalityName_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    X520LocalityName._cont = ASN1Dict([
        ('teletexString', _X520LocalityName_teletexString),
        ('printableString', _X520LocalityName_printableString),
        ('bmpString', _X520LocalityName_bmpString),
        ('universalString', _X520LocalityName_universalString),
        ('uTF8String', _X520LocalityName_uTF8String),
        ])
    X520LocalityName._ext = None
    
    #-----< id-at-stateOrProvinceName >-----#
    id_at_stateOrProvinceName = OID(name='id-at-stateOrProvinceName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'AttributeType')))
    id_at_stateOrProvinceName._val = (2, 5, 4, 8)
    
    #-----< at-x520StateOrProvinceName >-----#
    at_x520StateOrProvinceName = CLASS(name='at-x520StateOrProvinceName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_x520StateOrProvinceName_val_Type = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    __at_x520StateOrProvinceName_val_Type_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    __at_x520StateOrProvinceName_val_Type_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    __at_x520StateOrProvinceName_val_Type_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    __at_x520StateOrProvinceName_val_Type_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    __at_x520StateOrProvinceName_val_Type_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    __at_x520StateOrProvinceName_val_Type_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    __at_x520StateOrProvinceName_val_Type_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    __at_x520StateOrProvinceName_val_Type_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    __at_x520StateOrProvinceName_val_Type_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    __at_x520StateOrProvinceName_val_Type_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _at_x520StateOrProvinceName_val_Type._cont = ASN1Dict([
        ('teletexString', __at_x520StateOrProvinceName_val_Type_teletexString),
        ('printableString', __at_x520StateOrProvinceName_val_Type_printableString),
        ('bmpString', __at_x520StateOrProvinceName_val_Type_bmpString),
        ('universalString', __at_x520StateOrProvinceName_val_Type_universalString),
        ('uTF8String', __at_x520StateOrProvinceName_val_Type_uTF8String),
        ])
    _at_x520StateOrProvinceName_val_Type._ext = None
    at_x520StateOrProvinceName._val = dict([('Type', _at_x520StateOrProvinceName_val_Type), ('id', (2, 5, 4, 8))])
    
    #-----< X520StateOrProvinceName >-----#
    X520StateOrProvinceName = CHOICE(name='X520StateOrProvinceName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    _X520StateOrProvinceName_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    _X520StateOrProvinceName_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _X520StateOrProvinceName_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    _X520StateOrProvinceName_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _X520StateOrProvinceName_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    _X520StateOrProvinceName_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _X520StateOrProvinceName_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    _X520StateOrProvinceName_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _X520StateOrProvinceName_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    _X520StateOrProvinceName_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    X520StateOrProvinceName._cont = ASN1Dict([
        ('teletexString', _X520StateOrProvinceName_teletexString),
        ('printableString', _X520StateOrProvinceName_printableString),
        ('bmpString', _X520StateOrProvinceName_bmpString),
        ('universalString', _X520StateOrProvinceName_universalString),
        ('uTF8String', _X520StateOrProvinceName_uTF8String),
        ])
    X520StateOrProvinceName._ext = None
    
    #-----< id-at-organizationName >-----#
    id_at_organizationName = OID(name='id-at-organizationName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'AttributeType')))
    id_at_organizationName._val = (2, 5, 4, 10)
    
    #-----< at-x520OrganizationName >-----#
    at_x520OrganizationName = CLASS(name='at-x520OrganizationName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_x520OrganizationName_val_Type = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    __at_x520OrganizationName_val_Type_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    __at_x520OrganizationName_val_Type_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __at_x520OrganizationName_val_Type_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    __at_x520OrganizationName_val_Type_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __at_x520OrganizationName_val_Type_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    __at_x520OrganizationName_val_Type_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __at_x520OrganizationName_val_Type_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    __at_x520OrganizationName_val_Type_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __at_x520OrganizationName_val_Type_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    __at_x520OrganizationName_val_Type_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _at_x520OrganizationName_val_Type._cont = ASN1Dict([
        ('teletexString', __at_x520OrganizationName_val_Type_teletexString),
        ('printableString', __at_x520OrganizationName_val_Type_printableString),
        ('bmpString', __at_x520OrganizationName_val_Type_bmpString),
        ('universalString', __at_x520OrganizationName_val_Type_universalString),
        ('uTF8String', __at_x520OrganizationName_val_Type_uTF8String),
        ])
    _at_x520OrganizationName_val_Type._ext = None
    at_x520OrganizationName._val = dict([('Type', _at_x520OrganizationName_val_Type), ('id', (2, 5, 4, 10))])
    
    #-----< X520OrganizationName >-----#
    X520OrganizationName = CHOICE(name='X520OrganizationName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    _X520OrganizationName_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    _X520OrganizationName_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _X520OrganizationName_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    _X520OrganizationName_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _X520OrganizationName_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    _X520OrganizationName_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _X520OrganizationName_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    _X520OrganizationName_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _X520OrganizationName_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    _X520OrganizationName_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    X520OrganizationName._cont = ASN1Dict([
        ('teletexString', _X520OrganizationName_teletexString),
        ('printableString', _X520OrganizationName_printableString),
        ('bmpString', _X520OrganizationName_bmpString),
        ('universalString', _X520OrganizationName_universalString),
        ('uTF8String', _X520OrganizationName_uTF8String),
        ])
    X520OrganizationName._ext = None
    
    #-----< id-at-organizationalUnitName >-----#
    id_at_organizationalUnitName = OID(name='id-at-organizationalUnitName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'AttributeType')))
    id_at_organizationalUnitName._val = (2, 5, 4, 11)
    
    #-----< at-x520OrganizationalUnitName >-----#
    at_x520OrganizationalUnitName = CLASS(name='at-x520OrganizationalUnitName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_x520OrganizationalUnitName_val_Type = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    __at_x520OrganizationalUnitName_val_Type_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    __at_x520OrganizationalUnitName_val_Type_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __at_x520OrganizationalUnitName_val_Type_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    __at_x520OrganizationalUnitName_val_Type_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __at_x520OrganizationalUnitName_val_Type_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    __at_x520OrganizationalUnitName_val_Type_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __at_x520OrganizationalUnitName_val_Type_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    __at_x520OrganizationalUnitName_val_Type_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __at_x520OrganizationalUnitName_val_Type_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    __at_x520OrganizationalUnitName_val_Type_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _at_x520OrganizationalUnitName_val_Type._cont = ASN1Dict([
        ('teletexString', __at_x520OrganizationalUnitName_val_Type_teletexString),
        ('printableString', __at_x520OrganizationalUnitName_val_Type_printableString),
        ('bmpString', __at_x520OrganizationalUnitName_val_Type_bmpString),
        ('universalString', __at_x520OrganizationalUnitName_val_Type_universalString),
        ('uTF8String', __at_x520OrganizationalUnitName_val_Type_uTF8String),
        ])
    _at_x520OrganizationalUnitName_val_Type._ext = None
    at_x520OrganizationalUnitName._val = dict([('Type', _at_x520OrganizationalUnitName_val_Type), ('id', (2, 5, 4, 11))])
    
    #-----< X520OrganizationalUnitName >-----#
    X520OrganizationalUnitName = CHOICE(name='X520OrganizationalUnitName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    _X520OrganizationalUnitName_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    _X520OrganizationalUnitName_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _X520OrganizationalUnitName_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    _X520OrganizationalUnitName_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _X520OrganizationalUnitName_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    _X520OrganizationalUnitName_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _X520OrganizationalUnitName_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    _X520OrganizationalUnitName_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _X520OrganizationalUnitName_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    _X520OrganizationalUnitName_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    X520OrganizationalUnitName._cont = ASN1Dict([
        ('teletexString', _X520OrganizationalUnitName_teletexString),
        ('printableString', _X520OrganizationalUnitName_printableString),
        ('bmpString', _X520OrganizationalUnitName_bmpString),
        ('universalString', _X520OrganizationalUnitName_universalString),
        ('uTF8String', _X520OrganizationalUnitName_uTF8String),
        ])
    X520OrganizationalUnitName._ext = None
    
    #-----< id-at-title >-----#
    id_at_title = OID(name='id-at-title', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'AttributeType')))
    id_at_title._val = (2, 5, 4, 12)
    
    #-----< at-x520Title >-----#
    at_x520Title = CLASS(name='at-x520Title', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_x520Title_val_Type = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    __at_x520Title_val_Type_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    __at_x520Title_val_Type_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __at_x520Title_val_Type_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    __at_x520Title_val_Type_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __at_x520Title_val_Type_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    __at_x520Title_val_Type_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __at_x520Title_val_Type_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    __at_x520Title_val_Type_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __at_x520Title_val_Type_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    __at_x520Title_val_Type_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _at_x520Title_val_Type._cont = ASN1Dict([
        ('teletexString', __at_x520Title_val_Type_teletexString),
        ('printableString', __at_x520Title_val_Type_printableString),
        ('bmpString', __at_x520Title_val_Type_bmpString),
        ('universalString', __at_x520Title_val_Type_universalString),
        ('uTF8String', __at_x520Title_val_Type_uTF8String),
        ])
    _at_x520Title_val_Type._ext = None
    at_x520Title._val = dict([('Type', _at_x520Title_val_Type), ('id', (2, 5, 4, 12))])
    
    #-----< id-at-dnQualifier >-----#
    id_at_dnQualifier = OID(name='id-at-dnQualifier', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'AttributeType')))
    id_at_dnQualifier._val = (2, 5, 4, 46)
    
    #-----< at-x520dnQualifier >-----#
    at_x520dnQualifier = CLASS(name='at-x520dnQualifier', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_x520dnQualifier_val_Type = STR_PRINT(name='Type', mode=MODE_TYPE)
    at_x520dnQualifier._val = dict([('Type', _at_x520dnQualifier_val_Type), ('id', (2, 5, 4, 46))])
    
    #-----< id-at-countryName >-----#
    id_at_countryName = OID(name='id-at-countryName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'AttributeType')))
    id_at_countryName._val = (2, 5, 4, 6)
    
    #-----< at-x520countryName >-----#
    at_x520countryName = CLASS(name='at-x520countryName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_x520countryName_val_Type = STR_PRINT(name='Type', mode=MODE_TYPE)
    _at_x520countryName_val_Type._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    at_x520countryName._val = dict([('Type', _at_x520countryName_val_Type), ('id', (2, 5, 4, 6))])
    
    #-----< id-at-serialNumber >-----#
    id_at_serialNumber = OID(name='id-at-serialNumber', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'AttributeType')))
    id_at_serialNumber._val = (2, 5, 4, 5)
    
    #-----< at-x520SerialNumber >-----#
    at_x520SerialNumber = CLASS(name='at-x520SerialNumber', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_x520SerialNumber_val_Type = STR_PRINT(name='Type', mode=MODE_TYPE)
    _at_x520SerialNumber_val_Type._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    at_x520SerialNumber._val = dict([('Type', _at_x520SerialNumber_val_Type), ('id', (2, 5, 4, 5))])
    
    #-----< id-at-pseudonym >-----#
    id_at_pseudonym = OID(name='id-at-pseudonym', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'AttributeType')))
    id_at_pseudonym._val = (2, 5, 4, 65)
    
    #-----< at-x520Pseudonym >-----#
    at_x520Pseudonym = CLASS(name='at-x520Pseudonym', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_x520Pseudonym_val_Type = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    __at_x520Pseudonym_val_Type_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    __at_x520Pseudonym_val_Type_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    __at_x520Pseudonym_val_Type_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    __at_x520Pseudonym_val_Type_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    __at_x520Pseudonym_val_Type_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    __at_x520Pseudonym_val_Type_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    __at_x520Pseudonym_val_Type_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    __at_x520Pseudonym_val_Type_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    __at_x520Pseudonym_val_Type_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    __at_x520Pseudonym_val_Type_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _at_x520Pseudonym_val_Type._cont = ASN1Dict([
        ('teletexString', __at_x520Pseudonym_val_Type_teletexString),
        ('printableString', __at_x520Pseudonym_val_Type_printableString),
        ('bmpString', __at_x520Pseudonym_val_Type_bmpString),
        ('universalString', __at_x520Pseudonym_val_Type_universalString),
        ('uTF8String', __at_x520Pseudonym_val_Type_uTF8String),
        ])
    _at_x520Pseudonym_val_Type._ext = None
    at_x520Pseudonym._val = dict([('Type', _at_x520Pseudonym_val_Type), ('id', (2, 5, 4, 65))])
    
    #-----< id-domainComponent >-----#
    id_domainComponent = OID(name='id-domainComponent', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'AttributeType')))
    id_domainComponent._val = (0, 9, 2342, 19200300, 100, 1, 25)
    
    #-----< at-domainComponent >-----#
    at_domainComponent = CLASS(name='at-domainComponent', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_domainComponent_val_Type = STR_IA5(name='Type', mode=MODE_TYPE)
    at_domainComponent._val = dict([('Type', _at_domainComponent_val_Type), ('id', (0, 9, 2342, 19200300, 100, 1, 25))])
    
    #-----< pkcs-9 >-----#
    pkcs_9 = OID(name='pkcs-9', mode=MODE_VALUE)
    pkcs_9._val = (1, 2, 840, 113549, 1, 9)
    
    #-----< id-emailAddress >-----#
    id_emailAddress = OID(name='id-emailAddress', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'AttributeType')))
    id_emailAddress._val = (1, 2, 840, 113549, 1, 9, 1)
    
    #-----< at-emailAddress >-----#
    at_emailAddress = CLASS(name='at-emailAddress', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_emailAddress_val_Type = STR_IA5(name='Type', mode=MODE_TYPE)
    _at_emailAddress_val_Type._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    at_emailAddress._val = dict([('Type', _at_emailAddress_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 1))])
    
    #-----< Name >-----#
    Name = CHOICE(name='Name', mode=MODE_TYPE)
    _Name_rdnSequence = SEQ_OF(name='rdnSequence', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'RDNSequence')))
    Name._cont = ASN1Dict([
        ('rdnSequence', _Name_rdnSequence),
        ])
    Name._ext = None
    
    #-----< RDNSequence >-----#
    RDNSequence = SEQ_OF(name='RDNSequence', mode=MODE_TYPE)
    _RDNSequence__item_ = SET_OF(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'RelativeDistinguishedName')))
    RDNSequence._cont = _RDNSequence__item_
    
    #-----< DistinguishedName >-----#
    DistinguishedName = SEQ_OF(name='DistinguishedName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'RDNSequence')))
    
    #-----< RelativeDistinguishedName >-----#
    RelativeDistinguishedName = SET_OF(name='RelativeDistinguishedName', mode=MODE_TYPE)
    _RelativeDistinguishedName__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'SingleAttribute')))
    __RelativeDistinguishedName__item__type = OID(name='type', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['id']))
    ___RelativeDistinguishedName__item__type_tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    ____RelativeDistinguishedName__item__type_tab_val_Type_0 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520name')))
    ____RelativeDistinguishedName__item__type_tab_val_Type_1 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520name')))
    ____RelativeDistinguishedName__item__type_tab_val_Type_2 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520name')))
    ____RelativeDistinguishedName__item__type_tab_val_Type_3 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520name')))
    ____RelativeDistinguishedName__item__type_tab_val_Type_4 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520name')))
    ____RelativeDistinguishedName__item__type_tab_val_Type_5 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520CommonName')))
    ____RelativeDistinguishedName__item__type_tab_val_Type_6 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520LocalityName')))
    ____RelativeDistinguishedName__item__type_tab_val_Type_7 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    _____RelativeDistinguishedName__item__type_tab_val_Type_7_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_7_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _____RelativeDistinguishedName__item__type_tab_val_Type_7_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_7_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _____RelativeDistinguishedName__item__type_tab_val_Type_7_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_7_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _____RelativeDistinguishedName__item__type_tab_val_Type_7_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_7_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _____RelativeDistinguishedName__item__type_tab_val_Type_7_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_7_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    ____RelativeDistinguishedName__item__type_tab_val_Type_7._cont = ASN1Dict([
        ('teletexString', _____RelativeDistinguishedName__item__type_tab_val_Type_7_teletexString),
        ('printableString', _____RelativeDistinguishedName__item__type_tab_val_Type_7_printableString),
        ('bmpString', _____RelativeDistinguishedName__item__type_tab_val_Type_7_bmpString),
        ('universalString', _____RelativeDistinguishedName__item__type_tab_val_Type_7_universalString),
        ('uTF8String', _____RelativeDistinguishedName__item__type_tab_val_Type_7_uTF8String),
        ])
    ____RelativeDistinguishedName__item__type_tab_val_Type_7._ext = None
    ____RelativeDistinguishedName__item__type_tab_val_Type_8 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    _____RelativeDistinguishedName__item__type_tab_val_Type_8_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_8_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____RelativeDistinguishedName__item__type_tab_val_Type_8_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_8_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____RelativeDistinguishedName__item__type_tab_val_Type_8_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_8_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____RelativeDistinguishedName__item__type_tab_val_Type_8_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_8_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____RelativeDistinguishedName__item__type_tab_val_Type_8_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_8_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    ____RelativeDistinguishedName__item__type_tab_val_Type_8._cont = ASN1Dict([
        ('teletexString', _____RelativeDistinguishedName__item__type_tab_val_Type_8_teletexString),
        ('printableString', _____RelativeDistinguishedName__item__type_tab_val_Type_8_printableString),
        ('bmpString', _____RelativeDistinguishedName__item__type_tab_val_Type_8_bmpString),
        ('universalString', _____RelativeDistinguishedName__item__type_tab_val_Type_8_universalString),
        ('uTF8String', _____RelativeDistinguishedName__item__type_tab_val_Type_8_uTF8String),
        ])
    ____RelativeDistinguishedName__item__type_tab_val_Type_8._ext = None
    ____RelativeDistinguishedName__item__type_tab_val_Type_9 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    _____RelativeDistinguishedName__item__type_tab_val_Type_9_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_9_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____RelativeDistinguishedName__item__type_tab_val_Type_9_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_9_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____RelativeDistinguishedName__item__type_tab_val_Type_9_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_9_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____RelativeDistinguishedName__item__type_tab_val_Type_9_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_9_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____RelativeDistinguishedName__item__type_tab_val_Type_9_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_9_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    ____RelativeDistinguishedName__item__type_tab_val_Type_9._cont = ASN1Dict([
        ('teletexString', _____RelativeDistinguishedName__item__type_tab_val_Type_9_teletexString),
        ('printableString', _____RelativeDistinguishedName__item__type_tab_val_Type_9_printableString),
        ('bmpString', _____RelativeDistinguishedName__item__type_tab_val_Type_9_bmpString),
        ('universalString', _____RelativeDistinguishedName__item__type_tab_val_Type_9_universalString),
        ('uTF8String', _____RelativeDistinguishedName__item__type_tab_val_Type_9_uTF8String),
        ])
    ____RelativeDistinguishedName__item__type_tab_val_Type_9._ext = None
    ____RelativeDistinguishedName__item__type_tab_val_Type_10 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    _____RelativeDistinguishedName__item__type_tab_val_Type_10_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_10_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____RelativeDistinguishedName__item__type_tab_val_Type_10_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_10_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____RelativeDistinguishedName__item__type_tab_val_Type_10_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_10_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____RelativeDistinguishedName__item__type_tab_val_Type_10_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_10_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _____RelativeDistinguishedName__item__type_tab_val_Type_10_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_10_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    ____RelativeDistinguishedName__item__type_tab_val_Type_10._cont = ASN1Dict([
        ('teletexString', _____RelativeDistinguishedName__item__type_tab_val_Type_10_teletexString),
        ('printableString', _____RelativeDistinguishedName__item__type_tab_val_Type_10_printableString),
        ('bmpString', _____RelativeDistinguishedName__item__type_tab_val_Type_10_bmpString),
        ('universalString', _____RelativeDistinguishedName__item__type_tab_val_Type_10_universalString),
        ('uTF8String', _____RelativeDistinguishedName__item__type_tab_val_Type_10_uTF8String),
        ])
    ____RelativeDistinguishedName__item__type_tab_val_Type_10._ext = None
    ____RelativeDistinguishedName__item__type_tab_val_Type_11 = STR_PRINT(name='Type', mode=MODE_TYPE)
    ____RelativeDistinguishedName__item__type_tab_val_Type_12 = STR_PRINT(name='Type', mode=MODE_TYPE)
    ____RelativeDistinguishedName__item__type_tab_val_Type_12._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    ____RelativeDistinguishedName__item__type_tab_val_Type_13 = STR_PRINT(name='Type', mode=MODE_TYPE)
    ____RelativeDistinguishedName__item__type_tab_val_Type_13._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    ____RelativeDistinguishedName__item__type_tab_val_Type_14 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    _____RelativeDistinguishedName__item__type_tab_val_Type_14_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_14_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _____RelativeDistinguishedName__item__type_tab_val_Type_14_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_14_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _____RelativeDistinguishedName__item__type_tab_val_Type_14_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_14_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _____RelativeDistinguishedName__item__type_tab_val_Type_14_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_14_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _____RelativeDistinguishedName__item__type_tab_val_Type_14_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    _____RelativeDistinguishedName__item__type_tab_val_Type_14_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    ____RelativeDistinguishedName__item__type_tab_val_Type_14._cont = ASN1Dict([
        ('teletexString', _____RelativeDistinguishedName__item__type_tab_val_Type_14_teletexString),
        ('printableString', _____RelativeDistinguishedName__item__type_tab_val_Type_14_printableString),
        ('bmpString', _____RelativeDistinguishedName__item__type_tab_val_Type_14_bmpString),
        ('universalString', _____RelativeDistinguishedName__item__type_tab_val_Type_14_universalString),
        ('uTF8String', _____RelativeDistinguishedName__item__type_tab_val_Type_14_uTF8String),
        ])
    ____RelativeDistinguishedName__item__type_tab_val_Type_14._ext = None
    ____RelativeDistinguishedName__item__type_tab_val_Type_15 = STR_IA5(name='Type', mode=MODE_TYPE)
    ____RelativeDistinguishedName__item__type_tab_val_Type_16 = STR_IA5(name='Type', mode=MODE_TYPE)
    ____RelativeDistinguishedName__item__type_tab_val_Type_16._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    ___RelativeDistinguishedName__item__type_tab._val = ASN1Set(rv=[dict([('Type', ____RelativeDistinguishedName__item__type_tab_val_Type_0), ('id', (2, 5, 4, 41))]), dict([('Type', ____RelativeDistinguishedName__item__type_tab_val_Type_1), ('id', (2, 5, 4, 4))]), dict([('Type', ____RelativeDistinguishedName__item__type_tab_val_Type_2), ('id', (2, 5, 4, 42))]), dict([('Type', ____RelativeDistinguishedName__item__type_tab_val_Type_3), ('id', (2, 5, 4, 43))]), dict([('Type', ____RelativeDistinguishedName__item__type_tab_val_Type_4), ('id', (2, 5, 4, 44))]), dict([('Type', ____RelativeDistinguishedName__item__type_tab_val_Type_5), ('id', (2, 5, 4, 3))]), dict([('Type', ____RelativeDistinguishedName__item__type_tab_val_Type_6), ('id', (2, 5, 4, 7))]), dict([('Type', ____RelativeDistinguishedName__item__type_tab_val_Type_7), ('id', (2, 5, 4, 8))]), dict([('Type', ____RelativeDistinguishedName__item__type_tab_val_Type_8), ('id', (2, 5, 4, 10))]), dict([('Type', ____RelativeDistinguishedName__item__type_tab_val_Type_9), ('id', (2, 5, 4, 11))]), dict([('Type', ____RelativeDistinguishedName__item__type_tab_val_Type_10), ('id', (2, 5, 4, 12))]), dict([('Type', ____RelativeDistinguishedName__item__type_tab_val_Type_11), ('id', (2, 5, 4, 46))]), dict([('Type', ____RelativeDistinguishedName__item__type_tab_val_Type_12), ('id', (2, 5, 4, 6))]), dict([('Type', ____RelativeDistinguishedName__item__type_tab_val_Type_13), ('id', (2, 5, 4, 5))]), dict([('Type', ____RelativeDistinguishedName__item__type_tab_val_Type_14), ('id', (2, 5, 4, 65))]), dict([('Type', ____RelativeDistinguishedName__item__type_tab_val_Type_15), ('id', (0, 9, 2342, 19200300, 100, 1, 25))]), dict([('Type', ____RelativeDistinguishedName__item__type_tab_val_Type_16), ('id', (1, 2, 840, 113549, 1, 9, 1))])], rr=[], ev=None, er=[])
    __RelativeDistinguishedName__item__type._const_tab = ___RelativeDistinguishedName__item__type_tab
    __RelativeDistinguishedName__item__type._const_tab_at = None
    __RelativeDistinguishedName__item__type._const_tab_id = 'id'
    __RelativeDistinguishedName__item__value = OPEN(name='value', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['Type']))
    __RelativeDistinguishedName__item__value._const_tab = ___RelativeDistinguishedName__item__type_tab
    __RelativeDistinguishedName__item__value._const_tab_at = ('..', 'type')
    __RelativeDistinguishedName__item__value._const_tab_id = 'Type'
    _RelativeDistinguishedName__item_._cont = ASN1Dict([
        ('type', __RelativeDistinguishedName__item__type),
        ('value', __RelativeDistinguishedName__item__value),
        ])
    _RelativeDistinguishedName__item_._ext = None
    RelativeDistinguishedName._cont = _RelativeDistinguishedName__item_
    RelativeDistinguishedName._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    
    #-----< SupportedAttributes >-----#
    SupportedAttributes = CLASS(name='SupportedAttributes', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _SupportedAttributes_val_Type_0 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520name')))
    _SupportedAttributes_val_Type_1 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520name')))
    _SupportedAttributes_val_Type_2 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520name')))
    _SupportedAttributes_val_Type_3 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520name')))
    _SupportedAttributes_val_Type_4 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520name')))
    _SupportedAttributes_val_Type_5 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520CommonName')))
    _SupportedAttributes_val_Type_6 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'X520LocalityName')))
    _SupportedAttributes_val_Type_7 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    __SupportedAttributes_val_Type_7_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_7_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    __SupportedAttributes_val_Type_7_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_7_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    __SupportedAttributes_val_Type_7_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_7_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    __SupportedAttributes_val_Type_7_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_7_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    __SupportedAttributes_val_Type_7_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_7_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _SupportedAttributes_val_Type_7._cont = ASN1Dict([
        ('teletexString', __SupportedAttributes_val_Type_7_teletexString),
        ('printableString', __SupportedAttributes_val_Type_7_printableString),
        ('bmpString', __SupportedAttributes_val_Type_7_bmpString),
        ('universalString', __SupportedAttributes_val_Type_7_universalString),
        ('uTF8String', __SupportedAttributes_val_Type_7_uTF8String),
        ])
    _SupportedAttributes_val_Type_7._ext = None
    _SupportedAttributes_val_Type_8 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    __SupportedAttributes_val_Type_8_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_8_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __SupportedAttributes_val_Type_8_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_8_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __SupportedAttributes_val_Type_8_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_8_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __SupportedAttributes_val_Type_8_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_8_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __SupportedAttributes_val_Type_8_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_8_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _SupportedAttributes_val_Type_8._cont = ASN1Dict([
        ('teletexString', __SupportedAttributes_val_Type_8_teletexString),
        ('printableString', __SupportedAttributes_val_Type_8_printableString),
        ('bmpString', __SupportedAttributes_val_Type_8_bmpString),
        ('universalString', __SupportedAttributes_val_Type_8_universalString),
        ('uTF8String', __SupportedAttributes_val_Type_8_uTF8String),
        ])
    _SupportedAttributes_val_Type_8._ext = None
    _SupportedAttributes_val_Type_9 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    __SupportedAttributes_val_Type_9_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_9_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __SupportedAttributes_val_Type_9_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_9_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __SupportedAttributes_val_Type_9_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_9_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __SupportedAttributes_val_Type_9_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_9_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __SupportedAttributes_val_Type_9_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_9_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _SupportedAttributes_val_Type_9._cont = ASN1Dict([
        ('teletexString', __SupportedAttributes_val_Type_9_teletexString),
        ('printableString', __SupportedAttributes_val_Type_9_printableString),
        ('bmpString', __SupportedAttributes_val_Type_9_bmpString),
        ('universalString', __SupportedAttributes_val_Type_9_universalString),
        ('uTF8String', __SupportedAttributes_val_Type_9_uTF8String),
        ])
    _SupportedAttributes_val_Type_9._ext = None
    _SupportedAttributes_val_Type_10 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    __SupportedAttributes_val_Type_10_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_10_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __SupportedAttributes_val_Type_10_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_10_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __SupportedAttributes_val_Type_10_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_10_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __SupportedAttributes_val_Type_10_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_10_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    __SupportedAttributes_val_Type_10_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_10_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _SupportedAttributes_val_Type_10._cont = ASN1Dict([
        ('teletexString', __SupportedAttributes_val_Type_10_teletexString),
        ('printableString', __SupportedAttributes_val_Type_10_printableString),
        ('bmpString', __SupportedAttributes_val_Type_10_bmpString),
        ('universalString', __SupportedAttributes_val_Type_10_universalString),
        ('uTF8String', __SupportedAttributes_val_Type_10_uTF8String),
        ])
    _SupportedAttributes_val_Type_10._ext = None
    _SupportedAttributes_val_Type_11 = STR_PRINT(name='Type', mode=MODE_TYPE)
    _SupportedAttributes_val_Type_12 = STR_PRINT(name='Type', mode=MODE_TYPE)
    _SupportedAttributes_val_Type_12._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _SupportedAttributes_val_Type_13 = STR_PRINT(name='Type', mode=MODE_TYPE)
    _SupportedAttributes_val_Type_13._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _SupportedAttributes_val_Type_14 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'DirectoryString')))
    __SupportedAttributes_val_Type_14_teletexString = STR_TELE(name='teletexString', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_14_teletexString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    __SupportedAttributes_val_Type_14_printableString = STR_PRINT(name='printableString', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_14_printableString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    __SupportedAttributes_val_Type_14_bmpString = STR_BMP(name='bmpString', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_14_bmpString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    __SupportedAttributes_val_Type_14_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_14_universalString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    __SupportedAttributes_val_Type_14_uTF8String = STR_UTF8(name='uTF8String', mode=MODE_TYPE)
    __SupportedAttributes_val_Type_14_uTF8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _SupportedAttributes_val_Type_14._cont = ASN1Dict([
        ('teletexString', __SupportedAttributes_val_Type_14_teletexString),
        ('printableString', __SupportedAttributes_val_Type_14_printableString),
        ('bmpString', __SupportedAttributes_val_Type_14_bmpString),
        ('universalString', __SupportedAttributes_val_Type_14_universalString),
        ('uTF8String', __SupportedAttributes_val_Type_14_uTF8String),
        ])
    _SupportedAttributes_val_Type_14._ext = None
    _SupportedAttributes_val_Type_15 = STR_IA5(name='Type', mode=MODE_TYPE)
    _SupportedAttributes_val_Type_16 = STR_IA5(name='Type', mode=MODE_TYPE)
    _SupportedAttributes_val_Type_16._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    SupportedAttributes._val = ASN1Set(rv=[dict([('Type', _SupportedAttributes_val_Type_0), ('id', (2, 5, 4, 41))]), dict([('Type', _SupportedAttributes_val_Type_1), ('id', (2, 5, 4, 4))]), dict([('Type', _SupportedAttributes_val_Type_2), ('id', (2, 5, 4, 42))]), dict([('Type', _SupportedAttributes_val_Type_3), ('id', (2, 5, 4, 43))]), dict([('Type', _SupportedAttributes_val_Type_4), ('id', (2, 5, 4, 44))]), dict([('Type', _SupportedAttributes_val_Type_5), ('id', (2, 5, 4, 3))]), dict([('Type', _SupportedAttributes_val_Type_6), ('id', (2, 5, 4, 7))]), dict([('Type', _SupportedAttributes_val_Type_7), ('id', (2, 5, 4, 8))]), dict([('Type', _SupportedAttributes_val_Type_8), ('id', (2, 5, 4, 10))]), dict([('Type', _SupportedAttributes_val_Type_9), ('id', (2, 5, 4, 11))]), dict([('Type', _SupportedAttributes_val_Type_10), ('id', (2, 5, 4, 12))]), dict([('Type', _SupportedAttributes_val_Type_11), ('id', (2, 5, 4, 46))]), dict([('Type', _SupportedAttributes_val_Type_12), ('id', (2, 5, 4, 6))]), dict([('Type', _SupportedAttributes_val_Type_13), ('id', (2, 5, 4, 5))]), dict([('Type', _SupportedAttributes_val_Type_14), ('id', (2, 5, 4, 65))]), dict([('Type', _SupportedAttributes_val_Type_15), ('id', (0, 9, 2342, 19200300, 100, 1, 25))]), dict([('Type', _SupportedAttributes_val_Type_16), ('id', (1, 2, 840, 113549, 1, 9, 1))])], rr=[], ev=[], er=[])
    
    #-----< Certificate >-----#
    Certificate = SEQ(name='Certificate', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'SIGNED')))
    _Certificate_toBeSigned = SEQ(name='toBeSigned', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'TBSCertificate')))
    _Certificate_algorithmIdentifier = SEQ(name='algorithmIdentifier', mode=MODE_TYPE)
    __Certificate_algorithmIdentifier_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['id']))
    ___Certificate_algorithmIdentifier_algorithm_tab = CLASS(name='_tab_SIGNATURE-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_2 = NULL(name='Params', mode=MODE_TYPE)
    ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_3 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_3 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0 = INT(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSAPublicKey')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Params')))
    ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_4 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_4 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1 = OCT_STR(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECPoint')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1 = CHOICE(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECParameters')))
    ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_5 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_5 = NULL(name='Params', mode=MODE_TYPE)
    ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_6 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_6 = NULL(name='Params', mode=MODE_TYPE)
    ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_7 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_7 = NULL(name='Params', mode=MODE_TYPE)
    ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_8 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_8 = NULL(name='Params', mode=MODE_TYPE)
    ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_9 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_9 = NULL(name='Params', mode=MODE_TYPE)
    ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_10 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_10 = NULL(name='Params', mode=MODE_TYPE)
    ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_11 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    ___Certificate_algorithmIdentifier_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 2)), ('Params', ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_0), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 2))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 4)), ('Params', ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_1), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 5)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 5)), ('Params', ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_2), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 5))]))]), dict([('id', (1, 2, 840, 10040, 4, 3)), ('Value', ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_3), ('Params', ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_3), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10040, 4, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 1)), ('Value', ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_4), ('Params', ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_4), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 1))]))])], rr=[], ev=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1)), ('Value', ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_5), ('Params', ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_5), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1))]))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2)), ('Value', ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_6), ('Params', ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_6), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 1)), ('Value', ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_7), ('Params', ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_7), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 1))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 2)), ('Value', ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_8), ('Params', ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_8), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 3)), ('Value', ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_9), ('Params', ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_9), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 4)), ('Value', ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_10), ('Params', ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_10), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('Params', ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_11), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1), ('paramPresence', 'optional'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 10))]))])], er=[])
    __Certificate_algorithmIdentifier_algorithm._const_tab = ___Certificate_algorithmIdentifier_algorithm_tab
    __Certificate_algorithmIdentifier_algorithm._const_tab_at = None
    __Certificate_algorithmIdentifier_algorithm._const_tab_id = 'id'
    __Certificate_algorithmIdentifier_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['Params']), opt=True)
    __Certificate_algorithmIdentifier_parameters._const_tab = ___Certificate_algorithmIdentifier_algorithm_tab
    __Certificate_algorithmIdentifier_parameters._const_tab_at = ('..', '..', 'algorithmIdentifier', 'algorithm')
    __Certificate_algorithmIdentifier_parameters._const_tab_id = 'Params'
    _Certificate_algorithmIdentifier._cont = ASN1Dict([
        ('algorithm', __Certificate_algorithmIdentifier_algorithm),
        ('parameters', __Certificate_algorithmIdentifier_parameters),
        ])
    _Certificate_algorithmIdentifier._ext = None
    _Certificate_signature = BIT_STR(name='signature', mode=MODE_TYPE)
    __Certificate_signature_contain = OPEN(name='_cont_signature', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['Value']))
    __Certificate_signature_contain._const_tab = ___Certificate_algorithmIdentifier_algorithm_tab
    __Certificate_signature_contain._const_tab_at = ('..', 'algorithmIdentifier', 'algorithm')
    __Certificate_signature_contain._const_tab_id = 'Value'
    _Certificate_signature._const_cont = __Certificate_signature_contain
    Certificate._cont = ASN1Dict([
        ('toBeSigned', _Certificate_toBeSigned),
        ('algorithmIdentifier', _Certificate_algorithmIdentifier),
        ('signature', _Certificate_signature),
        ])
    Certificate._ext = None
    
    #-----< TBSCertificate >-----#
    TBSCertificate = SEQ(name='TBSCertificate', mode=MODE_TYPE)
    _TBSCertificate_version = INT(name='version', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('PKIX1Explicit-2009', 'Version')), default=0)
    _TBSCertificate_serialNumber = INT(name='serialNumber', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'CertificateSerialNumber')))
    _TBSCertificate_signature = SEQ(name='signature', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __TBSCertificate_signature_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['id']))
    ___TBSCertificate_signature_algorithm_tab = CLASS(name='_tab_SIGNATURE-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    ____TBSCertificate_signature_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ____TBSCertificate_signature_algorithm_tab_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    ____TBSCertificate_signature_algorithm_tab_val_Params_2 = NULL(name='Params', mode=MODE_TYPE)
    ____TBSCertificate_signature_algorithm_tab_val_Value_3 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____TBSCertificate_signature_algorithm_tab_val_Params_3 = NULL(name='Params', mode=MODE_TYPE)
    ____TBSCertificate_signature_algorithm_tab_val_Value_4 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____TBSCertificate_signature_algorithm_tab_val_Params_4 = NULL(name='Params', mode=MODE_TYPE)
    ____TBSCertificate_signature_algorithm_tab_val_Value_5 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____TBSCertificate_signature_algorithm_tab_val_Params_5 = NULL(name='Params', mode=MODE_TYPE)
    ____TBSCertificate_signature_algorithm_tab_val_Value_6 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____TBSCertificate_signature_algorithm_tab_val_Params_6 = NULL(name='Params', mode=MODE_TYPE)
    ____TBSCertificate_signature_algorithm_tab_val_Value_7 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____TBSCertificate_signature_algorithm_tab_val_Params_7 = NULL(name='Params', mode=MODE_TYPE)
    ____TBSCertificate_signature_algorithm_tab_val_Value_8 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____TBSCertificate_signature_algorithm_tab_val_Params_8 = NULL(name='Params', mode=MODE_TYPE)
    ____TBSCertificate_signature_algorithm_tab_val_Value_9 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____TBSCertificate_signature_algorithm_tab_val_Params_9 = NULL(name='Params', mode=MODE_TYPE)
    ____TBSCertificate_signature_algorithm_tab_val_Value_10 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____TBSCertificate_signature_algorithm_tab_val_Params_10 = NULL(name='Params', mode=MODE_TYPE)
    ____TBSCertificate_signature_algorithm_tab_val_Params_11 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    ___TBSCertificate_signature_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 2)), ('Params', ____TBSCertificate_signature_algorithm_tab_val_Params_0), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 2))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 4)), ('Params', ____TBSCertificate_signature_algorithm_tab_val_Params_1), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 5)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 5)), ('Params', ____TBSCertificate_signature_algorithm_tab_val_Params_2), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 5))]))]), dict([('id', (1, 2, 840, 10040, 4, 3)), ('Value', ____TBSCertificate_signature_algorithm_tab_val_Value_3), ('Params', ____TBSCertificate_signature_algorithm_tab_val_Params_3), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10040, 4, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 1)), ('Value', ____TBSCertificate_signature_algorithm_tab_val_Value_4), ('Params', ____TBSCertificate_signature_algorithm_tab_val_Params_4), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 1))]))])], rr=[], ev=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1)), ('Value', ____TBSCertificate_signature_algorithm_tab_val_Value_5), ('Params', ____TBSCertificate_signature_algorithm_tab_val_Params_5), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1))]))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2)), ('Value', ____TBSCertificate_signature_algorithm_tab_val_Value_6), ('Params', ____TBSCertificate_signature_algorithm_tab_val_Params_6), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 1)), ('Value', ____TBSCertificate_signature_algorithm_tab_val_Value_7), ('Params', ____TBSCertificate_signature_algorithm_tab_val_Params_7), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 1))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 2)), ('Value', ____TBSCertificate_signature_algorithm_tab_val_Value_8), ('Params', ____TBSCertificate_signature_algorithm_tab_val_Params_8), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 3)), ('Value', ____TBSCertificate_signature_algorithm_tab_val_Value_9), ('Params', ____TBSCertificate_signature_algorithm_tab_val_Params_9), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 4)), ('Value', ____TBSCertificate_signature_algorithm_tab_val_Value_10), ('Params', ____TBSCertificate_signature_algorithm_tab_val_Params_10), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('Params', ____TBSCertificate_signature_algorithm_tab_val_Params_11), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1), ('paramPresence', 'optional'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 10))]))])], er=[])
    __TBSCertificate_signature_algorithm._const_tab = ___TBSCertificate_signature_algorithm_tab
    __TBSCertificate_signature_algorithm._const_tab_at = None
    __TBSCertificate_signature_algorithm._const_tab_id = 'id'
    __TBSCertificate_signature_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['Params']), opt=True)
    __TBSCertificate_signature_parameters._const_tab = ___TBSCertificate_signature_algorithm_tab
    __TBSCertificate_signature_parameters._const_tab_at = ('..', 'algorithm')
    __TBSCertificate_signature_parameters._const_tab_id = 'Params'
    _TBSCertificate_signature._cont = ASN1Dict([
        ('algorithm', __TBSCertificate_signature_algorithm),
        ('parameters', __TBSCertificate_signature_parameters),
        ])
    _TBSCertificate_signature._ext = None
    _TBSCertificate_issuer = CHOICE(name='issuer', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'Name')))
    _TBSCertificate_validity = SEQ(name='validity', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'Validity')))
    _TBSCertificate_subject = CHOICE(name='subject', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'Name')))
    _TBSCertificate_subjectPublicKeyInfo = SEQ(name='subjectPublicKeyInfo', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'SubjectPublicKeyInfo')))
    _TBSCertificate_issuerUniqueID = BIT_STR(name='issuerUniqueID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Explicit-2009', 'UniqueIdentifier')), opt=True, group=0)
    _TBSCertificate_subjectUniqueID = BIT_STR(name='subjectUniqueID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Explicit-2009', 'UniqueIdentifier')), opt=True, group=0)
    _TBSCertificate_extensions = SEQ_OF(name='extensions', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'Extensions')), opt=True, group=1)
    __TBSCertificate_extensions__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'Extension')))
    ___TBSCertificate_extensions__item__extnID = OID(name='extnID', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'EXTENSION'), ['id']))
    ____TBSCertificate_extensions__item__extnID_tab = CLASS(name='_tab_EXTENSION', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_0 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'AuthorityKeyIdentifier')))
    _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_1 = OCT_STR(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'KeyIdentifier')))
    _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_2 = BIT_STR(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'KeyUsage')))
    _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_3 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'PrivateKeyUsagePeriod')))
    _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_4 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CertificatePolicies')))
    _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_5 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'PolicyMappings')))
    _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_6 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_7 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_8 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'SubjectDirectoryAttributes')))
    _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_9 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'BasicConstraints')))
    _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_10 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'NameConstraints')))
    _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_11 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'PolicyConstraints')))
    _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_12 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'ExtKeyUsageSyntax')))
    _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_13 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLDistributionPoints')))
    _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_14 = INT(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'SkipCerts')))
    _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_15 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLDistributionPoints')))
    _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_16 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'AuthorityInfoAccessSyntax')))
    _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_17 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'SubjectInfoAccessSyntax')))
    ____TBSCertificate_extensions__item__extnID_tab._val = ASN1Set(rv=[dict([('ExtnType', _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_0), ('id', (2, 5, 29, 35))]), dict([('ExtnType', _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_1), ('id', (2, 5, 29, 14))]), dict([('ExtnType', _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_2), ('id', (2, 5, 29, 15))]), dict([('ExtnType', _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_3), ('id', (2, 5, 29, 16))]), dict([('ExtnType', _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_4), ('id', (2, 5, 29, 32))]), dict([('ExtnType', _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_5), ('id', (2, 5, 29, 33))]), dict([('ExtnType', _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_6), ('id', (2, 5, 29, 17))]), dict([('ExtnType', _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_7), ('id', (2, 5, 29, 18))]), dict([('ExtnType', _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_8), ('id', (2, 5, 29, 9))]), dict([('ExtnType', _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_9), ('id', (2, 5, 29, 19))]), dict([('ExtnType', _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_10), ('id', (2, 5, 29, 30))]), dict([('ExtnType', _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_11), ('id', (2, 5, 29, 36))]), dict([('ExtnType', _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_12), ('id', (2, 5, 29, 37))]), dict([('ExtnType', _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_13), ('id', (2, 5, 29, 31))]), dict([('ExtnType', _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_14), ('id', (2, 5, 29, 54))]), dict([('ExtnType', _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_15), ('id', (2, 5, 29, 46))]), dict([('ExtnType', _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_16), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 1))]), dict([('ExtnType', _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_17), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 11))])], rr=[], ev=None, er=[])
    ___TBSCertificate_extensions__item__extnID._const_tab = ____TBSCertificate_extensions__item__extnID_tab
    ___TBSCertificate_extensions__item__extnID._const_tab_at = None
    ___TBSCertificate_extensions__item__extnID._const_tab_id = 'id'
    ___TBSCertificate_extensions__item__critical = BOOL(name='critical', mode=MODE_TYPE, default=False)
    ___TBSCertificate_extensions__item__extnValue = OCT_STR(name='extnValue', mode=MODE_TYPE)
    ____TBSCertificate_extensions__item__extnValue_contain = OPEN(name='_cont_extnValue', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'EXTENSION'), ['ExtnType']))
    ____TBSCertificate_extensions__item__extnValue_contain._const_tab = ____TBSCertificate_extensions__item__extnID_tab
    ____TBSCertificate_extensions__item__extnValue_contain._const_tab_at = ('..', 'extnID')
    ____TBSCertificate_extensions__item__extnValue_contain._const_tab_id = 'ExtnType'
    ___TBSCertificate_extensions__item__extnValue._const_cont = ____TBSCertificate_extensions__item__extnValue_contain
    __TBSCertificate_extensions__item_._cont = ASN1Dict([
        ('extnID', ___TBSCertificate_extensions__item__extnID),
        ('critical', ___TBSCertificate_extensions__item__critical),
        ('extnValue', ___TBSCertificate_extensions__item__extnValue),
        ])
    __TBSCertificate_extensions__item_._ext = None
    _TBSCertificate_extensions._cont = __TBSCertificate_extensions__item_
    _TBSCertificate_extensions._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    TBSCertificate._cont = ASN1Dict([
        ('version', _TBSCertificate_version),
        ('serialNumber', _TBSCertificate_serialNumber),
        ('signature', _TBSCertificate_signature),
        ('issuer', _TBSCertificate_issuer),
        ('validity', _TBSCertificate_validity),
        ('subject', _TBSCertificate_subject),
        ('subjectPublicKeyInfo', _TBSCertificate_subjectPublicKeyInfo),
        ('issuerUniqueID', _TBSCertificate_issuerUniqueID),
        ('subjectUniqueID', _TBSCertificate_subjectUniqueID),
        ('extensions', _TBSCertificate_extensions),
        ])
    TBSCertificate._ext = ['issuerUniqueID', 'subjectUniqueID', 'extensions']
    
    #-----< Version >-----#
    Version = INT(name='Version', mode=MODE_TYPE)
    Version._cont = ASN1Dict([('v1', 0), ('v2', 1), ('v3', 2)])
    
    #-----< CertificateSerialNumber >-----#
    CertificateSerialNumber = INT(name='CertificateSerialNumber', mode=MODE_TYPE)
    
    #-----< Validity >-----#
    Validity = SEQ(name='Validity', mode=MODE_TYPE)
    _Validity_notBefore = CHOICE(name='notBefore', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'Time')))
    _Validity_notAfter = CHOICE(name='notAfter', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'Time')))
    Validity._cont = ASN1Dict([
        ('notBefore', _Validity_notBefore),
        ('notAfter', _Validity_notAfter),
        ])
    Validity._ext = None
    
    #-----< Time >-----#
    Time = CHOICE(name='Time', mode=MODE_TYPE)
    _Time_utcTime = TIME_UTC(name='utcTime', mode=MODE_TYPE)
    _Time_generalTime = TIME_GEN(name='generalTime', mode=MODE_TYPE)
    Time._cont = ASN1Dict([
        ('utcTime', _Time_utcTime),
        ('generalTime', _Time_generalTime),
        ])
    Time._ext = None
    
    #-----< UniqueIdentifier >-----#
    UniqueIdentifier = BIT_STR(name='UniqueIdentifier', mode=MODE_TYPE)
    
    #-----< SubjectPublicKeyInfo >-----#
    SubjectPublicKeyInfo = SEQ(name='SubjectPublicKeyInfo', mode=MODE_TYPE)
    _SubjectPublicKeyInfo_algorithm = SEQ(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __SubjectPublicKeyInfo_algorithm_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'PUBLIC-KEY'), ['id']))
    ___SubjectPublicKeyInfo_algorithm_algorithm_tab = CLASS(name='_tab_PUBLIC-KEY', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')))
    ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_0 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_1 = INT(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSAPublicKey')))
    ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_1 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Params')))
    ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_2 = INT(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DHPublicKey')))
    ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_2 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DomainParameters')))
    ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_3 = OCT_STR(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'KEA-Params-Id')))
    ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_4 = OCT_STR(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECPoint')))
    ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_4 = CHOICE(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECParameters')))
    ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_5 = OCT_STR(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECPoint')))
    ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_5 = CHOICE(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECParameters')))
    ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_6 = OCT_STR(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECPoint')))
    ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_6 = CHOICE(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECParameters')))
    ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_7 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_7 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_8 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_8 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSAES-OAEP-params')))
    ___SubjectPublicKeyInfo_algorithm_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_0), ('Params', ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))]), dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_1), ('Params', ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_1), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))]), dict([('id', (1, 2, 840, 10046, 2, 1)), ('KeyValue', ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_2), ('Params', ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_2), ('paramPresence', 'inheritable'), ('keyUsage', (19, 9))]), dict([('id', (2, 16, 840, 1, 101, 2, 1, 1, 22)), ('Params', ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_3), ('paramPresence', 'required'), ('keyUsage', (19, 9))])], rr=[], ev=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_4), ('Params', ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_4), ('paramPresence', 'required'), ('keyUsage', (103, 7))]), dict([('id', (1, 3, 132, 1, 12)), ('KeyValue', ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_5), ('Params', ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_5), ('paramPresence', 'required'), ('keyUsage', (19, 9))]), dict([('id', (1, 3, 132, 1, 13)), ('KeyValue', ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_6), ('Params', ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_6), ('paramPresence', 'required'), ('keyUsage', (19, 9))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('KeyValue', ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_7), ('Params', ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_7), ('paramPresence', 'optional'), ('keyUsage', (99, 7))]), dict([('id', (1, 2, 840, 113549, 1, 1, 7)), ('KeyValue', ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_8), ('Params', ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_8), ('paramPresence', 'optional'), ('keyUsage', (3, 4))])], er=[])
    __SubjectPublicKeyInfo_algorithm_algorithm._const_tab = ___SubjectPublicKeyInfo_algorithm_algorithm_tab
    __SubjectPublicKeyInfo_algorithm_algorithm._const_tab_at = None
    __SubjectPublicKeyInfo_algorithm_algorithm._const_tab_id = 'id'
    __SubjectPublicKeyInfo_algorithm_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'PUBLIC-KEY'), ['Params']), opt=True)
    __SubjectPublicKeyInfo_algorithm_parameters._const_tab = ___SubjectPublicKeyInfo_algorithm_algorithm_tab
    __SubjectPublicKeyInfo_algorithm_parameters._const_tab_at = ('..', 'algorithm')
    __SubjectPublicKeyInfo_algorithm_parameters._const_tab_id = 'Params'
    _SubjectPublicKeyInfo_algorithm._cont = ASN1Dict([
        ('algorithm', __SubjectPublicKeyInfo_algorithm_algorithm),
        ('parameters', __SubjectPublicKeyInfo_algorithm_parameters),
        ])
    _SubjectPublicKeyInfo_algorithm._ext = None
    _SubjectPublicKeyInfo_subjectPublicKey = BIT_STR(name='subjectPublicKey', mode=MODE_TYPE)
    SubjectPublicKeyInfo._cont = ASN1Dict([
        ('algorithm', _SubjectPublicKeyInfo_algorithm),
        ('subjectPublicKey', _SubjectPublicKeyInfo_subjectPublicKey),
        ])
    SubjectPublicKeyInfo._ext = None
    
    #-----< CertificateList >-----#
    CertificateList = SEQ(name='CertificateList', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'SIGNED')))
    _CertificateList_toBeSigned = SEQ(name='toBeSigned', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'TBSCertList')))
    _CertificateList_algorithmIdentifier = SEQ(name='algorithmIdentifier', mode=MODE_TYPE)
    __CertificateList_algorithmIdentifier_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['id']))
    ___CertificateList_algorithmIdentifier_algorithm_tab = CLASS(name='_tab_SIGNATURE-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_2 = NULL(name='Params', mode=MODE_TYPE)
    ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_3 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_3 = NULL(name='Params', mode=MODE_TYPE)
    ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_4 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_4 = NULL(name='Params', mode=MODE_TYPE)
    ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_5 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_5 = NULL(name='Params', mode=MODE_TYPE)
    ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_6 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_6 = NULL(name='Params', mode=MODE_TYPE)
    ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_7 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_7 = NULL(name='Params', mode=MODE_TYPE)
    ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_8 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_8 = NULL(name='Params', mode=MODE_TYPE)
    ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_9 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_9 = NULL(name='Params', mode=MODE_TYPE)
    ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_10 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_10 = NULL(name='Params', mode=MODE_TYPE)
    ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_11 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    ___CertificateList_algorithmIdentifier_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 2)), ('Params', ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_0), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 2))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 4)), ('Params', ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_1), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 5)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 5)), ('Params', ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_2), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 5))]))]), dict([('id', (1, 2, 840, 10040, 4, 3)), ('Value', ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_3), ('Params', ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_3), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10040, 4, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 1)), ('Value', ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_4), ('Params', ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_4), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 1))]))])], rr=[], ev=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1)), ('Value', ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_5), ('Params', ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_5), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1))]))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2)), ('Value', ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_6), ('Params', ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_6), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 1)), ('Value', ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_7), ('Params', ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_7), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 1))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 2)), ('Value', ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_8), ('Params', ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_8), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 3)), ('Value', ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_9), ('Params', ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_9), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 4)), ('Value', ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_10), ('Params', ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_10), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('Params', ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_11), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1), ('paramPresence', 'optional'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 10))]))])], er=[])
    __CertificateList_algorithmIdentifier_algorithm._const_tab = ___CertificateList_algorithmIdentifier_algorithm_tab
    __CertificateList_algorithmIdentifier_algorithm._const_tab_at = None
    __CertificateList_algorithmIdentifier_algorithm._const_tab_id = 'id'
    __CertificateList_algorithmIdentifier_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['Params']), opt=True)
    __CertificateList_algorithmIdentifier_parameters._const_tab = ___CertificateList_algorithmIdentifier_algorithm_tab
    __CertificateList_algorithmIdentifier_parameters._const_tab_at = ('..', '..', 'algorithmIdentifier', 'algorithm')
    __CertificateList_algorithmIdentifier_parameters._const_tab_id = 'Params'
    _CertificateList_algorithmIdentifier._cont = ASN1Dict([
        ('algorithm', __CertificateList_algorithmIdentifier_algorithm),
        ('parameters', __CertificateList_algorithmIdentifier_parameters),
        ])
    _CertificateList_algorithmIdentifier._ext = None
    _CertificateList_signature = BIT_STR(name='signature', mode=MODE_TYPE)
    __CertificateList_signature_contain = OPEN(name='_cont_signature', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['Value']))
    __CertificateList_signature_contain._const_tab = ___CertificateList_algorithmIdentifier_algorithm_tab
    __CertificateList_signature_contain._const_tab_at = ('..', 'algorithmIdentifier', 'algorithm')
    __CertificateList_signature_contain._const_tab_id = 'Value'
    _CertificateList_signature._const_cont = __CertificateList_signature_contain
    CertificateList._cont = ASN1Dict([
        ('toBeSigned', _CertificateList_toBeSigned),
        ('algorithmIdentifier', _CertificateList_algorithmIdentifier),
        ('signature', _CertificateList_signature),
        ])
    CertificateList._ext = None
    
    #-----< TBSCertList >-----#
    TBSCertList = SEQ(name='TBSCertList', mode=MODE_TYPE)
    _TBSCertList_version = INT(name='version', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'Version')), opt=True)
    _TBSCertList_signature = SEQ(name='signature', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __TBSCertList_signature_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['id']))
    ___TBSCertList_signature_algorithm_tab = CLASS(name='_tab_SIGNATURE-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    ____TBSCertList_signature_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ____TBSCertList_signature_algorithm_tab_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    ____TBSCertList_signature_algorithm_tab_val_Params_2 = NULL(name='Params', mode=MODE_TYPE)
    ____TBSCertList_signature_algorithm_tab_val_Value_3 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____TBSCertList_signature_algorithm_tab_val_Params_3 = NULL(name='Params', mode=MODE_TYPE)
    ____TBSCertList_signature_algorithm_tab_val_Value_4 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____TBSCertList_signature_algorithm_tab_val_Params_4 = NULL(name='Params', mode=MODE_TYPE)
    ____TBSCertList_signature_algorithm_tab_val_Value_5 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____TBSCertList_signature_algorithm_tab_val_Params_5 = NULL(name='Params', mode=MODE_TYPE)
    ____TBSCertList_signature_algorithm_tab_val_Value_6 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____TBSCertList_signature_algorithm_tab_val_Params_6 = NULL(name='Params', mode=MODE_TYPE)
    ____TBSCertList_signature_algorithm_tab_val_Value_7 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____TBSCertList_signature_algorithm_tab_val_Params_7 = NULL(name='Params', mode=MODE_TYPE)
    ____TBSCertList_signature_algorithm_tab_val_Value_8 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____TBSCertList_signature_algorithm_tab_val_Params_8 = NULL(name='Params', mode=MODE_TYPE)
    ____TBSCertList_signature_algorithm_tab_val_Value_9 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____TBSCertList_signature_algorithm_tab_val_Params_9 = NULL(name='Params', mode=MODE_TYPE)
    ____TBSCertList_signature_algorithm_tab_val_Value_10 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____TBSCertList_signature_algorithm_tab_val_Params_10 = NULL(name='Params', mode=MODE_TYPE)
    ____TBSCertList_signature_algorithm_tab_val_Params_11 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    ___TBSCertList_signature_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 2)), ('Params', ____TBSCertList_signature_algorithm_tab_val_Params_0), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 2))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 4)), ('Params', ____TBSCertList_signature_algorithm_tab_val_Params_1), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 5)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 5)), ('Params', ____TBSCertList_signature_algorithm_tab_val_Params_2), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 5))]))]), dict([('id', (1, 2, 840, 10040, 4, 3)), ('Value', ____TBSCertList_signature_algorithm_tab_val_Value_3), ('Params', ____TBSCertList_signature_algorithm_tab_val_Params_3), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10040, 4, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 1)), ('Value', ____TBSCertList_signature_algorithm_tab_val_Value_4), ('Params', ____TBSCertList_signature_algorithm_tab_val_Params_4), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 1))]))])], rr=[], ev=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1)), ('Value', ____TBSCertList_signature_algorithm_tab_val_Value_5), ('Params', ____TBSCertList_signature_algorithm_tab_val_Params_5), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1))]))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2)), ('Value', ____TBSCertList_signature_algorithm_tab_val_Value_6), ('Params', ____TBSCertList_signature_algorithm_tab_val_Params_6), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 1)), ('Value', ____TBSCertList_signature_algorithm_tab_val_Value_7), ('Params', ____TBSCertList_signature_algorithm_tab_val_Params_7), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 1))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 2)), ('Value', ____TBSCertList_signature_algorithm_tab_val_Value_8), ('Params', ____TBSCertList_signature_algorithm_tab_val_Params_8), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 3)), ('Value', ____TBSCertList_signature_algorithm_tab_val_Value_9), ('Params', ____TBSCertList_signature_algorithm_tab_val_Params_9), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 4)), ('Value', ____TBSCertList_signature_algorithm_tab_val_Value_10), ('Params', ____TBSCertList_signature_algorithm_tab_val_Params_10), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('Params', ____TBSCertList_signature_algorithm_tab_val_Params_11), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1), ('paramPresence', 'optional'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 10))]))])], er=[])
    __TBSCertList_signature_algorithm._const_tab = ___TBSCertList_signature_algorithm_tab
    __TBSCertList_signature_algorithm._const_tab_at = None
    __TBSCertList_signature_algorithm._const_tab_id = 'id'
    __TBSCertList_signature_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['Params']), opt=True)
    __TBSCertList_signature_parameters._const_tab = ___TBSCertList_signature_algorithm_tab
    __TBSCertList_signature_parameters._const_tab_at = ('..', 'algorithm')
    __TBSCertList_signature_parameters._const_tab_id = 'Params'
    _TBSCertList_signature._cont = ASN1Dict([
        ('algorithm', __TBSCertList_signature_algorithm),
        ('parameters', __TBSCertList_signature_parameters),
        ])
    _TBSCertList_signature._ext = None
    _TBSCertList_issuer = CHOICE(name='issuer', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'Name')))
    _TBSCertList_thisUpdate = CHOICE(name='thisUpdate', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'Time')))
    _TBSCertList_nextUpdate = CHOICE(name='nextUpdate', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'Time')), opt=True)
    _TBSCertList_revokedCertificates = SEQ_OF(name='revokedCertificates', mode=MODE_TYPE, opt=True)
    __TBSCertList_revokedCertificates__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    ___TBSCertList_revokedCertificates__item__userCertificate = INT(name='userCertificate', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'CertificateSerialNumber')))
    ___TBSCertList_revokedCertificates__item__revocationDate = CHOICE(name='revocationDate', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'Time')))
    ___TBSCertList_revokedCertificates__item__crlEntryExtensions = SEQ_OF(name='crlEntryExtensions', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'Extensions')), opt=True, group=0)
    ____TBSCertList_revokedCertificates__item__crlEntryExtensions__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'Extension')))
    _____TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID = OID(name='extnID', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'EXTENSION'), ['id']))
    ______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID_tab = CLASS(name='_tab_EXTENSION', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID_tab_val_ExtnType_0 = ENUM(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLReason')))
    _______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID_tab_val_ExtnType_1 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    _______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID_tab_val_ExtnType_2 = OID(name='ExtnType', mode=MODE_TYPE)
    _______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID_tab_val_ExtnType_3 = TIME_GEN(name='ExtnType', mode=MODE_TYPE)
    ______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID_tab._val = ASN1Set(rv=[dict([('ExtnType', _______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID_tab_val_ExtnType_0), ('id', (2, 5, 29, 21))]), dict([('ExtnType', _______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID_tab_val_ExtnType_1), ('id', (2, 5, 29, 29))]), dict([('ExtnType', _______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID_tab_val_ExtnType_2), ('id', (2, 5, 29, 23))]), dict([('ExtnType', _______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID_tab_val_ExtnType_3), ('id', (2, 5, 29, 24))])], rr=[], ev=None, er=[])
    _____TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID._const_tab = ______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID_tab
    _____TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID._const_tab_at = None
    _____TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID._const_tab_id = 'id'
    _____TBSCertList_revokedCertificates__item__crlEntryExtensions__item__critical = BOOL(name='critical', mode=MODE_TYPE, default=False)
    _____TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnValue = OCT_STR(name='extnValue', mode=MODE_TYPE)
    ______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnValue_contain = OPEN(name='_cont_extnValue', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'EXTENSION'), ['ExtnType']))
    ______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnValue_contain._const_tab = ______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID_tab
    ______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnValue_contain._const_tab_at = ('..', 'extnID')
    ______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnValue_contain._const_tab_id = 'ExtnType'
    _____TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnValue._const_cont = ______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnValue_contain
    ____TBSCertList_revokedCertificates__item__crlEntryExtensions__item_._cont = ASN1Dict([
        ('extnID', _____TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID),
        ('critical', _____TBSCertList_revokedCertificates__item__crlEntryExtensions__item__critical),
        ('extnValue', _____TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnValue),
        ])
    ____TBSCertList_revokedCertificates__item__crlEntryExtensions__item_._ext = None
    ___TBSCertList_revokedCertificates__item__crlEntryExtensions._cont = ____TBSCertList_revokedCertificates__item__crlEntryExtensions__item_
    ___TBSCertList_revokedCertificates__item__crlEntryExtensions._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    __TBSCertList_revokedCertificates__item_._cont = ASN1Dict([
        ('userCertificate', ___TBSCertList_revokedCertificates__item__userCertificate),
        ('revocationDate', ___TBSCertList_revokedCertificates__item__revocationDate),
        ('crlEntryExtensions', ___TBSCertList_revokedCertificates__item__crlEntryExtensions),
        ])
    __TBSCertList_revokedCertificates__item_._ext = ['crlEntryExtensions']
    _TBSCertList_revokedCertificates._cont = __TBSCertList_revokedCertificates__item_
    _TBSCertList_revokedCertificates._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    _TBSCertList_crlExtensions = SEQ_OF(name='crlExtensions', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'Extensions')), opt=True, group=0)
    __TBSCertList_crlExtensions__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'Extension')))
    ___TBSCertList_crlExtensions__item__extnID = OID(name='extnID', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'EXTENSION'), ['id']))
    ____TBSCertList_crlExtensions__item__extnID_tab = CLASS(name='_tab_EXTENSION', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _____TBSCertList_crlExtensions__item__extnID_tab_val_ExtnType_0 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'AuthorityKeyIdentifier')))
    _____TBSCertList_crlExtensions__item__extnID_tab_val_ExtnType_1 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    _____TBSCertList_crlExtensions__item__extnID_tab_val_ExtnType_2 = INT(name='ExtnType', mode=MODE_TYPE)
    _____TBSCertList_crlExtensions__item__extnID_tab_val_ExtnType_2._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    _____TBSCertList_crlExtensions__item__extnID_tab_val_ExtnType_3 = INT(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLNumber')))
    _____TBSCertList_crlExtensions__item__extnID_tab_val_ExtnType_4 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'IssuingDistributionPoint')))
    _____TBSCertList_crlExtensions__item__extnID_tab_val_ExtnType_5 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLDistributionPoints')))
    ____TBSCertList_crlExtensions__item__extnID_tab._val = ASN1Set(rv=[dict([('ExtnType', _____TBSCertList_crlExtensions__item__extnID_tab_val_ExtnType_0), ('id', (2, 5, 29, 35))]), dict([('ExtnType', _____TBSCertList_crlExtensions__item__extnID_tab_val_ExtnType_1), ('id', (2, 5, 29, 18))]), dict([('ExtnType', _____TBSCertList_crlExtensions__item__extnID_tab_val_ExtnType_2), ('id', (2, 5, 29, 20))]), dict([('ExtnType', _____TBSCertList_crlExtensions__item__extnID_tab_val_ExtnType_3), ('id', (2, 5, 29, 27))]), dict([('ExtnType', _____TBSCertList_crlExtensions__item__extnID_tab_val_ExtnType_4), ('id', (2, 5, 29, 28))]), dict([('ExtnType', _____TBSCertList_crlExtensions__item__extnID_tab_val_ExtnType_5), ('id', (2, 5, 29, 46))])], rr=[], ev=None, er=[])
    ___TBSCertList_crlExtensions__item__extnID._const_tab = ____TBSCertList_crlExtensions__item__extnID_tab
    ___TBSCertList_crlExtensions__item__extnID._const_tab_at = None
    ___TBSCertList_crlExtensions__item__extnID._const_tab_id = 'id'
    ___TBSCertList_crlExtensions__item__critical = BOOL(name='critical', mode=MODE_TYPE, default=False)
    ___TBSCertList_crlExtensions__item__extnValue = OCT_STR(name='extnValue', mode=MODE_TYPE)
    ____TBSCertList_crlExtensions__item__extnValue_contain = OPEN(name='_cont_extnValue', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'EXTENSION'), ['ExtnType']))
    ____TBSCertList_crlExtensions__item__extnValue_contain._const_tab = ____TBSCertList_crlExtensions__item__extnID_tab
    ____TBSCertList_crlExtensions__item__extnValue_contain._const_tab_at = ('..', 'extnID')
    ____TBSCertList_crlExtensions__item__extnValue_contain._const_tab_id = 'ExtnType'
    ___TBSCertList_crlExtensions__item__extnValue._const_cont = ____TBSCertList_crlExtensions__item__extnValue_contain
    __TBSCertList_crlExtensions__item_._cont = ASN1Dict([
        ('extnID', ___TBSCertList_crlExtensions__item__extnID),
        ('critical', ___TBSCertList_crlExtensions__item__critical),
        ('extnValue', ___TBSCertList_crlExtensions__item__extnValue),
        ])
    __TBSCertList_crlExtensions__item_._ext = None
    _TBSCertList_crlExtensions._cont = __TBSCertList_crlExtensions__item_
    _TBSCertList_crlExtensions._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    TBSCertList._cont = ASN1Dict([
        ('version', _TBSCertList_version),
        ('signature', _TBSCertList_signature),
        ('issuer', _TBSCertList_issuer),
        ('thisUpdate', _TBSCertList_thisUpdate),
        ('nextUpdate', _TBSCertList_nextUpdate),
        ('revokedCertificates', _TBSCertList_revokedCertificates),
        ('crlExtensions', _TBSCertList_crlExtensions),
        ])
    TBSCertList._ext = ['crlExtensions']
    
    #-----< SignatureAlgorithms >-----#
    SignatureAlgorithms = CLASS(name='SignatureAlgorithms', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    _SignatureAlgorithms_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _SignatureAlgorithms_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    _SignatureAlgorithms_val_Params_2 = NULL(name='Params', mode=MODE_TYPE)
    _SignatureAlgorithms_val_Value_3 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    _SignatureAlgorithms_val_Params_3 = NULL(name='Params', mode=MODE_TYPE)
    _SignatureAlgorithms_val_Value_4 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    _SignatureAlgorithms_val_Params_4 = NULL(name='Params', mode=MODE_TYPE)
    _SignatureAlgorithms_val_Value_5 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    _SignatureAlgorithms_val_Params_5 = NULL(name='Params', mode=MODE_TYPE)
    _SignatureAlgorithms_val_Value_6 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    _SignatureAlgorithms_val_Params_6 = NULL(name='Params', mode=MODE_TYPE)
    _SignatureAlgorithms_val_Value_7 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    _SignatureAlgorithms_val_Params_7 = NULL(name='Params', mode=MODE_TYPE)
    _SignatureAlgorithms_val_Value_8 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    _SignatureAlgorithms_val_Params_8 = NULL(name='Params', mode=MODE_TYPE)
    _SignatureAlgorithms_val_Value_9 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    _SignatureAlgorithms_val_Params_9 = NULL(name='Params', mode=MODE_TYPE)
    _SignatureAlgorithms_val_Value_10 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    _SignatureAlgorithms_val_Params_10 = NULL(name='Params', mode=MODE_TYPE)
    _SignatureAlgorithms_val_Params_11 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    SignatureAlgorithms._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 2)), ('Params', _SignatureAlgorithms_val_Params_0), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 2))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 4)), ('Params', _SignatureAlgorithms_val_Params_1), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 5)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 5)), ('Params', _SignatureAlgorithms_val_Params_2), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 5))]))]), dict([('id', (1, 2, 840, 10040, 4, 3)), ('Value', _SignatureAlgorithms_val_Value_3), ('Params', _SignatureAlgorithms_val_Params_3), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10040, 4, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 1)), ('Value', _SignatureAlgorithms_val_Value_4), ('Params', _SignatureAlgorithms_val_Params_4), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 1))]))])], rr=[], ev=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1)), ('Value', _SignatureAlgorithms_val_Value_5), ('Params', _SignatureAlgorithms_val_Params_5), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1))]))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2)), ('Value', _SignatureAlgorithms_val_Value_6), ('Params', _SignatureAlgorithms_val_Params_6), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 1)), ('Value', _SignatureAlgorithms_val_Value_7), ('Params', _SignatureAlgorithms_val_Params_7), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 1))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 2)), ('Value', _SignatureAlgorithms_val_Value_8), ('Params', _SignatureAlgorithms_val_Params_8), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 3)), ('Value', _SignatureAlgorithms_val_Value_9), ('Params', _SignatureAlgorithms_val_Params_9), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 4)), ('Value', _SignatureAlgorithms_val_Value_10), ('Params', _SignatureAlgorithms_val_Params_10), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('Params', _SignatureAlgorithms_val_Params_11), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1), ('paramPresence', 'optional'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 10))]))])], er=[])
    
    #-----< PublicKeyAlgorithms >-----#
    PublicKeyAlgorithms = CLASS(name='PublicKeyAlgorithms', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')))
    _PublicKeyAlgorithms_val_KeyValue_0 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    _PublicKeyAlgorithms_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _PublicKeyAlgorithms_val_KeyValue_1 = INT(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSAPublicKey')))
    _PublicKeyAlgorithms_val_Params_1 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Params')))
    _PublicKeyAlgorithms_val_KeyValue_2 = INT(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DHPublicKey')))
    _PublicKeyAlgorithms_val_Params_2 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DomainParameters')))
    _PublicKeyAlgorithms_val_Params_3 = OCT_STR(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'KEA-Params-Id')))
    _PublicKeyAlgorithms_val_KeyValue_4 = OCT_STR(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECPoint')))
    _PublicKeyAlgorithms_val_Params_4 = CHOICE(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECParameters')))
    _PublicKeyAlgorithms_val_KeyValue_5 = OCT_STR(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECPoint')))
    _PublicKeyAlgorithms_val_Params_5 = CHOICE(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECParameters')))
    _PublicKeyAlgorithms_val_KeyValue_6 = OCT_STR(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECPoint')))
    _PublicKeyAlgorithms_val_Params_6 = CHOICE(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECParameters')))
    _PublicKeyAlgorithms_val_KeyValue_7 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    _PublicKeyAlgorithms_val_Params_7 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    _PublicKeyAlgorithms_val_KeyValue_8 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    _PublicKeyAlgorithms_val_Params_8 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSAES-OAEP-params')))
    PublicKeyAlgorithms._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _PublicKeyAlgorithms_val_KeyValue_0), ('Params', _PublicKeyAlgorithms_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))]), dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _PublicKeyAlgorithms_val_KeyValue_1), ('Params', _PublicKeyAlgorithms_val_Params_1), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))]), dict([('id', (1, 2, 840, 10046, 2, 1)), ('KeyValue', _PublicKeyAlgorithms_val_KeyValue_2), ('Params', _PublicKeyAlgorithms_val_Params_2), ('paramPresence', 'inheritable'), ('keyUsage', (19, 9))]), dict([('id', (2, 16, 840, 1, 101, 2, 1, 1, 22)), ('Params', _PublicKeyAlgorithms_val_Params_3), ('paramPresence', 'required'), ('keyUsage', (19, 9))])], rr=[], ev=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _PublicKeyAlgorithms_val_KeyValue_4), ('Params', _PublicKeyAlgorithms_val_Params_4), ('paramPresence', 'required'), ('keyUsage', (103, 7))]), dict([('id', (1, 3, 132, 1, 12)), ('KeyValue', _PublicKeyAlgorithms_val_KeyValue_5), ('Params', _PublicKeyAlgorithms_val_Params_5), ('paramPresence', 'required'), ('keyUsage', (19, 9))]), dict([('id', (1, 3, 132, 1, 13)), ('KeyValue', _PublicKeyAlgorithms_val_KeyValue_6), ('Params', _PublicKeyAlgorithms_val_Params_6), ('paramPresence', 'required'), ('keyUsage', (19, 9))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('KeyValue', _PublicKeyAlgorithms_val_KeyValue_7), ('Params', _PublicKeyAlgorithms_val_Params_7), ('paramPresence', 'optional'), ('keyUsage', (99, 7))]), dict([('id', (1, 2, 840, 113549, 1, 1, 7)), ('KeyValue', _PublicKeyAlgorithms_val_KeyValue_8), ('Params', _PublicKeyAlgorithms_val_Params_8), ('paramPresence', 'optional'), ('keyUsage', (3, 4))])], er=[])
    
    #-----< ub-state-name >-----#
    ub_state_name = INT(name='ub-state-name', mode=MODE_VALUE)
    ub_state_name._val = 128
    
    #-----< ub-organization-name >-----#
    ub_organization_name = INT(name='ub-organization-name', mode=MODE_VALUE)
    ub_organization_name._val = 64
    
    #-----< ub-organizational-unit-name >-----#
    ub_organizational_unit_name = INT(name='ub-organizational-unit-name', mode=MODE_VALUE)
    ub_organizational_unit_name._val = 64
    
    #-----< ub-title >-----#
    ub_title = INT(name='ub-title', mode=MODE_VALUE)
    ub_title._val = 64
    
    #-----< ub-serial-number >-----#
    ub_serial_number = INT(name='ub-serial-number', mode=MODE_VALUE)
    ub_serial_number._val = 64
    
    #-----< ub-pseudonym >-----#
    ub_pseudonym = INT(name='ub-pseudonym', mode=MODE_VALUE)
    ub_pseudonym._val = 128
    
    #-----< ub-emailaddress-length >-----#
    ub_emailaddress_length = INT(name='ub-emailaddress-length', mode=MODE_VALUE)
    ub_emailaddress_length._val = 255
    
    #-----< ub-locality-name >-----#
    ub_locality_name = INT(name='ub-locality-name', mode=MODE_VALUE)
    ub_locality_name._val = 128
    
    #-----< ub-common-name >-----#
    ub_common_name = INT(name='ub-common-name', mode=MODE_VALUE)
    ub_common_name._val = 64
    
    #-----< ub-name >-----#
    ub_name = INT(name='ub-name', mode=MODE_VALUE)
    ub_name._val = 32768
    
    #-----< SIGNED >-----#
    SIGNED = SEQ(name='SIGNED', mode=MODE_TYPE, param=True)
    
    _all_ = [
        id_pkix,
        id_pe,
        id_qt,
        id_kp,
        id_ad,
        id_qt_cps,
        id_qt_unotice,
        id_ad_ocsp,
        id_ad_caIssuers,
        id_ad_timeStamping,
        id_ad_caRepository,
        AttributeType,
        id_at,
        id_at_name,
        at_name,
        _at_name_val_Type,
        id_at_surname,
        at_surname,
        _at_surname_val_Type,
        id_at_givenName,
        at_givenName,
        _at_givenName_val_Type,
        id_at_initials,
        at_initials,
        _at_initials_val_Type,
        id_at_generationQualifier,
        at_generationQualifier,
        _at_generationQualifier_val_Type,
        _X520name_teletexString,
        _X520name_printableString,
        _X520name_bmpString,
        _X520name_universalString,
        _X520name_uTF8String,
        X520name,
        id_at_commonName,
        at_x520CommonName,
        _at_x520CommonName_val_Type,
        _X520CommonName_teletexString,
        _X520CommonName_printableString,
        _X520CommonName_bmpString,
        _X520CommonName_universalString,
        _X520CommonName_uTF8String,
        X520CommonName,
        id_at_localityName,
        at_x520LocalityName,
        _at_x520LocalityName_val_Type,
        _X520LocalityName_teletexString,
        _X520LocalityName_printableString,
        _X520LocalityName_bmpString,
        _X520LocalityName_universalString,
        _X520LocalityName_uTF8String,
        X520LocalityName,
        id_at_stateOrProvinceName,
        at_x520StateOrProvinceName,
        __at_x520StateOrProvinceName_val_Type_teletexString,
        __at_x520StateOrProvinceName_val_Type_printableString,
        __at_x520StateOrProvinceName_val_Type_bmpString,
        __at_x520StateOrProvinceName_val_Type_universalString,
        __at_x520StateOrProvinceName_val_Type_uTF8String,
        _at_x520StateOrProvinceName_val_Type,
        _X520StateOrProvinceName_teletexString,
        _X520StateOrProvinceName_printableString,
        _X520StateOrProvinceName_bmpString,
        _X520StateOrProvinceName_universalString,
        _X520StateOrProvinceName_uTF8String,
        X520StateOrProvinceName,
        id_at_organizationName,
        at_x520OrganizationName,
        __at_x520OrganizationName_val_Type_teletexString,
        __at_x520OrganizationName_val_Type_printableString,
        __at_x520OrganizationName_val_Type_bmpString,
        __at_x520OrganizationName_val_Type_universalString,
        __at_x520OrganizationName_val_Type_uTF8String,
        _at_x520OrganizationName_val_Type,
        _X520OrganizationName_teletexString,
        _X520OrganizationName_printableString,
        _X520OrganizationName_bmpString,
        _X520OrganizationName_universalString,
        _X520OrganizationName_uTF8String,
        X520OrganizationName,
        id_at_organizationalUnitName,
        at_x520OrganizationalUnitName,
        __at_x520OrganizationalUnitName_val_Type_teletexString,
        __at_x520OrganizationalUnitName_val_Type_printableString,
        __at_x520OrganizationalUnitName_val_Type_bmpString,
        __at_x520OrganizationalUnitName_val_Type_universalString,
        __at_x520OrganizationalUnitName_val_Type_uTF8String,
        _at_x520OrganizationalUnitName_val_Type,
        _X520OrganizationalUnitName_teletexString,
        _X520OrganizationalUnitName_printableString,
        _X520OrganizationalUnitName_bmpString,
        _X520OrganizationalUnitName_universalString,
        _X520OrganizationalUnitName_uTF8String,
        X520OrganizationalUnitName,
        id_at_title,
        at_x520Title,
        __at_x520Title_val_Type_teletexString,
        __at_x520Title_val_Type_printableString,
        __at_x520Title_val_Type_bmpString,
        __at_x520Title_val_Type_universalString,
        __at_x520Title_val_Type_uTF8String,
        _at_x520Title_val_Type,
        id_at_dnQualifier,
        at_x520dnQualifier,
        _at_x520dnQualifier_val_Type,
        id_at_countryName,
        at_x520countryName,
        _at_x520countryName_val_Type,
        id_at_serialNumber,
        at_x520SerialNumber,
        _at_x520SerialNumber_val_Type,
        id_at_pseudonym,
        at_x520Pseudonym,
        __at_x520Pseudonym_val_Type_teletexString,
        __at_x520Pseudonym_val_Type_printableString,
        __at_x520Pseudonym_val_Type_bmpString,
        __at_x520Pseudonym_val_Type_universalString,
        __at_x520Pseudonym_val_Type_uTF8String,
        _at_x520Pseudonym_val_Type,
        id_domainComponent,
        at_domainComponent,
        _at_domainComponent_val_Type,
        pkcs_9,
        id_emailAddress,
        at_emailAddress,
        _at_emailAddress_val_Type,
        _Name_rdnSequence,
        Name,
        _RDNSequence__item_,
        RDNSequence,
        DistinguishedName,
        ___RelativeDistinguishedName__item__type_tab,
        ____RelativeDistinguishedName__item__type_tab_val_Type_0,
        ____RelativeDistinguishedName__item__type_tab_val_Type_1,
        ____RelativeDistinguishedName__item__type_tab_val_Type_2,
        ____RelativeDistinguishedName__item__type_tab_val_Type_3,
        ____RelativeDistinguishedName__item__type_tab_val_Type_4,
        ____RelativeDistinguishedName__item__type_tab_val_Type_5,
        ____RelativeDistinguishedName__item__type_tab_val_Type_6,
        _____RelativeDistinguishedName__item__type_tab_val_Type_7_teletexString,
        _____RelativeDistinguishedName__item__type_tab_val_Type_7_printableString,
        _____RelativeDistinguishedName__item__type_tab_val_Type_7_bmpString,
        _____RelativeDistinguishedName__item__type_tab_val_Type_7_universalString,
        _____RelativeDistinguishedName__item__type_tab_val_Type_7_uTF8String,
        ____RelativeDistinguishedName__item__type_tab_val_Type_7,
        _____RelativeDistinguishedName__item__type_tab_val_Type_8_teletexString,
        _____RelativeDistinguishedName__item__type_tab_val_Type_8_printableString,
        _____RelativeDistinguishedName__item__type_tab_val_Type_8_bmpString,
        _____RelativeDistinguishedName__item__type_tab_val_Type_8_universalString,
        _____RelativeDistinguishedName__item__type_tab_val_Type_8_uTF8String,
        ____RelativeDistinguishedName__item__type_tab_val_Type_8,
        _____RelativeDistinguishedName__item__type_tab_val_Type_9_teletexString,
        _____RelativeDistinguishedName__item__type_tab_val_Type_9_printableString,
        _____RelativeDistinguishedName__item__type_tab_val_Type_9_bmpString,
        _____RelativeDistinguishedName__item__type_tab_val_Type_9_universalString,
        _____RelativeDistinguishedName__item__type_tab_val_Type_9_uTF8String,
        ____RelativeDistinguishedName__item__type_tab_val_Type_9,
        _____RelativeDistinguishedName__item__type_tab_val_Type_10_teletexString,
        _____RelativeDistinguishedName__item__type_tab_val_Type_10_printableString,
        _____RelativeDistinguishedName__item__type_tab_val_Type_10_bmpString,
        _____RelativeDistinguishedName__item__type_tab_val_Type_10_universalString,
        _____RelativeDistinguishedName__item__type_tab_val_Type_10_uTF8String,
        ____RelativeDistinguishedName__item__type_tab_val_Type_10,
        ____RelativeDistinguishedName__item__type_tab_val_Type_11,
        ____RelativeDistinguishedName__item__type_tab_val_Type_12,
        ____RelativeDistinguishedName__item__type_tab_val_Type_13,
        _____RelativeDistinguishedName__item__type_tab_val_Type_14_teletexString,
        _____RelativeDistinguishedName__item__type_tab_val_Type_14_printableString,
        _____RelativeDistinguishedName__item__type_tab_val_Type_14_bmpString,
        _____RelativeDistinguishedName__item__type_tab_val_Type_14_universalString,
        _____RelativeDistinguishedName__item__type_tab_val_Type_14_uTF8String,
        ____RelativeDistinguishedName__item__type_tab_val_Type_14,
        ____RelativeDistinguishedName__item__type_tab_val_Type_15,
        ____RelativeDistinguishedName__item__type_tab_val_Type_16,
        __RelativeDistinguishedName__item__type,
        __RelativeDistinguishedName__item__value,
        _RelativeDistinguishedName__item_,
        RelativeDistinguishedName,
        SupportedAttributes,
        _SupportedAttributes_val_Type_0,
        _SupportedAttributes_val_Type_1,
        _SupportedAttributes_val_Type_2,
        _SupportedAttributes_val_Type_3,
        _SupportedAttributes_val_Type_4,
        _SupportedAttributes_val_Type_5,
        _SupportedAttributes_val_Type_6,
        __SupportedAttributes_val_Type_7_teletexString,
        __SupportedAttributes_val_Type_7_printableString,
        __SupportedAttributes_val_Type_7_bmpString,
        __SupportedAttributes_val_Type_7_universalString,
        __SupportedAttributes_val_Type_7_uTF8String,
        _SupportedAttributes_val_Type_7,
        __SupportedAttributes_val_Type_8_teletexString,
        __SupportedAttributes_val_Type_8_printableString,
        __SupportedAttributes_val_Type_8_bmpString,
        __SupportedAttributes_val_Type_8_universalString,
        __SupportedAttributes_val_Type_8_uTF8String,
        _SupportedAttributes_val_Type_8,
        __SupportedAttributes_val_Type_9_teletexString,
        __SupportedAttributes_val_Type_9_printableString,
        __SupportedAttributes_val_Type_9_bmpString,
        __SupportedAttributes_val_Type_9_universalString,
        __SupportedAttributes_val_Type_9_uTF8String,
        _SupportedAttributes_val_Type_9,
        __SupportedAttributes_val_Type_10_teletexString,
        __SupportedAttributes_val_Type_10_printableString,
        __SupportedAttributes_val_Type_10_bmpString,
        __SupportedAttributes_val_Type_10_universalString,
        __SupportedAttributes_val_Type_10_uTF8String,
        _SupportedAttributes_val_Type_10,
        _SupportedAttributes_val_Type_11,
        _SupportedAttributes_val_Type_12,
        _SupportedAttributes_val_Type_13,
        __SupportedAttributes_val_Type_14_teletexString,
        __SupportedAttributes_val_Type_14_printableString,
        __SupportedAttributes_val_Type_14_bmpString,
        __SupportedAttributes_val_Type_14_universalString,
        __SupportedAttributes_val_Type_14_uTF8String,
        _SupportedAttributes_val_Type_14,
        _SupportedAttributes_val_Type_15,
        _SupportedAttributes_val_Type_16,
        _Certificate_toBeSigned,
        ___Certificate_algorithmIdentifier_algorithm_tab,
        ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0,
        ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_1,
        ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_2,
        ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_3,
        ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_3,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0,
        ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_4,
        ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_4,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1,
        ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_5,
        ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_5,
        ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_6,
        ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_6,
        ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_7,
        ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_7,
        ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_8,
        ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_8,
        ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_9,
        ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_9,
        ____Certificate_algorithmIdentifier_algorithm_tab_val_Value_10,
        ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_10,
        ____Certificate_algorithmIdentifier_algorithm_tab_val_Params_11,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1,
        __Certificate_algorithmIdentifier_algorithm,
        __Certificate_algorithmIdentifier_parameters,
        _Certificate_algorithmIdentifier,
        __Certificate_signature_contain,
        _Certificate_signature,
        Certificate,
        _TBSCertificate_version,
        _TBSCertificate_serialNumber,
        ___TBSCertificate_signature_algorithm_tab,
        ____TBSCertificate_signature_algorithm_tab_val_Params_0,
        ____TBSCertificate_signature_algorithm_tab_val_Params_1,
        ____TBSCertificate_signature_algorithm_tab_val_Params_2,
        ____TBSCertificate_signature_algorithm_tab_val_Value_3,
        ____TBSCertificate_signature_algorithm_tab_val_Params_3,
        ____TBSCertificate_signature_algorithm_tab_val_Value_4,
        ____TBSCertificate_signature_algorithm_tab_val_Params_4,
        ____TBSCertificate_signature_algorithm_tab_val_Value_5,
        ____TBSCertificate_signature_algorithm_tab_val_Params_5,
        ____TBSCertificate_signature_algorithm_tab_val_Value_6,
        ____TBSCertificate_signature_algorithm_tab_val_Params_6,
        ____TBSCertificate_signature_algorithm_tab_val_Value_7,
        ____TBSCertificate_signature_algorithm_tab_val_Params_7,
        ____TBSCertificate_signature_algorithm_tab_val_Value_8,
        ____TBSCertificate_signature_algorithm_tab_val_Params_8,
        ____TBSCertificate_signature_algorithm_tab_val_Value_9,
        ____TBSCertificate_signature_algorithm_tab_val_Params_9,
        ____TBSCertificate_signature_algorithm_tab_val_Value_10,
        ____TBSCertificate_signature_algorithm_tab_val_Params_10,
        ____TBSCertificate_signature_algorithm_tab_val_Params_11,
        __TBSCertificate_signature_algorithm,
        __TBSCertificate_signature_parameters,
        _TBSCertificate_signature,
        _TBSCertificate_issuer,
        _TBSCertificate_validity,
        _TBSCertificate_subject,
        _TBSCertificate_subjectPublicKeyInfo,
        _TBSCertificate_issuerUniqueID,
        _TBSCertificate_subjectUniqueID,
        ____TBSCertificate_extensions__item__extnID_tab,
        _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_0,
        _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_1,
        _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_2,
        _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_3,
        _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_4,
        _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_5,
        _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_6,
        _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_7,
        _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_8,
        _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_9,
        _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_10,
        _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_11,
        _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_12,
        _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_13,
        _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_14,
        _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_15,
        _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_16,
        _____TBSCertificate_extensions__item__extnID_tab_val_ExtnType_17,
        ___TBSCertificate_extensions__item__extnID,
        ___TBSCertificate_extensions__item__critical,
        ____TBSCertificate_extensions__item__extnValue_contain,
        ___TBSCertificate_extensions__item__extnValue,
        __TBSCertificate_extensions__item_,
        _TBSCertificate_extensions,
        TBSCertificate,
        Version,
        CertificateSerialNumber,
        _Validity_notBefore,
        _Validity_notAfter,
        Validity,
        _Time_utcTime,
        _Time_generalTime,
        Time,
        UniqueIdentifier,
        ___SubjectPublicKeyInfo_algorithm_algorithm_tab,
        ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_0,
        ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_0,
        ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_1,
        ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_1,
        ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_2,
        ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_2,
        ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_3,
        ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_4,
        ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_4,
        ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_5,
        ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_5,
        ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_6,
        ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_6,
        ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_7,
        ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_7,
        ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_8,
        ____SubjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_8,
        __SubjectPublicKeyInfo_algorithm_algorithm,
        __SubjectPublicKeyInfo_algorithm_parameters,
        _SubjectPublicKeyInfo_algorithm,
        _SubjectPublicKeyInfo_subjectPublicKey,
        SubjectPublicKeyInfo,
        _CertificateList_toBeSigned,
        ___CertificateList_algorithmIdentifier_algorithm_tab,
        ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_0,
        ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_1,
        ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_2,
        ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_3,
        ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_3,
        ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_4,
        ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_4,
        ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_5,
        ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_5,
        ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_6,
        ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_6,
        ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_7,
        ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_7,
        ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_8,
        ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_8,
        ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_9,
        ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_9,
        ____CertificateList_algorithmIdentifier_algorithm_tab_val_Value_10,
        ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_10,
        ____CertificateList_algorithmIdentifier_algorithm_tab_val_Params_11,
        __CertificateList_algorithmIdentifier_algorithm,
        __CertificateList_algorithmIdentifier_parameters,
        _CertificateList_algorithmIdentifier,
        __CertificateList_signature_contain,
        _CertificateList_signature,
        CertificateList,
        _TBSCertList_version,
        ___TBSCertList_signature_algorithm_tab,
        ____TBSCertList_signature_algorithm_tab_val_Params_0,
        ____TBSCertList_signature_algorithm_tab_val_Params_1,
        ____TBSCertList_signature_algorithm_tab_val_Params_2,
        ____TBSCertList_signature_algorithm_tab_val_Value_3,
        ____TBSCertList_signature_algorithm_tab_val_Params_3,
        ____TBSCertList_signature_algorithm_tab_val_Value_4,
        ____TBSCertList_signature_algorithm_tab_val_Params_4,
        ____TBSCertList_signature_algorithm_tab_val_Value_5,
        ____TBSCertList_signature_algorithm_tab_val_Params_5,
        ____TBSCertList_signature_algorithm_tab_val_Value_6,
        ____TBSCertList_signature_algorithm_tab_val_Params_6,
        ____TBSCertList_signature_algorithm_tab_val_Value_7,
        ____TBSCertList_signature_algorithm_tab_val_Params_7,
        ____TBSCertList_signature_algorithm_tab_val_Value_8,
        ____TBSCertList_signature_algorithm_tab_val_Params_8,
        ____TBSCertList_signature_algorithm_tab_val_Value_9,
        ____TBSCertList_signature_algorithm_tab_val_Params_9,
        ____TBSCertList_signature_algorithm_tab_val_Value_10,
        ____TBSCertList_signature_algorithm_tab_val_Params_10,
        ____TBSCertList_signature_algorithm_tab_val_Params_11,
        __TBSCertList_signature_algorithm,
        __TBSCertList_signature_parameters,
        _TBSCertList_signature,
        _TBSCertList_issuer,
        _TBSCertList_thisUpdate,
        _TBSCertList_nextUpdate,
        ___TBSCertList_revokedCertificates__item__userCertificate,
        ___TBSCertList_revokedCertificates__item__revocationDate,
        ______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID_tab,
        _______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID_tab_val_ExtnType_0,
        _______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID_tab_val_ExtnType_1,
        _______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID_tab_val_ExtnType_2,
        _______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID_tab_val_ExtnType_3,
        _____TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnID,
        _____TBSCertList_revokedCertificates__item__crlEntryExtensions__item__critical,
        ______TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnValue_contain,
        _____TBSCertList_revokedCertificates__item__crlEntryExtensions__item__extnValue,
        ____TBSCertList_revokedCertificates__item__crlEntryExtensions__item_,
        ___TBSCertList_revokedCertificates__item__crlEntryExtensions,
        __TBSCertList_revokedCertificates__item_,
        _TBSCertList_revokedCertificates,
        ____TBSCertList_crlExtensions__item__extnID_tab,
        _____TBSCertList_crlExtensions__item__extnID_tab_val_ExtnType_0,
        _____TBSCertList_crlExtensions__item__extnID_tab_val_ExtnType_1,
        _____TBSCertList_crlExtensions__item__extnID_tab_val_ExtnType_2,
        _____TBSCertList_crlExtensions__item__extnID_tab_val_ExtnType_3,
        _____TBSCertList_crlExtensions__item__extnID_tab_val_ExtnType_4,
        _____TBSCertList_crlExtensions__item__extnID_tab_val_ExtnType_5,
        ___TBSCertList_crlExtensions__item__extnID,
        ___TBSCertList_crlExtensions__item__critical,
        ____TBSCertList_crlExtensions__item__extnValue_contain,
        ___TBSCertList_crlExtensions__item__extnValue,
        __TBSCertList_crlExtensions__item_,
        _TBSCertList_crlExtensions,
        TBSCertList,
        SignatureAlgorithms,
        _SignatureAlgorithms_val_Params_0,
        _SignatureAlgorithms_val_Params_1,
        _SignatureAlgorithms_val_Params_2,
        _SignatureAlgorithms_val_Value_3,
        _SignatureAlgorithms_val_Params_3,
        _SignatureAlgorithms_val_Value_4,
        _SignatureAlgorithms_val_Params_4,
        _SignatureAlgorithms_val_Value_5,
        _SignatureAlgorithms_val_Params_5,
        _SignatureAlgorithms_val_Value_6,
        _SignatureAlgorithms_val_Params_6,
        _SignatureAlgorithms_val_Value_7,
        _SignatureAlgorithms_val_Params_7,
        _SignatureAlgorithms_val_Value_8,
        _SignatureAlgorithms_val_Params_8,
        _SignatureAlgorithms_val_Value_9,
        _SignatureAlgorithms_val_Params_9,
        _SignatureAlgorithms_val_Value_10,
        _SignatureAlgorithms_val_Params_10,
        _SignatureAlgorithms_val_Params_11,
        PublicKeyAlgorithms,
        _PublicKeyAlgorithms_val_KeyValue_0,
        _PublicKeyAlgorithms_val_Params_0,
        _PublicKeyAlgorithms_val_KeyValue_1,
        _PublicKeyAlgorithms_val_Params_1,
        _PublicKeyAlgorithms_val_KeyValue_2,
        _PublicKeyAlgorithms_val_Params_2,
        _PublicKeyAlgorithms_val_Params_3,
        _PublicKeyAlgorithms_val_KeyValue_4,
        _PublicKeyAlgorithms_val_Params_4,
        _PublicKeyAlgorithms_val_KeyValue_5,
        _PublicKeyAlgorithms_val_Params_5,
        _PublicKeyAlgorithms_val_KeyValue_6,
        _PublicKeyAlgorithms_val_Params_6,
        _PublicKeyAlgorithms_val_KeyValue_7,
        _PublicKeyAlgorithms_val_Params_7,
        _PublicKeyAlgorithms_val_KeyValue_8,
        _PublicKeyAlgorithms_val_Params_8,
        ub_state_name,
        ub_organization_name,
        ub_organizational_unit_name,
        ub_title,
        ub_serial_number,
        ub_pseudonym,
        ub_emailaddress_length,
        ub_locality_name,
        ub_common_name,
        ub_name,
    ]

class PKIX1_PSS_OAEP_Algorithms_2009:

    _name_  = 'PKIX1-PSS-OAEP-Algorithms-2009'
    _oid_   = [1, 3, 6, 1, 5, 5, 7, 0, 54]
    
    _obj_ = [
        'PublicKeys',
        'SignatureAlgs',
        'KeyTransportAlgs',
        'HashAlgs',
        'SMimeCaps',
        'pk-rsaSSA-PSS',
        'sa-rsaSSA-PSS',
        'sa-sha224WithRSAEncryption',
        'sha224WithRSAEncryption',
        'sa-sha256WithRSAEncryption',
        'sha256WithRSAEncryption',
        'sa-sha384WithRSAEncryption',
        'sha384WithRSAEncryption',
        'sa-sha512WithRSAEncryption',
        'sha512WithRSAEncryption',
        'pk-rsaES-OAEP',
        'kta-rsaES-OAEP',
        'pkcs-1',
        'id-RSAES-OAEP',
        'id-mgf1',
        'id-pSpecified',
        'id-RSASSA-PSS',
        'id-sha224',
        'mda-sha224',
        'id-sha256',
        'mda-sha256',
        'id-sha384',
        'mda-sha384',
        'id-sha512',
        'mda-sha512',
        'EncodingParameters',
        'nullOctetString',
        'nullParameters',
        'HashAlgorithm',
        'HashAlgorithms',
        'sha1Identifier',
        'MaskGenAlgorithm',
        'mgf1SHA1',
        'PKCS1MGFAlgorithms',
        'PSourceAlgorithm',
        'PSS-SourceAlgorithms',
        'pSpecifiedEmpty',
        'RSASSA-PSS-params',
        'RSAES-OAEP-params',
        ]
    _type_ = [
        'EncodingParameters',
        'HashAlgorithm',
        'MaskGenAlgorithm',
        'PSourceAlgorithm',
        'RSASSA-PSS-params',
        'RSAES-OAEP-params',
        ]
    _set_ = [
        'PublicKeys',
        'SignatureAlgs',
        'KeyTransportAlgs',
        'HashAlgs',
        'SMimeCaps',
        'HashAlgorithms',
        'PKCS1MGFAlgorithms',
        'PSS-SourceAlgorithms',
        ]
    _val_ = [
        'pk-rsaSSA-PSS',
        'sa-rsaSSA-PSS',
        'sa-sha224WithRSAEncryption',
        'sha224WithRSAEncryption',
        'sa-sha256WithRSAEncryption',
        'sha256WithRSAEncryption',
        'sa-sha384WithRSAEncryption',
        'sha384WithRSAEncryption',
        'sa-sha512WithRSAEncryption',
        'sha512WithRSAEncryption',
        'pk-rsaES-OAEP',
        'kta-rsaES-OAEP',
        'pkcs-1',
        'id-RSAES-OAEP',
        'id-mgf1',
        'id-pSpecified',
        'id-RSASSA-PSS',
        'id-sha224',
        'mda-sha224',
        'id-sha256',
        'mda-sha256',
        'id-sha384',
        'mda-sha384',
        'id-sha512',
        'mda-sha512',
        'nullOctetString',
        'nullParameters',
        'sha1Identifier',
        'mgf1SHA1',
        'pSpecifiedEmpty',
        ]
    _class_ = [
        'PublicKeys',
        'SignatureAlgs',
        'KeyTransportAlgs',
        'HashAlgs',
        'SMimeCaps',
        'pk-rsaSSA-PSS',
        'sa-rsaSSA-PSS',
        'sa-sha224WithRSAEncryption',
        'sa-sha256WithRSAEncryption',
        'sa-sha384WithRSAEncryption',
        'sa-sha512WithRSAEncryption',
        'pk-rsaES-OAEP',
        'kta-rsaES-OAEP',
        'mda-sha224',
        'mda-sha256',
        'mda-sha384',
        'mda-sha512',
        'HashAlgorithms',
        'PKCS1MGFAlgorithms',
        'PSS-SourceAlgorithms',
        ]
    _param_ = [
        ]
    
    #-----< PublicKeys >-----#
    PublicKeys = CLASS(name='PublicKeys', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')))
    _PublicKeys_val_KeyValue_0 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    _PublicKeys_val_Params_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    _PublicKeys_val_KeyValue_1 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    _PublicKeys_val_Params_1 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSAES-OAEP-params')))
    PublicKeys._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('KeyValue', _PublicKeys_val_KeyValue_0), ('Params', _PublicKeys_val_Params_0), ('paramPresence', 'optional'), ('keyUsage', (99, 7))]), dict([('id', (1, 2, 840, 113549, 1, 1, 7)), ('KeyValue', _PublicKeys_val_KeyValue_1), ('Params', _PublicKeys_val_Params_1), ('paramPresence', 'optional'), ('keyUsage', (3, 4))])], rr=[], ev=[], er=[])
    
    #-----< SignatureAlgs >-----#
    SignatureAlgs = CLASS(name='SignatureAlgs', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    _SignatureAlgs_val_Params_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    SignatureAlgs._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('Params', _SignatureAlgs_val_Params_0), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1), ('paramPresence', 'optional'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 10))]))])], rr=[], ev=[], er=[])
    
    #-----< KeyTransportAlgs >-----#
    KeyTransportAlgs = CLASS(name='KeyTransportAlgs', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-TRANSPORT')))
    _KeyTransportAlgs_val_Params_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSAES-OAEP-params')))
    __KeyTransportAlgs_PublicKeySet_val_KeyValue_0 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    __KeyTransportAlgs_PublicKeySet_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    __KeyTransportAlgs_PublicKeySet_val_KeyValue_1 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    __KeyTransportAlgs_PublicKeySet_val_Params_1 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSAES-OAEP-params')))
    __KeyTransportAlgs_smimeCaps_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSAES-OAEP-params')))
    KeyTransportAlgs._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 7)), ('Params', _KeyTransportAlgs_val_Params_0), ('paramPresence', 'required'), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', __KeyTransportAlgs_PublicKeySet_val_KeyValue_0), ('Params', __KeyTransportAlgs_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))]), dict([('id', (1, 2, 840, 113549, 1, 1, 7)), ('KeyValue', __KeyTransportAlgs_PublicKeySet_val_KeyValue_1), ('Params', __KeyTransportAlgs_PublicKeySet_val_Params_1), ('paramPresence', 'optional'), ('keyUsage', (3, 4))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('Type', __KeyTransportAlgs_smimeCaps_val_Type), ('id', (1, 2, 840, 113549, 1, 1, 7))]))])], rr=[], ev=[], er=[])
    
    #-----< HashAlgs >-----#
    HashAlgs = CLASS(name='HashAlgs', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    _HashAlgs_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _HashAlgs_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    _HashAlgs_val_Params_2 = NULL(name='Params', mode=MODE_TYPE)
    _HashAlgs_val_Params_3 = NULL(name='Params', mode=MODE_TYPE)
    HashAlgs._val = ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _HashAlgs_val_Params_0), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _HashAlgs_val_Params_1), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _HashAlgs_val_Params_2), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _HashAlgs_val_Params_3), ('paramPresence', 'preferredAbsent')])], rr=[], ev=[], er=[])
    
    #-----< SMimeCaps >-----#
    SMimeCaps = CLASS(name='SMimeCaps', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')))
    _SMimeCaps_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSAES-OAEP-params')))
    SMimeCaps._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 10))]), dict([('Type', _SMimeCaps_val_Type_1), ('id', (1, 2, 840, 113549, 1, 1, 7))])], rr=[], ev=[], er=[])
    
    #-----< pk-rsaSSA-PSS >-----#
    pk_rsaSSA_PSS = CLASS(name='pk-rsaSSA-PSS', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')))
    _pk_rsaSSA_PSS_val_KeyValue = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    _pk_rsaSSA_PSS_val_Params = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    pk_rsaSSA_PSS._val = dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('KeyValue', _pk_rsaSSA_PSS_val_KeyValue), ('Params', _pk_rsaSSA_PSS_val_Params), ('paramPresence', 'optional'), ('keyUsage', (99, 7))])
    
    #-----< sa-rsaSSA-PSS >-----#
    sa_rsaSSA_PSS = CLASS(name='sa-rsaSSA-PSS', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    _sa_rsaSSA_PSS_val_Params = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    sa_rsaSSA_PSS._val = dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('Params', _sa_rsaSSA_PSS_val_Params), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1), ('paramPresence', 'optional'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 10))]))])
    
    #-----< sa-sha224WithRSAEncryption >-----#
    sa_sha224WithRSAEncryption = CLASS(name='sa-sha224WithRSAEncryption', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    _sa_sha224WithRSAEncryption_val_Params = NULL(name='Params', mode=MODE_TYPE)
    sa_sha224WithRSAEncryption._val = dict([('id', (1, 2, 840, 113549, 1, 1, 14)), ('Params', _sa_sha224WithRSAEncryption_val_Params), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 14))]))])
    
    #-----< sha224WithRSAEncryption >-----#
    sha224WithRSAEncryption = OID(name='sha224WithRSAEncryption', mode=MODE_VALUE)
    sha224WithRSAEncryption._val = (1, 2, 840, 113549, 1, 1, 14)
    
    #-----< sa-sha256WithRSAEncryption >-----#
    sa_sha256WithRSAEncryption = CLASS(name='sa-sha256WithRSAEncryption', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    _sa_sha256WithRSAEncryption_val_Params = NULL(name='Params', mode=MODE_TYPE)
    sa_sha256WithRSAEncryption._val = dict([('id', (1, 2, 840, 113549, 1, 1, 11)), ('Params', _sa_sha256WithRSAEncryption_val_Params), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 11))]))])
    
    #-----< sha256WithRSAEncryption >-----#
    sha256WithRSAEncryption = OID(name='sha256WithRSAEncryption', mode=MODE_VALUE)
    sha256WithRSAEncryption._val = (1, 2, 840, 113549, 1, 1, 11)
    
    #-----< sa-sha384WithRSAEncryption >-----#
    sa_sha384WithRSAEncryption = CLASS(name='sa-sha384WithRSAEncryption', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    _sa_sha384WithRSAEncryption_val_Params = NULL(name='Params', mode=MODE_TYPE)
    sa_sha384WithRSAEncryption._val = dict([('id', (1, 2, 840, 113549, 1, 1, 12)), ('Params', _sa_sha384WithRSAEncryption_val_Params), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 12))]))])
    
    #-----< sha384WithRSAEncryption >-----#
    sha384WithRSAEncryption = OID(name='sha384WithRSAEncryption', mode=MODE_VALUE)
    sha384WithRSAEncryption._val = (1, 2, 840, 113549, 1, 1, 12)
    
    #-----< sa-sha512WithRSAEncryption >-----#
    sa_sha512WithRSAEncryption = CLASS(name='sa-sha512WithRSAEncryption', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    _sa_sha512WithRSAEncryption_val_Params = NULL(name='Params', mode=MODE_TYPE)
    sa_sha512WithRSAEncryption._val = dict([('id', (1, 2, 840, 113549, 1, 1, 13)), ('Params', _sa_sha512WithRSAEncryption_val_Params), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 13))]))])
    
    #-----< sha512WithRSAEncryption >-----#
    sha512WithRSAEncryption = OID(name='sha512WithRSAEncryption', mode=MODE_VALUE)
    sha512WithRSAEncryption._val = (1, 2, 840, 113549, 1, 1, 13)
    
    #-----< pk-rsaES-OAEP >-----#
    pk_rsaES_OAEP = CLASS(name='pk-rsaES-OAEP', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')))
    _pk_rsaES_OAEP_val_KeyValue = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    _pk_rsaES_OAEP_val_Params = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSAES-OAEP-params')))
    pk_rsaES_OAEP._val = dict([('id', (1, 2, 840, 113549, 1, 1, 7)), ('KeyValue', _pk_rsaES_OAEP_val_KeyValue), ('Params', _pk_rsaES_OAEP_val_Params), ('paramPresence', 'optional'), ('keyUsage', (3, 4))])
    
    #-----< kta-rsaES-OAEP >-----#
    kta_rsaES_OAEP = CLASS(name='kta-rsaES-OAEP', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-TRANSPORT')))
    _kta_rsaES_OAEP_val_Params = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSAES-OAEP-params')))
    kta_rsaES_OAEP._val = dict([('id', (1, 2, 840, 113549, 1, 1, 7)), ('Params', _kta_rsaES_OAEP_val_Params), ('paramPresence', 'required'), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', __KeyTransportAlgs_PublicKeySet_val_KeyValue_0), ('Params', __KeyTransportAlgs_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))]), dict([('id', (1, 2, 840, 113549, 1, 1, 7)), ('KeyValue', __KeyTransportAlgs_PublicKeySet_val_KeyValue_1), ('Params', __KeyTransportAlgs_PublicKeySet_val_Params_1), ('paramPresence', 'optional'), ('keyUsage', (3, 4))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('Type', __KeyTransportAlgs_smimeCaps_val_Type), ('id', (1, 2, 840, 113549, 1, 1, 7))]))])
    
    #-----< pkcs-1 >-----#
    pkcs_1 = OID(name='pkcs-1', mode=MODE_VALUE)
    pkcs_1._val = (1, 2, 840, 113549, 1, 1)
    
    #-----< id-RSAES-OAEP >-----#
    id_RSAES_OAEP = OID(name='id-RSAES-OAEP', mode=MODE_VALUE)
    id_RSAES_OAEP._val = (1, 2, 840, 113549, 1, 1, 7)
    
    #-----< id-mgf1 >-----#
    id_mgf1 = OID(name='id-mgf1', mode=MODE_VALUE)
    id_mgf1._val = (1, 2, 840, 113549, 1, 1, 8)
    
    #-----< id-pSpecified >-----#
    id_pSpecified = OID(name='id-pSpecified', mode=MODE_VALUE)
    id_pSpecified._val = (1, 2, 840, 113549, 1, 1, 9)
    
    #-----< id-RSASSA-PSS >-----#
    id_RSASSA_PSS = OID(name='id-RSASSA-PSS', mode=MODE_VALUE)
    id_RSASSA_PSS._val = (1, 2, 840, 113549, 1, 1, 10)
    
    #-----< id-sha224 >-----#
    id_sha224 = OID(name='id-sha224', mode=MODE_VALUE)
    id_sha224._val = (2, 16, 840, 1, 101, 3, 4, 2, 4)
    
    #-----< mda-sha224 >-----#
    mda_sha224 = CLASS(name='mda-sha224', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    _mda_sha224_val_Params = NULL(name='Params', mode=MODE_TYPE)
    mda_sha224._val = dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _mda_sha224_val_Params), ('paramPresence', 'preferredAbsent')])
    
    #-----< id-sha256 >-----#
    id_sha256 = OID(name='id-sha256', mode=MODE_VALUE)
    id_sha256._val = (2, 16, 840, 1, 101, 3, 4, 2, 1)
    
    #-----< mda-sha256 >-----#
    mda_sha256 = CLASS(name='mda-sha256', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    _mda_sha256_val_Params = NULL(name='Params', mode=MODE_TYPE)
    mda_sha256._val = dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _mda_sha256_val_Params), ('paramPresence', 'preferredAbsent')])
    
    #-----< id-sha384 >-----#
    id_sha384 = OID(name='id-sha384', mode=MODE_VALUE)
    id_sha384._val = (2, 16, 840, 1, 101, 3, 4, 2, 2)
    
    #-----< mda-sha384 >-----#
    mda_sha384 = CLASS(name='mda-sha384', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    _mda_sha384_val_Params = NULL(name='Params', mode=MODE_TYPE)
    mda_sha384._val = dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _mda_sha384_val_Params), ('paramPresence', 'preferredAbsent')])
    
    #-----< id-sha512 >-----#
    id_sha512 = OID(name='id-sha512', mode=MODE_VALUE)
    id_sha512._val = (2, 16, 840, 1, 101, 3, 4, 2, 3)
    
    #-----< mda-sha512 >-----#
    mda_sha512 = CLASS(name='mda-sha512', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    _mda_sha512_val_Params = NULL(name='Params', mode=MODE_TYPE)
    mda_sha512._val = dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _mda_sha512_val_Params), ('paramPresence', 'preferredAbsent')])
    
    #-----< EncodingParameters >-----#
    EncodingParameters = OCT_STR(name='EncodingParameters', mode=MODE_TYPE)
    EncodingParameters._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    
    #-----< nullOctetString >-----#
    nullOctetString = OCT_STR(name='nullOctetString', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'EncodingParameters')))
    nullOctetString._val = b''
    
    #-----< nullParameters >-----#
    nullParameters = NULL(name='nullParameters', mode=MODE_VALUE)
    nullParameters._val = 0
    
    #-----< HashAlgorithm >-----#
    HashAlgorithm = SEQ(name='HashAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    _HashAlgorithm_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM'), ['id']))
    __HashAlgorithm_algorithm_tab = CLASS(name='_tab_DIGEST-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    ___HashAlgorithm_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ___HashAlgorithm_algorithm_tab_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    ___HashAlgorithm_algorithm_tab_val_Params_2 = NULL(name='Params', mode=MODE_TYPE)
    ___HashAlgorithm_algorithm_tab_val_Params_3 = NULL(name='Params', mode=MODE_TYPE)
    ___HashAlgorithm_algorithm_tab_val_Params_4 = NULL(name='Params', mode=MODE_TYPE)
    __HashAlgorithm_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', ___HashAlgorithm_algorithm_tab_val_Params_0), ('paramPresence', 'preferredPresent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', ___HashAlgorithm_algorithm_tab_val_Params_1), ('paramPresence', 'preferredPresent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', ___HashAlgorithm_algorithm_tab_val_Params_2), ('paramPresence', 'preferredPresent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', ___HashAlgorithm_algorithm_tab_val_Params_3), ('paramPresence', 'preferredPresent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', ___HashAlgorithm_algorithm_tab_val_Params_4), ('paramPresence', 'preferredPresent')])], rr=[], ev=None, er=[])
    _HashAlgorithm_algorithm._const_tab = __HashAlgorithm_algorithm_tab
    _HashAlgorithm_algorithm._const_tab_at = None
    _HashAlgorithm_algorithm._const_tab_id = 'id'
    _HashAlgorithm_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM'), ['Params']), opt=True)
    _HashAlgorithm_parameters._const_tab = __HashAlgorithm_algorithm_tab
    _HashAlgorithm_parameters._const_tab_at = ('..', 'algorithm')
    _HashAlgorithm_parameters._const_tab_id = 'Params'
    HashAlgorithm._cont = ASN1Dict([
        ('algorithm', _HashAlgorithm_algorithm),
        ('parameters', _HashAlgorithm_parameters),
        ])
    HashAlgorithm._ext = None
    
    #-----< HashAlgorithms >-----#
    HashAlgorithms = CLASS(name='HashAlgorithms', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    _HashAlgorithms_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _HashAlgorithms_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    _HashAlgorithms_val_Params_2 = NULL(name='Params', mode=MODE_TYPE)
    _HashAlgorithms_val_Params_3 = NULL(name='Params', mode=MODE_TYPE)
    _HashAlgorithms_val_Params_4 = NULL(name='Params', mode=MODE_TYPE)
    HashAlgorithms._val = ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _HashAlgorithms_val_Params_0), ('paramPresence', 'preferredPresent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _HashAlgorithms_val_Params_1), ('paramPresence', 'preferredPresent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _HashAlgorithms_val_Params_2), ('paramPresence', 'preferredPresent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _HashAlgorithms_val_Params_3), ('paramPresence', 'preferredPresent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _HashAlgorithms_val_Params_4), ('paramPresence', 'preferredPresent')])], rr=[], ev=None, er=[])
    
    #-----< sha1Identifier >-----#
    sha1Identifier = SEQ(name='sha1Identifier', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'HashAlgorithm')))
    _parameters_val = NULL(name='parameters', mode=MODE_TYPE)
    sha1Identifier._val = dict([('algorithm', (1, 3, 14, 3, 2, 26)), ('parameters', (_parameters_val, 0))])
    
    #-----< MaskGenAlgorithm >-----#
    MaskGenAlgorithm = SEQ(name='MaskGenAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    _MaskGenAlgorithm_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'ALGORITHM'), ['id']))
    __MaskGenAlgorithm_algorithm_tab = CLASS(name='_tab_ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ALGORITHM')))
    ___MaskGenAlgorithm_algorithm_tab_val_Params_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'HashAlgorithm')))
    __MaskGenAlgorithm_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 8)), ('Params', ___MaskGenAlgorithm_algorithm_tab_val_Params_0), ('paramPresence', 'required')])], rr=[], ev=None, er=[])
    _MaskGenAlgorithm_algorithm._const_tab = __MaskGenAlgorithm_algorithm_tab
    _MaskGenAlgorithm_algorithm._const_tab_at = None
    _MaskGenAlgorithm_algorithm._const_tab_id = 'id'
    _MaskGenAlgorithm_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'ALGORITHM'), ['Params']), opt=True)
    _MaskGenAlgorithm_parameters._const_tab = __MaskGenAlgorithm_algorithm_tab
    _MaskGenAlgorithm_parameters._const_tab_at = ('..', 'algorithm')
    _MaskGenAlgorithm_parameters._const_tab_id = 'Params'
    MaskGenAlgorithm._cont = ASN1Dict([
        ('algorithm', _MaskGenAlgorithm_algorithm),
        ('parameters', _MaskGenAlgorithm_parameters),
        ])
    MaskGenAlgorithm._ext = None
    
    #-----< mgf1SHA1 >-----#
    mgf1SHA1 = SEQ(name='mgf1SHA1', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'MaskGenAlgorithm')))
    _parameters_val_0 = SEQ(name='parameters', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'HashAlgorithm')))
    mgf1SHA1._val = dict([('algorithm', (1, 2, 840, 113549, 1, 1, 8)), ('parameters', (_parameters_val_0, dict([('algorithm', (1, 3, 14, 3, 2, 26)), ('parameters', (_parameters_val, 0))])))])
    
    #-----< PKCS1MGFAlgorithms >-----#
    PKCS1MGFAlgorithms = CLASS(name='PKCS1MGFAlgorithms', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ALGORITHM')))
    _PKCS1MGFAlgorithms_val_Params_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'HashAlgorithm')))
    PKCS1MGFAlgorithms._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 8)), ('Params', _PKCS1MGFAlgorithms_val_Params_0), ('paramPresence', 'required')])], rr=[], ev=[], er=[])
    
    #-----< PSourceAlgorithm >-----#
    PSourceAlgorithm = SEQ(name='PSourceAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    _PSourceAlgorithm_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'ALGORITHM'), ['id']))
    __PSourceAlgorithm_algorithm_tab = CLASS(name='_tab_ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ALGORITHM')))
    ___PSourceAlgorithm_algorithm_tab_val_Params_0 = OCT_STR(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'EncodingParameters')))
    __PSourceAlgorithm_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 9)), ('Params', ___PSourceAlgorithm_algorithm_tab_val_Params_0), ('paramPresence', 'required')])], rr=[], ev=None, er=[])
    _PSourceAlgorithm_algorithm._const_tab = __PSourceAlgorithm_algorithm_tab
    _PSourceAlgorithm_algorithm._const_tab_at = None
    _PSourceAlgorithm_algorithm._const_tab_id = 'id'
    _PSourceAlgorithm_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'ALGORITHM'), ['Params']), opt=True)
    _PSourceAlgorithm_parameters._const_tab = __PSourceAlgorithm_algorithm_tab
    _PSourceAlgorithm_parameters._const_tab_at = ('..', 'algorithm')
    _PSourceAlgorithm_parameters._const_tab_id = 'Params'
    PSourceAlgorithm._cont = ASN1Dict([
        ('algorithm', _PSourceAlgorithm_algorithm),
        ('parameters', _PSourceAlgorithm_parameters),
        ])
    PSourceAlgorithm._ext = None
    
    #-----< PSS-SourceAlgorithms >-----#
    PSS_SourceAlgorithms = CLASS(name='PSS-SourceAlgorithms', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ALGORITHM')))
    _PSS_SourceAlgorithms_val_Params_0 = OCT_STR(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'EncodingParameters')))
    PSS_SourceAlgorithms._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 9)), ('Params', _PSS_SourceAlgorithms_val_Params_0), ('paramPresence', 'required')])], rr=[], ev=[], er=[])
    
    #-----< pSpecifiedEmpty >-----#
    pSpecifiedEmpty = SEQ(name='pSpecifiedEmpty', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'PSourceAlgorithm')))
    _parameters_val_1 = OCT_STR(name='parameters', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'EncodingParameters')))
    pSpecifiedEmpty._val = dict([('algorithm', (1, 2, 840, 113549, 1, 1, 9)), ('parameters', (_parameters_val_1, b''))])
    
    #-----< RSASSA-PSS-params >-----#
    RSASSA_PSS_params = SEQ(name='RSASSA-PSS-params', mode=MODE_TYPE)
    _RSASSA_PSS_params_hashAlgorithm = SEQ(name='hashAlgorithm', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'HashAlgorithm')), default=dict([('algorithm', (1, 3, 14, 3, 2, 26)), ('parameters', (_parameters_val, 0))]))
    _RSASSA_PSS_params_maskGenAlgorithm = SEQ(name='maskGenAlgorithm', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'MaskGenAlgorithm')), default=dict([('algorithm', (1, 2, 840, 113549, 1, 1, 8)), ('parameters', (_parameters_val_0, dict([('algorithm', (1, 3, 14, 3, 2, 26)), ('parameters', (_parameters_val, 0))])))]))
    _RSASSA_PSS_params_saltLength = INT(name='saltLength', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), default=20)
    _RSASSA_PSS_params_trailerField = INT(name='trailerField', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), default=1)
    RSASSA_PSS_params._cont = ASN1Dict([
        ('hashAlgorithm', _RSASSA_PSS_params_hashAlgorithm),
        ('maskGenAlgorithm', _RSASSA_PSS_params_maskGenAlgorithm),
        ('saltLength', _RSASSA_PSS_params_saltLength),
        ('trailerField', _RSASSA_PSS_params_trailerField),
        ])
    RSASSA_PSS_params._ext = None
    
    #-----< RSAES-OAEP-params >-----#
    RSAES_OAEP_params = SEQ(name='RSAES-OAEP-params', mode=MODE_TYPE)
    _RSAES_OAEP_params_hashFunc = SEQ(name='hashFunc', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'HashAlgorithm')), default=dict([('algorithm', (1, 3, 14, 3, 2, 26)), ('parameters', (_parameters_val, 0))]))
    _RSAES_OAEP_params_maskGenFunc = SEQ(name='maskGenFunc', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'MaskGenAlgorithm')), default=dict([('algorithm', (1, 2, 840, 113549, 1, 1, 8)), ('parameters', (_parameters_val_0, dict([('algorithm', (1, 3, 14, 3, 2, 26)), ('parameters', (_parameters_val, 0))])))]))
    _RSAES_OAEP_params_pSourceFunc = SEQ(name='pSourceFunc', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'PSourceAlgorithm')), default=dict([('algorithm', (1, 2, 840, 113549, 1, 1, 9)), ('parameters', (_parameters_val_1, b''))]))
    RSAES_OAEP_params._cont = ASN1Dict([
        ('hashFunc', _RSAES_OAEP_params_hashFunc),
        ('maskGenFunc', _RSAES_OAEP_params_maskGenFunc),
        ('pSourceFunc', _RSAES_OAEP_params_pSourceFunc),
        ])
    RSAES_OAEP_params._ext = None
    
    _all_ = [
        PublicKeys,
        _PublicKeys_val_KeyValue_0,
        _PublicKeys_val_Params_0,
        _PublicKeys_val_KeyValue_1,
        _PublicKeys_val_Params_1,
        SignatureAlgs,
        _SignatureAlgs_val_Params_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1,
        KeyTransportAlgs,
        _KeyTransportAlgs_val_Params_0,
        __KeyTransportAlgs_PublicKeySet_val_KeyValue_0,
        __KeyTransportAlgs_PublicKeySet_val_Params_0,
        __KeyTransportAlgs_PublicKeySet_val_KeyValue_1,
        __KeyTransportAlgs_PublicKeySet_val_Params_1,
        __KeyTransportAlgs_smimeCaps_val_Type,
        HashAlgs,
        _HashAlgs_val_Params_0,
        _HashAlgs_val_Params_1,
        _HashAlgs_val_Params_2,
        _HashAlgs_val_Params_3,
        SMimeCaps,
        _SMimeCaps_val_Type_1,
        pk_rsaSSA_PSS,
        _pk_rsaSSA_PSS_val_KeyValue,
        _pk_rsaSSA_PSS_val_Params,
        sa_rsaSSA_PSS,
        _sa_rsaSSA_PSS_val_Params,
        sa_sha224WithRSAEncryption,
        _sa_sha224WithRSAEncryption_val_Params,
        sha224WithRSAEncryption,
        sa_sha256WithRSAEncryption,
        _sa_sha256WithRSAEncryption_val_Params,
        sha256WithRSAEncryption,
        sa_sha384WithRSAEncryption,
        _sa_sha384WithRSAEncryption_val_Params,
        sha384WithRSAEncryption,
        sa_sha512WithRSAEncryption,
        _sa_sha512WithRSAEncryption_val_Params,
        sha512WithRSAEncryption,
        pk_rsaES_OAEP,
        _pk_rsaES_OAEP_val_KeyValue,
        _pk_rsaES_OAEP_val_Params,
        kta_rsaES_OAEP,
        _kta_rsaES_OAEP_val_Params,
        pkcs_1,
        id_RSAES_OAEP,
        id_mgf1,
        id_pSpecified,
        id_RSASSA_PSS,
        id_sha224,
        mda_sha224,
        _mda_sha224_val_Params,
        id_sha256,
        mda_sha256,
        _mda_sha256_val_Params,
        id_sha384,
        mda_sha384,
        _mda_sha384_val_Params,
        id_sha512,
        mda_sha512,
        _mda_sha512_val_Params,
        EncodingParameters,
        nullOctetString,
        nullParameters,
        __HashAlgorithm_algorithm_tab,
        ___HashAlgorithm_algorithm_tab_val_Params_0,
        ___HashAlgorithm_algorithm_tab_val_Params_1,
        ___HashAlgorithm_algorithm_tab_val_Params_2,
        ___HashAlgorithm_algorithm_tab_val_Params_3,
        ___HashAlgorithm_algorithm_tab_val_Params_4,
        _HashAlgorithm_algorithm,
        _HashAlgorithm_parameters,
        HashAlgorithm,
        HashAlgorithms,
        _HashAlgorithms_val_Params_0,
        _HashAlgorithms_val_Params_1,
        _HashAlgorithms_val_Params_2,
        _HashAlgorithms_val_Params_3,
        _HashAlgorithms_val_Params_4,
        sha1Identifier,
        _parameters_val,
        __MaskGenAlgorithm_algorithm_tab,
        ___MaskGenAlgorithm_algorithm_tab_val_Params_0,
        _MaskGenAlgorithm_algorithm,
        _MaskGenAlgorithm_parameters,
        MaskGenAlgorithm,
        mgf1SHA1,
        _parameters_val_0,
        PKCS1MGFAlgorithms,
        _PKCS1MGFAlgorithms_val_Params_0,
        __PSourceAlgorithm_algorithm_tab,
        ___PSourceAlgorithm_algorithm_tab_val_Params_0,
        _PSourceAlgorithm_algorithm,
        _PSourceAlgorithm_parameters,
        PSourceAlgorithm,
        PSS_SourceAlgorithms,
        _PSS_SourceAlgorithms_val_Params_0,
        pSpecifiedEmpty,
        _parameters_val_1,
        _RSASSA_PSS_params_hashAlgorithm,
        _RSASSA_PSS_params_maskGenAlgorithm,
        _RSASSA_PSS_params_saltLength,
        _RSASSA_PSS_params_trailerField,
        RSASSA_PSS_params,
        _RSAES_OAEP_params_hashFunc,
        _RSAES_OAEP_params_maskGenFunc,
        _RSAES_OAEP_params_pSourceFunc,
        RSAES_OAEP_params,
    ]

class EnrollmentMessageSyntax_2009:

    _name_  = 'EnrollmentMessageSyntax-2009'
    _oid_   = [1, 3, 6, 1, 5, 5, 7, 0, 53]
    
    _obj_ = [
        'CMC-ContentTypes',
        'SignatureAlgs',
        'CMC-UnsignedAtts',
        'id-cmc',
        'id-cct',
        'ct-PKIData',
        'id-cct-PKIData',
        'PKIData',
        'BodyPartID',
        'TaggedAttribute',
        'Cmc-Control-Set',
        'OTHER-REQUEST',
        'OtherRequests',
        'TaggedRequest',
        'TaggedCertificationRequest',
        'AttributeList',
        'CertificationRequest',
        'TaggedContentInfo',
        'OTHER-MSG',
        'OtherMsgSet',
        'OtherMsg',
        'ct-PKIResponse',
        'id-cct-PKIResponse',
        'ResponseBody',
        'PKIResponse',
        'CMC-CONTROL',
        'cmc-identityProof',
        'id-cmc-identityProof',
        'cmc-dataReturn',
        'id-cmc-dataReturn',
        'cmc-regInfo',
        'id-cmc-regInfo',
        'cmc-responseInfo',
        'id-cmc-responseInfo',
        'cmc-queryPending',
        'id-cmc-queryPending',
        'cmc-popLinkRandom',
        'id-cmc-popLinkRandom',
        'cmc-popLinkWitness',
        'id-cmc-popLinkWitness',
        'cmc-identification',
        'id-cmc-identification',
        'cmc-transactionId',
        'id-cmc-transactionId',
        'cmc-senderNonce',
        'id-cmc-senderNonce',
        'cmc-recipientNonce',
        'id-cmc-recipientNonce',
        'cmc-statusInfo',
        'id-cmc-statusInfo',
        'CMCStatusInfo',
        'PendInfo',
        'CMCStatus',
        'CMCFailInfo',
        'cmc-addExtensions',
        'id-cmc-addExtensions',
        'AddExtensions',
        'cmc-encryptedPOP',
        'cmc-decryptedPOP',
        'id-cmc-encryptedPOP',
        'id-cmc-decryptedPOP',
        'EncryptedPOP',
        'POPAlgs',
        'WitnessAlgs',
        'DecryptedPOP',
        'cmc-lraPOPWitness',
        'id-cmc-lraPOPWitness',
        'LraPopWitness',
        'cmc-getCert',
        'id-cmc-getCert',
        'GetCert',
        'cmc-getCRL',
        'id-cmc-getCRL',
        'GetCRL',
        'cmc-revokeRequest',
        'id-cmc-revokeRequest',
        'RevokeRequest',
        'cmc-confirmCertAcceptance',
        'id-cmc-confirmCertAcceptance',
        'CMCCertId',
        'at-extension-req',
        'id-ExtensionReq',
        'ExtensionReq',
        'sa-noSignature',
        'id-alg-noSignature',
        'NoSignatureValue',
        'id-aa',
        'aa-cmc-unsignedData',
        'id-aa-cmc-unsignedData',
        'CMCUnsignedData',
        'cmc-statusInfoV2',
        'id-cmc-statusInfoV2',
        'EXTENDED-FAILURE-INFO',
        'ExtendedFailures',
        'CMCStatusInfoV2',
        'BodyPartReference',
        'BodyPartPath',
        'cmc-trustedAnchors',
        'id-cmc-trustedAnchors',
        'PublishTrustAnchors',
        'HashAlgorithms',
        'cmc-authData',
        'id-cmc-authData',
        'AuthPublish',
        'cmc-batchRequests',
        'id-cmc-batchRequests',
        'cmc-batchResponses',
        'id-cmc-batchResponses',
        'BodyPartList',
        'cmc-publishCert',
        'id-cmc-publishCert',
        'CMCPublicationInfo',
        'cmc-modCertTemplate',
        'id-cmc-modCertTemplate',
        'ModCertTemplate',
        'cmc-controlProcessed',
        'id-cmc-controlProcessed',
        'ControlsProcessed',
        'cmc-identityProofV2',
        'id-cmc-identityProofV2',
        'IdentityProofV2',
        'cmc-popLinkWitnessV2',
        'id-cmc-popLinkWitnessV2',
        'PopLinkWitnessV2',
        'KeyDevAlgs',
        ]
    _type_ = [
        'PKIData',
        'BodyPartID',
        'TaggedAttribute',
        'OTHER-REQUEST',
        'TaggedRequest',
        'TaggedCertificationRequest',
        'CertificationRequest',
        'TaggedContentInfo',
        'OTHER-MSG',
        'OtherMsg',
        'ResponseBody',
        'PKIResponse',
        'CMC-CONTROL',
        'CMCStatusInfo',
        'PendInfo',
        'CMCStatus',
        'CMCFailInfo',
        'AddExtensions',
        'EncryptedPOP',
        'DecryptedPOP',
        'LraPopWitness',
        'GetCert',
        'GetCRL',
        'RevokeRequest',
        'CMCCertId',
        'ExtensionReq',
        'NoSignatureValue',
        'CMCUnsignedData',
        'EXTENDED-FAILURE-INFO',
        'CMCStatusInfoV2',
        'BodyPartReference',
        'BodyPartPath',
        'PublishTrustAnchors',
        'AuthPublish',
        'BodyPartList',
        'CMCPublicationInfo',
        'ModCertTemplate',
        'ControlsProcessed',
        'IdentityProofV2',
        'PopLinkWitnessV2',
        ]
    _set_ = [
        'CMC-ContentTypes',
        'SignatureAlgs',
        'CMC-UnsignedAtts',
        'Cmc-Control-Set',
        'OtherRequests',
        'AttributeList',
        'OtherMsgSet',
        'POPAlgs',
        'WitnessAlgs',
        'ExtendedFailures',
        'HashAlgorithms',
        'KeyDevAlgs',
        ]
    _val_ = [
        'id-cmc',
        'id-cct',
        'ct-PKIData',
        'id-cct-PKIData',
        'ct-PKIResponse',
        'id-cct-PKIResponse',
        'cmc-identityProof',
        'id-cmc-identityProof',
        'cmc-dataReturn',
        'id-cmc-dataReturn',
        'cmc-regInfo',
        'id-cmc-regInfo',
        'cmc-responseInfo',
        'id-cmc-responseInfo',
        'cmc-queryPending',
        'id-cmc-queryPending',
        'cmc-popLinkRandom',
        'id-cmc-popLinkRandom',
        'cmc-popLinkWitness',
        'id-cmc-popLinkWitness',
        'cmc-identification',
        'id-cmc-identification',
        'cmc-transactionId',
        'id-cmc-transactionId',
        'cmc-senderNonce',
        'id-cmc-senderNonce',
        'cmc-recipientNonce',
        'id-cmc-recipientNonce',
        'cmc-statusInfo',
        'id-cmc-statusInfo',
        'cmc-addExtensions',
        'id-cmc-addExtensions',
        'cmc-encryptedPOP',
        'cmc-decryptedPOP',
        'id-cmc-encryptedPOP',
        'id-cmc-decryptedPOP',
        'cmc-lraPOPWitness',
        'id-cmc-lraPOPWitness',
        'cmc-getCert',
        'id-cmc-getCert',
        'cmc-getCRL',
        'id-cmc-getCRL',
        'cmc-revokeRequest',
        'id-cmc-revokeRequest',
        'cmc-confirmCertAcceptance',
        'id-cmc-confirmCertAcceptance',
        'at-extension-req',
        'id-ExtensionReq',
        'sa-noSignature',
        'id-alg-noSignature',
        'id-aa',
        'aa-cmc-unsignedData',
        'id-aa-cmc-unsignedData',
        'cmc-statusInfoV2',
        'id-cmc-statusInfoV2',
        'cmc-trustedAnchors',
        'id-cmc-trustedAnchors',
        'cmc-authData',
        'id-cmc-authData',
        'cmc-batchRequests',
        'id-cmc-batchRequests',
        'cmc-batchResponses',
        'id-cmc-batchResponses',
        'cmc-publishCert',
        'id-cmc-publishCert',
        'cmc-modCertTemplate',
        'id-cmc-modCertTemplate',
        'cmc-controlProcessed',
        'id-cmc-controlProcessed',
        'cmc-identityProofV2',
        'id-cmc-identityProofV2',
        'cmc-popLinkWitnessV2',
        'id-cmc-popLinkWitnessV2',
        ]
    _class_ = [
        'CMC-ContentTypes',
        'SignatureAlgs',
        'CMC-UnsignedAtts',
        'ct-PKIData',
        'Cmc-Control-Set',
        'OTHER-REQUEST',
        'OtherRequests',
        'AttributeList',
        'OTHER-MSG',
        'OtherMsgSet',
        'ct-PKIResponse',
        'CMC-CONTROL',
        'cmc-identityProof',
        'cmc-dataReturn',
        'cmc-regInfo',
        'cmc-responseInfo',
        'cmc-queryPending',
        'cmc-popLinkRandom',
        'cmc-popLinkWitness',
        'cmc-identification',
        'cmc-transactionId',
        'cmc-senderNonce',
        'cmc-recipientNonce',
        'cmc-statusInfo',
        'cmc-addExtensions',
        'cmc-encryptedPOP',
        'cmc-decryptedPOP',
        'POPAlgs',
        'WitnessAlgs',
        'cmc-lraPOPWitness',
        'cmc-getCert',
        'cmc-getCRL',
        'cmc-revokeRequest',
        'cmc-confirmCertAcceptance',
        'at-extension-req',
        'sa-noSignature',
        'aa-cmc-unsignedData',
        'cmc-statusInfoV2',
        'EXTENDED-FAILURE-INFO',
        'ExtendedFailures',
        'cmc-trustedAnchors',
        'HashAlgorithms',
        'cmc-authData',
        'cmc-batchRequests',
        'cmc-batchResponses',
        'cmc-publishCert',
        'cmc-modCertTemplate',
        'cmc-controlProcessed',
        'cmc-identityProofV2',
        'cmc-popLinkWitnessV2',
        'KeyDevAlgs',
        ]
    _param_ = [
        ]
    
    #-----< CMC-ContentTypes >-----#
    CMC_ContentTypes = CLASS(name='CMC-ContentTypes', mode=MODE_SET, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE')))
    _CMC_ContentTypes_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'PKIData')))
    _CMC_ContentTypes_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'PKIResponse')))
    CMC_ContentTypes._val = ASN1Set(rv=[dict([('Type', _CMC_ContentTypes_val_Type_0), ('id', (1, 3, 6, 1, 5, 5, 7, 12, 2))]), dict([('Type', _CMC_ContentTypes_val_Type_1), ('id', (1, 3, 6, 1, 5, 5, 7, 12, 3))])], rr=[], ev=[], er=[])
    
    #-----< SignatureAlgs >-----#
    SignatureAlgs = CLASS(name='SignatureAlgs', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    _SignatureAlgs_val_Value_0 = OCT_STR(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'NoSignatureValue')))
    _SignatureAlgs_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    SignatureAlgs._val = ASN1Set(rv=[dict([('id', (1, 3, 6, 1, 5, 5, 7, 6, 2)), ('Value', _SignatureAlgs_val_Value_0), ('Params', _SignatureAlgs_val_Params_0), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[]))])], rr=[], ev=None, er=[])
    
    #-----< CMC-UnsignedAtts >-----#
    CMC_UnsignedAtts = CLASS(name='CMC-UnsignedAtts', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _CMC_UnsignedAtts_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMCUnsignedData')))
    CMC_UnsignedAtts._val = ASN1Set(rv=[dict([('Type', _CMC_UnsignedAtts_val_Type_0), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 34))])], rr=[], ev=None, er=[])
    
    #-----< id-cmc >-----#
    id_cmc = OID(name='id-cmc', mode=MODE_VALUE)
    id_cmc._val = (1, 3, 6, 1, 5, 5, 7, 7)
    
    #-----< id-cct >-----#
    id_cct = OID(name='id-cct', mode=MODE_VALUE)
    id_cct._val = (1, 3, 6, 1, 5, 5, 7, 12)
    
    #-----< ct-PKIData >-----#
    ct_PKIData = CLASS(name='ct-PKIData', mode=MODE_VALUE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE')))
    _ct_PKIData_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'PKIData')))
    ct_PKIData._val = dict([('Type', _ct_PKIData_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 12, 2))])
    
    #-----< id-cct-PKIData >-----#
    id_cct_PKIData = OID(name='id-cct-PKIData', mode=MODE_VALUE)
    id_cct_PKIData._val = (1, 3, 6, 1, 5, 5, 7, 12, 2)
    
    #-----< PKIData >-----#
    PKIData = SEQ(name='PKIData', mode=MODE_TYPE)
    _PKIData_controlSequence = SEQ_OF(name='controlSequence', mode=MODE_TYPE)
    __PKIData_controlSequence__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'TaggedAttribute')))
    _PKIData_controlSequence._cont = __PKIData_controlSequence__item_
    _PKIData_controlSequence._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    _PKIData_reqSequence = SEQ_OF(name='reqSequence', mode=MODE_TYPE)
    __PKIData_reqSequence__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'TaggedRequest')))
    _PKIData_reqSequence._cont = __PKIData_reqSequence__item_
    _PKIData_reqSequence._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    _PKIData_cmsSequence = SEQ_OF(name='cmsSequence', mode=MODE_TYPE)
    __PKIData_cmsSequence__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'TaggedContentInfo')))
    _PKIData_cmsSequence._cont = __PKIData_cmsSequence__item_
    _PKIData_cmsSequence._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    _PKIData_otherMsgSequence = SEQ_OF(name='otherMsgSequence', mode=MODE_TYPE)
    __PKIData_otherMsgSequence__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'OtherMsg')))
    _PKIData_otherMsgSequence._cont = __PKIData_otherMsgSequence__item_
    _PKIData_otherMsgSequence._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    PKIData._cont = ASN1Dict([
        ('controlSequence', _PKIData_controlSequence),
        ('reqSequence', _PKIData_reqSequence),
        ('cmsSequence', _PKIData_cmsSequence),
        ('otherMsgSequence', _PKIData_otherMsgSequence),
        ])
    PKIData._ext = None
    
    #-----< BodyPartID >-----#
    BodyPartID = INT(name='BodyPartID', mode=MODE_TYPE)
    BodyPartID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=4294967295)], ev=None, er=[])
    
    #-----< TaggedAttribute >-----#
    TaggedAttribute = SEQ(name='TaggedAttribute', mode=MODE_TYPE)
    _TaggedAttribute_bodyPartID = INT(name='bodyPartID', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartID')))
    _TaggedAttribute_attrType = OID(name='attrType', mode=MODE_TYPE, typeref=ASN1RefClassField(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL'), ['id']))
    __TaggedAttribute_attrType_tab = CLASS(name='_tab_CMC-CONTROL', mode=MODE_SET, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    ___TaggedAttribute_attrType_tab_val_Type_0 = OCT_STR(name='Type', mode=MODE_TYPE)
    ___TaggedAttribute_attrType_tab_val_Type_1 = OCT_STR(name='Type', mode=MODE_TYPE)
    ___TaggedAttribute_attrType_tab_val_Type_2 = OCT_STR(name='Type', mode=MODE_TYPE)
    ___TaggedAttribute_attrType_tab_val_Type_3 = OCT_STR(name='Type', mode=MODE_TYPE)
    ___TaggedAttribute_attrType_tab_val_Type_4 = OCT_STR(name='Type', mode=MODE_TYPE)
    ___TaggedAttribute_attrType_tab_val_Type_5 = OCT_STR(name='Type', mode=MODE_TYPE)
    ___TaggedAttribute_attrType_tab_val_Type_6 = OCT_STR(name='Type', mode=MODE_TYPE)
    ___TaggedAttribute_attrType_tab_val_Type_7 = STR_UTF8(name='Type', mode=MODE_TYPE)
    ___TaggedAttribute_attrType_tab_val_Type_8 = INT(name='Type', mode=MODE_TYPE)
    ___TaggedAttribute_attrType_tab_val_Type_9 = OCT_STR(name='Type', mode=MODE_TYPE)
    ___TaggedAttribute_attrType_tab_val_Type_10 = OCT_STR(name='Type', mode=MODE_TYPE)
    ___TaggedAttribute_attrType_tab_val_Type_11 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMCStatusInfo')))
    ___TaggedAttribute_attrType_tab_val_Type_12 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'AddExtensions')))
    ___TaggedAttribute_attrType_tab_val_Type_13 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'EncryptedPOP')))
    ___TaggedAttribute_attrType_tab_val_Type_14 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'DecryptedPOP')))
    ___TaggedAttribute_attrType_tab_val_Type_15 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'LraPopWitness')))
    ___TaggedAttribute_attrType_tab_val_Type_16 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'GetCert')))
    ___TaggedAttribute_attrType_tab_val_Type_17 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'GetCRL')))
    ___TaggedAttribute_attrType_tab_val_Type_18 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'RevokeRequest')))
    ___TaggedAttribute_attrType_tab_val_Type_19 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMCCertId')))
    ___TaggedAttribute_attrType_tab_val_Type_20 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMCStatusInfoV2')))
    ___TaggedAttribute_attrType_tab_val_Type_21 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'PublishTrustAnchors')))
    ___TaggedAttribute_attrType_tab_val_Type_22 = INT(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'AuthPublish')))
    ___TaggedAttribute_attrType_tab_val_Type_23 = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartList')))
    ___TaggedAttribute_attrType_tab_val_Type_24 = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartList')))
    ___TaggedAttribute_attrType_tab_val_Type_25 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMCPublicationInfo')))
    ___TaggedAttribute_attrType_tab_val_Type_26 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'ModCertTemplate')))
    ___TaggedAttribute_attrType_tab_val_Type_27 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'ControlsProcessed')))
    ___TaggedAttribute_attrType_tab_val_Type_28 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'IdentityProofV2')))
    ___TaggedAttribute_attrType_tab_val_Type_29 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'PopLinkWitnessV2')))
    __TaggedAttribute_attrType_tab._val = ASN1Set(rv=[dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_0), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 3))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_1), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 4))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_2), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 18))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_3), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 19))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_4), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 21))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_5), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 22))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_6), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 23))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_7), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 2))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_8), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 5))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_9), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 6))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_10), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 7))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_11), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 1))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_12), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 8))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_13), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 9))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_14), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 10))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_15), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 11))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_16), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 15))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_17), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 16))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_18), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 17))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_19), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 24))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_20), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 25))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_21), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 26))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_22), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 27))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_23), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 28))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_24), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 29))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_25), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 30))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_26), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 31))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_27), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 32))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_28), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 33))]), dict([('Type', ___TaggedAttribute_attrType_tab_val_Type_29), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 34))])], rr=[], ev=None, er=[])
    _TaggedAttribute_attrType._const_tab = __TaggedAttribute_attrType_tab
    _TaggedAttribute_attrType._const_tab_at = None
    _TaggedAttribute_attrType._const_tab_id = 'id'
    _TaggedAttribute_attrValues = SET_OF(name='attrValues', mode=MODE_TYPE)
    __TaggedAttribute_attrValues__item_ = OPEN(name='_item_', mode=MODE_TYPE, typeref=ASN1RefClassField(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL'), ['Type']))
    __TaggedAttribute_attrValues__item_._const_tab = __TaggedAttribute_attrType_tab
    __TaggedAttribute_attrValues__item_._const_tab_at = ('..', '..', 'attrType')
    __TaggedAttribute_attrValues__item_._const_tab_id = 'Type'
    _TaggedAttribute_attrValues._cont = __TaggedAttribute_attrValues__item_
    TaggedAttribute._cont = ASN1Dict([
        ('bodyPartID', _TaggedAttribute_bodyPartID),
        ('attrType', _TaggedAttribute_attrType),
        ('attrValues', _TaggedAttribute_attrValues),
        ])
    TaggedAttribute._ext = None
    
    #-----< Cmc-Control-Set >-----#
    Cmc_Control_Set = CLASS(name='Cmc-Control-Set', mode=MODE_SET, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _Cmc_Control_Set_val_Type_0 = OCT_STR(name='Type', mode=MODE_TYPE)
    _Cmc_Control_Set_val_Type_1 = OCT_STR(name='Type', mode=MODE_TYPE)
    _Cmc_Control_Set_val_Type_2 = OCT_STR(name='Type', mode=MODE_TYPE)
    _Cmc_Control_Set_val_Type_3 = OCT_STR(name='Type', mode=MODE_TYPE)
    _Cmc_Control_Set_val_Type_4 = OCT_STR(name='Type', mode=MODE_TYPE)
    _Cmc_Control_Set_val_Type_5 = OCT_STR(name='Type', mode=MODE_TYPE)
    _Cmc_Control_Set_val_Type_6 = OCT_STR(name='Type', mode=MODE_TYPE)
    _Cmc_Control_Set_val_Type_7 = STR_UTF8(name='Type', mode=MODE_TYPE)
    _Cmc_Control_Set_val_Type_8 = INT(name='Type', mode=MODE_TYPE)
    _Cmc_Control_Set_val_Type_9 = OCT_STR(name='Type', mode=MODE_TYPE)
    _Cmc_Control_Set_val_Type_10 = OCT_STR(name='Type', mode=MODE_TYPE)
    _Cmc_Control_Set_val_Type_11 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMCStatusInfo')))
    _Cmc_Control_Set_val_Type_12 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'AddExtensions')))
    _Cmc_Control_Set_val_Type_13 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'EncryptedPOP')))
    _Cmc_Control_Set_val_Type_14 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'DecryptedPOP')))
    _Cmc_Control_Set_val_Type_15 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'LraPopWitness')))
    _Cmc_Control_Set_val_Type_16 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'GetCert')))
    _Cmc_Control_Set_val_Type_17 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'GetCRL')))
    _Cmc_Control_Set_val_Type_18 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'RevokeRequest')))
    _Cmc_Control_Set_val_Type_19 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMCCertId')))
    _Cmc_Control_Set_val_Type_20 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMCStatusInfoV2')))
    _Cmc_Control_Set_val_Type_21 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'PublishTrustAnchors')))
    _Cmc_Control_Set_val_Type_22 = INT(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'AuthPublish')))
    _Cmc_Control_Set_val_Type_23 = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartList')))
    _Cmc_Control_Set_val_Type_24 = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartList')))
    _Cmc_Control_Set_val_Type_25 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMCPublicationInfo')))
    _Cmc_Control_Set_val_Type_26 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'ModCertTemplate')))
    _Cmc_Control_Set_val_Type_27 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'ControlsProcessed')))
    _Cmc_Control_Set_val_Type_28 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'IdentityProofV2')))
    _Cmc_Control_Set_val_Type_29 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'PopLinkWitnessV2')))
    Cmc_Control_Set._val = ASN1Set(rv=[dict([('Type', _Cmc_Control_Set_val_Type_0), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 3))]), dict([('Type', _Cmc_Control_Set_val_Type_1), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 4))]), dict([('Type', _Cmc_Control_Set_val_Type_2), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 18))]), dict([('Type', _Cmc_Control_Set_val_Type_3), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 19))]), dict([('Type', _Cmc_Control_Set_val_Type_4), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 21))]), dict([('Type', _Cmc_Control_Set_val_Type_5), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 22))]), dict([('Type', _Cmc_Control_Set_val_Type_6), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 23))]), dict([('Type', _Cmc_Control_Set_val_Type_7), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 2))]), dict([('Type', _Cmc_Control_Set_val_Type_8), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 5))]), dict([('Type', _Cmc_Control_Set_val_Type_9), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 6))]), dict([('Type', _Cmc_Control_Set_val_Type_10), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 7))]), dict([('Type', _Cmc_Control_Set_val_Type_11), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 1))]), dict([('Type', _Cmc_Control_Set_val_Type_12), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 8))]), dict([('Type', _Cmc_Control_Set_val_Type_13), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 9))]), dict([('Type', _Cmc_Control_Set_val_Type_14), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 10))]), dict([('Type', _Cmc_Control_Set_val_Type_15), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 11))]), dict([('Type', _Cmc_Control_Set_val_Type_16), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 15))]), dict([('Type', _Cmc_Control_Set_val_Type_17), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 16))]), dict([('Type', _Cmc_Control_Set_val_Type_18), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 17))]), dict([('Type', _Cmc_Control_Set_val_Type_19), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 24))]), dict([('Type', _Cmc_Control_Set_val_Type_20), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 25))]), dict([('Type', _Cmc_Control_Set_val_Type_21), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 26))]), dict([('Type', _Cmc_Control_Set_val_Type_22), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 27))]), dict([('Type', _Cmc_Control_Set_val_Type_23), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 28))]), dict([('Type', _Cmc_Control_Set_val_Type_24), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 29))]), dict([('Type', _Cmc_Control_Set_val_Type_25), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 30))]), dict([('Type', _Cmc_Control_Set_val_Type_26), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 31))]), dict([('Type', _Cmc_Control_Set_val_Type_27), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 32))]), dict([('Type', _Cmc_Control_Set_val_Type_28), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 33))]), dict([('Type', _Cmc_Control_Set_val_Type_29), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 34))])], rr=[], ev=[], er=[])
    
    #-----< OTHER-REQUEST >-----#
    OTHER_REQUEST = CLASS(name='OTHER-REQUEST', mode=MODE_TYPE, typeref=ASN1RefType(('_IMPL_', 'TYPE-IDENTIFIER'), []))
    
    #-----< OtherRequests >-----#
    OtherRequests = CLASS(name='OtherRequests', mode=MODE_SET, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'OTHER-REQUEST')))
    OtherRequests._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< TaggedRequest >-----#
    TaggedRequest = CHOICE(name='TaggedRequest', mode=MODE_TYPE)
    _TaggedRequest_tcr = SEQ(name='tcr', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'TaggedCertificationRequest')))
    _TaggedRequest_crm = SEQ(name='crm', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIXCRMF-2009', 'CertReqMsg')))
    _TaggedRequest_orm = SEQ(name='orm', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __TaggedRequest_orm_bodyPartID = INT(name='bodyPartID', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartID')))
    __TaggedRequest_orm_requestMessageType = OID(name='requestMessageType', mode=MODE_TYPE, typeref=ASN1RefClassField(('EnrollmentMessageSyntax-2009', 'OTHER-REQUEST'), ['id']))
    ___TaggedRequest_orm_requestMessageType_tab = CLASS(name='_tab_OTHER-REQUEST', mode=MODE_SET, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'OTHER-REQUEST')))
    ___TaggedRequest_orm_requestMessageType_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TaggedRequest_orm_requestMessageType._const_tab = ___TaggedRequest_orm_requestMessageType_tab
    __TaggedRequest_orm_requestMessageType._const_tab_at = None
    __TaggedRequest_orm_requestMessageType._const_tab_id = 'id'
    __TaggedRequest_orm_requestMessageValue = OPEN(name='requestMessageValue', mode=MODE_TYPE, typeref=ASN1RefClassField(('EnrollmentMessageSyntax-2009', 'OTHER-REQUEST'), ['Type']))
    ___TaggedRequest_orm_requestMessageValue_tab = CLASS(name='_tab_OTHER-REQUEST', mode=MODE_SET, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'OTHER-REQUEST')))
    ___TaggedRequest_orm_requestMessageValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __TaggedRequest_orm_requestMessageValue._const_tab = ___TaggedRequest_orm_requestMessageValue_tab
    __TaggedRequest_orm_requestMessageValue._const_tab_at = ('..', 'requestMessageType')
    __TaggedRequest_orm_requestMessageValue._const_tab_id = 'Type'
    _TaggedRequest_orm._cont = ASN1Dict([
        ('bodyPartID', __TaggedRequest_orm_bodyPartID),
        ('requestMessageType', __TaggedRequest_orm_requestMessageType),
        ('requestMessageValue', __TaggedRequest_orm_requestMessageValue),
        ])
    _TaggedRequest_orm._ext = None
    TaggedRequest._cont = ASN1Dict([
        ('tcr', _TaggedRequest_tcr),
        ('crm', _TaggedRequest_crm),
        ('orm', _TaggedRequest_orm),
        ])
    TaggedRequest._ext = None
    
    #-----< TaggedCertificationRequest >-----#
    TaggedCertificationRequest = SEQ(name='TaggedCertificationRequest', mode=MODE_TYPE)
    _TaggedCertificationRequest_bodyPartID = INT(name='bodyPartID', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartID')))
    _TaggedCertificationRequest_certificationRequest = SEQ(name='certificationRequest', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CertificationRequest')))
    TaggedCertificationRequest._cont = ASN1Dict([
        ('bodyPartID', _TaggedCertificationRequest_bodyPartID),
        ('certificationRequest', _TaggedCertificationRequest_certificationRequest),
        ])
    TaggedCertificationRequest._ext = None
    
    #-----< AttributeList >-----#
    AttributeList = CLASS(name='AttributeList', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _AttributeList_val_Type_0 = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'ExtensionReq')))
    AttributeList._val = ASN1Set(rv=[dict([('Type', _AttributeList_val_Type_0), ('id', (1, 2, 840, 113549, 1, 9, 14))])], rr=[], ev=[], er=[])
    
    #-----< CertificationRequest >-----#
    CertificationRequest = SEQ(name='CertificationRequest', mode=MODE_TYPE)
    _CertificationRequest_certificationRequestInfo = SEQ(name='certificationRequestInfo', mode=MODE_TYPE)
    __CertificationRequest_certificationRequestInfo_version = INT(name='version', mode=MODE_TYPE)
    __CertificationRequest_certificationRequestInfo_subject = CHOICE(name='subject', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'Name')))
    __CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo = SEQ(name='subjectPublicKeyInfo', mode=MODE_TYPE)
    ___CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm = SEQ(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    ____CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'PUBLIC-KEY'), ['id']))
    _____CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab = CLASS(name='_tab_PUBLIC-KEY', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')))
    ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_0 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_1 = INT(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSAPublicKey')))
    ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_1 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Params')))
    ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_2 = INT(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DHPublicKey')))
    ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_2 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DomainParameters')))
    ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_3 = OCT_STR(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'KEA-Params-Id')))
    ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_4 = OCT_STR(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECPoint')))
    ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_4 = CHOICE(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECParameters')))
    ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_5 = OCT_STR(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECPoint')))
    ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_5 = CHOICE(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECParameters')))
    ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_6 = OCT_STR(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECPoint')))
    ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_6 = CHOICE(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECParameters')))
    ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_7 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_7 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_8 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_8 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSAES-OAEP-params')))
    _____CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_0), ('Params', ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))]), dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_1), ('Params', ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_1), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))]), dict([('id', (1, 2, 840, 10046, 2, 1)), ('KeyValue', ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_2), ('Params', ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_2), ('paramPresence', 'inheritable'), ('keyUsage', (19, 9))]), dict([('id', (2, 16, 840, 1, 101, 2, 1, 1, 22)), ('Params', ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_3), ('paramPresence', 'required'), ('keyUsage', (19, 9))])], rr=[], ev=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_4), ('Params', ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_4), ('paramPresence', 'required'), ('keyUsage', (103, 7))]), dict([('id', (1, 3, 132, 1, 12)), ('KeyValue', ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_5), ('Params', ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_5), ('paramPresence', 'required'), ('keyUsage', (19, 9))]), dict([('id', (1, 3, 132, 1, 13)), ('KeyValue', ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_6), ('Params', ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_6), ('paramPresence', 'required'), ('keyUsage', (19, 9))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('KeyValue', ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_7), ('Params', ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_7), ('paramPresence', 'optional'), ('keyUsage', (99, 7))]), dict([('id', (1, 2, 840, 113549, 1, 1, 7)), ('KeyValue', ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_8), ('Params', ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_8), ('paramPresence', 'optional'), ('keyUsage', (3, 4))])], er=[])
    ____CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm._const_tab = _____CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab
    ____CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm._const_tab_at = None
    ____CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm._const_tab_id = 'id'
    ____CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'PUBLIC-KEY'), ['Params']), opt=True)
    ____CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_parameters._const_tab = _____CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab
    ____CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_parameters._const_tab_at = ('..', 'algorithm')
    ____CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_parameters._const_tab_id = 'Params'
    ___CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm._cont = ASN1Dict([
        ('algorithm', ____CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm),
        ('parameters', ____CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_parameters),
        ])
    ___CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm._ext = None
    ___CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_subjectPublicKey = BIT_STR(name='subjectPublicKey', mode=MODE_TYPE)
    __CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo._cont = ASN1Dict([
        ('algorithm', ___CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm),
        ('subjectPublicKey', ___CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_subjectPublicKey),
        ])
    __CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo._ext = None
    __CertificationRequest_certificationRequestInfo_attributes = SET_OF(name='attributes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___CertificationRequest_certificationRequestInfo_attributes__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'AttributeSet')))
    ____CertificationRequest_certificationRequestInfo_attributes__item__type = OID(name='type', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['id']))
    _____CertificationRequest_certificationRequestInfo_attributes__item__type_tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    ______CertificationRequest_certificationRequestInfo_attributes__item__type_tab_val_Type_0 = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'ExtensionReq')))
    _____CertificationRequest_certificationRequestInfo_attributes__item__type_tab._val = ASN1Set(rv=[dict([('Type', ______CertificationRequest_certificationRequestInfo_attributes__item__type_tab_val_Type_0), ('id', (1, 2, 840, 113549, 1, 9, 14))])], rr=[], ev=None, er=[])
    ____CertificationRequest_certificationRequestInfo_attributes__item__type._const_tab = _____CertificationRequest_certificationRequestInfo_attributes__item__type_tab
    ____CertificationRequest_certificationRequestInfo_attributes__item__type._const_tab_at = None
    ____CertificationRequest_certificationRequestInfo_attributes__item__type._const_tab_id = 'id'
    ____CertificationRequest_certificationRequestInfo_attributes__item__values = SET_OF(name='values', mode=MODE_TYPE)
    _____CertificationRequest_certificationRequestInfo_attributes__item__values__item_ = OPEN(name='_item_', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['Type']))
    _____CertificationRequest_certificationRequestInfo_attributes__item__values__item_._const_tab = _____CertificationRequest_certificationRequestInfo_attributes__item__type_tab
    _____CertificationRequest_certificationRequestInfo_attributes__item__values__item_._const_tab_at = ('..', '..', 'type')
    _____CertificationRequest_certificationRequestInfo_attributes__item__values__item_._const_tab_id = 'Type'
    ____CertificationRequest_certificationRequestInfo_attributes__item__values._cont = _____CertificationRequest_certificationRequestInfo_attributes__item__values__item_
    ____CertificationRequest_certificationRequestInfo_attributes__item__values._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    ___CertificationRequest_certificationRequestInfo_attributes__item_._cont = ASN1Dict([
        ('type', ____CertificationRequest_certificationRequestInfo_attributes__item__type),
        ('values', ____CertificationRequest_certificationRequestInfo_attributes__item__values),
        ])
    ___CertificationRequest_certificationRequestInfo_attributes__item_._ext = None
    __CertificationRequest_certificationRequestInfo_attributes._cont = ___CertificationRequest_certificationRequestInfo_attributes__item_
    _CertificationRequest_certificationRequestInfo._cont = ASN1Dict([
        ('version', __CertificationRequest_certificationRequestInfo_version),
        ('subject', __CertificationRequest_certificationRequestInfo_subject),
        ('subjectPublicKeyInfo', __CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo),
        ('attributes', __CertificationRequest_certificationRequestInfo_attributes),
        ])
    _CertificationRequest_certificationRequestInfo._ext = None
    _CertificationRequest_signatureAlgorithm = SEQ(name='signatureAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __CertificationRequest_signatureAlgorithm_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['id']))
    ___CertificationRequest_signatureAlgorithm_algorithm_tab = CLASS(name='_tab_SIGNATURE-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_2 = NULL(name='Params', mode=MODE_TYPE)
    ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_3 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_3 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0 = INT(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSAPublicKey')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Params')))
    ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_4 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_4 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1 = OCT_STR(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECPoint')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1 = CHOICE(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECParameters')))
    ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_5 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_5 = NULL(name='Params', mode=MODE_TYPE)
    ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_6 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DSA-Sig-Value')))
    ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_6 = NULL(name='Params', mode=MODE_TYPE)
    ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_7 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_7 = NULL(name='Params', mode=MODE_TYPE)
    ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_8 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_8 = NULL(name='Params', mode=MODE_TYPE)
    ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_9 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_9 = NULL(name='Params', mode=MODE_TYPE)
    ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_10 = SEQ(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'ECDSA-Sig-Value')))
    ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_10 = NULL(name='Params', mode=MODE_TYPE)
    ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_11 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4 = NULL(name='Params', mode=MODE_TYPE)
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSASSA-PSS-params')))
    ___CertificationRequest_signatureAlgorithm_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 2)), ('Params', ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_0), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 2))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 4)), ('Params', ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_1), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 2, 5)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 5)), ('Params', ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_2), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 5))]))]), dict([('id', (1, 2, 840, 10040, 4, 3)), ('Value', ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_3), ('Params', ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_3), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10040, 4, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 1)), ('Value', ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_4), ('Params', ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_4), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 1))]))])], rr=[], ev=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1)), ('Value', ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_5), ('Params', ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_5), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1))]))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2)), ('Value', ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_6), ('Params', ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_6), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10040, 4, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0), ('paramPresence', 'inheritable'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 1)), ('Value', ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_7), ('Params', ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_7), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 1))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 2)), ('Value', ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_8), ('Params', ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_8), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 2))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 3)), ('Value', ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_9), ('Params', ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_9), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 3))]))]), dict([('id', (1, 2, 840, 10045, 4, 3, 4)), ('Value', ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_10), ('Params', ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_10), ('paramPresence', 'absent'), ('HashSet', ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10045, 2, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1), ('paramPresence', 'required'), ('keyUsage', (103, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 10045, 4, 3, 4))]))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('Params', ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_11), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 4)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 2)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 3)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10)), ('KeyValue', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1), ('paramPresence', 'optional'), ('keyUsage', (99, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 10))]))])], er=[])
    __CertificationRequest_signatureAlgorithm_algorithm._const_tab = ___CertificationRequest_signatureAlgorithm_algorithm_tab
    __CertificationRequest_signatureAlgorithm_algorithm._const_tab_at = None
    __CertificationRequest_signatureAlgorithm_algorithm._const_tab_id = 'id'
    __CertificationRequest_signatureAlgorithm_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['Params']), opt=True)
    __CertificationRequest_signatureAlgorithm_parameters._const_tab = ___CertificationRequest_signatureAlgorithm_algorithm_tab
    __CertificationRequest_signatureAlgorithm_parameters._const_tab_at = ('..', 'algorithm')
    __CertificationRequest_signatureAlgorithm_parameters._const_tab_id = 'Params'
    _CertificationRequest_signatureAlgorithm._cont = ASN1Dict([
        ('algorithm', __CertificationRequest_signatureAlgorithm_algorithm),
        ('parameters', __CertificationRequest_signatureAlgorithm_parameters),
        ])
    _CertificationRequest_signatureAlgorithm._ext = None
    _CertificationRequest_signature = BIT_STR(name='signature', mode=MODE_TYPE)
    CertificationRequest._cont = ASN1Dict([
        ('certificationRequestInfo', _CertificationRequest_certificationRequestInfo),
        ('signatureAlgorithm', _CertificationRequest_signatureAlgorithm),
        ('signature', _CertificationRequest_signature),
        ])
    CertificationRequest._ext = None
    
    #-----< TaggedContentInfo >-----#
    TaggedContentInfo = SEQ(name='TaggedContentInfo', mode=MODE_TYPE)
    _TaggedContentInfo_bodyPartID = INT(name='bodyPartID', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartID')))
    _TaggedContentInfo_contentInfo = SEQ(name='contentInfo', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'ContentInfo')))
    TaggedContentInfo._cont = ASN1Dict([
        ('bodyPartID', _TaggedContentInfo_bodyPartID),
        ('contentInfo', _TaggedContentInfo_contentInfo),
        ])
    TaggedContentInfo._ext = None
    
    #-----< OTHER-MSG >-----#
    OTHER_MSG = CLASS(name='OTHER-MSG', mode=MODE_TYPE, typeref=ASN1RefType(('_IMPL_', 'TYPE-IDENTIFIER'), []))
    
    #-----< OtherMsgSet >-----#
    OtherMsgSet = CLASS(name='OtherMsgSet', mode=MODE_SET, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'OTHER-MSG')))
    OtherMsgSet._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< OtherMsg >-----#
    OtherMsg = SEQ(name='OtherMsg', mode=MODE_TYPE)
    _OtherMsg_bodyPartID = INT(name='bodyPartID', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartID')))
    _OtherMsg_otherMsgType = OID(name='otherMsgType', mode=MODE_TYPE, typeref=ASN1RefClassField(('EnrollmentMessageSyntax-2009', 'OTHER-MSG'), ['id']))
    __OtherMsg_otherMsgType_tab = CLASS(name='_tab_OTHER-MSG', mode=MODE_SET, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'OTHER-MSG')))
    __OtherMsg_otherMsgType_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    _OtherMsg_otherMsgType._const_tab = __OtherMsg_otherMsgType_tab
    _OtherMsg_otherMsgType._const_tab_at = None
    _OtherMsg_otherMsgType._const_tab_id = 'id'
    _OtherMsg_otherMsgValue = OPEN(name='otherMsgValue', mode=MODE_TYPE, typeref=ASN1RefClassField(('EnrollmentMessageSyntax-2009', 'OTHER-MSG'), ['Type']))
    __OtherMsg_otherMsgValue_tab = CLASS(name='_tab_OTHER-MSG', mode=MODE_SET, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'OTHER-MSG')))
    __OtherMsg_otherMsgValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    _OtherMsg_otherMsgValue._const_tab = __OtherMsg_otherMsgValue_tab
    _OtherMsg_otherMsgValue._const_tab_at = ('..', 'otherMsgType')
    _OtherMsg_otherMsgValue._const_tab_id = 'Type'
    OtherMsg._cont = ASN1Dict([
        ('bodyPartID', _OtherMsg_bodyPartID),
        ('otherMsgType', _OtherMsg_otherMsgType),
        ('otherMsgValue', _OtherMsg_otherMsgValue),
        ])
    OtherMsg._ext = None
    
    #-----< ct-PKIResponse >-----#
    ct_PKIResponse = CLASS(name='ct-PKIResponse', mode=MODE_VALUE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE')))
    _ct_PKIResponse_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'PKIResponse')))
    ct_PKIResponse._val = dict([('Type', _ct_PKIResponse_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 12, 3))])
    
    #-----< id-cct-PKIResponse >-----#
    id_cct_PKIResponse = OID(name='id-cct-PKIResponse', mode=MODE_VALUE)
    id_cct_PKIResponse._val = (1, 3, 6, 1, 5, 5, 7, 12, 3)
    
    #-----< ResponseBody >-----#
    ResponseBody = SEQ(name='ResponseBody', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'PKIResponse')))
    
    #-----< PKIResponse >-----#
    PKIResponse = SEQ(name='PKIResponse', mode=MODE_TYPE)
    _PKIResponse_controlSequence = SEQ_OF(name='controlSequence', mode=MODE_TYPE)
    __PKIResponse_controlSequence__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'TaggedAttribute')))
    _PKIResponse_controlSequence._cont = __PKIResponse_controlSequence__item_
    _PKIResponse_controlSequence._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    _PKIResponse_cmsSequence = SEQ_OF(name='cmsSequence', mode=MODE_TYPE)
    __PKIResponse_cmsSequence__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'TaggedContentInfo')))
    _PKIResponse_cmsSequence._cont = __PKIResponse_cmsSequence__item_
    _PKIResponse_cmsSequence._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    _PKIResponse_otherMsgSequence = SEQ_OF(name='otherMsgSequence', mode=MODE_TYPE)
    __PKIResponse_otherMsgSequence__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'OtherMsg')))
    _PKIResponse_otherMsgSequence._cont = __PKIResponse_otherMsgSequence__item_
    _PKIResponse_otherMsgSequence._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    PKIResponse._cont = ASN1Dict([
        ('controlSequence', _PKIResponse_controlSequence),
        ('cmsSequence', _PKIResponse_cmsSequence),
        ('otherMsgSequence', _PKIResponse_otherMsgSequence),
        ])
    PKIResponse._ext = None
    
    #-----< CMC-CONTROL >-----#
    CMC_CONTROL = CLASS(name='CMC-CONTROL', mode=MODE_TYPE, typeref=ASN1RefType(('_IMPL_', 'TYPE-IDENTIFIER'), []))
    
    #-----< cmc-identityProof >-----#
    cmc_identityProof = CLASS(name='cmc-identityProof', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_identityProof_val_Type = OCT_STR(name='Type', mode=MODE_TYPE)
    cmc_identityProof._val = dict([('Type', _cmc_identityProof_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 3))])
    
    #-----< id-cmc-identityProof >-----#
    id_cmc_identityProof = OID(name='id-cmc-identityProof', mode=MODE_VALUE)
    id_cmc_identityProof._val = (1, 3, 6, 1, 5, 5, 7, 7, 3)
    
    #-----< cmc-dataReturn >-----#
    cmc_dataReturn = CLASS(name='cmc-dataReturn', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_dataReturn_val_Type = OCT_STR(name='Type', mode=MODE_TYPE)
    cmc_dataReturn._val = dict([('Type', _cmc_dataReturn_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 4))])
    
    #-----< id-cmc-dataReturn >-----#
    id_cmc_dataReturn = OID(name='id-cmc-dataReturn', mode=MODE_VALUE)
    id_cmc_dataReturn._val = (1, 3, 6, 1, 5, 5, 7, 7, 4)
    
    #-----< cmc-regInfo >-----#
    cmc_regInfo = CLASS(name='cmc-regInfo', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_regInfo_val_Type = OCT_STR(name='Type', mode=MODE_TYPE)
    cmc_regInfo._val = dict([('Type', _cmc_regInfo_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 18))])
    
    #-----< id-cmc-regInfo >-----#
    id_cmc_regInfo = OID(name='id-cmc-regInfo', mode=MODE_VALUE)
    id_cmc_regInfo._val = (1, 3, 6, 1, 5, 5, 7, 7, 18)
    
    #-----< cmc-responseInfo >-----#
    cmc_responseInfo = CLASS(name='cmc-responseInfo', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_responseInfo_val_Type = OCT_STR(name='Type', mode=MODE_TYPE)
    cmc_responseInfo._val = dict([('Type', _cmc_responseInfo_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 19))])
    
    #-----< id-cmc-responseInfo >-----#
    id_cmc_responseInfo = OID(name='id-cmc-responseInfo', mode=MODE_VALUE)
    id_cmc_responseInfo._val = (1, 3, 6, 1, 5, 5, 7, 7, 19)
    
    #-----< cmc-queryPending >-----#
    cmc_queryPending = CLASS(name='cmc-queryPending', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_queryPending_val_Type = OCT_STR(name='Type', mode=MODE_TYPE)
    cmc_queryPending._val = dict([('Type', _cmc_queryPending_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 21))])
    
    #-----< id-cmc-queryPending >-----#
    id_cmc_queryPending = OID(name='id-cmc-queryPending', mode=MODE_VALUE)
    id_cmc_queryPending._val = (1, 3, 6, 1, 5, 5, 7, 7, 21)
    
    #-----< cmc-popLinkRandom >-----#
    cmc_popLinkRandom = CLASS(name='cmc-popLinkRandom', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_popLinkRandom_val_Type = OCT_STR(name='Type', mode=MODE_TYPE)
    cmc_popLinkRandom._val = dict([('Type', _cmc_popLinkRandom_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 22))])
    
    #-----< id-cmc-popLinkRandom >-----#
    id_cmc_popLinkRandom = OID(name='id-cmc-popLinkRandom', mode=MODE_VALUE)
    id_cmc_popLinkRandom._val = (1, 3, 6, 1, 5, 5, 7, 7, 22)
    
    #-----< cmc-popLinkWitness >-----#
    cmc_popLinkWitness = CLASS(name='cmc-popLinkWitness', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_popLinkWitness_val_Type = OCT_STR(name='Type', mode=MODE_TYPE)
    cmc_popLinkWitness._val = dict([('Type', _cmc_popLinkWitness_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 23))])
    
    #-----< id-cmc-popLinkWitness >-----#
    id_cmc_popLinkWitness = OID(name='id-cmc-popLinkWitness', mode=MODE_VALUE)
    id_cmc_popLinkWitness._val = (1, 3, 6, 1, 5, 5, 7, 7, 23)
    
    #-----< cmc-identification >-----#
    cmc_identification = CLASS(name='cmc-identification', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_identification_val_Type = STR_UTF8(name='Type', mode=MODE_TYPE)
    cmc_identification._val = dict([('Type', _cmc_identification_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 2))])
    
    #-----< id-cmc-identification >-----#
    id_cmc_identification = OID(name='id-cmc-identification', mode=MODE_VALUE)
    id_cmc_identification._val = (1, 3, 6, 1, 5, 5, 7, 7, 2)
    
    #-----< cmc-transactionId >-----#
    cmc_transactionId = CLASS(name='cmc-transactionId', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_transactionId_val_Type = INT(name='Type', mode=MODE_TYPE)
    cmc_transactionId._val = dict([('Type', _cmc_transactionId_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 5))])
    
    #-----< id-cmc-transactionId >-----#
    id_cmc_transactionId = OID(name='id-cmc-transactionId', mode=MODE_VALUE)
    id_cmc_transactionId._val = (1, 3, 6, 1, 5, 5, 7, 7, 5)
    
    #-----< cmc-senderNonce >-----#
    cmc_senderNonce = CLASS(name='cmc-senderNonce', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_senderNonce_val_Type = OCT_STR(name='Type', mode=MODE_TYPE)
    cmc_senderNonce._val = dict([('Type', _cmc_senderNonce_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 6))])
    
    #-----< id-cmc-senderNonce >-----#
    id_cmc_senderNonce = OID(name='id-cmc-senderNonce', mode=MODE_VALUE)
    id_cmc_senderNonce._val = (1, 3, 6, 1, 5, 5, 7, 7, 6)
    
    #-----< cmc-recipientNonce >-----#
    cmc_recipientNonce = CLASS(name='cmc-recipientNonce', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_recipientNonce_val_Type = OCT_STR(name='Type', mode=MODE_TYPE)
    cmc_recipientNonce._val = dict([('Type', _cmc_recipientNonce_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 7))])
    
    #-----< id-cmc-recipientNonce >-----#
    id_cmc_recipientNonce = OID(name='id-cmc-recipientNonce', mode=MODE_VALUE)
    id_cmc_recipientNonce._val = (1, 3, 6, 1, 5, 5, 7, 7, 7)
    
    #-----< cmc-statusInfo >-----#
    cmc_statusInfo = CLASS(name='cmc-statusInfo', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_statusInfo_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMCStatusInfo')))
    cmc_statusInfo._val = dict([('Type', _cmc_statusInfo_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 1))])
    
    #-----< id-cmc-statusInfo >-----#
    id_cmc_statusInfo = OID(name='id-cmc-statusInfo', mode=MODE_VALUE)
    id_cmc_statusInfo._val = (1, 3, 6, 1, 5, 5, 7, 7, 1)
    
    #-----< CMCStatusInfo >-----#
    CMCStatusInfo = SEQ(name='CMCStatusInfo', mode=MODE_TYPE)
    _CMCStatusInfo_cMCStatus = INT(name='cMCStatus', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMCStatus')))
    _CMCStatusInfo_bodyList = SEQ_OF(name='bodyList', mode=MODE_TYPE)
    __CMCStatusInfo_bodyList__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartID')))
    _CMCStatusInfo_bodyList._cont = __CMCStatusInfo_bodyList__item_
    _CMCStatusInfo_bodyList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    _CMCStatusInfo_statusString = STR_UTF8(name='statusString', mode=MODE_TYPE, opt=True)
    _CMCStatusInfo_otherInfo = CHOICE(name='otherInfo', mode=MODE_TYPE, opt=True)
    __CMCStatusInfo_otherInfo_failInfo = INT(name='failInfo', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMCFailInfo')))
    __CMCStatusInfo_otherInfo_pendInfo = SEQ(name='pendInfo', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'PendInfo')))
    _CMCStatusInfo_otherInfo._cont = ASN1Dict([
        ('failInfo', __CMCStatusInfo_otherInfo_failInfo),
        ('pendInfo', __CMCStatusInfo_otherInfo_pendInfo),
        ])
    _CMCStatusInfo_otherInfo._ext = None
    CMCStatusInfo._cont = ASN1Dict([
        ('cMCStatus', _CMCStatusInfo_cMCStatus),
        ('bodyList', _CMCStatusInfo_bodyList),
        ('statusString', _CMCStatusInfo_statusString),
        ('otherInfo', _CMCStatusInfo_otherInfo),
        ])
    CMCStatusInfo._ext = None
    
    #-----< PendInfo >-----#
    PendInfo = SEQ(name='PendInfo', mode=MODE_TYPE)
    _PendInfo_pendToken = OCT_STR(name='pendToken', mode=MODE_TYPE)
    _PendInfo_pendTime = TIME_GEN(name='pendTime', mode=MODE_TYPE)
    PendInfo._cont = ASN1Dict([
        ('pendToken', _PendInfo_pendToken),
        ('pendTime', _PendInfo_pendTime),
        ])
    PendInfo._ext = None
    
    #-----< CMCStatus >-----#
    CMCStatus = INT(name='CMCStatus', mode=MODE_TYPE)
    CMCStatus._cont = ASN1Dict([('success', 0), ('failed', 2), ('pending', 3), ('noSupport', 4), ('confirmRequired', 5), ('popRequired', 6), ('partial', 7)])
    
    #-----< CMCFailInfo >-----#
    CMCFailInfo = INT(name='CMCFailInfo', mode=MODE_TYPE)
    CMCFailInfo._cont = ASN1Dict([('badAlg', 0), ('badMessageCheck', 1), ('badRequest', 2), ('badTime', 3), ('badCertId', 4), ('unsuportedExt', 5), ('mustArchiveKeys', 6), ('badIdentity', 7), ('popRequired', 8), ('popFailed', 9), ('noKeyReuse', 10), ('internalCAError', 11), ('tryLater', 12), ('authDataFail', 13)])
    
    #-----< cmc-addExtensions >-----#
    cmc_addExtensions = CLASS(name='cmc-addExtensions', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_addExtensions_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'AddExtensions')))
    cmc_addExtensions._val = dict([('Type', _cmc_addExtensions_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 8))])
    
    #-----< id-cmc-addExtensions >-----#
    id_cmc_addExtensions = OID(name='id-cmc-addExtensions', mode=MODE_VALUE)
    id_cmc_addExtensions._val = (1, 3, 6, 1, 5, 5, 7, 7, 8)
    
    #-----< AddExtensions >-----#
    AddExtensions = SEQ(name='AddExtensions', mode=MODE_TYPE)
    _AddExtensions_pkiDataReference = INT(name='pkiDataReference', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartID')))
    _AddExtensions_certReferences = SEQ_OF(name='certReferences', mode=MODE_TYPE)
    __AddExtensions_certReferences__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartID')))
    _AddExtensions_certReferences._cont = __AddExtensions_certReferences__item_
    _AddExtensions_extensions = SEQ_OF(name='extensions', mode=MODE_TYPE)
    __AddExtensions_extensions__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'Extension')))
    ___AddExtensions_extensions__item__extnID = OID(name='extnID', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'EXTENSION'), ['id']))
    ____AddExtensions_extensions__item__extnID_tab = CLASS(name='_tab_EXTENSION', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_0 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'AuthorityKeyIdentifier')))
    _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_1 = OCT_STR(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'KeyIdentifier')))
    _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_2 = BIT_STR(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'KeyUsage')))
    _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_3 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'PrivateKeyUsagePeriod')))
    _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_4 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CertificatePolicies')))
    _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_5 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'PolicyMappings')))
    _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_6 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_7 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_8 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'SubjectDirectoryAttributes')))
    _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_9 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'BasicConstraints')))
    _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_10 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'NameConstraints')))
    _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_11 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'PolicyConstraints')))
    _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_12 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'ExtKeyUsageSyntax')))
    _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_13 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLDistributionPoints')))
    _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_14 = INT(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'SkipCerts')))
    _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_15 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLDistributionPoints')))
    _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_16 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'AuthorityInfoAccessSyntax')))
    _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_17 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'SubjectInfoAccessSyntax')))
    ____AddExtensions_extensions__item__extnID_tab._val = ASN1Set(rv=[dict([('ExtnType', _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_0), ('id', (2, 5, 29, 35))]), dict([('ExtnType', _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_1), ('id', (2, 5, 29, 14))]), dict([('ExtnType', _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_2), ('id', (2, 5, 29, 15))]), dict([('ExtnType', _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_3), ('id', (2, 5, 29, 16))]), dict([('ExtnType', _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_4), ('id', (2, 5, 29, 32))]), dict([('ExtnType', _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_5), ('id', (2, 5, 29, 33))]), dict([('ExtnType', _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_6), ('id', (2, 5, 29, 17))]), dict([('ExtnType', _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_7), ('id', (2, 5, 29, 18))]), dict([('ExtnType', _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_8), ('id', (2, 5, 29, 9))]), dict([('ExtnType', _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_9), ('id', (2, 5, 29, 19))]), dict([('ExtnType', _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_10), ('id', (2, 5, 29, 30))]), dict([('ExtnType', _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_11), ('id', (2, 5, 29, 36))]), dict([('ExtnType', _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_12), ('id', (2, 5, 29, 37))]), dict([('ExtnType', _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_13), ('id', (2, 5, 29, 31))]), dict([('ExtnType', _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_14), ('id', (2, 5, 29, 54))]), dict([('ExtnType', _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_15), ('id', (2, 5, 29, 46))]), dict([('ExtnType', _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_16), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 1))]), dict([('ExtnType', _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_17), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 11))])], rr=[], ev=None, er=[])
    ___AddExtensions_extensions__item__extnID._const_tab = ____AddExtensions_extensions__item__extnID_tab
    ___AddExtensions_extensions__item__extnID._const_tab_at = None
    ___AddExtensions_extensions__item__extnID._const_tab_id = 'id'
    ___AddExtensions_extensions__item__critical = BOOL(name='critical', mode=MODE_TYPE, default=False)
    ___AddExtensions_extensions__item__extnValue = OCT_STR(name='extnValue', mode=MODE_TYPE)
    ____AddExtensions_extensions__item__extnValue_contain = OPEN(name='_cont_extnValue', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'EXTENSION'), ['ExtnType']))
    ____AddExtensions_extensions__item__extnValue_contain._const_tab = ____AddExtensions_extensions__item__extnID_tab
    ____AddExtensions_extensions__item__extnValue_contain._const_tab_at = ('..', 'extnID')
    ____AddExtensions_extensions__item__extnValue_contain._const_tab_id = 'ExtnType'
    ___AddExtensions_extensions__item__extnValue._const_cont = ____AddExtensions_extensions__item__extnValue_contain
    __AddExtensions_extensions__item_._cont = ASN1Dict([
        ('extnID', ___AddExtensions_extensions__item__extnID),
        ('critical', ___AddExtensions_extensions__item__critical),
        ('extnValue', ___AddExtensions_extensions__item__extnValue),
        ])
    __AddExtensions_extensions__item_._ext = None
    _AddExtensions_extensions._cont = __AddExtensions_extensions__item_
    AddExtensions._cont = ASN1Dict([
        ('pkiDataReference', _AddExtensions_pkiDataReference),
        ('certReferences', _AddExtensions_certReferences),
        ('extensions', _AddExtensions_extensions),
        ])
    AddExtensions._ext = None
    
    #-----< cmc-encryptedPOP >-----#
    cmc_encryptedPOP = CLASS(name='cmc-encryptedPOP', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_encryptedPOP_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'EncryptedPOP')))
    cmc_encryptedPOP._val = dict([('Type', _cmc_encryptedPOP_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 9))])
    
    #-----< cmc-decryptedPOP >-----#
    cmc_decryptedPOP = CLASS(name='cmc-decryptedPOP', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_decryptedPOP_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'DecryptedPOP')))
    cmc_decryptedPOP._val = dict([('Type', _cmc_decryptedPOP_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 10))])
    
    #-----< id-cmc-encryptedPOP >-----#
    id_cmc_encryptedPOP = OID(name='id-cmc-encryptedPOP', mode=MODE_VALUE)
    id_cmc_encryptedPOP._val = (1, 3, 6, 1, 5, 5, 7, 7, 9)
    
    #-----< id-cmc-decryptedPOP >-----#
    id_cmc_decryptedPOP = OID(name='id-cmc-decryptedPOP', mode=MODE_VALUE)
    id_cmc_decryptedPOP._val = (1, 3, 6, 1, 5, 5, 7, 7, 10)
    
    #-----< EncryptedPOP >-----#
    EncryptedPOP = SEQ(name='EncryptedPOP', mode=MODE_TYPE)
    _EncryptedPOP_request = CHOICE(name='request', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'TaggedRequest')))
    _EncryptedPOP_cms = SEQ(name='cms', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'ContentInfo')))
    _EncryptedPOP_thePOPAlgID = SEQ(name='thePOPAlgID', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __EncryptedPOP_thePOPAlgID_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'MAC-ALGORITHM'), ['id']))
    ___EncryptedPOP_thePOPAlgID_algorithm_tab = CLASS(name='_tab_MAC-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'MAC-ALGORITHM')))
    ____EncryptedPOP_thePOPAlgID_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ___EncryptedPOP_thePOPAlgID_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2)), ('Params', ____EncryptedPOP_thePOPAlgID_algorithm_tab_val_Params_0), ('paramPresence', 'preferredAbsent'), ('keyed', True), ('smimeCaps', dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2))]))])], rr=[], ev=None, er=[])
    __EncryptedPOP_thePOPAlgID_algorithm._const_tab = ___EncryptedPOP_thePOPAlgID_algorithm_tab
    __EncryptedPOP_thePOPAlgID_algorithm._const_tab_at = None
    __EncryptedPOP_thePOPAlgID_algorithm._const_tab_id = 'id'
    __EncryptedPOP_thePOPAlgID_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'MAC-ALGORITHM'), ['Params']), opt=True)
    __EncryptedPOP_thePOPAlgID_parameters._const_tab = ___EncryptedPOP_thePOPAlgID_algorithm_tab
    __EncryptedPOP_thePOPAlgID_parameters._const_tab_at = ('..', 'algorithm')
    __EncryptedPOP_thePOPAlgID_parameters._const_tab_id = 'Params'
    _EncryptedPOP_thePOPAlgID._cont = ASN1Dict([
        ('algorithm', __EncryptedPOP_thePOPAlgID_algorithm),
        ('parameters', __EncryptedPOP_thePOPAlgID_parameters),
        ])
    _EncryptedPOP_thePOPAlgID._ext = None
    _EncryptedPOP_witnessAlgID = SEQ(name='witnessAlgID', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __EncryptedPOP_witnessAlgID_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM'), ['id']))
    ___EncryptedPOP_witnessAlgID_algorithm_tab = CLASS(name='_tab_DIGEST-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    ____EncryptedPOP_witnessAlgID_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ___EncryptedPOP_witnessAlgID_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', ____EncryptedPOP_witnessAlgID_algorithm_tab_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])
    __EncryptedPOP_witnessAlgID_algorithm._const_tab = ___EncryptedPOP_witnessAlgID_algorithm_tab
    __EncryptedPOP_witnessAlgID_algorithm._const_tab_at = None
    __EncryptedPOP_witnessAlgID_algorithm._const_tab_id = 'id'
    __EncryptedPOP_witnessAlgID_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM'), ['Params']), opt=True)
    __EncryptedPOP_witnessAlgID_parameters._const_tab = ___EncryptedPOP_witnessAlgID_algorithm_tab
    __EncryptedPOP_witnessAlgID_parameters._const_tab_at = ('..', 'algorithm')
    __EncryptedPOP_witnessAlgID_parameters._const_tab_id = 'Params'
    _EncryptedPOP_witnessAlgID._cont = ASN1Dict([
        ('algorithm', __EncryptedPOP_witnessAlgID_algorithm),
        ('parameters', __EncryptedPOP_witnessAlgID_parameters),
        ])
    _EncryptedPOP_witnessAlgID._ext = None
    _EncryptedPOP_witness = OCT_STR(name='witness', mode=MODE_TYPE)
    EncryptedPOP._cont = ASN1Dict([
        ('request', _EncryptedPOP_request),
        ('cms', _EncryptedPOP_cms),
        ('thePOPAlgID', _EncryptedPOP_thePOPAlgID),
        ('witnessAlgID', _EncryptedPOP_witnessAlgID),
        ('witness', _EncryptedPOP_witness),
        ])
    EncryptedPOP._ext = None
    
    #-----< POPAlgs >-----#
    POPAlgs = CLASS(name='POPAlgs', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'MAC-ALGORITHM')))
    _POPAlgs_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    POPAlgs._val = ASN1Set(rv=[dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2)), ('Params', _POPAlgs_val_Params_0), ('paramPresence', 'preferredAbsent'), ('keyed', True), ('smimeCaps', dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2))]))])], rr=[], ev=[], er=[])
    
    #-----< WitnessAlgs >-----#
    WitnessAlgs = CLASS(name='WitnessAlgs', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    _WitnessAlgs_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    WitnessAlgs._val = ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _WitnessAlgs_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=[], er=[])
    
    #-----< DecryptedPOP >-----#
    DecryptedPOP = SEQ(name='DecryptedPOP', mode=MODE_TYPE)
    _DecryptedPOP_bodyPartID = INT(name='bodyPartID', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartID')))
    _DecryptedPOP_thePOPAlgID = SEQ(name='thePOPAlgID', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __DecryptedPOP_thePOPAlgID_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'MAC-ALGORITHM'), ['id']))
    ___DecryptedPOP_thePOPAlgID_algorithm_tab = CLASS(name='_tab_MAC-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'MAC-ALGORITHM')))
    ____DecryptedPOP_thePOPAlgID_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ___DecryptedPOP_thePOPAlgID_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2)), ('Params', ____DecryptedPOP_thePOPAlgID_algorithm_tab_val_Params_0), ('paramPresence', 'preferredAbsent'), ('keyed', True), ('smimeCaps', dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2))]))])], rr=[], ev=None, er=[])
    __DecryptedPOP_thePOPAlgID_algorithm._const_tab = ___DecryptedPOP_thePOPAlgID_algorithm_tab
    __DecryptedPOP_thePOPAlgID_algorithm._const_tab_at = None
    __DecryptedPOP_thePOPAlgID_algorithm._const_tab_id = 'id'
    __DecryptedPOP_thePOPAlgID_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'MAC-ALGORITHM'), ['Params']), opt=True)
    __DecryptedPOP_thePOPAlgID_parameters._const_tab = ___DecryptedPOP_thePOPAlgID_algorithm_tab
    __DecryptedPOP_thePOPAlgID_parameters._const_tab_at = ('..', 'algorithm')
    __DecryptedPOP_thePOPAlgID_parameters._const_tab_id = 'Params'
    _DecryptedPOP_thePOPAlgID._cont = ASN1Dict([
        ('algorithm', __DecryptedPOP_thePOPAlgID_algorithm),
        ('parameters', __DecryptedPOP_thePOPAlgID_parameters),
        ])
    _DecryptedPOP_thePOPAlgID._ext = None
    _DecryptedPOP_thePOP = OCT_STR(name='thePOP', mode=MODE_TYPE)
    DecryptedPOP._cont = ASN1Dict([
        ('bodyPartID', _DecryptedPOP_bodyPartID),
        ('thePOPAlgID', _DecryptedPOP_thePOPAlgID),
        ('thePOP', _DecryptedPOP_thePOP),
        ])
    DecryptedPOP._ext = None
    
    #-----< cmc-lraPOPWitness >-----#
    cmc_lraPOPWitness = CLASS(name='cmc-lraPOPWitness', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_lraPOPWitness_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'LraPopWitness')))
    cmc_lraPOPWitness._val = dict([('Type', _cmc_lraPOPWitness_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 11))])
    
    #-----< id-cmc-lraPOPWitness >-----#
    id_cmc_lraPOPWitness = OID(name='id-cmc-lraPOPWitness', mode=MODE_VALUE)
    id_cmc_lraPOPWitness._val = (1, 3, 6, 1, 5, 5, 7, 7, 11)
    
    #-----< LraPopWitness >-----#
    LraPopWitness = SEQ(name='LraPopWitness', mode=MODE_TYPE)
    _LraPopWitness_pkiDataBodyid = INT(name='pkiDataBodyid', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartID')))
    _LraPopWitness_bodyIds = SEQ_OF(name='bodyIds', mode=MODE_TYPE)
    __LraPopWitness_bodyIds__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartID')))
    _LraPopWitness_bodyIds._cont = __LraPopWitness_bodyIds__item_
    LraPopWitness._cont = ASN1Dict([
        ('pkiDataBodyid', _LraPopWitness_pkiDataBodyid),
        ('bodyIds', _LraPopWitness_bodyIds),
        ])
    LraPopWitness._ext = None
    
    #-----< cmc-getCert >-----#
    cmc_getCert = CLASS(name='cmc-getCert', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_getCert_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'GetCert')))
    cmc_getCert._val = dict([('Type', _cmc_getCert_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 15))])
    
    #-----< id-cmc-getCert >-----#
    id_cmc_getCert = OID(name='id-cmc-getCert', mode=MODE_VALUE)
    id_cmc_getCert._val = (1, 3, 6, 1, 5, 5, 7, 7, 15)
    
    #-----< GetCert >-----#
    GetCert = SEQ(name='GetCert', mode=MODE_TYPE)
    _GetCert_issuerName = CHOICE(name='issuerName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    _GetCert_serialNumber = INT(name='serialNumber', mode=MODE_TYPE)
    GetCert._cont = ASN1Dict([
        ('issuerName', _GetCert_issuerName),
        ('serialNumber', _GetCert_serialNumber),
        ])
    GetCert._ext = None
    
    #-----< cmc-getCRL >-----#
    cmc_getCRL = CLASS(name='cmc-getCRL', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_getCRL_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'GetCRL')))
    cmc_getCRL._val = dict([('Type', _cmc_getCRL_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 16))])
    
    #-----< id-cmc-getCRL >-----#
    id_cmc_getCRL = OID(name='id-cmc-getCRL', mode=MODE_VALUE)
    id_cmc_getCRL._val = (1, 3, 6, 1, 5, 5, 7, 7, 16)
    
    #-----< GetCRL >-----#
    GetCRL = SEQ(name='GetCRL', mode=MODE_TYPE)
    _GetCRL_issuerName = CHOICE(name='issuerName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'Name')))
    _GetCRL_cRLName = CHOICE(name='cRLName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')), opt=True)
    _GetCRL_time = TIME_GEN(name='time', mode=MODE_TYPE, opt=True)
    _GetCRL_reasons = BIT_STR(name='reasons', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'ReasonFlags')), opt=True)
    GetCRL._cont = ASN1Dict([
        ('issuerName', _GetCRL_issuerName),
        ('cRLName', _GetCRL_cRLName),
        ('time', _GetCRL_time),
        ('reasons', _GetCRL_reasons),
        ])
    GetCRL._ext = None
    
    #-----< cmc-revokeRequest >-----#
    cmc_revokeRequest = CLASS(name='cmc-revokeRequest', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_revokeRequest_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'RevokeRequest')))
    cmc_revokeRequest._val = dict([('Type', _cmc_revokeRequest_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 17))])
    
    #-----< id-cmc-revokeRequest >-----#
    id_cmc_revokeRequest = OID(name='id-cmc-revokeRequest', mode=MODE_VALUE)
    id_cmc_revokeRequest._val = (1, 3, 6, 1, 5, 5, 7, 7, 17)
    
    #-----< RevokeRequest >-----#
    RevokeRequest = SEQ(name='RevokeRequest', mode=MODE_TYPE)
    _RevokeRequest_issuerName = CHOICE(name='issuerName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'Name')))
    _RevokeRequest_serialNumber = INT(name='serialNumber', mode=MODE_TYPE)
    _RevokeRequest_reason = ENUM(name='reason', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLReason')))
    _RevokeRequest_invalidityDate = TIME_GEN(name='invalidityDate', mode=MODE_TYPE, opt=True)
    _RevokeRequest_passphrase = OCT_STR(name='passphrase', mode=MODE_TYPE, opt=True)
    _RevokeRequest_comment = STR_UTF8(name='comment', mode=MODE_TYPE, opt=True)
    RevokeRequest._cont = ASN1Dict([
        ('issuerName', _RevokeRequest_issuerName),
        ('serialNumber', _RevokeRequest_serialNumber),
        ('reason', _RevokeRequest_reason),
        ('invalidityDate', _RevokeRequest_invalidityDate),
        ('passphrase', _RevokeRequest_passphrase),
        ('comment', _RevokeRequest_comment),
        ])
    RevokeRequest._ext = None
    
    #-----< cmc-confirmCertAcceptance >-----#
    cmc_confirmCertAcceptance = CLASS(name='cmc-confirmCertAcceptance', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_confirmCertAcceptance_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMCCertId')))
    cmc_confirmCertAcceptance._val = dict([('Type', _cmc_confirmCertAcceptance_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 24))])
    
    #-----< id-cmc-confirmCertAcceptance >-----#
    id_cmc_confirmCertAcceptance = OID(name='id-cmc-confirmCertAcceptance', mode=MODE_VALUE)
    id_cmc_confirmCertAcceptance._val = (1, 3, 6, 1, 5, 5, 7, 7, 24)
    
    #-----< CMCCertId >-----#
    CMCCertId = SEQ(name='CMCCertId', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'IssuerAndSerialNumber')))
    
    #-----< at-extension-req >-----#
    at_extension_req = CLASS(name='at-extension-req', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _at_extension_req_val_Type = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'ExtensionReq')))
    at_extension_req._val = dict([('Type', _at_extension_req_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 14))])
    
    #-----< id-ExtensionReq >-----#
    id_ExtensionReq = OID(name='id-ExtensionReq', mode=MODE_VALUE)
    id_ExtensionReq._val = (1, 2, 840, 113549, 1, 9, 14)
    
    #-----< ExtensionReq >-----#
    ExtensionReq = SEQ_OF(name='ExtensionReq', mode=MODE_TYPE)
    _ExtensionReq__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'Extension')))
    __ExtensionReq__item__extnID = OID(name='extnID', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'EXTENSION'), ['id']))
    ___ExtensionReq__item__extnID_tab = CLASS(name='_tab_EXTENSION', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'EXTENSION')))
    ____ExtensionReq__item__extnID_tab_val_ExtnType_0 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'AuthorityKeyIdentifier')))
    ____ExtensionReq__item__extnID_tab_val_ExtnType_1 = OCT_STR(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'KeyIdentifier')))
    ____ExtensionReq__item__extnID_tab_val_ExtnType_2 = BIT_STR(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'KeyUsage')))
    ____ExtensionReq__item__extnID_tab_val_ExtnType_3 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'PrivateKeyUsagePeriod')))
    ____ExtensionReq__item__extnID_tab_val_ExtnType_4 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CertificatePolicies')))
    ____ExtensionReq__item__extnID_tab_val_ExtnType_5 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'PolicyMappings')))
    ____ExtensionReq__item__extnID_tab_val_ExtnType_6 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    ____ExtensionReq__item__extnID_tab_val_ExtnType_7 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    ____ExtensionReq__item__extnID_tab_val_ExtnType_8 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'SubjectDirectoryAttributes')))
    ____ExtensionReq__item__extnID_tab_val_ExtnType_9 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'BasicConstraints')))
    ____ExtensionReq__item__extnID_tab_val_ExtnType_10 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'NameConstraints')))
    ____ExtensionReq__item__extnID_tab_val_ExtnType_11 = SEQ(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'PolicyConstraints')))
    ____ExtensionReq__item__extnID_tab_val_ExtnType_12 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'ExtKeyUsageSyntax')))
    ____ExtensionReq__item__extnID_tab_val_ExtnType_13 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLDistributionPoints')))
    ____ExtensionReq__item__extnID_tab_val_ExtnType_14 = INT(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'SkipCerts')))
    ____ExtensionReq__item__extnID_tab_val_ExtnType_15 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'CRLDistributionPoints')))
    ____ExtensionReq__item__extnID_tab_val_ExtnType_16 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'AuthorityInfoAccessSyntax')))
    ____ExtensionReq__item__extnID_tab_val_ExtnType_17 = SEQ_OF(name='ExtnType', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'SubjectInfoAccessSyntax')))
    ___ExtensionReq__item__extnID_tab._val = ASN1Set(rv=[dict([('ExtnType', ____ExtensionReq__item__extnID_tab_val_ExtnType_0), ('id', (2, 5, 29, 35))]), dict([('ExtnType', ____ExtensionReq__item__extnID_tab_val_ExtnType_1), ('id', (2, 5, 29, 14))]), dict([('ExtnType', ____ExtensionReq__item__extnID_tab_val_ExtnType_2), ('id', (2, 5, 29, 15))]), dict([('ExtnType', ____ExtensionReq__item__extnID_tab_val_ExtnType_3), ('id', (2, 5, 29, 16))]), dict([('ExtnType', ____ExtensionReq__item__extnID_tab_val_ExtnType_4), ('id', (2, 5, 29, 32))]), dict([('ExtnType', ____ExtensionReq__item__extnID_tab_val_ExtnType_5), ('id', (2, 5, 29, 33))]), dict([('ExtnType', ____ExtensionReq__item__extnID_tab_val_ExtnType_6), ('id', (2, 5, 29, 17))]), dict([('ExtnType', ____ExtensionReq__item__extnID_tab_val_ExtnType_7), ('id', (2, 5, 29, 18))]), dict([('ExtnType', ____ExtensionReq__item__extnID_tab_val_ExtnType_8), ('id', (2, 5, 29, 9))]), dict([('ExtnType', ____ExtensionReq__item__extnID_tab_val_ExtnType_9), ('id', (2, 5, 29, 19))]), dict([('ExtnType', ____ExtensionReq__item__extnID_tab_val_ExtnType_10), ('id', (2, 5, 29, 30))]), dict([('ExtnType', ____ExtensionReq__item__extnID_tab_val_ExtnType_11), ('id', (2, 5, 29, 36))]), dict([('ExtnType', ____ExtensionReq__item__extnID_tab_val_ExtnType_12), ('id', (2, 5, 29, 37))]), dict([('ExtnType', ____ExtensionReq__item__extnID_tab_val_ExtnType_13), ('id', (2, 5, 29, 31))]), dict([('ExtnType', ____ExtensionReq__item__extnID_tab_val_ExtnType_14), ('id', (2, 5, 29, 54))]), dict([('ExtnType', ____ExtensionReq__item__extnID_tab_val_ExtnType_15), ('id', (2, 5, 29, 46))]), dict([('ExtnType', ____ExtensionReq__item__extnID_tab_val_ExtnType_16), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 1))]), dict([('ExtnType', ____ExtensionReq__item__extnID_tab_val_ExtnType_17), ('id', (1, 3, 6, 1, 5, 5, 7, 1, 11))])], rr=[], ev=None, er=[])
    __ExtensionReq__item__extnID._const_tab = ___ExtensionReq__item__extnID_tab
    __ExtensionReq__item__extnID._const_tab_at = None
    __ExtensionReq__item__extnID._const_tab_id = 'id'
    __ExtensionReq__item__critical = BOOL(name='critical', mode=MODE_TYPE, default=False)
    __ExtensionReq__item__extnValue = OCT_STR(name='extnValue', mode=MODE_TYPE)
    ___ExtensionReq__item__extnValue_contain = OPEN(name='_cont_extnValue', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'EXTENSION'), ['ExtnType']))
    ___ExtensionReq__item__extnValue_contain._const_tab = ___ExtensionReq__item__extnID_tab
    ___ExtensionReq__item__extnValue_contain._const_tab_at = ('..', 'extnID')
    ___ExtensionReq__item__extnValue_contain._const_tab_id = 'ExtnType'
    __ExtensionReq__item__extnValue._const_cont = ___ExtensionReq__item__extnValue_contain
    _ExtensionReq__item_._cont = ASN1Dict([
        ('extnID', __ExtensionReq__item__extnID),
        ('critical', __ExtensionReq__item__critical),
        ('extnValue', __ExtensionReq__item__extnValue),
        ])
    _ExtensionReq__item_._ext = None
    ExtensionReq._cont = _ExtensionReq__item_
    ExtensionReq._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    
    #-----< sa-noSignature >-----#
    sa_noSignature = CLASS(name='sa-noSignature', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    _sa_noSignature_val_Value = OCT_STR(name='Value', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'NoSignatureValue')))
    _sa_noSignature_val_Params = NULL(name='Params', mode=MODE_TYPE)
    sa_noSignature._val = dict([('id', (1, 3, 6, 1, 5, 5, 7, 6, 2)), ('Value', _sa_noSignature_val_Value), ('Params', _sa_noSignature_val_Params), ('paramPresence', 'required'), ('HashSet', ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[]))])
    
    #-----< id-alg-noSignature >-----#
    id_alg_noSignature = OID(name='id-alg-noSignature', mode=MODE_VALUE)
    id_alg_noSignature._val = (1, 3, 6, 1, 5, 5, 7, 6, 2)
    
    #-----< NoSignatureValue >-----#
    NoSignatureValue = OCT_STR(name='NoSignatureValue', mode=MODE_TYPE)
    
    #-----< id-aa >-----#
    id_aa = OID(name='id-aa', mode=MODE_VALUE)
    id_aa._val = (1, 2, 840, 113549, 1, 9, 16, 2)
    
    #-----< aa-cmc-unsignedData >-----#
    aa_cmc_unsignedData = CLASS(name='aa-cmc-unsignedData', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_cmc_unsignedData_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMCUnsignedData')))
    aa_cmc_unsignedData._val = dict([('Type', _aa_cmc_unsignedData_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 34))])
    
    #-----< id-aa-cmc-unsignedData >-----#
    id_aa_cmc_unsignedData = OID(name='id-aa-cmc-unsignedData', mode=MODE_VALUE)
    id_aa_cmc_unsignedData._val = (1, 2, 840, 113549, 1, 9, 16, 2, 34)
    
    #-----< CMCUnsignedData >-----#
    CMCUnsignedData = SEQ(name='CMCUnsignedData', mode=MODE_TYPE)
    _CMCUnsignedData_bodyPartPath = SEQ_OF(name='bodyPartPath', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartPath')))
    _CMCUnsignedData_identifier = OID(name='identifier', mode=MODE_TYPE, typeref=ASN1RefClassField(('_IMPL_', 'TYPE-IDENTIFIER'), ['id']))
    _CMCUnsignedData_content = OPEN(name='content', mode=MODE_TYPE, typeref=ASN1RefClassField(('_IMPL_', 'TYPE-IDENTIFIER'), ['Type']))
    CMCUnsignedData._cont = ASN1Dict([
        ('bodyPartPath', _CMCUnsignedData_bodyPartPath),
        ('identifier', _CMCUnsignedData_identifier),
        ('content', _CMCUnsignedData_content),
        ])
    CMCUnsignedData._ext = None
    
    #-----< cmc-statusInfoV2 >-----#
    cmc_statusInfoV2 = CLASS(name='cmc-statusInfoV2', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_statusInfoV2_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMCStatusInfoV2')))
    cmc_statusInfoV2._val = dict([('Type', _cmc_statusInfoV2_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 25))])
    
    #-----< id-cmc-statusInfoV2 >-----#
    id_cmc_statusInfoV2 = OID(name='id-cmc-statusInfoV2', mode=MODE_VALUE)
    id_cmc_statusInfoV2._val = (1, 3, 6, 1, 5, 5, 7, 7, 25)
    
    #-----< EXTENDED-FAILURE-INFO >-----#
    EXTENDED_FAILURE_INFO = CLASS(name='EXTENDED-FAILURE-INFO', mode=MODE_TYPE, typeref=ASN1RefType(('_IMPL_', 'TYPE-IDENTIFIER'), []))
    
    #-----< ExtendedFailures >-----#
    ExtendedFailures = CLASS(name='ExtendedFailures', mode=MODE_SET, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'EXTENDED-FAILURE-INFO')))
    ExtendedFailures._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< CMCStatusInfoV2 >-----#
    CMCStatusInfoV2 = SEQ(name='CMCStatusInfoV2', mode=MODE_TYPE)
    _CMCStatusInfoV2_cMCStatus = INT(name='cMCStatus', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMCStatus')))
    _CMCStatusInfoV2_bodyList = SEQ_OF(name='bodyList', mode=MODE_TYPE)
    __CMCStatusInfoV2_bodyList__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartReference')))
    _CMCStatusInfoV2_bodyList._cont = __CMCStatusInfoV2_bodyList__item_
    _CMCStatusInfoV2_bodyList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    _CMCStatusInfoV2_statusString = STR_UTF8(name='statusString', mode=MODE_TYPE, opt=True)
    _CMCStatusInfoV2_otherInfo = CHOICE(name='otherInfo', mode=MODE_TYPE, opt=True)
    __CMCStatusInfoV2_otherInfo_failInfo = INT(name='failInfo', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMCFailInfo')))
    __CMCStatusInfoV2_otherInfo_pendInfo = SEQ(name='pendInfo', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'PendInfo')))
    __CMCStatusInfoV2_otherInfo_extendedFailInfo = SEQ(name='extendedFailInfo', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoOID = OID(name='failInfoOID', mode=MODE_TYPE, typeref=ASN1RefClassField(('_IMPL_', 'TYPE-IDENTIFIER'), ['id']))
    ____CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoOID_tab = CLASS(name='TYPE-IDENTIFIER', mode=MODE_SET)
    _____CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoOID_tab_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    _____CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoOID_tab_Type = OPEN(name='Type', mode=MODE_TYPE)
    ____CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoOID_tab._cont = ASN1Dict([
        ('id', _____CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoOID_tab_id),
        ('Type', _____CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoOID_tab_Type),
        ])
    ____CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoOID_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoOID._const_tab = ____CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoOID_tab
    ___CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoOID._const_tab_at = None
    ___CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoOID._const_tab_id = 'id'
    ___CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoValue = OPEN(name='failInfoValue', mode=MODE_TYPE, typeref=ASN1RefClassField(('_IMPL_', 'TYPE-IDENTIFIER'), ['Type']))
    ____CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoValue_tab = CLASS(name='TYPE-IDENTIFIER', mode=MODE_SET)
    _____CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoValue_tab_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    _____CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoValue_tab_Type = OPEN(name='Type', mode=MODE_TYPE)
    ____CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoValue_tab._cont = ASN1Dict([
        ('id', _____CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoValue_tab_id),
        ('Type', _____CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoValue_tab_Type),
        ])
    ____CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoValue._const_tab = ____CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoValue_tab
    ___CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoValue._const_tab_at = ('..', 'failInfoOID')
    ___CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoValue._const_tab_id = 'Type'
    __CMCStatusInfoV2_otherInfo_extendedFailInfo._cont = ASN1Dict([
        ('failInfoOID', ___CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoOID),
        ('failInfoValue', ___CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoValue),
        ])
    __CMCStatusInfoV2_otherInfo_extendedFailInfo._ext = None
    _CMCStatusInfoV2_otherInfo._cont = ASN1Dict([
        ('failInfo', __CMCStatusInfoV2_otherInfo_failInfo),
        ('pendInfo', __CMCStatusInfoV2_otherInfo_pendInfo),
        ('extendedFailInfo', __CMCStatusInfoV2_otherInfo_extendedFailInfo),
        ])
    _CMCStatusInfoV2_otherInfo._ext = None
    CMCStatusInfoV2._cont = ASN1Dict([
        ('cMCStatus', _CMCStatusInfoV2_cMCStatus),
        ('bodyList', _CMCStatusInfoV2_bodyList),
        ('statusString', _CMCStatusInfoV2_statusString),
        ('otherInfo', _CMCStatusInfoV2_otherInfo),
        ])
    CMCStatusInfoV2._ext = None
    
    #-----< BodyPartReference >-----#
    BodyPartReference = CHOICE(name='BodyPartReference', mode=MODE_TYPE)
    _BodyPartReference_bodyPartID = INT(name='bodyPartID', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartID')))
    _BodyPartReference_bodyPartPath = SEQ_OF(name='bodyPartPath', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartPath')))
    BodyPartReference._cont = ASN1Dict([
        ('bodyPartID', _BodyPartReference_bodyPartID),
        ('bodyPartPath', _BodyPartReference_bodyPartPath),
        ])
    BodyPartReference._ext = None
    
    #-----< BodyPartPath >-----#
    BodyPartPath = SEQ_OF(name='BodyPartPath', mode=MODE_TYPE)
    _BodyPartPath__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartID')))
    BodyPartPath._cont = _BodyPartPath__item_
    BodyPartPath._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    
    #-----< cmc-trustedAnchors >-----#
    cmc_trustedAnchors = CLASS(name='cmc-trustedAnchors', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_trustedAnchors_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'PublishTrustAnchors')))
    cmc_trustedAnchors._val = dict([('Type', _cmc_trustedAnchors_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 26))])
    
    #-----< id-cmc-trustedAnchors >-----#
    id_cmc_trustedAnchors = OID(name='id-cmc-trustedAnchors', mode=MODE_VALUE)
    id_cmc_trustedAnchors._val = (1, 3, 6, 1, 5, 5, 7, 7, 26)
    
    #-----< PublishTrustAnchors >-----#
    PublishTrustAnchors = SEQ(name='PublishTrustAnchors', mode=MODE_TYPE)
    _PublishTrustAnchors_seqNumber = INT(name='seqNumber', mode=MODE_TYPE)
    _PublishTrustAnchors_hashAlgorithm = SEQ(name='hashAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __PublishTrustAnchors_hashAlgorithm_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM'), ['id']))
    ___PublishTrustAnchors_hashAlgorithm_algorithm_tab = CLASS(name='_tab_DIGEST-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    ____PublishTrustAnchors_hashAlgorithm_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ____PublishTrustAnchors_hashAlgorithm_algorithm_tab_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    ___PublishTrustAnchors_hashAlgorithm_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', ____PublishTrustAnchors_hashAlgorithm_algorithm_tab_val_Params_0), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', ____PublishTrustAnchors_hashAlgorithm_algorithm_tab_val_Params_1), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])
    __PublishTrustAnchors_hashAlgorithm_algorithm._const_tab = ___PublishTrustAnchors_hashAlgorithm_algorithm_tab
    __PublishTrustAnchors_hashAlgorithm_algorithm._const_tab_at = None
    __PublishTrustAnchors_hashAlgorithm_algorithm._const_tab_id = 'id'
    __PublishTrustAnchors_hashAlgorithm_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM'), ['Params']), opt=True)
    __PublishTrustAnchors_hashAlgorithm_parameters._const_tab = ___PublishTrustAnchors_hashAlgorithm_algorithm_tab
    __PublishTrustAnchors_hashAlgorithm_parameters._const_tab_at = ('..', 'algorithm')
    __PublishTrustAnchors_hashAlgorithm_parameters._const_tab_id = 'Params'
    _PublishTrustAnchors_hashAlgorithm._cont = ASN1Dict([
        ('algorithm', __PublishTrustAnchors_hashAlgorithm_algorithm),
        ('parameters', __PublishTrustAnchors_hashAlgorithm_parameters),
        ])
    _PublishTrustAnchors_hashAlgorithm._ext = None
    _PublishTrustAnchors_anchorHashes = SEQ_OF(name='anchorHashes', mode=MODE_TYPE)
    __PublishTrustAnchors_anchorHashes__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _PublishTrustAnchors_anchorHashes._cont = __PublishTrustAnchors_anchorHashes__item_
    PublishTrustAnchors._cont = ASN1Dict([
        ('seqNumber', _PublishTrustAnchors_seqNumber),
        ('hashAlgorithm', _PublishTrustAnchors_hashAlgorithm),
        ('anchorHashes', _PublishTrustAnchors_anchorHashes),
        ])
    PublishTrustAnchors._ext = None
    
    #-----< HashAlgorithms >-----#
    HashAlgorithms = CLASS(name='HashAlgorithms', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    _HashAlgorithms_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _HashAlgorithms_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    HashAlgorithms._val = ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', _HashAlgorithms_val_Params_0), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', _HashAlgorithms_val_Params_1), ('paramPresence', 'preferredAbsent')])], rr=[], ev=[], er=[])
    
    #-----< cmc-authData >-----#
    cmc_authData = CLASS(name='cmc-authData', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_authData_val_Type = INT(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'AuthPublish')))
    cmc_authData._val = dict([('Type', _cmc_authData_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 27))])
    
    #-----< id-cmc-authData >-----#
    id_cmc_authData = OID(name='id-cmc-authData', mode=MODE_VALUE)
    id_cmc_authData._val = (1, 3, 6, 1, 5, 5, 7, 7, 27)
    
    #-----< AuthPublish >-----#
    AuthPublish = INT(name='AuthPublish', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartID')))
    
    #-----< cmc-batchRequests >-----#
    cmc_batchRequests = CLASS(name='cmc-batchRequests', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_batchRequests_val_Type = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartList')))
    cmc_batchRequests._val = dict([('Type', _cmc_batchRequests_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 28))])
    
    #-----< id-cmc-batchRequests >-----#
    id_cmc_batchRequests = OID(name='id-cmc-batchRequests', mode=MODE_VALUE)
    id_cmc_batchRequests._val = (1, 3, 6, 1, 5, 5, 7, 7, 28)
    
    #-----< cmc-batchResponses >-----#
    cmc_batchResponses = CLASS(name='cmc-batchResponses', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_batchResponses_val_Type = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartList')))
    cmc_batchResponses._val = dict([('Type', _cmc_batchResponses_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 29))])
    
    #-----< id-cmc-batchResponses >-----#
    id_cmc_batchResponses = OID(name='id-cmc-batchResponses', mode=MODE_VALUE)
    id_cmc_batchResponses._val = (1, 3, 6, 1, 5, 5, 7, 7, 29)
    
    #-----< BodyPartList >-----#
    BodyPartList = SEQ_OF(name='BodyPartList', mode=MODE_TYPE)
    _BodyPartList__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartID')))
    BodyPartList._cont = _BodyPartList__item_
    BodyPartList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    
    #-----< cmc-publishCert >-----#
    cmc_publishCert = CLASS(name='cmc-publishCert', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_publishCert_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMCPublicationInfo')))
    cmc_publishCert._val = dict([('Type', _cmc_publishCert_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 30))])
    
    #-----< id-cmc-publishCert >-----#
    id_cmc_publishCert = OID(name='id-cmc-publishCert', mode=MODE_VALUE)
    id_cmc_publishCert._val = (1, 3, 6, 1, 5, 5, 7, 7, 30)
    
    #-----< CMCPublicationInfo >-----#
    CMCPublicationInfo = SEQ(name='CMCPublicationInfo', mode=MODE_TYPE)
    _CMCPublicationInfo_hashAlg = SEQ(name='hashAlg', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __CMCPublicationInfo_hashAlg_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM'), ['id']))
    ___CMCPublicationInfo_hashAlg_algorithm_tab = CLASS(name='_tab_DIGEST-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    ____CMCPublicationInfo_hashAlg_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ____CMCPublicationInfo_hashAlg_algorithm_tab_val_Params_1 = NULL(name='Params', mode=MODE_TYPE)
    ___CMCPublicationInfo_hashAlg_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', ____CMCPublicationInfo_hashAlg_algorithm_tab_val_Params_0), ('paramPresence', 'preferredAbsent')]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', ____CMCPublicationInfo_hashAlg_algorithm_tab_val_Params_1), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])
    __CMCPublicationInfo_hashAlg_algorithm._const_tab = ___CMCPublicationInfo_hashAlg_algorithm_tab
    __CMCPublicationInfo_hashAlg_algorithm._const_tab_at = None
    __CMCPublicationInfo_hashAlg_algorithm._const_tab_id = 'id'
    __CMCPublicationInfo_hashAlg_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM'), ['Params']), opt=True)
    __CMCPublicationInfo_hashAlg_parameters._const_tab = ___CMCPublicationInfo_hashAlg_algorithm_tab
    __CMCPublicationInfo_hashAlg_parameters._const_tab_at = ('..', 'algorithm')
    __CMCPublicationInfo_hashAlg_parameters._const_tab_id = 'Params'
    _CMCPublicationInfo_hashAlg._cont = ASN1Dict([
        ('algorithm', __CMCPublicationInfo_hashAlg_algorithm),
        ('parameters', __CMCPublicationInfo_hashAlg_parameters),
        ])
    _CMCPublicationInfo_hashAlg._ext = None
    _CMCPublicationInfo_certHashes = SEQ_OF(name='certHashes', mode=MODE_TYPE)
    __CMCPublicationInfo_certHashes__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _CMCPublicationInfo_certHashes._cont = __CMCPublicationInfo_certHashes__item_
    _CMCPublicationInfo_pubInfo = SEQ(name='pubInfo', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'PKIPublicationInfo')))
    CMCPublicationInfo._cont = ASN1Dict([
        ('hashAlg', _CMCPublicationInfo_hashAlg),
        ('certHashes', _CMCPublicationInfo_certHashes),
        ('pubInfo', _CMCPublicationInfo_pubInfo),
        ])
    CMCPublicationInfo._ext = None
    
    #-----< cmc-modCertTemplate >-----#
    cmc_modCertTemplate = CLASS(name='cmc-modCertTemplate', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_modCertTemplate_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'ModCertTemplate')))
    cmc_modCertTemplate._val = dict([('Type', _cmc_modCertTemplate_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 31))])
    
    #-----< id-cmc-modCertTemplate >-----#
    id_cmc_modCertTemplate = OID(name='id-cmc-modCertTemplate', mode=MODE_VALUE)
    id_cmc_modCertTemplate._val = (1, 3, 6, 1, 5, 5, 7, 7, 31)
    
    #-----< ModCertTemplate >-----#
    ModCertTemplate = SEQ(name='ModCertTemplate', mode=MODE_TYPE)
    _ModCertTemplate_pkiDataReference = SEQ_OF(name='pkiDataReference', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartPath')))
    _ModCertTemplate_certReferences = SEQ_OF(name='certReferences', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartList')))
    _ModCertTemplate_replace = BOOL(name='replace', mode=MODE_TYPE, default=True)
    _ModCertTemplate_certTemplate = SEQ(name='certTemplate', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXCRMF-2009', 'CertTemplate')))
    ModCertTemplate._cont = ASN1Dict([
        ('pkiDataReference', _ModCertTemplate_pkiDataReference),
        ('certReferences', _ModCertTemplate_certReferences),
        ('replace', _ModCertTemplate_replace),
        ('certTemplate', _ModCertTemplate_certTemplate),
        ])
    ModCertTemplate._ext = None
    
    #-----< cmc-controlProcessed >-----#
    cmc_controlProcessed = CLASS(name='cmc-controlProcessed', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_controlProcessed_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'ControlsProcessed')))
    cmc_controlProcessed._val = dict([('Type', _cmc_controlProcessed_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 32))])
    
    #-----< id-cmc-controlProcessed >-----#
    id_cmc_controlProcessed = OID(name='id-cmc-controlProcessed', mode=MODE_VALUE)
    id_cmc_controlProcessed._val = (1, 3, 6, 1, 5, 5, 7, 7, 32)
    
    #-----< ControlsProcessed >-----#
    ControlsProcessed = SEQ(name='ControlsProcessed', mode=MODE_TYPE)
    _ControlsProcessed_bodyList = SEQ_OF(name='bodyList', mode=MODE_TYPE)
    __ControlsProcessed_bodyList__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'BodyPartReference')))
    _ControlsProcessed_bodyList._cont = __ControlsProcessed_bodyList__item_
    _ControlsProcessed_bodyList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    ControlsProcessed._cont = ASN1Dict([
        ('bodyList', _ControlsProcessed_bodyList),
        ])
    ControlsProcessed._ext = None
    
    #-----< cmc-identityProofV2 >-----#
    cmc_identityProofV2 = CLASS(name='cmc-identityProofV2', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_identityProofV2_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'IdentityProofV2')))
    cmc_identityProofV2._val = dict([('Type', _cmc_identityProofV2_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 33))])
    
    #-----< id-cmc-identityProofV2 >-----#
    id_cmc_identityProofV2 = OID(name='id-cmc-identityProofV2', mode=MODE_VALUE)
    id_cmc_identityProofV2._val = (1, 3, 6, 1, 5, 5, 7, 7, 33)
    
    #-----< IdentityProofV2 >-----#
    IdentityProofV2 = SEQ(name='IdentityProofV2', mode=MODE_TYPE)
    _IdentityProofV2_proofAlgID = SEQ(name='proofAlgID', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __IdentityProofV2_proofAlgID_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM'), ['id']))
    ___IdentityProofV2_proofAlgID_algorithm_tab = CLASS(name='_tab_DIGEST-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    ____IdentityProofV2_proofAlgID_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ___IdentityProofV2_proofAlgID_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 3, 14, 3, 2, 26)), ('Params', ____IdentityProofV2_proofAlgID_algorithm_tab_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])
    __IdentityProofV2_proofAlgID_algorithm._const_tab = ___IdentityProofV2_proofAlgID_algorithm_tab
    __IdentityProofV2_proofAlgID_algorithm._const_tab_at = None
    __IdentityProofV2_proofAlgID_algorithm._const_tab_id = 'id'
    __IdentityProofV2_proofAlgID_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM'), ['Params']), opt=True)
    __IdentityProofV2_proofAlgID_parameters._const_tab = ___IdentityProofV2_proofAlgID_algorithm_tab
    __IdentityProofV2_proofAlgID_parameters._const_tab_at = ('..', 'algorithm')
    __IdentityProofV2_proofAlgID_parameters._const_tab_id = 'Params'
    _IdentityProofV2_proofAlgID._cont = ASN1Dict([
        ('algorithm', __IdentityProofV2_proofAlgID_algorithm),
        ('parameters', __IdentityProofV2_proofAlgID_parameters),
        ])
    _IdentityProofV2_proofAlgID._ext = None
    _IdentityProofV2_macAlgId = SEQ(name='macAlgId', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __IdentityProofV2_macAlgId_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'MAC-ALGORITHM'), ['id']))
    ___IdentityProofV2_macAlgId_algorithm_tab = CLASS(name='_tab_MAC-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'MAC-ALGORITHM')))
    ____IdentityProofV2_macAlgId_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ___IdentityProofV2_macAlgId_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2)), ('Params', ____IdentityProofV2_macAlgId_algorithm_tab_val_Params_0), ('paramPresence', 'preferredAbsent'), ('keyed', True), ('smimeCaps', dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2))]))])], rr=[], ev=None, er=[])
    __IdentityProofV2_macAlgId_algorithm._const_tab = ___IdentityProofV2_macAlgId_algorithm_tab
    __IdentityProofV2_macAlgId_algorithm._const_tab_at = None
    __IdentityProofV2_macAlgId_algorithm._const_tab_id = 'id'
    __IdentityProofV2_macAlgId_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'MAC-ALGORITHM'), ['Params']), opt=True)
    __IdentityProofV2_macAlgId_parameters._const_tab = ___IdentityProofV2_macAlgId_algorithm_tab
    __IdentityProofV2_macAlgId_parameters._const_tab_at = ('..', 'algorithm')
    __IdentityProofV2_macAlgId_parameters._const_tab_id = 'Params'
    _IdentityProofV2_macAlgId._cont = ASN1Dict([
        ('algorithm', __IdentityProofV2_macAlgId_algorithm),
        ('parameters', __IdentityProofV2_macAlgId_parameters),
        ])
    _IdentityProofV2_macAlgId._ext = None
    _IdentityProofV2_witness = OCT_STR(name='witness', mode=MODE_TYPE)
    IdentityProofV2._cont = ASN1Dict([
        ('proofAlgID', _IdentityProofV2_proofAlgID),
        ('macAlgId', _IdentityProofV2_macAlgId),
        ('witness', _IdentityProofV2_witness),
        ])
    IdentityProofV2._ext = None
    
    #-----< cmc-popLinkWitnessV2 >-----#
    cmc_popLinkWitnessV2 = CLASS(name='cmc-popLinkWitnessV2', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _cmc_popLinkWitnessV2_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'PopLinkWitnessV2')))
    cmc_popLinkWitnessV2._val = dict([('Type', _cmc_popLinkWitnessV2_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 34))])
    
    #-----< id-cmc-popLinkWitnessV2 >-----#
    id_cmc_popLinkWitnessV2 = OID(name='id-cmc-popLinkWitnessV2', mode=MODE_VALUE)
    id_cmc_popLinkWitnessV2._val = (1, 3, 6, 1, 5, 5, 7, 7, 34)
    
    #-----< PopLinkWitnessV2 >-----#
    PopLinkWitnessV2 = SEQ(name='PopLinkWitnessV2', mode=MODE_TYPE)
    _PopLinkWitnessV2_keyGenAlgorithm = SEQ(name='keyGenAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __PopLinkWitnessV2_keyGenAlgorithm_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'KEY-DERIVATION'), ['id']))
    ___PopLinkWitnessV2_keyGenAlgorithm_algorithm_tab = CLASS(name='_tab_KEY-DERIVATION', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-DERIVATION')))
    ____PopLinkWitnessV2_keyGenAlgorithm_algorithm_tab_val_Params_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'PBKDF2-params')))
    ___PopLinkWitnessV2_keyGenAlgorithm_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 5, 12)), ('Params', ____PopLinkWitnessV2_keyGenAlgorithm_algorithm_tab_val_Params_0), ('paramPresence', 'required')])], rr=[], ev=None, er=[])
    __PopLinkWitnessV2_keyGenAlgorithm_algorithm._const_tab = ___PopLinkWitnessV2_keyGenAlgorithm_algorithm_tab
    __PopLinkWitnessV2_keyGenAlgorithm_algorithm._const_tab_at = None
    __PopLinkWitnessV2_keyGenAlgorithm_algorithm._const_tab_id = 'id'
    __PopLinkWitnessV2_keyGenAlgorithm_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'KEY-DERIVATION'), ['Params']), opt=True)
    __PopLinkWitnessV2_keyGenAlgorithm_parameters._const_tab = ___PopLinkWitnessV2_keyGenAlgorithm_algorithm_tab
    __PopLinkWitnessV2_keyGenAlgorithm_parameters._const_tab_at = ('..', 'algorithm')
    __PopLinkWitnessV2_keyGenAlgorithm_parameters._const_tab_id = 'Params'
    _PopLinkWitnessV2_keyGenAlgorithm._cont = ASN1Dict([
        ('algorithm', __PopLinkWitnessV2_keyGenAlgorithm_algorithm),
        ('parameters', __PopLinkWitnessV2_keyGenAlgorithm_parameters),
        ])
    _PopLinkWitnessV2_keyGenAlgorithm._ext = None
    _PopLinkWitnessV2_macAlgorithm = SEQ(name='macAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __PopLinkWitnessV2_macAlgorithm_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'MAC-ALGORITHM'), ['id']))
    ___PopLinkWitnessV2_macAlgorithm_algorithm_tab = CLASS(name='_tab_MAC-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'MAC-ALGORITHM')))
    ____PopLinkWitnessV2_macAlgorithm_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ___PopLinkWitnessV2_macAlgorithm_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2)), ('Params', ____PopLinkWitnessV2_macAlgorithm_algorithm_tab_val_Params_0), ('paramPresence', 'preferredAbsent'), ('keyed', True), ('smimeCaps', dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2))]))])], rr=[], ev=None, er=[])
    __PopLinkWitnessV2_macAlgorithm_algorithm._const_tab = ___PopLinkWitnessV2_macAlgorithm_algorithm_tab
    __PopLinkWitnessV2_macAlgorithm_algorithm._const_tab_at = None
    __PopLinkWitnessV2_macAlgorithm_algorithm._const_tab_id = 'id'
    __PopLinkWitnessV2_macAlgorithm_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'MAC-ALGORITHM'), ['Params']), opt=True)
    __PopLinkWitnessV2_macAlgorithm_parameters._const_tab = ___PopLinkWitnessV2_macAlgorithm_algorithm_tab
    __PopLinkWitnessV2_macAlgorithm_parameters._const_tab_at = ('..', 'algorithm')
    __PopLinkWitnessV2_macAlgorithm_parameters._const_tab_id = 'Params'
    _PopLinkWitnessV2_macAlgorithm._cont = ASN1Dict([
        ('algorithm', __PopLinkWitnessV2_macAlgorithm_algorithm),
        ('parameters', __PopLinkWitnessV2_macAlgorithm_parameters),
        ])
    _PopLinkWitnessV2_macAlgorithm._ext = None
    _PopLinkWitnessV2_witness = OCT_STR(name='witness', mode=MODE_TYPE)
    PopLinkWitnessV2._cont = ASN1Dict([
        ('keyGenAlgorithm', _PopLinkWitnessV2_keyGenAlgorithm),
        ('macAlgorithm', _PopLinkWitnessV2_macAlgorithm),
        ('witness', _PopLinkWitnessV2_witness),
        ])
    PopLinkWitnessV2._ext = None
    
    #-----< KeyDevAlgs >-----#
    KeyDevAlgs = CLASS(name='KeyDevAlgs', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-DERIVATION')))
    _KeyDevAlgs_val_Params_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'PBKDF2-params')))
    KeyDevAlgs._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 5, 12)), ('Params', _KeyDevAlgs_val_Params_0), ('paramPresence', 'required')])], rr=[], ev=[], er=[])
    
    _all_ = [
        CMC_ContentTypes,
        _CMC_ContentTypes_val_Type_0,
        _CMC_ContentTypes_val_Type_1,
        SignatureAlgs,
        _SignatureAlgs_val_Value_0,
        _SignatureAlgs_val_Params_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_0,
        CMC_UnsignedAtts,
        _CMC_UnsignedAtts_val_Type_0,
        id_cmc,
        id_cct,
        ct_PKIData,
        _ct_PKIData_val_Type,
        id_cct_PKIData,
        __PKIData_controlSequence__item_,
        _PKIData_controlSequence,
        __PKIData_reqSequence__item_,
        _PKIData_reqSequence,
        __PKIData_cmsSequence__item_,
        _PKIData_cmsSequence,
        __PKIData_otherMsgSequence__item_,
        _PKIData_otherMsgSequence,
        PKIData,
        BodyPartID,
        _TaggedAttribute_bodyPartID,
        __TaggedAttribute_attrType_tab,
        ___TaggedAttribute_attrType_tab_val_Type_0,
        ___TaggedAttribute_attrType_tab_val_Type_1,
        ___TaggedAttribute_attrType_tab_val_Type_2,
        ___TaggedAttribute_attrType_tab_val_Type_3,
        ___TaggedAttribute_attrType_tab_val_Type_4,
        ___TaggedAttribute_attrType_tab_val_Type_5,
        ___TaggedAttribute_attrType_tab_val_Type_6,
        ___TaggedAttribute_attrType_tab_val_Type_7,
        ___TaggedAttribute_attrType_tab_val_Type_8,
        ___TaggedAttribute_attrType_tab_val_Type_9,
        ___TaggedAttribute_attrType_tab_val_Type_10,
        ___TaggedAttribute_attrType_tab_val_Type_11,
        ___TaggedAttribute_attrType_tab_val_Type_12,
        ___TaggedAttribute_attrType_tab_val_Type_13,
        ___TaggedAttribute_attrType_tab_val_Type_14,
        ___TaggedAttribute_attrType_tab_val_Type_15,
        ___TaggedAttribute_attrType_tab_val_Type_16,
        ___TaggedAttribute_attrType_tab_val_Type_17,
        ___TaggedAttribute_attrType_tab_val_Type_18,
        ___TaggedAttribute_attrType_tab_val_Type_19,
        ___TaggedAttribute_attrType_tab_val_Type_20,
        ___TaggedAttribute_attrType_tab_val_Type_21,
        ___TaggedAttribute_attrType_tab_val_Type_22,
        ___TaggedAttribute_attrType_tab_val_Type_23,
        ___TaggedAttribute_attrType_tab_val_Type_24,
        ___TaggedAttribute_attrType_tab_val_Type_25,
        ___TaggedAttribute_attrType_tab_val_Type_26,
        ___TaggedAttribute_attrType_tab_val_Type_27,
        ___TaggedAttribute_attrType_tab_val_Type_28,
        ___TaggedAttribute_attrType_tab_val_Type_29,
        _TaggedAttribute_attrType,
        __TaggedAttribute_attrValues__item_,
        _TaggedAttribute_attrValues,
        TaggedAttribute,
        Cmc_Control_Set,
        _Cmc_Control_Set_val_Type_0,
        _Cmc_Control_Set_val_Type_1,
        _Cmc_Control_Set_val_Type_2,
        _Cmc_Control_Set_val_Type_3,
        _Cmc_Control_Set_val_Type_4,
        _Cmc_Control_Set_val_Type_5,
        _Cmc_Control_Set_val_Type_6,
        _Cmc_Control_Set_val_Type_7,
        _Cmc_Control_Set_val_Type_8,
        _Cmc_Control_Set_val_Type_9,
        _Cmc_Control_Set_val_Type_10,
        _Cmc_Control_Set_val_Type_11,
        _Cmc_Control_Set_val_Type_12,
        _Cmc_Control_Set_val_Type_13,
        _Cmc_Control_Set_val_Type_14,
        _Cmc_Control_Set_val_Type_15,
        _Cmc_Control_Set_val_Type_16,
        _Cmc_Control_Set_val_Type_17,
        _Cmc_Control_Set_val_Type_18,
        _Cmc_Control_Set_val_Type_19,
        _Cmc_Control_Set_val_Type_20,
        _Cmc_Control_Set_val_Type_21,
        _Cmc_Control_Set_val_Type_22,
        _Cmc_Control_Set_val_Type_23,
        _Cmc_Control_Set_val_Type_24,
        _Cmc_Control_Set_val_Type_25,
        _Cmc_Control_Set_val_Type_26,
        _Cmc_Control_Set_val_Type_27,
        _Cmc_Control_Set_val_Type_28,
        _Cmc_Control_Set_val_Type_29,
        OTHER_REQUEST,
        OtherRequests,
        _TaggedRequest_tcr,
        _TaggedRequest_crm,
        __TaggedRequest_orm_bodyPartID,
        ___TaggedRequest_orm_requestMessageType_tab,
        __TaggedRequest_orm_requestMessageType,
        ___TaggedRequest_orm_requestMessageValue_tab,
        __TaggedRequest_orm_requestMessageValue,
        _TaggedRequest_orm,
        TaggedRequest,
        _TaggedCertificationRequest_bodyPartID,
        _TaggedCertificationRequest_certificationRequest,
        TaggedCertificationRequest,
        AttributeList,
        _AttributeList_val_Type_0,
        __CertificationRequest_certificationRequestInfo_version,
        __CertificationRequest_certificationRequestInfo_subject,
        _____CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab,
        ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_0,
        ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_0,
        ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_1,
        ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_1,
        ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_2,
        ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_2,
        ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_3,
        ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_4,
        ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_4,
        ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_5,
        ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_5,
        ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_6,
        ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_6,
        ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_7,
        ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_7,
        ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_KeyValue_8,
        ______CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm_tab_val_Params_8,
        ____CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_algorithm,
        ____CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm_parameters,
        ___CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_algorithm,
        ___CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo_subjectPublicKey,
        __CertificationRequest_certificationRequestInfo_subjectPublicKeyInfo,
        _____CertificationRequest_certificationRequestInfo_attributes__item__type_tab,
        ______CertificationRequest_certificationRequestInfo_attributes__item__type_tab_val_Type_0,
        ____CertificationRequest_certificationRequestInfo_attributes__item__type,
        _____CertificationRequest_certificationRequestInfo_attributes__item__values__item_,
        ____CertificationRequest_certificationRequestInfo_attributes__item__values,
        ___CertificationRequest_certificationRequestInfo_attributes__item_,
        __CertificationRequest_certificationRequestInfo_attributes,
        _CertificationRequest_certificationRequestInfo,
        ___CertificationRequest_signatureAlgorithm_algorithm_tab,
        ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0,
        ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_1,
        ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_2,
        ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_3,
        ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_3,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_0,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_0,
        ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_4,
        ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_4,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_0_1,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_0_1,
        ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_5,
        ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_5,
        ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_6,
        ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_6,
        ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_7,
        ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_7,
        ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_8,
        ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_8,
        ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_9,
        ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_9,
        ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Value_10,
        ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_10,
        ____CertificationRequest_signatureAlgorithm_algorithm_tab_val_Params_11,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_1,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_2,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_3,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_HashSet_val_Params_4,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_KeyValue_1,
        _____AttributeCertificateV1_algorithmIdentifier_algorithm_tab_PublicKeySet_val_Params_1,
        __CertificationRequest_signatureAlgorithm_algorithm,
        __CertificationRequest_signatureAlgorithm_parameters,
        _CertificationRequest_signatureAlgorithm,
        _CertificationRequest_signature,
        CertificationRequest,
        _TaggedContentInfo_bodyPartID,
        _TaggedContentInfo_contentInfo,
        TaggedContentInfo,
        OTHER_MSG,
        OtherMsgSet,
        _OtherMsg_bodyPartID,
        __OtherMsg_otherMsgType_tab,
        _OtherMsg_otherMsgType,
        __OtherMsg_otherMsgValue_tab,
        _OtherMsg_otherMsgValue,
        OtherMsg,
        ct_PKIResponse,
        _ct_PKIResponse_val_Type,
        id_cct_PKIResponse,
        ResponseBody,
        __PKIResponse_controlSequence__item_,
        _PKIResponse_controlSequence,
        __PKIResponse_cmsSequence__item_,
        _PKIResponse_cmsSequence,
        __PKIResponse_otherMsgSequence__item_,
        _PKIResponse_otherMsgSequence,
        PKIResponse,
        CMC_CONTROL,
        cmc_identityProof,
        _cmc_identityProof_val_Type,
        id_cmc_identityProof,
        cmc_dataReturn,
        _cmc_dataReturn_val_Type,
        id_cmc_dataReturn,
        cmc_regInfo,
        _cmc_regInfo_val_Type,
        id_cmc_regInfo,
        cmc_responseInfo,
        _cmc_responseInfo_val_Type,
        id_cmc_responseInfo,
        cmc_queryPending,
        _cmc_queryPending_val_Type,
        id_cmc_queryPending,
        cmc_popLinkRandom,
        _cmc_popLinkRandom_val_Type,
        id_cmc_popLinkRandom,
        cmc_popLinkWitness,
        _cmc_popLinkWitness_val_Type,
        id_cmc_popLinkWitness,
        cmc_identification,
        _cmc_identification_val_Type,
        id_cmc_identification,
        cmc_transactionId,
        _cmc_transactionId_val_Type,
        id_cmc_transactionId,
        cmc_senderNonce,
        _cmc_senderNonce_val_Type,
        id_cmc_senderNonce,
        cmc_recipientNonce,
        _cmc_recipientNonce_val_Type,
        id_cmc_recipientNonce,
        cmc_statusInfo,
        _cmc_statusInfo_val_Type,
        id_cmc_statusInfo,
        _CMCStatusInfo_cMCStatus,
        __CMCStatusInfo_bodyList__item_,
        _CMCStatusInfo_bodyList,
        _CMCStatusInfo_statusString,
        __CMCStatusInfo_otherInfo_failInfo,
        __CMCStatusInfo_otherInfo_pendInfo,
        _CMCStatusInfo_otherInfo,
        CMCStatusInfo,
        _PendInfo_pendToken,
        _PendInfo_pendTime,
        PendInfo,
        CMCStatus,
        CMCFailInfo,
        cmc_addExtensions,
        _cmc_addExtensions_val_Type,
        id_cmc_addExtensions,
        _AddExtensions_pkiDataReference,
        __AddExtensions_certReferences__item_,
        _AddExtensions_certReferences,
        ____AddExtensions_extensions__item__extnID_tab,
        _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_0,
        _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_1,
        _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_2,
        _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_3,
        _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_4,
        _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_5,
        _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_6,
        _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_7,
        _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_8,
        _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_9,
        _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_10,
        _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_11,
        _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_12,
        _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_13,
        _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_14,
        _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_15,
        _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_16,
        _____AddExtensions_extensions__item__extnID_tab_val_ExtnType_17,
        ___AddExtensions_extensions__item__extnID,
        ___AddExtensions_extensions__item__critical,
        ____AddExtensions_extensions__item__extnValue_contain,
        ___AddExtensions_extensions__item__extnValue,
        __AddExtensions_extensions__item_,
        _AddExtensions_extensions,
        AddExtensions,
        cmc_encryptedPOP,
        _cmc_encryptedPOP_val_Type,
        cmc_decryptedPOP,
        _cmc_decryptedPOP_val_Type,
        id_cmc_encryptedPOP,
        id_cmc_decryptedPOP,
        _EncryptedPOP_request,
        _EncryptedPOP_cms,
        ___EncryptedPOP_thePOPAlgID_algorithm_tab,
        ____EncryptedPOP_thePOPAlgID_algorithm_tab_val_Params_0,
        __EncryptedPOP_thePOPAlgID_algorithm,
        __EncryptedPOP_thePOPAlgID_parameters,
        _EncryptedPOP_thePOPAlgID,
        ___EncryptedPOP_witnessAlgID_algorithm_tab,
        ____EncryptedPOP_witnessAlgID_algorithm_tab_val_Params_0,
        __EncryptedPOP_witnessAlgID_algorithm,
        __EncryptedPOP_witnessAlgID_parameters,
        _EncryptedPOP_witnessAlgID,
        _EncryptedPOP_witness,
        EncryptedPOP,
        POPAlgs,
        _POPAlgs_val_Params_0,
        WitnessAlgs,
        _WitnessAlgs_val_Params_0,
        _DecryptedPOP_bodyPartID,
        ___DecryptedPOP_thePOPAlgID_algorithm_tab,
        ____DecryptedPOP_thePOPAlgID_algorithm_tab_val_Params_0,
        __DecryptedPOP_thePOPAlgID_algorithm,
        __DecryptedPOP_thePOPAlgID_parameters,
        _DecryptedPOP_thePOPAlgID,
        _DecryptedPOP_thePOP,
        DecryptedPOP,
        cmc_lraPOPWitness,
        _cmc_lraPOPWitness_val_Type,
        id_cmc_lraPOPWitness,
        _LraPopWitness_pkiDataBodyid,
        __LraPopWitness_bodyIds__item_,
        _LraPopWitness_bodyIds,
        LraPopWitness,
        cmc_getCert,
        _cmc_getCert_val_Type,
        id_cmc_getCert,
        _GetCert_issuerName,
        _GetCert_serialNumber,
        GetCert,
        cmc_getCRL,
        _cmc_getCRL_val_Type,
        id_cmc_getCRL,
        _GetCRL_issuerName,
        _GetCRL_cRLName,
        _GetCRL_time,
        _GetCRL_reasons,
        GetCRL,
        cmc_revokeRequest,
        _cmc_revokeRequest_val_Type,
        id_cmc_revokeRequest,
        _RevokeRequest_issuerName,
        _RevokeRequest_serialNumber,
        _RevokeRequest_reason,
        _RevokeRequest_invalidityDate,
        _RevokeRequest_passphrase,
        _RevokeRequest_comment,
        RevokeRequest,
        cmc_confirmCertAcceptance,
        _cmc_confirmCertAcceptance_val_Type,
        id_cmc_confirmCertAcceptance,
        CMCCertId,
        at_extension_req,
        _at_extension_req_val_Type,
        id_ExtensionReq,
        ___ExtensionReq__item__extnID_tab,
        ____ExtensionReq__item__extnID_tab_val_ExtnType_0,
        ____ExtensionReq__item__extnID_tab_val_ExtnType_1,
        ____ExtensionReq__item__extnID_tab_val_ExtnType_2,
        ____ExtensionReq__item__extnID_tab_val_ExtnType_3,
        ____ExtensionReq__item__extnID_tab_val_ExtnType_4,
        ____ExtensionReq__item__extnID_tab_val_ExtnType_5,
        ____ExtensionReq__item__extnID_tab_val_ExtnType_6,
        ____ExtensionReq__item__extnID_tab_val_ExtnType_7,
        ____ExtensionReq__item__extnID_tab_val_ExtnType_8,
        ____ExtensionReq__item__extnID_tab_val_ExtnType_9,
        ____ExtensionReq__item__extnID_tab_val_ExtnType_10,
        ____ExtensionReq__item__extnID_tab_val_ExtnType_11,
        ____ExtensionReq__item__extnID_tab_val_ExtnType_12,
        ____ExtensionReq__item__extnID_tab_val_ExtnType_13,
        ____ExtensionReq__item__extnID_tab_val_ExtnType_14,
        ____ExtensionReq__item__extnID_tab_val_ExtnType_15,
        ____ExtensionReq__item__extnID_tab_val_ExtnType_16,
        ____ExtensionReq__item__extnID_tab_val_ExtnType_17,
        __ExtensionReq__item__extnID,
        __ExtensionReq__item__critical,
        ___ExtensionReq__item__extnValue_contain,
        __ExtensionReq__item__extnValue,
        _ExtensionReq__item_,
        ExtensionReq,
        sa_noSignature,
        _sa_noSignature_val_Value,
        _sa_noSignature_val_Params,
        id_alg_noSignature,
        NoSignatureValue,
        id_aa,
        aa_cmc_unsignedData,
        _aa_cmc_unsignedData_val_Type,
        id_aa_cmc_unsignedData,
        _CMCUnsignedData_bodyPartPath,
        _CMCUnsignedData_identifier,
        _CMCUnsignedData_content,
        CMCUnsignedData,
        cmc_statusInfoV2,
        _cmc_statusInfoV2_val_Type,
        id_cmc_statusInfoV2,
        EXTENDED_FAILURE_INFO,
        ExtendedFailures,
        _CMCStatusInfoV2_cMCStatus,
        __CMCStatusInfoV2_bodyList__item_,
        _CMCStatusInfoV2_bodyList,
        _CMCStatusInfoV2_statusString,
        __CMCStatusInfoV2_otherInfo_failInfo,
        __CMCStatusInfoV2_otherInfo_pendInfo,
        _____CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoOID_tab_id,
        _____CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoOID_tab_Type,
        ____CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoOID_tab,
        ___CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoOID,
        _____CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoValue_tab_id,
        _____CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoValue_tab_Type,
        ____CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoValue_tab,
        ___CMCStatusInfoV2_otherInfo_extendedFailInfo_failInfoValue,
        __CMCStatusInfoV2_otherInfo_extendedFailInfo,
        _CMCStatusInfoV2_otherInfo,
        CMCStatusInfoV2,
        _BodyPartReference_bodyPartID,
        _BodyPartReference_bodyPartPath,
        BodyPartReference,
        _BodyPartPath__item_,
        BodyPartPath,
        cmc_trustedAnchors,
        _cmc_trustedAnchors_val_Type,
        id_cmc_trustedAnchors,
        _PublishTrustAnchors_seqNumber,
        ___PublishTrustAnchors_hashAlgorithm_algorithm_tab,
        ____PublishTrustAnchors_hashAlgorithm_algorithm_tab_val_Params_0,
        ____PublishTrustAnchors_hashAlgorithm_algorithm_tab_val_Params_1,
        __PublishTrustAnchors_hashAlgorithm_algorithm,
        __PublishTrustAnchors_hashAlgorithm_parameters,
        _PublishTrustAnchors_hashAlgorithm,
        __PublishTrustAnchors_anchorHashes__item_,
        _PublishTrustAnchors_anchorHashes,
        PublishTrustAnchors,
        HashAlgorithms,
        _HashAlgorithms_val_Params_0,
        _HashAlgorithms_val_Params_1,
        cmc_authData,
        _cmc_authData_val_Type,
        id_cmc_authData,
        AuthPublish,
        cmc_batchRequests,
        _cmc_batchRequests_val_Type,
        id_cmc_batchRequests,
        cmc_batchResponses,
        _cmc_batchResponses_val_Type,
        id_cmc_batchResponses,
        _BodyPartList__item_,
        BodyPartList,
        cmc_publishCert,
        _cmc_publishCert_val_Type,
        id_cmc_publishCert,
        ___CMCPublicationInfo_hashAlg_algorithm_tab,
        ____CMCPublicationInfo_hashAlg_algorithm_tab_val_Params_0,
        ____CMCPublicationInfo_hashAlg_algorithm_tab_val_Params_1,
        __CMCPublicationInfo_hashAlg_algorithm,
        __CMCPublicationInfo_hashAlg_parameters,
        _CMCPublicationInfo_hashAlg,
        __CMCPublicationInfo_certHashes__item_,
        _CMCPublicationInfo_certHashes,
        _CMCPublicationInfo_pubInfo,
        CMCPublicationInfo,
        cmc_modCertTemplate,
        _cmc_modCertTemplate_val_Type,
        id_cmc_modCertTemplate,
        _ModCertTemplate_pkiDataReference,
        _ModCertTemplate_certReferences,
        _ModCertTemplate_replace,
        _ModCertTemplate_certTemplate,
        ModCertTemplate,
        cmc_controlProcessed,
        _cmc_controlProcessed_val_Type,
        id_cmc_controlProcessed,
        __ControlsProcessed_bodyList__item_,
        _ControlsProcessed_bodyList,
        ControlsProcessed,
        cmc_identityProofV2,
        _cmc_identityProofV2_val_Type,
        id_cmc_identityProofV2,
        ___IdentityProofV2_proofAlgID_algorithm_tab,
        ____IdentityProofV2_proofAlgID_algorithm_tab_val_Params_0,
        __IdentityProofV2_proofAlgID_algorithm,
        __IdentityProofV2_proofAlgID_parameters,
        _IdentityProofV2_proofAlgID,
        ___IdentityProofV2_macAlgId_algorithm_tab,
        ____IdentityProofV2_macAlgId_algorithm_tab_val_Params_0,
        __IdentityProofV2_macAlgId_algorithm,
        __IdentityProofV2_macAlgId_parameters,
        _IdentityProofV2_macAlgId,
        _IdentityProofV2_witness,
        IdentityProofV2,
        cmc_popLinkWitnessV2,
        _cmc_popLinkWitnessV2_val_Type,
        id_cmc_popLinkWitnessV2,
        ___PopLinkWitnessV2_keyGenAlgorithm_algorithm_tab,
        ____PopLinkWitnessV2_keyGenAlgorithm_algorithm_tab_val_Params_0,
        __PopLinkWitnessV2_keyGenAlgorithm_algorithm,
        __PopLinkWitnessV2_keyGenAlgorithm_parameters,
        _PopLinkWitnessV2_keyGenAlgorithm,
        ___PopLinkWitnessV2_macAlgorithm_algorithm_tab,
        ____PopLinkWitnessV2_macAlgorithm_algorithm_tab_val_Params_0,
        __PopLinkWitnessV2_macAlgorithm_algorithm,
        __PopLinkWitnessV2_macAlgorithm_parameters,
        _PopLinkWitnessV2_macAlgorithm,
        _PopLinkWitnessV2_witness,
        PopLinkWitnessV2,
        KeyDevAlgs,
        _KeyDevAlgs_val_Params_0,
    ]

class AlgorithmInformation_2009:

    _name_  = 'AlgorithmInformation-2009'
    _oid_   = [1, 3, 6, 1, 5, 5, 7, 0, 58]
    
    _obj_ = [
        'ParamOptions',
        'DIGEST-ALGORITHM',
        'SIGNATURE-ALGORITHM',
        'PUBLIC-KEY',
        'KEY-TRANSPORT',
        'KEY-AGREE',
        'KEY-WRAP',
        'KEY-DERIVATION',
        'MAC-ALGORITHM',
        'CONTENT-ENCRYPTION',
        'ALGORITHM',
        'AlgorithmIdentifier',
        'SMIME-CAPS',
        'SMIMECapability',
        'SMIMECapabilities',
        ]
    _type_ = [
        'ParamOptions',
        'DIGEST-ALGORITHM',
        'SIGNATURE-ALGORITHM',
        'PUBLIC-KEY',
        'KEY-TRANSPORT',
        'KEY-AGREE',
        'KEY-WRAP',
        'KEY-DERIVATION',
        'MAC-ALGORITHM',
        'CONTENT-ENCRYPTION',
        'ALGORITHM',
        'AlgorithmIdentifier',
        'SMIME-CAPS',
        'SMIMECapability',
        'SMIMECapabilities',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        'DIGEST-ALGORITHM',
        'SIGNATURE-ALGORITHM',
        'PUBLIC-KEY',
        'KEY-TRANSPORT',
        'KEY-AGREE',
        'KEY-WRAP',
        'KEY-DERIVATION',
        'MAC-ALGORITHM',
        'CONTENT-ENCRYPTION',
        'ALGORITHM',
        'SMIME-CAPS',
        ]
    _param_ = [
        'AlgorithmIdentifier',
        'SMIMECapability',
        'SMIMECapabilities',
        ]
    
    #-----< ParamOptions >-----#
    ParamOptions = ENUM(name='ParamOptions', mode=MODE_TYPE)
    ParamOptions._cont = ASN1Dict([('required', 0), ('preferredPresent', 1), ('preferredAbsent', 2), ('absent', 3), ('inheritable', 4), ('optional', 5)])
    ParamOptions._ext = []
    
    #-----< DIGEST-ALGORITHM >-----#
    DIGEST_ALGORITHM = CLASS(name='DIGEST-ALGORITHM', mode=MODE_TYPE)
    _DIGEST_ALGORITHM_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    _DIGEST_ALGORITHM_Params = OPEN(name='Params', mode=MODE_TYPE, opt=True)
    _DIGEST_ALGORITHM_paramPresence = ENUM(name='paramPresence', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ParamOptions')), default='absent')
    DIGEST_ALGORITHM._cont = ASN1Dict([
        ('id', _DIGEST_ALGORITHM_id),
        ('Params', _DIGEST_ALGORITHM_Params),
        ('paramPresence', _DIGEST_ALGORITHM_paramPresence),
        ])
    
    #-----< SIGNATURE-ALGORITHM >-----#
    SIGNATURE_ALGORITHM = CLASS(name='SIGNATURE-ALGORITHM', mode=MODE_TYPE)
    _SIGNATURE_ALGORITHM_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    _SIGNATURE_ALGORITHM_Value = OPEN(name='Value', mode=MODE_TYPE, opt=True)
    _SIGNATURE_ALGORITHM_Params = OPEN(name='Params', mode=MODE_TYPE, opt=True)
    _SIGNATURE_ALGORITHM_paramPresence = ENUM(name='paramPresence', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ParamOptions')), default='absent')
    _SIGNATURE_ALGORITHM_HashSet = CLASS(name='HashSet', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')), opt=True)
    _SIGNATURE_ALGORITHM_PublicKeySet = CLASS(name='PublicKeySet', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')), opt=True)
    _SIGNATURE_ALGORITHM_smimeCaps = CLASS(name='smimeCaps', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')), opt=True)
    SIGNATURE_ALGORITHM._cont = ASN1Dict([
        ('id', _SIGNATURE_ALGORITHM_id),
        ('Value', _SIGNATURE_ALGORITHM_Value),
        ('Params', _SIGNATURE_ALGORITHM_Params),
        ('paramPresence', _SIGNATURE_ALGORITHM_paramPresence),
        ('HashSet', _SIGNATURE_ALGORITHM_HashSet),
        ('PublicKeySet', _SIGNATURE_ALGORITHM_PublicKeySet),
        ('smimeCaps', _SIGNATURE_ALGORITHM_smimeCaps),
        ])
    
    #-----< PUBLIC-KEY >-----#
    PUBLIC_KEY = CLASS(name='PUBLIC-KEY', mode=MODE_TYPE)
    _PUBLIC_KEY_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    _PUBLIC_KEY_KeyValue = OPEN(name='KeyValue', mode=MODE_TYPE, opt=True)
    _PUBLIC_KEY_Params = OPEN(name='Params', mode=MODE_TYPE, opt=True)
    _PUBLIC_KEY_paramPresence = ENUM(name='paramPresence', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ParamOptions')), default='absent')
    _PUBLIC_KEY_keyUsage = BIT_STR(name='keyUsage', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'KeyUsage')), opt=True)
    _PUBLIC_KEY_PrivateKey = OPEN(name='PrivateKey', mode=MODE_TYPE, opt=True)
    PUBLIC_KEY._cont = ASN1Dict([
        ('id', _PUBLIC_KEY_id),
        ('KeyValue', _PUBLIC_KEY_KeyValue),
        ('Params', _PUBLIC_KEY_Params),
        ('paramPresence', _PUBLIC_KEY_paramPresence),
        ('keyUsage', _PUBLIC_KEY_keyUsage),
        ('PrivateKey', _PUBLIC_KEY_PrivateKey),
        ])
    
    #-----< KEY-TRANSPORT >-----#
    KEY_TRANSPORT = CLASS(name='KEY-TRANSPORT', mode=MODE_TYPE)
    _KEY_TRANSPORT_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    _KEY_TRANSPORT_Params = OPEN(name='Params', mode=MODE_TYPE, opt=True)
    _KEY_TRANSPORT_paramPresence = ENUM(name='paramPresence', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ParamOptions')), default='absent')
    _KEY_TRANSPORT_PublicKeySet = CLASS(name='PublicKeySet', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')), opt=True)
    _KEY_TRANSPORT_smimeCaps = CLASS(name='smimeCaps', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')), opt=True)
    KEY_TRANSPORT._cont = ASN1Dict([
        ('id', _KEY_TRANSPORT_id),
        ('Params', _KEY_TRANSPORT_Params),
        ('paramPresence', _KEY_TRANSPORT_paramPresence),
        ('PublicKeySet', _KEY_TRANSPORT_PublicKeySet),
        ('smimeCaps', _KEY_TRANSPORT_smimeCaps),
        ])
    
    #-----< KEY-AGREE >-----#
    KEY_AGREE = CLASS(name='KEY-AGREE', mode=MODE_TYPE)
    _KEY_AGREE_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    _KEY_AGREE_Params = OPEN(name='Params', mode=MODE_TYPE, opt=True)
    _KEY_AGREE_paramPresence = ENUM(name='paramPresence', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ParamOptions')), default='absent')
    _KEY_AGREE_PublicKeySet = CLASS(name='PublicKeySet', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')), opt=True)
    _KEY_AGREE_Ukm = OPEN(name='Ukm', mode=MODE_TYPE, opt=True)
    _KEY_AGREE_ukmPresence = ENUM(name='ukmPresence', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ParamOptions')), default='absent')
    _KEY_AGREE_smimeCaps = CLASS(name='smimeCaps', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')), opt=True)
    KEY_AGREE._cont = ASN1Dict([
        ('id', _KEY_AGREE_id),
        ('Params', _KEY_AGREE_Params),
        ('paramPresence', _KEY_AGREE_paramPresence),
        ('PublicKeySet', _KEY_AGREE_PublicKeySet),
        ('Ukm', _KEY_AGREE_Ukm),
        ('ukmPresence', _KEY_AGREE_ukmPresence),
        ('smimeCaps', _KEY_AGREE_smimeCaps),
        ])
    
    #-----< KEY-WRAP >-----#
    KEY_WRAP = CLASS(name='KEY-WRAP', mode=MODE_TYPE)
    _KEY_WRAP_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    _KEY_WRAP_Params = OPEN(name='Params', mode=MODE_TYPE, opt=True)
    _KEY_WRAP_paramPresence = ENUM(name='paramPresence', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ParamOptions')), default='absent')
    _KEY_WRAP_smimeCaps = CLASS(name='smimeCaps', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')), opt=True)
    KEY_WRAP._cont = ASN1Dict([
        ('id', _KEY_WRAP_id),
        ('Params', _KEY_WRAP_Params),
        ('paramPresence', _KEY_WRAP_paramPresence),
        ('smimeCaps', _KEY_WRAP_smimeCaps),
        ])
    
    #-----< KEY-DERIVATION >-----#
    KEY_DERIVATION = CLASS(name='KEY-DERIVATION', mode=MODE_TYPE)
    _KEY_DERIVATION_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    _KEY_DERIVATION_Params = OPEN(name='Params', mode=MODE_TYPE, opt=True)
    _KEY_DERIVATION_paramPresence = ENUM(name='paramPresence', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ParamOptions')), default='absent')
    _KEY_DERIVATION_smimeCaps = CLASS(name='smimeCaps', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')), opt=True)
    KEY_DERIVATION._cont = ASN1Dict([
        ('id', _KEY_DERIVATION_id),
        ('Params', _KEY_DERIVATION_Params),
        ('paramPresence', _KEY_DERIVATION_paramPresence),
        ('smimeCaps', _KEY_DERIVATION_smimeCaps),
        ])
    
    #-----< MAC-ALGORITHM >-----#
    MAC_ALGORITHM = CLASS(name='MAC-ALGORITHM', mode=MODE_TYPE)
    _MAC_ALGORITHM_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    _MAC_ALGORITHM_Params = OPEN(name='Params', mode=MODE_TYPE, opt=True)
    _MAC_ALGORITHM_paramPresence = ENUM(name='paramPresence', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ParamOptions')), default='absent')
    _MAC_ALGORITHM_keyed = BOOL(name='keyed', mode=MODE_VALUE)
    _MAC_ALGORITHM_smimeCaps = CLASS(name='smimeCaps', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')), opt=True)
    MAC_ALGORITHM._cont = ASN1Dict([
        ('id', _MAC_ALGORITHM_id),
        ('Params', _MAC_ALGORITHM_Params),
        ('paramPresence', _MAC_ALGORITHM_paramPresence),
        ('keyed', _MAC_ALGORITHM_keyed),
        ('smimeCaps', _MAC_ALGORITHM_smimeCaps),
        ])
    
    #-----< CONTENT-ENCRYPTION >-----#
    CONTENT_ENCRYPTION = CLASS(name='CONTENT-ENCRYPTION', mode=MODE_TYPE)
    _CONTENT_ENCRYPTION_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    _CONTENT_ENCRYPTION_Params = OPEN(name='Params', mode=MODE_TYPE, opt=True)
    _CONTENT_ENCRYPTION_paramPresence = ENUM(name='paramPresence', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ParamOptions')), default='absent')
    _CONTENT_ENCRYPTION_smimeCaps = CLASS(name='smimeCaps', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')), opt=True)
    CONTENT_ENCRYPTION._cont = ASN1Dict([
        ('id', _CONTENT_ENCRYPTION_id),
        ('Params', _CONTENT_ENCRYPTION_Params),
        ('paramPresence', _CONTENT_ENCRYPTION_paramPresence),
        ('smimeCaps', _CONTENT_ENCRYPTION_smimeCaps),
        ])
    
    #-----< ALGORITHM >-----#
    ALGORITHM = CLASS(name='ALGORITHM', mode=MODE_TYPE)
    _ALGORITHM_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    _ALGORITHM_Params = OPEN(name='Params', mode=MODE_TYPE, opt=True)
    _ALGORITHM_paramPresence = ENUM(name='paramPresence', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ParamOptions')), default='absent')
    _ALGORITHM_smimeCaps = CLASS(name='smimeCaps', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')), opt=True)
    ALGORITHM._cont = ASN1Dict([
        ('id', _ALGORITHM_id),
        ('Params', _ALGORITHM_Params),
        ('paramPresence', _ALGORITHM_paramPresence),
        ('smimeCaps', _ALGORITHM_smimeCaps),
        ])
    
    #-----< AlgorithmIdentifier >-----#
    AlgorithmIdentifier = SEQ(name='AlgorithmIdentifier', mode=MODE_TYPE, param=True)
    
    #-----< SMIME-CAPS >-----#
    SMIME_CAPS = CLASS(name='SMIME-CAPS', mode=MODE_TYPE)
    _SMIME_CAPS_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    _SMIME_CAPS_Type = OPEN(name='Type', mode=MODE_TYPE, opt=True)
    SMIME_CAPS._cont = ASN1Dict([
        ('id', _SMIME_CAPS_id),
        ('Type', _SMIME_CAPS_Type),
        ])
    
    #-----< SMIMECapability >-----#
    SMIMECapability = SEQ(name='SMIMECapability', mode=MODE_TYPE, param=True)
    
    #-----< SMIMECapabilities >-----#
    SMIMECapabilities = SEQ_OF(name='SMIMECapabilities', mode=MODE_TYPE, param=True)
    
    _all_ = [
        ParamOptions,
        _DIGEST_ALGORITHM_id,
        _DIGEST_ALGORITHM_Params,
        _DIGEST_ALGORITHM_paramPresence,
        DIGEST_ALGORITHM,
        _SIGNATURE_ALGORITHM_id,
        _SIGNATURE_ALGORITHM_Value,
        _SIGNATURE_ALGORITHM_Params,
        _SIGNATURE_ALGORITHM_paramPresence,
        _SIGNATURE_ALGORITHM_HashSet,
        _SIGNATURE_ALGORITHM_PublicKeySet,
        _SIGNATURE_ALGORITHM_smimeCaps,
        SIGNATURE_ALGORITHM,
        _PUBLIC_KEY_id,
        _PUBLIC_KEY_KeyValue,
        _PUBLIC_KEY_Params,
        _PUBLIC_KEY_paramPresence,
        _PUBLIC_KEY_keyUsage,
        _PUBLIC_KEY_PrivateKey,
        PUBLIC_KEY,
        _KEY_TRANSPORT_id,
        _KEY_TRANSPORT_Params,
        _KEY_TRANSPORT_paramPresence,
        _KEY_TRANSPORT_PublicKeySet,
        _KEY_TRANSPORT_smimeCaps,
        KEY_TRANSPORT,
        _KEY_AGREE_id,
        _KEY_AGREE_Params,
        _KEY_AGREE_paramPresence,
        _KEY_AGREE_PublicKeySet,
        _KEY_AGREE_Ukm,
        _KEY_AGREE_ukmPresence,
        _KEY_AGREE_smimeCaps,
        KEY_AGREE,
        _KEY_WRAP_id,
        _KEY_WRAP_Params,
        _KEY_WRAP_paramPresence,
        _KEY_WRAP_smimeCaps,
        KEY_WRAP,
        _KEY_DERIVATION_id,
        _KEY_DERIVATION_Params,
        _KEY_DERIVATION_paramPresence,
        _KEY_DERIVATION_smimeCaps,
        KEY_DERIVATION,
        _MAC_ALGORITHM_id,
        _MAC_ALGORITHM_Params,
        _MAC_ALGORITHM_paramPresence,
        _MAC_ALGORITHM_keyed,
        _MAC_ALGORITHM_smimeCaps,
        MAC_ALGORITHM,
        _CONTENT_ENCRYPTION_id,
        _CONTENT_ENCRYPTION_Params,
        _CONTENT_ENCRYPTION_paramPresence,
        _CONTENT_ENCRYPTION_smimeCaps,
        CONTENT_ENCRYPTION,
        _ALGORITHM_id,
        _ALGORITHM_Params,
        _ALGORITHM_paramPresence,
        _ALGORITHM_smimeCaps,
        ALGORITHM,
        _SMIME_CAPS_id,
        _SMIME_CAPS_Type,
        SMIME_CAPS,
    ]

class CMS_AES_CCM_and_AES_GCM_2009:

    _name_  = 'CMS-AES-CCM-and-AES-GCM-2009'
    _oid_   = [1, 2, 840, 113549, 1, 9, 16, 0, 44]
    
    _obj_ = [
        'ContentEncryptionAlgs',
        'SMimeCaps',
        'aes',
        'cea-aes128-CCM',
        'id-aes128-CCM',
        'cea-aes192-CCM',
        'id-aes192-CCM',
        'cea-aes256-CCM',
        'id-aes256-CCM',
        'cea-aes128-GCM',
        'id-aes128-GCM',
        'cea-aes192-GCM',
        'id-aes192-GCM',
        'cea-aes256-GCM',
        'id-aes256-GCM',
        'CCMParameters',
        'AES-CCM-ICVlen',
        'GCMParameters',
        'AES-GCM-ICVlen',
        ]
    _type_ = [
        'CCMParameters',
        'AES-CCM-ICVlen',
        'GCMParameters',
        'AES-GCM-ICVlen',
        ]
    _set_ = [
        'ContentEncryptionAlgs',
        'SMimeCaps',
        ]
    _val_ = [
        'aes',
        'cea-aes128-CCM',
        'id-aes128-CCM',
        'cea-aes192-CCM',
        'id-aes192-CCM',
        'cea-aes256-CCM',
        'id-aes256-CCM',
        'cea-aes128-GCM',
        'id-aes128-GCM',
        'cea-aes192-GCM',
        'id-aes192-GCM',
        'cea-aes256-GCM',
        'id-aes256-GCM',
        ]
    _class_ = [
        'ContentEncryptionAlgs',
        'SMimeCaps',
        'cea-aes128-CCM',
        'cea-aes192-CCM',
        'cea-aes256-CCM',
        'cea-aes128-GCM',
        'cea-aes192-GCM',
        'cea-aes256-GCM',
        ]
    _param_ = [
        ]
    
    #-----< ContentEncryptionAlgs >-----#
    ContentEncryptionAlgs = CLASS(name='ContentEncryptionAlgs', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'CONTENT-ENCRYPTION')))
    _ContentEncryptionAlgs_val_Params_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CMS-AES-CCM-and-AES-GCM-2009', 'CCMParameters')))
    _ContentEncryptionAlgs_val_Params_1 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CMS-AES-CCM-and-AES-GCM-2009', 'CCMParameters')))
    _ContentEncryptionAlgs_val_Params_2 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CMS-AES-CCM-and-AES-GCM-2009', 'CCMParameters')))
    _ContentEncryptionAlgs_val_Params_3 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CMS-AES-CCM-and-AES-GCM-2009', 'GCMParameters')))
    _ContentEncryptionAlgs_val_Params_4 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CMS-AES-CCM-and-AES-GCM-2009', 'GCMParameters')))
    _ContentEncryptionAlgs_val_Params_5 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CMS-AES-CCM-and-AES-GCM-2009', 'GCMParameters')))
    ContentEncryptionAlgs._val = ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 7)), ('Params', _ContentEncryptionAlgs_val_Params_0), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 7))]))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 27)), ('Params', _ContentEncryptionAlgs_val_Params_1), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 27))]))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 47)), ('Params', _ContentEncryptionAlgs_val_Params_2), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 47))]))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 6)), ('Params', _ContentEncryptionAlgs_val_Params_3), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 6))]))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 6)), ('Params', _ContentEncryptionAlgs_val_Params_4), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 26))]))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 6)), ('Params', _ContentEncryptionAlgs_val_Params_5), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 46))]))])], rr=[], ev=[], er=[])
    
    #-----< SMimeCaps >-----#
    SMimeCaps = CLASS(name='SMimeCaps', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')))
    SMimeCaps._val = ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 7))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 27))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 47))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 6))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 26))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 46))])], rr=[], ev=[], er=[])
    
    #-----< aes >-----#
    aes = OID(name='aes', mode=MODE_VALUE)
    aes._val = (2, 16, 840, 1, 101, 3, 4, 1)
    
    #-----< cea-aes128-CCM >-----#
    cea_aes128_CCM = CLASS(name='cea-aes128-CCM', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'CONTENT-ENCRYPTION')))
    _cea_aes128_CCM_val_Params = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CMS-AES-CCM-and-AES-GCM-2009', 'CCMParameters')))
    cea_aes128_CCM._val = dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 7)), ('Params', _cea_aes128_CCM_val_Params), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 7))]))])
    
    #-----< id-aes128-CCM >-----#
    id_aes128_CCM = OID(name='id-aes128-CCM', mode=MODE_VALUE)
    id_aes128_CCM._val = (2, 16, 840, 1, 101, 3, 4, 1, 7)
    
    #-----< cea-aes192-CCM >-----#
    cea_aes192_CCM = CLASS(name='cea-aes192-CCM', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'CONTENT-ENCRYPTION')))
    _cea_aes192_CCM_val_Params = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CMS-AES-CCM-and-AES-GCM-2009', 'CCMParameters')))
    cea_aes192_CCM._val = dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 27)), ('Params', _cea_aes192_CCM_val_Params), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 27))]))])
    
    #-----< id-aes192-CCM >-----#
    id_aes192_CCM = OID(name='id-aes192-CCM', mode=MODE_VALUE)
    id_aes192_CCM._val = (2, 16, 840, 1, 101, 3, 4, 1, 27)
    
    #-----< cea-aes256-CCM >-----#
    cea_aes256_CCM = CLASS(name='cea-aes256-CCM', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'CONTENT-ENCRYPTION')))
    _cea_aes256_CCM_val_Params = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CMS-AES-CCM-and-AES-GCM-2009', 'CCMParameters')))
    cea_aes256_CCM._val = dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 47)), ('Params', _cea_aes256_CCM_val_Params), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 47))]))])
    
    #-----< id-aes256-CCM >-----#
    id_aes256_CCM = OID(name='id-aes256-CCM', mode=MODE_VALUE)
    id_aes256_CCM._val = (2, 16, 840, 1, 101, 3, 4, 1, 47)
    
    #-----< cea-aes128-GCM >-----#
    cea_aes128_GCM = CLASS(name='cea-aes128-GCM', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'CONTENT-ENCRYPTION')))
    _cea_aes128_GCM_val_Params = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CMS-AES-CCM-and-AES-GCM-2009', 'GCMParameters')))
    cea_aes128_GCM._val = dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 6)), ('Params', _cea_aes128_GCM_val_Params), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 6))]))])
    
    #-----< id-aes128-GCM >-----#
    id_aes128_GCM = OID(name='id-aes128-GCM', mode=MODE_VALUE)
    id_aes128_GCM._val = (2, 16, 840, 1, 101, 3, 4, 1, 6)
    
    #-----< cea-aes192-GCM >-----#
    cea_aes192_GCM = CLASS(name='cea-aes192-GCM', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'CONTENT-ENCRYPTION')))
    _cea_aes192_GCM_val_Params = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CMS-AES-CCM-and-AES-GCM-2009', 'GCMParameters')))
    cea_aes192_GCM._val = dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 6)), ('Params', _cea_aes192_GCM_val_Params), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 26))]))])
    
    #-----< id-aes192-GCM >-----#
    id_aes192_GCM = OID(name='id-aes192-GCM', mode=MODE_VALUE)
    id_aes192_GCM._val = (2, 16, 840, 1, 101, 3, 4, 1, 26)
    
    #-----< cea-aes256-GCM >-----#
    cea_aes256_GCM = CLASS(name='cea-aes256-GCM', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'CONTENT-ENCRYPTION')))
    _cea_aes256_GCM_val_Params = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CMS-AES-CCM-and-AES-GCM-2009', 'GCMParameters')))
    cea_aes256_GCM._val = dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 6)), ('Params', _cea_aes256_GCM_val_Params), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 46))]))])
    
    #-----< id-aes256-GCM >-----#
    id_aes256_GCM = OID(name='id-aes256-GCM', mode=MODE_VALUE)
    id_aes256_GCM._val = (2, 16, 840, 1, 101, 3, 4, 1, 46)
    
    #-----< CCMParameters >-----#
    CCMParameters = SEQ(name='CCMParameters', mode=MODE_TYPE)
    _CCMParameters_aes_nonce = OCT_STR(name='aes-nonce', mode=MODE_TYPE)
    _CCMParameters_aes_nonce._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=7, ub=13)], ev=None, er=[])
    _CCMParameters_aes_ICVlen = INT(name='aes-ICVlen', mode=MODE_TYPE, typeref=ASN1RefType(('CMS-AES-CCM-and-AES-GCM-2009', 'AES-CCM-ICVlen')), default=12)
    CCMParameters._cont = ASN1Dict([
        ('aes-nonce', _CCMParameters_aes_nonce),
        ('aes-ICVlen', _CCMParameters_aes_ICVlen),
        ])
    CCMParameters._ext = None
    
    #-----< AES-CCM-ICVlen >-----#
    AES_CCM_ICVlen = INT(name='AES-CCM-ICVlen', mode=MODE_TYPE)
    AES_CCM_ICVlen._const_val = ASN1Set(rv=[4, 6, 8, 10, 12, 14, 16], rr=[], ev=None, er=[])
    
    #-----< GCMParameters >-----#
    GCMParameters = SEQ(name='GCMParameters', mode=MODE_TYPE)
    _GCMParameters_aes_nonce = OCT_STR(name='aes-nonce', mode=MODE_TYPE)
    _GCMParameters_aes_ICVlen = INT(name='aes-ICVlen', mode=MODE_TYPE, typeref=ASN1RefType(('CMS-AES-CCM-and-AES-GCM-2009', 'AES-GCM-ICVlen')), default=12)
    GCMParameters._cont = ASN1Dict([
        ('aes-nonce', _GCMParameters_aes_nonce),
        ('aes-ICVlen', _GCMParameters_aes_ICVlen),
        ])
    GCMParameters._ext = None
    
    #-----< AES-GCM-ICVlen >-----#
    AES_GCM_ICVlen = INT(name='AES-GCM-ICVlen', mode=MODE_TYPE)
    AES_GCM_ICVlen._const_val = ASN1Set(rv=[12, 13, 14, 15, 16], rr=[], ev=None, er=[])
    
    _all_ = [
        ContentEncryptionAlgs,
        _ContentEncryptionAlgs_val_Params_0,
        _ContentEncryptionAlgs_val_Params_1,
        _ContentEncryptionAlgs_val_Params_2,
        _ContentEncryptionAlgs_val_Params_3,
        _ContentEncryptionAlgs_val_Params_4,
        _ContentEncryptionAlgs_val_Params_5,
        SMimeCaps,
        aes,
        cea_aes128_CCM,
        _cea_aes128_CCM_val_Params,
        id_aes128_CCM,
        cea_aes192_CCM,
        _cea_aes192_CCM_val_Params,
        id_aes192_CCM,
        cea_aes256_CCM,
        _cea_aes256_CCM_val_Params,
        id_aes256_CCM,
        cea_aes128_GCM,
        _cea_aes128_GCM_val_Params,
        id_aes128_GCM,
        cea_aes192_GCM,
        _cea_aes192_GCM_val_Params,
        id_aes192_GCM,
        cea_aes256_GCM,
        _cea_aes256_GCM_val_Params,
        id_aes256_GCM,
        _CCMParameters_aes_nonce,
        _CCMParameters_aes_ICVlen,
        CCMParameters,
        AES_CCM_ICVlen,
        _GCMParameters_aes_nonce,
        _GCMParameters_aes_ICVlen,
        GCMParameters,
        AES_GCM_ICVlen,
    ]

class CMSAesRsaesOaep_2009:

    _name_  = 'CMSAesRsaesOaep-2009'
    _oid_   = [1, 2, 840, 113549, 1, 9, 16, 0, 38]
    
    _obj_ = [
        'AES-ContentEncryption',
        'AES-KeyWrap',
        'SMimeCaps',
        'aes',
        'cea-aes128-cbc',
        'id-aes128-CBC',
        'cea-aes192-cbc',
        'id-aes192-CBC',
        'cea-aes256-cbc',
        'id-aes256-CBC',
        'AES-IV',
        'kwa-aes128-wrap',
        'id-aes128-wrap',
        'kwa-aes192-wrap',
        'id-aes192-wrap',
        'kwa-aes256-wrap',
        'id-aes256-wrap',
        ]
    _type_ = [
        'AES-IV',
        ]
    _set_ = [
        'AES-ContentEncryption',
        'AES-KeyWrap',
        'SMimeCaps',
        ]
    _val_ = [
        'aes',
        'cea-aes128-cbc',
        'id-aes128-CBC',
        'cea-aes192-cbc',
        'id-aes192-CBC',
        'cea-aes256-cbc',
        'id-aes256-CBC',
        'kwa-aes128-wrap',
        'id-aes128-wrap',
        'kwa-aes192-wrap',
        'id-aes192-wrap',
        'kwa-aes256-wrap',
        'id-aes256-wrap',
        ]
    _class_ = [
        'AES-ContentEncryption',
        'AES-KeyWrap',
        'SMimeCaps',
        'cea-aes128-cbc',
        'cea-aes192-cbc',
        'cea-aes256-cbc',
        'kwa-aes128-wrap',
        'kwa-aes192-wrap',
        'kwa-aes256-wrap',
        ]
    _param_ = [
        ]
    
    #-----< AES-ContentEncryption >-----#
    AES_ContentEncryption = CLASS(name='AES-ContentEncryption', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'CONTENT-ENCRYPTION')))
    _AES_ContentEncryption_val_Params_0 = OCT_STR(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CMSAesRsaesOaep-2009', 'AES-IV')))
    _AES_ContentEncryption_val_Params_1 = OCT_STR(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CMSAesRsaesOaep-2009', 'AES-IV')))
    _AES_ContentEncryption_val_Params_2 = OCT_STR(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CMSAesRsaesOaep-2009', 'AES-IV')))
    AES_ContentEncryption._val = ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 2)), ('Params', _AES_ContentEncryption_val_Params_0), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 2))]))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 22)), ('Params', _AES_ContentEncryption_val_Params_1), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 22))]))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 42)), ('Params', _AES_ContentEncryption_val_Params_2), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 42))]))])], rr=[], ev=[], er=[])
    
    #-----< AES-KeyWrap >-----#
    AES_KeyWrap = CLASS(name='AES-KeyWrap', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-WRAP')))
    AES_KeyWrap._val = ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 5)), ('paramPresence', 'absent'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 5))]))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 25)), ('paramPresence', 'absent'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 25))]))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 45)), ('paramPresence', 'absent'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 45))]))])], rr=[], ev=[], er=[])
    
    #-----< SMimeCaps >-----#
    SMimeCaps = CLASS(name='SMimeCaps', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')))
    SMimeCaps._val = ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 2))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 22))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 42))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 5))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 25))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 45))])], rr=[], ev=[], er=[])
    
    #-----< aes >-----#
    aes = OID(name='aes', mode=MODE_VALUE)
    aes._val = (2, 16, 840, 1, 101, 3, 4, 1)
    
    #-----< cea-aes128-cbc >-----#
    cea_aes128_cbc = CLASS(name='cea-aes128-cbc', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'CONTENT-ENCRYPTION')))
    _cea_aes128_cbc_val_Params = OCT_STR(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CMSAesRsaesOaep-2009', 'AES-IV')))
    cea_aes128_cbc._val = dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 2)), ('Params', _cea_aes128_cbc_val_Params), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 2))]))])
    
    #-----< id-aes128-CBC >-----#
    id_aes128_CBC = OID(name='id-aes128-CBC', mode=MODE_VALUE)
    id_aes128_CBC._val = (2, 16, 840, 1, 101, 3, 4, 1, 2)
    
    #-----< cea-aes192-cbc >-----#
    cea_aes192_cbc = CLASS(name='cea-aes192-cbc', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'CONTENT-ENCRYPTION')))
    _cea_aes192_cbc_val_Params = OCT_STR(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CMSAesRsaesOaep-2009', 'AES-IV')))
    cea_aes192_cbc._val = dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 22)), ('Params', _cea_aes192_cbc_val_Params), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 22))]))])
    
    #-----< id-aes192-CBC >-----#
    id_aes192_CBC = OID(name='id-aes192-CBC', mode=MODE_VALUE)
    id_aes192_CBC._val = (2, 16, 840, 1, 101, 3, 4, 1, 22)
    
    #-----< cea-aes256-cbc >-----#
    cea_aes256_cbc = CLASS(name='cea-aes256-cbc', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'CONTENT-ENCRYPTION')))
    _cea_aes256_cbc_val_Params = OCT_STR(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CMSAesRsaesOaep-2009', 'AES-IV')))
    cea_aes256_cbc._val = dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 42)), ('Params', _cea_aes256_cbc_val_Params), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 42))]))])
    
    #-----< id-aes256-CBC >-----#
    id_aes256_CBC = OID(name='id-aes256-CBC', mode=MODE_VALUE)
    id_aes256_CBC._val = (2, 16, 840, 1, 101, 3, 4, 1, 42)
    
    #-----< AES-IV >-----#
    AES_IV = OCT_STR(name='AES-IV', mode=MODE_TYPE)
    AES_IV._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    #-----< kwa-aes128-wrap >-----#
    kwa_aes128_wrap = CLASS(name='kwa-aes128-wrap', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-WRAP')))
    kwa_aes128_wrap._val = dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 5)), ('paramPresence', 'absent'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 5))]))])
    
    #-----< id-aes128-wrap >-----#
    id_aes128_wrap = OID(name='id-aes128-wrap', mode=MODE_VALUE)
    id_aes128_wrap._val = (2, 16, 840, 1, 101, 3, 4, 1, 5)
    
    #-----< kwa-aes192-wrap >-----#
    kwa_aes192_wrap = CLASS(name='kwa-aes192-wrap', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-WRAP')))
    kwa_aes192_wrap._val = dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 25)), ('paramPresence', 'absent'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 25))]))])
    
    #-----< id-aes192-wrap >-----#
    id_aes192_wrap = OID(name='id-aes192-wrap', mode=MODE_VALUE)
    id_aes192_wrap._val = (2, 16, 840, 1, 101, 3, 4, 1, 25)
    
    #-----< kwa-aes256-wrap >-----#
    kwa_aes256_wrap = CLASS(name='kwa-aes256-wrap', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-WRAP')))
    kwa_aes256_wrap._val = dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 45)), ('paramPresence', 'absent'), ('smimeCaps', dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 45))]))])
    
    #-----< id-aes256-wrap >-----#
    id_aes256_wrap = OID(name='id-aes256-wrap', mode=MODE_VALUE)
    id_aes256_wrap._val = (2, 16, 840, 1, 101, 3, 4, 1, 45)
    
    _all_ = [
        AES_ContentEncryption,
        _AES_ContentEncryption_val_Params_0,
        _AES_ContentEncryption_val_Params_1,
        _AES_ContentEncryption_val_Params_2,
        AES_KeyWrap,
        SMimeCaps,
        aes,
        cea_aes128_cbc,
        _cea_aes128_cbc_val_Params,
        id_aes128_CBC,
        cea_aes192_cbc,
        _cea_aes192_cbc_val_Params,
        id_aes192_CBC,
        cea_aes256_cbc,
        _cea_aes256_cbc_val_Params,
        id_aes256_CBC,
        AES_IV,
        kwa_aes128_wrap,
        id_aes128_wrap,
        kwa_aes192_wrap,
        id_aes192_wrap,
        kwa_aes256_wrap,
        id_aes256_wrap,
    ]

class CMS_AuthEnvelopedData_2009:

    _name_  = 'CMS-AuthEnvelopedData-2009'
    _oid_   = [1, 2, 840, 113549, 1, 9, 16, 0, 43]
    
    _obj_ = [
        'ContentTypes',
        'ct-authEnvelopedData',
        'id-ct-authEnvelopedData',
        'AuthEnvelopedData',
        ]
    _type_ = [
        'AuthEnvelopedData',
        ]
    _set_ = [
        'ContentTypes',
        ]
    _val_ = [
        'ct-authEnvelopedData',
        'id-ct-authEnvelopedData',
        ]
    _class_ = [
        'ContentTypes',
        'ct-authEnvelopedData',
        ]
    _param_ = [
        ]
    
    #-----< ContentTypes >-----#
    ContentTypes = CLASS(name='ContentTypes', mode=MODE_SET, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE')))
    _ContentTypes_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMS-AuthEnvelopedData-2009', 'AuthEnvelopedData')))
    ContentTypes._val = ASN1Set(rv=[dict([('Type', _ContentTypes_val_Type_0), ('id', (1, 2, 840, 113549, 1, 9, 16, 1, 23))])], rr=[], ev=[], er=[])
    
    #-----< ct-authEnvelopedData >-----#
    ct_authEnvelopedData = CLASS(name='ct-authEnvelopedData', mode=MODE_VALUE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE')))
    _ct_authEnvelopedData_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMS-AuthEnvelopedData-2009', 'AuthEnvelopedData')))
    ct_authEnvelopedData._val = dict([('Type', _ct_authEnvelopedData_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 1, 23))])
    
    #-----< id-ct-authEnvelopedData >-----#
    id_ct_authEnvelopedData = OID(name='id-ct-authEnvelopedData', mode=MODE_VALUE)
    id_ct_authEnvelopedData._val = (1, 2, 840, 113549, 1, 9, 16, 1, 23)
    
    #-----< AuthEnvelopedData >-----#
    AuthEnvelopedData = SEQ(name='AuthEnvelopedData', mode=MODE_TYPE)
    _AuthEnvelopedData_version = INT(name='version', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CMSVersion')))
    _AuthEnvelopedData_originatorInfo = SEQ(name='originatorInfo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'OriginatorInfo')), opt=True)
    _AuthEnvelopedData_recipientInfos = SET_OF(name='recipientInfos', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'RecipientInfos')))
    _AuthEnvelopedData_authEncryptedContentInfo = SEQ(name='authEncryptedContentInfo', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EncryptedContentInfo')))
    _AuthEnvelopedData_authAttrs = SET_OF(name='authAttrs', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'AuthAttributes')), opt=True)
    _AuthEnvelopedData_mac = OCT_STR(name='mac', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'MessageAuthenticationCode')))
    _AuthEnvelopedData_unauthAttrs = SET_OF(name='unauthAttrs', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'UnauthAttributes')), opt=True)
    AuthEnvelopedData._cont = ASN1Dict([
        ('version', _AuthEnvelopedData_version),
        ('originatorInfo', _AuthEnvelopedData_originatorInfo),
        ('recipientInfos', _AuthEnvelopedData_recipientInfos),
        ('authEncryptedContentInfo', _AuthEnvelopedData_authEncryptedContentInfo),
        ('authAttrs', _AuthEnvelopedData_authAttrs),
        ('mac', _AuthEnvelopedData_mac),
        ('unauthAttrs', _AuthEnvelopedData_unauthAttrs),
        ])
    AuthEnvelopedData._ext = None
    
    _all_ = [
        ContentTypes,
        _ContentTypes_val_Type_0,
        ct_authEnvelopedData,
        _ct_authEnvelopedData_val_Type,
        id_ct_authEnvelopedData,
        _AuthEnvelopedData_version,
        _AuthEnvelopedData_originatorInfo,
        _AuthEnvelopedData_recipientInfos,
        _AuthEnvelopedData_authEncryptedContentInfo,
        _AuthEnvelopedData_authAttrs,
        _AuthEnvelopedData_mac,
        _AuthEnvelopedData_unauthAttrs,
        AuthEnvelopedData,
    ]

class CMSFirmwareWrapper_2009:

    _name_  = 'CMSFirmwareWrapper-2009'
    _oid_   = [1, 2, 840, 113549, 1, 9, 16, 0, 40]
    
    _obj_ = [
        'FirmwareContentTypes',
        'FirmwareSignedAttrs',
        'FirmwareUnsignedAttrs',
        'FirmwareOtherNames',
        'ct-firmwarePackage',
        'id-ct-firmwarePackage',
        'FirmwarePkgData',
        'aa-firmwarePackageID',
        'id-aa-firmwarePackageID',
        'FirmwarePackageIdentifier',
        'PreferredOrLegacyPackageIdentifier',
        'PreferredPackageIdentifier',
        'PreferredOrLegacyStalePackageIdentifier',
        'aa-targetHardwareIDs',
        'id-aa-targetHardwareIDs',
        'TargetHardwareIdentifiers',
        'aa-decryptKeyID',
        'id-aa-decryptKeyID',
        'DecryptKeyIdentifier',
        'aa-implCryptoAlgs',
        'id-aa-implCryptoAlgs',
        'ImplementedCryptoAlgorithms',
        'aa-implCompressAlgs',
        'id-aa-implCompressAlgs',
        'ImplementedCompressAlgorithms',
        'aa-communityIdentifiers',
        'id-aa-communityIdentifiers',
        'CommunityIdentifiers',
        'CommunityIdentifier',
        'HardwareModules',
        'HardwareSerialEntry',
        'aa-firmwarePackageInfo',
        'id-aa-firmwarePackageInfo',
        'FirmwarePackageInfo',
        'aa-wrappedFirmwareKey',
        'id-aa-wrappedFirmwareKey',
        'WrappedFirmwareKey',
        'ct-firmwareLoadReceipt',
        'id-ct-firmwareLoadReceipt',
        'FirmwarePackageLoadReceipt',
        'FWReceiptVersion',
        'ct-firmwareLoadError',
        'id-ct-firmwareLoadError',
        'FirmwarePackageLoadError',
        'FWErrorVersion',
        'CurrentFWConfig',
        'FirmwarePackageLoadErrorCode',
        'VendorLoadErrorCode',
        'on-hardwareModuleName',
        'id-on-hardwareModuleName',
        'HardwareModuleName',
        ]
    _type_ = [
        'FirmwarePkgData',
        'FirmwarePackageIdentifier',
        'PreferredOrLegacyPackageIdentifier',
        'PreferredPackageIdentifier',
        'PreferredOrLegacyStalePackageIdentifier',
        'TargetHardwareIdentifiers',
        'DecryptKeyIdentifier',
        'ImplementedCryptoAlgorithms',
        'ImplementedCompressAlgorithms',
        'CommunityIdentifiers',
        'CommunityIdentifier',
        'HardwareModules',
        'HardwareSerialEntry',
        'FirmwarePackageInfo',
        'WrappedFirmwareKey',
        'FirmwarePackageLoadReceipt',
        'FWReceiptVersion',
        'FirmwarePackageLoadError',
        'FWErrorVersion',
        'CurrentFWConfig',
        'FirmwarePackageLoadErrorCode',
        'VendorLoadErrorCode',
        'HardwareModuleName',
        ]
    _set_ = [
        'FirmwareContentTypes',
        'FirmwareSignedAttrs',
        'FirmwareUnsignedAttrs',
        'FirmwareOtherNames',
        ]
    _val_ = [
        'ct-firmwarePackage',
        'id-ct-firmwarePackage',
        'aa-firmwarePackageID',
        'id-aa-firmwarePackageID',
        'aa-targetHardwareIDs',
        'id-aa-targetHardwareIDs',
        'aa-decryptKeyID',
        'id-aa-decryptKeyID',
        'aa-implCryptoAlgs',
        'id-aa-implCryptoAlgs',
        'aa-implCompressAlgs',
        'id-aa-implCompressAlgs',
        'aa-communityIdentifiers',
        'id-aa-communityIdentifiers',
        'aa-firmwarePackageInfo',
        'id-aa-firmwarePackageInfo',
        'aa-wrappedFirmwareKey',
        'id-aa-wrappedFirmwareKey',
        'ct-firmwareLoadReceipt',
        'id-ct-firmwareLoadReceipt',
        'ct-firmwareLoadError',
        'id-ct-firmwareLoadError',
        'on-hardwareModuleName',
        'id-on-hardwareModuleName',
        ]
    _class_ = [
        'FirmwareContentTypes',
        'FirmwareSignedAttrs',
        'FirmwareUnsignedAttrs',
        'FirmwareOtherNames',
        'ct-firmwarePackage',
        'aa-firmwarePackageID',
        'aa-targetHardwareIDs',
        'aa-decryptKeyID',
        'aa-implCryptoAlgs',
        'aa-implCompressAlgs',
        'aa-communityIdentifiers',
        'aa-firmwarePackageInfo',
        'aa-wrappedFirmwareKey',
        'ct-firmwareLoadReceipt',
        'ct-firmwareLoadError',
        'on-hardwareModuleName',
        ]
    _param_ = [
        ]
    
    #-----< FirmwareContentTypes >-----#
    FirmwareContentTypes = CLASS(name='FirmwareContentTypes', mode=MODE_SET, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE')))
    _FirmwareContentTypes_val_Type_0 = OCT_STR(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'FirmwarePkgData')))
    _FirmwareContentTypes_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'FirmwarePackageLoadReceipt')))
    _FirmwareContentTypes_val_Type_2 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'FirmwarePackageLoadError')))
    FirmwareContentTypes._val = ASN1Set(rv=[dict([('Type', _FirmwareContentTypes_val_Type_0), ('id', (1, 2, 840, 113549, 1, 9, 16, 1, 16))]), dict([('Type', _FirmwareContentTypes_val_Type_1), ('id', (1, 2, 840, 113549, 1, 9, 16, 1, 17))]), dict([('Type', _FirmwareContentTypes_val_Type_2), ('id', (1, 2, 840, 113549, 1, 9, 16, 1, 18))])], rr=[], ev=[], er=[])
    
    #-----< FirmwareSignedAttrs >-----#
    FirmwareSignedAttrs = CLASS(name='FirmwareSignedAttrs', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _FirmwareSignedAttrs_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'FirmwarePackageIdentifier')))
    _FirmwareSignedAttrs_val_Type_1 = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'TargetHardwareIdentifiers')))
    _FirmwareSignedAttrs_val_Type_2 = OCT_STR(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'DecryptKeyIdentifier')))
    _FirmwareSignedAttrs_val_Type_3 = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'ImplementedCryptoAlgorithms')))
    _FirmwareSignedAttrs_val_Type_4 = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'ImplementedCompressAlgorithms')))
    _FirmwareSignedAttrs_val_Type_5 = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'CommunityIdentifiers')))
    _FirmwareSignedAttrs_val_Type_6 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'FirmwarePackageInfo')))
    FirmwareSignedAttrs._val = ASN1Set(rv=[dict([('Type', _FirmwareSignedAttrs_val_Type_0), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 35))]), dict([('Type', _FirmwareSignedAttrs_val_Type_1), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 36))]), dict([('Type', _FirmwareSignedAttrs_val_Type_2), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 37))]), dict([('Type', _FirmwareSignedAttrs_val_Type_3), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 38))]), dict([('Type', _FirmwareSignedAttrs_val_Type_4), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 43))]), dict([('Type', _FirmwareSignedAttrs_val_Type_5), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 40))]), dict([('Type', _FirmwareSignedAttrs_val_Type_6), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 42))])], rr=[], ev=[], er=[])
    
    #-----< FirmwareUnsignedAttrs >-----#
    FirmwareUnsignedAttrs = CLASS(name='FirmwareUnsignedAttrs', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _FirmwareUnsignedAttrs_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'WrappedFirmwareKey')))
    FirmwareUnsignedAttrs._val = ASN1Set(rv=[dict([('Type', _FirmwareUnsignedAttrs_val_Type_0), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 39))])], rr=[], ev=[], er=[])
    
    #-----< FirmwareOtherNames >-----#
    FirmwareOtherNames = CLASS(name='FirmwareOtherNames', mode=MODE_SET, typeref=ASN1RefType(('PKIX1Implicit-2009', 'OTHER-NAME')))
    _FirmwareOtherNames_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'HardwareModuleName')))
    FirmwareOtherNames._val = ASN1Set(rv=[dict([('Type', _FirmwareOtherNames_val_Type_0), ('id', (1, 3, 6, 1, 5, 5, 7, 8, 4))])], rr=[], ev=[], er=[])
    
    #-----< ct-firmwarePackage >-----#
    ct_firmwarePackage = CLASS(name='ct-firmwarePackage', mode=MODE_VALUE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE')))
    _ct_firmwarePackage_val_Type = OCT_STR(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'FirmwarePkgData')))
    ct_firmwarePackage._val = dict([('Type', _ct_firmwarePackage_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 1, 16))])
    
    #-----< id-ct-firmwarePackage >-----#
    id_ct_firmwarePackage = OID(name='id-ct-firmwarePackage', mode=MODE_VALUE)
    id_ct_firmwarePackage._val = (1, 2, 840, 113549, 1, 9, 16, 1, 16)
    
    #-----< FirmwarePkgData >-----#
    FirmwarePkgData = OCT_STR(name='FirmwarePkgData', mode=MODE_TYPE)
    
    #-----< aa-firmwarePackageID >-----#
    aa_firmwarePackageID = CLASS(name='aa-firmwarePackageID', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_firmwarePackageID_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'FirmwarePackageIdentifier')))
    aa_firmwarePackageID._val = dict([('Type', _aa_firmwarePackageID_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 35))])
    
    #-----< id-aa-firmwarePackageID >-----#
    id_aa_firmwarePackageID = OID(name='id-aa-firmwarePackageID', mode=MODE_VALUE)
    id_aa_firmwarePackageID._val = (1, 2, 840, 113549, 1, 9, 16, 2, 35)
    
    #-----< FirmwarePackageIdentifier >-----#
    FirmwarePackageIdentifier = SEQ(name='FirmwarePackageIdentifier', mode=MODE_TYPE)
    _FirmwarePackageIdentifier_name = CHOICE(name='name', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'PreferredOrLegacyPackageIdentifier')))
    _FirmwarePackageIdentifier_stale = CHOICE(name='stale', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'PreferredOrLegacyStalePackageIdentifier')), opt=True)
    FirmwarePackageIdentifier._cont = ASN1Dict([
        ('name', _FirmwarePackageIdentifier_name),
        ('stale', _FirmwarePackageIdentifier_stale),
        ])
    FirmwarePackageIdentifier._ext = None
    
    #-----< PreferredOrLegacyPackageIdentifier >-----#
    PreferredOrLegacyPackageIdentifier = CHOICE(name='PreferredOrLegacyPackageIdentifier', mode=MODE_TYPE)
    _PreferredOrLegacyPackageIdentifier_preferred = SEQ(name='preferred', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'PreferredPackageIdentifier')))
    _PreferredOrLegacyPackageIdentifier_legacy = OCT_STR(name='legacy', mode=MODE_TYPE)
    PreferredOrLegacyPackageIdentifier._cont = ASN1Dict([
        ('preferred', _PreferredOrLegacyPackageIdentifier_preferred),
        ('legacy', _PreferredOrLegacyPackageIdentifier_legacy),
        ])
    PreferredOrLegacyPackageIdentifier._ext = None
    
    #-----< PreferredPackageIdentifier >-----#
    PreferredPackageIdentifier = SEQ(name='PreferredPackageIdentifier', mode=MODE_TYPE)
    _PreferredPackageIdentifier_fwPkgID = OID(name='fwPkgID', mode=MODE_TYPE)
    _PreferredPackageIdentifier_verNum = INT(name='verNum', mode=MODE_TYPE)
    _PreferredPackageIdentifier_verNum._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    PreferredPackageIdentifier._cont = ASN1Dict([
        ('fwPkgID', _PreferredPackageIdentifier_fwPkgID),
        ('verNum', _PreferredPackageIdentifier_verNum),
        ])
    PreferredPackageIdentifier._ext = None
    
    #-----< PreferredOrLegacyStalePackageIdentifier >-----#
    PreferredOrLegacyStalePackageIdentifier = CHOICE(name='PreferredOrLegacyStalePackageIdentifier', mode=MODE_TYPE)
    _PreferredOrLegacyStalePackageIdentifier_preferredStaleVerNum = INT(name='preferredStaleVerNum', mode=MODE_TYPE)
    _PreferredOrLegacyStalePackageIdentifier_preferredStaleVerNum._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    _PreferredOrLegacyStalePackageIdentifier_legacyStaleVersion = OCT_STR(name='legacyStaleVersion', mode=MODE_TYPE)
    PreferredOrLegacyStalePackageIdentifier._cont = ASN1Dict([
        ('preferredStaleVerNum', _PreferredOrLegacyStalePackageIdentifier_preferredStaleVerNum),
        ('legacyStaleVersion', _PreferredOrLegacyStalePackageIdentifier_legacyStaleVersion),
        ])
    PreferredOrLegacyStalePackageIdentifier._ext = None
    
    #-----< aa-targetHardwareIDs >-----#
    aa_targetHardwareIDs = CLASS(name='aa-targetHardwareIDs', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_targetHardwareIDs_val_Type = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'TargetHardwareIdentifiers')))
    aa_targetHardwareIDs._val = dict([('Type', _aa_targetHardwareIDs_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 36))])
    
    #-----< id-aa-targetHardwareIDs >-----#
    id_aa_targetHardwareIDs = OID(name='id-aa-targetHardwareIDs', mode=MODE_VALUE)
    id_aa_targetHardwareIDs._val = (1, 2, 840, 113549, 1, 9, 16, 2, 36)
    
    #-----< TargetHardwareIdentifiers >-----#
    TargetHardwareIdentifiers = SEQ_OF(name='TargetHardwareIdentifiers', mode=MODE_TYPE)
    _TargetHardwareIdentifiers__item_ = OID(name='_item_', mode=MODE_TYPE)
    TargetHardwareIdentifiers._cont = _TargetHardwareIdentifiers__item_
    
    #-----< aa-decryptKeyID >-----#
    aa_decryptKeyID = CLASS(name='aa-decryptKeyID', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_decryptKeyID_val_Type = OCT_STR(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'DecryptKeyIdentifier')))
    aa_decryptKeyID._val = dict([('Type', _aa_decryptKeyID_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 37))])
    
    #-----< id-aa-decryptKeyID >-----#
    id_aa_decryptKeyID = OID(name='id-aa-decryptKeyID', mode=MODE_VALUE)
    id_aa_decryptKeyID._val = (1, 2, 840, 113549, 1, 9, 16, 2, 37)
    
    #-----< DecryptKeyIdentifier >-----#
    DecryptKeyIdentifier = OCT_STR(name='DecryptKeyIdentifier', mode=MODE_TYPE)
    
    #-----< aa-implCryptoAlgs >-----#
    aa_implCryptoAlgs = CLASS(name='aa-implCryptoAlgs', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_implCryptoAlgs_val_Type = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'ImplementedCryptoAlgorithms')))
    aa_implCryptoAlgs._val = dict([('Type', _aa_implCryptoAlgs_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 38))])
    
    #-----< id-aa-implCryptoAlgs >-----#
    id_aa_implCryptoAlgs = OID(name='id-aa-implCryptoAlgs', mode=MODE_VALUE)
    id_aa_implCryptoAlgs._val = (1, 2, 840, 113549, 1, 9, 16, 2, 38)
    
    #-----< ImplementedCryptoAlgorithms >-----#
    ImplementedCryptoAlgorithms = SEQ_OF(name='ImplementedCryptoAlgorithms', mode=MODE_TYPE)
    _ImplementedCryptoAlgorithms__item_ = OID(name='_item_', mode=MODE_TYPE)
    ImplementedCryptoAlgorithms._cont = _ImplementedCryptoAlgorithms__item_
    
    #-----< aa-implCompressAlgs >-----#
    aa_implCompressAlgs = CLASS(name='aa-implCompressAlgs', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_implCompressAlgs_val_Type = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'ImplementedCompressAlgorithms')))
    aa_implCompressAlgs._val = dict([('Type', _aa_implCompressAlgs_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 43))])
    
    #-----< id-aa-implCompressAlgs >-----#
    id_aa_implCompressAlgs = OID(name='id-aa-implCompressAlgs', mode=MODE_VALUE)
    id_aa_implCompressAlgs._val = (1, 2, 840, 113549, 1, 9, 16, 2, 43)
    
    #-----< ImplementedCompressAlgorithms >-----#
    ImplementedCompressAlgorithms = SEQ_OF(name='ImplementedCompressAlgorithms', mode=MODE_TYPE)
    _ImplementedCompressAlgorithms__item_ = OID(name='_item_', mode=MODE_TYPE)
    ImplementedCompressAlgorithms._cont = _ImplementedCompressAlgorithms__item_
    
    #-----< aa-communityIdentifiers >-----#
    aa_communityIdentifiers = CLASS(name='aa-communityIdentifiers', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_communityIdentifiers_val_Type = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'CommunityIdentifiers')))
    aa_communityIdentifiers._val = dict([('Type', _aa_communityIdentifiers_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 40))])
    
    #-----< id-aa-communityIdentifiers >-----#
    id_aa_communityIdentifiers = OID(name='id-aa-communityIdentifiers', mode=MODE_VALUE)
    id_aa_communityIdentifiers._val = (1, 2, 840, 113549, 1, 9, 16, 2, 40)
    
    #-----< CommunityIdentifiers >-----#
    CommunityIdentifiers = SEQ_OF(name='CommunityIdentifiers', mode=MODE_TYPE)
    _CommunityIdentifiers__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'CommunityIdentifier')))
    CommunityIdentifiers._cont = _CommunityIdentifiers__item_
    
    #-----< CommunityIdentifier >-----#
    CommunityIdentifier = CHOICE(name='CommunityIdentifier', mode=MODE_TYPE)
    _CommunityIdentifier_communityOID = OID(name='communityOID', mode=MODE_TYPE)
    _CommunityIdentifier_hwModuleList = SEQ(name='hwModuleList', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'HardwareModules')))
    CommunityIdentifier._cont = ASN1Dict([
        ('communityOID', _CommunityIdentifier_communityOID),
        ('hwModuleList', _CommunityIdentifier_hwModuleList),
        ])
    CommunityIdentifier._ext = None
    
    #-----< HardwareModules >-----#
    HardwareModules = SEQ(name='HardwareModules', mode=MODE_TYPE)
    _HardwareModules_hwType = OID(name='hwType', mode=MODE_TYPE)
    _HardwareModules_hwSerialEntries = SEQ_OF(name='hwSerialEntries', mode=MODE_TYPE)
    __HardwareModules_hwSerialEntries__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'HardwareSerialEntry')))
    _HardwareModules_hwSerialEntries._cont = __HardwareModules_hwSerialEntries__item_
    HardwareModules._cont = ASN1Dict([
        ('hwType', _HardwareModules_hwType),
        ('hwSerialEntries', _HardwareModules_hwSerialEntries),
        ])
    HardwareModules._ext = None
    
    #-----< HardwareSerialEntry >-----#
    HardwareSerialEntry = CHOICE(name='HardwareSerialEntry', mode=MODE_TYPE)
    _HardwareSerialEntry_all = NULL(name='all', mode=MODE_TYPE)
    _HardwareSerialEntry_single = OCT_STR(name='single', mode=MODE_TYPE)
    _HardwareSerialEntry_block = SEQ(name='block', mode=MODE_TYPE)
    __HardwareSerialEntry_block_low = OCT_STR(name='low', mode=MODE_TYPE)
    __HardwareSerialEntry_block_high = OCT_STR(name='high', mode=MODE_TYPE)
    _HardwareSerialEntry_block._cont = ASN1Dict([
        ('low', __HardwareSerialEntry_block_low),
        ('high', __HardwareSerialEntry_block_high),
        ])
    _HardwareSerialEntry_block._ext = None
    HardwareSerialEntry._cont = ASN1Dict([
        ('all', _HardwareSerialEntry_all),
        ('single', _HardwareSerialEntry_single),
        ('block', _HardwareSerialEntry_block),
        ])
    HardwareSerialEntry._ext = None
    
    #-----< aa-firmwarePackageInfo >-----#
    aa_firmwarePackageInfo = CLASS(name='aa-firmwarePackageInfo', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_firmwarePackageInfo_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'FirmwarePackageInfo')))
    aa_firmwarePackageInfo._val = dict([('Type', _aa_firmwarePackageInfo_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 42))])
    
    #-----< id-aa-firmwarePackageInfo >-----#
    id_aa_firmwarePackageInfo = OID(name='id-aa-firmwarePackageInfo', mode=MODE_VALUE)
    id_aa_firmwarePackageInfo._val = (1, 2, 840, 113549, 1, 9, 16, 2, 42)
    
    #-----< FirmwarePackageInfo >-----#
    FirmwarePackageInfo = SEQ(name='FirmwarePackageInfo', mode=MODE_TYPE)
    _FirmwarePackageInfo_fwPkgType = INT(name='fwPkgType', mode=MODE_TYPE, opt=True)
    _FirmwarePackageInfo_dependencies = SEQ_OF(name='dependencies', mode=MODE_TYPE, opt=True)
    __FirmwarePackageInfo_dependencies__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'PreferredOrLegacyPackageIdentifier')))
    _FirmwarePackageInfo_dependencies._cont = __FirmwarePackageInfo_dependencies__item_
    FirmwarePackageInfo._cont = ASN1Dict([
        ('fwPkgType', _FirmwarePackageInfo_fwPkgType),
        ('dependencies', _FirmwarePackageInfo_dependencies),
        ])
    FirmwarePackageInfo._ext = None
    
    #-----< aa-wrappedFirmwareKey >-----#
    aa_wrappedFirmwareKey = CLASS(name='aa-wrappedFirmwareKey', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_wrappedFirmwareKey_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'WrappedFirmwareKey')))
    aa_wrappedFirmwareKey._val = dict([('Type', _aa_wrappedFirmwareKey_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 39))])
    
    #-----< id-aa-wrappedFirmwareKey >-----#
    id_aa_wrappedFirmwareKey = OID(name='id-aa-wrappedFirmwareKey', mode=MODE_VALUE)
    id_aa_wrappedFirmwareKey._val = (1, 2, 840, 113549, 1, 9, 16, 2, 39)
    
    #-----< WrappedFirmwareKey >-----#
    WrappedFirmwareKey = SEQ(name='WrappedFirmwareKey', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EnvelopedData')))
    
    #-----< ct-firmwareLoadReceipt >-----#
    ct_firmwareLoadReceipt = CLASS(name='ct-firmwareLoadReceipt', mode=MODE_VALUE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE')))
    _ct_firmwareLoadReceipt_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'FirmwarePackageLoadReceipt')))
    ct_firmwareLoadReceipt._val = dict([('Type', _ct_firmwareLoadReceipt_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 1, 17))])
    
    #-----< id-ct-firmwareLoadReceipt >-----#
    id_ct_firmwareLoadReceipt = OID(name='id-ct-firmwareLoadReceipt', mode=MODE_VALUE)
    id_ct_firmwareLoadReceipt._val = (1, 2, 840, 113549, 1, 9, 16, 1, 17)
    
    #-----< FirmwarePackageLoadReceipt >-----#
    FirmwarePackageLoadReceipt = SEQ(name='FirmwarePackageLoadReceipt', mode=MODE_TYPE)
    _FirmwarePackageLoadReceipt_version = INT(name='version', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'FWReceiptVersion')), default=1)
    _FirmwarePackageLoadReceipt_hwType = OID(name='hwType', mode=MODE_TYPE)
    _FirmwarePackageLoadReceipt_hwSerialNum = OCT_STR(name='hwSerialNum', mode=MODE_TYPE)
    _FirmwarePackageLoadReceipt_fwPkgName = CHOICE(name='fwPkgName', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'PreferredOrLegacyPackageIdentifier')))
    _FirmwarePackageLoadReceipt_trustAnchorKeyID = OCT_STR(name='trustAnchorKeyID', mode=MODE_TYPE, opt=True)
    _FirmwarePackageLoadReceipt_decryptKeyID = OCT_STR(name='decryptKeyID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    FirmwarePackageLoadReceipt._cont = ASN1Dict([
        ('version', _FirmwarePackageLoadReceipt_version),
        ('hwType', _FirmwarePackageLoadReceipt_hwType),
        ('hwSerialNum', _FirmwarePackageLoadReceipt_hwSerialNum),
        ('fwPkgName', _FirmwarePackageLoadReceipt_fwPkgName),
        ('trustAnchorKeyID', _FirmwarePackageLoadReceipt_trustAnchorKeyID),
        ('decryptKeyID', _FirmwarePackageLoadReceipt_decryptKeyID),
        ])
    FirmwarePackageLoadReceipt._ext = None
    
    #-----< FWReceiptVersion >-----#
    FWReceiptVersion = INT(name='FWReceiptVersion', mode=MODE_TYPE)
    FWReceiptVersion._cont = ASN1Dict([('v1', 1)])
    
    #-----< ct-firmwareLoadError >-----#
    ct_firmwareLoadError = CLASS(name='ct-firmwareLoadError', mode=MODE_VALUE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE')))
    _ct_firmwareLoadError_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'FirmwarePackageLoadError')))
    ct_firmwareLoadError._val = dict([('Type', _ct_firmwareLoadError_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 1, 18))])
    
    #-----< id-ct-firmwareLoadError >-----#
    id_ct_firmwareLoadError = OID(name='id-ct-firmwareLoadError', mode=MODE_VALUE)
    id_ct_firmwareLoadError._val = (1, 2, 840, 113549, 1, 9, 16, 1, 18)
    
    #-----< FirmwarePackageLoadError >-----#
    FirmwarePackageLoadError = SEQ(name='FirmwarePackageLoadError', mode=MODE_TYPE)
    _FirmwarePackageLoadError_version = INT(name='version', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'FWErrorVersion')), default=1)
    _FirmwarePackageLoadError_hwType = OID(name='hwType', mode=MODE_TYPE)
    _FirmwarePackageLoadError_hwSerialNum = OCT_STR(name='hwSerialNum', mode=MODE_TYPE)
    _FirmwarePackageLoadError_errorCode = ENUM(name='errorCode', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'FirmwarePackageLoadErrorCode')))
    _FirmwarePackageLoadError_vendorErrorCode = INT(name='vendorErrorCode', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'VendorLoadErrorCode')), opt=True)
    _FirmwarePackageLoadError_fwPkgName = CHOICE(name='fwPkgName', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'PreferredOrLegacyPackageIdentifier')), opt=True)
    _FirmwarePackageLoadError_config = SEQ_OF(name='config', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __FirmwarePackageLoadError_config__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'CurrentFWConfig')))
    _FirmwarePackageLoadError_config._cont = __FirmwarePackageLoadError_config__item_
    FirmwarePackageLoadError._cont = ASN1Dict([
        ('version', _FirmwarePackageLoadError_version),
        ('hwType', _FirmwarePackageLoadError_hwType),
        ('hwSerialNum', _FirmwarePackageLoadError_hwSerialNum),
        ('errorCode', _FirmwarePackageLoadError_errorCode),
        ('vendorErrorCode', _FirmwarePackageLoadError_vendorErrorCode),
        ('fwPkgName', _FirmwarePackageLoadError_fwPkgName),
        ('config', _FirmwarePackageLoadError_config),
        ])
    FirmwarePackageLoadError._ext = None
    
    #-----< FWErrorVersion >-----#
    FWErrorVersion = INT(name='FWErrorVersion', mode=MODE_TYPE)
    FWErrorVersion._cont = ASN1Dict([('v1', 1)])
    
    #-----< CurrentFWConfig >-----#
    CurrentFWConfig = SEQ(name='CurrentFWConfig', mode=MODE_TYPE)
    _CurrentFWConfig_fwPkgType = INT(name='fwPkgType', mode=MODE_TYPE, opt=True)
    _CurrentFWConfig_fwPkgName = CHOICE(name='fwPkgName', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'PreferredOrLegacyPackageIdentifier')))
    CurrentFWConfig._cont = ASN1Dict([
        ('fwPkgType', _CurrentFWConfig_fwPkgType),
        ('fwPkgName', _CurrentFWConfig_fwPkgName),
        ])
    CurrentFWConfig._ext = None
    
    #-----< FirmwarePackageLoadErrorCode >-----#
    FirmwarePackageLoadErrorCode = ENUM(name='FirmwarePackageLoadErrorCode', mode=MODE_TYPE)
    FirmwarePackageLoadErrorCode._cont = ASN1Dict([('decodeFailure', 1), ('badContentInfo', 2), ('badSignedData', 3), ('badEncapContent', 4), ('badCertificate', 5), ('badSignerInfo', 6), ('badSignedAttrs', 7), ('badUnsignedAttrs', 8), ('missingContent', 9), ('noTrustAnchor', 10), ('notAuthorized', 11), ('badDigestAlgorithm', 12), ('badSignatureAlgorithm', 13), ('unsupportedKeySize', 14), ('signatureFailure', 15), ('contentTypeMismatch', 16), ('badEncryptedData', 17), ('unprotectedAttrsPresent', 18), ('badEncryptContent', 19), ('badEncryptAlgorithm', 20), ('missingCiphertext', 21), ('noDecryptKey', 22), ('decryptFailure', 23), ('badCompressAlgorithm', 24), ('missingCompressedContent', 25), ('decompressFailure', 26), ('wrongHardware', 27), ('stalePackage', 28), ('notInCommunity', 29), ('unsupportedPackageType', 30), ('missingDependency', 31), ('wrongDependencyVersion', 32), ('insufficientMemory', 33), ('badFirmware', 34), ('unsupportedParameters', 35), ('breaksDependency', 36), ('otherError', 99)])
    FirmwarePackageLoadErrorCode._ext = None
    
    #-----< VendorLoadErrorCode >-----#
    VendorLoadErrorCode = INT(name='VendorLoadErrorCode', mode=MODE_TYPE)
    
    #-----< on-hardwareModuleName >-----#
    on_hardwareModuleName = CLASS(name='on-hardwareModuleName', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'OTHER-NAME')))
    _on_hardwareModuleName_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CMSFirmwareWrapper-2009', 'HardwareModuleName')))
    on_hardwareModuleName._val = dict([('Type', _on_hardwareModuleName_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 8, 4))])
    
    #-----< id-on-hardwareModuleName >-----#
    id_on_hardwareModuleName = OID(name='id-on-hardwareModuleName', mode=MODE_VALUE)
    id_on_hardwareModuleName._val = (1, 3, 6, 1, 5, 5, 7, 8, 4)
    
    #-----< HardwareModuleName >-----#
    HardwareModuleName = SEQ(name='HardwareModuleName', mode=MODE_TYPE)
    _HardwareModuleName_hwType = OID(name='hwType', mode=MODE_TYPE)
    _HardwareModuleName_hwSerialNum = OCT_STR(name='hwSerialNum', mode=MODE_TYPE)
    HardwareModuleName._cont = ASN1Dict([
        ('hwType', _HardwareModuleName_hwType),
        ('hwSerialNum', _HardwareModuleName_hwSerialNum),
        ])
    HardwareModuleName._ext = None
    
    _all_ = [
        FirmwareContentTypes,
        _FirmwareContentTypes_val_Type_0,
        _FirmwareContentTypes_val_Type_1,
        _FirmwareContentTypes_val_Type_2,
        FirmwareSignedAttrs,
        _FirmwareSignedAttrs_val_Type_0,
        _FirmwareSignedAttrs_val_Type_1,
        _FirmwareSignedAttrs_val_Type_2,
        _FirmwareSignedAttrs_val_Type_3,
        _FirmwareSignedAttrs_val_Type_4,
        _FirmwareSignedAttrs_val_Type_5,
        _FirmwareSignedAttrs_val_Type_6,
        FirmwareUnsignedAttrs,
        _FirmwareUnsignedAttrs_val_Type_0,
        FirmwareOtherNames,
        _FirmwareOtherNames_val_Type_0,
        ct_firmwarePackage,
        _ct_firmwarePackage_val_Type,
        id_ct_firmwarePackage,
        FirmwarePkgData,
        aa_firmwarePackageID,
        _aa_firmwarePackageID_val_Type,
        id_aa_firmwarePackageID,
        _FirmwarePackageIdentifier_name,
        _FirmwarePackageIdentifier_stale,
        FirmwarePackageIdentifier,
        _PreferredOrLegacyPackageIdentifier_preferred,
        _PreferredOrLegacyPackageIdentifier_legacy,
        PreferredOrLegacyPackageIdentifier,
        _PreferredPackageIdentifier_fwPkgID,
        _PreferredPackageIdentifier_verNum,
        PreferredPackageIdentifier,
        _PreferredOrLegacyStalePackageIdentifier_preferredStaleVerNum,
        _PreferredOrLegacyStalePackageIdentifier_legacyStaleVersion,
        PreferredOrLegacyStalePackageIdentifier,
        aa_targetHardwareIDs,
        _aa_targetHardwareIDs_val_Type,
        id_aa_targetHardwareIDs,
        _TargetHardwareIdentifiers__item_,
        TargetHardwareIdentifiers,
        aa_decryptKeyID,
        _aa_decryptKeyID_val_Type,
        id_aa_decryptKeyID,
        DecryptKeyIdentifier,
        aa_implCryptoAlgs,
        _aa_implCryptoAlgs_val_Type,
        id_aa_implCryptoAlgs,
        _ImplementedCryptoAlgorithms__item_,
        ImplementedCryptoAlgorithms,
        aa_implCompressAlgs,
        _aa_implCompressAlgs_val_Type,
        id_aa_implCompressAlgs,
        _ImplementedCompressAlgorithms__item_,
        ImplementedCompressAlgorithms,
        aa_communityIdentifiers,
        _aa_communityIdentifiers_val_Type,
        id_aa_communityIdentifiers,
        _CommunityIdentifiers__item_,
        CommunityIdentifiers,
        _CommunityIdentifier_communityOID,
        _CommunityIdentifier_hwModuleList,
        CommunityIdentifier,
        _HardwareModules_hwType,
        __HardwareModules_hwSerialEntries__item_,
        _HardwareModules_hwSerialEntries,
        HardwareModules,
        _HardwareSerialEntry_all,
        _HardwareSerialEntry_single,
        __HardwareSerialEntry_block_low,
        __HardwareSerialEntry_block_high,
        _HardwareSerialEntry_block,
        HardwareSerialEntry,
        aa_firmwarePackageInfo,
        _aa_firmwarePackageInfo_val_Type,
        id_aa_firmwarePackageInfo,
        _FirmwarePackageInfo_fwPkgType,
        __FirmwarePackageInfo_dependencies__item_,
        _FirmwarePackageInfo_dependencies,
        FirmwarePackageInfo,
        aa_wrappedFirmwareKey,
        _aa_wrappedFirmwareKey_val_Type,
        id_aa_wrappedFirmwareKey,
        WrappedFirmwareKey,
        ct_firmwareLoadReceipt,
        _ct_firmwareLoadReceipt_val_Type,
        id_ct_firmwareLoadReceipt,
        _FirmwarePackageLoadReceipt_version,
        _FirmwarePackageLoadReceipt_hwType,
        _FirmwarePackageLoadReceipt_hwSerialNum,
        _FirmwarePackageLoadReceipt_fwPkgName,
        _FirmwarePackageLoadReceipt_trustAnchorKeyID,
        _FirmwarePackageLoadReceipt_decryptKeyID,
        FirmwarePackageLoadReceipt,
        FWReceiptVersion,
        ct_firmwareLoadError,
        _ct_firmwareLoadError_val_Type,
        id_ct_firmwareLoadError,
        _FirmwarePackageLoadError_version,
        _FirmwarePackageLoadError_hwType,
        _FirmwarePackageLoadError_hwSerialNum,
        _FirmwarePackageLoadError_errorCode,
        _FirmwarePackageLoadError_vendorErrorCode,
        _FirmwarePackageLoadError_fwPkgName,
        __FirmwarePackageLoadError_config__item_,
        _FirmwarePackageLoadError_config,
        FirmwarePackageLoadError,
        FWErrorVersion,
        _CurrentFWConfig_fwPkgType,
        _CurrentFWConfig_fwPkgName,
        CurrentFWConfig,
        FirmwarePackageLoadErrorCode,
        VendorLoadErrorCode,
        on_hardwareModuleName,
        _on_hardwareModuleName_val_Type,
        id_on_hardwareModuleName,
        _HardwareModuleName_hwType,
        _HardwareModuleName_hwSerialNum,
        HardwareModuleName,
    ]

class CryptographicMessageSyntax_2009:

    _name_  = 'CryptographicMessageSyntax-2009'
    _oid_   = [1, 2, 840, 113549, 1, 9, 16, 0, 41]
    
    _obj_ = [
        'CONTENT-TYPE',
        'ContentType',
        'ContentInfo',
        'ContentSet',
        'SignedData',
        'SignerInfos',
        'EncapsulatedContentInfo',
        'SignerInfo',
        'SignedAttributes',
        'SignerIdentifier',
        'SignedAttributesSet',
        'UnsignedAttributes',
        'SignatureValue',
        'EnvelopedData',
        'OriginatorInfo',
        'RecipientInfos',
        'EncryptedContentInfo',
        'UnprotectedAttributes',
        'RecipientInfo',
        'EncryptedKey',
        'KeyTransRecipientInfo',
        'KeyTransportAlgorithmSet',
        'RecipientIdentifier',
        'KeyAgreeRecipientInfo',
        'KeyAgreementAlgorithmSet',
        'OriginatorIdentifierOrKey',
        'OriginatorPublicKey',
        'OriginatorKeySet',
        'RecipientEncryptedKeys',
        'RecipientEncryptedKey',
        'KeyAgreeRecipientIdentifier',
        'RecipientKeyIdentifier',
        'SubjectKeyIdentifier',
        'KEKRecipientInfo',
        'KEKIdentifier',
        'PasswordRecipientInfo',
        'OTHER-RECIPIENT',
        'OtherRecipientInfo',
        'SupportedOtherRecipInfo',
        'DigestedData',
        'Digest',
        'EncryptedData',
        'AuthenticatedData',
        'AuthAttributes',
        'AuthAttributeSet',
        'MessageAuthenticationCode',
        'UnauthAttributes',
        'UnauthAttributeSet',
        'DigestAlgorithmIdentifier',
        'DigestAlgorithmSet',
        'SignatureAlgorithmIdentifier',
        'SignatureAlgorithmSet',
        'KeyEncryptionAlgorithmIdentifier',
        'KeyEncryptionAlgorithmSet',
        'ContentEncryptionAlgorithmIdentifier',
        'ContentEncryptionAlgorithmSet',
        'MessageAuthenticationCodeAlgorithm',
        'MessageAuthenticationCodeAlgorithmSet',
        'KeyDerivationAlgorithmIdentifier',
        'RevocationInfoChoices',
        'RevocationInfoChoice',
        'OTHER-REVOK-INFO',
        'OtherRevocationInfoFormat',
        'SupportedOtherRevokInfo',
        'CertificateChoices',
        'AttributeCertificateV2',
        'OTHER-CERT-FMT',
        'OtherCertificateFormat',
        'SupportedCertFormats',
        'CertificateSet',
        'IssuerAndSerialNumber',
        'CMSVersion',
        'UserKeyingMaterial',
        'KEY-ATTRIBUTE',
        'OtherKeyAttribute',
        'SupportedKeyAttributes',
        'id-ct-contentInfo',
        'ct-Data',
        'id-data',
        'ct-SignedData',
        'id-signedData',
        'ct-EnvelopedData',
        'id-envelopedData',
        'ct-DigestedData',
        'id-digestedData',
        'ct-EncryptedData',
        'id-encryptedData',
        'ct-AuthenticatedData',
        'id-ct-authData',
        'MessageDigest',
        'SigningTime',
        'Time',
        'Countersignature',
        'aa-contentType',
        'id-contentType',
        'aa-messageDigest',
        'id-messageDigest',
        'aa-signingTime',
        'id-signingTime',
        'aa-countersignature',
        'id-countersignature',
        'ExtendedCertificateOrCertificate',
        'ExtendedCertificate',
        'ExtendedCertificateInfo',
        'Signature',
        'Attribute',
        'Attributes',
        ]
    _type_ = [
        'CONTENT-TYPE',
        'ContentType',
        'ContentInfo',
        'SignedData',
        'SignerInfos',
        'EncapsulatedContentInfo',
        'SignerInfo',
        'SignedAttributes',
        'SignerIdentifier',
        'SignatureValue',
        'EnvelopedData',
        'OriginatorInfo',
        'RecipientInfos',
        'EncryptedContentInfo',
        'RecipientInfo',
        'EncryptedKey',
        'KeyTransRecipientInfo',
        'RecipientIdentifier',
        'KeyAgreeRecipientInfo',
        'OriginatorIdentifierOrKey',
        'OriginatorPublicKey',
        'RecipientEncryptedKeys',
        'RecipientEncryptedKey',
        'KeyAgreeRecipientIdentifier',
        'RecipientKeyIdentifier',
        'SubjectKeyIdentifier',
        'KEKRecipientInfo',
        'KEKIdentifier',
        'PasswordRecipientInfo',
        'OTHER-RECIPIENT',
        'OtherRecipientInfo',
        'DigestedData',
        'Digest',
        'EncryptedData',
        'AuthenticatedData',
        'AuthAttributes',
        'MessageAuthenticationCode',
        'UnauthAttributes',
        'DigestAlgorithmIdentifier',
        'SignatureAlgorithmIdentifier',
        'KeyEncryptionAlgorithmIdentifier',
        'ContentEncryptionAlgorithmIdentifier',
        'MessageAuthenticationCodeAlgorithm',
        'KeyDerivationAlgorithmIdentifier',
        'RevocationInfoChoices',
        'RevocationInfoChoice',
        'OTHER-REVOK-INFO',
        'OtherRevocationInfoFormat',
        'CertificateChoices',
        'AttributeCertificateV2',
        'OTHER-CERT-FMT',
        'OtherCertificateFormat',
        'CertificateSet',
        'IssuerAndSerialNumber',
        'CMSVersion',
        'UserKeyingMaterial',
        'KEY-ATTRIBUTE',
        'OtherKeyAttribute',
        'MessageDigest',
        'SigningTime',
        'Time',
        'Countersignature',
        'ExtendedCertificateOrCertificate',
        'ExtendedCertificate',
        'ExtendedCertificateInfo',
        'Signature',
        'Attribute',
        'Attributes',
        ]
    _set_ = [
        'ContentSet',
        'SignedAttributesSet',
        'UnsignedAttributes',
        'UnprotectedAttributes',
        'KeyTransportAlgorithmSet',
        'KeyAgreementAlgorithmSet',
        'OriginatorKeySet',
        'SupportedOtherRecipInfo',
        'AuthAttributeSet',
        'UnauthAttributeSet',
        'DigestAlgorithmSet',
        'SignatureAlgorithmSet',
        'KeyEncryptionAlgorithmSet',
        'ContentEncryptionAlgorithmSet',
        'MessageAuthenticationCodeAlgorithmSet',
        'SupportedOtherRevokInfo',
        'SupportedCertFormats',
        'SupportedKeyAttributes',
        ]
    _val_ = [
        'id-ct-contentInfo',
        'ct-Data',
        'id-data',
        'ct-SignedData',
        'id-signedData',
        'ct-EnvelopedData',
        'id-envelopedData',
        'ct-DigestedData',
        'id-digestedData',
        'ct-EncryptedData',
        'id-encryptedData',
        'ct-AuthenticatedData',
        'id-ct-authData',
        'aa-contentType',
        'id-contentType',
        'aa-messageDigest',
        'id-messageDigest',
        'aa-signingTime',
        'id-signingTime',
        'aa-countersignature',
        'id-countersignature',
        ]
    _class_ = [
        'CONTENT-TYPE',
        'ContentSet',
        'SignedAttributesSet',
        'UnsignedAttributes',
        'UnprotectedAttributes',
        'KeyTransportAlgorithmSet',
        'KeyAgreementAlgorithmSet',
        'OriginatorKeySet',
        'OTHER-RECIPIENT',
        'SupportedOtherRecipInfo',
        'AuthAttributeSet',
        'UnauthAttributeSet',
        'DigestAlgorithmSet',
        'SignatureAlgorithmSet',
        'KeyEncryptionAlgorithmSet',
        'ContentEncryptionAlgorithmSet',
        'MessageAuthenticationCodeAlgorithmSet',
        'OTHER-REVOK-INFO',
        'SupportedOtherRevokInfo',
        'OTHER-CERT-FMT',
        'SupportedCertFormats',
        'KEY-ATTRIBUTE',
        'SupportedKeyAttributes',
        'ct-Data',
        'ct-SignedData',
        'ct-EnvelopedData',
        'ct-DigestedData',
        'ct-EncryptedData',
        'ct-AuthenticatedData',
        'aa-contentType',
        'aa-messageDigest',
        'aa-signingTime',
        'aa-countersignature',
        ]
    _param_ = [
        'Attribute',
        'Attributes',
        ]
    
    #-----< CONTENT-TYPE >-----#
    CONTENT_TYPE = CLASS(name='CONTENT-TYPE', mode=MODE_TYPE, typeref=ASN1RefType(('_IMPL_', 'TYPE-IDENTIFIER'), []))
    
    #-----< ContentType >-----#
    ContentType = OID(name='ContentType', mode=MODE_TYPE, typeref=ASN1RefClassField(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE'), ['id']))
    
    #-----< ContentInfo >-----#
    ContentInfo = SEQ(name='ContentInfo', mode=MODE_TYPE)
    _ContentInfo_contentType = OID(name='contentType', mode=MODE_TYPE, typeref=ASN1RefClassField(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE'), ['id']))
    __ContentInfo_contentType_tab = CLASS(name='_tab_CONTENT-TYPE', mode=MODE_SET, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE')))
    ___ContentInfo_contentType_tab_val_Type_0 = OCT_STR(name='Type', mode=MODE_TYPE)
    ___ContentInfo_contentType_tab_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SignedData')))
    ___ContentInfo_contentType_tab_val_Type_2 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EncryptedData')))
    ___ContentInfo_contentType_tab_val_Type_3 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EnvelopedData')))
    ___ContentInfo_contentType_tab_val_Type_4 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'AuthenticatedData')))
    ___ContentInfo_contentType_tab_val_Type_5 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'DigestedData')))
    __ContentInfo_contentType_tab._val = ASN1Set(rv=[dict([('Type', ___ContentInfo_contentType_tab_val_Type_0), ('id', (1, 2, 840, 113549, 1, 7, 1))]), dict([('Type', ___ContentInfo_contentType_tab_val_Type_1), ('id', (1, 2, 840, 113549, 1, 7, 2))]), dict([('Type', ___ContentInfo_contentType_tab_val_Type_2), ('id', (1, 2, 840, 113549, 1, 7, 6))]), dict([('Type', ___ContentInfo_contentType_tab_val_Type_3), ('id', (1, 2, 840, 113549, 1, 7, 3))]), dict([('Type', ___ContentInfo_contentType_tab_val_Type_4), ('id', (1, 2, 840, 113549, 1, 9, 16, 1, 2))]), dict([('Type', ___ContentInfo_contentType_tab_val_Type_5), ('id', (1, 2, 840, 113549, 1, 7, 5))])], rr=[], ev=None, er=[])
    _ContentInfo_contentType._const_tab = __ContentInfo_contentType_tab
    _ContentInfo_contentType._const_tab_at = None
    _ContentInfo_contentType._const_tab_id = 'id'
    _ContentInfo_content = OPEN(name='content', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE'), ['Type']))
    _ContentInfo_content._const_tab = __ContentInfo_contentType_tab
    _ContentInfo_content._const_tab_at = ('..', 'contentType')
    _ContentInfo_content._const_tab_id = 'Type'
    ContentInfo._cont = ASN1Dict([
        ('contentType', _ContentInfo_contentType),
        ('content', _ContentInfo_content),
        ])
    ContentInfo._ext = None
    
    #-----< ContentSet >-----#
    ContentSet = CLASS(name='ContentSet', mode=MODE_SET, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE')))
    _ContentSet_val_Type_0 = OCT_STR(name='Type', mode=MODE_TYPE)
    _ContentSet_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SignedData')))
    _ContentSet_val_Type_2 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EncryptedData')))
    _ContentSet_val_Type_3 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EnvelopedData')))
    _ContentSet_val_Type_4 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'AuthenticatedData')))
    _ContentSet_val_Type_5 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'DigestedData')))
    ContentSet._val = ASN1Set(rv=[dict([('Type', _ContentSet_val_Type_0), ('id', (1, 2, 840, 113549, 1, 7, 1))]), dict([('Type', _ContentSet_val_Type_1), ('id', (1, 2, 840, 113549, 1, 7, 2))]), dict([('Type', _ContentSet_val_Type_2), ('id', (1, 2, 840, 113549, 1, 7, 6))]), dict([('Type', _ContentSet_val_Type_3), ('id', (1, 2, 840, 113549, 1, 7, 3))]), dict([('Type', _ContentSet_val_Type_4), ('id', (1, 2, 840, 113549, 1, 9, 16, 1, 2))]), dict([('Type', _ContentSet_val_Type_5), ('id', (1, 2, 840, 113549, 1, 7, 5))])], rr=[], ev=[], er=[])
    
    #-----< SignedData >-----#
    SignedData = SEQ(name='SignedData', mode=MODE_TYPE)
    _SignedData_version = INT(name='version', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CMSVersion')))
    _SignedData_digestAlgorithms = SET_OF(name='digestAlgorithms', mode=MODE_TYPE)
    __SignedData_digestAlgorithms__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'DigestAlgorithmIdentifier')))
    _SignedData_digestAlgorithms._cont = __SignedData_digestAlgorithms__item_
    _SignedData_encapContentInfo = SEQ(name='encapContentInfo', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EncapsulatedContentInfo')))
    _SignedData_certificates = SET_OF(name='certificates', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CertificateSet')), opt=True)
    _SignedData_crls = SET_OF(name='crls', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'RevocationInfoChoices')), opt=True)
    _SignedData_signerInfos = SET_OF(name='signerInfos', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SignerInfos')))
    SignedData._cont = ASN1Dict([
        ('version', _SignedData_version),
        ('digestAlgorithms', _SignedData_digestAlgorithms),
        ('encapContentInfo', _SignedData_encapContentInfo),
        ('certificates', _SignedData_certificates),
        ('crls', _SignedData_crls),
        ('signerInfos', _SignedData_signerInfos),
        ])
    SignedData._ext = None
    
    #-----< SignerInfos >-----#
    SignerInfos = SET_OF(name='SignerInfos', mode=MODE_TYPE)
    _SignerInfos__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SignerInfo')))
    SignerInfos._cont = _SignerInfos__item_
    
    #-----< EncapsulatedContentInfo >-----#
    EncapsulatedContentInfo = SEQ(name='EncapsulatedContentInfo', mode=MODE_TYPE)
    _EncapsulatedContentInfo_eContentType = OID(name='eContentType', mode=MODE_TYPE, typeref=ASN1RefClassField(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE'), ['id']))
    __EncapsulatedContentInfo_eContentType_tab = CLASS(name='_tab_CONTENT-TYPE', mode=MODE_SET, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE')))
    ___EncapsulatedContentInfo_eContentType_tab_val_Type_0 = OCT_STR(name='Type', mode=MODE_TYPE)
    ___EncapsulatedContentInfo_eContentType_tab_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SignedData')))
    ___EncapsulatedContentInfo_eContentType_tab_val_Type_2 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EncryptedData')))
    ___EncapsulatedContentInfo_eContentType_tab_val_Type_3 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EnvelopedData')))
    ___EncapsulatedContentInfo_eContentType_tab_val_Type_4 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'AuthenticatedData')))
    ___EncapsulatedContentInfo_eContentType_tab_val_Type_5 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'DigestedData')))
    __EncapsulatedContentInfo_eContentType_tab._val = ASN1Set(rv=[dict([('Type', ___EncapsulatedContentInfo_eContentType_tab_val_Type_0), ('id', (1, 2, 840, 113549, 1, 7, 1))]), dict([('Type', ___EncapsulatedContentInfo_eContentType_tab_val_Type_1), ('id', (1, 2, 840, 113549, 1, 7, 2))]), dict([('Type', ___EncapsulatedContentInfo_eContentType_tab_val_Type_2), ('id', (1, 2, 840, 113549, 1, 7, 6))]), dict([('Type', ___EncapsulatedContentInfo_eContentType_tab_val_Type_3), ('id', (1, 2, 840, 113549, 1, 7, 3))]), dict([('Type', ___EncapsulatedContentInfo_eContentType_tab_val_Type_4), ('id', (1, 2, 840, 113549, 1, 9, 16, 1, 2))]), dict([('Type', ___EncapsulatedContentInfo_eContentType_tab_val_Type_5), ('id', (1, 2, 840, 113549, 1, 7, 5))])], rr=[], ev=None, er=[])
    _EncapsulatedContentInfo_eContentType._const_tab = __EncapsulatedContentInfo_eContentType_tab
    _EncapsulatedContentInfo_eContentType._const_tab_at = None
    _EncapsulatedContentInfo_eContentType._const_tab_id = 'id'
    _EncapsulatedContentInfo_eContent = OCT_STR(name='eContent', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), opt=True)
    __EncapsulatedContentInfo_eContent_contain = OPEN(name='_cont_eContent', mode=MODE_TYPE, typeref=ASN1RefClassField(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE'), ['Type']))
    __EncapsulatedContentInfo_eContent_contain._const_tab = __EncapsulatedContentInfo_eContentType_tab
    __EncapsulatedContentInfo_eContent_contain._const_tab_at = ('..', 'eContentType')
    __EncapsulatedContentInfo_eContent_contain._const_tab_id = 'Type'
    _EncapsulatedContentInfo_eContent._const_cont = __EncapsulatedContentInfo_eContent_contain
    EncapsulatedContentInfo._cont = ASN1Dict([
        ('eContentType', _EncapsulatedContentInfo_eContentType),
        ('eContent', _EncapsulatedContentInfo_eContent),
        ])
    EncapsulatedContentInfo._ext = None
    
    #-----< SignerInfo >-----#
    SignerInfo = SEQ(name='SignerInfo', mode=MODE_TYPE)
    _SignerInfo_version = INT(name='version', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CMSVersion')))
    _SignerInfo_sid = CHOICE(name='sid', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SignerIdentifier')))
    _SignerInfo_digestAlgorithm = SEQ(name='digestAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'DigestAlgorithmIdentifier')))
    _SignerInfo_signedAttrs = SET_OF(name='signedAttrs', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SignedAttributes')), opt=True)
    _SignerInfo_signatureAlgorithm = SEQ(name='signatureAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SignatureAlgorithmIdentifier')))
    _SignerInfo_signature = OCT_STR(name='signature', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SignatureValue')))
    _SignerInfo_unsignedAttrs = SET_OF(name='unsignedAttrs', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'Attributes')), opt=True)
    __SignerInfo_unsignedAttrs__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'Attribute')))
    ___SignerInfo_unsignedAttrs__item__attrType = OID(name='attrType', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['id']))
    ____SignerInfo_unsignedAttrs__item__attrType_tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _____SignerInfo_unsignedAttrs__item__attrType_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'Countersignature')))
    ____SignerInfo_unsignedAttrs__item__attrType_tab._val = ASN1Set(rv=[dict([('Type', _____SignerInfo_unsignedAttrs__item__attrType_tab_val_Type_0), ('id', (1, 2, 840, 113549, 1, 9, 6))])], rr=[], ev=None, er=[])
    ___SignerInfo_unsignedAttrs__item__attrType._const_tab = ____SignerInfo_unsignedAttrs__item__attrType_tab
    ___SignerInfo_unsignedAttrs__item__attrType._const_tab_at = None
    ___SignerInfo_unsignedAttrs__item__attrType._const_tab_id = 'id'
    ___SignerInfo_unsignedAttrs__item__attrValues = SET_OF(name='attrValues', mode=MODE_TYPE)
    ____SignerInfo_unsignedAttrs__item__attrValues__item_ = OPEN(name='_item_', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['Type']))
    ____SignerInfo_unsignedAttrs__item__attrValues__item_._const_tab = ____SignerInfo_unsignedAttrs__item__attrType_tab
    ____SignerInfo_unsignedAttrs__item__attrValues__item_._const_tab_at = ('..', '..', 'attrType')
    ____SignerInfo_unsignedAttrs__item__attrValues__item_._const_tab_id = 'Type'
    ___SignerInfo_unsignedAttrs__item__attrValues._cont = ____SignerInfo_unsignedAttrs__item__attrValues__item_
    __SignerInfo_unsignedAttrs__item_._cont = ASN1Dict([
        ('attrType', ___SignerInfo_unsignedAttrs__item__attrType),
        ('attrValues', ___SignerInfo_unsignedAttrs__item__attrValues),
        ])
    __SignerInfo_unsignedAttrs__item_._ext = None
    _SignerInfo_unsignedAttrs._cont = __SignerInfo_unsignedAttrs__item_
    _SignerInfo_unsignedAttrs._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    SignerInfo._cont = ASN1Dict([
        ('version', _SignerInfo_version),
        ('sid', _SignerInfo_sid),
        ('digestAlgorithm', _SignerInfo_digestAlgorithm),
        ('signedAttrs', _SignerInfo_signedAttrs),
        ('signatureAlgorithm', _SignerInfo_signatureAlgorithm),
        ('signature', _SignerInfo_signature),
        ('unsignedAttrs', _SignerInfo_unsignedAttrs),
        ])
    SignerInfo._ext = None
    
    #-----< SignedAttributes >-----#
    SignedAttributes = SET_OF(name='SignedAttributes', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'Attributes')))
    _SignedAttributes__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'Attribute')))
    __SignedAttributes__item__attrType = OID(name='attrType', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['id']))
    ___SignedAttributes__item__attrType_tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    ____SignedAttributes__item__attrType_tab_val_Type_0 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SigningTime')))
    ____SignedAttributes__item__attrType_tab_val_Type_1 = OCT_STR(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'MessageDigest')))
    ____SignedAttributes__item__attrType_tab_val_Type_2 = OID(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'ContentType')))
    ___SignedAttributes__item__attrType_tab._val = ASN1Set(rv=[dict([('Type', ____SignedAttributes__item__attrType_tab_val_Type_0), ('id', (1, 2, 840, 113549, 1, 9, 5))]), dict([('Type', ____SignedAttributes__item__attrType_tab_val_Type_1), ('id', (1, 2, 840, 113549, 1, 9, 4))]), dict([('Type', ____SignedAttributes__item__attrType_tab_val_Type_2), ('id', (1, 2, 840, 113549, 1, 9, 3))])], rr=[], ev=None, er=[])
    __SignedAttributes__item__attrType._const_tab = ___SignedAttributes__item__attrType_tab
    __SignedAttributes__item__attrType._const_tab_at = None
    __SignedAttributes__item__attrType._const_tab_id = 'id'
    __SignedAttributes__item__attrValues = SET_OF(name='attrValues', mode=MODE_TYPE)
    ___SignedAttributes__item__attrValues__item_ = OPEN(name='_item_', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['Type']))
    ___SignedAttributes__item__attrValues__item_._const_tab = ___SignedAttributes__item__attrType_tab
    ___SignedAttributes__item__attrValues__item_._const_tab_at = ('..', '..', 'attrType')
    ___SignedAttributes__item__attrValues__item_._const_tab_id = 'Type'
    __SignedAttributes__item__attrValues._cont = ___SignedAttributes__item__attrValues__item_
    _SignedAttributes__item_._cont = ASN1Dict([
        ('attrType', __SignedAttributes__item__attrType),
        ('attrValues', __SignedAttributes__item__attrValues),
        ])
    _SignedAttributes__item_._ext = None
    SignedAttributes._cont = _SignedAttributes__item_
    SignedAttributes._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    
    #-----< SignerIdentifier >-----#
    SignerIdentifier = CHOICE(name='SignerIdentifier', mode=MODE_TYPE)
    _SignerIdentifier_issuerAndSerialNumber = SEQ(name='issuerAndSerialNumber', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'IssuerAndSerialNumber')))
    _SignerIdentifier_subjectKeyIdentifier = OCT_STR(name='subjectKeyIdentifier', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SubjectKeyIdentifier')), group=0)
    SignerIdentifier._cont = ASN1Dict([
        ('issuerAndSerialNumber', _SignerIdentifier_issuerAndSerialNumber),
        ('subjectKeyIdentifier', _SignerIdentifier_subjectKeyIdentifier),
        ])
    SignerIdentifier._ext = ['subjectKeyIdentifier']
    
    #-----< SignedAttributesSet >-----#
    SignedAttributesSet = CLASS(name='SignedAttributesSet', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _SignedAttributesSet_val_Type_0 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SigningTime')))
    _SignedAttributesSet_val_Type_1 = OCT_STR(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'MessageDigest')))
    _SignedAttributesSet_val_Type_2 = OID(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'ContentType')))
    SignedAttributesSet._val = ASN1Set(rv=[dict([('Type', _SignedAttributesSet_val_Type_0), ('id', (1, 2, 840, 113549, 1, 9, 5))]), dict([('Type', _SignedAttributesSet_val_Type_1), ('id', (1, 2, 840, 113549, 1, 9, 4))]), dict([('Type', _SignedAttributesSet_val_Type_2), ('id', (1, 2, 840, 113549, 1, 9, 3))])], rr=[], ev=[], er=[])
    
    #-----< UnsignedAttributes >-----#
    UnsignedAttributes = CLASS(name='UnsignedAttributes', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _UnsignedAttributes_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'Countersignature')))
    UnsignedAttributes._val = ASN1Set(rv=[dict([('Type', _UnsignedAttributes_val_Type_0), ('id', (1, 2, 840, 113549, 1, 9, 6))])], rr=[], ev=[], er=[])
    
    #-----< SignatureValue >-----#
    SignatureValue = OCT_STR(name='SignatureValue', mode=MODE_TYPE)
    
    #-----< EnvelopedData >-----#
    EnvelopedData = SEQ(name='EnvelopedData', mode=MODE_TYPE)
    _EnvelopedData_version = INT(name='version', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CMSVersion')))
    _EnvelopedData_originatorInfo = SEQ(name='originatorInfo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'OriginatorInfo')), opt=True)
    _EnvelopedData_recipientInfos = SET_OF(name='recipientInfos', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'RecipientInfos')))
    _EnvelopedData_encryptedContentInfo = SEQ(name='encryptedContentInfo', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EncryptedContentInfo')))
    _EnvelopedData_unprotectedAttrs = SET_OF(name='unprotectedAttrs', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'Attributes')), opt=True, group=0)
    __EnvelopedData_unprotectedAttrs__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'Attribute')))
    ___EnvelopedData_unprotectedAttrs__item__attrType = OID(name='attrType', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['id']))
    ____EnvelopedData_unprotectedAttrs__item__attrType_tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    ____EnvelopedData_unprotectedAttrs__item__attrType_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___EnvelopedData_unprotectedAttrs__item__attrType._const_tab = ____EnvelopedData_unprotectedAttrs__item__attrType_tab
    ___EnvelopedData_unprotectedAttrs__item__attrType._const_tab_at = None
    ___EnvelopedData_unprotectedAttrs__item__attrType._const_tab_id = 'id'
    ___EnvelopedData_unprotectedAttrs__item__attrValues = SET_OF(name='attrValues', mode=MODE_TYPE)
    ____EnvelopedData_unprotectedAttrs__item__attrValues__item_ = OPEN(name='_item_', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['Type']))
    _____EnvelopedData_unprotectedAttrs__item__attrValues__item__tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _____EnvelopedData_unprotectedAttrs__item__attrValues__item__tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ____EnvelopedData_unprotectedAttrs__item__attrValues__item_._const_tab = _____EnvelopedData_unprotectedAttrs__item__attrValues__item__tab
    ____EnvelopedData_unprotectedAttrs__item__attrValues__item_._const_tab_at = ('..', '..', 'attrType')
    ____EnvelopedData_unprotectedAttrs__item__attrValues__item_._const_tab_id = 'Type'
    ___EnvelopedData_unprotectedAttrs__item__attrValues._cont = ____EnvelopedData_unprotectedAttrs__item__attrValues__item_
    __EnvelopedData_unprotectedAttrs__item_._cont = ASN1Dict([
        ('attrType', ___EnvelopedData_unprotectedAttrs__item__attrType),
        ('attrValues', ___EnvelopedData_unprotectedAttrs__item__attrValues),
        ])
    __EnvelopedData_unprotectedAttrs__item_._ext = None
    _EnvelopedData_unprotectedAttrs._cont = __EnvelopedData_unprotectedAttrs__item_
    _EnvelopedData_unprotectedAttrs._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    EnvelopedData._cont = ASN1Dict([
        ('version', _EnvelopedData_version),
        ('originatorInfo', _EnvelopedData_originatorInfo),
        ('recipientInfos', _EnvelopedData_recipientInfos),
        ('encryptedContentInfo', _EnvelopedData_encryptedContentInfo),
        ('unprotectedAttrs', _EnvelopedData_unprotectedAttrs),
        ])
    EnvelopedData._ext = ['unprotectedAttrs']
    
    #-----< OriginatorInfo >-----#
    OriginatorInfo = SEQ(name='OriginatorInfo', mode=MODE_TYPE)
    _OriginatorInfo_certs = SET_OF(name='certs', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CertificateSet')), opt=True)
    _OriginatorInfo_crls = SET_OF(name='crls', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'RevocationInfoChoices')), opt=True)
    OriginatorInfo._cont = ASN1Dict([
        ('certs', _OriginatorInfo_certs),
        ('crls', _OriginatorInfo_crls),
        ])
    OriginatorInfo._ext = None
    
    #-----< RecipientInfos >-----#
    RecipientInfos = SET_OF(name='RecipientInfos', mode=MODE_TYPE)
    _RecipientInfos__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'RecipientInfo')))
    RecipientInfos._cont = _RecipientInfos__item_
    RecipientInfos._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    
    #-----< EncryptedContentInfo >-----#
    EncryptedContentInfo = SEQ(name='EncryptedContentInfo', mode=MODE_TYPE)
    _EncryptedContentInfo_contentType = OID(name='contentType', mode=MODE_TYPE, typeref=ASN1RefClassField(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE'), ['id']))
    __EncryptedContentInfo_contentType_tab = CLASS(name='_tab_CONTENT-TYPE', mode=MODE_SET, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE')))
    ___EncryptedContentInfo_contentType_tab_val_Type_0 = OCT_STR(name='Type', mode=MODE_TYPE)
    ___EncryptedContentInfo_contentType_tab_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SignedData')))
    ___EncryptedContentInfo_contentType_tab_val_Type_2 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EncryptedData')))
    ___EncryptedContentInfo_contentType_tab_val_Type_3 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EnvelopedData')))
    ___EncryptedContentInfo_contentType_tab_val_Type_4 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'AuthenticatedData')))
    ___EncryptedContentInfo_contentType_tab_val_Type_5 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'DigestedData')))
    __EncryptedContentInfo_contentType_tab._val = ASN1Set(rv=[dict([('Type', ___EncryptedContentInfo_contentType_tab_val_Type_0), ('id', (1, 2, 840, 113549, 1, 7, 1))]), dict([('Type', ___EncryptedContentInfo_contentType_tab_val_Type_1), ('id', (1, 2, 840, 113549, 1, 7, 2))]), dict([('Type', ___EncryptedContentInfo_contentType_tab_val_Type_2), ('id', (1, 2, 840, 113549, 1, 7, 6))]), dict([('Type', ___EncryptedContentInfo_contentType_tab_val_Type_3), ('id', (1, 2, 840, 113549, 1, 7, 3))]), dict([('Type', ___EncryptedContentInfo_contentType_tab_val_Type_4), ('id', (1, 2, 840, 113549, 1, 9, 16, 1, 2))]), dict([('Type', ___EncryptedContentInfo_contentType_tab_val_Type_5), ('id', (1, 2, 840, 113549, 1, 7, 5))])], rr=[], ev=None, er=[])
    _EncryptedContentInfo_contentType._const_tab = __EncryptedContentInfo_contentType_tab
    _EncryptedContentInfo_contentType._const_tab_at = None
    _EncryptedContentInfo_contentType._const_tab_id = 'id'
    _EncryptedContentInfo_contentEncryptionAlgorithm = SEQ(name='contentEncryptionAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'ContentEncryptionAlgorithmIdentifier')))
    _EncryptedContentInfo_encryptedContent = OCT_STR(name='encryptedContent', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    EncryptedContentInfo._cont = ASN1Dict([
        ('contentType', _EncryptedContentInfo_contentType),
        ('contentEncryptionAlgorithm', _EncryptedContentInfo_contentEncryptionAlgorithm),
        ('encryptedContent', _EncryptedContentInfo_encryptedContent),
        ])
    EncryptedContentInfo._ext = None
    
    #-----< UnprotectedAttributes >-----#
    UnprotectedAttributes = CLASS(name='UnprotectedAttributes', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    UnprotectedAttributes._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< RecipientInfo >-----#
    RecipientInfo = CHOICE(name='RecipientInfo', mode=MODE_TYPE)
    _RecipientInfo_ktri = SEQ(name='ktri', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'KeyTransRecipientInfo')))
    _RecipientInfo_kari = SEQ(name='kari', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'KeyAgreeRecipientInfo')), group=0)
    _RecipientInfo_kekri = SEQ(name='kekri', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'KEKRecipientInfo')), group=1)
    _RecipientInfo_pwri = SEQ(name='pwri', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'PasswordRecipientInfo')), group=2)
    _RecipientInfo_ori = SEQ(name='ori', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'OtherRecipientInfo')), group=2)
    RecipientInfo._cont = ASN1Dict([
        ('ktri', _RecipientInfo_ktri),
        ('kari', _RecipientInfo_kari),
        ('kekri', _RecipientInfo_kekri),
        ('pwri', _RecipientInfo_pwri),
        ('ori', _RecipientInfo_ori),
        ])
    RecipientInfo._ext = ['kari', 'kekri', 'pwri', 'ori']
    
    #-----< EncryptedKey >-----#
    EncryptedKey = OCT_STR(name='EncryptedKey', mode=MODE_TYPE)
    
    #-----< KeyTransRecipientInfo >-----#
    KeyTransRecipientInfo = SEQ(name='KeyTransRecipientInfo', mode=MODE_TYPE)
    _KeyTransRecipientInfo_version = INT(name='version', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CMSVersion')))
    _KeyTransRecipientInfo_rid = CHOICE(name='rid', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'RecipientIdentifier')))
    _KeyTransRecipientInfo_keyEncryptionAlgorithm = SEQ(name='keyEncryptionAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __KeyTransRecipientInfo_keyEncryptionAlgorithm_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'KEY-TRANSPORT'), ['id']))
    ___KeyTransRecipientInfo_keyEncryptionAlgorithm_algorithm_tab = CLASS(name='_tab_KEY-TRANSPORT', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-TRANSPORT')))
    ____KeyTransRecipientInfo_keyEncryptionAlgorithm_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    __KEY_TRANSPORT_PublicKeySet_val_KeyValue_0 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    __KEY_TRANSPORT_PublicKeySet_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ___KeyTransRecipientInfo_keyEncryptionAlgorithm_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('Params', ____KeyTransRecipientInfo_keyEncryptionAlgorithm_algorithm_tab_val_Params_0), ('paramPresence', 'required'), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', __KEY_TRANSPORT_PublicKeySet_val_KeyValue_0), ('Params', __KEY_TRANSPORT_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 1))]))])], rr=[], ev=None, er=[])
    __KeyTransRecipientInfo_keyEncryptionAlgorithm_algorithm._const_tab = ___KeyTransRecipientInfo_keyEncryptionAlgorithm_algorithm_tab
    __KeyTransRecipientInfo_keyEncryptionAlgorithm_algorithm._const_tab_at = None
    __KeyTransRecipientInfo_keyEncryptionAlgorithm_algorithm._const_tab_id = 'id'
    __KeyTransRecipientInfo_keyEncryptionAlgorithm_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'KEY-TRANSPORT'), ['Params']), opt=True)
    __KeyTransRecipientInfo_keyEncryptionAlgorithm_parameters._const_tab = ___KeyTransRecipientInfo_keyEncryptionAlgorithm_algorithm_tab
    __KeyTransRecipientInfo_keyEncryptionAlgorithm_parameters._const_tab_at = ('..', 'algorithm')
    __KeyTransRecipientInfo_keyEncryptionAlgorithm_parameters._const_tab_id = 'Params'
    _KeyTransRecipientInfo_keyEncryptionAlgorithm._cont = ASN1Dict([
        ('algorithm', __KeyTransRecipientInfo_keyEncryptionAlgorithm_algorithm),
        ('parameters', __KeyTransRecipientInfo_keyEncryptionAlgorithm_parameters),
        ])
    _KeyTransRecipientInfo_keyEncryptionAlgorithm._ext = None
    _KeyTransRecipientInfo_encryptedKey = OCT_STR(name='encryptedKey', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EncryptedKey')))
    KeyTransRecipientInfo._cont = ASN1Dict([
        ('version', _KeyTransRecipientInfo_version),
        ('rid', _KeyTransRecipientInfo_rid),
        ('keyEncryptionAlgorithm', _KeyTransRecipientInfo_keyEncryptionAlgorithm),
        ('encryptedKey', _KeyTransRecipientInfo_encryptedKey),
        ])
    KeyTransRecipientInfo._ext = None
    
    #-----< KeyTransportAlgorithmSet >-----#
    KeyTransportAlgorithmSet = CLASS(name='KeyTransportAlgorithmSet', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-TRANSPORT')))
    _KeyTransportAlgorithmSet_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    KeyTransportAlgorithmSet._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('Params', _KeyTransportAlgorithmSet_val_Params_0), ('paramPresence', 'required'), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', __KEY_TRANSPORT_PublicKeySet_val_KeyValue_0), ('Params', __KEY_TRANSPORT_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 1))]))])], rr=[], ev=[], er=[])
    
    #-----< RecipientIdentifier >-----#
    RecipientIdentifier = CHOICE(name='RecipientIdentifier', mode=MODE_TYPE)
    _RecipientIdentifier_issuerAndSerialNumber = SEQ(name='issuerAndSerialNumber', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'IssuerAndSerialNumber')))
    _RecipientIdentifier_subjectKeyIdentifier = OCT_STR(name='subjectKeyIdentifier', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SubjectKeyIdentifier')), group=0)
    RecipientIdentifier._cont = ASN1Dict([
        ('issuerAndSerialNumber', _RecipientIdentifier_issuerAndSerialNumber),
        ('subjectKeyIdentifier', _RecipientIdentifier_subjectKeyIdentifier),
        ])
    RecipientIdentifier._ext = ['subjectKeyIdentifier']
    
    #-----< KeyAgreeRecipientInfo >-----#
    KeyAgreeRecipientInfo = SEQ(name='KeyAgreeRecipientInfo', mode=MODE_TYPE)
    _KeyAgreeRecipientInfo_version = INT(name='version', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CMSVersion')))
    _KeyAgreeRecipientInfo_originator = CHOICE(name='originator', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'OriginatorIdentifierOrKey')))
    _KeyAgreeRecipientInfo_ukm = OCT_STR(name='ukm', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'UserKeyingMaterial')), opt=True)
    _KeyAgreeRecipientInfo_keyEncryptionAlgorithm = SEQ(name='keyEncryptionAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __KeyAgreeRecipientInfo_keyEncryptionAlgorithm_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'KEY-AGREE'), ['id']))
    ___KeyAgreeRecipientInfo_keyEncryptionAlgorithm_algorithm_tab = CLASS(name='_tab_KEY-AGREE', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-AGREE')))
    ____KeyAgreeRecipientInfo_keyEncryptionAlgorithm_algorithm_tab_val_Params_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'KeyWrapAlgorithm')))
    __KEY_AGREE_PublicKeySet_val_KeyValue_0 = INT(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DHPublicKey')))
    __KEY_AGREE_PublicKeySet_val_Params_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DomainParameters')))
    __KEY_AGREE_smimeCaps_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'KeyWrapAlgorithm')))
    ____KeyAgreeRecipientInfo_keyEncryptionAlgorithm_algorithm_tab_val_Params_1 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'KeyWrapAlgorithm')))
    ___KeyAgreeRecipientInfo_keyEncryptionAlgorithm_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 5)), ('Params', ____KeyAgreeRecipientInfo_keyEncryptionAlgorithm_algorithm_tab_val_Params_0), ('paramPresence', 'required'), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10046, 2, 1)), ('KeyValue', __KEY_AGREE_PublicKeySet_val_KeyValue_0), ('Params', __KEY_AGREE_PublicKeySet_val_Params_0), ('paramPresence', 'inheritable'), ('keyUsage', (19, 9))])], rr=[], ev=None, er=[])), ('ukmPresence', 'optional'), ('smimeCaps', dict([('Type', __KEY_AGREE_smimeCaps_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 3, 5))]))]), dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 10)), ('Params', ____KeyAgreeRecipientInfo_keyEncryptionAlgorithm_algorithm_tab_val_Params_1), ('paramPresence', 'required'), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10046, 2, 1)), ('KeyValue', __KEY_AGREE_PublicKeySet_val_KeyValue_0), ('Params', __KEY_AGREE_PublicKeySet_val_Params_0), ('paramPresence', 'inheritable'), ('keyUsage', (19, 9))])], rr=[], ev=None, er=[])), ('ukmPresence', 'optional'), ('smimeCaps', dict([('Type', __KEY_AGREE_smimeCaps_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 3, 10))]))])], rr=[], ev=None, er=[])
    __KeyAgreeRecipientInfo_keyEncryptionAlgorithm_algorithm._const_tab = ___KeyAgreeRecipientInfo_keyEncryptionAlgorithm_algorithm_tab
    __KeyAgreeRecipientInfo_keyEncryptionAlgorithm_algorithm._const_tab_at = None
    __KeyAgreeRecipientInfo_keyEncryptionAlgorithm_algorithm._const_tab_id = 'id'
    __KeyAgreeRecipientInfo_keyEncryptionAlgorithm_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'KEY-AGREE'), ['Params']), opt=True)
    __KeyAgreeRecipientInfo_keyEncryptionAlgorithm_parameters._const_tab = ___KeyAgreeRecipientInfo_keyEncryptionAlgorithm_algorithm_tab
    __KeyAgreeRecipientInfo_keyEncryptionAlgorithm_parameters._const_tab_at = ('..', 'algorithm')
    __KeyAgreeRecipientInfo_keyEncryptionAlgorithm_parameters._const_tab_id = 'Params'
    _KeyAgreeRecipientInfo_keyEncryptionAlgorithm._cont = ASN1Dict([
        ('algorithm', __KeyAgreeRecipientInfo_keyEncryptionAlgorithm_algorithm),
        ('parameters', __KeyAgreeRecipientInfo_keyEncryptionAlgorithm_parameters),
        ])
    _KeyAgreeRecipientInfo_keyEncryptionAlgorithm._ext = None
    _KeyAgreeRecipientInfo_recipientEncryptedKeys = SEQ_OF(name='recipientEncryptedKeys', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'RecipientEncryptedKeys')))
    KeyAgreeRecipientInfo._cont = ASN1Dict([
        ('version', _KeyAgreeRecipientInfo_version),
        ('originator', _KeyAgreeRecipientInfo_originator),
        ('ukm', _KeyAgreeRecipientInfo_ukm),
        ('keyEncryptionAlgorithm', _KeyAgreeRecipientInfo_keyEncryptionAlgorithm),
        ('recipientEncryptedKeys', _KeyAgreeRecipientInfo_recipientEncryptedKeys),
        ])
    KeyAgreeRecipientInfo._ext = None
    
    #-----< KeyAgreementAlgorithmSet >-----#
    KeyAgreementAlgorithmSet = CLASS(name='KeyAgreementAlgorithmSet', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-AGREE')))
    _KeyAgreementAlgorithmSet_val_Params_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'KeyWrapAlgorithm')))
    _KeyAgreementAlgorithmSet_val_Params_1 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'KeyWrapAlgorithm')))
    KeyAgreementAlgorithmSet._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 5)), ('Params', _KeyAgreementAlgorithmSet_val_Params_0), ('paramPresence', 'required'), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10046, 2, 1)), ('KeyValue', __KEY_AGREE_PublicKeySet_val_KeyValue_0), ('Params', __KEY_AGREE_PublicKeySet_val_Params_0), ('paramPresence', 'inheritable'), ('keyUsage', (19, 9))])], rr=[], ev=None, er=[])), ('ukmPresence', 'optional'), ('smimeCaps', dict([('Type', __KEY_AGREE_smimeCaps_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 3, 5))]))]), dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 10)), ('Params', _KeyAgreementAlgorithmSet_val_Params_1), ('paramPresence', 'required'), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10046, 2, 1)), ('KeyValue', __KEY_AGREE_PublicKeySet_val_KeyValue_0), ('Params', __KEY_AGREE_PublicKeySet_val_Params_0), ('paramPresence', 'inheritable'), ('keyUsage', (19, 9))])], rr=[], ev=None, er=[])), ('ukmPresence', 'optional'), ('smimeCaps', dict([('Type', __KEY_AGREE_smimeCaps_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 3, 10))]))])], rr=[], ev=[], er=[])
    
    #-----< OriginatorIdentifierOrKey >-----#
    OriginatorIdentifierOrKey = CHOICE(name='OriginatorIdentifierOrKey', mode=MODE_TYPE)
    _OriginatorIdentifierOrKey_issuerAndSerialNumber = SEQ(name='issuerAndSerialNumber', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'IssuerAndSerialNumber')))
    _OriginatorIdentifierOrKey_subjectKeyIdentifier = OCT_STR(name='subjectKeyIdentifier', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SubjectKeyIdentifier')))
    _OriginatorIdentifierOrKey_originatorKey = SEQ(name='originatorKey', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'OriginatorPublicKey')))
    OriginatorIdentifierOrKey._cont = ASN1Dict([
        ('issuerAndSerialNumber', _OriginatorIdentifierOrKey_issuerAndSerialNumber),
        ('subjectKeyIdentifier', _OriginatorIdentifierOrKey_subjectKeyIdentifier),
        ('originatorKey', _OriginatorIdentifierOrKey_originatorKey),
        ])
    OriginatorIdentifierOrKey._ext = None
    
    #-----< OriginatorPublicKey >-----#
    OriginatorPublicKey = SEQ(name='OriginatorPublicKey', mode=MODE_TYPE)
    _OriginatorPublicKey_algorithm = SEQ(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    __OriginatorPublicKey_algorithm_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'PUBLIC-KEY'), ['id']))
    ___OriginatorPublicKey_algorithm_algorithm_tab = CLASS(name='_tab_PUBLIC-KEY', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')))
    ____OriginatorPublicKey_algorithm_algorithm_tab_val_KeyValue_0 = INT(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DHPublicKey')))
    ____OriginatorPublicKey_algorithm_algorithm_tab_val_Params_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DomainParameters')))
    ___OriginatorPublicKey_algorithm_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 10046, 2, 1)), ('KeyValue', ____OriginatorPublicKey_algorithm_algorithm_tab_val_KeyValue_0), ('Params', ____OriginatorPublicKey_algorithm_algorithm_tab_val_Params_0), ('paramPresence', 'inheritable'), ('keyUsage', (19, 9))])], rr=[], ev=None, er=[])
    __OriginatorPublicKey_algorithm_algorithm._const_tab = ___OriginatorPublicKey_algorithm_algorithm_tab
    __OriginatorPublicKey_algorithm_algorithm._const_tab_at = None
    __OriginatorPublicKey_algorithm_algorithm._const_tab_id = 'id'
    __OriginatorPublicKey_algorithm_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'PUBLIC-KEY'), ['Params']), opt=True)
    __OriginatorPublicKey_algorithm_parameters._const_tab = ___OriginatorPublicKey_algorithm_algorithm_tab
    __OriginatorPublicKey_algorithm_parameters._const_tab_at = ('..', 'algorithm')
    __OriginatorPublicKey_algorithm_parameters._const_tab_id = 'Params'
    _OriginatorPublicKey_algorithm._cont = ASN1Dict([
        ('algorithm', __OriginatorPublicKey_algorithm_algorithm),
        ('parameters', __OriginatorPublicKey_algorithm_parameters),
        ])
    _OriginatorPublicKey_algorithm._ext = None
    _OriginatorPublicKey_publicKey = BIT_STR(name='publicKey', mode=MODE_TYPE)
    OriginatorPublicKey._cont = ASN1Dict([
        ('algorithm', _OriginatorPublicKey_algorithm),
        ('publicKey', _OriginatorPublicKey_publicKey),
        ])
    OriginatorPublicKey._ext = None
    
    #-----< OriginatorKeySet >-----#
    OriginatorKeySet = CLASS(name='OriginatorKeySet', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')))
    _OriginatorKeySet_val_KeyValue_0 = INT(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DHPublicKey')))
    _OriginatorKeySet_val_Params_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DomainParameters')))
    OriginatorKeySet._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 10046, 2, 1)), ('KeyValue', _OriginatorKeySet_val_KeyValue_0), ('Params', _OriginatorKeySet_val_Params_0), ('paramPresence', 'inheritable'), ('keyUsage', (19, 9))])], rr=[], ev=[], er=[])
    
    #-----< RecipientEncryptedKeys >-----#
    RecipientEncryptedKeys = SEQ_OF(name='RecipientEncryptedKeys', mode=MODE_TYPE)
    _RecipientEncryptedKeys__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'RecipientEncryptedKey')))
    RecipientEncryptedKeys._cont = _RecipientEncryptedKeys__item_
    
    #-----< RecipientEncryptedKey >-----#
    RecipientEncryptedKey = SEQ(name='RecipientEncryptedKey', mode=MODE_TYPE)
    _RecipientEncryptedKey_rid = CHOICE(name='rid', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'KeyAgreeRecipientIdentifier')))
    _RecipientEncryptedKey_encryptedKey = OCT_STR(name='encryptedKey', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EncryptedKey')))
    RecipientEncryptedKey._cont = ASN1Dict([
        ('rid', _RecipientEncryptedKey_rid),
        ('encryptedKey', _RecipientEncryptedKey_encryptedKey),
        ])
    RecipientEncryptedKey._ext = None
    
    #-----< KeyAgreeRecipientIdentifier >-----#
    KeyAgreeRecipientIdentifier = CHOICE(name='KeyAgreeRecipientIdentifier', mode=MODE_TYPE)
    _KeyAgreeRecipientIdentifier_issuerAndSerialNumber = SEQ(name='issuerAndSerialNumber', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'IssuerAndSerialNumber')))
    _KeyAgreeRecipientIdentifier_rKeyId = SEQ(name='rKeyId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'RecipientKeyIdentifier')))
    KeyAgreeRecipientIdentifier._cont = ASN1Dict([
        ('issuerAndSerialNumber', _KeyAgreeRecipientIdentifier_issuerAndSerialNumber),
        ('rKeyId', _KeyAgreeRecipientIdentifier_rKeyId),
        ])
    KeyAgreeRecipientIdentifier._ext = None
    
    #-----< RecipientKeyIdentifier >-----#
    RecipientKeyIdentifier = SEQ(name='RecipientKeyIdentifier', mode=MODE_TYPE)
    _RecipientKeyIdentifier_subjectKeyIdentifier = OCT_STR(name='subjectKeyIdentifier', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SubjectKeyIdentifier')))
    _RecipientKeyIdentifier_date = TIME_GEN(name='date', mode=MODE_TYPE, opt=True)
    _RecipientKeyIdentifier_other = SEQ(name='other', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'OtherKeyAttribute')), opt=True)
    RecipientKeyIdentifier._cont = ASN1Dict([
        ('subjectKeyIdentifier', _RecipientKeyIdentifier_subjectKeyIdentifier),
        ('date', _RecipientKeyIdentifier_date),
        ('other', _RecipientKeyIdentifier_other),
        ])
    RecipientKeyIdentifier._ext = None
    
    #-----< SubjectKeyIdentifier >-----#
    SubjectKeyIdentifier = OCT_STR(name='SubjectKeyIdentifier', mode=MODE_TYPE)
    
    #-----< KEKRecipientInfo >-----#
    KEKRecipientInfo = SEQ(name='KEKRecipientInfo', mode=MODE_TYPE)
    _KEKRecipientInfo_version = INT(name='version', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CMSVersion')))
    _KEKRecipientInfo_kekid = SEQ(name='kekid', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'KEKIdentifier')))
    _KEKRecipientInfo_keyEncryptionAlgorithm = SEQ(name='keyEncryptionAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'KeyEncryptionAlgorithmIdentifier')))
    _KEKRecipientInfo_encryptedKey = OCT_STR(name='encryptedKey', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EncryptedKey')))
    KEKRecipientInfo._cont = ASN1Dict([
        ('version', _KEKRecipientInfo_version),
        ('kekid', _KEKRecipientInfo_kekid),
        ('keyEncryptionAlgorithm', _KEKRecipientInfo_keyEncryptionAlgorithm),
        ('encryptedKey', _KEKRecipientInfo_encryptedKey),
        ])
    KEKRecipientInfo._ext = None
    
    #-----< KEKIdentifier >-----#
    KEKIdentifier = SEQ(name='KEKIdentifier', mode=MODE_TYPE)
    _KEKIdentifier_keyIdentifier = OCT_STR(name='keyIdentifier', mode=MODE_TYPE)
    _KEKIdentifier_date = TIME_GEN(name='date', mode=MODE_TYPE, opt=True)
    _KEKIdentifier_other = SEQ(name='other', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'OtherKeyAttribute')), opt=True)
    KEKIdentifier._cont = ASN1Dict([
        ('keyIdentifier', _KEKIdentifier_keyIdentifier),
        ('date', _KEKIdentifier_date),
        ('other', _KEKIdentifier_other),
        ])
    KEKIdentifier._ext = None
    
    #-----< PasswordRecipientInfo >-----#
    PasswordRecipientInfo = SEQ(name='PasswordRecipientInfo', mode=MODE_TYPE)
    _PasswordRecipientInfo_version = INT(name='version', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CMSVersion')))
    _PasswordRecipientInfo_keyDerivationAlgorithm = SEQ(name='keyDerivationAlgorithm', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'KeyDerivationAlgorithmIdentifier')), opt=True)
    _PasswordRecipientInfo_keyEncryptionAlgorithm = SEQ(name='keyEncryptionAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'KeyEncryptionAlgorithmIdentifier')))
    _PasswordRecipientInfo_encryptedKey = OCT_STR(name='encryptedKey', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EncryptedKey')))
    PasswordRecipientInfo._cont = ASN1Dict([
        ('version', _PasswordRecipientInfo_version),
        ('keyDerivationAlgorithm', _PasswordRecipientInfo_keyDerivationAlgorithm),
        ('keyEncryptionAlgorithm', _PasswordRecipientInfo_keyEncryptionAlgorithm),
        ('encryptedKey', _PasswordRecipientInfo_encryptedKey),
        ])
    PasswordRecipientInfo._ext = None
    
    #-----< OTHER-RECIPIENT >-----#
    OTHER_RECIPIENT = CLASS(name='OTHER-RECIPIENT', mode=MODE_TYPE, typeref=ASN1RefType(('_IMPL_', 'TYPE-IDENTIFIER'), []))
    
    #-----< OtherRecipientInfo >-----#
    OtherRecipientInfo = SEQ(name='OtherRecipientInfo', mode=MODE_TYPE)
    _OtherRecipientInfo_oriType = OID(name='oriType', mode=MODE_TYPE, typeref=ASN1RefClassField(('CryptographicMessageSyntax-2009', 'OTHER-RECIPIENT'), ['id']))
    __OtherRecipientInfo_oriType_tab = CLASS(name='_tab_OTHER-RECIPIENT', mode=MODE_SET, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'OTHER-RECIPIENT')))
    __OtherRecipientInfo_oriType_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    _OtherRecipientInfo_oriType._const_tab = __OtherRecipientInfo_oriType_tab
    _OtherRecipientInfo_oriType._const_tab_at = None
    _OtherRecipientInfo_oriType._const_tab_id = 'id'
    _OtherRecipientInfo_oriValue = OPEN(name='oriValue', mode=MODE_TYPE, typeref=ASN1RefClassField(('CryptographicMessageSyntax-2009', 'OTHER-RECIPIENT'), ['Type']))
    __OtherRecipientInfo_oriValue_tab = CLASS(name='_tab_OTHER-RECIPIENT', mode=MODE_SET, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'OTHER-RECIPIENT')))
    __OtherRecipientInfo_oriValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    _OtherRecipientInfo_oriValue._const_tab = __OtherRecipientInfo_oriValue_tab
    _OtherRecipientInfo_oriValue._const_tab_at = ('..', 'oriType')
    _OtherRecipientInfo_oriValue._const_tab_id = 'Type'
    OtherRecipientInfo._cont = ASN1Dict([
        ('oriType', _OtherRecipientInfo_oriType),
        ('oriValue', _OtherRecipientInfo_oriValue),
        ])
    OtherRecipientInfo._ext = None
    
    #-----< SupportedOtherRecipInfo >-----#
    SupportedOtherRecipInfo = CLASS(name='SupportedOtherRecipInfo', mode=MODE_SET, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'OTHER-RECIPIENT')))
    SupportedOtherRecipInfo._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< DigestedData >-----#
    DigestedData = SEQ(name='DigestedData', mode=MODE_TYPE)
    _DigestedData_version = INT(name='version', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CMSVersion')))
    _DigestedData_digestAlgorithm = SEQ(name='digestAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'DigestAlgorithmIdentifier')))
    _DigestedData_encapContentInfo = SEQ(name='encapContentInfo', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EncapsulatedContentInfo')))
    _DigestedData_digest = OCT_STR(name='digest', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'Digest')))
    DigestedData._cont = ASN1Dict([
        ('version', _DigestedData_version),
        ('digestAlgorithm', _DigestedData_digestAlgorithm),
        ('encapContentInfo', _DigestedData_encapContentInfo),
        ('digest', _DigestedData_digest),
        ])
    DigestedData._ext = []
    
    #-----< Digest >-----#
    Digest = OCT_STR(name='Digest', mode=MODE_TYPE)
    
    #-----< EncryptedData >-----#
    EncryptedData = SEQ(name='EncryptedData', mode=MODE_TYPE)
    _EncryptedData_version = INT(name='version', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CMSVersion')))
    _EncryptedData_encryptedContentInfo = SEQ(name='encryptedContentInfo', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EncryptedContentInfo')))
    _EncryptedData_unprotectedAttrs = SET_OF(name='unprotectedAttrs', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'Attributes')), opt=True, group=0)
    __EncryptedData_unprotectedAttrs__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'Attribute')))
    ___EncryptedData_unprotectedAttrs__item__attrType = OID(name='attrType', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['id']))
    ____EncryptedData_unprotectedAttrs__item__attrType_tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    ____EncryptedData_unprotectedAttrs__item__attrType_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___EncryptedData_unprotectedAttrs__item__attrType._const_tab = ____EncryptedData_unprotectedAttrs__item__attrType_tab
    ___EncryptedData_unprotectedAttrs__item__attrType._const_tab_at = None
    ___EncryptedData_unprotectedAttrs__item__attrType._const_tab_id = 'id'
    ___EncryptedData_unprotectedAttrs__item__attrValues = SET_OF(name='attrValues', mode=MODE_TYPE)
    ____EncryptedData_unprotectedAttrs__item__attrValues__item_ = OPEN(name='_item_', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['Type']))
    _____EncryptedData_unprotectedAttrs__item__attrValues__item__tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _____EncryptedData_unprotectedAttrs__item__attrValues__item__tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ____EncryptedData_unprotectedAttrs__item__attrValues__item_._const_tab = _____EncryptedData_unprotectedAttrs__item__attrValues__item__tab
    ____EncryptedData_unprotectedAttrs__item__attrValues__item_._const_tab_at = ('..', '..', 'attrType')
    ____EncryptedData_unprotectedAttrs__item__attrValues__item_._const_tab_id = 'Type'
    ___EncryptedData_unprotectedAttrs__item__attrValues._cont = ____EncryptedData_unprotectedAttrs__item__attrValues__item_
    __EncryptedData_unprotectedAttrs__item_._cont = ASN1Dict([
        ('attrType', ___EncryptedData_unprotectedAttrs__item__attrType),
        ('attrValues', ___EncryptedData_unprotectedAttrs__item__attrValues),
        ])
    __EncryptedData_unprotectedAttrs__item_._ext = None
    _EncryptedData_unprotectedAttrs._cont = __EncryptedData_unprotectedAttrs__item_
    _EncryptedData_unprotectedAttrs._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    EncryptedData._cont = ASN1Dict([
        ('version', _EncryptedData_version),
        ('encryptedContentInfo', _EncryptedData_encryptedContentInfo),
        ('unprotectedAttrs', _EncryptedData_unprotectedAttrs),
        ])
    EncryptedData._ext = ['unprotectedAttrs']
    
    #-----< AuthenticatedData >-----#
    AuthenticatedData = SEQ(name='AuthenticatedData', mode=MODE_TYPE)
    _AuthenticatedData_version = INT(name='version', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CMSVersion')))
    _AuthenticatedData_originatorInfo = SEQ(name='originatorInfo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'OriginatorInfo')), opt=True)
    _AuthenticatedData_recipientInfos = SET_OF(name='recipientInfos', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'RecipientInfos')))
    _AuthenticatedData_macAlgorithm = SEQ(name='macAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'MessageAuthenticationCodeAlgorithm')))
    _AuthenticatedData_digestAlgorithm = SEQ(name='digestAlgorithm', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'DigestAlgorithmIdentifier')), opt=True)
    _AuthenticatedData_encapContentInfo = SEQ(name='encapContentInfo', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EncapsulatedContentInfo')))
    _AuthenticatedData_authAttrs = SET_OF(name='authAttrs', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'AuthAttributes')), opt=True)
    _AuthenticatedData_mac = OCT_STR(name='mac', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'MessageAuthenticationCode')))
    _AuthenticatedData_unauthAttrs = SET_OF(name='unauthAttrs', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'UnauthAttributes')), opt=True)
    AuthenticatedData._cont = ASN1Dict([
        ('version', _AuthenticatedData_version),
        ('originatorInfo', _AuthenticatedData_originatorInfo),
        ('recipientInfos', _AuthenticatedData_recipientInfos),
        ('macAlgorithm', _AuthenticatedData_macAlgorithm),
        ('digestAlgorithm', _AuthenticatedData_digestAlgorithm),
        ('encapContentInfo', _AuthenticatedData_encapContentInfo),
        ('authAttrs', _AuthenticatedData_authAttrs),
        ('mac', _AuthenticatedData_mac),
        ('unauthAttrs', _AuthenticatedData_unauthAttrs),
        ])
    AuthenticatedData._ext = None
    
    #-----< AuthAttributes >-----#
    AuthAttributes = SET_OF(name='AuthAttributes', mode=MODE_TYPE)
    _AuthAttributes__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'Attribute')))
    __AuthAttributes__item__attrType = OID(name='attrType', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['id']))
    ___AuthAttributes__item__attrType_tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    ____AuthAttributes__item__attrType_tab_val_Type_0 = OID(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'ContentType')))
    ____AuthAttributes__item__attrType_tab_val_Type_1 = OCT_STR(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'MessageDigest')))
    ____AuthAttributes__item__attrType_tab_val_Type_2 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SigningTime')))
    ___AuthAttributes__item__attrType_tab._val = ASN1Set(rv=[dict([('Type', ____AuthAttributes__item__attrType_tab_val_Type_0), ('id', (1, 2, 840, 113549, 1, 9, 3))]), dict([('Type', ____AuthAttributes__item__attrType_tab_val_Type_1), ('id', (1, 2, 840, 113549, 1, 9, 4))]), dict([('Type', ____AuthAttributes__item__attrType_tab_val_Type_2), ('id', (1, 2, 840, 113549, 1, 9, 5))])], rr=[], ev=None, er=[])
    __AuthAttributes__item__attrType._const_tab = ___AuthAttributes__item__attrType_tab
    __AuthAttributes__item__attrType._const_tab_at = None
    __AuthAttributes__item__attrType._const_tab_id = 'id'
    __AuthAttributes__item__attrValues = SET_OF(name='attrValues', mode=MODE_TYPE)
    ___AuthAttributes__item__attrValues__item_ = OPEN(name='_item_', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['Type']))
    ___AuthAttributes__item__attrValues__item_._const_tab = ___AuthAttributes__item__attrType_tab
    ___AuthAttributes__item__attrValues__item_._const_tab_at = ('..', '..', 'attrType')
    ___AuthAttributes__item__attrValues__item_._const_tab_id = 'Type'
    __AuthAttributes__item__attrValues._cont = ___AuthAttributes__item__attrValues__item_
    _AuthAttributes__item_._cont = ASN1Dict([
        ('attrType', __AuthAttributes__item__attrType),
        ('attrValues', __AuthAttributes__item__attrValues),
        ])
    _AuthAttributes__item_._ext = None
    AuthAttributes._cont = _AuthAttributes__item_
    AuthAttributes._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    
    #-----< AuthAttributeSet >-----#
    AuthAttributeSet = CLASS(name='AuthAttributeSet', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _AuthAttributeSet_val_Type_0 = OID(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'ContentType')))
    _AuthAttributeSet_val_Type_1 = OCT_STR(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'MessageDigest')))
    _AuthAttributeSet_val_Type_2 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SigningTime')))
    AuthAttributeSet._val = ASN1Set(rv=[dict([('Type', _AuthAttributeSet_val_Type_0), ('id', (1, 2, 840, 113549, 1, 9, 3))]), dict([('Type', _AuthAttributeSet_val_Type_1), ('id', (1, 2, 840, 113549, 1, 9, 4))]), dict([('Type', _AuthAttributeSet_val_Type_2), ('id', (1, 2, 840, 113549, 1, 9, 5))])], rr=[], ev=[], er=[])
    
    #-----< MessageAuthenticationCode >-----#
    MessageAuthenticationCode = OCT_STR(name='MessageAuthenticationCode', mode=MODE_TYPE)
    
    #-----< UnauthAttributes >-----#
    UnauthAttributes = SET_OF(name='UnauthAttributes', mode=MODE_TYPE)
    _UnauthAttributes__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'Attribute')))
    __UnauthAttributes__item__attrType = OID(name='attrType', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['id']))
    ___UnauthAttributes__item__attrType_tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    ___UnauthAttributes__item__attrType_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __UnauthAttributes__item__attrType._const_tab = ___UnauthAttributes__item__attrType_tab
    __UnauthAttributes__item__attrType._const_tab_at = None
    __UnauthAttributes__item__attrType._const_tab_id = 'id'
    __UnauthAttributes__item__attrValues = SET_OF(name='attrValues', mode=MODE_TYPE)
    ___UnauthAttributes__item__attrValues__item_ = OPEN(name='_item_', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['Type']))
    ____UnauthAttributes__item__attrValues__item__tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    ____UnauthAttributes__item__attrValues__item__tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___UnauthAttributes__item__attrValues__item_._const_tab = ____UnauthAttributes__item__attrValues__item__tab
    ___UnauthAttributes__item__attrValues__item_._const_tab_at = ('..', '..', 'attrType')
    ___UnauthAttributes__item__attrValues__item_._const_tab_id = 'Type'
    __UnauthAttributes__item__attrValues._cont = ___UnauthAttributes__item__attrValues__item_
    _UnauthAttributes__item_._cont = ASN1Dict([
        ('attrType', __UnauthAttributes__item__attrType),
        ('attrValues', __UnauthAttributes__item__attrValues),
        ])
    _UnauthAttributes__item_._ext = None
    UnauthAttributes._cont = _UnauthAttributes__item_
    UnauthAttributes._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    
    #-----< UnauthAttributeSet >-----#
    UnauthAttributeSet = CLASS(name='UnauthAttributeSet', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    UnauthAttributeSet._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< DigestAlgorithmIdentifier >-----#
    DigestAlgorithmIdentifier = SEQ(name='DigestAlgorithmIdentifier', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    _DigestAlgorithmIdentifier_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM'), ['id']))
    __DigestAlgorithmIdentifier_algorithm_tab = CLASS(name='_tab_DIGEST-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    __DigestAlgorithmIdentifier_algorithm_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    _DigestAlgorithmIdentifier_algorithm._const_tab = __DigestAlgorithmIdentifier_algorithm_tab
    _DigestAlgorithmIdentifier_algorithm._const_tab_at = None
    _DigestAlgorithmIdentifier_algorithm._const_tab_id = 'id'
    _DigestAlgorithmIdentifier_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM'), ['Params']), opt=True)
    __DigestAlgorithmIdentifier_parameters_tab = CLASS(name='_tab_DIGEST-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    __DigestAlgorithmIdentifier_parameters_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    _DigestAlgorithmIdentifier_parameters._const_tab = __DigestAlgorithmIdentifier_parameters_tab
    _DigestAlgorithmIdentifier_parameters._const_tab_at = ('..', 'algorithm')
    _DigestAlgorithmIdentifier_parameters._const_tab_id = 'Params'
    DigestAlgorithmIdentifier._cont = ASN1Dict([
        ('algorithm', _DigestAlgorithmIdentifier_algorithm),
        ('parameters', _DigestAlgorithmIdentifier_parameters),
        ])
    DigestAlgorithmIdentifier._ext = None
    
    #-----< DigestAlgorithmSet >-----#
    DigestAlgorithmSet = CLASS(name='DigestAlgorithmSet', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    DigestAlgorithmSet._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< SignatureAlgorithmIdentifier >-----#
    SignatureAlgorithmIdentifier = SEQ(name='SignatureAlgorithmIdentifier', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    _SignatureAlgorithmIdentifier_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['id']))
    __SignatureAlgorithmIdentifier_algorithm_tab = CLASS(name='_tab_SIGNATURE-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    __SignatureAlgorithmIdentifier_algorithm_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    _SignatureAlgorithmIdentifier_algorithm._const_tab = __SignatureAlgorithmIdentifier_algorithm_tab
    _SignatureAlgorithmIdentifier_algorithm._const_tab_at = None
    _SignatureAlgorithmIdentifier_algorithm._const_tab_id = 'id'
    _SignatureAlgorithmIdentifier_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM'), ['Params']), opt=True)
    __SignatureAlgorithmIdentifier_parameters_tab = CLASS(name='_tab_SIGNATURE-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    __SignatureAlgorithmIdentifier_parameters_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    _SignatureAlgorithmIdentifier_parameters._const_tab = __SignatureAlgorithmIdentifier_parameters_tab
    _SignatureAlgorithmIdentifier_parameters._const_tab_at = ('..', 'algorithm')
    _SignatureAlgorithmIdentifier_parameters._const_tab_id = 'Params'
    SignatureAlgorithmIdentifier._cont = ASN1Dict([
        ('algorithm', _SignatureAlgorithmIdentifier_algorithm),
        ('parameters', _SignatureAlgorithmIdentifier_parameters),
        ])
    SignatureAlgorithmIdentifier._ext = None
    
    #-----< SignatureAlgorithmSet >-----#
    SignatureAlgorithmSet = CLASS(name='SignatureAlgorithmSet', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    SignatureAlgorithmSet._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< KeyEncryptionAlgorithmIdentifier >-----#
    KeyEncryptionAlgorithmIdentifier = SEQ(name='KeyEncryptionAlgorithmIdentifier', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    _KeyEncryptionAlgorithmIdentifier_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'KEY-WRAP'), ['id']))
    __KeyEncryptionAlgorithmIdentifier_algorithm_tab = CLASS(name='_tab_KEY-WRAP', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-WRAP')))
    ___KeyEncryptionAlgorithmIdentifier_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ___KeyEncryptionAlgorithmIdentifier_algorithm_tab_val_Params_1 = INT(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'RC2wrapParameter')))
    __KeyEncryptionAlgorithmIdentifier_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 6)), ('Params', ___KeyEncryptionAlgorithmIdentifier_algorithm_tab_val_Params_0), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 6))]))]), dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 7)), ('Params', ___KeyEncryptionAlgorithmIdentifier_algorithm_tab_val_Params_1), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 7))]))])], rr=[], ev=None, er=[])
    _KeyEncryptionAlgorithmIdentifier_algorithm._const_tab = __KeyEncryptionAlgorithmIdentifier_algorithm_tab
    _KeyEncryptionAlgorithmIdentifier_algorithm._const_tab_at = None
    _KeyEncryptionAlgorithmIdentifier_algorithm._const_tab_id = 'id'
    _KeyEncryptionAlgorithmIdentifier_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'KEY-WRAP'), ['Params']), opt=True)
    _KeyEncryptionAlgorithmIdentifier_parameters._const_tab = __KeyEncryptionAlgorithmIdentifier_algorithm_tab
    _KeyEncryptionAlgorithmIdentifier_parameters._const_tab_at = ('..', 'algorithm')
    _KeyEncryptionAlgorithmIdentifier_parameters._const_tab_id = 'Params'
    KeyEncryptionAlgorithmIdentifier._cont = ASN1Dict([
        ('algorithm', _KeyEncryptionAlgorithmIdentifier_algorithm),
        ('parameters', _KeyEncryptionAlgorithmIdentifier_parameters),
        ])
    KeyEncryptionAlgorithmIdentifier._ext = None
    
    #-----< KeyEncryptionAlgorithmSet >-----#
    KeyEncryptionAlgorithmSet = CLASS(name='KeyEncryptionAlgorithmSet', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-WRAP')))
    _KeyEncryptionAlgorithmSet_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _KeyEncryptionAlgorithmSet_val_Params_1 = INT(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'RC2wrapParameter')))
    KeyEncryptionAlgorithmSet._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 6)), ('Params', _KeyEncryptionAlgorithmSet_val_Params_0), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 6))]))]), dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 7)), ('Params', _KeyEncryptionAlgorithmSet_val_Params_1), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 7))]))])], rr=[], ev=[], er=[])
    
    #-----< ContentEncryptionAlgorithmIdentifier >-----#
    ContentEncryptionAlgorithmIdentifier = SEQ(name='ContentEncryptionAlgorithmIdentifier', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    _ContentEncryptionAlgorithmIdentifier_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'CONTENT-ENCRYPTION'), ['id']))
    __ContentEncryptionAlgorithmIdentifier_algorithm_tab = CLASS(name='_tab_CONTENT-ENCRYPTION', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'CONTENT-ENCRYPTION')))
    ___ContentEncryptionAlgorithmIdentifier_algorithm_tab_val_Params_0 = OCT_STR(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'IV')))
    ___ContentEncryptionAlgorithmIdentifier_algorithm_tab_val_Params_1 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'RC2CBCParameter')))
    __CONTENT_ENCRYPTION_smimeCaps_val_Type = INT(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SecureMimeMessageV3dot1-2009', 'SMIMECapabilitiesParametersForRC2CBC')))
    __ContentEncryptionAlgorithmIdentifier_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 3, 7)), ('Params', ___ContentEncryptionAlgorithmIdentifier_algorithm_tab_val_Params_0), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 3, 7))]))]), dict([('id', (1, 2, 840, 113549, 3, 2)), ('Params', ___ContentEncryptionAlgorithmIdentifier_algorithm_tab_val_Params_1), ('paramPresence', 'required'), ('smimeCaps', dict([('Type', __CONTENT_ENCRYPTION_smimeCaps_val_Type), ('id', (1, 2, 840, 113549, 3, 2))]))])], rr=[], ev=None, er=[])
    _ContentEncryptionAlgorithmIdentifier_algorithm._const_tab = __ContentEncryptionAlgorithmIdentifier_algorithm_tab
    _ContentEncryptionAlgorithmIdentifier_algorithm._const_tab_at = None
    _ContentEncryptionAlgorithmIdentifier_algorithm._const_tab_id = 'id'
    _ContentEncryptionAlgorithmIdentifier_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'CONTENT-ENCRYPTION'), ['Params']), opt=True)
    _ContentEncryptionAlgorithmIdentifier_parameters._const_tab = __ContentEncryptionAlgorithmIdentifier_algorithm_tab
    _ContentEncryptionAlgorithmIdentifier_parameters._const_tab_at = ('..', 'algorithm')
    _ContentEncryptionAlgorithmIdentifier_parameters._const_tab_id = 'Params'
    ContentEncryptionAlgorithmIdentifier._cont = ASN1Dict([
        ('algorithm', _ContentEncryptionAlgorithmIdentifier_algorithm),
        ('parameters', _ContentEncryptionAlgorithmIdentifier_parameters),
        ])
    ContentEncryptionAlgorithmIdentifier._ext = None
    
    #-----< ContentEncryptionAlgorithmSet >-----#
    ContentEncryptionAlgorithmSet = CLASS(name='ContentEncryptionAlgorithmSet', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'CONTENT-ENCRYPTION')))
    _ContentEncryptionAlgorithmSet_val_Params_0 = OCT_STR(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'IV')))
    _ContentEncryptionAlgorithmSet_val_Params_1 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'RC2CBCParameter')))
    ContentEncryptionAlgorithmSet._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 3, 7)), ('Params', _ContentEncryptionAlgorithmSet_val_Params_0), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 3, 7))]))]), dict([('id', (1, 2, 840, 113549, 3, 2)), ('Params', _ContentEncryptionAlgorithmSet_val_Params_1), ('paramPresence', 'required'), ('smimeCaps', dict([('Type', __CONTENT_ENCRYPTION_smimeCaps_val_Type), ('id', (1, 2, 840, 113549, 3, 2))]))])], rr=[], ev=[], er=[])
    
    #-----< MessageAuthenticationCodeAlgorithm >-----#
    MessageAuthenticationCodeAlgorithm = SEQ(name='MessageAuthenticationCodeAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    _MessageAuthenticationCodeAlgorithm_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'MAC-ALGORITHM'), ['id']))
    __MessageAuthenticationCodeAlgorithm_algorithm_tab = CLASS(name='_tab_MAC-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'MAC-ALGORITHM')))
    ___MessageAuthenticationCodeAlgorithm_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    __MessageAuthenticationCodeAlgorithm_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2)), ('Params', ___MessageAuthenticationCodeAlgorithm_algorithm_tab_val_Params_0), ('paramPresence', 'preferredAbsent'), ('keyed', True), ('smimeCaps', dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2))]))])], rr=[], ev=None, er=[])
    _MessageAuthenticationCodeAlgorithm_algorithm._const_tab = __MessageAuthenticationCodeAlgorithm_algorithm_tab
    _MessageAuthenticationCodeAlgorithm_algorithm._const_tab_at = None
    _MessageAuthenticationCodeAlgorithm_algorithm._const_tab_id = 'id'
    _MessageAuthenticationCodeAlgorithm_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'MAC-ALGORITHM'), ['Params']), opt=True)
    _MessageAuthenticationCodeAlgorithm_parameters._const_tab = __MessageAuthenticationCodeAlgorithm_algorithm_tab
    _MessageAuthenticationCodeAlgorithm_parameters._const_tab_at = ('..', 'algorithm')
    _MessageAuthenticationCodeAlgorithm_parameters._const_tab_id = 'Params'
    MessageAuthenticationCodeAlgorithm._cont = ASN1Dict([
        ('algorithm', _MessageAuthenticationCodeAlgorithm_algorithm),
        ('parameters', _MessageAuthenticationCodeAlgorithm_parameters),
        ])
    MessageAuthenticationCodeAlgorithm._ext = None
    
    #-----< MessageAuthenticationCodeAlgorithmSet >-----#
    MessageAuthenticationCodeAlgorithmSet = CLASS(name='MessageAuthenticationCodeAlgorithmSet', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'MAC-ALGORITHM')))
    _MessageAuthenticationCodeAlgorithmSet_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    MessageAuthenticationCodeAlgorithmSet._val = ASN1Set(rv=[dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2)), ('Params', _MessageAuthenticationCodeAlgorithmSet_val_Params_0), ('paramPresence', 'preferredAbsent'), ('keyed', True), ('smimeCaps', dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2))]))])], rr=[], ev=[], er=[])
    
    #-----< KeyDerivationAlgorithmIdentifier >-----#
    KeyDerivationAlgorithmIdentifier = SEQ(name='KeyDerivationAlgorithmIdentifier', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    _KeyDerivationAlgorithmIdentifier_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'KEY-DERIVATION'), ['id']))
    __KeyDerivationAlgorithmIdentifier_algorithm_tab = CLASS(name='_tab_KEY-DERIVATION', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-DERIVATION')))
    ___KeyDerivationAlgorithmIdentifier_algorithm_tab_val_Params_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'PBKDF2-params')))
    __KeyDerivationAlgorithmIdentifier_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 5, 12)), ('Params', ___KeyDerivationAlgorithmIdentifier_algorithm_tab_val_Params_0), ('paramPresence', 'required')])], rr=[], ev=None, er=[])
    _KeyDerivationAlgorithmIdentifier_algorithm._const_tab = __KeyDerivationAlgorithmIdentifier_algorithm_tab
    _KeyDerivationAlgorithmIdentifier_algorithm._const_tab_at = None
    _KeyDerivationAlgorithmIdentifier_algorithm._const_tab_id = 'id'
    _KeyDerivationAlgorithmIdentifier_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'KEY-DERIVATION'), ['Params']), opt=True)
    _KeyDerivationAlgorithmIdentifier_parameters._const_tab = __KeyDerivationAlgorithmIdentifier_algorithm_tab
    _KeyDerivationAlgorithmIdentifier_parameters._const_tab_at = ('..', 'algorithm')
    _KeyDerivationAlgorithmIdentifier_parameters._const_tab_id = 'Params'
    KeyDerivationAlgorithmIdentifier._cont = ASN1Dict([
        ('algorithm', _KeyDerivationAlgorithmIdentifier_algorithm),
        ('parameters', _KeyDerivationAlgorithmIdentifier_parameters),
        ])
    KeyDerivationAlgorithmIdentifier._ext = None
    
    #-----< RevocationInfoChoices >-----#
    RevocationInfoChoices = SET_OF(name='RevocationInfoChoices', mode=MODE_TYPE)
    _RevocationInfoChoices__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'RevocationInfoChoice')))
    RevocationInfoChoices._cont = _RevocationInfoChoices__item_
    
    #-----< RevocationInfoChoice >-----#
    RevocationInfoChoice = CHOICE(name='RevocationInfoChoice', mode=MODE_TYPE)
    _RevocationInfoChoice_crl = SEQ(name='crl', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'CertificateList')))
    _RevocationInfoChoice_other = SEQ(name='other', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'OtherRevocationInfoFormat')), group=0)
    RevocationInfoChoice._cont = ASN1Dict([
        ('crl', _RevocationInfoChoice_crl),
        ('other', _RevocationInfoChoice_other),
        ])
    RevocationInfoChoice._ext = ['other']
    
    #-----< OTHER-REVOK-INFO >-----#
    OTHER_REVOK_INFO = CLASS(name='OTHER-REVOK-INFO', mode=MODE_TYPE, typeref=ASN1RefType(('_IMPL_', 'TYPE-IDENTIFIER'), []))
    
    #-----< OtherRevocationInfoFormat >-----#
    OtherRevocationInfoFormat = SEQ(name='OtherRevocationInfoFormat', mode=MODE_TYPE)
    _OtherRevocationInfoFormat_otherRevInfoFormat = OID(name='otherRevInfoFormat', mode=MODE_TYPE, typeref=ASN1RefClassField(('CryptographicMessageSyntax-2009', 'OTHER-REVOK-INFO'), ['id']))
    __OtherRevocationInfoFormat_otherRevInfoFormat_tab = CLASS(name='_tab_OTHER-REVOK-INFO', mode=MODE_SET, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'OTHER-REVOK-INFO')))
    __OtherRevocationInfoFormat_otherRevInfoFormat_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    _OtherRevocationInfoFormat_otherRevInfoFormat._const_tab = __OtherRevocationInfoFormat_otherRevInfoFormat_tab
    _OtherRevocationInfoFormat_otherRevInfoFormat._const_tab_at = None
    _OtherRevocationInfoFormat_otherRevInfoFormat._const_tab_id = 'id'
    _OtherRevocationInfoFormat_otherRevInfo = OPEN(name='otherRevInfo', mode=MODE_TYPE, typeref=ASN1RefClassField(('CryptographicMessageSyntax-2009', 'OTHER-REVOK-INFO'), ['Type']))
    __OtherRevocationInfoFormat_otherRevInfo_tab = CLASS(name='_tab_OTHER-REVOK-INFO', mode=MODE_SET, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'OTHER-REVOK-INFO')))
    __OtherRevocationInfoFormat_otherRevInfo_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    _OtherRevocationInfoFormat_otherRevInfo._const_tab = __OtherRevocationInfoFormat_otherRevInfo_tab
    _OtherRevocationInfoFormat_otherRevInfo._const_tab_at = ('..', 'otherRevInfoFormat')
    _OtherRevocationInfoFormat_otherRevInfo._const_tab_id = 'Type'
    OtherRevocationInfoFormat._cont = ASN1Dict([
        ('otherRevInfoFormat', _OtherRevocationInfoFormat_otherRevInfoFormat),
        ('otherRevInfo', _OtherRevocationInfoFormat_otherRevInfo),
        ])
    OtherRevocationInfoFormat._ext = None
    
    #-----< SupportedOtherRevokInfo >-----#
    SupportedOtherRevokInfo = CLASS(name='SupportedOtherRevokInfo', mode=MODE_SET, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'OTHER-REVOK-INFO')))
    SupportedOtherRevokInfo._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< CertificateChoices >-----#
    CertificateChoices = CHOICE(name='CertificateChoices', mode=MODE_TYPE)
    _CertificateChoices_certificate = SEQ(name='certificate', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'Certificate')))
    _CertificateChoices_extendedCertificate = SEQ(name='extendedCertificate', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'ExtendedCertificate')))
    _CertificateChoices_v1AttrCert = SEQ(name='v1AttrCert', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AttributeCertificateVersion1-2009', 'AttributeCertificateV1')), group=0)
    _CertificateChoices_v2AttrCert = SEQ(name='v2AttrCert', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'AttributeCertificateV2')), group=1)
    _CertificateChoices_other = SEQ(name='other', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'OtherCertificateFormat')), group=2)
    CertificateChoices._cont = ASN1Dict([
        ('certificate', _CertificateChoices_certificate),
        ('extendedCertificate', _CertificateChoices_extendedCertificate),
        ('v1AttrCert', _CertificateChoices_v1AttrCert),
        ('v2AttrCert', _CertificateChoices_v2AttrCert),
        ('other', _CertificateChoices_other),
        ])
    CertificateChoices._ext = ['v1AttrCert', 'v2AttrCert', 'other']
    
    #-----< AttributeCertificateV2 >-----#
    AttributeCertificateV2 = SEQ(name='AttributeCertificateV2', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'AttributeCertificate')))
    
    #-----< OTHER-CERT-FMT >-----#
    OTHER_CERT_FMT = CLASS(name='OTHER-CERT-FMT', mode=MODE_TYPE, typeref=ASN1RefType(('_IMPL_', 'TYPE-IDENTIFIER'), []))
    
    #-----< OtherCertificateFormat >-----#
    OtherCertificateFormat = SEQ(name='OtherCertificateFormat', mode=MODE_TYPE)
    _OtherCertificateFormat_otherCertFormat = OID(name='otherCertFormat', mode=MODE_TYPE, typeref=ASN1RefClassField(('CryptographicMessageSyntax-2009', 'OTHER-CERT-FMT'), ['id']))
    __OtherCertificateFormat_otherCertFormat_tab = CLASS(name='_tab_OTHER-CERT-FMT', mode=MODE_SET, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'OTHER-CERT-FMT')))
    __OtherCertificateFormat_otherCertFormat_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    _OtherCertificateFormat_otherCertFormat._const_tab = __OtherCertificateFormat_otherCertFormat_tab
    _OtherCertificateFormat_otherCertFormat._const_tab_at = None
    _OtherCertificateFormat_otherCertFormat._const_tab_id = 'id'
    _OtherCertificateFormat_otherCert = OPEN(name='otherCert', mode=MODE_TYPE, typeref=ASN1RefClassField(('CryptographicMessageSyntax-2009', 'OTHER-CERT-FMT'), ['Type']))
    __OtherCertificateFormat_otherCert_tab = CLASS(name='_tab_OTHER-CERT-FMT', mode=MODE_SET, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'OTHER-CERT-FMT')))
    __OtherCertificateFormat_otherCert_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    _OtherCertificateFormat_otherCert._const_tab = __OtherCertificateFormat_otherCert_tab
    _OtherCertificateFormat_otherCert._const_tab_at = ('..', 'otherCertFormat')
    _OtherCertificateFormat_otherCert._const_tab_id = 'Type'
    OtherCertificateFormat._cont = ASN1Dict([
        ('otherCertFormat', _OtherCertificateFormat_otherCertFormat),
        ('otherCert', _OtherCertificateFormat_otherCert),
        ])
    OtherCertificateFormat._ext = None
    
    #-----< SupportedCertFormats >-----#
    SupportedCertFormats = CLASS(name='SupportedCertFormats', mode=MODE_SET, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'OTHER-CERT-FMT')))
    SupportedCertFormats._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< CertificateSet >-----#
    CertificateSet = SET_OF(name='CertificateSet', mode=MODE_TYPE)
    _CertificateSet__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CertificateChoices')))
    CertificateSet._cont = _CertificateSet__item_
    
    #-----< IssuerAndSerialNumber >-----#
    IssuerAndSerialNumber = SEQ(name='IssuerAndSerialNumber', mode=MODE_TYPE)
    _IssuerAndSerialNumber_issuer = CHOICE(name='issuer', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'Name')))
    _IssuerAndSerialNumber_serialNumber = INT(name='serialNumber', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'CertificateSerialNumber')))
    IssuerAndSerialNumber._cont = ASN1Dict([
        ('issuer', _IssuerAndSerialNumber_issuer),
        ('serialNumber', _IssuerAndSerialNumber_serialNumber),
        ])
    IssuerAndSerialNumber._ext = None
    
    #-----< CMSVersion >-----#
    CMSVersion = INT(name='CMSVersion', mode=MODE_TYPE)
    CMSVersion._cont = ASN1Dict([('v0', 0), ('v1', 1), ('v2', 2), ('v3', 3), ('v4', 4), ('v5', 5)])
    
    #-----< UserKeyingMaterial >-----#
    UserKeyingMaterial = OCT_STR(name='UserKeyingMaterial', mode=MODE_TYPE)
    
    #-----< KEY-ATTRIBUTE >-----#
    KEY_ATTRIBUTE = CLASS(name='KEY-ATTRIBUTE', mode=MODE_TYPE, typeref=ASN1RefType(('_IMPL_', 'TYPE-IDENTIFIER'), []))
    
    #-----< OtherKeyAttribute >-----#
    OtherKeyAttribute = SEQ(name='OtherKeyAttribute', mode=MODE_TYPE)
    _OtherKeyAttribute_keyAttrId = OID(name='keyAttrId', mode=MODE_TYPE, typeref=ASN1RefClassField(('CryptographicMessageSyntax-2009', 'KEY-ATTRIBUTE'), ['id']))
    __OtherKeyAttribute_keyAttrId_tab = CLASS(name='_tab_KEY-ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'KEY-ATTRIBUTE')))
    __OtherKeyAttribute_keyAttrId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    _OtherKeyAttribute_keyAttrId._const_tab = __OtherKeyAttribute_keyAttrId_tab
    _OtherKeyAttribute_keyAttrId._const_tab_at = None
    _OtherKeyAttribute_keyAttrId._const_tab_id = 'id'
    _OtherKeyAttribute_keyAttr = OPEN(name='keyAttr', mode=MODE_TYPE, typeref=ASN1RefClassField(('CryptographicMessageSyntax-2009', 'KEY-ATTRIBUTE'), ['Type']))
    __OtherKeyAttribute_keyAttr_tab = CLASS(name='_tab_KEY-ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'KEY-ATTRIBUTE')))
    __OtherKeyAttribute_keyAttr_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    _OtherKeyAttribute_keyAttr._const_tab = __OtherKeyAttribute_keyAttr_tab
    _OtherKeyAttribute_keyAttr._const_tab_at = ('..', 'keyAttrId')
    _OtherKeyAttribute_keyAttr._const_tab_id = 'Type'
    OtherKeyAttribute._cont = ASN1Dict([
        ('keyAttrId', _OtherKeyAttribute_keyAttrId),
        ('keyAttr', _OtherKeyAttribute_keyAttr),
        ])
    OtherKeyAttribute._ext = None
    
    #-----< SupportedKeyAttributes >-----#
    SupportedKeyAttributes = CLASS(name='SupportedKeyAttributes', mode=MODE_SET, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'KEY-ATTRIBUTE')))
    SupportedKeyAttributes._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< id-ct-contentInfo >-----#
    id_ct_contentInfo = OID(name='id-ct-contentInfo', mode=MODE_VALUE)
    id_ct_contentInfo._val = (1, 2, 840, 113549, 1, 9, 16, 1, 6)
    
    #-----< ct-Data >-----#
    ct_Data = CLASS(name='ct-Data', mode=MODE_VALUE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE')))
    _ct_Data_val_Type = OCT_STR(name='Type', mode=MODE_TYPE)
    ct_Data._val = dict([('Type', _ct_Data_val_Type), ('id', (1, 2, 840, 113549, 1, 7, 1))])
    
    #-----< id-data >-----#
    id_data = OID(name='id-data', mode=MODE_VALUE)
    id_data._val = (1, 2, 840, 113549, 1, 7, 1)
    
    #-----< ct-SignedData >-----#
    ct_SignedData = CLASS(name='ct-SignedData', mode=MODE_VALUE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE')))
    _ct_SignedData_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SignedData')))
    ct_SignedData._val = dict([('Type', _ct_SignedData_val_Type), ('id', (1, 2, 840, 113549, 1, 7, 2))])
    
    #-----< id-signedData >-----#
    id_signedData = OID(name='id-signedData', mode=MODE_VALUE)
    id_signedData._val = (1, 2, 840, 113549, 1, 7, 2)
    
    #-----< ct-EnvelopedData >-----#
    ct_EnvelopedData = CLASS(name='ct-EnvelopedData', mode=MODE_VALUE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE')))
    _ct_EnvelopedData_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EnvelopedData')))
    ct_EnvelopedData._val = dict([('Type', _ct_EnvelopedData_val_Type), ('id', (1, 2, 840, 113549, 1, 7, 3))])
    
    #-----< id-envelopedData >-----#
    id_envelopedData = OID(name='id-envelopedData', mode=MODE_VALUE)
    id_envelopedData._val = (1, 2, 840, 113549, 1, 7, 3)
    
    #-----< ct-DigestedData >-----#
    ct_DigestedData = CLASS(name='ct-DigestedData', mode=MODE_VALUE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE')))
    _ct_DigestedData_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'DigestedData')))
    ct_DigestedData._val = dict([('Type', _ct_DigestedData_val_Type), ('id', (1, 2, 840, 113549, 1, 7, 5))])
    
    #-----< id-digestedData >-----#
    id_digestedData = OID(name='id-digestedData', mode=MODE_VALUE)
    id_digestedData._val = (1, 2, 840, 113549, 1, 7, 5)
    
    #-----< ct-EncryptedData >-----#
    ct_EncryptedData = CLASS(name='ct-EncryptedData', mode=MODE_VALUE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE')))
    _ct_EncryptedData_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'EncryptedData')))
    ct_EncryptedData._val = dict([('Type', _ct_EncryptedData_val_Type), ('id', (1, 2, 840, 113549, 1, 7, 6))])
    
    #-----< id-encryptedData >-----#
    id_encryptedData = OID(name='id-encryptedData', mode=MODE_VALUE)
    id_encryptedData._val = (1, 2, 840, 113549, 1, 7, 6)
    
    #-----< ct-AuthenticatedData >-----#
    ct_AuthenticatedData = CLASS(name='ct-AuthenticatedData', mode=MODE_VALUE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE')))
    _ct_AuthenticatedData_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'AuthenticatedData')))
    ct_AuthenticatedData._val = dict([('Type', _ct_AuthenticatedData_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 1, 2))])
    
    #-----< id-ct-authData >-----#
    id_ct_authData = OID(name='id-ct-authData', mode=MODE_VALUE)
    id_ct_authData._val = (1, 2, 840, 113549, 1, 9, 16, 1, 2)
    
    #-----< MessageDigest >-----#
    MessageDigest = OCT_STR(name='MessageDigest', mode=MODE_TYPE)
    
    #-----< SigningTime >-----#
    SigningTime = CHOICE(name='SigningTime', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'Time')))
    
    #-----< Time >-----#
    Time = CHOICE(name='Time', mode=MODE_TYPE)
    _Time_utcTime = TIME_UTC(name='utcTime', mode=MODE_TYPE)
    _Time_generalTime = TIME_GEN(name='generalTime', mode=MODE_TYPE)
    Time._cont = ASN1Dict([
        ('utcTime', _Time_utcTime),
        ('generalTime', _Time_generalTime),
        ])
    Time._ext = None
    
    #-----< Countersignature >-----#
    Countersignature = SEQ(name='Countersignature', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SignerInfo')))
    
    #-----< aa-contentType >-----#
    aa_contentType = CLASS(name='aa-contentType', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_contentType_val_Type = OID(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'ContentType')))
    aa_contentType._val = dict([('Type', _aa_contentType_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 3))])
    
    #-----< id-contentType >-----#
    id_contentType = OID(name='id-contentType', mode=MODE_VALUE)
    id_contentType._val = (1, 2, 840, 113549, 1, 9, 3)
    
    #-----< aa-messageDigest >-----#
    aa_messageDigest = CLASS(name='aa-messageDigest', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_messageDigest_val_Type = OCT_STR(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'MessageDigest')))
    aa_messageDigest._val = dict([('Type', _aa_messageDigest_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 4))])
    
    #-----< id-messageDigest >-----#
    id_messageDigest = OID(name='id-messageDigest', mode=MODE_VALUE)
    id_messageDigest._val = (1, 2, 840, 113549, 1, 9, 4)
    
    #-----< aa-signingTime >-----#
    aa_signingTime = CLASS(name='aa-signingTime', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_signingTime_val_Type = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SigningTime')))
    aa_signingTime._val = dict([('Type', _aa_signingTime_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 5))])
    
    #-----< id-signingTime >-----#
    id_signingTime = OID(name='id-signingTime', mode=MODE_VALUE)
    id_signingTime._val = (1, 2, 840, 113549, 1, 9, 5)
    
    #-----< aa-countersignature >-----#
    aa_countersignature = CLASS(name='aa-countersignature', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_countersignature_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'Countersignature')))
    aa_countersignature._val = dict([('Type', _aa_countersignature_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 6))])
    
    #-----< id-countersignature >-----#
    id_countersignature = OID(name='id-countersignature', mode=MODE_VALUE)
    id_countersignature._val = (1, 2, 840, 113549, 1, 9, 6)
    
    #-----< ExtendedCertificateOrCertificate >-----#
    ExtendedCertificateOrCertificate = CHOICE(name='ExtendedCertificateOrCertificate', mode=MODE_TYPE)
    _ExtendedCertificateOrCertificate_certificate = SEQ(name='certificate', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'Certificate')))
    _ExtendedCertificateOrCertificate_extendedCertificate = SEQ(name='extendedCertificate', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'ExtendedCertificate')))
    ExtendedCertificateOrCertificate._cont = ASN1Dict([
        ('certificate', _ExtendedCertificateOrCertificate_certificate),
        ('extendedCertificate', _ExtendedCertificateOrCertificate_extendedCertificate),
        ])
    ExtendedCertificateOrCertificate._ext = None
    
    #-----< ExtendedCertificate >-----#
    ExtendedCertificate = SEQ(name='ExtendedCertificate', mode=MODE_TYPE)
    _ExtendedCertificate_extendedCertificateInfo = SEQ(name='extendedCertificateInfo', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'ExtendedCertificateInfo')))
    _ExtendedCertificate_signatureAlgorithm = SEQ(name='signatureAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SignatureAlgorithmIdentifier')))
    _ExtendedCertificate_signature = BIT_STR(name='signature', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'Signature')))
    ExtendedCertificate._cont = ASN1Dict([
        ('extendedCertificateInfo', _ExtendedCertificate_extendedCertificateInfo),
        ('signatureAlgorithm', _ExtendedCertificate_signatureAlgorithm),
        ('signature', _ExtendedCertificate_signature),
        ])
    ExtendedCertificate._ext = None
    
    #-----< ExtendedCertificateInfo >-----#
    ExtendedCertificateInfo = SEQ(name='ExtendedCertificateInfo', mode=MODE_TYPE)
    _ExtendedCertificateInfo_version = INT(name='version', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CMSVersion')))
    _ExtendedCertificateInfo_certificate = SEQ(name='certificate', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'Certificate')))
    _ExtendedCertificateInfo_attributes = SET_OF(name='attributes', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'UnauthAttributes')))
    ExtendedCertificateInfo._cont = ASN1Dict([
        ('version', _ExtendedCertificateInfo_version),
        ('certificate', _ExtendedCertificateInfo_certificate),
        ('attributes', _ExtendedCertificateInfo_attributes),
        ])
    ExtendedCertificateInfo._ext = None
    
    #-----< Signature >-----#
    Signature = BIT_STR(name='Signature', mode=MODE_TYPE)
    
    #-----< Attribute >-----#
    Attribute = SEQ(name='Attribute', mode=MODE_TYPE, param=True)
    
    #-----< Attributes >-----#
    Attributes = SET_OF(name='Attributes', mode=MODE_TYPE, param=True)
    
    _all_ = [
        CONTENT_TYPE,
        ContentType,
        __ContentInfo_contentType_tab,
        ___ContentInfo_contentType_tab_val_Type_0,
        ___ContentInfo_contentType_tab_val_Type_1,
        ___ContentInfo_contentType_tab_val_Type_2,
        ___ContentInfo_contentType_tab_val_Type_3,
        ___ContentInfo_contentType_tab_val_Type_4,
        ___ContentInfo_contentType_tab_val_Type_5,
        _ContentInfo_contentType,
        _ContentInfo_content,
        ContentInfo,
        ContentSet,
        _ContentSet_val_Type_0,
        _ContentSet_val_Type_1,
        _ContentSet_val_Type_2,
        _ContentSet_val_Type_3,
        _ContentSet_val_Type_4,
        _ContentSet_val_Type_5,
        _SignedData_version,
        __SignedData_digestAlgorithms__item_,
        _SignedData_digestAlgorithms,
        _SignedData_encapContentInfo,
        _SignedData_certificates,
        _SignedData_crls,
        _SignedData_signerInfos,
        SignedData,
        _SignerInfos__item_,
        SignerInfos,
        __EncapsulatedContentInfo_eContentType_tab,
        ___EncapsulatedContentInfo_eContentType_tab_val_Type_0,
        ___EncapsulatedContentInfo_eContentType_tab_val_Type_1,
        ___EncapsulatedContentInfo_eContentType_tab_val_Type_2,
        ___EncapsulatedContentInfo_eContentType_tab_val_Type_3,
        ___EncapsulatedContentInfo_eContentType_tab_val_Type_4,
        ___EncapsulatedContentInfo_eContentType_tab_val_Type_5,
        _EncapsulatedContentInfo_eContentType,
        __EncapsulatedContentInfo_eContent_contain,
        _EncapsulatedContentInfo_eContent,
        EncapsulatedContentInfo,
        _SignerInfo_version,
        _SignerInfo_sid,
        _SignerInfo_digestAlgorithm,
        _SignerInfo_signedAttrs,
        _SignerInfo_signatureAlgorithm,
        _SignerInfo_signature,
        ____SignerInfo_unsignedAttrs__item__attrType_tab,
        _____SignerInfo_unsignedAttrs__item__attrType_tab_val_Type_0,
        ___SignerInfo_unsignedAttrs__item__attrType,
        ____SignerInfo_unsignedAttrs__item__attrValues__item_,
        ___SignerInfo_unsignedAttrs__item__attrValues,
        __SignerInfo_unsignedAttrs__item_,
        _SignerInfo_unsignedAttrs,
        SignerInfo,
        ___SignedAttributes__item__attrType_tab,
        ____SignedAttributes__item__attrType_tab_val_Type_0,
        ____SignedAttributes__item__attrType_tab_val_Type_1,
        ____SignedAttributes__item__attrType_tab_val_Type_2,
        __SignedAttributes__item__attrType,
        ___SignedAttributes__item__attrValues__item_,
        __SignedAttributes__item__attrValues,
        _SignedAttributes__item_,
        SignedAttributes,
        _SignerIdentifier_issuerAndSerialNumber,
        _SignerIdentifier_subjectKeyIdentifier,
        SignerIdentifier,
        SignedAttributesSet,
        _SignedAttributesSet_val_Type_0,
        _SignedAttributesSet_val_Type_1,
        _SignedAttributesSet_val_Type_2,
        UnsignedAttributes,
        _UnsignedAttributes_val_Type_0,
        SignatureValue,
        _EnvelopedData_version,
        _EnvelopedData_originatorInfo,
        _EnvelopedData_recipientInfos,
        _EnvelopedData_encryptedContentInfo,
        ____EnvelopedData_unprotectedAttrs__item__attrType_tab,
        ___EnvelopedData_unprotectedAttrs__item__attrType,
        _____EnvelopedData_unprotectedAttrs__item__attrValues__item__tab,
        ____EnvelopedData_unprotectedAttrs__item__attrValues__item_,
        ___EnvelopedData_unprotectedAttrs__item__attrValues,
        __EnvelopedData_unprotectedAttrs__item_,
        _EnvelopedData_unprotectedAttrs,
        EnvelopedData,
        _OriginatorInfo_certs,
        _OriginatorInfo_crls,
        OriginatorInfo,
        _RecipientInfos__item_,
        RecipientInfos,
        __EncryptedContentInfo_contentType_tab,
        ___EncryptedContentInfo_contentType_tab_val_Type_0,
        ___EncryptedContentInfo_contentType_tab_val_Type_1,
        ___EncryptedContentInfo_contentType_tab_val_Type_2,
        ___EncryptedContentInfo_contentType_tab_val_Type_3,
        ___EncryptedContentInfo_contentType_tab_val_Type_4,
        ___EncryptedContentInfo_contentType_tab_val_Type_5,
        _EncryptedContentInfo_contentType,
        _EncryptedContentInfo_contentEncryptionAlgorithm,
        _EncryptedContentInfo_encryptedContent,
        EncryptedContentInfo,
        UnprotectedAttributes,
        _RecipientInfo_ktri,
        _RecipientInfo_kari,
        _RecipientInfo_kekri,
        _RecipientInfo_pwri,
        _RecipientInfo_ori,
        RecipientInfo,
        EncryptedKey,
        _KeyTransRecipientInfo_version,
        _KeyTransRecipientInfo_rid,
        ___KeyTransRecipientInfo_keyEncryptionAlgorithm_algorithm_tab,
        ____KeyTransRecipientInfo_keyEncryptionAlgorithm_algorithm_tab_val_Params_0,
        __KEY_TRANSPORT_PublicKeySet_val_KeyValue_0,
        __KEY_TRANSPORT_PublicKeySet_val_Params_0,
        __KeyTransRecipientInfo_keyEncryptionAlgorithm_algorithm,
        __KeyTransRecipientInfo_keyEncryptionAlgorithm_parameters,
        _KeyTransRecipientInfo_keyEncryptionAlgorithm,
        _KeyTransRecipientInfo_encryptedKey,
        KeyTransRecipientInfo,
        KeyTransportAlgorithmSet,
        _KeyTransportAlgorithmSet_val_Params_0,
        _RecipientIdentifier_issuerAndSerialNumber,
        _RecipientIdentifier_subjectKeyIdentifier,
        RecipientIdentifier,
        _KeyAgreeRecipientInfo_version,
        _KeyAgreeRecipientInfo_originator,
        _KeyAgreeRecipientInfo_ukm,
        ___KeyAgreeRecipientInfo_keyEncryptionAlgorithm_algorithm_tab,
        ____KeyAgreeRecipientInfo_keyEncryptionAlgorithm_algorithm_tab_val_Params_0,
        __KEY_AGREE_PublicKeySet_val_KeyValue_0,
        __KEY_AGREE_PublicKeySet_val_Params_0,
        __KEY_AGREE_smimeCaps_val_Type,
        ____KeyAgreeRecipientInfo_keyEncryptionAlgorithm_algorithm_tab_val_Params_1,
        __KeyAgreeRecipientInfo_keyEncryptionAlgorithm_algorithm,
        __KeyAgreeRecipientInfo_keyEncryptionAlgorithm_parameters,
        _KeyAgreeRecipientInfo_keyEncryptionAlgorithm,
        _KeyAgreeRecipientInfo_recipientEncryptedKeys,
        KeyAgreeRecipientInfo,
        KeyAgreementAlgorithmSet,
        _KeyAgreementAlgorithmSet_val_Params_0,
        _KeyAgreementAlgorithmSet_val_Params_1,
        _OriginatorIdentifierOrKey_issuerAndSerialNumber,
        _OriginatorIdentifierOrKey_subjectKeyIdentifier,
        _OriginatorIdentifierOrKey_originatorKey,
        OriginatorIdentifierOrKey,
        ___OriginatorPublicKey_algorithm_algorithm_tab,
        ____OriginatorPublicKey_algorithm_algorithm_tab_val_KeyValue_0,
        ____OriginatorPublicKey_algorithm_algorithm_tab_val_Params_0,
        __OriginatorPublicKey_algorithm_algorithm,
        __OriginatorPublicKey_algorithm_parameters,
        _OriginatorPublicKey_algorithm,
        _OriginatorPublicKey_publicKey,
        OriginatorPublicKey,
        OriginatorKeySet,
        _OriginatorKeySet_val_KeyValue_0,
        _OriginatorKeySet_val_Params_0,
        _RecipientEncryptedKeys__item_,
        RecipientEncryptedKeys,
        _RecipientEncryptedKey_rid,
        _RecipientEncryptedKey_encryptedKey,
        RecipientEncryptedKey,
        _KeyAgreeRecipientIdentifier_issuerAndSerialNumber,
        _KeyAgreeRecipientIdentifier_rKeyId,
        KeyAgreeRecipientIdentifier,
        _RecipientKeyIdentifier_subjectKeyIdentifier,
        _RecipientKeyIdentifier_date,
        _RecipientKeyIdentifier_other,
        RecipientKeyIdentifier,
        SubjectKeyIdentifier,
        _KEKRecipientInfo_version,
        _KEKRecipientInfo_kekid,
        _KEKRecipientInfo_keyEncryptionAlgorithm,
        _KEKRecipientInfo_encryptedKey,
        KEKRecipientInfo,
        _KEKIdentifier_keyIdentifier,
        _KEKIdentifier_date,
        _KEKIdentifier_other,
        KEKIdentifier,
        _PasswordRecipientInfo_version,
        _PasswordRecipientInfo_keyDerivationAlgorithm,
        _PasswordRecipientInfo_keyEncryptionAlgorithm,
        _PasswordRecipientInfo_encryptedKey,
        PasswordRecipientInfo,
        OTHER_RECIPIENT,
        __OtherRecipientInfo_oriType_tab,
        _OtherRecipientInfo_oriType,
        __OtherRecipientInfo_oriValue_tab,
        _OtherRecipientInfo_oriValue,
        OtherRecipientInfo,
        SupportedOtherRecipInfo,
        _DigestedData_version,
        _DigestedData_digestAlgorithm,
        _DigestedData_encapContentInfo,
        _DigestedData_digest,
        DigestedData,
        Digest,
        _EncryptedData_version,
        _EncryptedData_encryptedContentInfo,
        ____EncryptedData_unprotectedAttrs__item__attrType_tab,
        ___EncryptedData_unprotectedAttrs__item__attrType,
        _____EncryptedData_unprotectedAttrs__item__attrValues__item__tab,
        ____EncryptedData_unprotectedAttrs__item__attrValues__item_,
        ___EncryptedData_unprotectedAttrs__item__attrValues,
        __EncryptedData_unprotectedAttrs__item_,
        _EncryptedData_unprotectedAttrs,
        EncryptedData,
        _AuthenticatedData_version,
        _AuthenticatedData_originatorInfo,
        _AuthenticatedData_recipientInfos,
        _AuthenticatedData_macAlgorithm,
        _AuthenticatedData_digestAlgorithm,
        _AuthenticatedData_encapContentInfo,
        _AuthenticatedData_authAttrs,
        _AuthenticatedData_mac,
        _AuthenticatedData_unauthAttrs,
        AuthenticatedData,
        ___AuthAttributes__item__attrType_tab,
        ____AuthAttributes__item__attrType_tab_val_Type_0,
        ____AuthAttributes__item__attrType_tab_val_Type_1,
        ____AuthAttributes__item__attrType_tab_val_Type_2,
        __AuthAttributes__item__attrType,
        ___AuthAttributes__item__attrValues__item_,
        __AuthAttributes__item__attrValues,
        _AuthAttributes__item_,
        AuthAttributes,
        AuthAttributeSet,
        _AuthAttributeSet_val_Type_0,
        _AuthAttributeSet_val_Type_1,
        _AuthAttributeSet_val_Type_2,
        MessageAuthenticationCode,
        ___UnauthAttributes__item__attrType_tab,
        __UnauthAttributes__item__attrType,
        ____UnauthAttributes__item__attrValues__item__tab,
        ___UnauthAttributes__item__attrValues__item_,
        __UnauthAttributes__item__attrValues,
        _UnauthAttributes__item_,
        UnauthAttributes,
        UnauthAttributeSet,
        __DigestAlgorithmIdentifier_algorithm_tab,
        _DigestAlgorithmIdentifier_algorithm,
        __DigestAlgorithmIdentifier_parameters_tab,
        _DigestAlgorithmIdentifier_parameters,
        DigestAlgorithmIdentifier,
        DigestAlgorithmSet,
        __SignatureAlgorithmIdentifier_algorithm_tab,
        _SignatureAlgorithmIdentifier_algorithm,
        __SignatureAlgorithmIdentifier_parameters_tab,
        _SignatureAlgorithmIdentifier_parameters,
        SignatureAlgorithmIdentifier,
        SignatureAlgorithmSet,
        __KeyEncryptionAlgorithmIdentifier_algorithm_tab,
        ___KeyEncryptionAlgorithmIdentifier_algorithm_tab_val_Params_0,
        ___KeyEncryptionAlgorithmIdentifier_algorithm_tab_val_Params_1,
        _KeyEncryptionAlgorithmIdentifier_algorithm,
        _KeyEncryptionAlgorithmIdentifier_parameters,
        KeyEncryptionAlgorithmIdentifier,
        KeyEncryptionAlgorithmSet,
        _KeyEncryptionAlgorithmSet_val_Params_0,
        _KeyEncryptionAlgorithmSet_val_Params_1,
        __ContentEncryptionAlgorithmIdentifier_algorithm_tab,
        ___ContentEncryptionAlgorithmIdentifier_algorithm_tab_val_Params_0,
        ___ContentEncryptionAlgorithmIdentifier_algorithm_tab_val_Params_1,
        __CONTENT_ENCRYPTION_smimeCaps_val_Type,
        _ContentEncryptionAlgorithmIdentifier_algorithm,
        _ContentEncryptionAlgorithmIdentifier_parameters,
        ContentEncryptionAlgorithmIdentifier,
        ContentEncryptionAlgorithmSet,
        _ContentEncryptionAlgorithmSet_val_Params_0,
        _ContentEncryptionAlgorithmSet_val_Params_1,
        __MessageAuthenticationCodeAlgorithm_algorithm_tab,
        ___MessageAuthenticationCodeAlgorithm_algorithm_tab_val_Params_0,
        _MessageAuthenticationCodeAlgorithm_algorithm,
        _MessageAuthenticationCodeAlgorithm_parameters,
        MessageAuthenticationCodeAlgorithm,
        MessageAuthenticationCodeAlgorithmSet,
        _MessageAuthenticationCodeAlgorithmSet_val_Params_0,
        __KeyDerivationAlgorithmIdentifier_algorithm_tab,
        ___KeyDerivationAlgorithmIdentifier_algorithm_tab_val_Params_0,
        _KeyDerivationAlgorithmIdentifier_algorithm,
        _KeyDerivationAlgorithmIdentifier_parameters,
        KeyDerivationAlgorithmIdentifier,
        _RevocationInfoChoices__item_,
        RevocationInfoChoices,
        _RevocationInfoChoice_crl,
        _RevocationInfoChoice_other,
        RevocationInfoChoice,
        OTHER_REVOK_INFO,
        __OtherRevocationInfoFormat_otherRevInfoFormat_tab,
        _OtherRevocationInfoFormat_otherRevInfoFormat,
        __OtherRevocationInfoFormat_otherRevInfo_tab,
        _OtherRevocationInfoFormat_otherRevInfo,
        OtherRevocationInfoFormat,
        SupportedOtherRevokInfo,
        _CertificateChoices_certificate,
        _CertificateChoices_extendedCertificate,
        _CertificateChoices_v1AttrCert,
        _CertificateChoices_v2AttrCert,
        _CertificateChoices_other,
        CertificateChoices,
        AttributeCertificateV2,
        OTHER_CERT_FMT,
        __OtherCertificateFormat_otherCertFormat_tab,
        _OtherCertificateFormat_otherCertFormat,
        __OtherCertificateFormat_otherCert_tab,
        _OtherCertificateFormat_otherCert,
        OtherCertificateFormat,
        SupportedCertFormats,
        _CertificateSet__item_,
        CertificateSet,
        _IssuerAndSerialNumber_issuer,
        _IssuerAndSerialNumber_serialNumber,
        IssuerAndSerialNumber,
        CMSVersion,
        UserKeyingMaterial,
        KEY_ATTRIBUTE,
        __OtherKeyAttribute_keyAttrId_tab,
        _OtherKeyAttribute_keyAttrId,
        __OtherKeyAttribute_keyAttr_tab,
        _OtherKeyAttribute_keyAttr,
        OtherKeyAttribute,
        SupportedKeyAttributes,
        id_ct_contentInfo,
        ct_Data,
        _ct_Data_val_Type,
        id_data,
        ct_SignedData,
        _ct_SignedData_val_Type,
        id_signedData,
        ct_EnvelopedData,
        _ct_EnvelopedData_val_Type,
        id_envelopedData,
        ct_DigestedData,
        _ct_DigestedData_val_Type,
        id_digestedData,
        ct_EncryptedData,
        _ct_EncryptedData_val_Type,
        id_encryptedData,
        ct_AuthenticatedData,
        _ct_AuthenticatedData_val_Type,
        id_ct_authData,
        MessageDigest,
        SigningTime,
        _Time_utcTime,
        _Time_generalTime,
        Time,
        Countersignature,
        aa_contentType,
        _aa_contentType_val_Type,
        id_contentType,
        aa_messageDigest,
        _aa_messageDigest_val_Type,
        id_messageDigest,
        aa_signingTime,
        _aa_signingTime_val_Type,
        id_signingTime,
        aa_countersignature,
        _aa_countersignature_val_Type,
        id_countersignature,
        _ExtendedCertificateOrCertificate_certificate,
        _ExtendedCertificateOrCertificate_extendedCertificate,
        ExtendedCertificateOrCertificate,
        _ExtendedCertificate_extendedCertificateInfo,
        _ExtendedCertificate_signatureAlgorithm,
        _ExtendedCertificate_signature,
        ExtendedCertificate,
        _ExtendedCertificateInfo_version,
        _ExtendedCertificateInfo_certificate,
        _ExtendedCertificateInfo_attributes,
        ExtendedCertificateInfo,
        Signature,
    ]

class CryptographicMessageSyntaxAlgorithms_2009:

    _name_  = 'CryptographicMessageSyntaxAlgorithms-2009'
    _oid_   = [1, 2, 840, 113549, 1, 9, 16, 0, 37]
    
    _obj_ = [
        'MessageDigestAlgs',
        'SignatureAlgs',
        'KeyAgreementAlgs',
        'KeyAgreePublicKeys',
        'KeyTransportAlgs',
        'KeyWrapAlgs',
        'KeyDerivationAlgs',
        'ContentEncryptionAlgs',
        'MessageAuthAlgs',
        'SMimeCaps',
        'id-alg-ESDH',
        'id-alg-SSDH',
        'id-alg-CMS3DESwrap',
        'id-alg-CMSRC2wrap',
        'des-ede3-cbc',
        'rc2-cbc',
        'hMAC-SHA1',
        'id-PBKDF2',
        'KeyWrapAlgorithm',
        'RC2wrapParameter',
        'RC2ParameterVersion',
        'CBCParameter',
        'IV',
        'RC2CBCParameter',
        'maca-hMAC-SHA1',
        'PBKDF2-PRFsAlgorithmIdentifier',
        'alg-hMAC-SHA1',
        'PBKDF2-PRFs',
        'PBKDF2-SaltSources',
        'PBKDF2-SaltSourcesAlgorithmIdentifier',
        'defaultPBKDF2',
        'PBKDF2-params',
        'kaa-esdh',
        'kaa-ssdh',
        'dh-public-number',
        'pk-originator-dh',
        'kwa-3DESWrap',
        'kwa-RC2Wrap',
        'kda-PBKDF2',
        'cea-3DES-cbc',
        'cea-RC2-cbc',
        'kt-rsa',
        'cap-3DESwrap',
        ]
    _type_ = [
        'KeyWrapAlgorithm',
        'RC2wrapParameter',
        'RC2ParameterVersion',
        'CBCParameter',
        'IV',
        'RC2CBCParameter',
        'PBKDF2-PRFsAlgorithmIdentifier',
        'PBKDF2-SaltSourcesAlgorithmIdentifier',
        'PBKDF2-params',
        ]
    _set_ = [
        'MessageDigestAlgs',
        'SignatureAlgs',
        'KeyAgreementAlgs',
        'KeyAgreePublicKeys',
        'KeyTransportAlgs',
        'KeyWrapAlgs',
        'KeyDerivationAlgs',
        'ContentEncryptionAlgs',
        'MessageAuthAlgs',
        'SMimeCaps',
        'PBKDF2-PRFs',
        'PBKDF2-SaltSources',
        ]
    _val_ = [
        'id-alg-ESDH',
        'id-alg-SSDH',
        'id-alg-CMS3DESwrap',
        'id-alg-CMSRC2wrap',
        'des-ede3-cbc',
        'rc2-cbc',
        'hMAC-SHA1',
        'id-PBKDF2',
        'maca-hMAC-SHA1',
        'alg-hMAC-SHA1',
        'defaultPBKDF2',
        'kaa-esdh',
        'kaa-ssdh',
        'dh-public-number',
        'pk-originator-dh',
        'kwa-3DESWrap',
        'kwa-RC2Wrap',
        'kda-PBKDF2',
        'cea-3DES-cbc',
        'cea-RC2-cbc',
        'kt-rsa',
        'cap-3DESwrap',
        ]
    _class_ = [
        'MessageDigestAlgs',
        'SignatureAlgs',
        'KeyAgreementAlgs',
        'KeyAgreePublicKeys',
        'KeyTransportAlgs',
        'KeyWrapAlgs',
        'KeyDerivationAlgs',
        'ContentEncryptionAlgs',
        'MessageAuthAlgs',
        'SMimeCaps',
        'maca-hMAC-SHA1',
        'alg-hMAC-SHA1',
        'PBKDF2-PRFs',
        'PBKDF2-SaltSources',
        'kaa-esdh',
        'kaa-ssdh',
        'pk-originator-dh',
        'kwa-3DESWrap',
        'kwa-RC2Wrap',
        'kda-PBKDF2',
        'cea-3DES-cbc',
        'cea-RC2-cbc',
        'kt-rsa',
        'cap-3DESwrap',
        ]
    _param_ = [
        ]
    
    #-----< MessageDigestAlgs >-----#
    MessageDigestAlgs = CLASS(name='MessageDigestAlgs', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    MessageDigestAlgs._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< SignatureAlgs >-----#
    SignatureAlgs = CLASS(name='SignatureAlgs', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SIGNATURE-ALGORITHM')))
    SignatureAlgs._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< KeyAgreementAlgs >-----#
    KeyAgreementAlgs = CLASS(name='KeyAgreementAlgs', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-AGREE')))
    _KeyAgreementAlgs_val_Params_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'KeyWrapAlgorithm')))
    __KEY_AGREE_PublicKeySet_val_KeyValue_0 = INT(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DHPublicKey')))
    __KEY_AGREE_PublicKeySet_val_Params_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DomainParameters')))
    __KEY_AGREE_smimeCaps_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'KeyWrapAlgorithm')))
    _KeyAgreementAlgs_val_Params_1 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'KeyWrapAlgorithm')))
    KeyAgreementAlgs._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 5)), ('Params', _KeyAgreementAlgs_val_Params_0), ('paramPresence', 'required'), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10046, 2, 1)), ('KeyValue', __KEY_AGREE_PublicKeySet_val_KeyValue_0), ('Params', __KEY_AGREE_PublicKeySet_val_Params_0), ('paramPresence', 'inheritable'), ('keyUsage', (19, 9))])], rr=[], ev=None, er=[])), ('ukmPresence', 'optional'), ('smimeCaps', dict([('Type', __KEY_AGREE_smimeCaps_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 3, 5))]))]), dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 10)), ('Params', _KeyAgreementAlgs_val_Params_1), ('paramPresence', 'required'), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10046, 2, 1)), ('KeyValue', __KEY_AGREE_PublicKeySet_val_KeyValue_0), ('Params', __KEY_AGREE_PublicKeySet_val_Params_0), ('paramPresence', 'inheritable'), ('keyUsage', (19, 9))])], rr=[], ev=None, er=[])), ('ukmPresence', 'optional'), ('smimeCaps', dict([('Type', __KEY_AGREE_smimeCaps_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 3, 10))]))])], rr=[], ev=[], er=[])
    
    #-----< KeyAgreePublicKeys >-----#
    KeyAgreePublicKeys = CLASS(name='KeyAgreePublicKeys', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')))
    _KeyAgreePublicKeys_val_KeyValue_0 = INT(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DHPublicKey')))
    _KeyAgreePublicKeys_val_Params_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DomainParameters')))
    KeyAgreePublicKeys._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 10046, 2, 1)), ('KeyValue', _KeyAgreePublicKeys_val_KeyValue_0), ('Params', _KeyAgreePublicKeys_val_Params_0), ('paramPresence', 'inheritable'), ('keyUsage', (19, 9))])], rr=[], ev=[], er=[])
    
    #-----< KeyTransportAlgs >-----#
    KeyTransportAlgs = CLASS(name='KeyTransportAlgs', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-TRANSPORT')))
    _KeyTransportAlgs_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    __KEY_TRANSPORT_PublicKeySet_val_KeyValue_0 = SEQ(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'RSAPublicKey')))
    __KEY_TRANSPORT_PublicKeySet_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    KeyTransportAlgs._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('Params', _KeyTransportAlgs_val_Params_0), ('paramPresence', 'required'), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', __KEY_TRANSPORT_PublicKeySet_val_KeyValue_0), ('Params', __KEY_TRANSPORT_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 1))]))])], rr=[], ev=[], er=[])
    
    #-----< KeyWrapAlgs >-----#
    KeyWrapAlgs = CLASS(name='KeyWrapAlgs', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-WRAP')))
    _KeyWrapAlgs_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    _KeyWrapAlgs_val_Params_1 = INT(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'RC2wrapParameter')))
    KeyWrapAlgs._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 6)), ('Params', _KeyWrapAlgs_val_Params_0), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 6))]))]), dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 7)), ('Params', _KeyWrapAlgs_val_Params_1), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 7))]))])], rr=[], ev=[], er=[])
    
    #-----< KeyDerivationAlgs >-----#
    KeyDerivationAlgs = CLASS(name='KeyDerivationAlgs', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-DERIVATION')))
    _KeyDerivationAlgs_val_Params_0 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'PBKDF2-params')))
    KeyDerivationAlgs._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 5, 12)), ('Params', _KeyDerivationAlgs_val_Params_0), ('paramPresence', 'required')])], rr=[], ev=[], er=[])
    
    #-----< ContentEncryptionAlgs >-----#
    ContentEncryptionAlgs = CLASS(name='ContentEncryptionAlgs', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'CONTENT-ENCRYPTION')))
    _ContentEncryptionAlgs_val_Params_0 = OCT_STR(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'IV')))
    _ContentEncryptionAlgs_val_Params_1 = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'RC2CBCParameter')))
    __CONTENT_ENCRYPTION_smimeCaps_val_Type = INT(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SecureMimeMessageV3dot1-2009', 'SMIMECapabilitiesParametersForRC2CBC')))
    ContentEncryptionAlgs._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 3, 7)), ('Params', _ContentEncryptionAlgs_val_Params_0), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 3, 7))]))]), dict([('id', (1, 2, 840, 113549, 3, 2)), ('Params', _ContentEncryptionAlgs_val_Params_1), ('paramPresence', 'required'), ('smimeCaps', dict([('Type', __CONTENT_ENCRYPTION_smimeCaps_val_Type), ('id', (1, 2, 840, 113549, 3, 2))]))])], rr=[], ev=[], er=[])
    
    #-----< MessageAuthAlgs >-----#
    MessageAuthAlgs = CLASS(name='MessageAuthAlgs', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'MAC-ALGORITHM')))
    _MessageAuthAlgs_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    MessageAuthAlgs._val = ASN1Set(rv=[dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2)), ('Params', _MessageAuthAlgs_val_Params_0), ('paramPresence', 'preferredAbsent'), ('keyed', True), ('smimeCaps', dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2))]))])], rr=[], ev=[], er=[])
    
    #-----< SMimeCaps >-----#
    SMimeCaps = CLASS(name='SMimeCaps', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')))
    _SMimeCaps_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'KeyWrapAlgorithm')))
    _SMimeCaps_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'KeyWrapAlgorithm')))
    _SMimeCaps_val_Type_6 = INT(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SecureMimeMessageV3dot1-2009', 'SMIMECapabilitiesParametersForRC2CBC')))
    SMimeCaps._val = ASN1Set(rv=[dict([('Type', _SMimeCaps_val_Type_0), ('id', (1, 2, 840, 113549, 1, 9, 16, 3, 5))]), dict([('Type', _SMimeCaps_val_Type_1), ('id', (1, 2, 840, 113549, 1, 9, 16, 3, 10))]), dict([('id', (1, 2, 840, 113549, 1, 1, 1))]), dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 6))]), dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 7))]), dict([('id', (1, 2, 840, 113549, 3, 7))]), dict([('Type', _SMimeCaps_val_Type_6), ('id', (1, 2, 840, 113549, 3, 2))]), dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2))])], rr=[], ev=[], er=[])
    
    #-----< id-alg-ESDH >-----#
    id_alg_ESDH = OID(name='id-alg-ESDH', mode=MODE_VALUE)
    id_alg_ESDH._val = (1, 2, 840, 113549, 1, 9, 16, 3, 5)
    
    #-----< id-alg-SSDH >-----#
    id_alg_SSDH = OID(name='id-alg-SSDH', mode=MODE_VALUE)
    id_alg_SSDH._val = (1, 2, 840, 113549, 1, 9, 16, 3, 10)
    
    #-----< id-alg-CMS3DESwrap >-----#
    id_alg_CMS3DESwrap = OID(name='id-alg-CMS3DESwrap', mode=MODE_VALUE)
    id_alg_CMS3DESwrap._val = (1, 2, 840, 113549, 1, 9, 16, 3, 6)
    
    #-----< id-alg-CMSRC2wrap >-----#
    id_alg_CMSRC2wrap = OID(name='id-alg-CMSRC2wrap', mode=MODE_VALUE)
    id_alg_CMSRC2wrap._val = (1, 2, 840, 113549, 1, 9, 16, 3, 7)
    
    #-----< des-ede3-cbc >-----#
    des_ede3_cbc = OID(name='des-ede3-cbc', mode=MODE_VALUE)
    des_ede3_cbc._val = (1, 2, 840, 113549, 3, 7)
    
    #-----< rc2-cbc >-----#
    rc2_cbc = OID(name='rc2-cbc', mode=MODE_VALUE)
    rc2_cbc._val = (1, 2, 840, 113549, 3, 2)
    
    #-----< hMAC-SHA1 >-----#
    hMAC_SHA1 = OID(name='hMAC-SHA1', mode=MODE_VALUE)
    hMAC_SHA1._val = (1, 3, 6, 1, 5, 5, 8, 1, 2)
    
    #-----< id-PBKDF2 >-----#
    id_PBKDF2 = OID(name='id-PBKDF2', mode=MODE_VALUE)
    id_PBKDF2._val = (1, 2, 840, 113549, 1, 5, 12)
    
    #-----< KeyWrapAlgorithm >-----#
    KeyWrapAlgorithm = SEQ(name='KeyWrapAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    _KeyWrapAlgorithm_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'KEY-WRAP'), ['id']))
    __KeyWrapAlgorithm_algorithm_tab = CLASS(name='_tab_KEY-WRAP', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-WRAP')))
    ___KeyWrapAlgorithm_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    ___KeyWrapAlgorithm_algorithm_tab_val_Params_1 = INT(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'RC2wrapParameter')))
    __KeyWrapAlgorithm_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 6)), ('Params', ___KeyWrapAlgorithm_algorithm_tab_val_Params_0), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 6))]))]), dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 7)), ('Params', ___KeyWrapAlgorithm_algorithm_tab_val_Params_1), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 7))]))])], rr=[], ev=None, er=[])
    _KeyWrapAlgorithm_algorithm._const_tab = __KeyWrapAlgorithm_algorithm_tab
    _KeyWrapAlgorithm_algorithm._const_tab_at = None
    _KeyWrapAlgorithm_algorithm._const_tab_id = 'id'
    _KeyWrapAlgorithm_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'KEY-WRAP'), ['Params']), opt=True)
    _KeyWrapAlgorithm_parameters._const_tab = __KeyWrapAlgorithm_algorithm_tab
    _KeyWrapAlgorithm_parameters._const_tab_at = ('..', 'algorithm')
    _KeyWrapAlgorithm_parameters._const_tab_id = 'Params'
    KeyWrapAlgorithm._cont = ASN1Dict([
        ('algorithm', _KeyWrapAlgorithm_algorithm),
        ('parameters', _KeyWrapAlgorithm_parameters),
        ])
    KeyWrapAlgorithm._ext = None
    
    #-----< RC2wrapParameter >-----#
    RC2wrapParameter = INT(name='RC2wrapParameter', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'RC2ParameterVersion')))
    
    #-----< RC2ParameterVersion >-----#
    RC2ParameterVersion = INT(name='RC2ParameterVersion', mode=MODE_TYPE)
    
    #-----< CBCParameter >-----#
    CBCParameter = OCT_STR(name='CBCParameter', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'IV')))
    
    #-----< IV >-----#
    IV = OCT_STR(name='IV', mode=MODE_TYPE)
    
    #-----< RC2CBCParameter >-----#
    RC2CBCParameter = SEQ(name='RC2CBCParameter', mode=MODE_TYPE)
    _RC2CBCParameter_rc2ParameterVersion = INT(name='rc2ParameterVersion', mode=MODE_TYPE)
    _RC2CBCParameter_rc2ParameterVersion._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    _RC2CBCParameter_iv = OCT_STR(name='iv', mode=MODE_TYPE)
    RC2CBCParameter._cont = ASN1Dict([
        ('rc2ParameterVersion', _RC2CBCParameter_rc2ParameterVersion),
        ('iv', _RC2CBCParameter_iv),
        ])
    RC2CBCParameter._ext = None
    
    #-----< maca-hMAC-SHA1 >-----#
    maca_hMAC_SHA1 = CLASS(name='maca-hMAC-SHA1', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'MAC-ALGORITHM')))
    _maca_hMAC_SHA1_val_Params = NULL(name='Params', mode=MODE_TYPE)
    maca_hMAC_SHA1._val = dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2)), ('Params', _maca_hMAC_SHA1_val_Params), ('paramPresence', 'preferredAbsent'), ('keyed', True), ('smimeCaps', dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2))]))])
    
    #-----< PBKDF2-PRFsAlgorithmIdentifier >-----#
    PBKDF2_PRFsAlgorithmIdentifier = SEQ(name='PBKDF2-PRFsAlgorithmIdentifier', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    _PBKDF2_PRFsAlgorithmIdentifier_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'ALGORITHM'), ['id']))
    __PBKDF2_PRFsAlgorithmIdentifier_algorithm_tab = CLASS(name='_tab_ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ALGORITHM')))
    ___PBKDF2_PRFsAlgorithmIdentifier_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    __PBKDF2_PRFsAlgorithmIdentifier_algorithm_tab._val = ASN1Set(rv=[dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2)), ('Params', ___PBKDF2_PRFsAlgorithmIdentifier_algorithm_tab_val_Params_0), ('paramPresence', 'required')])], rr=[], ev=None, er=[])
    _PBKDF2_PRFsAlgorithmIdentifier_algorithm._const_tab = __PBKDF2_PRFsAlgorithmIdentifier_algorithm_tab
    _PBKDF2_PRFsAlgorithmIdentifier_algorithm._const_tab_at = None
    _PBKDF2_PRFsAlgorithmIdentifier_algorithm._const_tab_id = 'id'
    _PBKDF2_PRFsAlgorithmIdentifier_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'ALGORITHM'), ['Params']), opt=True)
    _PBKDF2_PRFsAlgorithmIdentifier_parameters._const_tab = __PBKDF2_PRFsAlgorithmIdentifier_algorithm_tab
    _PBKDF2_PRFsAlgorithmIdentifier_parameters._const_tab_at = ('..', 'algorithm')
    _PBKDF2_PRFsAlgorithmIdentifier_parameters._const_tab_id = 'Params'
    PBKDF2_PRFsAlgorithmIdentifier._cont = ASN1Dict([
        ('algorithm', _PBKDF2_PRFsAlgorithmIdentifier_algorithm),
        ('parameters', _PBKDF2_PRFsAlgorithmIdentifier_parameters),
        ])
    PBKDF2_PRFsAlgorithmIdentifier._ext = None
    
    #-----< alg-hMAC-SHA1 >-----#
    alg_hMAC_SHA1 = CLASS(name='alg-hMAC-SHA1', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ALGORITHM')))
    _alg_hMAC_SHA1_val_Params = NULL(name='Params', mode=MODE_TYPE)
    alg_hMAC_SHA1._val = dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2)), ('Params', _alg_hMAC_SHA1_val_Params), ('paramPresence', 'required')])
    
    #-----< PBKDF2-PRFs >-----#
    PBKDF2_PRFs = CLASS(name='PBKDF2-PRFs', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ALGORITHM')))
    _PBKDF2_PRFs_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    PBKDF2_PRFs._val = ASN1Set(rv=[dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2)), ('Params', _PBKDF2_PRFs_val_Params_0), ('paramPresence', 'required')])], rr=[], ev=[], er=[])
    
    #-----< PBKDF2-SaltSources >-----#
    PBKDF2_SaltSources = CLASS(name='PBKDF2-SaltSources', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ALGORITHM')))
    PBKDF2_SaltSources._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< PBKDF2-SaltSourcesAlgorithmIdentifier >-----#
    PBKDF2_SaltSourcesAlgorithmIdentifier = SEQ(name='PBKDF2-SaltSourcesAlgorithmIdentifier', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    _PBKDF2_SaltSourcesAlgorithmIdentifier_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'ALGORITHM'), ['id']))
    __PBKDF2_SaltSourcesAlgorithmIdentifier_algorithm_tab = CLASS(name='_tab_ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ALGORITHM')))
    __PBKDF2_SaltSourcesAlgorithmIdentifier_algorithm_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    _PBKDF2_SaltSourcesAlgorithmIdentifier_algorithm._const_tab = __PBKDF2_SaltSourcesAlgorithmIdentifier_algorithm_tab
    _PBKDF2_SaltSourcesAlgorithmIdentifier_algorithm._const_tab_at = None
    _PBKDF2_SaltSourcesAlgorithmIdentifier_algorithm._const_tab_id = 'id'
    _PBKDF2_SaltSourcesAlgorithmIdentifier_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'ALGORITHM'), ['Params']), opt=True)
    __PBKDF2_SaltSourcesAlgorithmIdentifier_parameters_tab = CLASS(name='_tab_ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'ALGORITHM')))
    __PBKDF2_SaltSourcesAlgorithmIdentifier_parameters_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    _PBKDF2_SaltSourcesAlgorithmIdentifier_parameters._const_tab = __PBKDF2_SaltSourcesAlgorithmIdentifier_parameters_tab
    _PBKDF2_SaltSourcesAlgorithmIdentifier_parameters._const_tab_at = ('..', 'algorithm')
    _PBKDF2_SaltSourcesAlgorithmIdentifier_parameters._const_tab_id = 'Params'
    PBKDF2_SaltSourcesAlgorithmIdentifier._cont = ASN1Dict([
        ('algorithm', _PBKDF2_SaltSourcesAlgorithmIdentifier_algorithm),
        ('parameters', _PBKDF2_SaltSourcesAlgorithmIdentifier_parameters),
        ])
    PBKDF2_SaltSourcesAlgorithmIdentifier._ext = None
    
    #-----< defaultPBKDF2 >-----#
    defaultPBKDF2 = SEQ(name='defaultPBKDF2', mode=MODE_VALUE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'PBKDF2-PRFsAlgorithmIdentifier')))
    _parameters_val = NULL(name='parameters', mode=MODE_TYPE)
    defaultPBKDF2._val = dict([('algorithm', (1, 3, 6, 1, 5, 5, 8, 1, 2)), ('parameters', (_parameters_val, 0))])
    
    #-----< PBKDF2-params >-----#
    PBKDF2_params = SEQ(name='PBKDF2-params', mode=MODE_TYPE)
    _PBKDF2_params_salt = CHOICE(name='salt', mode=MODE_TYPE)
    __PBKDF2_params_salt_specified = OCT_STR(name='specified', mode=MODE_TYPE)
    __PBKDF2_params_salt_otherSource = SEQ(name='otherSource', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'PBKDF2-SaltSourcesAlgorithmIdentifier')))
    _PBKDF2_params_salt._cont = ASN1Dict([
        ('specified', __PBKDF2_params_salt_specified),
        ('otherSource', __PBKDF2_params_salt_otherSource),
        ])
    _PBKDF2_params_salt._ext = None
    _PBKDF2_params_iterationCount = INT(name='iterationCount', mode=MODE_TYPE)
    _PBKDF2_params_iterationCount._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    _PBKDF2_params_keyLength = INT(name='keyLength', mode=MODE_TYPE, opt=True)
    _PBKDF2_params_keyLength._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    _PBKDF2_params_prf = SEQ(name='prf', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'PBKDF2-PRFsAlgorithmIdentifier')), default=dict([('algorithm', (1, 3, 6, 1, 5, 5, 8, 1, 2)), ('parameters', (_parameters_val, 0))]))
    PBKDF2_params._cont = ASN1Dict([
        ('salt', _PBKDF2_params_salt),
        ('iterationCount', _PBKDF2_params_iterationCount),
        ('keyLength', _PBKDF2_params_keyLength),
        ('prf', _PBKDF2_params_prf),
        ])
    PBKDF2_params._ext = None
    
    #-----< kaa-esdh >-----#
    kaa_esdh = CLASS(name='kaa-esdh', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-AGREE')))
    _kaa_esdh_val_Params = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'KeyWrapAlgorithm')))
    kaa_esdh._val = dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 5)), ('Params', _kaa_esdh_val_Params), ('paramPresence', 'required'), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10046, 2, 1)), ('KeyValue', __KEY_AGREE_PublicKeySet_val_KeyValue_0), ('Params', __KEY_AGREE_PublicKeySet_val_Params_0), ('paramPresence', 'inheritable'), ('keyUsage', (19, 9))])], rr=[], ev=None, er=[])), ('ukmPresence', 'optional'), ('smimeCaps', dict([('Type', __KEY_AGREE_smimeCaps_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 3, 5))]))])
    
    #-----< kaa-ssdh >-----#
    kaa_ssdh = CLASS(name='kaa-ssdh', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-AGREE')))
    _kaa_ssdh_val_Params = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'KeyWrapAlgorithm')))
    kaa_ssdh._val = dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 10)), ('Params', _kaa_ssdh_val_Params), ('paramPresence', 'required'), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 10046, 2, 1)), ('KeyValue', __KEY_AGREE_PublicKeySet_val_KeyValue_0), ('Params', __KEY_AGREE_PublicKeySet_val_Params_0), ('paramPresence', 'inheritable'), ('keyUsage', (19, 9))])], rr=[], ev=None, er=[])), ('ukmPresence', 'optional'), ('smimeCaps', dict([('Type', __KEY_AGREE_smimeCaps_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 3, 10))]))])
    
    #-----< dh-public-number >-----#
    dh_public_number = OID(name='dh-public-number', mode=MODE_VALUE)
    dh_public_number._val = (1, 2, 840, 10046, 2, 1)
    
    #-----< pk-originator-dh >-----#
    pk_originator_dh = CLASS(name='pk-originator-dh', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'PUBLIC-KEY')))
    _pk_originator_dh_val_KeyValue = INT(name='KeyValue', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAlgs-2009', 'DHPublicKey')))
    pk_originator_dh._val = dict([('id', (1, 2, 840, 10046, 2, 1)), ('KeyValue', _pk_originator_dh_val_KeyValue), ('paramPresence', 'absent'), ('keyUsage', (19, 9))])
    
    #-----< kwa-3DESWrap >-----#
    kwa_3DESWrap = CLASS(name='kwa-3DESWrap', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-WRAP')))
    _kwa_3DESWrap_val_Params = NULL(name='Params', mode=MODE_TYPE)
    kwa_3DESWrap._val = dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 6)), ('Params', _kwa_3DESWrap_val_Params), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 6))]))])
    
    #-----< kwa-RC2Wrap >-----#
    kwa_RC2Wrap = CLASS(name='kwa-RC2Wrap', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-WRAP')))
    _kwa_RC2Wrap_val_Params = INT(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'RC2wrapParameter')))
    kwa_RC2Wrap._val = dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 7)), ('Params', _kwa_RC2Wrap_val_Params), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 7))]))])
    
    #-----< kda-PBKDF2 >-----#
    kda_PBKDF2 = CLASS(name='kda-PBKDF2', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-DERIVATION')))
    _kda_PBKDF2_val_Params = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'PBKDF2-params')))
    kda_PBKDF2._val = dict([('id', (1, 2, 840, 113549, 1, 5, 12)), ('Params', _kda_PBKDF2_val_Params), ('paramPresence', 'required')])
    
    #-----< cea-3DES-cbc >-----#
    cea_3DES_cbc = CLASS(name='cea-3DES-cbc', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'CONTENT-ENCRYPTION')))
    _cea_3DES_cbc_val_Params = OCT_STR(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'IV')))
    cea_3DES_cbc._val = dict([('id', (1, 2, 840, 113549, 3, 7)), ('Params', _cea_3DES_cbc_val_Params), ('paramPresence', 'required'), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 3, 7))]))])
    
    #-----< cea-RC2-cbc >-----#
    cea_RC2_cbc = CLASS(name='cea-RC2-cbc', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'CONTENT-ENCRYPTION')))
    _cea_RC2_cbc_val_Params = SEQ(name='Params', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'RC2CBCParameter')))
    cea_RC2_cbc._val = dict([('id', (1, 2, 840, 113549, 3, 2)), ('Params', _cea_RC2_cbc_val_Params), ('paramPresence', 'required'), ('smimeCaps', dict([('Type', __CONTENT_ENCRYPTION_smimeCaps_val_Type), ('id', (1, 2, 840, 113549, 3, 2))]))])
    
    #-----< kt-rsa >-----#
    kt_rsa = CLASS(name='kt-rsa', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'KEY-TRANSPORT')))
    _kt_rsa_val_Params = NULL(name='Params', mode=MODE_TYPE)
    kt_rsa._val = dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('Params', _kt_rsa_val_Params), ('paramPresence', 'required'), ('PublicKeySet', ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 1, 1)), ('KeyValue', __KEY_TRANSPORT_PublicKeySet_val_KeyValue_0), ('Params', __KEY_TRANSPORT_PublicKeySet_val_Params_0), ('paramPresence', 'absent'), ('keyUsage', (123, 7))])], rr=[], ev=None, er=[])), ('smimeCaps', dict([('id', (1, 2, 840, 113549, 1, 1, 1))]))])
    
    #-----< cap-3DESwrap >-----#
    cap_3DESwrap = CLASS(name='cap-3DESwrap', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')))
    cap_3DESwrap._val = dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 6))])
    
    _all_ = [
        MessageDigestAlgs,
        SignatureAlgs,
        KeyAgreementAlgs,
        _KeyAgreementAlgs_val_Params_0,
        __KEY_AGREE_PublicKeySet_val_KeyValue_0,
        __KEY_AGREE_PublicKeySet_val_Params_0,
        __KEY_AGREE_smimeCaps_val_Type,
        _KeyAgreementAlgs_val_Params_1,
        KeyAgreePublicKeys,
        _KeyAgreePublicKeys_val_KeyValue_0,
        _KeyAgreePublicKeys_val_Params_0,
        KeyTransportAlgs,
        _KeyTransportAlgs_val_Params_0,
        __KEY_TRANSPORT_PublicKeySet_val_KeyValue_0,
        __KEY_TRANSPORT_PublicKeySet_val_Params_0,
        KeyWrapAlgs,
        _KeyWrapAlgs_val_Params_0,
        _KeyWrapAlgs_val_Params_1,
        KeyDerivationAlgs,
        _KeyDerivationAlgs_val_Params_0,
        ContentEncryptionAlgs,
        _ContentEncryptionAlgs_val_Params_0,
        _ContentEncryptionAlgs_val_Params_1,
        __CONTENT_ENCRYPTION_smimeCaps_val_Type,
        MessageAuthAlgs,
        _MessageAuthAlgs_val_Params_0,
        SMimeCaps,
        _SMimeCaps_val_Type_0,
        _SMimeCaps_val_Type_1,
        _SMimeCaps_val_Type_6,
        id_alg_ESDH,
        id_alg_SSDH,
        id_alg_CMS3DESwrap,
        id_alg_CMSRC2wrap,
        des_ede3_cbc,
        rc2_cbc,
        hMAC_SHA1,
        id_PBKDF2,
        __KeyWrapAlgorithm_algorithm_tab,
        ___KeyWrapAlgorithm_algorithm_tab_val_Params_0,
        ___KeyWrapAlgorithm_algorithm_tab_val_Params_1,
        _KeyWrapAlgorithm_algorithm,
        _KeyWrapAlgorithm_parameters,
        KeyWrapAlgorithm,
        RC2wrapParameter,
        RC2ParameterVersion,
        CBCParameter,
        IV,
        _RC2CBCParameter_rc2ParameterVersion,
        _RC2CBCParameter_iv,
        RC2CBCParameter,
        maca_hMAC_SHA1,
        _maca_hMAC_SHA1_val_Params,
        __PBKDF2_PRFsAlgorithmIdentifier_algorithm_tab,
        ___PBKDF2_PRFsAlgorithmIdentifier_algorithm_tab_val_Params_0,
        _PBKDF2_PRFsAlgorithmIdentifier_algorithm,
        _PBKDF2_PRFsAlgorithmIdentifier_parameters,
        PBKDF2_PRFsAlgorithmIdentifier,
        alg_hMAC_SHA1,
        _alg_hMAC_SHA1_val_Params,
        PBKDF2_PRFs,
        _PBKDF2_PRFs_val_Params_0,
        PBKDF2_SaltSources,
        __PBKDF2_SaltSourcesAlgorithmIdentifier_algorithm_tab,
        _PBKDF2_SaltSourcesAlgorithmIdentifier_algorithm,
        __PBKDF2_SaltSourcesAlgorithmIdentifier_parameters_tab,
        _PBKDF2_SaltSourcesAlgorithmIdentifier_parameters,
        PBKDF2_SaltSourcesAlgorithmIdentifier,
        defaultPBKDF2,
        _parameters_val,
        __PBKDF2_params_salt_specified,
        __PBKDF2_params_salt_otherSource,
        _PBKDF2_params_salt,
        _PBKDF2_params_iterationCount,
        _PBKDF2_params_keyLength,
        _PBKDF2_params_prf,
        PBKDF2_params,
        kaa_esdh,
        _kaa_esdh_val_Params,
        kaa_ssdh,
        _kaa_ssdh_val_Params,
        dh_public_number,
        pk_originator_dh,
        _pk_originator_dh_val_KeyValue,
        kwa_3DESWrap,
        _kwa_3DESWrap_val_Params,
        kwa_RC2Wrap,
        _kwa_RC2Wrap_val_Params,
        kda_PBKDF2,
        _kda_PBKDF2_val_Params,
        cea_3DES_cbc,
        _cea_3DES_cbc_val_Params,
        cea_RC2_cbc,
        _cea_RC2_cbc_val_Params,
        kt_rsa,
        _kt_rsa_val_Params,
        cap_3DESwrap,
    ]

class ERS:

    _name_  = 'ERS'
    _oid_   = [1, 3, 6, 1, 5, 5, 11, 0, 1, 1]
    
    _obj_ = [
        'aa-er-Internal',
        'id-aa-er-internal',
        'aa-er-External',
        'id-aa-er-external',
        'ltans',
        'EvidenceRecord',
        'CryptoInfos',
        'ArchiveTimeStampSequence',
        'ArchiveTimeStampChain',
        'ArchiveTimeStamp',
        'PartialHashtree',
        'Attributes',
        'EncryptionInfo',
        'ENCINFO-TYPE',
        'SupportedEncryptionAlgorithms',
        ]
    _type_ = [
        'EvidenceRecord',
        'CryptoInfos',
        'ArchiveTimeStampSequence',
        'ArchiveTimeStampChain',
        'ArchiveTimeStamp',
        'PartialHashtree',
        'Attributes',
        'EncryptionInfo',
        'ENCINFO-TYPE',
        ]
    _set_ = [
        'SupportedEncryptionAlgorithms',
        ]
    _val_ = [
        'aa-er-Internal',
        'id-aa-er-internal',
        'aa-er-External',
        'id-aa-er-external',
        'ltans',
        ]
    _class_ = [
        'aa-er-Internal',
        'aa-er-External',
        'ENCINFO-TYPE',
        'SupportedEncryptionAlgorithms',
        ]
    _param_ = [
        ]
    
    #-----< aa-er-Internal >-----#
    aa_er_Internal = CLASS(name='aa-er-Internal', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_er_Internal_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ERS', 'EvidenceRecord')))
    aa_er_Internal._val = dict([('Type', _aa_er_Internal_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 49))])
    
    #-----< id-aa-er-internal >-----#
    id_aa_er_internal = OID(name='id-aa-er-internal', mode=MODE_VALUE)
    id_aa_er_internal._val = (1, 2, 840, 113549, 1, 9, 16, 2, 49)
    
    #-----< aa-er-External >-----#
    aa_er_External = CLASS(name='aa-er-External', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_er_External_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ERS', 'EvidenceRecord')))
    aa_er_External._val = dict([('Type', _aa_er_External_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 50))])
    
    #-----< id-aa-er-external >-----#
    id_aa_er_external = OID(name='id-aa-er-external', mode=MODE_VALUE)
    id_aa_er_external._val = (1, 2, 840, 113549, 1, 9, 16, 2, 50)
    
    #-----< ltans >-----#
    ltans = OID(name='ltans', mode=MODE_VALUE)
    ltans._val = (1, 3, 6, 1, 5, 5, 11)
    
    #-----< EvidenceRecord >-----#
    EvidenceRecord = SEQ(name='EvidenceRecord', mode=MODE_TYPE)
    _EvidenceRecord_version = INT(name='version', mode=MODE_TYPE)
    _EvidenceRecord_version._cont = ASN1Dict([('v1', 1)])
    _EvidenceRecord_digestAlgorithms = SEQ_OF(name='digestAlgorithms', mode=MODE_TYPE)
    __EvidenceRecord_digestAlgorithms__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    ___EvidenceRecord_digestAlgorithms__item__algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM'), ['id']))
    ____EvidenceRecord_digestAlgorithms__item__algorithm_tab = CLASS(name='_tab_DIGEST-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    ____EvidenceRecord_digestAlgorithms__item__algorithm_tab._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    ___EvidenceRecord_digestAlgorithms__item__algorithm._const_tab = ____EvidenceRecord_digestAlgorithms__item__algorithm_tab
    ___EvidenceRecord_digestAlgorithms__item__algorithm._const_tab_at = None
    ___EvidenceRecord_digestAlgorithms__item__algorithm._const_tab_id = 'id'
    ___EvidenceRecord_digestAlgorithms__item__parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM'), ['Params']), opt=True)
    ____EvidenceRecord_digestAlgorithms__item__parameters_tab = CLASS(name='_tab_DIGEST-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    ____EvidenceRecord_digestAlgorithms__item__parameters_tab._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    ___EvidenceRecord_digestAlgorithms__item__parameters._const_tab = ____EvidenceRecord_digestAlgorithms__item__parameters_tab
    ___EvidenceRecord_digestAlgorithms__item__parameters._const_tab_at = ('..', 'algorithm')
    ___EvidenceRecord_digestAlgorithms__item__parameters._const_tab_id = 'Params'
    __EvidenceRecord_digestAlgorithms__item_._cont = ASN1Dict([
        ('algorithm', ___EvidenceRecord_digestAlgorithms__item__algorithm),
        ('parameters', ___EvidenceRecord_digestAlgorithms__item__parameters),
        ])
    __EvidenceRecord_digestAlgorithms__item_._ext = None
    _EvidenceRecord_digestAlgorithms._cont = __EvidenceRecord_digestAlgorithms__item_
    _EvidenceRecord_cryptoInfos = SEQ_OF(name='cryptoInfos', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ERS', 'CryptoInfos')), opt=True)
    _EvidenceRecord_encryptionInfo = SEQ(name='encryptionInfo', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ERS', 'EncryptionInfo')), opt=True)
    _EvidenceRecord_archiveTimeStampSequence = SEQ_OF(name='archiveTimeStampSequence', mode=MODE_TYPE, typeref=ASN1RefType(('ERS', 'ArchiveTimeStampSequence')))
    EvidenceRecord._cont = ASN1Dict([
        ('version', _EvidenceRecord_version),
        ('digestAlgorithms', _EvidenceRecord_digestAlgorithms),
        ('cryptoInfos', _EvidenceRecord_cryptoInfos),
        ('encryptionInfo', _EvidenceRecord_encryptionInfo),
        ('archiveTimeStampSequence', _EvidenceRecord_archiveTimeStampSequence),
        ])
    EvidenceRecord._ext = None
    
    #-----< CryptoInfos >-----#
    CryptoInfos = SEQ_OF(name='CryptoInfos', mode=MODE_TYPE)
    _CryptoInfos__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'AttributeSet')))
    __CryptoInfos__item__type = OID(name='type', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['id']))
    ___CryptoInfos__item__type_tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    ___CryptoInfos__item__type_tab._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    __CryptoInfos__item__type._const_tab = ___CryptoInfos__item__type_tab
    __CryptoInfos__item__type._const_tab_at = None
    __CryptoInfos__item__type._const_tab_id = 'id'
    __CryptoInfos__item__values = SET_OF(name='values', mode=MODE_TYPE)
    ___CryptoInfos__item__values__item_ = OPEN(name='_item_', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['Type']))
    ____CryptoInfos__item__values__item__tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    ____CryptoInfos__item__values__item__tab._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    ___CryptoInfos__item__values__item_._const_tab = ____CryptoInfos__item__values__item__tab
    ___CryptoInfos__item__values__item_._const_tab_at = ('..', '..', 'type')
    ___CryptoInfos__item__values__item_._const_tab_id = 'Type'
    __CryptoInfos__item__values._cont = ___CryptoInfos__item__values__item_
    __CryptoInfos__item__values._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    _CryptoInfos__item_._cont = ASN1Dict([
        ('type', __CryptoInfos__item__type),
        ('values', __CryptoInfos__item__values),
        ])
    _CryptoInfos__item_._ext = None
    CryptoInfos._cont = _CryptoInfos__item_
    CryptoInfos._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    
    #-----< ArchiveTimeStampSequence >-----#
    ArchiveTimeStampSequence = SEQ_OF(name='ArchiveTimeStampSequence', mode=MODE_TYPE)
    _ArchiveTimeStampSequence__item_ = SEQ_OF(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ERS', 'ArchiveTimeStampChain')))
    ArchiveTimeStampSequence._cont = _ArchiveTimeStampSequence__item_
    
    #-----< ArchiveTimeStampChain >-----#
    ArchiveTimeStampChain = SEQ_OF(name='ArchiveTimeStampChain', mode=MODE_TYPE)
    _ArchiveTimeStampChain__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ERS', 'ArchiveTimeStamp')))
    ArchiveTimeStampChain._cont = _ArchiveTimeStampChain__item_
    
    #-----< ArchiveTimeStamp >-----#
    ArchiveTimeStamp = SEQ(name='ArchiveTimeStamp', mode=MODE_TYPE)
    _ArchiveTimeStamp_digestAlgorithm = SEQ(name='digestAlgorithm', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')), opt=True)
    __ArchiveTimeStamp_digestAlgorithm_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM'), ['id']))
    ___ArchiveTimeStamp_digestAlgorithm_algorithm_tab = CLASS(name='_tab_DIGEST-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    ___ArchiveTimeStamp_digestAlgorithm_algorithm_tab._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    __ArchiveTimeStamp_digestAlgorithm_algorithm._const_tab = ___ArchiveTimeStamp_digestAlgorithm_algorithm_tab
    __ArchiveTimeStamp_digestAlgorithm_algorithm._const_tab_at = None
    __ArchiveTimeStamp_digestAlgorithm_algorithm._const_tab_id = 'id'
    __ArchiveTimeStamp_digestAlgorithm_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM'), ['Params']), opt=True)
    ___ArchiveTimeStamp_digestAlgorithm_parameters_tab = CLASS(name='_tab_DIGEST-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    ___ArchiveTimeStamp_digestAlgorithm_parameters_tab._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    __ArchiveTimeStamp_digestAlgorithm_parameters._const_tab = ___ArchiveTimeStamp_digestAlgorithm_parameters_tab
    __ArchiveTimeStamp_digestAlgorithm_parameters._const_tab_at = ('..', 'algorithm')
    __ArchiveTimeStamp_digestAlgorithm_parameters._const_tab_id = 'Params'
    _ArchiveTimeStamp_digestAlgorithm._cont = ASN1Dict([
        ('algorithm', __ArchiveTimeStamp_digestAlgorithm_algorithm),
        ('parameters', __ArchiveTimeStamp_digestAlgorithm_parameters),
        ])
    _ArchiveTimeStamp_digestAlgorithm._ext = None
    _ArchiveTimeStamp_attributes = SET_OF(name='attributes', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ERS', 'Attributes')), opt=True)
    _ArchiveTimeStamp_reducedHashtree = SEQ_OF(name='reducedHashtree', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ArchiveTimeStamp_reducedHashtree__item_ = SEQ_OF(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ERS', 'PartialHashtree')))
    _ArchiveTimeStamp_reducedHashtree._cont = __ArchiveTimeStamp_reducedHashtree__item_
    _ArchiveTimeStamp_timeStamp = SEQ(name='timeStamp', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'ContentInfo')))
    ArchiveTimeStamp._cont = ASN1Dict([
        ('digestAlgorithm', _ArchiveTimeStamp_digestAlgorithm),
        ('attributes', _ArchiveTimeStamp_attributes),
        ('reducedHashtree', _ArchiveTimeStamp_reducedHashtree),
        ('timeStamp', _ArchiveTimeStamp_timeStamp),
        ])
    ArchiveTimeStamp._ext = None
    
    #-----< PartialHashtree >-----#
    PartialHashtree = SEQ_OF(name='PartialHashtree', mode=MODE_TYPE)
    _PartialHashtree__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    PartialHashtree._cont = _PartialHashtree__item_
    
    #-----< Attributes >-----#
    Attributes = SET_OF(name='Attributes', mode=MODE_TYPE)
    _Attributes__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'AttributeSet')))
    __Attributes__item__type = OID(name='type', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['id']))
    ___Attributes__item__type_tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    ___Attributes__item__type_tab._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    __Attributes__item__type._const_tab = ___Attributes__item__type_tab
    __Attributes__item__type._const_tab_at = None
    __Attributes__item__type._const_tab_id = 'id'
    __Attributes__item__values = SET_OF(name='values', mode=MODE_TYPE)
    ___Attributes__item__values__item_ = OPEN(name='_item_', mode=MODE_TYPE, typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'ATTRIBUTE'), ['Type']))
    ____Attributes__item__values__item__tab = CLASS(name='_tab_ATTRIBUTE', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    ____Attributes__item__values__item__tab._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    ___Attributes__item__values__item_._const_tab = ____Attributes__item__values__item__tab
    ___Attributes__item__values__item_._const_tab_at = ('..', '..', 'type')
    ___Attributes__item__values__item_._const_tab_id = 'Type'
    __Attributes__item__values._cont = ___Attributes__item__values__item_
    __Attributes__item__values._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    _Attributes__item_._cont = ASN1Dict([
        ('type', __Attributes__item__type),
        ('values', __Attributes__item__values),
        ])
    _Attributes__item_._ext = None
    Attributes._cont = _Attributes__item_
    Attributes._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    
    #-----< EncryptionInfo >-----#
    EncryptionInfo = SEQ(name='EncryptionInfo', mode=MODE_TYPE)
    _EncryptionInfo_encryptionInfoType = OID(name='encryptionInfoType', mode=MODE_TYPE, typeref=ASN1RefClassField(('ERS', 'ENCINFO-TYPE'), ['id']))
    __EncryptionInfo_encryptionInfoType_tab = CLASS(name='_tab_ENCINFO-TYPE', mode=MODE_SET, typeref=ASN1RefType(('ERS', 'ENCINFO-TYPE')))
    __EncryptionInfo_encryptionInfoType_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    _EncryptionInfo_encryptionInfoType._const_tab = __EncryptionInfo_encryptionInfoType_tab
    _EncryptionInfo_encryptionInfoType._const_tab_at = None
    _EncryptionInfo_encryptionInfoType._const_tab_id = 'id'
    _EncryptionInfo_encryptionInfoValue = OPEN(name='encryptionInfoValue', mode=MODE_TYPE, typeref=ASN1RefClassField(('ERS', 'ENCINFO-TYPE'), ['Type']))
    __EncryptionInfo_encryptionInfoValue_tab = CLASS(name='_tab_ENCINFO-TYPE', mode=MODE_SET, typeref=ASN1RefType(('ERS', 'ENCINFO-TYPE')))
    __EncryptionInfo_encryptionInfoValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    _EncryptionInfo_encryptionInfoValue._const_tab = __EncryptionInfo_encryptionInfoValue_tab
    _EncryptionInfo_encryptionInfoValue._const_tab_at = ('..', 'encryptionInfoType')
    _EncryptionInfo_encryptionInfoValue._const_tab_id = 'Type'
    EncryptionInfo._cont = ASN1Dict([
        ('encryptionInfoType', _EncryptionInfo_encryptionInfoType),
        ('encryptionInfoValue', _EncryptionInfo_encryptionInfoValue),
        ])
    EncryptionInfo._ext = None
    
    #-----< ENCINFO-TYPE >-----#
    ENCINFO_TYPE = CLASS(name='ENCINFO-TYPE', mode=MODE_TYPE, typeref=ASN1RefType(('_IMPL_', 'TYPE-IDENTIFIER'), []))
    
    #-----< SupportedEncryptionAlgorithms >-----#
    SupportedEncryptionAlgorithms = CLASS(name='SupportedEncryptionAlgorithms', mode=MODE_SET, typeref=ASN1RefType(('ERS', 'ENCINFO-TYPE')))
    SupportedEncryptionAlgorithms._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    _all_ = [
        aa_er_Internal,
        _aa_er_Internal_val_Type,
        id_aa_er_internal,
        aa_er_External,
        _aa_er_External_val_Type,
        id_aa_er_external,
        ltans,
        _EvidenceRecord_version,
        ____EvidenceRecord_digestAlgorithms__item__algorithm_tab,
        ___EvidenceRecord_digestAlgorithms__item__algorithm,
        ____EvidenceRecord_digestAlgorithms__item__parameters_tab,
        ___EvidenceRecord_digestAlgorithms__item__parameters,
        __EvidenceRecord_digestAlgorithms__item_,
        _EvidenceRecord_digestAlgorithms,
        _EvidenceRecord_cryptoInfos,
        _EvidenceRecord_encryptionInfo,
        _EvidenceRecord_archiveTimeStampSequence,
        EvidenceRecord,
        ___CryptoInfos__item__type_tab,
        __CryptoInfos__item__type,
        ____CryptoInfos__item__values__item__tab,
        ___CryptoInfos__item__values__item_,
        __CryptoInfos__item__values,
        _CryptoInfos__item_,
        CryptoInfos,
        _ArchiveTimeStampSequence__item_,
        ArchiveTimeStampSequence,
        _ArchiveTimeStampChain__item_,
        ArchiveTimeStampChain,
        ___ArchiveTimeStamp_digestAlgorithm_algorithm_tab,
        __ArchiveTimeStamp_digestAlgorithm_algorithm,
        ___ArchiveTimeStamp_digestAlgorithm_parameters_tab,
        __ArchiveTimeStamp_digestAlgorithm_parameters,
        _ArchiveTimeStamp_digestAlgorithm,
        _ArchiveTimeStamp_attributes,
        __ArchiveTimeStamp_reducedHashtree__item_,
        _ArchiveTimeStamp_reducedHashtree,
        _ArchiveTimeStamp_timeStamp,
        ArchiveTimeStamp,
        _PartialHashtree__item_,
        PartialHashtree,
        ___Attributes__item__type_tab,
        __Attributes__item__type,
        ____Attributes__item__values__item__tab,
        ___Attributes__item__values__item_,
        __Attributes__item__values,
        _Attributes__item_,
        Attributes,
        __EncryptionInfo_encryptionInfoType_tab,
        _EncryptionInfo_encryptionInfoType,
        __EncryptionInfo_encryptionInfoValue_tab,
        _EncryptionInfo_encryptionInfoValue,
        EncryptionInfo,
        ENCINFO_TYPE,
        SupportedEncryptionAlgorithms,
    ]

class ExtendedSecurityServices_2009:

    _name_  = 'ExtendedSecurityServices-2009'
    _oid_   = [1, 2, 840, 113549, 1, 9, 16, 0, 42]
    
    _obj_ = [
        'EssSignedAttributes',
        'EssContentTypes',
        'aa-receiptRequest',
        'ReceiptRequest',
        'ub-receiptsTo',
        'aa-contentIdentifier',
        'id-aa-receiptRequest',
        'ContentIdentifier',
        'id-aa-contentIdentifier',
        'ct-receipt',
        'id-ct-receipt',
        'ReceiptsFrom',
        'AllOrFirstTier',
        'Receipt',
        'ESSVersion',
        'aa-contentHint',
        'id-aa-contentHint',
        'ContentHints',
        'aa-msgSigDigest',
        'id-aa-msgSigDigest',
        'MsgSigDigest',
        'aa-contentReference',
        'id-aa-contentReference',
        'ContentReference',
        'aa-securityLabel',
        'id-aa-securityLabel',
        'ESSSecurityLabel',
        'SecurityPolicyIdentifier',
        'SecurityClassification',
        'ub-integer-options',
        'ESSPrivacyMark',
        'ub-privacy-mark-length',
        'SecurityCategories',
        'ub-security-categories',
        'SupportedSecurityCategories',
        'aa-equivalentLabels',
        'id-aa-equivalentLabels',
        'EquivalentLabels',
        'aa-mlExpandHistory',
        'id-aa-mlExpandHistory',
        'MLExpansionHistory',
        'ub-ml-expansion-history',
        'MLData',
        'EntityIdentifier',
        'MLReceiptPolicy',
        'aa-signingCertificate',
        'id-aa-signingCertificate',
        'SigningCertificate',
        'aa-signingCertificateV2',
        'id-aa-signingCertificateV2',
        'SigningCertificateV2',
        'HashAlgorithm',
        'ESSCertIDv2',
        'ESSCertID',
        'Hash',
        'IssuerSerial',
        ]
    _type_ = [
        'ReceiptRequest',
        'ContentIdentifier',
        'ReceiptsFrom',
        'AllOrFirstTier',
        'Receipt',
        'ESSVersion',
        'ContentHints',
        'MsgSigDigest',
        'ContentReference',
        'ESSSecurityLabel',
        'SecurityPolicyIdentifier',
        'SecurityClassification',
        'ESSPrivacyMark',
        'SecurityCategories',
        'EquivalentLabels',
        'MLExpansionHistory',
        'MLData',
        'EntityIdentifier',
        'MLReceiptPolicy',
        'SigningCertificate',
        'SigningCertificateV2',
        'HashAlgorithm',
        'ESSCertIDv2',
        'ESSCertID',
        'Hash',
        'IssuerSerial',
        ]
    _set_ = [
        'EssSignedAttributes',
        'EssContentTypes',
        'SupportedSecurityCategories',
        ]
    _val_ = [
        'aa-receiptRequest',
        'ub-receiptsTo',
        'aa-contentIdentifier',
        'id-aa-receiptRequest',
        'id-aa-contentIdentifier',
        'ct-receipt',
        'id-ct-receipt',
        'aa-contentHint',
        'id-aa-contentHint',
        'aa-msgSigDigest',
        'id-aa-msgSigDigest',
        'aa-contentReference',
        'id-aa-contentReference',
        'aa-securityLabel',
        'id-aa-securityLabel',
        'ub-integer-options',
        'ub-privacy-mark-length',
        'ub-security-categories',
        'aa-equivalentLabels',
        'id-aa-equivalentLabels',
        'aa-mlExpandHistory',
        'id-aa-mlExpandHistory',
        'ub-ml-expansion-history',
        'aa-signingCertificate',
        'id-aa-signingCertificate',
        'aa-signingCertificateV2',
        'id-aa-signingCertificateV2',
        ]
    _class_ = [
        'EssSignedAttributes',
        'EssContentTypes',
        'aa-receiptRequest',
        'aa-contentIdentifier',
        'ct-receipt',
        'aa-contentHint',
        'aa-msgSigDigest',
        'aa-contentReference',
        'aa-securityLabel',
        'SupportedSecurityCategories',
        'aa-equivalentLabels',
        'aa-mlExpandHistory',
        'aa-signingCertificate',
        'aa-signingCertificateV2',
        ]
    _param_ = [
        ]
    
    #-----< EssSignedAttributes >-----#
    EssSignedAttributes = CLASS(name='EssSignedAttributes', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _EssSignedAttributes_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'ReceiptRequest')))
    _EssSignedAttributes_val_Type_1 = OCT_STR(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'ContentIdentifier')))
    _EssSignedAttributes_val_Type_2 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'ContentHints')))
    _EssSignedAttributes_val_Type_3 = OCT_STR(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'MsgSigDigest')))
    _EssSignedAttributes_val_Type_4 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'ContentReference')))
    _EssSignedAttributes_val_Type_5 = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'ESSSecurityLabel')))
    _EssSignedAttributes_val_Type_6 = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'EquivalentLabels')))
    _EssSignedAttributes_val_Type_7 = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'MLExpansionHistory')))
    _EssSignedAttributes_val_Type_8 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'SigningCertificate')))
    _EssSignedAttributes_val_Type_9 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'SigningCertificateV2')))
    EssSignedAttributes._val = ASN1Set(rv=[dict([('Type', _EssSignedAttributes_val_Type_0), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 1))]), dict([('Type', _EssSignedAttributes_val_Type_1), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 7))]), dict([('Type', _EssSignedAttributes_val_Type_2), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 4))]), dict([('Type', _EssSignedAttributes_val_Type_3), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 5))]), dict([('Type', _EssSignedAttributes_val_Type_4), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 10))]), dict([('Type', _EssSignedAttributes_val_Type_5), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 2))]), dict([('Type', _EssSignedAttributes_val_Type_6), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 9))]), dict([('Type', _EssSignedAttributes_val_Type_7), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 3))]), dict([('Type', _EssSignedAttributes_val_Type_8), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 12))]), dict([('Type', _EssSignedAttributes_val_Type_9), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 47))])], rr=[], ev=[], er=[])
    
    #-----< EssContentTypes >-----#
    EssContentTypes = CLASS(name='EssContentTypes', mode=MODE_SET, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE')))
    _EssContentTypes_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'Receipt')))
    EssContentTypes._val = ASN1Set(rv=[dict([('Type', _EssContentTypes_val_Type_0), ('id', (1, 2, 840, 113549, 1, 9, 16, 1, 1))])], rr=[], ev=[], er=[])
    
    #-----< aa-receiptRequest >-----#
    aa_receiptRequest = CLASS(name='aa-receiptRequest', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_receiptRequest_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'ReceiptRequest')))
    aa_receiptRequest._val = dict([('Type', _aa_receiptRequest_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 1))])
    
    #-----< ReceiptRequest >-----#
    ReceiptRequest = SEQ(name='ReceiptRequest', mode=MODE_TYPE)
    _ReceiptRequest_signedContentIdentifier = OCT_STR(name='signedContentIdentifier', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'ContentIdentifier')))
    _ReceiptRequest_receiptsFrom = CHOICE(name='receiptsFrom', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'ReceiptsFrom')))
    _ReceiptRequest_receiptsTo = SEQ_OF(name='receiptsTo', mode=MODE_TYPE)
    __ReceiptRequest_receiptsTo__item_ = SEQ_OF(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    _ReceiptRequest_receiptsTo._cont = __ReceiptRequest_receiptsTo__item_
    _ReceiptRequest_receiptsTo._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    ReceiptRequest._cont = ASN1Dict([
        ('signedContentIdentifier', _ReceiptRequest_signedContentIdentifier),
        ('receiptsFrom', _ReceiptRequest_receiptsFrom),
        ('receiptsTo', _ReceiptRequest_receiptsTo),
        ])
    ReceiptRequest._ext = None
    
    #-----< ub-receiptsTo >-----#
    ub_receiptsTo = INT(name='ub-receiptsTo', mode=MODE_VALUE)
    ub_receiptsTo._val = 16
    
    #-----< aa-contentIdentifier >-----#
    aa_contentIdentifier = CLASS(name='aa-contentIdentifier', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_contentIdentifier_val_Type = OCT_STR(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'ContentIdentifier')))
    aa_contentIdentifier._val = dict([('Type', _aa_contentIdentifier_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 7))])
    
    #-----< id-aa-receiptRequest >-----#
    id_aa_receiptRequest = OID(name='id-aa-receiptRequest', mode=MODE_VALUE)
    id_aa_receiptRequest._val = (1, 2, 840, 113549, 1, 9, 16, 2, 1)
    
    #-----< ContentIdentifier >-----#
    ContentIdentifier = OCT_STR(name='ContentIdentifier', mode=MODE_TYPE)
    
    #-----< id-aa-contentIdentifier >-----#
    id_aa_contentIdentifier = OID(name='id-aa-contentIdentifier', mode=MODE_VALUE)
    id_aa_contentIdentifier._val = (1, 2, 840, 113549, 1, 9, 16, 2, 7)
    
    #-----< ct-receipt >-----#
    ct_receipt = CLASS(name='ct-receipt', mode=MODE_VALUE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CONTENT-TYPE')))
    _ct_receipt_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'Receipt')))
    ct_receipt._val = dict([('Type', _ct_receipt_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 1, 1))])
    
    #-----< id-ct-receipt >-----#
    id_ct_receipt = OID(name='id-ct-receipt', mode=MODE_VALUE)
    id_ct_receipt._val = (1, 2, 840, 113549, 1, 9, 16, 1, 1)
    
    #-----< ReceiptsFrom >-----#
    ReceiptsFrom = CHOICE(name='ReceiptsFrom', mode=MODE_TYPE)
    _ReceiptsFrom_allOrFirstTier = INT(name='allOrFirstTier', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'AllOrFirstTier')))
    _ReceiptsFrom_receiptList = SEQ_OF(name='receiptList', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __ReceiptsFrom_receiptList__item_ = SEQ_OF(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    _ReceiptsFrom_receiptList._cont = __ReceiptsFrom_receiptList__item_
    ReceiptsFrom._cont = ASN1Dict([
        ('allOrFirstTier', _ReceiptsFrom_allOrFirstTier),
        ('receiptList', _ReceiptsFrom_receiptList),
        ])
    ReceiptsFrom._ext = None
    
    #-----< AllOrFirstTier >-----#
    AllOrFirstTier = INT(name='AllOrFirstTier', mode=MODE_TYPE)
    AllOrFirstTier._cont = ASN1Dict([('allReceipts', 0), ('firstTierRecipients', 1)])
    
    #-----< Receipt >-----#
    Receipt = SEQ(name='Receipt', mode=MODE_TYPE)
    _Receipt_version = INT(name='version', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'ESSVersion')))
    _Receipt_contentType = OID(name='contentType', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'ContentType')))
    _Receipt_signedContentIdentifier = OCT_STR(name='signedContentIdentifier', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'ContentIdentifier')))
    _Receipt_originatorSignatureValue = OCT_STR(name='originatorSignatureValue', mode=MODE_TYPE)
    Receipt._cont = ASN1Dict([
        ('version', _Receipt_version),
        ('contentType', _Receipt_contentType),
        ('signedContentIdentifier', _Receipt_signedContentIdentifier),
        ('originatorSignatureValue', _Receipt_originatorSignatureValue),
        ])
    Receipt._ext = None
    
    #-----< ESSVersion >-----#
    ESSVersion = INT(name='ESSVersion', mode=MODE_TYPE)
    ESSVersion._cont = ASN1Dict([('v1', 1)])
    
    #-----< aa-contentHint >-----#
    aa_contentHint = CLASS(name='aa-contentHint', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_contentHint_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'ContentHints')))
    aa_contentHint._val = dict([('Type', _aa_contentHint_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 4))])
    
    #-----< id-aa-contentHint >-----#
    id_aa_contentHint = OID(name='id-aa-contentHint', mode=MODE_VALUE)
    id_aa_contentHint._val = (1, 2, 840, 113549, 1, 9, 16, 2, 4)
    
    #-----< ContentHints >-----#
    ContentHints = SEQ(name='ContentHints', mode=MODE_TYPE)
    _ContentHints_contentDescription = STR_UTF8(name='contentDescription', mode=MODE_TYPE, opt=True)
    _ContentHints_contentDescription._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    _ContentHints_contentType = OID(name='contentType', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'ContentType')))
    ContentHints._cont = ASN1Dict([
        ('contentDescription', _ContentHints_contentDescription),
        ('contentType', _ContentHints_contentType),
        ])
    ContentHints._ext = None
    
    #-----< aa-msgSigDigest >-----#
    aa_msgSigDigest = CLASS(name='aa-msgSigDigest', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_msgSigDigest_val_Type = OCT_STR(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'MsgSigDigest')))
    aa_msgSigDigest._val = dict([('Type', _aa_msgSigDigest_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 5))])
    
    #-----< id-aa-msgSigDigest >-----#
    id_aa_msgSigDigest = OID(name='id-aa-msgSigDigest', mode=MODE_VALUE)
    id_aa_msgSigDigest._val = (1, 2, 840, 113549, 1, 9, 16, 2, 5)
    
    #-----< MsgSigDigest >-----#
    MsgSigDigest = OCT_STR(name='MsgSigDigest', mode=MODE_TYPE)
    
    #-----< aa-contentReference >-----#
    aa_contentReference = CLASS(name='aa-contentReference', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_contentReference_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'ContentReference')))
    aa_contentReference._val = dict([('Type', _aa_contentReference_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 10))])
    
    #-----< id-aa-contentReference >-----#
    id_aa_contentReference = OID(name='id-aa-contentReference', mode=MODE_VALUE)
    id_aa_contentReference._val = (1, 2, 840, 113549, 1, 9, 16, 2, 10)
    
    #-----< ContentReference >-----#
    ContentReference = SEQ(name='ContentReference', mode=MODE_TYPE)
    _ContentReference_contentType = OID(name='contentType', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'ContentType')))
    _ContentReference_signedContentIdentifier = OCT_STR(name='signedContentIdentifier', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'ContentIdentifier')))
    _ContentReference_originatorSignatureValue = OCT_STR(name='originatorSignatureValue', mode=MODE_TYPE)
    ContentReference._cont = ASN1Dict([
        ('contentType', _ContentReference_contentType),
        ('signedContentIdentifier', _ContentReference_signedContentIdentifier),
        ('originatorSignatureValue', _ContentReference_originatorSignatureValue),
        ])
    ContentReference._ext = None
    
    #-----< aa-securityLabel >-----#
    aa_securityLabel = CLASS(name='aa-securityLabel', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_securityLabel_val_Type = SET(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'ESSSecurityLabel')))
    aa_securityLabel._val = dict([('Type', _aa_securityLabel_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 2))])
    
    #-----< id-aa-securityLabel >-----#
    id_aa_securityLabel = OID(name='id-aa-securityLabel', mode=MODE_VALUE)
    id_aa_securityLabel._val = (1, 2, 840, 113549, 1, 9, 16, 2, 2)
    
    #-----< ESSSecurityLabel >-----#
    ESSSecurityLabel = SET(name='ESSSecurityLabel', mode=MODE_TYPE)
    _ESSSecurityLabel_security_policy_identifier = OID(name='security-policy-identifier', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'SecurityPolicyIdentifier')))
    _ESSSecurityLabel_security_classification = INT(name='security-classification', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'SecurityClassification')), opt=True)
    _ESSSecurityLabel_privacy_mark = CHOICE(name='privacy-mark', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'ESSPrivacyMark')), opt=True)
    _ESSSecurityLabel_security_categories = SET_OF(name='security-categories', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'SecurityCategories')), opt=True)
    ESSSecurityLabel._cont = ASN1Dict([
        ('security-policy-identifier', _ESSSecurityLabel_security_policy_identifier),
        ('security-classification', _ESSSecurityLabel_security_classification),
        ('privacy-mark', _ESSSecurityLabel_privacy_mark),
        ('security-categories', _ESSSecurityLabel_security_categories),
        ])
    ESSSecurityLabel._ext = None
    
    #-----< SecurityPolicyIdentifier >-----#
    SecurityPolicyIdentifier = OID(name='SecurityPolicyIdentifier', mode=MODE_TYPE)
    
    #-----< SecurityClassification >-----#
    SecurityClassification = INT(name='SecurityClassification', mode=MODE_TYPE)
    SecurityClassification._cont = ASN1Dict([('unmarked', 0), ('unclassified', 1), ('restricted', 2), ('confidential', 3), ('secret', 4), ('top-secret', 5)])
    SecurityClassification._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=256)], ev=None, er=[])
    
    #-----< ub-integer-options >-----#
    ub_integer_options = INT(name='ub-integer-options', mode=MODE_VALUE)
    ub_integer_options._val = 256
    
    #-----< ESSPrivacyMark >-----#
    ESSPrivacyMark = CHOICE(name='ESSPrivacyMark', mode=MODE_TYPE)
    _ESSPrivacyMark_pString = STR_PRINT(name='pString', mode=MODE_TYPE)
    _ESSPrivacyMark_pString._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _ESSPrivacyMark_utf8String = STR_UTF8(name='utf8String', mode=MODE_TYPE)
    _ESSPrivacyMark_utf8String._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    ESSPrivacyMark._cont = ASN1Dict([
        ('pString', _ESSPrivacyMark_pString),
        ('utf8String', _ESSPrivacyMark_utf8String),
        ])
    ESSPrivacyMark._ext = None
    
    #-----< ub-privacy-mark-length >-----#
    ub_privacy_mark_length = INT(name='ub-privacy-mark-length', mode=MODE_VALUE)
    ub_privacy_mark_length._val = 128
    
    #-----< SecurityCategories >-----#
    SecurityCategories = SET_OF(name='SecurityCategories', mode=MODE_TYPE)
    _SecurityCategories__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'SecurityCategory')))
    __SecurityCategories__item__type = OID(name='type', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'SECURITY-CATEGORY'), ['id']))
    ___SecurityCategories__item__type_tab = CLASS(name='_tab_SECURITY-CATEGORY', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'SECURITY-CATEGORY')))
    ___SecurityCategories__item__type_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __SecurityCategories__item__type._const_tab = ___SecurityCategories__item__type_tab
    __SecurityCategories__item__type._const_tab_at = None
    __SecurityCategories__item__type._const_tab_id = 'id'
    __SecurityCategories__item__value = OPEN(name='value', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('PKIX-CommonTypes-2009', 'SECURITY-CATEGORY'), ['Type']))
    ___SecurityCategories__item__value_tab = CLASS(name='_tab_SECURITY-CATEGORY', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'SECURITY-CATEGORY')))
    ___SecurityCategories__item__value_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __SecurityCategories__item__value._const_tab = ___SecurityCategories__item__value_tab
    __SecurityCategories__item__value._const_tab_at = ('..', 'type')
    __SecurityCategories__item__value._const_tab_id = 'Type'
    _SecurityCategories__item_._cont = ASN1Dict([
        ('type', __SecurityCategories__item__type),
        ('value', __SecurityCategories__item__value),
        ])
    _SecurityCategories__item_._ext = None
    SecurityCategories._cont = _SecurityCategories__item_
    SecurityCategories._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    
    #-----< ub-security-categories >-----#
    ub_security_categories = INT(name='ub-security-categories', mode=MODE_VALUE)
    ub_security_categories._val = 64
    
    #-----< SupportedSecurityCategories >-----#
    SupportedSecurityCategories = CLASS(name='SupportedSecurityCategories', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'SECURITY-CATEGORY')))
    SupportedSecurityCategories._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< aa-equivalentLabels >-----#
    aa_equivalentLabels = CLASS(name='aa-equivalentLabels', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_equivalentLabels_val_Type = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'EquivalentLabels')))
    aa_equivalentLabels._val = dict([('Type', _aa_equivalentLabels_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 9))])
    
    #-----< id-aa-equivalentLabels >-----#
    id_aa_equivalentLabels = OID(name='id-aa-equivalentLabels', mode=MODE_VALUE)
    id_aa_equivalentLabels._val = (1, 2, 840, 113549, 1, 9, 16, 2, 9)
    
    #-----< EquivalentLabels >-----#
    EquivalentLabels = SEQ_OF(name='EquivalentLabels', mode=MODE_TYPE)
    _EquivalentLabels__item_ = SET(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'ESSSecurityLabel')))
    EquivalentLabels._cont = _EquivalentLabels__item_
    
    #-----< aa-mlExpandHistory >-----#
    aa_mlExpandHistory = CLASS(name='aa-mlExpandHistory', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_mlExpandHistory_val_Type = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'MLExpansionHistory')))
    aa_mlExpandHistory._val = dict([('Type', _aa_mlExpandHistory_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 3))])
    
    #-----< id-aa-mlExpandHistory >-----#
    id_aa_mlExpandHistory = OID(name='id-aa-mlExpandHistory', mode=MODE_VALUE)
    id_aa_mlExpandHistory._val = (1, 2, 840, 113549, 1, 9, 16, 2, 3)
    
    #-----< MLExpansionHistory >-----#
    MLExpansionHistory = SEQ_OF(name='MLExpansionHistory', mode=MODE_TYPE)
    _MLExpansionHistory__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'MLData')))
    MLExpansionHistory._cont = _MLExpansionHistory__item_
    MLExpansionHistory._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    
    #-----< ub-ml-expansion-history >-----#
    ub_ml_expansion_history = INT(name='ub-ml-expansion-history', mode=MODE_VALUE)
    ub_ml_expansion_history._val = 64
    
    #-----< MLData >-----#
    MLData = SEQ(name='MLData', mode=MODE_TYPE)
    _MLData_mailListIdentifier = CHOICE(name='mailListIdentifier', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'EntityIdentifier')))
    _MLData_expansionTime = TIME_GEN(name='expansionTime', mode=MODE_TYPE)
    _MLData_mlReceiptPolicy = CHOICE(name='mlReceiptPolicy', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'MLReceiptPolicy')), opt=True)
    MLData._cont = ASN1Dict([
        ('mailListIdentifier', _MLData_mailListIdentifier),
        ('expansionTime', _MLData_expansionTime),
        ('mlReceiptPolicy', _MLData_mlReceiptPolicy),
        ])
    MLData._ext = None
    
    #-----< EntityIdentifier >-----#
    EntityIdentifier = CHOICE(name='EntityIdentifier', mode=MODE_TYPE)
    _EntityIdentifier_issuerAndSerialNumber = SEQ(name='issuerAndSerialNumber', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'IssuerAndSerialNumber')))
    _EntityIdentifier_subjectKeyIdentifier = OCT_STR(name='subjectKeyIdentifier', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SubjectKeyIdentifier')))
    EntityIdentifier._cont = ASN1Dict([
        ('issuerAndSerialNumber', _EntityIdentifier_issuerAndSerialNumber),
        ('subjectKeyIdentifier', _EntityIdentifier_subjectKeyIdentifier),
        ])
    EntityIdentifier._ext = None
    
    #-----< MLReceiptPolicy >-----#
    MLReceiptPolicy = CHOICE(name='MLReceiptPolicy', mode=MODE_TYPE)
    _MLReceiptPolicy_none = NULL(name='none', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _MLReceiptPolicy_insteadOf = SEQ_OF(name='insteadOf', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __MLReceiptPolicy_insteadOf__item_ = SEQ_OF(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    _MLReceiptPolicy_insteadOf._cont = __MLReceiptPolicy_insteadOf__item_
    _MLReceiptPolicy_insteadOf._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    _MLReceiptPolicy_inAdditionTo = SEQ_OF(name='inAdditionTo', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __MLReceiptPolicy_inAdditionTo__item_ = SEQ_OF(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    _MLReceiptPolicy_inAdditionTo._cont = __MLReceiptPolicy_inAdditionTo__item_
    _MLReceiptPolicy_inAdditionTo._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    MLReceiptPolicy._cont = ASN1Dict([
        ('none', _MLReceiptPolicy_none),
        ('insteadOf', _MLReceiptPolicy_insteadOf),
        ('inAdditionTo', _MLReceiptPolicy_inAdditionTo),
        ])
    MLReceiptPolicy._ext = None
    
    #-----< aa-signingCertificate >-----#
    aa_signingCertificate = CLASS(name='aa-signingCertificate', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_signingCertificate_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'SigningCertificate')))
    aa_signingCertificate._val = dict([('Type', _aa_signingCertificate_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 12))])
    
    #-----< id-aa-signingCertificate >-----#
    id_aa_signingCertificate = OID(name='id-aa-signingCertificate', mode=MODE_VALUE)
    id_aa_signingCertificate._val = (1, 2, 840, 113549, 1, 9, 16, 2, 12)
    
    #-----< SigningCertificate >-----#
    SigningCertificate = SEQ(name='SigningCertificate', mode=MODE_TYPE)
    _SigningCertificate_certs = SEQ_OF(name='certs', mode=MODE_TYPE)
    __SigningCertificate_certs__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'ESSCertID')))
    _SigningCertificate_certs._cont = __SigningCertificate_certs__item_
    _SigningCertificate_policies = SEQ_OF(name='policies', mode=MODE_TYPE, opt=True)
    __SigningCertificate_policies__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'PolicyInformation')))
    _SigningCertificate_policies._cont = __SigningCertificate_policies__item_
    SigningCertificate._cont = ASN1Dict([
        ('certs', _SigningCertificate_certs),
        ('policies', _SigningCertificate_policies),
        ])
    SigningCertificate._ext = None
    
    #-----< aa-signingCertificateV2 >-----#
    aa_signingCertificateV2 = CLASS(name='aa-signingCertificateV2', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_signingCertificateV2_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'SigningCertificateV2')))
    aa_signingCertificateV2._val = dict([('Type', _aa_signingCertificateV2_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 47))])
    
    #-----< id-aa-signingCertificateV2 >-----#
    id_aa_signingCertificateV2 = OID(name='id-aa-signingCertificateV2', mode=MODE_VALUE)
    id_aa_signingCertificateV2._val = (1, 2, 840, 113549, 1, 9, 16, 2, 47)
    
    #-----< SigningCertificateV2 >-----#
    SigningCertificateV2 = SEQ(name='SigningCertificateV2', mode=MODE_TYPE)
    _SigningCertificateV2_certs = SEQ_OF(name='certs', mode=MODE_TYPE)
    __SigningCertificateV2_certs__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'ESSCertIDv2')))
    _SigningCertificateV2_certs._cont = __SigningCertificateV2_certs__item_
    _SigningCertificateV2_policies = SEQ_OF(name='policies', mode=MODE_TYPE, opt=True)
    __SigningCertificateV2_policies__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'PolicyInformation')))
    _SigningCertificateV2_policies._cont = __SigningCertificateV2_policies__item_
    SigningCertificateV2._cont = ASN1Dict([
        ('certs', _SigningCertificateV2_certs),
        ('policies', _SigningCertificateV2_policies),
        ])
    SigningCertificateV2._ext = None
    
    #-----< HashAlgorithm >-----#
    HashAlgorithm = SEQ(name='HashAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'AlgorithmIdentifier')))
    _HashAlgorithm_algorithm = OID(name='algorithm', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM'), ['id']))
    __HashAlgorithm_algorithm_tab = CLASS(name='_tab_DIGEST-ALGORITHM', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM')))
    ___HashAlgorithm_algorithm_tab_val_Params_0 = NULL(name='Params', mode=MODE_TYPE)
    __HashAlgorithm_algorithm_tab._val = ASN1Set(rv=[dict([('id', (2, 16, 840, 1, 101, 3, 4, 2, 1)), ('Params', ___HashAlgorithm_algorithm_tab_val_Params_0), ('paramPresence', 'preferredAbsent')])], rr=[], ev=None, er=[])
    _HashAlgorithm_algorithm._const_tab = __HashAlgorithm_algorithm_tab
    _HashAlgorithm_algorithm._const_tab_at = None
    _HashAlgorithm_algorithm._const_tab_id = 'id'
    _HashAlgorithm_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'DIGEST-ALGORITHM'), ['Params']), opt=True)
    _HashAlgorithm_parameters._const_tab = __HashAlgorithm_algorithm_tab
    _HashAlgorithm_parameters._const_tab_at = ('..', 'algorithm')
    _HashAlgorithm_parameters._const_tab_id = 'Params'
    HashAlgorithm._cont = ASN1Dict([
        ('algorithm', _HashAlgorithm_algorithm),
        ('parameters', _HashAlgorithm_parameters),
        ])
    HashAlgorithm._ext = None
    
    #-----< ESSCertIDv2 >-----#
    ESSCertIDv2 = SEQ(name='ESSCertIDv2', mode=MODE_TYPE)
    _ESSCertIDv2_hashAlgorithm = SEQ(name='hashAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'HashAlgorithm')), default=dict([('algorithm', (2, 16, 840, 1, 101, 3, 4, 2, 1))]))
    _ESSCertIDv2_certHash = OCT_STR(name='certHash', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'Hash')))
    _ESSCertIDv2_issuerSerial = SEQ(name='issuerSerial', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'IssuerSerial')), opt=True)
    ESSCertIDv2._cont = ASN1Dict([
        ('hashAlgorithm', _ESSCertIDv2_hashAlgorithm),
        ('certHash', _ESSCertIDv2_certHash),
        ('issuerSerial', _ESSCertIDv2_issuerSerial),
        ])
    ESSCertIDv2._ext = None
    
    #-----< ESSCertID >-----#
    ESSCertID = SEQ(name='ESSCertID', mode=MODE_TYPE)
    _ESSCertID_certHash = OCT_STR(name='certHash', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'Hash')))
    _ESSCertID_issuerSerial = SEQ(name='issuerSerial', mode=MODE_TYPE, typeref=ASN1RefType(('ExtendedSecurityServices-2009', 'IssuerSerial')), opt=True)
    ESSCertID._cont = ASN1Dict([
        ('certHash', _ESSCertID_certHash),
        ('issuerSerial', _ESSCertID_issuerSerial),
        ])
    ESSCertID._ext = None
    
    #-----< Hash >-----#
    Hash = OCT_STR(name='Hash', mode=MODE_TYPE)
    
    #-----< IssuerSerial >-----#
    IssuerSerial = SEQ(name='IssuerSerial', mode=MODE_TYPE)
    _IssuerSerial_issuer = SEQ_OF(name='issuer', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralNames')))
    _IssuerSerial_serialNumber = INT(name='serialNumber', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Explicit-2009', 'CertificateSerialNumber')))
    IssuerSerial._cont = ASN1Dict([
        ('issuer', _IssuerSerial_issuer),
        ('serialNumber', _IssuerSerial_serialNumber),
        ])
    IssuerSerial._ext = None
    
    _all_ = [
        EssSignedAttributes,
        _EssSignedAttributes_val_Type_0,
        _EssSignedAttributes_val_Type_1,
        _EssSignedAttributes_val_Type_2,
        _EssSignedAttributes_val_Type_3,
        _EssSignedAttributes_val_Type_4,
        _EssSignedAttributes_val_Type_5,
        _EssSignedAttributes_val_Type_6,
        _EssSignedAttributes_val_Type_7,
        _EssSignedAttributes_val_Type_8,
        _EssSignedAttributes_val_Type_9,
        EssContentTypes,
        _EssContentTypes_val_Type_0,
        aa_receiptRequest,
        _aa_receiptRequest_val_Type,
        _ReceiptRequest_signedContentIdentifier,
        _ReceiptRequest_receiptsFrom,
        __ReceiptRequest_receiptsTo__item_,
        _ReceiptRequest_receiptsTo,
        ReceiptRequest,
        ub_receiptsTo,
        aa_contentIdentifier,
        _aa_contentIdentifier_val_Type,
        id_aa_receiptRequest,
        ContentIdentifier,
        id_aa_contentIdentifier,
        ct_receipt,
        _ct_receipt_val_Type,
        id_ct_receipt,
        _ReceiptsFrom_allOrFirstTier,
        __ReceiptsFrom_receiptList__item_,
        _ReceiptsFrom_receiptList,
        ReceiptsFrom,
        AllOrFirstTier,
        _Receipt_version,
        _Receipt_contentType,
        _Receipt_signedContentIdentifier,
        _Receipt_originatorSignatureValue,
        Receipt,
        ESSVersion,
        aa_contentHint,
        _aa_contentHint_val_Type,
        id_aa_contentHint,
        _ContentHints_contentDescription,
        _ContentHints_contentType,
        ContentHints,
        aa_msgSigDigest,
        _aa_msgSigDigest_val_Type,
        id_aa_msgSigDigest,
        MsgSigDigest,
        aa_contentReference,
        _aa_contentReference_val_Type,
        id_aa_contentReference,
        _ContentReference_contentType,
        _ContentReference_signedContentIdentifier,
        _ContentReference_originatorSignatureValue,
        ContentReference,
        aa_securityLabel,
        _aa_securityLabel_val_Type,
        id_aa_securityLabel,
        _ESSSecurityLabel_security_policy_identifier,
        _ESSSecurityLabel_security_classification,
        _ESSSecurityLabel_privacy_mark,
        _ESSSecurityLabel_security_categories,
        ESSSecurityLabel,
        SecurityPolicyIdentifier,
        SecurityClassification,
        ub_integer_options,
        _ESSPrivacyMark_pString,
        _ESSPrivacyMark_utf8String,
        ESSPrivacyMark,
        ub_privacy_mark_length,
        ___SecurityCategories__item__type_tab,
        __SecurityCategories__item__type,
        ___SecurityCategories__item__value_tab,
        __SecurityCategories__item__value,
        _SecurityCategories__item_,
        SecurityCategories,
        ub_security_categories,
        SupportedSecurityCategories,
        aa_equivalentLabels,
        _aa_equivalentLabels_val_Type,
        id_aa_equivalentLabels,
        _EquivalentLabels__item_,
        EquivalentLabels,
        aa_mlExpandHistory,
        _aa_mlExpandHistory_val_Type,
        id_aa_mlExpandHistory,
        _MLExpansionHistory__item_,
        MLExpansionHistory,
        ub_ml_expansion_history,
        _MLData_mailListIdentifier,
        _MLData_expansionTime,
        _MLData_mlReceiptPolicy,
        MLData,
        _EntityIdentifier_issuerAndSerialNumber,
        _EntityIdentifier_subjectKeyIdentifier,
        EntityIdentifier,
        _MLReceiptPolicy_none,
        __MLReceiptPolicy_insteadOf__item_,
        _MLReceiptPolicy_insteadOf,
        __MLReceiptPolicy_inAdditionTo__item_,
        _MLReceiptPolicy_inAdditionTo,
        MLReceiptPolicy,
        aa_signingCertificate,
        _aa_signingCertificate_val_Type,
        id_aa_signingCertificate,
        __SigningCertificate_certs__item_,
        _SigningCertificate_certs,
        __SigningCertificate_policies__item_,
        _SigningCertificate_policies,
        SigningCertificate,
        aa_signingCertificateV2,
        _aa_signingCertificateV2_val_Type,
        id_aa_signingCertificateV2,
        __SigningCertificateV2_certs__item_,
        _SigningCertificateV2_certs,
        __SigningCertificateV2_policies__item_,
        _SigningCertificateV2_policies,
        SigningCertificateV2,
        __HashAlgorithm_algorithm_tab,
        ___HashAlgorithm_algorithm_tab_val_Params_0,
        _HashAlgorithm_algorithm,
        _HashAlgorithm_parameters,
        HashAlgorithm,
        _ESSCertIDv2_hashAlgorithm,
        _ESSCertIDv2_certHash,
        _ESSCertIDv2_issuerSerial,
        ESSCertIDv2,
        _ESSCertID_certHash,
        _ESSCertID_issuerSerial,
        ESSCertID,
        Hash,
        _IssuerSerial_issuer,
        _IssuerSerial_serialNumber,
        IssuerSerial,
    ]

class SecureMimeMessageV3dot1_2009:

    _name_  = 'SecureMimeMessageV3dot1-2009'
    _oid_   = [1, 2, 840, 113549, 1, 9, 16, 0, 39]
    
    _obj_ = [
        'SMimeAttributeSet',
        'id-aa',
        'aa-smimeCapabilities',
        'smimeCapabilities',
        'SMimeCapsSet',
        'aa-encrypKeyPref',
        'id-aa-encrypKeyPref',
        'SMIMEEncryptionKeyPreference',
        'id-smime',
        'id-cap',
        'cap-preferBinaryInside',
        'id-cap-preferBinaryInside',
        'cap-RC2CBC',
        'SMIMECapabilitiesParametersForRC2CBC',
        ]
    _type_ = [
        'SMIMEEncryptionKeyPreference',
        'SMIMECapabilitiesParametersForRC2CBC',
        ]
    _set_ = [
        'SMimeAttributeSet',
        'SMimeCapsSet',
        ]
    _val_ = [
        'id-aa',
        'aa-smimeCapabilities',
        'smimeCapabilities',
        'aa-encrypKeyPref',
        'id-aa-encrypKeyPref',
        'id-smime',
        'id-cap',
        'cap-preferBinaryInside',
        'id-cap-preferBinaryInside',
        'cap-RC2CBC',
        ]
    _class_ = [
        'SMimeAttributeSet',
        'aa-smimeCapabilities',
        'SMimeCapsSet',
        'aa-encrypKeyPref',
        'cap-preferBinaryInside',
        'cap-RC2CBC',
        ]
    _param_ = [
        ]
    
    #-----< SMimeAttributeSet >-----#
    SMimeAttributeSet = CLASS(name='SMimeAttributeSet', mode=MODE_SET, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _SMimeAttributeSet_val_Type_0 = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIMECapabilities')))
    __SMimeAttributeSet_val_Type_0__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIMECapability')))
    ___SMimeAttributeSet_val_Type_0__item__capabilityID = OID(name='capabilityID', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SMIME-CAPS'), ['id']))
    ____SMimeAttributeSet_val_Type_0__item__capabilityID_tab = CLASS(name='_tab_SMIME-CAPS', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')))
    _____SMimeAttributeSet_val_Type_0__item__capabilityID_tab_val_Type_1 = INT(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SecureMimeMessageV3dot1-2009', 'SMIMECapabilitiesParametersForRC2CBC')))
    _____SMimeAttributeSet_val_Type_0__item__capabilityID_tab_val_Type_13 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'KeyWrapAlgorithm')))
    _____SMimeAttributeSet_val_Type_0__item__capabilityID_tab_val_Type_14 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'KeyWrapAlgorithm')))
    _____SMimeAttributeSet_val_Type_0__item__capabilityID_tab_val_Type_21 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSAES-OAEP-params')))
    ____SMimeAttributeSet_val_Type_0__item__capabilityID_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 9, 16, 11, 1))]), dict([('Type', _____SMimeAttributeSet_val_Type_0__item__capabilityID_tab_val_Type_1), ('id', (1, 2, 840, 113549, 3, 2))]), dict([('id', (1, 2, 840, 113549, 1, 1, 2))]), dict([('id', (1, 2, 840, 113549, 1, 1, 4))]), dict([('id', (1, 2, 840, 113549, 1, 1, 5))]), dict([('id', (1, 2, 840, 10040, 4, 3))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2))]), dict([('id', (1, 2, 840, 10045, 4, 1))]), dict([('id', (1, 2, 840, 10045, 4, 3, 1))]), dict([('id', (1, 2, 840, 10045, 4, 3, 2))]), dict([('id', (1, 2, 840, 10045, 4, 3, 3))]), dict([('id', (1, 2, 840, 10045, 4, 3, 4))]), dict([('Type', _____SMimeAttributeSet_val_Type_0__item__capabilityID_tab_val_Type_13), ('id', (1, 2, 840, 113549, 1, 9, 16, 3, 5))]), dict([('Type', _____SMimeAttributeSet_val_Type_0__item__capabilityID_tab_val_Type_14), ('id', (1, 2, 840, 113549, 1, 9, 16, 3, 10))]), dict([('id', (1, 2, 840, 113549, 1, 1, 1))]), dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 6))]), dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 7))]), dict([('id', (1, 2, 840, 113549, 3, 7))]), dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10))]), dict([('Type', _____SMimeAttributeSet_val_Type_0__item__capabilityID_tab_val_Type_21), ('id', (1, 2, 840, 113549, 1, 1, 7))])], rr=[], ev=None, er=[])
    ___SMimeAttributeSet_val_Type_0__item__capabilityID._const_tab = ____SMimeAttributeSet_val_Type_0__item__capabilityID_tab
    ___SMimeAttributeSet_val_Type_0__item__capabilityID._const_tab_at = None
    ___SMimeAttributeSet_val_Type_0__item__capabilityID._const_tab_id = 'id'
    ___SMimeAttributeSet_val_Type_0__item__parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SMIME-CAPS'), ['Type']), opt=True)
    ___SMimeAttributeSet_val_Type_0__item__parameters._const_tab = ____SMimeAttributeSet_val_Type_0__item__capabilityID_tab
    ___SMimeAttributeSet_val_Type_0__item__parameters._const_tab_at = ('..', 'capabilityID')
    ___SMimeAttributeSet_val_Type_0__item__parameters._const_tab_id = 'Type'
    __SMimeAttributeSet_val_Type_0__item_._cont = ASN1Dict([
        ('capabilityID', ___SMimeAttributeSet_val_Type_0__item__capabilityID),
        ('parameters', ___SMimeAttributeSet_val_Type_0__item__parameters),
        ])
    __SMimeAttributeSet_val_Type_0__item_._ext = None
    _SMimeAttributeSet_val_Type_0._cont = __SMimeAttributeSet_val_Type_0__item_
    _SMimeAttributeSet_val_Type_0._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    _SMimeAttributeSet_val_Type_1 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SecureMimeMessageV3dot1-2009', 'SMIMEEncryptionKeyPreference')))
    SMimeAttributeSet._val = ASN1Set(rv=[dict([('Type', _SMimeAttributeSet_val_Type_0), ('id', (1, 2, 840, 113549, 1, 9, 15))]), dict([('Type', _SMimeAttributeSet_val_Type_1), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 11))])], rr=[], ev=[], er=[])
    
    #-----< id-aa >-----#
    id_aa = OID(name='id-aa', mode=MODE_VALUE)
    id_aa._val = (1, 2, 840, 113549, 1, 9, 16, 2)
    
    #-----< aa-smimeCapabilities >-----#
    aa_smimeCapabilities = CLASS(name='aa-smimeCapabilities', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_smimeCapabilities_val_Type = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIMECapabilities')))
    __aa_smimeCapabilities_val_Type__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIMECapability')))
    ___aa_smimeCapabilities_val_Type__item__capabilityID = OID(name='capabilityID', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SMIME-CAPS'), ['id']))
    ____aa_smimeCapabilities_val_Type__item__capabilityID_tab = CLASS(name='_tab_SMIME-CAPS', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')))
    _____aa_smimeCapabilities_val_Type__item__capabilityID_tab_val_Type_1 = INT(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SecureMimeMessageV3dot1-2009', 'SMIMECapabilitiesParametersForRC2CBC')))
    _____aa_smimeCapabilities_val_Type__item__capabilityID_tab_val_Type_13 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'KeyWrapAlgorithm')))
    _____aa_smimeCapabilities_val_Type__item__capabilityID_tab_val_Type_14 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'KeyWrapAlgorithm')))
    _____aa_smimeCapabilities_val_Type__item__capabilityID_tab_val_Type_21 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSAES-OAEP-params')))
    ____aa_smimeCapabilities_val_Type__item__capabilityID_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 9, 16, 11, 1))]), dict([('Type', _____aa_smimeCapabilities_val_Type__item__capabilityID_tab_val_Type_1), ('id', (1, 2, 840, 113549, 3, 2))]), dict([('id', (1, 2, 840, 113549, 1, 1, 2))]), dict([('id', (1, 2, 840, 113549, 1, 1, 4))]), dict([('id', (1, 2, 840, 113549, 1, 1, 5))]), dict([('id', (1, 2, 840, 10040, 4, 3))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2))]), dict([('id', (1, 2, 840, 10045, 4, 1))]), dict([('id', (1, 2, 840, 10045, 4, 3, 1))]), dict([('id', (1, 2, 840, 10045, 4, 3, 2))]), dict([('id', (1, 2, 840, 10045, 4, 3, 3))]), dict([('id', (1, 2, 840, 10045, 4, 3, 4))]), dict([('Type', _____aa_smimeCapabilities_val_Type__item__capabilityID_tab_val_Type_13), ('id', (1, 2, 840, 113549, 1, 9, 16, 3, 5))]), dict([('Type', _____aa_smimeCapabilities_val_Type__item__capabilityID_tab_val_Type_14), ('id', (1, 2, 840, 113549, 1, 9, 16, 3, 10))]), dict([('id', (1, 2, 840, 113549, 1, 1, 1))]), dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 6))]), dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 7))]), dict([('id', (1, 2, 840, 113549, 3, 7))]), dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10))]), dict([('Type', _____aa_smimeCapabilities_val_Type__item__capabilityID_tab_val_Type_21), ('id', (1, 2, 840, 113549, 1, 1, 7))])], rr=[], ev=None, er=[])
    ___aa_smimeCapabilities_val_Type__item__capabilityID._const_tab = ____aa_smimeCapabilities_val_Type__item__capabilityID_tab
    ___aa_smimeCapabilities_val_Type__item__capabilityID._const_tab_at = None
    ___aa_smimeCapabilities_val_Type__item__capabilityID._const_tab_id = 'id'
    ___aa_smimeCapabilities_val_Type__item__parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SMIME-CAPS'), ['Type']), opt=True)
    ___aa_smimeCapabilities_val_Type__item__parameters._const_tab = ____aa_smimeCapabilities_val_Type__item__capabilityID_tab
    ___aa_smimeCapabilities_val_Type__item__parameters._const_tab_at = ('..', 'capabilityID')
    ___aa_smimeCapabilities_val_Type__item__parameters._const_tab_id = 'Type'
    __aa_smimeCapabilities_val_Type__item_._cont = ASN1Dict([
        ('capabilityID', ___aa_smimeCapabilities_val_Type__item__capabilityID),
        ('parameters', ___aa_smimeCapabilities_val_Type__item__parameters),
        ])
    __aa_smimeCapabilities_val_Type__item_._ext = None
    _aa_smimeCapabilities_val_Type._cont = __aa_smimeCapabilities_val_Type__item_
    _aa_smimeCapabilities_val_Type._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    aa_smimeCapabilities._val = dict([('Type', _aa_smimeCapabilities_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 15))])
    
    #-----< smimeCapabilities >-----#
    smimeCapabilities = OID(name='smimeCapabilities', mode=MODE_VALUE)
    smimeCapabilities._val = (1, 2, 840, 113549, 1, 9, 15)
    
    #-----< SMimeCapsSet >-----#
    SMimeCapsSet = CLASS(name='SMimeCapsSet', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')))
    _SMimeCapsSet_val_Type_1 = INT(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SecureMimeMessageV3dot1-2009', 'SMIMECapabilitiesParametersForRC2CBC')))
    _SMimeCapsSet_val_Type_13 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'KeyWrapAlgorithm')))
    _SMimeCapsSet_val_Type_14 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntaxAlgorithms-2009', 'KeyWrapAlgorithm')))
    _SMimeCapsSet_val_Type_21 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1-PSS-OAEP-Algorithms-2009', 'RSAES-OAEP-params')))
    SMimeCapsSet._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 9, 16, 11, 1))]), dict([('Type', _SMimeCapsSet_val_Type_1), ('id', (1, 2, 840, 113549, 3, 2))]), dict([('id', (1, 2, 840, 113549, 1, 1, 2))]), dict([('id', (1, 2, 840, 113549, 1, 1, 4))]), dict([('id', (1, 2, 840, 113549, 1, 1, 5))]), dict([('id', (1, 2, 840, 10040, 4, 3))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 1))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 3, 2))]), dict([('id', (1, 2, 840, 10045, 4, 1))]), dict([('id', (1, 2, 840, 10045, 4, 3, 1))]), dict([('id', (1, 2, 840, 10045, 4, 3, 2))]), dict([('id', (1, 2, 840, 10045, 4, 3, 3))]), dict([('id', (1, 2, 840, 10045, 4, 3, 4))]), dict([('Type', _SMimeCapsSet_val_Type_13), ('id', (1, 2, 840, 113549, 1, 9, 16, 3, 5))]), dict([('Type', _SMimeCapsSet_val_Type_14), ('id', (1, 2, 840, 113549, 1, 9, 16, 3, 10))]), dict([('id', (1, 2, 840, 113549, 1, 1, 1))]), dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 6))]), dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 7))]), dict([('id', (1, 2, 840, 113549, 3, 7))]), dict([('id', (1, 3, 6, 1, 5, 5, 8, 1, 2))]), dict([('id', (1, 2, 840, 113549, 1, 1, 10))]), dict([('Type', _SMimeCapsSet_val_Type_21), ('id', (1, 2, 840, 113549, 1, 1, 7))])], rr=[], ev=[], er=[])
    
    #-----< aa-encrypKeyPref >-----#
    aa_encrypKeyPref = CLASS(name='aa-encrypKeyPref', mode=MODE_VALUE, typeref=ASN1RefType(('PKIX-CommonTypes-2009', 'ATTRIBUTE')))
    _aa_encrypKeyPref_val_Type = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SecureMimeMessageV3dot1-2009', 'SMIMEEncryptionKeyPreference')))
    aa_encrypKeyPref._val = dict([('Type', _aa_encrypKeyPref_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 2, 11))])
    
    #-----< id-aa-encrypKeyPref >-----#
    id_aa_encrypKeyPref = OID(name='id-aa-encrypKeyPref', mode=MODE_VALUE)
    id_aa_encrypKeyPref._val = (1, 2, 840, 113549, 1, 9, 16, 2, 11)
    
    #-----< SMIMEEncryptionKeyPreference >-----#
    SMIMEEncryptionKeyPreference = CHOICE(name='SMIMEEncryptionKeyPreference', mode=MODE_TYPE)
    _SMIMEEncryptionKeyPreference_issuerAndSerialNumber = SEQ(name='issuerAndSerialNumber', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'IssuerAndSerialNumber')))
    _SMIMEEncryptionKeyPreference_receipentKeyId = SEQ(name='receipentKeyId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'RecipientKeyIdentifier')))
    _SMIMEEncryptionKeyPreference_subjectAltKeyIdentifier = OCT_STR(name='subjectAltKeyIdentifier', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'SubjectKeyIdentifier')))
    SMIMEEncryptionKeyPreference._cont = ASN1Dict([
        ('issuerAndSerialNumber', _SMIMEEncryptionKeyPreference_issuerAndSerialNumber),
        ('receipentKeyId', _SMIMEEncryptionKeyPreference_receipentKeyId),
        ('subjectAltKeyIdentifier', _SMIMEEncryptionKeyPreference_subjectAltKeyIdentifier),
        ])
    SMIMEEncryptionKeyPreference._ext = None
    
    #-----< id-smime >-----#
    id_smime = OID(name='id-smime', mode=MODE_VALUE)
    id_smime._val = (1, 2, 840, 113549, 1, 9, 16)
    
    #-----< id-cap >-----#
    id_cap = OID(name='id-cap', mode=MODE_VALUE)
    id_cap._val = (1, 2, 840, 113549, 1, 9, 16, 11)
    
    #-----< cap-preferBinaryInside >-----#
    cap_preferBinaryInside = CLASS(name='cap-preferBinaryInside', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')))
    cap_preferBinaryInside._val = dict([('id', (1, 2, 840, 113549, 1, 9, 16, 11, 1))])
    
    #-----< id-cap-preferBinaryInside >-----#
    id_cap_preferBinaryInside = OID(name='id-cap-preferBinaryInside', mode=MODE_VALUE)
    id_cap_preferBinaryInside._val = (1, 2, 840, 113549, 1, 9, 16, 11, 1)
    
    #-----< cap-RC2CBC >-----#
    cap_RC2CBC = CLASS(name='cap-RC2CBC', mode=MODE_VALUE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')))
    _cap_RC2CBC_val_Type = INT(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SecureMimeMessageV3dot1-2009', 'SMIMECapabilitiesParametersForRC2CBC')))
    cap_RC2CBC._val = dict([('Type', _cap_RC2CBC_val_Type), ('id', (1, 2, 840, 113549, 3, 2))])
    
    #-----< SMIMECapabilitiesParametersForRC2CBC >-----#
    SMIMECapabilitiesParametersForRC2CBC = INT(name='SMIMECapabilitiesParametersForRC2CBC', mode=MODE_TYPE)
    SMIMECapabilitiesParametersForRC2CBC._const_val = ASN1Set(rv=[40, 128], rr=[], ev=[], er=[])
    
    _all_ = [
        SMimeAttributeSet,
        ____SMimeAttributeSet_val_Type_0__item__capabilityID_tab,
        _____SMimeAttributeSet_val_Type_0__item__capabilityID_tab_val_Type_1,
        _____SMimeAttributeSet_val_Type_0__item__capabilityID_tab_val_Type_13,
        _____SMimeAttributeSet_val_Type_0__item__capabilityID_tab_val_Type_14,
        _____SMimeAttributeSet_val_Type_0__item__capabilityID_tab_val_Type_21,
        ___SMimeAttributeSet_val_Type_0__item__capabilityID,
        ___SMimeAttributeSet_val_Type_0__item__parameters,
        __SMimeAttributeSet_val_Type_0__item_,
        _SMimeAttributeSet_val_Type_0,
        _SMimeAttributeSet_val_Type_1,
        id_aa,
        aa_smimeCapabilities,
        ____aa_smimeCapabilities_val_Type__item__capabilityID_tab,
        _____aa_smimeCapabilities_val_Type__item__capabilityID_tab_val_Type_1,
        _____aa_smimeCapabilities_val_Type__item__capabilityID_tab_val_Type_13,
        _____aa_smimeCapabilities_val_Type__item__capabilityID_tab_val_Type_14,
        _____aa_smimeCapabilities_val_Type__item__capabilityID_tab_val_Type_21,
        ___aa_smimeCapabilities_val_Type__item__capabilityID,
        ___aa_smimeCapabilities_val_Type__item__parameters,
        __aa_smimeCapabilities_val_Type__item_,
        _aa_smimeCapabilities_val_Type,
        smimeCapabilities,
        SMimeCapsSet,
        _SMimeCapsSet_val_Type_1,
        _SMimeCapsSet_val_Type_13,
        _SMimeCapsSet_val_Type_14,
        _SMimeCapsSet_val_Type_21,
        aa_encrypKeyPref,
        _aa_encrypKeyPref_val_Type,
        id_aa_encrypKeyPref,
        _SMIMEEncryptionKeyPreference_issuerAndSerialNumber,
        _SMIMEEncryptionKeyPreference_receipentKeyId,
        _SMIMEEncryptionKeyPreference_subjectAltKeyIdentifier,
        SMIMEEncryptionKeyPreference,
        id_smime,
        id_cap,
        cap_preferBinaryInside,
        id_cap_preferBinaryInside,
        cap_RC2CBC,
        _cap_RC2CBC_val_Type,
        SMIMECapabilitiesParametersForRC2CBC,
    ]

class SMIMESymmetricKeyDistribution_2009:

    _name_  = 'SMIMESymmetricKeyDistribution-2009'
    _oid_   = [1, 2, 840, 113549, 1, 9, 16, 0, 36]
    
    _obj_ = [
        'id-skd',
        'SKD-ControlSet',
        'skd-glUseKEK',
        'id-skd-glUseKEK',
        'GLUseKEK',
        'GLInfo',
        'GLOwnerInfo',
        'GLAdministration',
        'SKD-Caps',
        'cap-aes128-cbc',
        'KeyWrapAlgorithm',
        'GLKeyAttributes',
        'skd-glDelete',
        'id-skd-glDelete',
        'DeleteGL',
        'skd-glAddMember',
        'id-skd-glAddMember',
        'GLAddMember',
        'GLMember',
        'Certificates',
        'skd-glDeleteMember',
        'id-skd-glDeleteMember',
        'GLDeleteMember',
        'skd-glRekey',
        'id-skd-glRekey',
        'GLRekey',
        'GLNewKeyAttributes',
        'skd-glAddOwner',
        'id-skd-glAddOwner',
        'skd-glRemoveOwner',
        'id-skd-glRemoveOwner',
        'GLOwnerAdministration',
        'skd-glKeyCompromise',
        'id-skd-glKeyCompromise',
        'GLKCompromise',
        'skd-glkRefresh',
        'id-skd-glkRefresh',
        'GLKRefresh',
        'Date',
        'skd-glaQueryRequest',
        'id-skd-glaQueryRequest',
        'SKD-QUERY',
        'SkdQuerySet',
        'GLAQueryRequest',
        'skd-glaQueryResponse',
        'id-skd-glaQueryResponse',
        'SKD-RESPONSE',
        'SkdResponseSet',
        'GLAQueryResponse',
        'id-cmc-glaRR',
        'skd-AlgRequest',
        'id-cmc-gla-skdAlgRequest',
        'SKDAlgRequest',
        'skd-AlgResponse',
        'id-cmc-gla-skdAlgResponse',
        'skd-glProvideCert',
        'id-skd-glProvideCert',
        'GLManageCert',
        'skd-glManageCert',
        'id-skd-glManageCert',
        'skd-glKey',
        'id-skd-glKey',
        'GLKey',
        'skd-ExtendedFailures',
        'id-cet-skdFailInfo',
        'SKDFailInfo',
        ]
    _type_ = [
        'GLUseKEK',
        'GLInfo',
        'GLOwnerInfo',
        'GLAdministration',
        'KeyWrapAlgorithm',
        'GLKeyAttributes',
        'DeleteGL',
        'GLAddMember',
        'GLMember',
        'Certificates',
        'GLDeleteMember',
        'GLRekey',
        'GLNewKeyAttributes',
        'GLOwnerAdministration',
        'GLKCompromise',
        'GLKRefresh',
        'Date',
        'SKD-QUERY',
        'GLAQueryRequest',
        'SKD-RESPONSE',
        'GLAQueryResponse',
        'SKDAlgRequest',
        'GLManageCert',
        'GLKey',
        'SKDFailInfo',
        ]
    _set_ = [
        'SKD-ControlSet',
        'SKD-Caps',
        'SkdQuerySet',
        'SkdResponseSet',
        ]
    _val_ = [
        'id-skd',
        'skd-glUseKEK',
        'id-skd-glUseKEK',
        'cap-aes128-cbc',
        'skd-glDelete',
        'id-skd-glDelete',
        'skd-glAddMember',
        'id-skd-glAddMember',
        'skd-glDeleteMember',
        'id-skd-glDeleteMember',
        'skd-glRekey',
        'id-skd-glRekey',
        'skd-glAddOwner',
        'id-skd-glAddOwner',
        'skd-glRemoveOwner',
        'id-skd-glRemoveOwner',
        'skd-glKeyCompromise',
        'id-skd-glKeyCompromise',
        'skd-glkRefresh',
        'id-skd-glkRefresh',
        'skd-glaQueryRequest',
        'id-skd-glaQueryRequest',
        'skd-glaQueryResponse',
        'id-skd-glaQueryResponse',
        'id-cmc-glaRR',
        'skd-AlgRequest',
        'id-cmc-gla-skdAlgRequest',
        'skd-AlgResponse',
        'id-cmc-gla-skdAlgResponse',
        'skd-glProvideCert',
        'id-skd-glProvideCert',
        'skd-glManageCert',
        'id-skd-glManageCert',
        'skd-glKey',
        'id-skd-glKey',
        'skd-ExtendedFailures',
        'id-cet-skdFailInfo',
        ]
    _class_ = [
        'SKD-ControlSet',
        'skd-glUseKEK',
        'SKD-Caps',
        'skd-glDelete',
        'skd-glAddMember',
        'skd-glDeleteMember',
        'skd-glRekey',
        'skd-glAddOwner',
        'skd-glRemoveOwner',
        'skd-glKeyCompromise',
        'skd-glkRefresh',
        'skd-glaQueryRequest',
        'SKD-QUERY',
        'SkdQuerySet',
        'skd-glaQueryResponse',
        'SKD-RESPONSE',
        'SkdResponseSet',
        'skd-AlgRequest',
        'skd-AlgResponse',
        'skd-glProvideCert',
        'skd-glManageCert',
        'skd-glKey',
        'skd-ExtendedFailures',
        ]
    _param_ = [
        ]
    
    #-----< id-skd >-----#
    id_skd = OID(name='id-skd', mode=MODE_VALUE)
    id_skd._val = (1, 2, 840, 113549, 1, 9, 16, 8)
    
    #-----< SKD-ControlSet >-----#
    SKD_ControlSet = CLASS(name='SKD-ControlSet', mode=MODE_SET, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _SKD_ControlSet_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLUseKEK')))
    _SKD_ControlSet_val_Type_1 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'DeleteGL')))
    _SKD_ControlSet_val_Type_2 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLAddMember')))
    _SKD_ControlSet_val_Type_3 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLDeleteMember')))
    _SKD_ControlSet_val_Type_4 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLRekey')))
    _SKD_ControlSet_val_Type_5 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLOwnerAdministration')))
    _SKD_ControlSet_val_Type_6 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLOwnerAdministration')))
    _SKD_ControlSet_val_Type_7 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLKCompromise')))
    _SKD_ControlSet_val_Type_8 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLKRefresh')))
    _SKD_ControlSet_val_Type_9 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLAQueryRequest')))
    _SKD_ControlSet_val_Type_10 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLManageCert')))
    _SKD_ControlSet_val_Type_11 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLManageCert')))
    _SKD_ControlSet_val_Type_12 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLKey')))
    SKD_ControlSet._val = ASN1Set(rv=[dict([('Type', _SKD_ControlSet_val_Type_0), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 1))]), dict([('Type', _SKD_ControlSet_val_Type_1), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 2))]), dict([('Type', _SKD_ControlSet_val_Type_2), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 3))]), dict([('Type', _SKD_ControlSet_val_Type_3), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 4))]), dict([('Type', _SKD_ControlSet_val_Type_4), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 5))]), dict([('Type', _SKD_ControlSet_val_Type_5), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 6))]), dict([('Type', _SKD_ControlSet_val_Type_6), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 7))]), dict([('Type', _SKD_ControlSet_val_Type_7), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 8))]), dict([('Type', _SKD_ControlSet_val_Type_8), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 9))]), dict([('Type', _SKD_ControlSet_val_Type_9), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 11))]), dict([('Type', _SKD_ControlSet_val_Type_10), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 13))]), dict([('Type', _SKD_ControlSet_val_Type_11), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 14))]), dict([('Type', _SKD_ControlSet_val_Type_12), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 15))])], rr=[], ev=[], er=[])
    
    #-----< skd-glUseKEK >-----#
    skd_glUseKEK = CLASS(name='skd-glUseKEK', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _skd_glUseKEK_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLUseKEK')))
    skd_glUseKEK._val = dict([('Type', _skd_glUseKEK_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 1))])
    
    #-----< id-skd-glUseKEK >-----#
    id_skd_glUseKEK = OID(name='id-skd-glUseKEK', mode=MODE_VALUE)
    id_skd_glUseKEK._val = (1, 2, 840, 113549, 1, 9, 16, 8, 1)
    
    #-----< GLUseKEK >-----#
    GLUseKEK = SEQ(name='GLUseKEK', mode=MODE_TYPE)
    _GLUseKEK_glInfo = SEQ(name='glInfo', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLInfo')))
    _GLUseKEK_glOwnerInfo = SEQ_OF(name='glOwnerInfo', mode=MODE_TYPE)
    __GLUseKEK_glOwnerInfo__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLOwnerInfo')))
    _GLUseKEK_glOwnerInfo._cont = __GLUseKEK_glOwnerInfo__item_
    _GLUseKEK_glOwnerInfo._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    _GLUseKEK_glAdministration = INT(name='glAdministration', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLAdministration')), default=1)
    _GLUseKEK_glKeyAttributes = SEQ(name='glKeyAttributes', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLKeyAttributes')), opt=True)
    GLUseKEK._cont = ASN1Dict([
        ('glInfo', _GLUseKEK_glInfo),
        ('glOwnerInfo', _GLUseKEK_glOwnerInfo),
        ('glAdministration', _GLUseKEK_glAdministration),
        ('glKeyAttributes', _GLUseKEK_glKeyAttributes),
        ])
    GLUseKEK._ext = None
    
    #-----< GLInfo >-----#
    GLInfo = SEQ(name='GLInfo', mode=MODE_TYPE)
    _GLInfo_glName = CHOICE(name='glName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    _GLInfo_glAddress = CHOICE(name='glAddress', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    GLInfo._cont = ASN1Dict([
        ('glName', _GLInfo_glName),
        ('glAddress', _GLInfo_glAddress),
        ])
    GLInfo._ext = None
    
    #-----< GLOwnerInfo >-----#
    GLOwnerInfo = SEQ(name='GLOwnerInfo', mode=MODE_TYPE)
    _GLOwnerInfo_glOwnerName = CHOICE(name='glOwnerName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    _GLOwnerInfo_glOwnerAddress = CHOICE(name='glOwnerAddress', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    _GLOwnerInfo_certificates = SEQ(name='certificates', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'Certificates')), opt=True)
    GLOwnerInfo._cont = ASN1Dict([
        ('glOwnerName', _GLOwnerInfo_glOwnerName),
        ('glOwnerAddress', _GLOwnerInfo_glOwnerAddress),
        ('certificates', _GLOwnerInfo_certificates),
        ])
    GLOwnerInfo._ext = None
    
    #-----< GLAdministration >-----#
    GLAdministration = INT(name='GLAdministration', mode=MODE_TYPE)
    GLAdministration._cont = ASN1Dict([('unmanaged', 0), ('managed', 1), ('closed', 2)])
    
    #-----< SKD-Caps >-----#
    SKD_Caps = CLASS(name='SKD-Caps', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')))
    SKD_Caps._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 6))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 5))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 25))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 45))])], rr=[], ev=[], er=[])
    
    #-----< cap-aes128-cbc >-----#
    cap_aes128_cbc = SEQ(name='cap-aes128-cbc', mode=MODE_VALUE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'KeyWrapAlgorithm')))
    cap_aes128_cbc._val = dict([('capabilityID', (2, 16, 840, 1, 101, 3, 4, 1, 5))])
    
    #-----< KeyWrapAlgorithm >-----#
    KeyWrapAlgorithm = SEQ(name='KeyWrapAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIMECapability')))
    _KeyWrapAlgorithm_capabilityID = OID(name='capabilityID', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SMIME-CAPS'), ['id']))
    __KeyWrapAlgorithm_capabilityID_tab = CLASS(name='_tab_SMIME-CAPS', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')))
    __KeyWrapAlgorithm_capabilityID_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 6))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 5))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 25))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 45))])], rr=[], ev=None, er=[])
    _KeyWrapAlgorithm_capabilityID._const_tab = __KeyWrapAlgorithm_capabilityID_tab
    _KeyWrapAlgorithm_capabilityID._const_tab_at = None
    _KeyWrapAlgorithm_capabilityID._const_tab_id = 'id'
    _KeyWrapAlgorithm_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SMIME-CAPS'), ['Type']), opt=True)
    _KeyWrapAlgorithm_parameters._const_tab = __KeyWrapAlgorithm_capabilityID_tab
    _KeyWrapAlgorithm_parameters._const_tab_at = ('..', 'capabilityID')
    _KeyWrapAlgorithm_parameters._const_tab_id = 'Type'
    KeyWrapAlgorithm._cont = ASN1Dict([
        ('capabilityID', _KeyWrapAlgorithm_capabilityID),
        ('parameters', _KeyWrapAlgorithm_parameters),
        ])
    KeyWrapAlgorithm._ext = None
    
    #-----< GLKeyAttributes >-----#
    GLKeyAttributes = SEQ(name='GLKeyAttributes', mode=MODE_TYPE)
    _GLKeyAttributes_rekeyControlledByGLO = BOOL(name='rekeyControlledByGLO', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=False)
    _GLKeyAttributes_recipientsNotMutuallyAware = BOOL(name='recipientsNotMutuallyAware', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=True)
    _GLKeyAttributes_duration = INT(name='duration', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=0)
    _GLKeyAttributes_generationCounter = INT(name='generationCounter', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=2)
    _GLKeyAttributes_requestedAlgorithm = SEQ(name='requestedAlgorithm', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'KeyWrapAlgorithm')), default=dict([('capabilityID', (2, 16, 840, 1, 101, 3, 4, 1, 5))]))
    GLKeyAttributes._cont = ASN1Dict([
        ('rekeyControlledByGLO', _GLKeyAttributes_rekeyControlledByGLO),
        ('recipientsNotMutuallyAware', _GLKeyAttributes_recipientsNotMutuallyAware),
        ('duration', _GLKeyAttributes_duration),
        ('generationCounter', _GLKeyAttributes_generationCounter),
        ('requestedAlgorithm', _GLKeyAttributes_requestedAlgorithm),
        ])
    GLKeyAttributes._ext = None
    
    #-----< skd-glDelete >-----#
    skd_glDelete = CLASS(name='skd-glDelete', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _skd_glDelete_val_Type = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'DeleteGL')))
    skd_glDelete._val = dict([('Type', _skd_glDelete_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 2))])
    
    #-----< id-skd-glDelete >-----#
    id_skd_glDelete = OID(name='id-skd-glDelete', mode=MODE_VALUE)
    id_skd_glDelete._val = (1, 2, 840, 113549, 1, 9, 16, 8, 2)
    
    #-----< DeleteGL >-----#
    DeleteGL = CHOICE(name='DeleteGL', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    
    #-----< skd-glAddMember >-----#
    skd_glAddMember = CLASS(name='skd-glAddMember', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _skd_glAddMember_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLAddMember')))
    skd_glAddMember._val = dict([('Type', _skd_glAddMember_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 3))])
    
    #-----< id-skd-glAddMember >-----#
    id_skd_glAddMember = OID(name='id-skd-glAddMember', mode=MODE_VALUE)
    id_skd_glAddMember._val = (1, 2, 840, 113549, 1, 9, 16, 8, 3)
    
    #-----< GLAddMember >-----#
    GLAddMember = SEQ(name='GLAddMember', mode=MODE_TYPE)
    _GLAddMember_glName = CHOICE(name='glName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    _GLAddMember_glMember = SEQ(name='glMember', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLMember')))
    GLAddMember._cont = ASN1Dict([
        ('glName', _GLAddMember_glName),
        ('glMember', _GLAddMember_glMember),
        ])
    GLAddMember._ext = None
    
    #-----< GLMember >-----#
    GLMember = SEQ(name='GLMember', mode=MODE_TYPE)
    _GLMember_glMemberName = CHOICE(name='glMemberName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    _GLMember_glMemberAddress = CHOICE(name='glMemberAddress', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')), opt=True)
    _GLMember_certificates = SEQ(name='certificates', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'Certificates')), opt=True)
    GLMember._cont = ASN1Dict([
        ('glMemberName', _GLMember_glMemberName),
        ('glMemberAddress', _GLMember_glMemberAddress),
        ('certificates', _GLMember_certificates),
        ])
    GLMember._ext = None
    
    #-----< Certificates >-----#
    Certificates = SEQ(name='Certificates', mode=MODE_TYPE)
    _Certificates_pKC = SEQ(name='pKC', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PKIX1Explicit-2009', 'Certificate')), opt=True)
    _Certificates_aC = SEQ_OF(name='aC', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __Certificates_aC__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PKIXAttributeCertificate-2009', 'AttributeCertificate')))
    _Certificates_aC._cont = __Certificates_aC__item_
    _Certificates_aC._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    _Certificates_certPath = SET_OF(name='certPath', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'CertificateSet')), opt=True)
    Certificates._cont = ASN1Dict([
        ('pKC', _Certificates_pKC),
        ('aC', _Certificates_aC),
        ('certPath', _Certificates_certPath),
        ])
    Certificates._ext = None
    
    #-----< skd-glDeleteMember >-----#
    skd_glDeleteMember = CLASS(name='skd-glDeleteMember', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _skd_glDeleteMember_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLDeleteMember')))
    skd_glDeleteMember._val = dict([('Type', _skd_glDeleteMember_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 4))])
    
    #-----< id-skd-glDeleteMember >-----#
    id_skd_glDeleteMember = OID(name='id-skd-glDeleteMember', mode=MODE_VALUE)
    id_skd_glDeleteMember._val = (1, 2, 840, 113549, 1, 9, 16, 8, 4)
    
    #-----< GLDeleteMember >-----#
    GLDeleteMember = SEQ(name='GLDeleteMember', mode=MODE_TYPE)
    _GLDeleteMember_glName = CHOICE(name='glName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    _GLDeleteMember_glMemberToDelete = CHOICE(name='glMemberToDelete', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    GLDeleteMember._cont = ASN1Dict([
        ('glName', _GLDeleteMember_glName),
        ('glMemberToDelete', _GLDeleteMember_glMemberToDelete),
        ])
    GLDeleteMember._ext = None
    
    #-----< skd-glRekey >-----#
    skd_glRekey = CLASS(name='skd-glRekey', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _skd_glRekey_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLRekey')))
    skd_glRekey._val = dict([('Type', _skd_glRekey_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 5))])
    
    #-----< id-skd-glRekey >-----#
    id_skd_glRekey = OID(name='id-skd-glRekey', mode=MODE_VALUE)
    id_skd_glRekey._val = (1, 2, 840, 113549, 1, 9, 16, 8, 5)
    
    #-----< GLRekey >-----#
    GLRekey = SEQ(name='GLRekey', mode=MODE_TYPE)
    _GLRekey_glName = CHOICE(name='glName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    _GLRekey_glAdministration = INT(name='glAdministration', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLAdministration')), opt=True)
    _GLRekey_glNewKeyAttributes = SEQ(name='glNewKeyAttributes', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLNewKeyAttributes')), opt=True)
    _GLRekey_glRekeyAllGLKeys = BOOL(name='glRekeyAllGLKeys', mode=MODE_TYPE, opt=True)
    GLRekey._cont = ASN1Dict([
        ('glName', _GLRekey_glName),
        ('glAdministration', _GLRekey_glAdministration),
        ('glNewKeyAttributes', _GLRekey_glNewKeyAttributes),
        ('glRekeyAllGLKeys', _GLRekey_glRekeyAllGLKeys),
        ])
    GLRekey._ext = None
    
    #-----< GLNewKeyAttributes >-----#
    GLNewKeyAttributes = SEQ(name='GLNewKeyAttributes', mode=MODE_TYPE)
    _GLNewKeyAttributes_rekeyControlledByGLO = BOOL(name='rekeyControlledByGLO', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _GLNewKeyAttributes_recipientsNotMutuallyAware = BOOL(name='recipientsNotMutuallyAware', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _GLNewKeyAttributes_duration = INT(name='duration', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _GLNewKeyAttributes_generationCounter = INT(name='generationCounter', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _GLNewKeyAttributes_requestedAlgorithm = SEQ(name='requestedAlgorithm', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'KeyWrapAlgorithm')), opt=True)
    GLNewKeyAttributes._cont = ASN1Dict([
        ('rekeyControlledByGLO', _GLNewKeyAttributes_rekeyControlledByGLO),
        ('recipientsNotMutuallyAware', _GLNewKeyAttributes_recipientsNotMutuallyAware),
        ('duration', _GLNewKeyAttributes_duration),
        ('generationCounter', _GLNewKeyAttributes_generationCounter),
        ('requestedAlgorithm', _GLNewKeyAttributes_requestedAlgorithm),
        ])
    GLNewKeyAttributes._ext = None
    
    #-----< skd-glAddOwner >-----#
    skd_glAddOwner = CLASS(name='skd-glAddOwner', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _skd_glAddOwner_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLOwnerAdministration')))
    skd_glAddOwner._val = dict([('Type', _skd_glAddOwner_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 6))])
    
    #-----< id-skd-glAddOwner >-----#
    id_skd_glAddOwner = OID(name='id-skd-glAddOwner', mode=MODE_VALUE)
    id_skd_glAddOwner._val = (1, 2, 840, 113549, 1, 9, 16, 8, 6)
    
    #-----< skd-glRemoveOwner >-----#
    skd_glRemoveOwner = CLASS(name='skd-glRemoveOwner', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _skd_glRemoveOwner_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLOwnerAdministration')))
    skd_glRemoveOwner._val = dict([('Type', _skd_glRemoveOwner_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 7))])
    
    #-----< id-skd-glRemoveOwner >-----#
    id_skd_glRemoveOwner = OID(name='id-skd-glRemoveOwner', mode=MODE_VALUE)
    id_skd_glRemoveOwner._val = (1, 2, 840, 113549, 1, 9, 16, 8, 7)
    
    #-----< GLOwnerAdministration >-----#
    GLOwnerAdministration = SEQ(name='GLOwnerAdministration', mode=MODE_TYPE)
    _GLOwnerAdministration_glName = CHOICE(name='glName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    _GLOwnerAdministration_glOwnerInfo = SEQ(name='glOwnerInfo', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLOwnerInfo')))
    GLOwnerAdministration._cont = ASN1Dict([
        ('glName', _GLOwnerAdministration_glName),
        ('glOwnerInfo', _GLOwnerAdministration_glOwnerInfo),
        ])
    GLOwnerAdministration._ext = None
    
    #-----< skd-glKeyCompromise >-----#
    skd_glKeyCompromise = CLASS(name='skd-glKeyCompromise', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _skd_glKeyCompromise_val_Type = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLKCompromise')))
    skd_glKeyCompromise._val = dict([('Type', _skd_glKeyCompromise_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 8))])
    
    #-----< id-skd-glKeyCompromise >-----#
    id_skd_glKeyCompromise = OID(name='id-skd-glKeyCompromise', mode=MODE_VALUE)
    id_skd_glKeyCompromise._val = (1, 2, 840, 113549, 1, 9, 16, 8, 8)
    
    #-----< GLKCompromise >-----#
    GLKCompromise = CHOICE(name='GLKCompromise', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    
    #-----< skd-glkRefresh >-----#
    skd_glkRefresh = CLASS(name='skd-glkRefresh', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _skd_glkRefresh_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLKRefresh')))
    skd_glkRefresh._val = dict([('Type', _skd_glkRefresh_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 9))])
    
    #-----< id-skd-glkRefresh >-----#
    id_skd_glkRefresh = OID(name='id-skd-glkRefresh', mode=MODE_VALUE)
    id_skd_glkRefresh._val = (1, 2, 840, 113549, 1, 9, 16, 8, 9)
    
    #-----< GLKRefresh >-----#
    GLKRefresh = SEQ(name='GLKRefresh', mode=MODE_TYPE)
    _GLKRefresh_glName = CHOICE(name='glName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    _GLKRefresh_dates = SEQ_OF(name='dates', mode=MODE_TYPE)
    __GLKRefresh_dates__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'Date')))
    _GLKRefresh_dates._cont = __GLKRefresh_dates__item_
    _GLKRefresh_dates._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=None)], ev=None, er=[])
    GLKRefresh._cont = ASN1Dict([
        ('glName', _GLKRefresh_glName),
        ('dates', _GLKRefresh_dates),
        ])
    GLKRefresh._ext = None
    
    #-----< Date >-----#
    Date = SEQ(name='Date', mode=MODE_TYPE)
    _Date_start = TIME_GEN(name='start', mode=MODE_TYPE)
    _Date_end = TIME_GEN(name='end', mode=MODE_TYPE, opt=True)
    Date._cont = ASN1Dict([
        ('start', _Date_start),
        ('end', _Date_end),
        ])
    Date._ext = None
    
    #-----< skd-glaQueryRequest >-----#
    skd_glaQueryRequest = CLASS(name='skd-glaQueryRequest', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _skd_glaQueryRequest_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLAQueryRequest')))
    skd_glaQueryRequest._val = dict([('Type', _skd_glaQueryRequest_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 11))])
    
    #-----< id-skd-glaQueryRequest >-----#
    id_skd_glaQueryRequest = OID(name='id-skd-glaQueryRequest', mode=MODE_VALUE)
    id_skd_glaQueryRequest._val = (1, 2, 840, 113549, 1, 9, 16, 8, 11)
    
    #-----< SKD-QUERY >-----#
    SKD_QUERY = CLASS(name='SKD-QUERY', mode=MODE_TYPE, typeref=ASN1RefType(('_IMPL_', 'TYPE-IDENTIFIER'), []))
    
    #-----< SkdQuerySet >-----#
    SkdQuerySet = CLASS(name='SkdQuerySet', mode=MODE_SET, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'SKD-QUERY')))
    _SkdQuerySet_val_Type_0 = NULL(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'SKDAlgRequest')))
    SkdQuerySet._val = ASN1Set(rv=[dict([('Type', _SkdQuerySet_val_Type_0), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 99, 1))])], rr=[], ev=[], er=[])
    
    #-----< GLAQueryRequest >-----#
    GLAQueryRequest = SEQ(name='GLAQueryRequest', mode=MODE_TYPE)
    _GLAQueryRequest_glaRequestType = OID(name='glaRequestType', mode=MODE_TYPE, typeref=ASN1RefClassField(('SMIMESymmetricKeyDistribution-2009', 'SKD-QUERY'), ['id']))
    __GLAQueryRequest_glaRequestType_tab = CLASS(name='_tab_SKD-QUERY', mode=MODE_SET, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'SKD-QUERY')))
    ___GLAQueryRequest_glaRequestType_tab_val_Type_0 = NULL(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'SKDAlgRequest')))
    __GLAQueryRequest_glaRequestType_tab._val = ASN1Set(rv=[dict([('Type', ___GLAQueryRequest_glaRequestType_tab_val_Type_0), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 99, 1))])], rr=[], ev=None, er=[])
    _GLAQueryRequest_glaRequestType._const_tab = __GLAQueryRequest_glaRequestType_tab
    _GLAQueryRequest_glaRequestType._const_tab_at = None
    _GLAQueryRequest_glaRequestType._const_tab_id = 'id'
    _GLAQueryRequest_glaRequestValue = OPEN(name='glaRequestValue', mode=MODE_TYPE, typeref=ASN1RefClassField(('SMIMESymmetricKeyDistribution-2009', 'SKD-QUERY'), ['Type']))
    _GLAQueryRequest_glaRequestValue._const_tab = __GLAQueryRequest_glaRequestType_tab
    _GLAQueryRequest_glaRequestValue._const_tab_at = ('..', 'glaRequestType')
    _GLAQueryRequest_glaRequestValue._const_tab_id = 'Type'
    GLAQueryRequest._cont = ASN1Dict([
        ('glaRequestType', _GLAQueryRequest_glaRequestType),
        ('glaRequestValue', _GLAQueryRequest_glaRequestValue),
        ])
    GLAQueryRequest._ext = None
    
    #-----< skd-glaQueryResponse >-----#
    skd_glaQueryResponse = CLASS(name='skd-glaQueryResponse', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _skd_glaQueryResponse_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLAQueryResponse')))
    skd_glaQueryResponse._val = dict([('Type', _skd_glaQueryResponse_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 12))])
    
    #-----< id-skd-glaQueryResponse >-----#
    id_skd_glaQueryResponse = OID(name='id-skd-glaQueryResponse', mode=MODE_VALUE)
    id_skd_glaQueryResponse._val = (1, 2, 840, 113549, 1, 9, 16, 8, 12)
    
    #-----< SKD-RESPONSE >-----#
    SKD_RESPONSE = CLASS(name='SKD-RESPONSE', mode=MODE_TYPE, typeref=ASN1RefType(('_IMPL_', 'TYPE-IDENTIFIER'), []))
    
    #-----< SkdResponseSet >-----#
    SkdResponseSet = CLASS(name='SkdResponseSet', mode=MODE_SET, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'SKD-RESPONSE')))
    _SkdResponseSet_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIMECapability')))
    __SkdResponseSet_val_Type_0_capabilityID = OID(name='capabilityID', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SMIME-CAPS'), ['id']))
    ___SkdResponseSet_val_Type_0_capabilityID_tab = CLASS(name='_tab_SMIME-CAPS', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')))
    ___SkdResponseSet_val_Type_0_capabilityID_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 6))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 5))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 25))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 45))])], rr=[], ev=None, er=[])
    __SkdResponseSet_val_Type_0_capabilityID._const_tab = ___SkdResponseSet_val_Type_0_capabilityID_tab
    __SkdResponseSet_val_Type_0_capabilityID._const_tab_at = None
    __SkdResponseSet_val_Type_0_capabilityID._const_tab_id = 'id'
    __SkdResponseSet_val_Type_0_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SMIME-CAPS'), ['Type']), opt=True)
    __SkdResponseSet_val_Type_0_parameters._const_tab = ___SkdResponseSet_val_Type_0_capabilityID_tab
    __SkdResponseSet_val_Type_0_parameters._const_tab_at = ('..', 'capabilityID')
    __SkdResponseSet_val_Type_0_parameters._const_tab_id = 'Type'
    _SkdResponseSet_val_Type_0._cont = ASN1Dict([
        ('capabilityID', __SkdResponseSet_val_Type_0_capabilityID),
        ('parameters', __SkdResponseSet_val_Type_0_parameters),
        ])
    _SkdResponseSet_val_Type_0._ext = None
    SkdResponseSet._val = ASN1Set(rv=[dict([('Type', _SkdResponseSet_val_Type_0), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 99, 2))])], rr=[], ev=[], er=[])
    
    #-----< GLAQueryResponse >-----#
    GLAQueryResponse = SEQ(name='GLAQueryResponse', mode=MODE_TYPE)
    _GLAQueryResponse_glaResponseType = OID(name='glaResponseType', mode=MODE_TYPE, typeref=ASN1RefClassField(('SMIMESymmetricKeyDistribution-2009', 'SKD-RESPONSE'), ['id']))
    __GLAQueryResponse_glaResponseType_tab = CLASS(name='_tab_SKD-RESPONSE', mode=MODE_SET, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'SKD-RESPONSE')))
    ___GLAQueryResponse_glaResponseType_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIMECapability')))
    ____GLAQueryResponse_glaResponseType_tab_val_Type_0_capabilityID = OID(name='capabilityID', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SMIME-CAPS'), ['id']))
    _____GLAQueryResponse_glaResponseType_tab_val_Type_0_capabilityID_tab = CLASS(name='_tab_SMIME-CAPS', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')))
    _____GLAQueryResponse_glaResponseType_tab_val_Type_0_capabilityID_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 6))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 5))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 25))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 45))])], rr=[], ev=None, er=[])
    ____GLAQueryResponse_glaResponseType_tab_val_Type_0_capabilityID._const_tab = _____GLAQueryResponse_glaResponseType_tab_val_Type_0_capabilityID_tab
    ____GLAQueryResponse_glaResponseType_tab_val_Type_0_capabilityID._const_tab_at = None
    ____GLAQueryResponse_glaResponseType_tab_val_Type_0_capabilityID._const_tab_id = 'id'
    ____GLAQueryResponse_glaResponseType_tab_val_Type_0_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SMIME-CAPS'), ['Type']), opt=True)
    ____GLAQueryResponse_glaResponseType_tab_val_Type_0_parameters._const_tab = _____GLAQueryResponse_glaResponseType_tab_val_Type_0_capabilityID_tab
    ____GLAQueryResponse_glaResponseType_tab_val_Type_0_parameters._const_tab_at = ('..', 'capabilityID')
    ____GLAQueryResponse_glaResponseType_tab_val_Type_0_parameters._const_tab_id = 'Type'
    ___GLAQueryResponse_glaResponseType_tab_val_Type_0._cont = ASN1Dict([
        ('capabilityID', ____GLAQueryResponse_glaResponseType_tab_val_Type_0_capabilityID),
        ('parameters', ____GLAQueryResponse_glaResponseType_tab_val_Type_0_parameters),
        ])
    ___GLAQueryResponse_glaResponseType_tab_val_Type_0._ext = None
    __GLAQueryResponse_glaResponseType_tab._val = ASN1Set(rv=[dict([('Type', ___GLAQueryResponse_glaResponseType_tab_val_Type_0), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 99, 2))])], rr=[], ev=None, er=[])
    _GLAQueryResponse_glaResponseType._const_tab = __GLAQueryResponse_glaResponseType_tab
    _GLAQueryResponse_glaResponseType._const_tab_at = None
    _GLAQueryResponse_glaResponseType._const_tab_id = 'id'
    _GLAQueryResponse_glaResponseValue = OPEN(name='glaResponseValue', mode=MODE_TYPE, typeref=ASN1RefClassField(('SMIMESymmetricKeyDistribution-2009', 'SKD-RESPONSE'), ['Type']))
    _GLAQueryResponse_glaResponseValue._const_tab = __GLAQueryResponse_glaResponseType_tab
    _GLAQueryResponse_glaResponseValue._const_tab_at = ('..', 'glaResponseType')
    _GLAQueryResponse_glaResponseValue._const_tab_id = 'Type'
    GLAQueryResponse._cont = ASN1Dict([
        ('glaResponseType', _GLAQueryResponse_glaResponseType),
        ('glaResponseValue', _GLAQueryResponse_glaResponseValue),
        ])
    GLAQueryResponse._ext = None
    
    #-----< id-cmc-glaRR >-----#
    id_cmc_glaRR = OID(name='id-cmc-glaRR', mode=MODE_VALUE)
    id_cmc_glaRR._val = (1, 3, 6, 1, 5, 5, 7, 7, 99)
    
    #-----< skd-AlgRequest >-----#
    skd_AlgRequest = CLASS(name='skd-AlgRequest', mode=MODE_VALUE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'SKD-QUERY')))
    _skd_AlgRequest_val_Type = NULL(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'SKDAlgRequest')))
    skd_AlgRequest._val = dict([('Type', _skd_AlgRequest_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 99, 1))])
    
    #-----< id-cmc-gla-skdAlgRequest >-----#
    id_cmc_gla_skdAlgRequest = OID(name='id-cmc-gla-skdAlgRequest', mode=MODE_VALUE)
    id_cmc_gla_skdAlgRequest._val = (1, 3, 6, 1, 5, 5, 7, 7, 99, 1)
    
    #-----< SKDAlgRequest >-----#
    SKDAlgRequest = NULL(name='SKDAlgRequest', mode=MODE_TYPE)
    
    #-----< skd-AlgResponse >-----#
    skd_AlgResponse = CLASS(name='skd-AlgResponse', mode=MODE_VALUE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'SKD-RESPONSE')))
    _skd_AlgResponse_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIMECapability')))
    __skd_AlgResponse_val_Type_capabilityID = OID(name='capabilityID', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SMIME-CAPS'), ['id']))
    ___skd_AlgResponse_val_Type_capabilityID_tab = CLASS(name='_tab_SMIME-CAPS', mode=MODE_SET, typeref=ASN1RefType(('AlgorithmInformation-2009', 'SMIME-CAPS')))
    ___skd_AlgResponse_val_Type_capabilityID_tab._val = ASN1Set(rv=[dict([('id', (1, 2, 840, 113549, 1, 9, 16, 3, 6))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 5))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 25))]), dict([('id', (2, 16, 840, 1, 101, 3, 4, 1, 45))])], rr=[], ev=None, er=[])
    __skd_AlgResponse_val_Type_capabilityID._const_tab = ___skd_AlgResponse_val_Type_capabilityID_tab
    __skd_AlgResponse_val_Type_capabilityID._const_tab_at = None
    __skd_AlgResponse_val_Type_capabilityID._const_tab_id = 'id'
    __skd_AlgResponse_val_Type_parameters = OPEN(name='parameters', mode=MODE_TYPE, typeref=ASN1RefClassField(('AlgorithmInformation-2009', 'SMIME-CAPS'), ['Type']), opt=True)
    __skd_AlgResponse_val_Type_parameters._const_tab = ___skd_AlgResponse_val_Type_capabilityID_tab
    __skd_AlgResponse_val_Type_parameters._const_tab_at = ('..', 'capabilityID')
    __skd_AlgResponse_val_Type_parameters._const_tab_id = 'Type'
    _skd_AlgResponse_val_Type._cont = ASN1Dict([
        ('capabilityID', __skd_AlgResponse_val_Type_capabilityID),
        ('parameters', __skd_AlgResponse_val_Type_parameters),
        ])
    _skd_AlgResponse_val_Type._ext = None
    skd_AlgResponse._val = dict([('Type', _skd_AlgResponse_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 7, 99, 2))])
    
    #-----< id-cmc-gla-skdAlgResponse >-----#
    id_cmc_gla_skdAlgResponse = OID(name='id-cmc-gla-skdAlgResponse', mode=MODE_VALUE)
    id_cmc_gla_skdAlgResponse._val = (1, 3, 6, 1, 5, 5, 7, 7, 99, 2)
    
    #-----< skd-glProvideCert >-----#
    skd_glProvideCert = CLASS(name='skd-glProvideCert', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _skd_glProvideCert_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLManageCert')))
    skd_glProvideCert._val = dict([('Type', _skd_glProvideCert_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 13))])
    
    #-----< id-skd-glProvideCert >-----#
    id_skd_glProvideCert = OID(name='id-skd-glProvideCert', mode=MODE_VALUE)
    id_skd_glProvideCert._val = (1, 2, 840, 113549, 1, 9, 16, 8, 13)
    
    #-----< GLManageCert >-----#
    GLManageCert = SEQ(name='GLManageCert', mode=MODE_TYPE)
    _GLManageCert_glName = CHOICE(name='glName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    _GLManageCert_glMember = SEQ(name='glMember', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLMember')))
    GLManageCert._cont = ASN1Dict([
        ('glName', _GLManageCert_glName),
        ('glMember', _GLManageCert_glMember),
        ])
    GLManageCert._ext = None
    
    #-----< skd-glManageCert >-----#
    skd_glManageCert = CLASS(name='skd-glManageCert', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _skd_glManageCert_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLManageCert')))
    skd_glManageCert._val = dict([('Type', _skd_glManageCert_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 14))])
    
    #-----< id-skd-glManageCert >-----#
    id_skd_glManageCert = OID(name='id-skd-glManageCert', mode=MODE_VALUE)
    id_skd_glManageCert._val = (1, 2, 840, 113549, 1, 9, 16, 8, 14)
    
    #-----< skd-glKey >-----#
    skd_glKey = CLASS(name='skd-glKey', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'CMC-CONTROL')))
    _skd_glKey_val_Type = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'GLKey')))
    skd_glKey._val = dict([('Type', _skd_glKey_val_Type), ('id', (1, 2, 840, 113549, 1, 9, 16, 8, 15))])
    
    #-----< id-skd-glKey >-----#
    id_skd_glKey = OID(name='id-skd-glKey', mode=MODE_VALUE)
    id_skd_glKey._val = (1, 2, 840, 113549, 1, 9, 16, 8, 15)
    
    #-----< GLKey >-----#
    GLKey = SEQ(name='GLKey', mode=MODE_TYPE)
    _GLKey_glName = CHOICE(name='glName', mode=MODE_TYPE, typeref=ASN1RefType(('PKIX1Implicit-2009', 'GeneralName')))
    _GLKey_glIdentifier = SEQ(name='glIdentifier', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'KEKIdentifier')))
    _GLKey_glkWrapped = SET_OF(name='glkWrapped', mode=MODE_TYPE, typeref=ASN1RefType(('CryptographicMessageSyntax-2009', 'RecipientInfos')))
    _GLKey_glkAlgorithm = SEQ(name='glkAlgorithm', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'KeyWrapAlgorithm')))
    _GLKey_glkNotBefore = TIME_GEN(name='glkNotBefore', mode=MODE_TYPE)
    _GLKey_glkNotAfter = TIME_GEN(name='glkNotAfter', mode=MODE_TYPE)
    GLKey._cont = ASN1Dict([
        ('glName', _GLKey_glName),
        ('glIdentifier', _GLKey_glIdentifier),
        ('glkWrapped', _GLKey_glkWrapped),
        ('glkAlgorithm', _GLKey_glkAlgorithm),
        ('glkNotBefore', _GLKey_glkNotBefore),
        ('glkNotAfter', _GLKey_glkNotAfter),
        ])
    GLKey._ext = None
    
    #-----< skd-ExtendedFailures >-----#
    skd_ExtendedFailures = CLASS(name='skd-ExtendedFailures', mode=MODE_VALUE, typeref=ASN1RefType(('EnrollmentMessageSyntax-2009', 'EXTENDED-FAILURE-INFO')))
    _skd_ExtendedFailures_val_Type = INT(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('SMIMESymmetricKeyDistribution-2009', 'SKDFailInfo')))
    skd_ExtendedFailures._val = dict([('Type', _skd_ExtendedFailures_val_Type), ('id', (1, 3, 6, 1, 5, 5, 7, 15, 1))])
    
    #-----< id-cet-skdFailInfo >-----#
    id_cet_skdFailInfo = OID(name='id-cet-skdFailInfo', mode=MODE_VALUE)
    id_cet_skdFailInfo._val = (1, 3, 6, 1, 5, 5, 7, 15, 1)
    
    #-----< SKDFailInfo >-----#
    SKDFailInfo = INT(name='SKDFailInfo', mode=MODE_TYPE)
    SKDFailInfo._cont = ASN1Dict([('unspecified', 0), ('closedGL', 1), ('unsupportedDuration', 2), ('noGLACertificate', 3), ('invalidCert', 4), ('unsupportedAlgorithm', 5), ('noGLONameMatch', 6), ('invalidGLName', 7), ('nameAlreadyInUse', 8), ('noSpam', 9), ('deniedAccess', 10), ('alreadyAMember', 11), ('notAMember', 12), ('alreadyAnOwner', 13), ('notAnOwner', 14)])
    
    _all_ = [
        id_skd,
        SKD_ControlSet,
        _SKD_ControlSet_val_Type_0,
        _SKD_ControlSet_val_Type_1,
        _SKD_ControlSet_val_Type_2,
        _SKD_ControlSet_val_Type_3,
        _SKD_ControlSet_val_Type_4,
        _SKD_ControlSet_val_Type_5,
        _SKD_ControlSet_val_Type_6,
        _SKD_ControlSet_val_Type_7,
        _SKD_ControlSet_val_Type_8,
        _SKD_ControlSet_val_Type_9,
        _SKD_ControlSet_val_Type_10,
        _SKD_ControlSet_val_Type_11,
        _SKD_ControlSet_val_Type_12,
        skd_glUseKEK,
        _skd_glUseKEK_val_Type,
        id_skd_glUseKEK,
        _GLUseKEK_glInfo,
        __GLUseKEK_glOwnerInfo__item_,
        _GLUseKEK_glOwnerInfo,
        _GLUseKEK_glAdministration,
        _GLUseKEK_glKeyAttributes,
        GLUseKEK,
        _GLInfo_glName,
        _GLInfo_glAddress,
        GLInfo,
        _GLOwnerInfo_glOwnerName,
        _GLOwnerInfo_glOwnerAddress,
        _GLOwnerInfo_certificates,
        GLOwnerInfo,
        GLAdministration,
        SKD_Caps,
        cap_aes128_cbc,
        __KeyWrapAlgorithm_capabilityID_tab,
        _KeyWrapAlgorithm_capabilityID,
        _KeyWrapAlgorithm_parameters,
        KeyWrapAlgorithm,
        _GLKeyAttributes_rekeyControlledByGLO,
        _GLKeyAttributes_recipientsNotMutuallyAware,
        _GLKeyAttributes_duration,
        _GLKeyAttributes_generationCounter,
        _GLKeyAttributes_requestedAlgorithm,
        GLKeyAttributes,
        skd_glDelete,
        _skd_glDelete_val_Type,
        id_skd_glDelete,
        DeleteGL,
        skd_glAddMember,
        _skd_glAddMember_val_Type,
        id_skd_glAddMember,
        _GLAddMember_glName,
        _GLAddMember_glMember,
        GLAddMember,
        _GLMember_glMemberName,
        _GLMember_glMemberAddress,
        _GLMember_certificates,
        GLMember,
        _Certificates_pKC,
        __Certificates_aC__item_,
        _Certificates_aC,
        _Certificates_certPath,
        Certificates,
        skd_glDeleteMember,
        _skd_glDeleteMember_val_Type,
        id_skd_glDeleteMember,
        _GLDeleteMember_glName,
        _GLDeleteMember_glMemberToDelete,
        GLDeleteMember,
        skd_glRekey,
        _skd_glRekey_val_Type,
        id_skd_glRekey,
        _GLRekey_glName,
        _GLRekey_glAdministration,
        _GLRekey_glNewKeyAttributes,
        _GLRekey_glRekeyAllGLKeys,
        GLRekey,
        _GLNewKeyAttributes_rekeyControlledByGLO,
        _GLNewKeyAttributes_recipientsNotMutuallyAware,
        _GLNewKeyAttributes_duration,
        _GLNewKeyAttributes_generationCounter,
        _GLNewKeyAttributes_requestedAlgorithm,
        GLNewKeyAttributes,
        skd_glAddOwner,
        _skd_glAddOwner_val_Type,
        id_skd_glAddOwner,
        skd_glRemoveOwner,
        _skd_glRemoveOwner_val_Type,
        id_skd_glRemoveOwner,
        _GLOwnerAdministration_glName,
        _GLOwnerAdministration_glOwnerInfo,
        GLOwnerAdministration,
        skd_glKeyCompromise,
        _skd_glKeyCompromise_val_Type,
        id_skd_glKeyCompromise,
        GLKCompromise,
        skd_glkRefresh,
        _skd_glkRefresh_val_Type,
        id_skd_glkRefresh,
        _GLKRefresh_glName,
        __GLKRefresh_dates__item_,
        _GLKRefresh_dates,
        GLKRefresh,
        _Date_start,
        _Date_end,
        Date,
        skd_glaQueryRequest,
        _skd_glaQueryRequest_val_Type,
        id_skd_glaQueryRequest,
        SKD_QUERY,
        SkdQuerySet,
        _SkdQuerySet_val_Type_0,
        __GLAQueryRequest_glaRequestType_tab,
        ___GLAQueryRequest_glaRequestType_tab_val_Type_0,
        _GLAQueryRequest_glaRequestType,
        _GLAQueryRequest_glaRequestValue,
        GLAQueryRequest,
        skd_glaQueryResponse,
        _skd_glaQueryResponse_val_Type,
        id_skd_glaQueryResponse,
        SKD_RESPONSE,
        SkdResponseSet,
        ___SkdResponseSet_val_Type_0_capabilityID_tab,
        __SkdResponseSet_val_Type_0_capabilityID,
        __SkdResponseSet_val_Type_0_parameters,
        _SkdResponseSet_val_Type_0,
        __GLAQueryResponse_glaResponseType_tab,
        _____GLAQueryResponse_glaResponseType_tab_val_Type_0_capabilityID_tab,
        ____GLAQueryResponse_glaResponseType_tab_val_Type_0_capabilityID,
        ____GLAQueryResponse_glaResponseType_tab_val_Type_0_parameters,
        ___GLAQueryResponse_glaResponseType_tab_val_Type_0,
        _GLAQueryResponse_glaResponseType,
        _GLAQueryResponse_glaResponseValue,
        GLAQueryResponse,
        id_cmc_glaRR,
        skd_AlgRequest,
        _skd_AlgRequest_val_Type,
        id_cmc_gla_skdAlgRequest,
        SKDAlgRequest,
        skd_AlgResponse,
        ___skd_AlgResponse_val_Type_capabilityID_tab,
        __skd_AlgResponse_val_Type_capabilityID,
        __skd_AlgResponse_val_Type_parameters,
        _skd_AlgResponse_val_Type,
        id_cmc_gla_skdAlgResponse,
        skd_glProvideCert,
        _skd_glProvideCert_val_Type,
        id_skd_glProvideCert,
        _GLManageCert_glName,
        _GLManageCert_glMember,
        GLManageCert,
        skd_glManageCert,
        _skd_glManageCert_val_Type,
        id_skd_glManageCert,
        skd_glKey,
        _skd_glKey_val_Type,
        id_skd_glKey,
        _GLKey_glName,
        _GLKey_glIdentifier,
        _GLKey_glkWrapped,
        _GLKey_glkAlgorithm,
        _GLKey_glkNotBefore,
        _GLKey_glkNotAfter,
        GLKey,
        skd_ExtendedFailures,
        _skd_ExtendedFailures_val_Type,
        id_cet_skdFailInfo,
        SKDFailInfo,
    ]

class _IMPL_:

    _name_ = '_IMPL_'
    _oid_  = []
    _obj_  = ['REAL', 'EXTERNAL', 'EMBEDDED PDV', 'CHARACTER STRING', 'TYPE-IDENTIFIER', 'ABSTRACT-SYNTAX']
    
    #-----< REAL >-----#
    REAL = SEQ(name='REAL', mode=MODE_TYPE)
    _REAL_mantissa = INT(name='mantissa', mode=MODE_TYPE)
    _REAL_base = INT(name='base', mode=MODE_TYPE)
    _REAL_base._const_val = ASN1Set(rv=[2, 10], rr=[], ev=None, er=[])
    _REAL_exponent = INT(name='exponent', mode=MODE_TYPE)
    REAL._cont = ASN1Dict([
        ('mantissa', _REAL_mantissa),
        ('base', _REAL_base),
        ('exponent', _REAL_exponent),
        ])
    REAL._ext = None
    
    #-----< EXTERNAL >-----#
    EXTERNAL = SEQ(name='EXTERNAL', mode=MODE_TYPE)
    _EXTERNAL_identification = CHOICE(name='identification', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_syntaxes = SEQ(name='syntaxes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EXTERNAL_identification_syntaxes_abstract = OID(name='abstract', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EXTERNAL_identification_syntaxes_transfer = OID(name='transfer', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_syntaxes._cont = ASN1Dict([
        ('abstract', ___EXTERNAL_identification_syntaxes_abstract),
        ('transfer', ___EXTERNAL_identification_syntaxes_transfer),
        ])
    __EXTERNAL_identification_syntaxes._ext = None
    __EXTERNAL_identification_syntax = OID(name='syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_context_negotiation = SEQ(name='context-negotiation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EXTERNAL_identification_context_negotiation_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EXTERNAL_identification_context_negotiation_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_context_negotiation._cont = ASN1Dict([
        ('presentation-context-id', ___EXTERNAL_identification_context_negotiation_presentation_context_id),
        ('transfer-syntax', ___EXTERNAL_identification_context_negotiation_transfer_syntax),
        ])
    __EXTERNAL_identification_context_negotiation._ext = None
    __EXTERNAL_identification_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_fixed = NULL(name='fixed', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    _EXTERNAL_identification._cont = ASN1Dict([
        ('syntaxes', __EXTERNAL_identification_syntaxes),
        ('syntax', __EXTERNAL_identification_syntax),
        ('presentation-context-id', __EXTERNAL_identification_presentation_context_id),
        ('context-negotiation', __EXTERNAL_identification_context_negotiation),
        ('transfer-syntax', __EXTERNAL_identification_transfer_syntax),
        ('fixed', __EXTERNAL_identification_fixed),
        ])
    _EXTERNAL_identification._ext = None
    _EXTERNAL_data_value_descriptor = OBJ_DESC(name='data-value-descriptor', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), opt=True)
    _EXTERNAL_data_value = OCT_STR(name='data-value', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    EXTERNAL._cont = ASN1Dict([
        ('identification', _EXTERNAL_identification),
        ('data-value-descriptor', _EXTERNAL_data_value_descriptor),
        ('data-value', _EXTERNAL_data_value),
        ])
    EXTERNAL._ext = None
    
    #-----< EMBEDDED PDV >-----#
    EMBEDDED_PDV = SEQ(name='EMBEDDED PDV', mode=MODE_TYPE)
    _EMBEDDED_PDV_identification = CHOICE(name='identification', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_syntaxes = SEQ(name='syntaxes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EMBEDDED_PDV_identification_syntaxes_abstract = OID(name='abstract', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EMBEDDED_PDV_identification_syntaxes_transfer = OID(name='transfer', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_syntaxes._cont = ASN1Dict([
        ('abstract', ___EMBEDDED_PDV_identification_syntaxes_abstract),
        ('transfer', ___EMBEDDED_PDV_identification_syntaxes_transfer),
        ])
    __EMBEDDED_PDV_identification_syntaxes._ext = None
    __EMBEDDED_PDV_identification_syntax = OID(name='syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_context_negotiation = SEQ(name='context-negotiation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EMBEDDED_PDV_identification_context_negotiation_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EMBEDDED_PDV_identification_context_negotiation_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_context_negotiation._cont = ASN1Dict([
        ('presentation-context-id', ___EMBEDDED_PDV_identification_context_negotiation_presentation_context_id),
        ('transfer-syntax', ___EMBEDDED_PDV_identification_context_negotiation_transfer_syntax),
        ])
    __EMBEDDED_PDV_identification_context_negotiation._ext = None
    __EMBEDDED_PDV_identification_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_fixed = NULL(name='fixed', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    _EMBEDDED_PDV_identification._cont = ASN1Dict([
        ('syntaxes', __EMBEDDED_PDV_identification_syntaxes),
        ('syntax', __EMBEDDED_PDV_identification_syntax),
        ('presentation-context-id', __EMBEDDED_PDV_identification_presentation_context_id),
        ('context-negotiation', __EMBEDDED_PDV_identification_context_negotiation),
        ('transfer-syntax', __EMBEDDED_PDV_identification_transfer_syntax),
        ('fixed', __EMBEDDED_PDV_identification_fixed),
        ])
    _EMBEDDED_PDV_identification._ext = None
    _EMBEDDED_PDV_data_value_descriptor = OBJ_DESC(name='data-value-descriptor', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), opt=True)
    _EMBEDDED_PDV_data_value = OCT_STR(name='data-value', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    EMBEDDED_PDV._cont = ASN1Dict([
        ('identification', _EMBEDDED_PDV_identification),
        ('data-value-descriptor', _EMBEDDED_PDV_data_value_descriptor),
        ('data-value', _EMBEDDED_PDV_data_value),
        ])
    EMBEDDED_PDV._ext = None
    
    #-----< CHARACTER STRING >-----#
    CHARACTER_STRING = SEQ(name='CHARACTER STRING', mode=MODE_TYPE)
    _CHARACTER_STRING_identification = CHOICE(name='identification', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_syntaxes = SEQ(name='syntaxes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___CHARACTER_STRING_identification_syntaxes_abstract = OID(name='abstract', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___CHARACTER_STRING_identification_syntaxes_transfer = OID(name='transfer', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_syntaxes._cont = ASN1Dict([
        ('abstract', ___CHARACTER_STRING_identification_syntaxes_abstract),
        ('transfer', ___CHARACTER_STRING_identification_syntaxes_transfer),
        ])
    __CHARACTER_STRING_identification_syntaxes._ext = None
    __CHARACTER_STRING_identification_syntax = OID(name='syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_context_negotiation = SEQ(name='context-negotiation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___CHARACTER_STRING_identification_context_negotiation_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___CHARACTER_STRING_identification_context_negotiation_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_context_negotiation._cont = ASN1Dict([
        ('presentation-context-id', ___CHARACTER_STRING_identification_context_negotiation_presentation_context_id),
        ('transfer-syntax', ___CHARACTER_STRING_identification_context_negotiation_transfer_syntax),
        ])
    __CHARACTER_STRING_identification_context_negotiation._ext = None
    __CHARACTER_STRING_identification_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_fixed = NULL(name='fixed', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    _CHARACTER_STRING_identification._cont = ASN1Dict([
        ('syntaxes', __CHARACTER_STRING_identification_syntaxes),
        ('syntax', __CHARACTER_STRING_identification_syntax),
        ('presentation-context-id', __CHARACTER_STRING_identification_presentation_context_id),
        ('context-negotiation', __CHARACTER_STRING_identification_context_negotiation),
        ('transfer-syntax', __CHARACTER_STRING_identification_transfer_syntax),
        ('fixed', __CHARACTER_STRING_identification_fixed),
        ])
    _CHARACTER_STRING_identification._ext = None
    _CHARACTER_STRING_data_value_descriptor = OBJ_DESC(name='data-value-descriptor', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), opt=True)
    _CHARACTER_STRING_string_value = OCT_STR(name='string-value', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    CHARACTER_STRING._cont = ASN1Dict([
        ('identification', _CHARACTER_STRING_identification),
        ('data-value-descriptor', _CHARACTER_STRING_data_value_descriptor),
        ('string-value', _CHARACTER_STRING_string_value),
        ])
    CHARACTER_STRING._ext = None
    
    #-----< TYPE-IDENTIFIER >-----#
    TYPE_IDENTIFIER = CLASS(name='TYPE-IDENTIFIER', mode=MODE_TYPE)
    _TYPE_IDENTIFIER_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    _TYPE_IDENTIFIER_Type = OPEN(name='Type', mode=MODE_TYPE)
    TYPE_IDENTIFIER._cont = ASN1Dict([
        ('id', _TYPE_IDENTIFIER_id),
        ('Type', _TYPE_IDENTIFIER_Type),
        ])
    
    #-----< ABSTRACT-SYNTAX >-----#
    ABSTRACT_SYNTAX = CLASS(name='ABSTRACT-SYNTAX', mode=MODE_TYPE)
    _ABSTRACT_SYNTAX_id = OID(name='id', mode=MODE_VALUE)
    _ABSTRACT_SYNTAX_Type = OPEN(name='Type', mode=MODE_TYPE)
    _ABSTRACT_SYNTAX_property = BIT_STR(name='property', mode=MODE_VALUE, default=(0, 0))
    _ABSTRACT_SYNTAX_property._cont = ASN1Dict([('handles-invalid-encodings', 0)])
    ABSTRACT_SYNTAX._cont = ASN1Dict([
        ('id', _ABSTRACT_SYNTAX_id),
        ('Type', _ABSTRACT_SYNTAX_Type),
        ('property', _ABSTRACT_SYNTAX_property),
        ])
    
    _all_ = [
        _REAL_mantissa,
        _REAL_base,
        _REAL_exponent,
        REAL,
        ___EXTERNAL_identification_syntaxes_abstract,
        ___EXTERNAL_identification_syntaxes_transfer,
        __EXTERNAL_identification_syntaxes,
        __EXTERNAL_identification_syntax,
        __EXTERNAL_identification_presentation_context_id,
        ___EXTERNAL_identification_context_negotiation_presentation_context_id,
        ___EXTERNAL_identification_context_negotiation_transfer_syntax,
        __EXTERNAL_identification_context_negotiation,
        __EXTERNAL_identification_transfer_syntax,
        __EXTERNAL_identification_fixed,
        _EXTERNAL_identification,
        _EXTERNAL_data_value_descriptor,
        _EXTERNAL_data_value,
        EXTERNAL,
        ___EMBEDDED_PDV_identification_syntaxes_abstract,
        ___EMBEDDED_PDV_identification_syntaxes_transfer,
        __EMBEDDED_PDV_identification_syntaxes,
        __EMBEDDED_PDV_identification_syntax,
        __EMBEDDED_PDV_identification_presentation_context_id,
        ___EMBEDDED_PDV_identification_context_negotiation_presentation_context_id,
        ___EMBEDDED_PDV_identification_context_negotiation_transfer_syntax,
        __EMBEDDED_PDV_identification_context_negotiation,
        __EMBEDDED_PDV_identification_transfer_syntax,
        __EMBEDDED_PDV_identification_fixed,
        _EMBEDDED_PDV_identification,
        _EMBEDDED_PDV_data_value_descriptor,
        _EMBEDDED_PDV_data_value,
        EMBEDDED_PDV,
        ___CHARACTER_STRING_identification_syntaxes_abstract,
        ___CHARACTER_STRING_identification_syntaxes_transfer,
        __CHARACTER_STRING_identification_syntaxes,
        __CHARACTER_STRING_identification_syntax,
        __CHARACTER_STRING_identification_presentation_context_id,
        ___CHARACTER_STRING_identification_context_negotiation_presentation_context_id,
        ___CHARACTER_STRING_identification_context_negotiation_transfer_syntax,
        __CHARACTER_STRING_identification_context_negotiation,
        __CHARACTER_STRING_identification_transfer_syntax,
        __CHARACTER_STRING_identification_fixed,
        _CHARACTER_STRING_identification,
        _CHARACTER_STRING_data_value_descriptor,
        _CHARACTER_STRING_string_value,
        CHARACTER_STRING,
        _TYPE_IDENTIFIER_id,
        _TYPE_IDENTIFIER_Type,
        TYPE_IDENTIFIER,
        _ABSTRACT_SYNTAX_id,
        _ABSTRACT_SYNTAX_Type,
        _ABSTRACT_SYNTAX_property,
        ABSTRACT_SYNTAX,
    ]

init_modules(AttributeCertificateVersion1_2009, PKIX_CommonTypes_2009, PKIX_X400Address_2009, PKIXAlgs_2009, PKIXAttributeCertificate_2009, PKIXCRMF_2009, PKIX1Implicit_2009, PKIX1Explicit_2009, PKIX1_PSS_OAEP_Algorithms_2009, EnrollmentMessageSyntax_2009, AlgorithmInformation_2009, CMS_AES_CCM_and_AES_GCM_2009, CMSAesRsaesOaep_2009, CMS_AuthEnvelopedData_2009, CMSFirmwareWrapper_2009, CryptographicMessageSyntax_2009, CryptographicMessageSyntaxAlgorithms_2009, ERS, ExtendedSecurityServices_2009, SecureMimeMessageV3dot1_2009, SMIMESymmetricKeyDistribution_2009, _IMPL_)
