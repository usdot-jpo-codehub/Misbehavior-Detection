# -*- coding: UTF-8 -*-
# Code automatically generated by pycrate_asn1c

from pycrate_asn1rt.utils            import *
from pycrate_asn1rt.err              import *
from pycrate_asn1rt.glob             import make_GLOBAL, GLOBAL
from pycrate_asn1rt.dictobj          import ASN1Dict
from pycrate_asn1rt.refobj           import *
from pycrate_asn1rt.setobj           import *
from pycrate_asn1rt.asnobj_basic     import *
from pycrate_asn1rt.asnobj_str       import *
from pycrate_asn1rt.asnobj_construct import *
from pycrate_asn1rt.asnobj_class     import *
from pycrate_asn1rt.asnobj_ext       import *
from pycrate_asn1rt.init             import init_modules

class CALMfntp:

    _name_  = 'CALMfntp'
    _oid_   = [1, 0, 29281, 1, 1]
    
    _obj_ = [
        'FNTPNPDU',
        'FNTPHeader',
        'FntpOptions',
        'FNTPintForwarding',
        'FNTPpacketCounter',
        'FNTPsecurity',
        'FNTPhopCount',
        'FNTPCIPheader',
        'RXcip',
        'TXcip',
        'DeleteFNTP',
        'DeleteNotFNTP',
        'SetFNTP',
        'SetConfFNTP',
        'HostServiceInfo',
        'SetNotFNTP',
        'UpdateFNTP',
        'UpdateNotFNTP',
        'NFSAP',
        'NFsapPrimitivesDown',
        'NFsapspsdown',
        'fntpPortRequest',
        'fntpCommRequest',
        'NFsapPrimitivesUp',
        'NFsapspsup',
        'fntpPortConfirm',
        'fntpCommConfirm',
        'fntpCommIndication',
        'PortOp',
        'NFfntpPortRequest',
        'NFfntpPortConfirm',
        'NFfntpCommRequest',
        'NFfntpCommConfirm',
        'FNTPerrorStatus',
        'NFfntpCommIndication',
        'PortNumber',
        'ITSfpdu',
        'NTtimeout',
        'noFNTPfwtEntries',
        ]
    _type_ = [
        'FNTPNPDU',
        'FNTPHeader',
        'FntpOptions',
        'FNTPintForwarding',
        'FNTPpacketCounter',
        'FNTPsecurity',
        'FNTPhopCount',
        'FNTPCIPheader',
        'RXcip',
        'TXcip',
        'DeleteFNTP',
        'DeleteNotFNTP',
        'SetFNTP',
        'SetConfFNTP',
        'HostServiceInfo',
        'SetNotFNTP',
        'UpdateFNTP',
        'UpdateNotFNTP',
        'NFSAP',
        'NFsapPrimitivesDown',
        'NFsapPrimitivesUp',
        'PortOp',
        'NFfntpPortRequest',
        'NFfntpPortConfirm',
        'NFfntpCommRequest',
        'NFfntpCommConfirm',
        'FNTPerrorStatus',
        'NFfntpCommIndication',
        'PortNumber',
        'ITSfpdu',
        'NTtimeout',
        ]
    _set_ = [
        'NFsapspsdown',
        'NFsapspsup',
        ]
    _val_ = [
        'fntpPortRequest',
        'fntpCommRequest',
        'fntpPortConfirm',
        'fntpCommConfirm',
        'fntpCommIndication',
        'noFNTPfwtEntries',
        ]
    _class_ = [
        'NFSAP',
        'NFsapspsdown',
        'fntpPortRequest',
        'fntpCommRequest',
        'NFsapspsup',
        'fntpPortConfirm',
        'fntpCommConfirm',
        'fntpCommIndication',
        ]
    _param_ = [
        ]
    
    #-----< FNTPNPDU >-----#
    FNTPNPDU = SEQ(name='FNTPNPDU', mode=MODE_TYPE)
    _FNTPNPDU_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'FNTPHeader')))
    _FNTPNPDU_body = OCT_STR(name='body', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'ITSfpdu')))
    FNTPNPDU._cont = ASN1Dict([
        ('header', _FNTPNPDU_header),
        ('body', _FNTPNPDU_body),
        ])
    FNTPNPDU._ext = None
    
    #-----< FNTPHeader >-----#
    FNTPHeader = SEQ(name='FNTPHeader', mode=MODE_TYPE)
    _FNTPHeader_sourcePort = CHOICE(name='sourcePort', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    _FNTPHeader_destinationPort = CHOICE(name='destinationPort', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    _FNTPHeader_options = SEQ(name='options', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'FntpOptions')))
    FNTPHeader._cont = ASN1Dict([
        ('sourcePort', _FNTPHeader_sourcePort),
        ('destinationPort', _FNTPHeader_destinationPort),
        ('options', _FNTPHeader_options),
        ])
    FNTPHeader._ext = None
    
    #-----< FntpOptions >-----#
    FntpOptions = SEQ(name='FntpOptions', mode=MODE_TYPE)
    _FntpOptions_intForw = SEQ(name='intForw', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'FNTPintForwarding')), opt=True)
    _FntpOptions_sec = OCT_STR(name='sec', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'FNTPsecurity')), opt=True)
    _FntpOptions_hops = INT(name='hops', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'FNTPhopCount')), opt=True)
    _FntpOptions_lpp = OCT_STR(name='lpp', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMlegacySupport', 'FNTPlpp')), opt=True)
    _FntpOptions_cip = SEQ(name='cip', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'FNTPCIPheader')), opt=True)
    _FntpOptions_opt5 = NULL(name='opt5', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _FntpOptions_opt6 = NULL(name='opt6', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _FntpOptions_opt7 = NULL(name='opt7', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    FntpOptions._cont = ASN1Dict([
        ('intForw', _FntpOptions_intForw),
        ('sec', _FntpOptions_sec),
        ('hops', _FntpOptions_hops),
        ('lpp', _FntpOptions_lpp),
        ('cip', _FntpOptions_cip),
        ('opt5', _FntpOptions_opt5),
        ('opt6', _FntpOptions_opt6),
        ('opt7', _FntpOptions_opt7),
        ])
    FntpOptions._ext = None
    
    #-----< FNTPintForwarding >-----#
    FNTPintForwarding = SEQ(name='FNTPintForwarding', mode=MODE_TYPE)
    _FNTPintForwarding_hostITS_scuId = INT(name='hostITS-scuId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ITS-scuId')))
    _FNTPintForwarding_link = SEQ(name='link', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _FNTPintForwarding_counter = INT(name='counter', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'FNTPpacketCounter')))
    _FNTPintForwarding_sourcePort = CHOICE(name='sourcePort', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    _FNTPintForwarding_destinationPort = CHOICE(name='destinationPort', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    FNTPintForwarding._cont = ASN1Dict([
        ('hostITS-scuId', _FNTPintForwarding_hostITS_scuId),
        ('link', _FNTPintForwarding_link),
        ('counter', _FNTPintForwarding_counter),
        ('sourcePort', _FNTPintForwarding_sourcePort),
        ('destinationPort', _FNTPintForwarding_destinationPort),
        ])
    FNTPintForwarding._ext = None
    
    #-----< FNTPpacketCounter >-----#
    FNTPpacketCounter = INT(name='FNTPpacketCounter', mode=MODE_TYPE)
    FNTPpacketCounter._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< FNTPsecurity >-----#
    FNTPsecurity = OCT_STR(name='FNTPsecurity', mode=MODE_TYPE)
    FNTPsecurity._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< FNTPhopCount >-----#
    FNTPhopCount = INT(name='FNTPhopCount', mode=MODE_TYPE)
    FNTPhopCount._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< FNTPCIPheader >-----#
    FNTPCIPheader = SEQ(name='FNTPCIPheader', mode=MODE_TYPE)
    _FNTPCIPheader_rxCIP = OCT_STR(name='rxCIP', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'RXcip')))
    _FNTPCIPheader_txCIP = OCT_STR(name='txCIP', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'TXcip')))
    FNTPCIPheader._cont = ASN1Dict([
        ('rxCIP', _FNTPCIPheader_rxCIP),
        ('txCIP', _FNTPCIPheader_txCIP),
        ])
    FNTPCIPheader._ext = None
    
    #-----< RXcip >-----#
    RXcip = OCT_STR(name='RXcip', mode=MODE_TYPE)
    RXcip._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< TXcip >-----#
    TXcip = OCT_STR(name='TXcip', mode=MODE_TYPE)
    TXcip._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< DeleteFNTP >-----#
    DeleteFNTP = SEQ(name='DeleteFNTP', mode=MODE_TYPE)
    _DeleteFNTP_reference = INT(name='reference', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DeleteFNTP_reference._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    DeleteFNTP._cont = ASN1Dict([
        ('reference', _DeleteFNTP_reference),
        ])
    DeleteFNTP._ext = None
    
    #-----< DeleteNotFNTP >-----#
    DeleteNotFNTP = SEQ(name='DeleteNotFNTP', mode=MODE_TYPE)
    _DeleteNotFNTP_reference = INT(name='reference', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DeleteNotFNTP_reference._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    DeleteNotFNTP._cont = ASN1Dict([
        ('reference', _DeleteNotFNTP_reference),
        ])
    DeleteNotFNTP._ext = None
    
    #-----< SetFNTP >-----#
    SetFNTP = SEQ(name='SetFNTP', mode=MODE_TYPE)
    _SetFNTP_remotePort = CHOICE(name='remotePort', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    _SetFNTP_linkID = SEQ(name='linkID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _SetFNTP_ciStatus = INT(name='ciStatus', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'CIstatus')))
    _SetFNTP_linkPort = CHOICE(name='linkPort', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    _SetFNTP_serviceInfo = SEQ(name='serviceInfo', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'HostServiceInfo')))
    _SetFNTP_priority = INT(name='priority', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _SetFNTP_timeout = INT(name='timeout', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'NTtimeout')))
    SetFNTP._cont = ASN1Dict([
        ('remotePort', _SetFNTP_remotePort),
        ('linkID', _SetFNTP_linkID),
        ('ciStatus', _SetFNTP_ciStatus),
        ('linkPort', _SetFNTP_linkPort),
        ('serviceInfo', _SetFNTP_serviceInfo),
        ('priority', _SetFNTP_priority),
        ('timeout', _SetFNTP_timeout),
        ])
    SetFNTP._ext = None
    
    #-----< SetConfFNTP >-----#
    SetConfFNTP = SEQ(name='SetConfFNTP', mode=MODE_TYPE)
    _SetConfFNTP_reference = INT(name='reference', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SetConfFNTP_reference._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    SetConfFNTP._cont = ASN1Dict([
        ('reference', _SetConfFNTP_reference),
        ])
    SetConfFNTP._ext = None
    
    #-----< HostServiceInfo >-----#
    HostServiceInfo = SEQ(name='HostServiceInfo', mode=MODE_TYPE)
    _HostServiceInfo_servicePort = CHOICE(name='servicePort', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    _HostServiceInfo_hostITSscu = INT(name='hostITSscu', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ITS-scuId')))
    _HostServiceInfo_servicePriority = INT(name='servicePriority', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    HostServiceInfo._cont = ASN1Dict([
        ('servicePort', _HostServiceInfo_servicePort),
        ('hostITSscu', _HostServiceInfo_hostITSscu),
        ('servicePriority', _HostServiceInfo_servicePriority),
        ])
    HostServiceInfo._ext = None
    
    #-----< SetNotFNTP >-----#
    SetNotFNTP = SEQ(name='SetNotFNTP', mode=MODE_TYPE)
    _SetNotFNTP_reference = INT(name='reference', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SetNotFNTP_reference._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _SetNotFNTP_remotePort = CHOICE(name='remotePort', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    _SetNotFNTP_linkID = SEQ(name='linkID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _SetNotFNTP_ciStatus = INT(name='ciStatus', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'CIstatus')))
    _SetNotFNTP_linkPort = CHOICE(name='linkPort', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    _SetNotFNTP_serviceInfo = SEQ(name='serviceInfo', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'HostServiceInfo')))
    _SetNotFNTP_priority = INT(name='priority', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _SetNotFNTP_timeout = INT(name='timeout', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'NTtimeout')))
    SetNotFNTP._cont = ASN1Dict([
        ('reference', _SetNotFNTP_reference),
        ('remotePort', _SetNotFNTP_remotePort),
        ('linkID', _SetNotFNTP_linkID),
        ('ciStatus', _SetNotFNTP_ciStatus),
        ('linkPort', _SetNotFNTP_linkPort),
        ('serviceInfo', _SetNotFNTP_serviceInfo),
        ('priority', _SetNotFNTP_priority),
        ('timeout', _SetNotFNTP_timeout),
        ])
    SetNotFNTP._ext = None
    
    #-----< UpdateFNTP >-----#
    UpdateFNTP = SEQ(name='UpdateFNTP', mode=MODE_TYPE)
    _UpdateFNTP_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _UpdateFNTP_fill._const_sz = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    _UpdateFNTP_reference = INT(name='reference', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _UpdateFNTP_reference._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _UpdateFNTP_remotePort = CHOICE(name='remotePort', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')), opt=True)
    _UpdateFNTP_linkID = SEQ(name='linkID', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')), opt=True)
    _UpdateFNTP_ciStatus = INT(name='ciStatus', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'CIstatus')), opt=True)
    _UpdateFNTP_linkPort = CHOICE(name='linkPort', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')), opt=True)
    _UpdateFNTP_serviceInfo = SEQ(name='serviceInfo', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'HostServiceInfo')), opt=True)
    _UpdateFNTP_priority = INT(name='priority', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')), opt=True)
    _UpdateFNTP_timeout = INT(name='timeout', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'NTtimeout')), opt=True)
    UpdateFNTP._cont = ASN1Dict([
        ('fill', _UpdateFNTP_fill),
        ('reference', _UpdateFNTP_reference),
        ('remotePort', _UpdateFNTP_remotePort),
        ('linkID', _UpdateFNTP_linkID),
        ('ciStatus', _UpdateFNTP_ciStatus),
        ('linkPort', _UpdateFNTP_linkPort),
        ('serviceInfo', _UpdateFNTP_serviceInfo),
        ('priority', _UpdateFNTP_priority),
        ('timeout', _UpdateFNTP_timeout),
        ])
    UpdateFNTP._ext = None
    
    #-----< UpdateNotFNTP >-----#
    UpdateNotFNTP = SEQ(name='UpdateNotFNTP', mode=MODE_TYPE)
    _UpdateNotFNTP_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _UpdateNotFNTP_fill._const_sz = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    _UpdateNotFNTP_reference = INT(name='reference', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _UpdateNotFNTP_reference._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _UpdateNotFNTP_remotePort = CHOICE(name='remotePort', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')), opt=True)
    _UpdateNotFNTP_linkID = SEQ(name='linkID', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')), opt=True)
    _UpdateNotFNTP_ciStatus = INT(name='ciStatus', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'CIstatus')), opt=True)
    _UpdateNotFNTP_linkPort = CHOICE(name='linkPort', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')), opt=True)
    _UpdateNotFNTP_serviceInfo = SEQ(name='serviceInfo', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'HostServiceInfo')), opt=True)
    _UpdateNotFNTP_priority = INT(name='priority', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')), opt=True)
    _UpdateNotFNTP_timeout = INT(name='timeout', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'NTtimeout')), opt=True)
    UpdateNotFNTP._cont = ASN1Dict([
        ('fill', _UpdateNotFNTP_fill),
        ('reference', _UpdateNotFNTP_reference),
        ('remotePort', _UpdateNotFNTP_remotePort),
        ('linkID', _UpdateNotFNTP_linkID),
        ('ciStatus', _UpdateNotFNTP_ciStatus),
        ('linkPort', _UpdateNotFNTP_linkPort),
        ('serviceInfo', _UpdateNotFNTP_serviceInfo),
        ('priority', _UpdateNotFNTP_priority),
        ('timeout', _UpdateNotFNTP_timeout),
        ])
    UpdateNotFNTP._ext = None
    
    #-----< NFSAP >-----#
    NFSAP = CLASS(name='NFSAP', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'COMMUPDOWN')))
    
    #-----< NFsapPrimitivesDown >-----#
    NFsapPrimitivesDown = SEQ(name='NFsapPrimitivesDown', mode=MODE_TYPE)
    _NFsapPrimitivesDown_spRef = INT(name='spRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMfntp', 'NFSAP'), ['primitiveRef']))
    __NFsapPrimitivesDown_spRef_tab = CLASS(name='_tab_NFSAP', mode=MODE_SET, typeref=ASN1RefType(('CALMfntp', 'NFSAP')))
    ___NFsapPrimitivesDown_spRef_tab_val_Primitive_0 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'NFfntpPortRequest')))
    ___NFsapPrimitivesDown_spRef_tab_val_Primitive_1 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'NFfntpCommRequest')))
    __NFsapPrimitivesDown_spRef_tab._val = ASN1Set(rv=[dict([('primitiveRef', 0), ('Primitive', ___NFsapPrimitivesDown_spRef_tab_val_Primitive_0)]), dict([('primitiveRef', 1), ('Primitive', ___NFsapPrimitivesDown_spRef_tab_val_Primitive_1)])], rr=[], ev=None, er=[])
    _NFsapPrimitivesDown_spRef._const_tab = __NFsapPrimitivesDown_spRef_tab
    _NFsapPrimitivesDown_spRef._const_tab_at = None
    _NFsapPrimitivesDown_spRef._const_tab_id = 'primitiveRef'
    _NFsapPrimitivesDown_servPrimitive = OPEN(name='servPrimitive', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMfntp', 'NFSAP'), ['Primitive']))
    _NFsapPrimitivesDown_servPrimitive._const_tab = __NFsapPrimitivesDown_spRef_tab
    _NFsapPrimitivesDown_servPrimitive._const_tab_at = ('..', 'spRef')
    _NFsapPrimitivesDown_servPrimitive._const_tab_id = 'Primitive'
    NFsapPrimitivesDown._cont = ASN1Dict([
        ('spRef', _NFsapPrimitivesDown_spRef),
        ('servPrimitive', _NFsapPrimitivesDown_servPrimitive),
        ])
    NFsapPrimitivesDown._ext = None
    
    #-----< NFsapspsdown >-----#
    NFsapspsdown = CLASS(name='NFsapspsdown', mode=MODE_SET, typeref=ASN1RefType(('CALMfntp', 'NFSAP')))
    _NFsapspsdown_val_Primitive_0 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'NFfntpPortRequest')))
    _NFsapspsdown_val_Primitive_1 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'NFfntpCommRequest')))
    NFsapspsdown._val = ASN1Set(rv=[dict([('primitiveRef', 0), ('Primitive', _NFsapspsdown_val_Primitive_0)]), dict([('primitiveRef', 1), ('Primitive', _NFsapspsdown_val_Primitive_1)])], rr=[], ev=[], er=[])
    
    #-----< fntpPortRequest >-----#
    fntpPortRequest = CLASS(name='fntpPortRequest', mode=MODE_VALUE, typeref=ASN1RefType(('CALMfntp', 'NFSAP')))
    _fntpPortRequest_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'NFfntpPortRequest')))
    fntpPortRequest._val = dict([('primitiveRef', 0), ('Primitive', _fntpPortRequest_val_Primitive)])
    
    #-----< fntpCommRequest >-----#
    fntpCommRequest = CLASS(name='fntpCommRequest', mode=MODE_VALUE, typeref=ASN1RefType(('CALMfntp', 'NFSAP')))
    _fntpCommRequest_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'NFfntpCommRequest')))
    fntpCommRequest._val = dict([('primitiveRef', 1), ('Primitive', _fntpCommRequest_val_Primitive)])
    
    #-----< NFsapPrimitivesUp >-----#
    NFsapPrimitivesUp = SEQ(name='NFsapPrimitivesUp', mode=MODE_TYPE)
    _NFsapPrimitivesUp_spRef = INT(name='spRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMfntp', 'NFSAP'), ['primitiveRef']))
    __NFsapPrimitivesUp_spRef_tab = CLASS(name='_tab_NFSAP', mode=MODE_SET, typeref=ASN1RefType(('CALMfntp', 'NFSAP')))
    ___NFsapPrimitivesUp_spRef_tab_val_Primitive_0 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'NFfntpPortConfirm')))
    ___NFsapPrimitivesUp_spRef_tab_val_Primitive_1 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'NFfntpCommConfirm')))
    ___NFsapPrimitivesUp_spRef_tab_val_Primitive_2 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'NFfntpCommIndication')))
    __NFsapPrimitivesUp_spRef_tab._val = ASN1Set(rv=[dict([('primitiveRef', 0), ('Primitive', ___NFsapPrimitivesUp_spRef_tab_val_Primitive_0)]), dict([('primitiveRef', 1), ('Primitive', ___NFsapPrimitivesUp_spRef_tab_val_Primitive_1)]), dict([('primitiveRef', 2), ('Primitive', ___NFsapPrimitivesUp_spRef_tab_val_Primitive_2)])], rr=[], ev=None, er=[])
    _NFsapPrimitivesUp_spRef._const_tab = __NFsapPrimitivesUp_spRef_tab
    _NFsapPrimitivesUp_spRef._const_tab_at = None
    _NFsapPrimitivesUp_spRef._const_tab_id = 'primitiveRef'
    _NFsapPrimitivesUp_servPrimitive = OPEN(name='servPrimitive', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMfntp', 'NFSAP'), ['Primitive']))
    _NFsapPrimitivesUp_servPrimitive._const_tab = __NFsapPrimitivesUp_spRef_tab
    _NFsapPrimitivesUp_servPrimitive._const_tab_at = ('..', 'spRef')
    _NFsapPrimitivesUp_servPrimitive._const_tab_id = 'Primitive'
    NFsapPrimitivesUp._cont = ASN1Dict([
        ('spRef', _NFsapPrimitivesUp_spRef),
        ('servPrimitive', _NFsapPrimitivesUp_servPrimitive),
        ])
    NFsapPrimitivesUp._ext = None
    
    #-----< NFsapspsup >-----#
    NFsapspsup = CLASS(name='NFsapspsup', mode=MODE_SET, typeref=ASN1RefType(('CALMfntp', 'NFSAP')))
    _NFsapspsup_val_Primitive_0 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'NFfntpPortConfirm')))
    _NFsapspsup_val_Primitive_1 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'NFfntpCommConfirm')))
    _NFsapspsup_val_Primitive_2 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'NFfntpCommIndication')))
    NFsapspsup._val = ASN1Set(rv=[dict([('primitiveRef', 0), ('Primitive', _NFsapspsup_val_Primitive_0)]), dict([('primitiveRef', 1), ('Primitive', _NFsapspsup_val_Primitive_1)]), dict([('primitiveRef', 2), ('Primitive', _NFsapspsup_val_Primitive_2)])], rr=[], ev=[], er=[])
    
    #-----< fntpPortConfirm >-----#
    fntpPortConfirm = CLASS(name='fntpPortConfirm', mode=MODE_VALUE, typeref=ASN1RefType(('CALMfntp', 'NFSAP')))
    _fntpPortConfirm_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'NFfntpPortConfirm')))
    fntpPortConfirm._val = dict([('primitiveRef', 0), ('Primitive', _fntpPortConfirm_val_Primitive)])
    
    #-----< fntpCommConfirm >-----#
    fntpCommConfirm = CLASS(name='fntpCommConfirm', mode=MODE_VALUE, typeref=ASN1RefType(('CALMfntp', 'NFSAP')))
    _fntpCommConfirm_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'NFfntpCommConfirm')))
    fntpCommConfirm._val = dict([('primitiveRef', 1), ('Primitive', _fntpCommConfirm_val_Primitive)])
    
    #-----< fntpCommIndication >-----#
    fntpCommIndication = CLASS(name='fntpCommIndication', mode=MODE_VALUE, typeref=ASN1RefType(('CALMfntp', 'NFSAP')))
    _fntpCommIndication_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'NFfntpCommIndication')))
    fntpCommIndication._val = dict([('primitiveRef', 2), ('Primitive', _fntpCommIndication_val_Primitive)])
    
    #-----< PortOp >-----#
    PortOp = INT(name='PortOp', mode=MODE_TYPE)
    PortOp._cont = ASN1Dict([('delete', 0), ('create', 255)])
    PortOp._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< NFfntpPortRequest >-----#
    NFfntpPortRequest = SEQ(name='NFfntpPortRequest', mode=MODE_TYPE)
    _NFfntpPortRequest_serviceRef = SEQ(name='serviceRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'ServiceRef')))
    _NFfntpPortRequest_operation = INT(name='operation', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortOp')))
    _NFfntpPortRequest_portno = CHOICE(name='portno', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    _NFfntpPortRequest_priority = INT(name='priority', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    NFfntpPortRequest._cont = ASN1Dict([
        ('serviceRef', _NFfntpPortRequest_serviceRef),
        ('operation', _NFfntpPortRequest_operation),
        ('portno', _NFfntpPortRequest_portno),
        ('priority', _NFfntpPortRequest_priority),
        ])
    NFfntpPortRequest._ext = None
    
    #-----< NFfntpPortConfirm >-----#
    NFfntpPortConfirm = SEQ(name='NFfntpPortConfirm', mode=MODE_TYPE)
    _NFfntpPortConfirm_serviceRef = SEQ(name='serviceRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'ServiceRef')))
    _NFfntpPortConfirm_servicePort = CHOICE(name='servicePort', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    NFfntpPortConfirm._cont = ASN1Dict([
        ('serviceRef', _NFfntpPortConfirm_serviceRef),
        ('servicePort', _NFfntpPortConfirm_servicePort),
        ])
    NFfntpPortConfirm._ext = None
    
    #-----< NFfntpCommRequest >-----#
    NFfntpCommRequest = SEQ(name='NFfntpCommRequest', mode=MODE_TYPE)
    _NFfntpCommRequest_commRef = INT(name='commRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _NFfntpCommRequest_commRef._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _NFfntpCommRequest_servicePort = CHOICE(name='servicePort', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    _NFfntpCommRequest_remotePort = CHOICE(name='remotePort', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    _NFfntpCommRequest_linkID = SEQ(name='linkID', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _NFfntpCommRequest_data = OCT_STR(name='data', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'ITSfpdu')))
    _NFfntpCommRequest_priority = INT(name='priority', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _NFfntpCommRequest_controlField = SEQ(name='controlField', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'FntpOptions')))
    NFfntpCommRequest._cont = ASN1Dict([
        ('commRef', _NFfntpCommRequest_commRef),
        ('servicePort', _NFfntpCommRequest_servicePort),
        ('remotePort', _NFfntpCommRequest_remotePort),
        ('linkID', _NFfntpCommRequest_linkID),
        ('data', _NFfntpCommRequest_data),
        ('priority', _NFfntpCommRequest_priority),
        ('controlField', _NFfntpCommRequest_controlField),
        ])
    NFfntpCommRequest._ext = None
    
    #-----< NFfntpCommConfirm >-----#
    NFfntpCommConfirm = SEQ(name='NFfntpCommConfirm', mode=MODE_TYPE)
    _NFfntpCommConfirm_commRef = INT(name='commRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _NFfntpCommConfirm_commRef._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _NFfntpCommConfirm_servicePort = CHOICE(name='servicePort', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    _NFfntpCommConfirm_errStatus = INT(name='errStatus', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'FNTPerrorStatus')))
    NFfntpCommConfirm._cont = ASN1Dict([
        ('commRef', _NFfntpCommConfirm_commRef),
        ('servicePort', _NFfntpCommConfirm_servicePort),
        ('errStatus', _NFfntpCommConfirm_errStatus),
        ])
    NFfntpCommConfirm._ext = None
    
    #-----< FNTPerrorStatus >-----#
    FNTPerrorStatus = INT(name='FNTPerrorStatus', mode=MODE_TYPE)
    FNTPerrorStatus._cont = ASN1Dict([('success', 0), ('unspecFailure', 1), ('ciBusyTX', 2), ('noForwardInfo', 254), ('ciSuspend', 255)])
    FNTPerrorStatus._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< NFfntpCommIndication >-----#
    NFfntpCommIndication = SEQ(name='NFfntpCommIndication', mode=MODE_TYPE)
    _NFfntpCommIndication_servicePort = CHOICE(name='servicePort', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    _NFfntpCommIndication_remotePort = CHOICE(name='remotePort', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    _NFfntpCommIndication_linkID = SEQ(name='linkID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _NFfntpCommIndication_data = OCT_STR(name='data', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'ITSfpdu')))
    _NFfntpCommIndication_priority = INT(name='priority', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _NFfntpCommIndication_controlField = SEQ(name='controlField', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'FntpOptions')))
    NFfntpCommIndication._cont = ASN1Dict([
        ('servicePort', _NFfntpCommIndication_servicePort),
        ('remotePort', _NFfntpCommIndication_remotePort),
        ('linkID', _NFfntpCommIndication_linkID),
        ('data', _NFfntpCommIndication_data),
        ('priority', _NFfntpCommIndication_priority),
        ('controlField', _NFfntpCommIndication_controlField),
        ])
    NFfntpCommIndication._ext = None
    
    #-----< PortNumber >-----#
    PortNumber = CHOICE(name='PortNumber', mode=MODE_TYPE)
    _PortNumber_portShort = INT(name='portShort', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PortNumber_portShort._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=None, er=[])
    _PortNumber_portLong = INT(name='portLong', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PortNumber_portLong._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=32767)], ev=None, er=[])
    PortNumber._cont = ASN1Dict([
        ('portShort', _PortNumber_portShort),
        ('portLong', _PortNumber_portLong),
        ])
    PortNumber._ext = None
    
    #-----< ITSfpdu >-----#
    ITSfpdu = OCT_STR(name='ITSfpdu', mode=MODE_TYPE)
    ITSfpdu._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< NTtimeout >-----#
    NTtimeout = INT(name='NTtimeout', mode=MODE_TYPE)
    NTtimeout._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< noFNTPfwtEntries >-----#
    noFNTPfwtEntries = INT(name='noFNTPfwtEntries', mode=MODE_VALUE)
    noFNTPfwtEntries._val = 65535
    
    _all_ = [
        _FNTPNPDU_header,
        _FNTPNPDU_body,
        FNTPNPDU,
        _FNTPHeader_sourcePort,
        _FNTPHeader_destinationPort,
        _FNTPHeader_options,
        FNTPHeader,
        _FntpOptions_intForw,
        _FntpOptions_sec,
        _FntpOptions_hops,
        _FntpOptions_lpp,
        _FntpOptions_cip,
        _FntpOptions_opt5,
        _FntpOptions_opt6,
        _FntpOptions_opt7,
        FntpOptions,
        _FNTPintForwarding_hostITS_scuId,
        _FNTPintForwarding_link,
        _FNTPintForwarding_counter,
        _FNTPintForwarding_sourcePort,
        _FNTPintForwarding_destinationPort,
        FNTPintForwarding,
        FNTPpacketCounter,
        FNTPsecurity,
        FNTPhopCount,
        _FNTPCIPheader_rxCIP,
        _FNTPCIPheader_txCIP,
        FNTPCIPheader,
        RXcip,
        TXcip,
        _DeleteFNTP_reference,
        DeleteFNTP,
        _DeleteNotFNTP_reference,
        DeleteNotFNTP,
        _SetFNTP_remotePort,
        _SetFNTP_linkID,
        _SetFNTP_ciStatus,
        _SetFNTP_linkPort,
        _SetFNTP_serviceInfo,
        _SetFNTP_priority,
        _SetFNTP_timeout,
        SetFNTP,
        _SetConfFNTP_reference,
        SetConfFNTP,
        _HostServiceInfo_servicePort,
        _HostServiceInfo_hostITSscu,
        _HostServiceInfo_servicePriority,
        HostServiceInfo,
        _SetNotFNTP_reference,
        _SetNotFNTP_remotePort,
        _SetNotFNTP_linkID,
        _SetNotFNTP_ciStatus,
        _SetNotFNTP_linkPort,
        _SetNotFNTP_serviceInfo,
        _SetNotFNTP_priority,
        _SetNotFNTP_timeout,
        SetNotFNTP,
        _UpdateFNTP_fill,
        _UpdateFNTP_reference,
        _UpdateFNTP_remotePort,
        _UpdateFNTP_linkID,
        _UpdateFNTP_ciStatus,
        _UpdateFNTP_linkPort,
        _UpdateFNTP_serviceInfo,
        _UpdateFNTP_priority,
        _UpdateFNTP_timeout,
        UpdateFNTP,
        _UpdateNotFNTP_fill,
        _UpdateNotFNTP_reference,
        _UpdateNotFNTP_remotePort,
        _UpdateNotFNTP_linkID,
        _UpdateNotFNTP_ciStatus,
        _UpdateNotFNTP_linkPort,
        _UpdateNotFNTP_serviceInfo,
        _UpdateNotFNTP_priority,
        _UpdateNotFNTP_timeout,
        UpdateNotFNTP,
        NFSAP,
        __NFsapPrimitivesDown_spRef_tab,
        ___NFsapPrimitivesDown_spRef_tab_val_Primitive_0,
        ___NFsapPrimitivesDown_spRef_tab_val_Primitive_1,
        _NFsapPrimitivesDown_spRef,
        _NFsapPrimitivesDown_servPrimitive,
        NFsapPrimitivesDown,
        NFsapspsdown,
        _NFsapspsdown_val_Primitive_0,
        _NFsapspsdown_val_Primitive_1,
        fntpPortRequest,
        _fntpPortRequest_val_Primitive,
        fntpCommRequest,
        _fntpCommRequest_val_Primitive,
        __NFsapPrimitivesUp_spRef_tab,
        ___NFsapPrimitivesUp_spRef_tab_val_Primitive_0,
        ___NFsapPrimitivesUp_spRef_tab_val_Primitive_1,
        ___NFsapPrimitivesUp_spRef_tab_val_Primitive_2,
        _NFsapPrimitivesUp_spRef,
        _NFsapPrimitivesUp_servPrimitive,
        NFsapPrimitivesUp,
        NFsapspsup,
        _NFsapspsup_val_Primitive_0,
        _NFsapspsup_val_Primitive_1,
        _NFsapspsup_val_Primitive_2,
        fntpPortConfirm,
        _fntpPortConfirm_val_Primitive,
        fntpCommConfirm,
        _fntpCommConfirm_val_Primitive,
        fntpCommIndication,
        _fntpCommIndication_val_Primitive,
        PortOp,
        _NFfntpPortRequest_serviceRef,
        _NFfntpPortRequest_operation,
        _NFfntpPortRequest_portno,
        _NFfntpPortRequest_priority,
        NFfntpPortRequest,
        _NFfntpPortConfirm_serviceRef,
        _NFfntpPortConfirm_servicePort,
        NFfntpPortConfirm,
        _NFfntpCommRequest_commRef,
        _NFfntpCommRequest_servicePort,
        _NFfntpCommRequest_remotePort,
        _NFfntpCommRequest_linkID,
        _NFfntpCommRequest_data,
        _NFfntpCommRequest_priority,
        _NFfntpCommRequest_controlField,
        NFfntpCommRequest,
        _NFfntpCommConfirm_commRef,
        _NFfntpCommConfirm_servicePort,
        _NFfntpCommConfirm_errStatus,
        NFfntpCommConfirm,
        FNTPerrorStatus,
        _NFfntpCommIndication_servicePort,
        _NFfntpCommIndication_remotePort,
        _NFfntpCommIndication_linkID,
        _NFfntpCommIndication_data,
        _NFfntpCommIndication_priority,
        _NFfntpCommIndication_controlField,
        NFfntpCommIndication,
        _PortNumber_portShort,
        _PortNumber_portLong,
        PortNumber,
        ITSfpdu,
        NTtimeout,
        noFNTPfwtEntries,
    ]

class CALMfsap:

    _name_  = 'CALMfsap'
    _oid_   = [1, 0, 24102, 5, 1]
    
    _obj_ = [
        'SAM',
        'FmtID',
        'VersionFSAP',
        'ServiceList',
        'ChannelList',
        'IpServList',
        'NonipService',
        'SessionChannel',
        'IpService',
        'CTX',
        'ServContextList',
        'IpContextList',
        'IpContext',
        'GCctxTxCmd',
        'GCperiodCmd',
        'GCsamctx',
        'GCsamctxConf',
        'GCdeleteCmd',
        'ServiceInfo',
        'NonipSAMctx',
        'IpSAMctx',
        'CTXrxNot',
        'SAMrxNot',
        'GCsam',
        'SAMserviceData',
        'NonipSAM',
        'IpSAM',
        'GCctx',
        'CTXserviceData',
        'NonipContext',
        'GCregServer',
        'GCupdateServer',
        'GCderegServer',
        'GCregClient',
        'GCupdateClient',
        'GCderegClient',
        'GCregServerConf',
        'GCupdateServerConf',
        'GCderegServerConf',
        'GCregClientConf',
        'GCupdateClientConf',
        'GCderegClientConf',
        'ServiceData',
        'ContextData',
        'IpServiceData',
        'IpContextData',
        'GCschedule',
        'GCsched',
        'ServiceDataReg',
        'NonipServiceReg',
        'IpServiceReg',
        'GcInterval',
        'IpInfo',
        'IpAddressInfo',
        'noNonipServices',
        'noChannels',
        'noIpServices',
        'noNonipContexts',
        'noIpContexts',
        'noServiceDataOctets',
        'noIpServiceDataOctets',
        'noContextDataOctets',
        'noIpContextDataOctets',
        'versionNoFSAP',
        ]
    _type_ = [
        'SAM',
        'FmtID',
        'VersionFSAP',
        'ServiceList',
        'ChannelList',
        'IpServList',
        'NonipService',
        'SessionChannel',
        'IpService',
        'CTX',
        'ServContextList',
        'IpContextList',
        'IpContext',
        'GCctxTxCmd',
        'GCperiodCmd',
        'GCsamctx',
        'GCsamctxConf',
        'GCdeleteCmd',
        'ServiceInfo',
        'NonipSAMctx',
        'IpSAMctx',
        'CTXrxNot',
        'SAMrxNot',
        'GCsam',
        'SAMserviceData',
        'NonipSAM',
        'IpSAM',
        'GCctx',
        'CTXserviceData',
        'NonipContext',
        'GCregServer',
        'GCupdateServer',
        'GCderegServer',
        'GCregClient',
        'GCupdateClient',
        'GCderegClient',
        'GCregServerConf',
        'GCupdateServerConf',
        'GCderegServerConf',
        'GCregClientConf',
        'GCupdateClientConf',
        'GCderegClientConf',
        'ServiceData',
        'ContextData',
        'IpServiceData',
        'IpContextData',
        'GCschedule',
        'GCsched',
        'ServiceDataReg',
        'NonipServiceReg',
        'IpServiceReg',
        'GcInterval',
        'IpInfo',
        'IpAddressInfo',
        ]
    _set_ = [
        ]
    _val_ = [
        'noNonipServices',
        'noChannels',
        'noIpServices',
        'noNonipContexts',
        'noIpContexts',
        'noServiceDataOctets',
        'noIpServiceDataOctets',
        'noContextDataOctets',
        'noIpContextDataOctets',
        'versionNoFSAP',
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< SAM >-----#
    SAM = SEQ(name='SAM', mode=MODE_TYPE)
    _SAM_fmtID = INT(name='fmtID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'FmtID')))
    _SAM_version = INT(name='version', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'VersionFSAP')))
    _SAM_serverID = OCT_STR(name='serverID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'StationID')))
    _SAM_serviceList = SEQ_OF(name='serviceList', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'ServiceList')))
    _SAM_channelList = SEQ_OF(name='channelList', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'ChannelList')))
    _SAM_ipServList = SEQ_OF(name='ipServList', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpServList')))
    SAM._cont = ASN1Dict([
        ('fmtID', _SAM_fmtID),
        ('version', _SAM_version),
        ('serverID', _SAM_serverID),
        ('serviceList', _SAM_serviceList),
        ('channelList', _SAM_channelList),
        ('ipServList', _SAM_ipServList),
        ])
    SAM._ext = None
    
    #-----< FmtID >-----#
    FmtID = INT(name='FmtID', mode=MODE_TYPE)
    FmtID._cont = ASN1Dict([('sam', 0), ('ctx', 1)])
    FmtID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< VersionFSAP >-----#
    VersionFSAP = INT(name='VersionFSAP', mode=MODE_TYPE)
    VersionFSAP._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< ServiceList >-----#
    ServiceList = SEQ_OF(name='ServiceList', mode=MODE_TYPE)
    _ServiceList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'NonipService')))
    ServiceList._cont = _ServiceList__item_
    ServiceList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< ChannelList >-----#
    ChannelList = SEQ_OF(name='ChannelList', mode=MODE_TYPE)
    _ChannelList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'SessionChannel')))
    ChannelList._cont = _ChannelList__item_
    ChannelList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< IpServList >-----#
    IpServList = SEQ_OF(name='IpServList', mode=MODE_TYPE)
    _IpServList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'IpService')))
    IpServList._cont = _IpServList__item_
    IpServList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< NonipService >-----#
    NonipService = SEQ(name='NonipService', mode=MODE_TYPE)
    _NonipService_serviceID = CHOICE(name='serviceID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSaid')))
    _NonipService_serviceData = OCT_STR(name='serviceData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'ServiceData')))
    _NonipService_serverPort = CHOICE(name='serverPort', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    _NonipService_sessionChannel = INT(name='sessionChannel', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _NonipService_sessionChannel._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    NonipService._cont = ASN1Dict([
        ('serviceID', _NonipService_serviceID),
        ('serviceData', _NonipService_serviceData),
        ('serverPort', _NonipService_serverPort),
        ('sessionChannel', _NonipService_sessionChannel),
        ])
    NonipService._ext = None
    
    #-----< SessionChannel >-----#
    SessionChannel = SEQ(name='SessionChannel', mode=MODE_TYPE)
    _SessionChannel_serviceChannel = INT(name='serviceChannel', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SessionChannel_serviceChannel._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _SessionChannel_medium = INT(name='medium', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'MedType')))
    _SessionChannel_schParams = OCT_STR(name='schParams', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    SessionChannel._cont = ASN1Dict([
        ('serviceChannel', _SessionChannel_serviceChannel),
        ('medium', _SessionChannel_medium),
        ('schParams', _SessionChannel_schParams),
        ])
    SessionChannel._ext = None
    
    #-----< IpService >-----#
    IpService = SEQ(name='IpService', mode=MODE_TYPE)
    _IpService_serviceID = CHOICE(name='serviceID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSaid')))
    _IpService_serviceData = OCT_STR(name='serviceData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpServiceData')))
    _IpService_ipInfo = SEQ(name='ipInfo', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpInfo')))
    _IpService_sessionChannel = INT(name='sessionChannel', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _IpService_sessionChannel._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    IpService._cont = ASN1Dict([
        ('serviceID', _IpService_serviceID),
        ('serviceData', _IpService_serviceData),
        ('ipInfo', _IpService_ipInfo),
        ('sessionChannel', _IpService_sessionChannel),
        ])
    IpService._ext = None
    
    #-----< CTX >-----#
    CTX = SEQ(name='CTX', mode=MODE_TYPE)
    _CTX_fmtID = INT(name='fmtID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'FmtID')))
    _CTX_version = INT(name='version', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'VersionFSAP')))
    _CTX_clientID = OCT_STR(name='clientID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'StationID')))
    _CTX_servContextList = SEQ_OF(name='servContextList', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'ServContextList')))
    _CTX_ipContextList = SEQ_OF(name='ipContextList', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpContextList')))
    CTX._cont = ASN1Dict([
        ('fmtID', _CTX_fmtID),
        ('version', _CTX_version),
        ('clientID', _CTX_clientID),
        ('servContextList', _CTX_servContextList),
        ('ipContextList', _CTX_ipContextList),
        ])
    CTX._ext = None
    
    #-----< ServContextList >-----#
    ServContextList = SEQ_OF(name='ServContextList', mode=MODE_TYPE)
    _ServContextList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'NonipContext')))
    ServContextList._cont = _ServContextList__item_
    ServContextList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< IpContextList >-----#
    IpContextList = SEQ_OF(name='IpContextList', mode=MODE_TYPE)
    _IpContextList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'IpContext')))
    IpContextList._cont = _IpContextList__item_
    IpContextList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< IpContext >-----#
    IpContext = SEQ(name='IpContext', mode=MODE_TYPE)
    _IpContext_serviceID = CHOICE(name='serviceID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSaid')))
    _IpContext_contextData = OCT_STR(name='contextData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpContextData')))
    _IpContext_ipInfo = SEQ(name='ipInfo', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpInfo')))
    IpContext._cont = ASN1Dict([
        ('serviceID', _IpContext_serviceID),
        ('contextData', _IpContext_contextData),
        ('ipInfo', _IpContext_ipInfo),
        ])
    IpContext._ext = None
    
    #-----< GCctxTxCmd >-----#
    GCctxTxCmd = SEQ(name='GCctxTxCmd', mode=MODE_TYPE)
    _GCctxTxCmd_link = SEQ(name='link', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _GCctxTxCmd_ctx = SEQ(name='ctx', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'CTX')))
    GCctxTxCmd._cont = ASN1Dict([
        ('link', _GCctxTxCmd_link),
        ('ctx', _GCctxTxCmd_ctx),
        ])
    GCctxTxCmd._ext = None
    
    #-----< GCperiodCmd >-----#
    GCperiodCmd = SEQ(name='GCperiodCmd', mode=MODE_TYPE)
    _GCperiodCmd_applicationID = SEQ(name='applicationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ApplicationID')))
    _GCperiodCmd_bcVCIs = SEQ_OF(name='bcVCIs', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GCperiodCmd_bcVCIs__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _GCperiodCmd_bcVCIs._cont = __GCperiodCmd_bcVCIs__item_
    _GCperiodCmd_bcVCIs._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    _GCperiodCmd_gcInterval = INT(name='gcInterval', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'GcInterval')))
    _GCperiodCmd_priority = INT(name='priority', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _GCperiodCmd_serviceDataReg = SEQ(name='serviceDataReg', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'ServiceDataReg')))
    GCperiodCmd._cont = ASN1Dict([
        ('applicationID', _GCperiodCmd_applicationID),
        ('bcVCIs', _GCperiodCmd_bcVCIs),
        ('gcInterval', _GCperiodCmd_gcInterval),
        ('priority', _GCperiodCmd_priority),
        ('serviceDataReg', _GCperiodCmd_serviceDataReg),
        ])
    GCperiodCmd._ext = None
    
    #-----< GCsamctx >-----#
    GCsamctx = SEQ(name='GCsamctx', mode=MODE_TYPE)
    _GCsamctx_applicationID = SEQ(name='applicationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ApplicationID')))
    _GCsamctx_serverID = OCT_STR(name='serverID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'StationID')))
    _GCsamctx_serviceInfo = SEQ(name='serviceInfo', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'ServiceInfo')))
    _GCsamctx_link = SEQ(name='link', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    GCsamctx._cont = ASN1Dict([
        ('applicationID', _GCsamctx_applicationID),
        ('serverID', _GCsamctx_serverID),
        ('serviceInfo', _GCsamctx_serviceInfo),
        ('link', _GCsamctx_link),
        ])
    GCsamctx._ext = None
    
    #-----< GCsamctxConf >-----#
    GCsamctxConf = SEQ(name='GCsamctxConf', mode=MODE_TYPE)
    _GCsamctxConf_applicationID = SEQ(name='applicationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ApplicationID')))
    _GCsamctxConf_link = SEQ(name='link', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _GCsamctxConf_port = CHOICE(name='port', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    GCsamctxConf._cont = ASN1Dict([
        ('applicationID', _GCsamctxConf_applicationID),
        ('link', _GCsamctxConf_link),
        ('port', _GCsamctxConf_port),
        ])
    GCsamctxConf._ext = None
    
    #-----< GCdeleteCmd >-----#
    GCdeleteCmd = SEQ(name='GCdeleteCmd', mode=MODE_TYPE)
    _GCdeleteCmd_applicationID = SEQ(name='applicationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ApplicationID')))
    GCdeleteCmd._cont = ASN1Dict([
        ('applicationID', _GCdeleteCmd_applicationID),
        ])
    GCdeleteCmd._ext = None
    
    #-----< ServiceInfo >-----#
    ServiceInfo = SEQ(name='ServiceInfo', mode=MODE_TYPE)
    _ServiceInfo_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ServiceInfo_fill._const_sz = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    _ServiceInfo_info = CHOICE(name='info', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __ServiceInfo_info_nonipService = SEQ(name='nonipService', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'NonipSAMctx')))
    __ServiceInfo_info_ipService = SEQ(name='ipService', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpSAMctx')))
    _ServiceInfo_info._cont = ASN1Dict([
        ('nonipService', __ServiceInfo_info_nonipService),
        ('ipService', __ServiceInfo_info_ipService),
        ])
    _ServiceInfo_info._ext = None
    ServiceInfo._cont = ASN1Dict([
        ('fill', _ServiceInfo_fill),
        ('info', _ServiceInfo_info),
        ])
    ServiceInfo._ext = None
    
    #-----< NonipSAMctx >-----#
    NonipSAMctx = SEQ(name='NonipSAMctx', mode=MODE_TYPE)
    _NonipSAMctx_serviceID = CHOICE(name='serviceID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSaid')))
    _NonipSAMctx_providerPort = CHOICE(name='providerPort', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    NonipSAMctx._cont = ASN1Dict([
        ('serviceID', _NonipSAMctx_serviceID),
        ('providerPort', _NonipSAMctx_providerPort),
        ])
    NonipSAMctx._ext = None
    
    #-----< IpSAMctx >-----#
    IpSAMctx = SEQ(name='IpSAMctx', mode=MODE_TYPE)
    _IpSAMctx_serviceID = CHOICE(name='serviceID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSaid')))
    _IpSAMctx_ipInfo = SEQ(name='ipInfo', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpInfo')))
    IpSAMctx._cont = ASN1Dict([
        ('serviceID', _IpSAMctx_serviceID),
        ('ipInfo', _IpSAMctx_ipInfo),
        ])
    IpSAMctx._ext = None
    
    #-----< CTXrxNot >-----#
    CTXrxNot = SEQ(name='CTXrxNot', mode=MODE_TYPE)
    _CTXrxNot_link = SEQ(name='link', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _CTXrxNot_ctx = SEQ(name='ctx', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'CTX')))
    CTXrxNot._cont = ASN1Dict([
        ('link', _CTXrxNot_link),
        ('ctx', _CTXrxNot_ctx),
        ])
    CTXrxNot._ext = None
    
    #-----< SAMrxNot >-----#
    SAMrxNot = SEQ(name='SAMrxNot', mode=MODE_TYPE)
    _SAMrxNot_link = SEQ(name='link', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _SAMrxNot_sam = SEQ(name='sam', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'SAM')))
    SAMrxNot._cont = ASN1Dict([
        ('link', _SAMrxNot_link),
        ('sam', _SAMrxNot_sam),
        ])
    SAMrxNot._ext = None
    
    #-----< GCsam >-----#
    GCsam = SEQ(name='GCsam', mode=MODE_TYPE)
    _GCsam_applicationID = SEQ(name='applicationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ApplicationID')))
    _GCsam_serverID = OCT_STR(name='serverID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'StationID')))
    _GCsam_serviceData = SEQ(name='serviceData', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'SAMserviceData')))
    _GCsam_link = SEQ(name='link', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    GCsam._cont = ASN1Dict([
        ('applicationID', _GCsam_applicationID),
        ('serverID', _GCsam_serverID),
        ('serviceData', _GCsam_serviceData),
        ('link', _GCsam_link),
        ])
    GCsam._ext = None
    
    #-----< SAMserviceData >-----#
    SAMserviceData = SEQ(name='SAMserviceData', mode=MODE_TYPE)
    _SAMserviceData_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SAMserviceData_fill._const_sz = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    _SAMserviceData_servData = CHOICE(name='servData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __SAMserviceData_servData_nonipService = SEQ(name='nonipService', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'NonipSAM')))
    __SAMserviceData_servData_ipService = SEQ(name='ipService', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpSAM')))
    _SAMserviceData_servData._cont = ASN1Dict([
        ('nonipService', __SAMserviceData_servData_nonipService),
        ('ipService', __SAMserviceData_servData_ipService),
        ])
    _SAMserviceData_servData._ext = None
    SAMserviceData._cont = ASN1Dict([
        ('fill', _SAMserviceData_fill),
        ('servData', _SAMserviceData_servData),
        ])
    SAMserviceData._ext = None
    
    #-----< NonipSAM >-----#
    NonipSAM = SEQ(name='NonipSAM', mode=MODE_TYPE)
    _NonipSAM_serviceID = CHOICE(name='serviceID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSaid')))
    _NonipSAM_serviceData = OCT_STR(name='serviceData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'ServiceData')))
    _NonipSAM_providerPort = CHOICE(name='providerPort', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    _NonipSAM_sessionChannel = SEQ(name='sessionChannel', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'SessionChannel')))
    NonipSAM._cont = ASN1Dict([
        ('serviceID', _NonipSAM_serviceID),
        ('serviceData', _NonipSAM_serviceData),
        ('providerPort', _NonipSAM_providerPort),
        ('sessionChannel', _NonipSAM_sessionChannel),
        ])
    NonipSAM._ext = None
    
    #-----< IpSAM >-----#
    IpSAM = SEQ(name='IpSAM', mode=MODE_TYPE)
    _IpSAM_serviceID = CHOICE(name='serviceID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSaid')))
    _IpSAM_serviceData = OCT_STR(name='serviceData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpServiceData')))
    _IpSAM_ipInfo = SEQ(name='ipInfo', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpInfo')))
    _IpSAM_sessionChannel = SEQ(name='sessionChannel', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'SessionChannel')))
    IpSAM._cont = ASN1Dict([
        ('serviceID', _IpSAM_serviceID),
        ('serviceData', _IpSAM_serviceData),
        ('ipInfo', _IpSAM_ipInfo),
        ('sessionChannel', _IpSAM_sessionChannel),
        ])
    IpSAM._ext = None
    
    #-----< GCctx >-----#
    GCctx = SEQ(name='GCctx', mode=MODE_TYPE)
    _GCctx_applicationID = SEQ(name='applicationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ApplicationID')))
    _GCctx_clientID = OCT_STR(name='clientID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'StationID')))
    _GCctx_serviceContext = SEQ(name='serviceContext', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'CTXserviceData')))
    GCctx._cont = ASN1Dict([
        ('applicationID', _GCctx_applicationID),
        ('clientID', _GCctx_clientID),
        ('serviceContext', _GCctx_serviceContext),
        ])
    GCctx._ext = None
    
    #-----< CTXserviceData >-----#
    CTXserviceData = SEQ(name='CTXserviceData', mode=MODE_TYPE)
    _CTXserviceData_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CTXserviceData_fill._const_sz = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    _CTXserviceData_servData = CHOICE(name='servData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CTXserviceData_servData_nonipContext = SEQ(name='nonipContext', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'NonipContext')))
    __CTXserviceData_servData_ipContext = SEQ(name='ipContext', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpContext')))
    _CTXserviceData_servData._cont = ASN1Dict([
        ('nonipContext', __CTXserviceData_servData_nonipContext),
        ('ipContext', __CTXserviceData_servData_ipContext),
        ])
    _CTXserviceData_servData._ext = None
    CTXserviceData._cont = ASN1Dict([
        ('fill', _CTXserviceData_fill),
        ('servData', _CTXserviceData_servData),
        ])
    CTXserviceData._ext = None
    
    #-----< NonipContext >-----#
    NonipContext = SEQ(name='NonipContext', mode=MODE_TYPE)
    _NonipContext_serviceID = CHOICE(name='serviceID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSaid')))
    _NonipContext_contextData = OCT_STR(name='contextData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'ContextData')))
    _NonipContext_userPort = CHOICE(name='userPort', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    NonipContext._cont = ASN1Dict([
        ('serviceID', _NonipContext_serviceID),
        ('contextData', _NonipContext_contextData),
        ('userPort', _NonipContext_userPort),
        ])
    NonipContext._ext = None
    
    #-----< GCregServer >-----#
    GCregServer = SEQ(name='GCregServer', mode=MODE_TYPE)
    _GCregServer_applicationID = SEQ(name='applicationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ApplicationID')))
    _GCregServer_gCschedule = SEQ_OF(name='gCschedule', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'GCschedule')))
    _GCregServer_priority = INT(name='priority', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _GCregServer_serviceDataReg = SEQ(name='serviceDataReg', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'ServiceDataReg')))
    GCregServer._cont = ASN1Dict([
        ('applicationID', _GCregServer_applicationID),
        ('gCschedule', _GCregServer_gCschedule),
        ('priority', _GCregServer_priority),
        ('serviceDataReg', _GCregServer_serviceDataReg),
        ])
    GCregServer._ext = None
    
    #-----< GCupdateServer >-----#
    GCupdateServer = SEQ(name='GCupdateServer', mode=MODE_TYPE)
    _GCupdateServer_applicationID = SEQ(name='applicationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ApplicationID')))
    _GCupdateServer_gCschedule = SEQ_OF(name='gCschedule', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'GCschedule')))
    _GCupdateServer_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _GCupdateServer_fill._const_sz = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    _GCupdateServer_serviceDataReg = SEQ_OF(name='serviceDataReg', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GCupdateServer_serviceDataReg__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'ServiceDataReg')))
    _GCupdateServer_serviceDataReg._cont = __GCupdateServer_serviceDataReg__item_
    _GCupdateServer_serviceDataReg._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1)], ev=None, er=[])
    GCupdateServer._cont = ASN1Dict([
        ('applicationID', _GCupdateServer_applicationID),
        ('gCschedule', _GCupdateServer_gCschedule),
        ('fill', _GCupdateServer_fill),
        ('serviceDataReg', _GCupdateServer_serviceDataReg),
        ])
    GCupdateServer._ext = None
    
    #-----< GCderegServer >-----#
    GCderegServer = SEQ(name='GCderegServer', mode=MODE_TYPE)
    _GCderegServer_applicationID = SEQ(name='applicationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ApplicationID')))
    GCderegServer._cont = ASN1Dict([
        ('applicationID', _GCderegServer_applicationID),
        ])
    GCderegServer._ext = None
    
    #-----< GCregClient >-----#
    GCregClient = SEQ(name='GCregClient', mode=MODE_TYPE)
    _GCregClient_applicationID = SEQ(name='applicationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ApplicationID')))
    _GCregClient_priority = INT(name='priority', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _GCregClient_serviceID = CHOICE(name='serviceID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSaid')))
    _GCregClient_contextData = OCT_STR(name='contextData', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'ContextData')))
    GCregClient._cont = ASN1Dict([
        ('applicationID', _GCregClient_applicationID),
        ('priority', _GCregClient_priority),
        ('serviceID', _GCregClient_serviceID),
        ('contextData', _GCregClient_contextData),
        ])
    GCregClient._ext = None
    
    #-----< GCupdateClient >-----#
    GCupdateClient = SEQ(name='GCupdateClient', mode=MODE_TYPE)
    _GCupdateClient_applicationID = SEQ(name='applicationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ApplicationID')))
    _GCupdateClient_serviceID = CHOICE(name='serviceID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSaid')))
    _GCupdateClient_contextData = OCT_STR(name='contextData', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'ContextData')))
    GCupdateClient._cont = ASN1Dict([
        ('applicationID', _GCupdateClient_applicationID),
        ('serviceID', _GCupdateClient_serviceID),
        ('contextData', _GCupdateClient_contextData),
        ])
    GCupdateClient._ext = None
    
    #-----< GCderegClient >-----#
    GCderegClient = SEQ(name='GCderegClient', mode=MODE_TYPE)
    _GCderegClient_applicationID = SEQ(name='applicationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ApplicationID')))
    GCderegClient._cont = ASN1Dict([
        ('applicationID', _GCderegClient_applicationID),
        ])
    GCderegClient._ext = None
    
    #-----< GCregServerConf >-----#
    GCregServerConf = SEQ(name='GCregServerConf', mode=MODE_TYPE)
    _GCregServerConf_applicationID = SEQ(name='applicationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ApplicationID')))
    GCregServerConf._cont = ASN1Dict([
        ('applicationID', _GCregServerConf_applicationID),
        ])
    GCregServerConf._ext = None
    
    #-----< GCupdateServerConf >-----#
    GCupdateServerConf = SEQ(name='GCupdateServerConf', mode=MODE_TYPE)
    _GCupdateServerConf_applicationID = SEQ(name='applicationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ApplicationID')))
    GCupdateServerConf._cont = ASN1Dict([
        ('applicationID', _GCupdateServerConf_applicationID),
        ])
    GCupdateServerConf._ext = None
    
    #-----< GCderegServerConf >-----#
    GCderegServerConf = SEQ(name='GCderegServerConf', mode=MODE_TYPE)
    _GCderegServerConf_applicationID = SEQ(name='applicationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ApplicationID')))
    GCderegServerConf._cont = ASN1Dict([
        ('applicationID', _GCderegServerConf_applicationID),
        ])
    GCderegServerConf._ext = None
    
    #-----< GCregClientConf >-----#
    GCregClientConf = SEQ(name='GCregClientConf', mode=MODE_TYPE)
    _GCregClientConf_applicationID = SEQ(name='applicationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ApplicationID')))
    GCregClientConf._cont = ASN1Dict([
        ('applicationID', _GCregClientConf_applicationID),
        ])
    GCregClientConf._ext = None
    
    #-----< GCupdateClientConf >-----#
    GCupdateClientConf = SEQ(name='GCupdateClientConf', mode=MODE_TYPE)
    _GCupdateClientConf_applicationID = SEQ(name='applicationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ApplicationID')))
    GCupdateClientConf._cont = ASN1Dict([
        ('applicationID', _GCupdateClientConf_applicationID),
        ])
    GCupdateClientConf._ext = None
    
    #-----< GCderegClientConf >-----#
    GCderegClientConf = SEQ(name='GCderegClientConf', mode=MODE_TYPE)
    _GCderegClientConf_applicationID = SEQ(name='applicationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ApplicationID')))
    GCderegClientConf._cont = ASN1Dict([
        ('applicationID', _GCderegClientConf_applicationID),
        ])
    GCderegClientConf._ext = None
    
    #-----< ServiceData >-----#
    ServiceData = OCT_STR(name='ServiceData', mode=MODE_TYPE)
    ServiceData._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< ContextData >-----#
    ContextData = OCT_STR(name='ContextData', mode=MODE_TYPE)
    ContextData._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< IpServiceData >-----#
    IpServiceData = OCT_STR(name='IpServiceData', mode=MODE_TYPE)
    IpServiceData._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< IpContextData >-----#
    IpContextData = OCT_STR(name='IpContextData', mode=MODE_TYPE)
    IpContextData._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< GCschedule >-----#
    GCschedule = SEQ_OF(name='GCschedule', mode=MODE_TYPE)
    _GCschedule__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCsched')))
    GCschedule._cont = _GCschedule__item_
    GCschedule._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< GCsched >-----#
    GCsched = SEQ(name='GCsched', mode=MODE_TYPE)
    _GCsched_medium = INT(name='medium', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'MedType')))
    _GCsched_directivity = SEQ(name='directivity', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Directivity')))
    _GCsched_gcInterval = INT(name='gcInterval', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'GcInterval')))
    GCsched._cont = ASN1Dict([
        ('medium', _GCsched_medium),
        ('directivity', _GCsched_directivity),
        ('gcInterval', _GCsched_gcInterval),
        ])
    GCsched._ext = None
    
    #-----< ServiceDataReg >-----#
    ServiceDataReg = SEQ(name='ServiceDataReg', mode=MODE_TYPE)
    _ServiceDataReg_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ServiceDataReg_fill._const_sz = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    _ServiceDataReg_datareg = CHOICE(name='datareg', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __ServiceDataReg_datareg_nonipData = SEQ(name='nonipData', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'NonipServiceReg')))
    __ServiceDataReg_datareg_ipData = SEQ(name='ipData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpServiceReg')))
    _ServiceDataReg_datareg._cont = ASN1Dict([
        ('nonipData', __ServiceDataReg_datareg_nonipData),
        ('ipData', __ServiceDataReg_datareg_ipData),
        ])
    _ServiceDataReg_datareg._ext = None
    ServiceDataReg._cont = ASN1Dict([
        ('fill', _ServiceDataReg_fill),
        ('datareg', _ServiceDataReg_datareg),
        ])
    ServiceDataReg._ext = None
    
    #-----< NonipServiceReg >-----#
    NonipServiceReg = SEQ(name='NonipServiceReg', mode=MODE_TYPE)
    _NonipServiceReg_serviceID = CHOICE(name='serviceID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSaid')))
    _NonipServiceReg_serviceData = OCT_STR(name='serviceData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _NonipServiceReg_serviceData._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _NonipServiceReg_providerPort = CHOICE(name='providerPort', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    NonipServiceReg._cont = ASN1Dict([
        ('serviceID', _NonipServiceReg_serviceID),
        ('serviceData', _NonipServiceReg_serviceData),
        ('providerPort', _NonipServiceReg_providerPort),
        ])
    NonipServiceReg._ext = None
    
    #-----< IpServiceReg >-----#
    IpServiceReg = SEQ(name='IpServiceReg', mode=MODE_TYPE)
    _IpServiceReg_serviceID = CHOICE(name='serviceID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSaid')))
    _IpServiceReg_serviceData = OCT_STR(name='serviceData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _IpServiceReg_serviceData._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _IpServiceReg_ipInfo = SEQ(name='ipInfo', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpInfo')))
    IpServiceReg._cont = ASN1Dict([
        ('serviceID', _IpServiceReg_serviceID),
        ('serviceData', _IpServiceReg_serviceData),
        ('ipInfo', _IpServiceReg_ipInfo),
        ])
    IpServiceReg._ext = None
    
    #-----< GcInterval >-----#
    GcInterval = INT(name='GcInterval', mode=MODE_TYPE)
    GcInterval._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< IpInfo >-----#
    IpInfo = SEQ(name='IpInfo', mode=MODE_TYPE)
    _IpInfo_address = SEQ(name='address', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpAddressInfo')))
    IpInfo._cont = ASN1Dict([
        ('address', _IpInfo_address),
        ])
    IpInfo._ext = None
    
    #-----< IpAddressInfo >-----#
    IpAddressInfo = SEQ(name='IpAddressInfo', mode=MODE_TYPE)
    _IpAddressInfo_addressType = OCT_STR(name='addressType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TRANSPORT-ADDRESS-MIB', 'TransportAddressType')))
    _IpAddressInfo_address = OCT_STR(name='address', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TRANSPORT-ADDRESS-MIB', 'TransportAddress')))
    IpAddressInfo._cont = ASN1Dict([
        ('addressType', _IpAddressInfo_addressType),
        ('address', _IpAddressInfo_address),
        ])
    IpAddressInfo._ext = None
    
    #-----< noNonipServices >-----#
    noNonipServices = INT(name='noNonipServices', mode=MODE_VALUE)
    noNonipServices._val = 255
    
    #-----< noChannels >-----#
    noChannels = INT(name='noChannels', mode=MODE_VALUE)
    noChannels._val = 255
    
    #-----< noIpServices >-----#
    noIpServices = INT(name='noIpServices', mode=MODE_VALUE)
    noIpServices._val = 255
    
    #-----< noNonipContexts >-----#
    noNonipContexts = INT(name='noNonipContexts', mode=MODE_VALUE)
    noNonipContexts._val = 255
    
    #-----< noIpContexts >-----#
    noIpContexts = INT(name='noIpContexts', mode=MODE_VALUE)
    noIpContexts._val = 255
    
    #-----< noServiceDataOctets >-----#
    noServiceDataOctets = INT(name='noServiceDataOctets', mode=MODE_VALUE)
    noServiceDataOctets._val = 65535
    
    #-----< noIpServiceDataOctets >-----#
    noIpServiceDataOctets = INT(name='noIpServiceDataOctets', mode=MODE_VALUE)
    noIpServiceDataOctets._val = 65535
    
    #-----< noContextDataOctets >-----#
    noContextDataOctets = INT(name='noContextDataOctets', mode=MODE_VALUE)
    noContextDataOctets._val = 65535
    
    #-----< noIpContextDataOctets >-----#
    noIpContextDataOctets = INT(name='noIpContextDataOctets', mode=MODE_VALUE)
    noIpContextDataOctets._val = 65535
    
    #-----< versionNoFSAP >-----#
    versionNoFSAP = INT(name='versionNoFSAP', mode=MODE_VALUE)
    versionNoFSAP._val = 0
    
    _all_ = [
        _SAM_fmtID,
        _SAM_version,
        _SAM_serverID,
        _SAM_serviceList,
        _SAM_channelList,
        _SAM_ipServList,
        SAM,
        FmtID,
        VersionFSAP,
        _ServiceList__item_,
        ServiceList,
        _ChannelList__item_,
        ChannelList,
        _IpServList__item_,
        IpServList,
        _NonipService_serviceID,
        _NonipService_serviceData,
        _NonipService_serverPort,
        _NonipService_sessionChannel,
        NonipService,
        _SessionChannel_serviceChannel,
        _SessionChannel_medium,
        _SessionChannel_schParams,
        SessionChannel,
        _IpService_serviceID,
        _IpService_serviceData,
        _IpService_ipInfo,
        _IpService_sessionChannel,
        IpService,
        _CTX_fmtID,
        _CTX_version,
        _CTX_clientID,
        _CTX_servContextList,
        _CTX_ipContextList,
        CTX,
        _ServContextList__item_,
        ServContextList,
        _IpContextList__item_,
        IpContextList,
        _IpContext_serviceID,
        _IpContext_contextData,
        _IpContext_ipInfo,
        IpContext,
        _GCctxTxCmd_link,
        _GCctxTxCmd_ctx,
        GCctxTxCmd,
        _GCperiodCmd_applicationID,
        __GCperiodCmd_bcVCIs__item_,
        _GCperiodCmd_bcVCIs,
        _GCperiodCmd_gcInterval,
        _GCperiodCmd_priority,
        _GCperiodCmd_serviceDataReg,
        GCperiodCmd,
        _GCsamctx_applicationID,
        _GCsamctx_serverID,
        _GCsamctx_serviceInfo,
        _GCsamctx_link,
        GCsamctx,
        _GCsamctxConf_applicationID,
        _GCsamctxConf_link,
        _GCsamctxConf_port,
        GCsamctxConf,
        _GCdeleteCmd_applicationID,
        GCdeleteCmd,
        _ServiceInfo_fill,
        __ServiceInfo_info_nonipService,
        __ServiceInfo_info_ipService,
        _ServiceInfo_info,
        ServiceInfo,
        _NonipSAMctx_serviceID,
        _NonipSAMctx_providerPort,
        NonipSAMctx,
        _IpSAMctx_serviceID,
        _IpSAMctx_ipInfo,
        IpSAMctx,
        _CTXrxNot_link,
        _CTXrxNot_ctx,
        CTXrxNot,
        _SAMrxNot_link,
        _SAMrxNot_sam,
        SAMrxNot,
        _GCsam_applicationID,
        _GCsam_serverID,
        _GCsam_serviceData,
        _GCsam_link,
        GCsam,
        _SAMserviceData_fill,
        __SAMserviceData_servData_nonipService,
        __SAMserviceData_servData_ipService,
        _SAMserviceData_servData,
        SAMserviceData,
        _NonipSAM_serviceID,
        _NonipSAM_serviceData,
        _NonipSAM_providerPort,
        _NonipSAM_sessionChannel,
        NonipSAM,
        _IpSAM_serviceID,
        _IpSAM_serviceData,
        _IpSAM_ipInfo,
        _IpSAM_sessionChannel,
        IpSAM,
        _GCctx_applicationID,
        _GCctx_clientID,
        _GCctx_serviceContext,
        GCctx,
        _CTXserviceData_fill,
        __CTXserviceData_servData_nonipContext,
        __CTXserviceData_servData_ipContext,
        _CTXserviceData_servData,
        CTXserviceData,
        _NonipContext_serviceID,
        _NonipContext_contextData,
        _NonipContext_userPort,
        NonipContext,
        _GCregServer_applicationID,
        _GCregServer_gCschedule,
        _GCregServer_priority,
        _GCregServer_serviceDataReg,
        GCregServer,
        _GCupdateServer_applicationID,
        _GCupdateServer_gCschedule,
        _GCupdateServer_fill,
        __GCupdateServer_serviceDataReg__item_,
        _GCupdateServer_serviceDataReg,
        GCupdateServer,
        _GCderegServer_applicationID,
        GCderegServer,
        _GCregClient_applicationID,
        _GCregClient_priority,
        _GCregClient_serviceID,
        _GCregClient_contextData,
        GCregClient,
        _GCupdateClient_applicationID,
        _GCupdateClient_serviceID,
        _GCupdateClient_contextData,
        GCupdateClient,
        _GCderegClient_applicationID,
        GCderegClient,
        _GCregServerConf_applicationID,
        GCregServerConf,
        _GCupdateServerConf_applicationID,
        GCupdateServerConf,
        _GCderegServerConf_applicationID,
        GCderegServerConf,
        _GCregClientConf_applicationID,
        GCregClientConf,
        _GCupdateClientConf_applicationID,
        GCupdateClientConf,
        _GCderegClientConf_applicationID,
        GCderegClientConf,
        ServiceData,
        ContextData,
        IpServiceData,
        IpContextData,
        _GCschedule__item_,
        GCschedule,
        _GCsched_medium,
        _GCsched_directivity,
        _GCsched_gcInterval,
        GCsched,
        _ServiceDataReg_fill,
        __ServiceDataReg_datareg_nonipData,
        __ServiceDataReg_datareg_ipData,
        _ServiceDataReg_datareg,
        ServiceDataReg,
        _NonipServiceReg_serviceID,
        _NonipServiceReg_serviceData,
        _NonipServiceReg_providerPort,
        NonipServiceReg,
        _IpServiceReg_serviceID,
        _IpServiceReg_serviceData,
        _IpServiceReg_ipInfo,
        IpServiceReg,
        GcInterval,
        _IpInfo_address,
        IpInfo,
        _IpAddressInfo_addressType,
        _IpAddressInfo_address,
        IpAddressInfo,
        noNonipServices,
        noChannels,
        noIpServices,
        noNonipContexts,
        noIpContexts,
        noServiceDataOctets,
        noIpServiceDataOctets,
        noContextDataOctets,
        noIpContextDataOctets,
        versionNoFSAP,
    ]

class CALMiitsscu:

    _name_  = 'CALMiitsscu'
    _oid_   = [1, 0, 24102, 4, 1, 1]
    
    _obj_ = [
        'IIC-Request',
        'RequestID',
        'RefIICP',
        'IICPREQ',
        'IICPrequests',
        'PduRequest',
        'aliveRq',
        'mfRcmdRq',
        'mfRreqRq',
        'mnRcmdRq',
        'mnRreqRq',
        'miRcmdRq',
        'miRreqRq',
        'miRgetRq',
        'miRsetRq',
        'mCmdRq',
        'maRcmdRq',
        'maRreqRq',
        'msRcmdRq',
        'msRreqRq',
        'simFutCmdRq',
        'simFutReqRq',
        'simNutCmdRq',
        'simNutReqRq',
        'simIutCmdRq',
        'simIutReqRq',
        'simFltCmdRq',
        'simFltReqRq',
        'simNltCmdRq',
        'simNltReqRq',
        'simUtInRq',
        'simUtOutRq',
        'ITS-SCUalive',
        'AliveMessage',
        'ITS-SCUtype',
        'SimUt',
        'RefMcmdRq',
        'MCMDREQ',
        'McmdReqs',
        'McmdRq',
        'pingRq',
        'vCIinfoRq',
        'vCIupdateRq',
        'getParam24102Rq',
        'setParam24102Rq',
        'testConfigRq',
        'PingIICP',
        'VCI-info-req',
        'VCI-update-req',
        'VCI-Info',
        'TestConfigIICP',
        'IIC-Response',
        'ResponseID',
        'IICPRES',
        'IICPresponses',
        'PduResponse',
        'aliveRs',
        'mfRcmdRs',
        'mfRreqRs',
        'mnRcmdRs',
        'mnRreqRs',
        'miRcmdRs',
        'miRreqRs',
        'miRgetRs',
        'miRsetRs',
        'mCmdRs',
        'maRcmdRs',
        'maRreqRs',
        'msRcmdRs',
        'msRreqRs',
        'simAutCmdRs',
        'simAutReqRs',
        'simFutCmdRs',
        'simFutReqRs',
        'simNutCmdRs',
        'simNutReqRs',
        'simIutCmdRs',
        'simIutReqRs',
        'simAltCmdRs',
        'simAltReqRs',
        'simFltCmdRs',
        'simFltReqRs',
        'simNltReqRs',
        'simNltCmdRs',
        'simUtInRs',
        'simUtOutRs',
        'RefMcmdRs',
        'MCMDRES',
        'McmdRess',
        'McmdRs',
        'pingRs',
        'vCIinfoRs',
        'vCIupdateRs',
        'getParam24102Rs',
        'setParam24102Rs',
        'testConfigRs',
        'PduErrStatus',
        'VCI-info-res',
        'RefSECIICPRQ',
        'SECIICPRQ',
        'SecIICPRQs',
        'SecRq',
        'noSecurityRq',
        'octStringRq',
        'RefSECIICPRS',
        'SECIICPRS',
        'SECIICPRSs',
        'SecRs',
        'noSecurityRs',
        'octStringRs',
        'SecIICPpayload',
        'IICrequestTX',
        'IICresponseTX',
        'IICrequestRX',
        'IICresponseRX',
        'PduCounter',
        'version',
        ]
    _type_ = [
        'IIC-Request',
        'RequestID',
        'RefIICP',
        'IICPREQ',
        'PduRequest',
        'ITS-SCUalive',
        'AliveMessage',
        'ITS-SCUtype',
        'SimUt',
        'RefMcmdRq',
        'MCMDREQ',
        'McmdRq',
        'PingIICP',
        'VCI-info-req',
        'VCI-update-req',
        'VCI-Info',
        'TestConfigIICP',
        'IIC-Response',
        'ResponseID',
        'IICPRES',
        'PduResponse',
        'RefMcmdRs',
        'MCMDRES',
        'McmdRs',
        'PduErrStatus',
        'VCI-info-res',
        'RefSECIICPRQ',
        'SECIICPRQ',
        'SecRq',
        'RefSECIICPRS',
        'SECIICPRS',
        'SecRs',
        'SecIICPpayload',
        'IICrequestTX',
        'IICresponseTX',
        'IICrequestRX',
        'IICresponseRX',
        'PduCounter',
        ]
    _set_ = [
        'IICPrequests',
        'McmdReqs',
        'IICPresponses',
        'McmdRess',
        'SecIICPRQs',
        'SECIICPRSs',
        ]
    _val_ = [
        'aliveRq',
        'mfRcmdRq',
        'mfRreqRq',
        'mnRcmdRq',
        'mnRreqRq',
        'miRcmdRq',
        'miRreqRq',
        'miRgetRq',
        'miRsetRq',
        'mCmdRq',
        'maRcmdRq',
        'maRreqRq',
        'msRcmdRq',
        'msRreqRq',
        'simFutCmdRq',
        'simFutReqRq',
        'simNutCmdRq',
        'simNutReqRq',
        'simIutCmdRq',
        'simIutReqRq',
        'simFltCmdRq',
        'simFltReqRq',
        'simNltCmdRq',
        'simNltReqRq',
        'simUtInRq',
        'simUtOutRq',
        'pingRq',
        'vCIinfoRq',
        'vCIupdateRq',
        'getParam24102Rq',
        'setParam24102Rq',
        'testConfigRq',
        'aliveRs',
        'mfRcmdRs',
        'mfRreqRs',
        'mnRcmdRs',
        'mnRreqRs',
        'miRcmdRs',
        'miRreqRs',
        'miRgetRs',
        'miRsetRs',
        'mCmdRs',
        'maRcmdRs',
        'maRreqRs',
        'msRcmdRs',
        'msRreqRs',
        'simAutCmdRs',
        'simAutReqRs',
        'simFutCmdRs',
        'simFutReqRs',
        'simNutCmdRs',
        'simNutReqRs',
        'simIutCmdRs',
        'simIutReqRs',
        'simAltCmdRs',
        'simAltReqRs',
        'simFltCmdRs',
        'simFltReqRs',
        'simNltReqRs',
        'simNltCmdRs',
        'simUtInRs',
        'simUtOutRs',
        'pingRs',
        'vCIinfoRs',
        'vCIupdateRs',
        'getParam24102Rs',
        'setParam24102Rs',
        'testConfigRs',
        'noSecurityRq',
        'octStringRq',
        'noSecurityRs',
        'octStringRs',
        'version',
        ]
    _class_ = [
        'IICPREQ',
        'IICPrequests',
        'aliveRq',
        'mfRcmdRq',
        'mfRreqRq',
        'mnRcmdRq',
        'mnRreqRq',
        'miRcmdRq',
        'miRreqRq',
        'miRgetRq',
        'miRsetRq',
        'mCmdRq',
        'maRcmdRq',
        'maRreqRq',
        'msRcmdRq',
        'msRreqRq',
        'simFutCmdRq',
        'simFutReqRq',
        'simNutCmdRq',
        'simNutReqRq',
        'simIutCmdRq',
        'simIutReqRq',
        'simFltCmdRq',
        'simFltReqRq',
        'simNltCmdRq',
        'simNltReqRq',
        'simUtInRq',
        'simUtOutRq',
        'MCMDREQ',
        'McmdReqs',
        'pingRq',
        'vCIinfoRq',
        'vCIupdateRq',
        'getParam24102Rq',
        'setParam24102Rq',
        'testConfigRq',
        'IICPRES',
        'IICPresponses',
        'aliveRs',
        'mfRcmdRs',
        'mfRreqRs',
        'mnRcmdRs',
        'mnRreqRs',
        'miRcmdRs',
        'miRreqRs',
        'miRgetRs',
        'miRsetRs',
        'mCmdRs',
        'maRcmdRs',
        'maRreqRs',
        'msRcmdRs',
        'msRreqRs',
        'simAutCmdRs',
        'simAutReqRs',
        'simFutCmdRs',
        'simFutReqRs',
        'simNutCmdRs',
        'simNutReqRs',
        'simIutCmdRs',
        'simIutReqRs',
        'simAltCmdRs',
        'simAltReqRs',
        'simFltCmdRs',
        'simFltReqRs',
        'simNltReqRs',
        'simNltCmdRs',
        'simUtInRs',
        'simUtOutRs',
        'MCMDRES',
        'McmdRess',
        'pingRs',
        'vCIinfoRs',
        'vCIupdateRs',
        'getParam24102Rs',
        'setParam24102Rs',
        'testConfigRs',
        'SECIICPRQ',
        'SecIICPRQs',
        'noSecurityRq',
        'octStringRq',
        'SECIICPRS',
        'SECIICPRSs',
        'noSecurityRs',
        'octStringRs',
        ]
    _param_ = [
        ]
    
    #-----< IIC-Request >-----#
    IIC_Request = SEQ(name='IIC-Request', mode=MODE_TYPE)
    _IIC_Request_sourceITS_scuId = INT(name='sourceITS-scuId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ITS-scuId')))
    _IIC_Request_destinationITS_scuId = INT(name='destinationITS-scuId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ITS-scuId')))
    _IIC_Request_pduCounter = INT(name='pduCounter', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMiitsscu', 'PduCounter')))
    _IIC_Request_requestID = INT(name='requestID', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMiitsscu', 'RequestID')))
    _IIC_Request_pduRequest = SEQ(name='pduRequest', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMiitsscu', 'PduRequest')))
    _IIC_Request_secRq = SEQ(name='secRq', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMiitsscu', 'SecRq')))
    IIC_Request._cont = ASN1Dict([
        ('sourceITS-scuId', _IIC_Request_sourceITS_scuId),
        ('destinationITS-scuId', _IIC_Request_destinationITS_scuId),
        ('pduCounter', _IIC_Request_pduCounter),
        ('requestID', _IIC_Request_requestID),
        ('pduRequest', _IIC_Request_pduRequest),
        ('secRq', _IIC_Request_secRq),
        ])
    IIC_Request._ext = None
    
    #-----< RequestID >-----#
    RequestID = INT(name='RequestID', mode=MODE_TYPE)
    RequestID._cont = ASN1Dict([('request', 0)])
    RequestID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< RefIICP >-----#
    RefIICP = INT(name='RefIICP', mode=MODE_TYPE)
    RefIICP._cont = ASN1Dict([('c-alive', 0), ('c-mfRcmd', 1), ('c-mfRreq', 2), ('c-mnRcmd', 3), ('c-mnRreq', 4), ('c-miRcmd', 5), ('c-miRreq', 6), ('c-miRget', 7), ('c-miRset', 8), ('c-mCmd', 9), ('c-maRcmd', 10), ('c-maRreq', 11), ('c-msRcmd', 12), ('c-msRreq', 13), ('c-simUtIn', 240), ('c-simUtOut', 241), ('c-simAutCmd', 242), ('c-simAutReq', 243), ('c-simFutCmd', 244), ('c-simFutReq', 245), ('c-simNutCmd', 246), ('c-simNutReq', 247), ('c-simIutCmd', 248), ('c-simIutReq', 249), ('c-simAltCmd', 250), ('c-simAltReq', 251), ('c-simFltCmd', 252), ('c-simFltReq', 253), ('c-simNltCmd', 254), ('c-simNltReq', 255)])
    RefIICP._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< IICPREQ >-----#
    IICPREQ = CLASS(name='IICPREQ', mode=MODE_TYPE)
    _IICPREQ_ref = INT(name='ref', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'RefIICP')), uniq=True)
    _IICPREQ_IICPrequest = OPEN(name='IICPrequest', mode=MODE_TYPE)
    IICPREQ._cont = ASN1Dict([
        ('ref', _IICPREQ_ref),
        ('IICPrequest', _IICPREQ_IICPrequest),
        ])
    
    #-----< IICPrequests >-----#
    IICPrequests = CLASS(name='IICPrequests', mode=MODE_SET, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _IICPrequests_val_IICPrequest_0 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'ITS-SCUalive')))
    _IICPrequests_val_IICPrequest_1 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MF-Command-request')))
    _IICPrequests_val_IICPrequest_2 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MF-Request-request')))
    _IICPrequests_val_IICPrequest_3 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MN-Command-request')))
    _IICPrequests_val_IICPrequest_4 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MN-Request-request')))
    _IICPrequests_val_IICPrequest_5 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Command-request')))
    _IICPrequests_val_IICPrequest_6 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Request-request')))
    _IICPrequests_val_IICPrequest_7 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Get-request')))
    _IICPrequests_val_IICPrequest_8 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Set-request')))
    _IICPrequests_val_IICPrequest_9 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'McmdRq')))
    _IICPrequests_val_IICPrequest_10 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MA-Command-request')))
    _IICPrequests_val_IICPrequest_11 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MA-Request-request')))
    _IICPrequests_val_IICPrequest_12 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MS-Command-request')))
    _IICPrequests_val_IICPrequest_13 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MS-Request-request')))
    _IICPrequests_val_IICPrequest_14 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFUTcmd')))
    _IICPrequests_val_IICPrequest_15 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFUTreq')))
    _IICPrequests_val_IICPrequest_16 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNUTcmd')))
    _IICPrequests_val_IICPrequest_17 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNUTreq')))
    _IICPrequests_val_IICPrequest_18 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimIUTcmd')))
    _IICPrequests_val_IICPrequest_19 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimIUTreq')))
    _IICPrequests_val_IICPrequest_20 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFLTcmd')))
    _IICPrequests_val_IICPrequest_21 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFLTreq')))
    _IICPrequests_val_IICPrequest_22 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNLTcmd')))
    _IICPrequests_val_IICPrequest_23 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNLTreq')))
    _IICPrequests_val_IICPrequest_24 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'SimUt')))
    _IICPrequests_val_IICPrequest_25 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'SimUt')))
    IICPrequests._val = ASN1Set(rv=[dict([('ref', 0), ('IICPrequest', _IICPrequests_val_IICPrequest_0)]), dict([('ref', 1), ('IICPrequest', _IICPrequests_val_IICPrequest_1)]), dict([('ref', 2), ('IICPrequest', _IICPrequests_val_IICPrequest_2)]), dict([('ref', 3), ('IICPrequest', _IICPrequests_val_IICPrequest_3)]), dict([('ref', 4), ('IICPrequest', _IICPrequests_val_IICPrequest_4)]), dict([('ref', 5), ('IICPrequest', _IICPrequests_val_IICPrequest_5)]), dict([('ref', 6), ('IICPrequest', _IICPrequests_val_IICPrequest_6)]), dict([('ref', 7), ('IICPrequest', _IICPrequests_val_IICPrequest_7)]), dict([('ref', 8), ('IICPrequest', _IICPrequests_val_IICPrequest_8)]), dict([('ref', 9), ('IICPrequest', _IICPrequests_val_IICPrequest_9)]), dict([('ref', 10), ('IICPrequest', _IICPrequests_val_IICPrequest_10)]), dict([('ref', 11), ('IICPrequest', _IICPrequests_val_IICPrequest_11)]), dict([('ref', 12), ('IICPrequest', _IICPrequests_val_IICPrequest_12)]), dict([('ref', 13), ('IICPrequest', _IICPrequests_val_IICPrequest_13)]), dict([('ref', 244), ('IICPrequest', _IICPrequests_val_IICPrequest_14)]), dict([('ref', 245), ('IICPrequest', _IICPrequests_val_IICPrequest_15)]), dict([('ref', 246), ('IICPrequest', _IICPrequests_val_IICPrequest_16)]), dict([('ref', 247), ('IICPrequest', _IICPrequests_val_IICPrequest_17)]), dict([('ref', 248), ('IICPrequest', _IICPrequests_val_IICPrequest_18)]), dict([('ref', 249), ('IICPrequest', _IICPrequests_val_IICPrequest_19)]), dict([('ref', 252), ('IICPrequest', _IICPrequests_val_IICPrequest_20)]), dict([('ref', 253), ('IICPrequest', _IICPrequests_val_IICPrequest_21)]), dict([('ref', 254), ('IICPrequest', _IICPrequests_val_IICPrequest_22)]), dict([('ref', 255), ('IICPrequest', _IICPrequests_val_IICPrequest_23)]), dict([('ref', 240), ('IICPrequest', _IICPrequests_val_IICPrequest_24)]), dict([('ref', 241), ('IICPrequest', _IICPrequests_val_IICPrequest_25)])], rr=[], ev=[], er=[])
    
    #-----< PduRequest >-----#
    PduRequest = SEQ(name='PduRequest', mode=MODE_TYPE)
    _PduRequest_reqRef = INT(name='reqRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMiitsscu', 'IICPREQ'), ['ref']))
    __PduRequest_reqRef_tab = CLASS(name='_tab_IICPREQ', mode=MODE_SET, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    ___PduRequest_reqRef_tab_val_IICPrequest_0 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'ITS-SCUalive')))
    ___PduRequest_reqRef_tab_val_IICPrequest_1 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MF-Command-request')))
    ___PduRequest_reqRef_tab_val_IICPrequest_2 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MF-Request-request')))
    ___PduRequest_reqRef_tab_val_IICPrequest_3 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MN-Command-request')))
    ___PduRequest_reqRef_tab_val_IICPrequest_4 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MN-Request-request')))
    ___PduRequest_reqRef_tab_val_IICPrequest_5 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Command-request')))
    ___PduRequest_reqRef_tab_val_IICPrequest_6 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Request-request')))
    ___PduRequest_reqRef_tab_val_IICPrequest_7 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Get-request')))
    ___PduRequest_reqRef_tab_val_IICPrequest_8 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Set-request')))
    ___PduRequest_reqRef_tab_val_IICPrequest_9 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'McmdRq')))
    ___PduRequest_reqRef_tab_val_IICPrequest_10 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MA-Command-request')))
    ___PduRequest_reqRef_tab_val_IICPrequest_11 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MA-Request-request')))
    ___PduRequest_reqRef_tab_val_IICPrequest_12 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MS-Command-request')))
    ___PduRequest_reqRef_tab_val_IICPrequest_13 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MS-Request-request')))
    ___PduRequest_reqRef_tab_val_IICPrequest_14 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFUTcmd')))
    ___PduRequest_reqRef_tab_val_IICPrequest_15 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFUTreq')))
    ___PduRequest_reqRef_tab_val_IICPrequest_16 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNUTcmd')))
    ___PduRequest_reqRef_tab_val_IICPrequest_17 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNUTreq')))
    ___PduRequest_reqRef_tab_val_IICPrequest_18 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimIUTcmd')))
    ___PduRequest_reqRef_tab_val_IICPrequest_19 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimIUTreq')))
    ___PduRequest_reqRef_tab_val_IICPrequest_20 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFLTcmd')))
    ___PduRequest_reqRef_tab_val_IICPrequest_21 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFLTreq')))
    ___PduRequest_reqRef_tab_val_IICPrequest_22 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNLTcmd')))
    ___PduRequest_reqRef_tab_val_IICPrequest_23 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNLTreq')))
    ___PduRequest_reqRef_tab_val_IICPrequest_24 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'SimUt')))
    ___PduRequest_reqRef_tab_val_IICPrequest_25 = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'SimUt')))
    __PduRequest_reqRef_tab._val = ASN1Set(rv=[dict([('ref', 0), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_0)]), dict([('ref', 1), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_1)]), dict([('ref', 2), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_2)]), dict([('ref', 3), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_3)]), dict([('ref', 4), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_4)]), dict([('ref', 5), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_5)]), dict([('ref', 6), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_6)]), dict([('ref', 7), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_7)]), dict([('ref', 8), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_8)]), dict([('ref', 9), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_9)]), dict([('ref', 10), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_10)]), dict([('ref', 11), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_11)]), dict([('ref', 12), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_12)]), dict([('ref', 13), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_13)]), dict([('ref', 244), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_14)]), dict([('ref', 245), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_15)]), dict([('ref', 246), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_16)]), dict([('ref', 247), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_17)]), dict([('ref', 248), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_18)]), dict([('ref', 249), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_19)]), dict([('ref', 252), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_20)]), dict([('ref', 253), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_21)]), dict([('ref', 254), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_22)]), dict([('ref', 255), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_23)]), dict([('ref', 240), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_24)]), dict([('ref', 241), ('IICPrequest', ___PduRequest_reqRef_tab_val_IICPrequest_25)])], rr=[], ev=None, er=[])
    _PduRequest_reqRef._const_tab = __PduRequest_reqRef_tab
    _PduRequest_reqRef._const_tab_at = None
    _PduRequest_reqRef._const_tab_id = 'ref'
    _PduRequest_iicpReq = OPEN(name='iicpReq', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMiitsscu', 'IICPREQ'), ['IICPrequest']))
    _PduRequest_iicpReq._const_tab = __PduRequest_reqRef_tab
    _PduRequest_iicpReq._const_tab_at = ('..', 'reqRef')
    _PduRequest_iicpReq._const_tab_id = 'IICPrequest'
    PduRequest._cont = ASN1Dict([
        ('reqRef', _PduRequest_reqRef),
        ('iicpReq', _PduRequest_iicpReq),
        ])
    PduRequest._ext = None
    
    #-----< aliveRq >-----#
    aliveRq = CLASS(name='aliveRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _aliveRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'ITS-SCUalive')))
    aliveRq._val = dict([('ref', 0), ('IICPrequest', _aliveRq_val_IICPrequest)])
    
    #-----< mfRcmdRq >-----#
    mfRcmdRq = CLASS(name='mfRcmdRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _mfRcmdRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MF-Command-request')))
    mfRcmdRq._val = dict([('ref', 1), ('IICPrequest', _mfRcmdRq_val_IICPrequest)])
    
    #-----< mfRreqRq >-----#
    mfRreqRq = CLASS(name='mfRreqRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _mfRreqRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MF-Request-request')))
    mfRreqRq._val = dict([('ref', 2), ('IICPrequest', _mfRreqRq_val_IICPrequest)])
    
    #-----< mnRcmdRq >-----#
    mnRcmdRq = CLASS(name='mnRcmdRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _mnRcmdRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MN-Command-request')))
    mnRcmdRq._val = dict([('ref', 3), ('IICPrequest', _mnRcmdRq_val_IICPrequest)])
    
    #-----< mnRreqRq >-----#
    mnRreqRq = CLASS(name='mnRreqRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _mnRreqRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MN-Request-request')))
    mnRreqRq._val = dict([('ref', 4), ('IICPrequest', _mnRreqRq_val_IICPrequest)])
    
    #-----< miRcmdRq >-----#
    miRcmdRq = CLASS(name='miRcmdRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _miRcmdRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Command-request')))
    miRcmdRq._val = dict([('ref', 5), ('IICPrequest', _miRcmdRq_val_IICPrequest)])
    
    #-----< miRreqRq >-----#
    miRreqRq = CLASS(name='miRreqRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _miRreqRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Request-request')))
    miRreqRq._val = dict([('ref', 6), ('IICPrequest', _miRreqRq_val_IICPrequest)])
    
    #-----< miRgetRq >-----#
    miRgetRq = CLASS(name='miRgetRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _miRgetRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Get-request')))
    miRgetRq._val = dict([('ref', 7), ('IICPrequest', _miRgetRq_val_IICPrequest)])
    
    #-----< miRsetRq >-----#
    miRsetRq = CLASS(name='miRsetRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _miRsetRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Set-request')))
    miRsetRq._val = dict([('ref', 8), ('IICPrequest', _miRsetRq_val_IICPrequest)])
    
    #-----< mCmdRq >-----#
    mCmdRq = CLASS(name='mCmdRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _mCmdRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'McmdRq')))
    mCmdRq._val = dict([('ref', 9), ('IICPrequest', _mCmdRq_val_IICPrequest)])
    
    #-----< maRcmdRq >-----#
    maRcmdRq = CLASS(name='maRcmdRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _maRcmdRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MA-Command-request')))
    maRcmdRq._val = dict([('ref', 10), ('IICPrequest', _maRcmdRq_val_IICPrequest)])
    
    #-----< maRreqRq >-----#
    maRreqRq = CLASS(name='maRreqRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _maRreqRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MA-Request-request')))
    maRreqRq._val = dict([('ref', 11), ('IICPrequest', _maRreqRq_val_IICPrequest)])
    
    #-----< msRcmdRq >-----#
    msRcmdRq = CLASS(name='msRcmdRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _msRcmdRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MS-Command-request')))
    msRcmdRq._val = dict([('ref', 12), ('IICPrequest', _msRcmdRq_val_IICPrequest)])
    
    #-----< msRreqRq >-----#
    msRreqRq = CLASS(name='msRreqRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _msRreqRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MS-Request-request')))
    msRreqRq._val = dict([('ref', 13), ('IICPrequest', _msRreqRq_val_IICPrequest)])
    
    #-----< simFutCmdRq >-----#
    simFutCmdRq = CLASS(name='simFutCmdRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _simFutCmdRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFUTcmd')))
    simFutCmdRq._val = dict([('ref', 244), ('IICPrequest', _simFutCmdRq_val_IICPrequest)])
    
    #-----< simFutReqRq >-----#
    simFutReqRq = CLASS(name='simFutReqRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _simFutReqRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFUTreq')))
    simFutReqRq._val = dict([('ref', 245), ('IICPrequest', _simFutReqRq_val_IICPrequest)])
    
    #-----< simNutCmdRq >-----#
    simNutCmdRq = CLASS(name='simNutCmdRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _simNutCmdRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNUTcmd')))
    simNutCmdRq._val = dict([('ref', 246), ('IICPrequest', _simNutCmdRq_val_IICPrequest)])
    
    #-----< simNutReqRq >-----#
    simNutReqRq = CLASS(name='simNutReqRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _simNutReqRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNUTreq')))
    simNutReqRq._val = dict([('ref', 247), ('IICPrequest', _simNutReqRq_val_IICPrequest)])
    
    #-----< simIutCmdRq >-----#
    simIutCmdRq = CLASS(name='simIutCmdRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _simIutCmdRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimIUTcmd')))
    simIutCmdRq._val = dict([('ref', 248), ('IICPrequest', _simIutCmdRq_val_IICPrequest)])
    
    #-----< simIutReqRq >-----#
    simIutReqRq = CLASS(name='simIutReqRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _simIutReqRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimIUTreq')))
    simIutReqRq._val = dict([('ref', 249), ('IICPrequest', _simIutReqRq_val_IICPrequest)])
    
    #-----< simFltCmdRq >-----#
    simFltCmdRq = CLASS(name='simFltCmdRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _simFltCmdRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFLTcmd')))
    simFltCmdRq._val = dict([('ref', 252), ('IICPrequest', _simFltCmdRq_val_IICPrequest)])
    
    #-----< simFltReqRq >-----#
    simFltReqRq = CLASS(name='simFltReqRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _simFltReqRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFLTreq')))
    simFltReqRq._val = dict([('ref', 253), ('IICPrequest', _simFltReqRq_val_IICPrequest)])
    
    #-----< simNltCmdRq >-----#
    simNltCmdRq = CLASS(name='simNltCmdRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _simNltCmdRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNLTcmd')))
    simNltCmdRq._val = dict([('ref', 254), ('IICPrequest', _simNltCmdRq_val_IICPrequest)])
    
    #-----< simNltReqRq >-----#
    simNltReqRq = CLASS(name='simNltReqRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _simNltReqRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNLTreq')))
    simNltReqRq._val = dict([('ref', 255), ('IICPrequest', _simNltReqRq_val_IICPrequest)])
    
    #-----< simUtInRq >-----#
    simUtInRq = CLASS(name='simUtInRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _simUtInRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'SimUt')))
    simUtInRq._val = dict([('ref', 240), ('IICPrequest', _simUtInRq_val_IICPrequest)])
    
    #-----< simUtOutRq >-----#
    simUtOutRq = CLASS(name='simUtOutRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPREQ')))
    _simUtOutRq_val_IICPrequest = SEQ(name='IICPrequest', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'SimUt')))
    simUtOutRq._val = dict([('ref', 241), ('IICPrequest', _simUtOutRq_val_IICPrequest)])
    
    #-----< ITS-SCUalive >-----#
    ITS_SCUalive = SEQ(name='ITS-SCUalive', mode=MODE_TYPE)
    _ITS_SCUalive_message = INT(name='message', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMiitsscu', 'AliveMessage')))
    _ITS_SCUalive_its_scuType = INT(name='its-scuType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMiitsscu', 'ITS-SCUtype')))
    ITS_SCUalive._cont = ASN1Dict([
        ('message', _ITS_SCUalive_message),
        ('its-scuType', _ITS_SCUalive_its_scuType),
        ])
    ITS_SCUalive._ext = None
    
    #-----< AliveMessage >-----#
    AliveMessage = INT(name='AliveMessage', mode=MODE_TYPE)
    AliveMessage._cont = ASN1Dict([('alive', 0), ('delete', 1), ('new', 255)])
    AliveMessage._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< ITS-SCUtype >-----#
    ITS_SCUtype = INT(name='ITS-SCUtype', mode=MODE_TYPE)
    ITS_SCUtype._cont = ASN1Dict([('unknown', 0), ('host', 1), ('router', 2), ('itsTestSystem', 3), ('itsTestCIunit', 4), ('any', 255)])
    ITS_SCUtype._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< SimUt >-----#
    SimUt = SEQ(name='SimUt', mode=MODE_TYPE)
    _SimUt_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SimUt_fill._const_sz = ASN1Set(rv=[3], rr=[], ev=None, er=[])
    _SimUt_action = CHOICE(name='action', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __SimUt_action_mfCmdReq = SEQ(name='mfCmdReq', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'MF-Command-request')))
    __SimUt_action_mfCmdConf = SEQ(name='mfCmdConf', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'MF-Command-confirm')))
    __SimUt_action_mnCmdReq = SEQ(name='mnCmdReq', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'MN-Command-request')))
    __SimUt_action_mnCmdConf = SEQ(name='mnCmdConf', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'MN-Command-confirm')))
    __SimUt_action_miCmdReq = SEQ(name='miCmdReq', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'MI-Command-request')))
    __SimUt_action_miCmdConf = SEQ(name='miCmdConf', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'MI-Command-confirm')))
    __SimUt_action_maCmdReq = SEQ(name='maCmdReq', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'MA-Command-request')))
    __SimUt_action_maCmdConf = SEQ(name='maCmdConf', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'MA-Command-confirm')))
    __SimUt_action_mfReqReq = SEQ(name='mfReqReq', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'MF-Request-request')))
    __SimUt_action_mfReqConf = SEQ(name='mfReqConf', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'MF-Request-confirm')))
    __SimUt_action_mnReqReq = SEQ(name='mnReqReq', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'MN-Request-request')))
    __SimUt_action_mnReqConf = SEQ(name='mnReqConf', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'MN-Request-confirm')))
    __SimUt_action_miReqReq = SEQ(name='miReqReq', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'MI-Request-request')))
    __SimUt_action_miReqConf = SEQ(name='miReqConf', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'MI-Request-confirm')))
    __SimUt_action_maReqReq = SEQ(name='maReqReq', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'MA-Request-request')))
    __SimUt_action_maReqConf = SEQ(name='maReqConf', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'MA-Request-confirm')))
    __SimUt_action_miGetReq = SEQ(name='miGetReq', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'MI-Get-request')))
    __SimUt_action_miGetConf = SEQ(name='miGetConf', mode=MODE_TYPE, tag=(17, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'MI-Get-confirm')))
    __SimUt_action_miSetReq = SEQ(name='miSetReq', mode=MODE_TYPE, tag=(18, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'MI-Set-request')))
    __SimUt_action_miSetConf = SEQ(name='miSetConf', mode=MODE_TYPE, tag=(19, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'MI-Set-confirm')))
    __SimUt_action_mcmdTrigger = SEQ(name='mcmdTrigger', mode=MODE_TYPE, tag=(20, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMiitsscu', 'McmdRq')))
    __SimUt_action_mcmdEvent = SEQ(name='mcmdEvent', mode=MODE_TYPE, tag=(21, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMiitsscu', 'McmdRs')))
    _SimUt_action._cont = ASN1Dict([
        ('mfCmdReq', __SimUt_action_mfCmdReq),
        ('mfCmdConf', __SimUt_action_mfCmdConf),
        ('mnCmdReq', __SimUt_action_mnCmdReq),
        ('mnCmdConf', __SimUt_action_mnCmdConf),
        ('miCmdReq', __SimUt_action_miCmdReq),
        ('miCmdConf', __SimUt_action_miCmdConf),
        ('maCmdReq', __SimUt_action_maCmdReq),
        ('maCmdConf', __SimUt_action_maCmdConf),
        ('mfReqReq', __SimUt_action_mfReqReq),
        ('mfReqConf', __SimUt_action_mfReqConf),
        ('mnReqReq', __SimUt_action_mnReqReq),
        ('mnReqConf', __SimUt_action_mnReqConf),
        ('miReqReq', __SimUt_action_miReqReq),
        ('miReqConf', __SimUt_action_miReqConf),
        ('maReqReq', __SimUt_action_maReqReq),
        ('maReqConf', __SimUt_action_maReqConf),
        ('miGetReq', __SimUt_action_miGetReq),
        ('miGetConf', __SimUt_action_miGetConf),
        ('miSetReq', __SimUt_action_miSetReq),
        ('miSetConf', __SimUt_action_miSetConf),
        ('mcmdTrigger', __SimUt_action_mcmdTrigger),
        ('mcmdEvent', __SimUt_action_mcmdEvent),
        ])
    _SimUt_action._ext = None
    SimUt._cont = ASN1Dict([
        ('fill', _SimUt_fill),
        ('action', _SimUt_action),
        ])
    SimUt._ext = None
    
    #-----< RefMcmdRq >-----#
    RefMcmdRq = INT(name='RefMcmdRq', mode=MODE_TYPE)
    RefMcmdRq._cont = ASN1Dict([('c-pingRq', 0), ('c-vCIinfoRq', 1), ('c-vCIupdateRq', 2), ('c-getParam24102Rq', 3), ('c-setParam24102Rq', 4), ('c-testIicpRq', 254), ('c-testConfigRq', 255)])
    RefMcmdRq._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< MCMDREQ >-----#
    MCMDREQ = CLASS(name='MCMDREQ', mode=MODE_TYPE)
    _MCMDREQ_refMcmd = INT(name='refMcmd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'RefMcmdRq')), uniq=True)
    _MCMDREQ_Mcmd = OPEN(name='Mcmd', mode=MODE_TYPE)
    MCMDREQ._cont = ASN1Dict([
        ('refMcmd', _MCMDREQ_refMcmd),
        ('Mcmd', _MCMDREQ_Mcmd),
        ])
    
    #-----< McmdReqs >-----#
    McmdReqs = CLASS(name='McmdReqs', mode=MODE_SET, typeref=ASN1RefType(('CALMiitsscu', 'MCMDREQ')))
    _McmdReqs_val_Mcmd_0 = OCT_STR(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'PingIICP')))
    _McmdReqs_val_Mcmd_1 = SEQ(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'VCI-info-req')))
    _McmdReqs_val_Mcmd_2 = SEQ_OF(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'VCI-update-req')))
    _McmdReqs_val_Mcmd_3 = INT(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'Param24102No')))
    _McmdReqs_val_Mcmd_4 = SEQ(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'Param24102')))
    _McmdReqs_val_Mcmd_5 = SEQ(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'TestConfigIICP')))
    McmdReqs._val = ASN1Set(rv=[dict([('refMcmd', 0), ('Mcmd', _McmdReqs_val_Mcmd_0)]), dict([('refMcmd', 1), ('Mcmd', _McmdReqs_val_Mcmd_1)]), dict([('refMcmd', 2), ('Mcmd', _McmdReqs_val_Mcmd_2)]), dict([('refMcmd', 3), ('Mcmd', _McmdReqs_val_Mcmd_3)]), dict([('refMcmd', 4), ('Mcmd', _McmdReqs_val_Mcmd_4)]), dict([('refMcmd', 255), ('Mcmd', _McmdReqs_val_Mcmd_5)])], rr=[], ev=[], er=[])
    
    #-----< McmdRq >-----#
    McmdRq = SEQ(name='McmdRq', mode=MODE_TYPE)
    _McmdRq_mCmdRef = INT(name='mCmdRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMiitsscu', 'MCMDREQ'), ['refMcmd']))
    __McmdRq_mCmdRef_tab = CLASS(name='_tab_MCMDREQ', mode=MODE_SET, typeref=ASN1RefType(('CALMiitsscu', 'MCMDREQ')))
    ___McmdRq_mCmdRef_tab_val_Mcmd_0 = OCT_STR(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'PingIICP')))
    ___McmdRq_mCmdRef_tab_val_Mcmd_1 = SEQ(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'VCI-info-req')))
    ___McmdRq_mCmdRef_tab_val_Mcmd_2 = SEQ_OF(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'VCI-update-req')))
    ___McmdRq_mCmdRef_tab_val_Mcmd_3 = INT(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'Param24102No')))
    ___McmdRq_mCmdRef_tab_val_Mcmd_4 = SEQ(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'Param24102')))
    ___McmdRq_mCmdRef_tab_val_Mcmd_5 = SEQ(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'TestConfigIICP')))
    __McmdRq_mCmdRef_tab._val = ASN1Set(rv=[dict([('refMcmd', 0), ('Mcmd', ___McmdRq_mCmdRef_tab_val_Mcmd_0)]), dict([('refMcmd', 1), ('Mcmd', ___McmdRq_mCmdRef_tab_val_Mcmd_1)]), dict([('refMcmd', 2), ('Mcmd', ___McmdRq_mCmdRef_tab_val_Mcmd_2)]), dict([('refMcmd', 3), ('Mcmd', ___McmdRq_mCmdRef_tab_val_Mcmd_3)]), dict([('refMcmd', 4), ('Mcmd', ___McmdRq_mCmdRef_tab_val_Mcmd_4)]), dict([('refMcmd', 255), ('Mcmd', ___McmdRq_mCmdRef_tab_val_Mcmd_5)])], rr=[], ev=None, er=[])
    _McmdRq_mCmdRef._const_tab = __McmdRq_mCmdRef_tab
    _McmdRq_mCmdRef._const_tab_at = None
    _McmdRq_mCmdRef._const_tab_id = 'refMcmd'
    _McmdRq_mcmd = OPEN(name='mcmd', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMiitsscu', 'MCMDREQ'), ['Mcmd']))
    _McmdRq_mcmd._const_tab = __McmdRq_mCmdRef_tab
    _McmdRq_mcmd._const_tab_at = ('..', 'mCmdRef')
    _McmdRq_mcmd._const_tab_id = 'Mcmd'
    McmdRq._cont = ASN1Dict([
        ('mCmdRef', _McmdRq_mCmdRef),
        ('mcmd', _McmdRq_mcmd),
        ])
    McmdRq._ext = None
    
    #-----< pingRq >-----#
    pingRq = CLASS(name='pingRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'MCMDREQ')))
    _pingRq_val_Mcmd = OCT_STR(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'PingIICP')))
    pingRq._val = dict([('refMcmd', 0), ('Mcmd', _pingRq_val_Mcmd)])
    
    #-----< vCIinfoRq >-----#
    vCIinfoRq = CLASS(name='vCIinfoRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'MCMDREQ')))
    _vCIinfoRq_val_Mcmd = SEQ(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'VCI-info-req')))
    vCIinfoRq._val = dict([('refMcmd', 1), ('Mcmd', _vCIinfoRq_val_Mcmd)])
    
    #-----< vCIupdateRq >-----#
    vCIupdateRq = CLASS(name='vCIupdateRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'MCMDREQ')))
    _vCIupdateRq_val_Mcmd = SEQ_OF(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'VCI-update-req')))
    vCIupdateRq._val = dict([('refMcmd', 2), ('Mcmd', _vCIupdateRq_val_Mcmd)])
    
    #-----< getParam24102Rq >-----#
    getParam24102Rq = CLASS(name='getParam24102Rq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'MCMDREQ')))
    _getParam24102Rq_val_Mcmd = INT(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'Param24102No')))
    getParam24102Rq._val = dict([('refMcmd', 3), ('Mcmd', _getParam24102Rq_val_Mcmd)])
    
    #-----< setParam24102Rq >-----#
    setParam24102Rq = CLASS(name='setParam24102Rq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'MCMDREQ')))
    _setParam24102Rq_val_Mcmd = SEQ(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'Param24102')))
    setParam24102Rq._val = dict([('refMcmd', 4), ('Mcmd', _setParam24102Rq_val_Mcmd)])
    
    #-----< testConfigRq >-----#
    testConfigRq = CLASS(name='testConfigRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'MCMDREQ')))
    _testConfigRq_val_Mcmd = SEQ(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'TestConfigIICP')))
    testConfigRq._val = dict([('refMcmd', 255), ('Mcmd', _testConfigRq_val_Mcmd)])
    
    #-----< PingIICP >-----#
    PingIICP = OCT_STR(name='PingIICP', mode=MODE_TYPE)
    PingIICP._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< VCI-info-req >-----#
    VCI_info_req = SEQ(name='VCI-info-req', mode=MODE_TYPE)
    _VCI_info_req_medType = INT(name='medType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'MedType')))
    _VCI_info_req_ciaClass = INT(name='ciaClass', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'CIaClass')))
    _VCI_info_req_ciClass = INT(name='ciClass', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'CIclass')))
    VCI_info_req._cont = ASN1Dict([
        ('medType', _VCI_info_req_medType),
        ('ciaClass', _VCI_info_req_ciaClass),
        ('ciClass', _VCI_info_req_ciClass),
        ])
    VCI_info_req._ext = None
    
    #-----< VCI-update-req >-----#
    VCI_update_req = SEQ_OF(name='VCI-update-req', mode=MODE_TYPE)
    _VCI_update_req__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'VCI-Info')))
    VCI_update_req._cont = _VCI_update_req__item_
    VCI_update_req._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< VCI-Info >-----#
    VCI_Info = SEQ(name='VCI-Info', mode=MODE_TYPE)
    _VCI_Info_linkId = SEQ(name='linkId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _VCI_Info_medType = INT(name='medType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'MedType')))
    _VCI_Info_ciaClass = INT(name='ciaClass', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'CIaClass')))
    _VCI_Info_ciClass = INT(name='ciClass', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'CIclass')))
    _VCI_Info_status = INT(name='status', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'CIstatus')))
    VCI_Info._cont = ASN1Dict([
        ('linkId', _VCI_Info_linkId),
        ('medType', _VCI_Info_medType),
        ('ciaClass', _VCI_Info_ciaClass),
        ('ciClass', _VCI_Info_ciClass),
        ('status', _VCI_Info_status),
        ])
    VCI_Info._ext = None
    
    #-----< TestConfigIICP >-----#
    TestConfigIICP = SEQ(name='TestConfigIICP', mode=MODE_TYPE)
    _TestConfigIICP_location = BIT_STR(name='location', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TestConfigIICP_location._const_sz = ASN1Set(rv=[6], rr=[], ev=None, er=[])
    _TestConfigIICP_lowerLayers = BIT_STR(name='lowerLayers', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TestConfigIICP_lowerLayers._const_sz = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    _TestConfigIICP_testMode = BIT_STR(name='testMode', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TestConfigIICP_testMode._const_sz = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    TestConfigIICP._cont = ASN1Dict([
        ('location', _TestConfigIICP_location),
        ('lowerLayers', _TestConfigIICP_lowerLayers),
        ('testMode', _TestConfigIICP_testMode),
        ])
    TestConfigIICP._ext = None
    
    #-----< IIC-Response >-----#
    IIC_Response = SEQ(name='IIC-Response', mode=MODE_TYPE)
    _IIC_Response_sourceITS_scuId = INT(name='sourceITS-scuId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ITS-scuId')))
    _IIC_Response_destinationITS_scuId = INT(name='destinationITS-scuId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ITS-scuId')))
    _IIC_Response_pduCounter = INT(name='pduCounter', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMiitsscu', 'PduCounter')))
    _IIC_Response_responseID = INT(name='responseID', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMiitsscu', 'ResponseID')))
    _IIC_Response_pduResponse = SEQ(name='pduResponse', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMiitsscu', 'PduResponse')))
    _IIC_Response_errorStatus = INT(name='errorStatus', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMiitsscu', 'PduErrStatus')))
    _IIC_Response_secRs = SEQ(name='secRs', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMiitsscu', 'SecRs')))
    IIC_Response._cont = ASN1Dict([
        ('sourceITS-scuId', _IIC_Response_sourceITS_scuId),
        ('destinationITS-scuId', _IIC_Response_destinationITS_scuId),
        ('pduCounter', _IIC_Response_pduCounter),
        ('responseID', _IIC_Response_responseID),
        ('pduResponse', _IIC_Response_pduResponse),
        ('errorStatus', _IIC_Response_errorStatus),
        ('secRs', _IIC_Response_secRs),
        ])
    IIC_Response._ext = None
    
    #-----< ResponseID >-----#
    ResponseID = INT(name='ResponseID', mode=MODE_TYPE)
    ResponseID._cont = ASN1Dict([('response', 1)])
    ResponseID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< IICPRES >-----#
    IICPRES = CLASS(name='IICPRES', mode=MODE_TYPE)
    _IICPRES_ref = INT(name='ref', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'RefIICP')), uniq=True)
    _IICPRES_IICPresponse = OPEN(name='IICPresponse', mode=MODE_TYPE)
    IICPRES._cont = ASN1Dict([
        ('ref', _IICPRES_ref),
        ('IICPresponse', _IICPRES_IICPresponse),
        ])
    
    #-----< IICPresponses >-----#
    IICPresponses = CLASS(name='IICPresponses', mode=MODE_SET, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _IICPresponses_val_IICPresponse_0 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'ITS-SCUalive')))
    _IICPresponses_val_IICPresponse_1 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MF-Command-confirm')))
    _IICPresponses_val_IICPresponse_2 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MF-Request-confirm')))
    _IICPresponses_val_IICPresponse_3 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MN-Command-confirm')))
    _IICPresponses_val_IICPresponse_4 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MN-Request-confirm')))
    _IICPresponses_val_IICPresponse_5 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Command-confirm')))
    _IICPresponses_val_IICPresponse_6 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Request-confirm')))
    _IICPresponses_val_IICPresponse_7 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Get-confirm')))
    _IICPresponses_val_IICPresponse_8 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Set-confirm')))
    _IICPresponses_val_IICPresponse_9 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'McmdRs')))
    _IICPresponses_val_IICPresponse_10 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MA-Command-confirm')))
    _IICPresponses_val_IICPresponse_11 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MA-Request-confirm')))
    _IICPresponses_val_IICPresponse_12 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MS-Command-confirm')))
    _IICPresponses_val_IICPresponse_13 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MS-Request-confirm')))
    _IICPresponses_val_IICPresponse_14 = NULL(name='IICPresponse', mode=MODE_TYPE)
    _IICPresponses_val_IICPresponse_15 = NULL(name='IICPresponse', mode=MODE_TYPE)
    _IICPresponses_val_IICPresponse_16 = NULL(name='IICPresponse', mode=MODE_TYPE)
    _IICPresponses_val_IICPresponse_17 = NULL(name='IICPresponse', mode=MODE_TYPE)
    _IICPresponses_val_IICPresponse_18 = NULL(name='IICPresponse', mode=MODE_TYPE)
    _IICPresponses_val_IICPresponse_19 = NULL(name='IICPresponse', mode=MODE_TYPE)
    _IICPresponses_val_IICPresponse_20 = NULL(name='IICPresponse', mode=MODE_TYPE)
    _IICPresponses_val_IICPresponse_21 = NULL(name='IICPresponse', mode=MODE_TYPE)
    _IICPresponses_val_IICPresponse_22 = NULL(name='IICPresponse', mode=MODE_TYPE)
    _IICPresponses_val_IICPresponse_23 = NULL(name='IICPresponse', mode=MODE_TYPE)
    _IICPresponses_val_IICPresponse_24 = NULL(name='IICPresponse', mode=MODE_TYPE)
    _IICPresponses_val_IICPresponse_25 = NULL(name='IICPresponse', mode=MODE_TYPE)
    _IICPresponses_val_IICPresponse_26 = NULL(name='IICPresponse', mode=MODE_TYPE)
    _IICPresponses_val_IICPresponse_27 = NULL(name='IICPresponse', mode=MODE_TYPE)
    _IICPresponses_val_IICPresponse_28 = NULL(name='IICPresponse', mode=MODE_TYPE)
    _IICPresponses_val_IICPresponse_29 = NULL(name='IICPresponse', mode=MODE_TYPE)
    IICPresponses._val = ASN1Set(rv=[dict([('ref', 0), ('IICPresponse', _IICPresponses_val_IICPresponse_0)]), dict([('ref', 1), ('IICPresponse', _IICPresponses_val_IICPresponse_1)]), dict([('ref', 2), ('IICPresponse', _IICPresponses_val_IICPresponse_2)]), dict([('ref', 3), ('IICPresponse', _IICPresponses_val_IICPresponse_3)]), dict([('ref', 4), ('IICPresponse', _IICPresponses_val_IICPresponse_4)]), dict([('ref', 5), ('IICPresponse', _IICPresponses_val_IICPresponse_5)]), dict([('ref', 6), ('IICPresponse', _IICPresponses_val_IICPresponse_6)]), dict([('ref', 7), ('IICPresponse', _IICPresponses_val_IICPresponse_7)]), dict([('ref', 8), ('IICPresponse', _IICPresponses_val_IICPresponse_8)]), dict([('ref', 9), ('IICPresponse', _IICPresponses_val_IICPresponse_9)]), dict([('ref', 10), ('IICPresponse', _IICPresponses_val_IICPresponse_10)]), dict([('ref', 11), ('IICPresponse', _IICPresponses_val_IICPresponse_11)]), dict([('ref', 12), ('IICPresponse', _IICPresponses_val_IICPresponse_12)]), dict([('ref', 13), ('IICPresponse', _IICPresponses_val_IICPresponse_13)]), dict([('ref', 242), ('IICPresponse', _IICPresponses_val_IICPresponse_14)]), dict([('ref', 243), ('IICPresponse', _IICPresponses_val_IICPresponse_15)]), dict([('ref', 244), ('IICPresponse', _IICPresponses_val_IICPresponse_16)]), dict([('ref', 245), ('IICPresponse', _IICPresponses_val_IICPresponse_17)]), dict([('ref', 246), ('IICPresponse', _IICPresponses_val_IICPresponse_18)]), dict([('ref', 247), ('IICPresponse', _IICPresponses_val_IICPresponse_19)]), dict([('ref', 248), ('IICPresponse', _IICPresponses_val_IICPresponse_20)]), dict([('ref', 249), ('IICPresponse', _IICPresponses_val_IICPresponse_21)]), dict([('ref', 250), ('IICPresponse', _IICPresponses_val_IICPresponse_22)]), dict([('ref', 251), ('IICPresponse', _IICPresponses_val_IICPresponse_23)]), dict([('ref', 252), ('IICPresponse', _IICPresponses_val_IICPresponse_24)]), dict([('ref', 253), ('IICPresponse', _IICPresponses_val_IICPresponse_25)]), dict([('ref', 254), ('IICPresponse', _IICPresponses_val_IICPresponse_26)]), dict([('ref', 255), ('IICPresponse', _IICPresponses_val_IICPresponse_27)]), dict([('ref', 240), ('IICPresponse', _IICPresponses_val_IICPresponse_28)]), dict([('ref', 241), ('IICPresponse', _IICPresponses_val_IICPresponse_29)])], rr=[], ev=[], er=[])
    
    #-----< PduResponse >-----#
    PduResponse = SEQ(name='PduResponse', mode=MODE_TYPE)
    _PduResponse_resRef = INT(name='resRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMiitsscu', 'IICPRES'), ['ref']))
    __PduResponse_resRef_tab = CLASS(name='_tab_IICPRES', mode=MODE_SET, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    ___PduResponse_resRef_tab_val_IICPresponse_0 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'ITS-SCUalive')))
    ___PduResponse_resRef_tab_val_IICPresponse_1 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MF-Command-confirm')))
    ___PduResponse_resRef_tab_val_IICPresponse_2 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MF-Request-confirm')))
    ___PduResponse_resRef_tab_val_IICPresponse_3 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MN-Command-confirm')))
    ___PduResponse_resRef_tab_val_IICPresponse_4 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MN-Request-confirm')))
    ___PduResponse_resRef_tab_val_IICPresponse_5 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Command-confirm')))
    ___PduResponse_resRef_tab_val_IICPresponse_6 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Request-confirm')))
    ___PduResponse_resRef_tab_val_IICPresponse_7 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Get-confirm')))
    ___PduResponse_resRef_tab_val_IICPresponse_8 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Set-confirm')))
    ___PduResponse_resRef_tab_val_IICPresponse_9 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'McmdRs')))
    ___PduResponse_resRef_tab_val_IICPresponse_10 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MA-Command-confirm')))
    ___PduResponse_resRef_tab_val_IICPresponse_11 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MA-Request-confirm')))
    ___PduResponse_resRef_tab_val_IICPresponse_12 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MS-Command-confirm')))
    ___PduResponse_resRef_tab_val_IICPresponse_13 = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MS-Request-confirm')))
    ___PduResponse_resRef_tab_val_IICPresponse_14 = NULL(name='IICPresponse', mode=MODE_TYPE)
    ___PduResponse_resRef_tab_val_IICPresponse_15 = NULL(name='IICPresponse', mode=MODE_TYPE)
    ___PduResponse_resRef_tab_val_IICPresponse_16 = NULL(name='IICPresponse', mode=MODE_TYPE)
    ___PduResponse_resRef_tab_val_IICPresponse_17 = NULL(name='IICPresponse', mode=MODE_TYPE)
    ___PduResponse_resRef_tab_val_IICPresponse_18 = NULL(name='IICPresponse', mode=MODE_TYPE)
    ___PduResponse_resRef_tab_val_IICPresponse_19 = NULL(name='IICPresponse', mode=MODE_TYPE)
    ___PduResponse_resRef_tab_val_IICPresponse_20 = NULL(name='IICPresponse', mode=MODE_TYPE)
    ___PduResponse_resRef_tab_val_IICPresponse_21 = NULL(name='IICPresponse', mode=MODE_TYPE)
    ___PduResponse_resRef_tab_val_IICPresponse_22 = NULL(name='IICPresponse', mode=MODE_TYPE)
    ___PduResponse_resRef_tab_val_IICPresponse_23 = NULL(name='IICPresponse', mode=MODE_TYPE)
    ___PduResponse_resRef_tab_val_IICPresponse_24 = NULL(name='IICPresponse', mode=MODE_TYPE)
    ___PduResponse_resRef_tab_val_IICPresponse_25 = NULL(name='IICPresponse', mode=MODE_TYPE)
    ___PduResponse_resRef_tab_val_IICPresponse_26 = NULL(name='IICPresponse', mode=MODE_TYPE)
    ___PduResponse_resRef_tab_val_IICPresponse_27 = NULL(name='IICPresponse', mode=MODE_TYPE)
    ___PduResponse_resRef_tab_val_IICPresponse_28 = NULL(name='IICPresponse', mode=MODE_TYPE)
    ___PduResponse_resRef_tab_val_IICPresponse_29 = NULL(name='IICPresponse', mode=MODE_TYPE)
    __PduResponse_resRef_tab._val = ASN1Set(rv=[dict([('ref', 0), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_0)]), dict([('ref', 1), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_1)]), dict([('ref', 2), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_2)]), dict([('ref', 3), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_3)]), dict([('ref', 4), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_4)]), dict([('ref', 5), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_5)]), dict([('ref', 6), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_6)]), dict([('ref', 7), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_7)]), dict([('ref', 8), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_8)]), dict([('ref', 9), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_9)]), dict([('ref', 10), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_10)]), dict([('ref', 11), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_11)]), dict([('ref', 12), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_12)]), dict([('ref', 13), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_13)]), dict([('ref', 242), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_14)]), dict([('ref', 243), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_15)]), dict([('ref', 244), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_16)]), dict([('ref', 245), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_17)]), dict([('ref', 246), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_18)]), dict([('ref', 247), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_19)]), dict([('ref', 248), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_20)]), dict([('ref', 249), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_21)]), dict([('ref', 250), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_22)]), dict([('ref', 251), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_23)]), dict([('ref', 252), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_24)]), dict([('ref', 253), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_25)]), dict([('ref', 254), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_26)]), dict([('ref', 255), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_27)]), dict([('ref', 240), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_28)]), dict([('ref', 241), ('IICPresponse', ___PduResponse_resRef_tab_val_IICPresponse_29)])], rr=[], ev=None, er=[])
    _PduResponse_resRef._const_tab = __PduResponse_resRef_tab
    _PduResponse_resRef._const_tab_at = None
    _PduResponse_resRef._const_tab_id = 'ref'
    _PduResponse_iicpRes = OPEN(name='iicpRes', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMiitsscu', 'IICPRES'), ['IICPresponse']))
    _PduResponse_iicpRes._const_tab = __PduResponse_resRef_tab
    _PduResponse_iicpRes._const_tab_at = ('..', 'resRef')
    _PduResponse_iicpRes._const_tab_id = 'IICPresponse'
    PduResponse._cont = ASN1Dict([
        ('resRef', _PduResponse_resRef),
        ('iicpRes', _PduResponse_iicpRes),
        ])
    PduResponse._ext = None
    
    #-----< aliveRs >-----#
    aliveRs = CLASS(name='aliveRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _aliveRs_val_IICPresponse = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'ITS-SCUalive')))
    aliveRs._val = dict([('ref', 0), ('IICPresponse', _aliveRs_val_IICPresponse)])
    
    #-----< mfRcmdRs >-----#
    mfRcmdRs = CLASS(name='mfRcmdRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _mfRcmdRs_val_IICPresponse = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MF-Command-confirm')))
    mfRcmdRs._val = dict([('ref', 1), ('IICPresponse', _mfRcmdRs_val_IICPresponse)])
    
    #-----< mfRreqRs >-----#
    mfRreqRs = CLASS(name='mfRreqRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _mfRreqRs_val_IICPresponse = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MF-Request-confirm')))
    mfRreqRs._val = dict([('ref', 2), ('IICPresponse', _mfRreqRs_val_IICPresponse)])
    
    #-----< mnRcmdRs >-----#
    mnRcmdRs = CLASS(name='mnRcmdRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _mnRcmdRs_val_IICPresponse = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MN-Command-confirm')))
    mnRcmdRs._val = dict([('ref', 3), ('IICPresponse', _mnRcmdRs_val_IICPresponse)])
    
    #-----< mnRreqRs >-----#
    mnRreqRs = CLASS(name='mnRreqRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _mnRreqRs_val_IICPresponse = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MN-Request-confirm')))
    mnRreqRs._val = dict([('ref', 4), ('IICPresponse', _mnRreqRs_val_IICPresponse)])
    
    #-----< miRcmdRs >-----#
    miRcmdRs = CLASS(name='miRcmdRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _miRcmdRs_val_IICPresponse = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Command-confirm')))
    miRcmdRs._val = dict([('ref', 5), ('IICPresponse', _miRcmdRs_val_IICPresponse)])
    
    #-----< miRreqRs >-----#
    miRreqRs = CLASS(name='miRreqRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _miRreqRs_val_IICPresponse = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Request-confirm')))
    miRreqRs._val = dict([('ref', 6), ('IICPresponse', _miRreqRs_val_IICPresponse)])
    
    #-----< miRgetRs >-----#
    miRgetRs = CLASS(name='miRgetRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _miRgetRs_val_IICPresponse = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Get-confirm')))
    miRgetRs._val = dict([('ref', 7), ('IICPresponse', _miRgetRs_val_IICPresponse)])
    
    #-----< miRsetRs >-----#
    miRsetRs = CLASS(name='miRsetRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _miRsetRs_val_IICPresponse = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MI-Set-confirm')))
    miRsetRs._val = dict([('ref', 8), ('IICPresponse', _miRsetRs_val_IICPresponse)])
    
    #-----< mCmdRs >-----#
    mCmdRs = CLASS(name='mCmdRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _mCmdRs_val_IICPresponse = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'McmdRs')))
    mCmdRs._val = dict([('ref', 9), ('IICPresponse', _mCmdRs_val_IICPresponse)])
    
    #-----< maRcmdRs >-----#
    maRcmdRs = CLASS(name='maRcmdRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _maRcmdRs_val_IICPresponse = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MA-Command-confirm')))
    maRcmdRs._val = dict([('ref', 10), ('IICPresponse', _maRcmdRs_val_IICPresponse)])
    
    #-----< maRreqRs >-----#
    maRreqRs = CLASS(name='maRreqRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _maRreqRs_val_IICPresponse = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MA-Request-confirm')))
    maRreqRs._val = dict([('ref', 11), ('IICPresponse', _maRreqRs_val_IICPresponse)])
    
    #-----< msRcmdRs >-----#
    msRcmdRs = CLASS(name='msRcmdRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _msRcmdRs_val_IICPresponse = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MS-Command-confirm')))
    msRcmdRs._val = dict([('ref', 12), ('IICPresponse', _msRcmdRs_val_IICPresponse)])
    
    #-----< msRreqRs >-----#
    msRreqRs = CLASS(name='msRreqRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _msRreqRs_val_IICPresponse = SEQ(name='IICPresponse', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MS-Request-confirm')))
    msRreqRs._val = dict([('ref', 13), ('IICPresponse', _msRreqRs_val_IICPresponse)])
    
    #-----< simAutCmdRs >-----#
    simAutCmdRs = CLASS(name='simAutCmdRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _simAutCmdRs_val_IICPresponse = NULL(name='IICPresponse', mode=MODE_TYPE)
    simAutCmdRs._val = dict([('ref', 242), ('IICPresponse', _simAutCmdRs_val_IICPresponse)])
    
    #-----< simAutReqRs >-----#
    simAutReqRs = CLASS(name='simAutReqRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _simAutReqRs_val_IICPresponse = NULL(name='IICPresponse', mode=MODE_TYPE)
    simAutReqRs._val = dict([('ref', 243), ('IICPresponse', _simAutReqRs_val_IICPresponse)])
    
    #-----< simFutCmdRs >-----#
    simFutCmdRs = CLASS(name='simFutCmdRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _simFutCmdRs_val_IICPresponse = NULL(name='IICPresponse', mode=MODE_TYPE)
    simFutCmdRs._val = dict([('ref', 244), ('IICPresponse', _simFutCmdRs_val_IICPresponse)])
    
    #-----< simFutReqRs >-----#
    simFutReqRs = CLASS(name='simFutReqRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _simFutReqRs_val_IICPresponse = NULL(name='IICPresponse', mode=MODE_TYPE)
    simFutReqRs._val = dict([('ref', 245), ('IICPresponse', _simFutReqRs_val_IICPresponse)])
    
    #-----< simNutCmdRs >-----#
    simNutCmdRs = CLASS(name='simNutCmdRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _simNutCmdRs_val_IICPresponse = NULL(name='IICPresponse', mode=MODE_TYPE)
    simNutCmdRs._val = dict([('ref', 246), ('IICPresponse', _simNutCmdRs_val_IICPresponse)])
    
    #-----< simNutReqRs >-----#
    simNutReqRs = CLASS(name='simNutReqRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _simNutReqRs_val_IICPresponse = NULL(name='IICPresponse', mode=MODE_TYPE)
    simNutReqRs._val = dict([('ref', 247), ('IICPresponse', _simNutReqRs_val_IICPresponse)])
    
    #-----< simIutCmdRs >-----#
    simIutCmdRs = CLASS(name='simIutCmdRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _simIutCmdRs_val_IICPresponse = NULL(name='IICPresponse', mode=MODE_TYPE)
    simIutCmdRs._val = dict([('ref', 248), ('IICPresponse', _simIutCmdRs_val_IICPresponse)])
    
    #-----< simIutReqRs >-----#
    simIutReqRs = CLASS(name='simIutReqRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _simIutReqRs_val_IICPresponse = NULL(name='IICPresponse', mode=MODE_TYPE)
    simIutReqRs._val = dict([('ref', 249), ('IICPresponse', _simIutReqRs_val_IICPresponse)])
    
    #-----< simAltCmdRs >-----#
    simAltCmdRs = CLASS(name='simAltCmdRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _simAltCmdRs_val_IICPresponse = NULL(name='IICPresponse', mode=MODE_TYPE)
    simAltCmdRs._val = dict([('ref', 250), ('IICPresponse', _simAltCmdRs_val_IICPresponse)])
    
    #-----< simAltReqRs >-----#
    simAltReqRs = CLASS(name='simAltReqRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _simAltReqRs_val_IICPresponse = NULL(name='IICPresponse', mode=MODE_TYPE)
    simAltReqRs._val = dict([('ref', 251), ('IICPresponse', _simAltReqRs_val_IICPresponse)])
    
    #-----< simFltCmdRs >-----#
    simFltCmdRs = CLASS(name='simFltCmdRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _simFltCmdRs_val_IICPresponse = NULL(name='IICPresponse', mode=MODE_TYPE)
    simFltCmdRs._val = dict([('ref', 252), ('IICPresponse', _simFltCmdRs_val_IICPresponse)])
    
    #-----< simFltReqRs >-----#
    simFltReqRs = CLASS(name='simFltReqRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _simFltReqRs_val_IICPresponse = NULL(name='IICPresponse', mode=MODE_TYPE)
    simFltReqRs._val = dict([('ref', 253), ('IICPresponse', _simFltReqRs_val_IICPresponse)])
    
    #-----< simNltReqRs >-----#
    simNltReqRs = CLASS(name='simNltReqRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _simNltReqRs_val_IICPresponse = NULL(name='IICPresponse', mode=MODE_TYPE)
    simNltReqRs._val = dict([('ref', 255), ('IICPresponse', _simNltReqRs_val_IICPresponse)])
    
    #-----< simNltCmdRs >-----#
    simNltCmdRs = CLASS(name='simNltCmdRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _simNltCmdRs_val_IICPresponse = NULL(name='IICPresponse', mode=MODE_TYPE)
    simNltCmdRs._val = dict([('ref', 254), ('IICPresponse', _simNltCmdRs_val_IICPresponse)])
    
    #-----< simUtInRs >-----#
    simUtInRs = CLASS(name='simUtInRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _simUtInRs_val_IICPresponse = NULL(name='IICPresponse', mode=MODE_TYPE)
    simUtInRs._val = dict([('ref', 240), ('IICPresponse', _simUtInRs_val_IICPresponse)])
    
    #-----< simUtOutRs >-----#
    simUtOutRs = CLASS(name='simUtOutRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'IICPRES')))
    _simUtOutRs_val_IICPresponse = NULL(name='IICPresponse', mode=MODE_TYPE)
    simUtOutRs._val = dict([('ref', 241), ('IICPresponse', _simUtOutRs_val_IICPresponse)])
    
    #-----< RefMcmdRs >-----#
    RefMcmdRs = INT(name='RefMcmdRs', mode=MODE_TYPE)
    RefMcmdRs._cont = ASN1Dict([('c-pingRs', 0), ('c-vCIinfoRs', 1), ('c-vCIupdateRs', 2), ('c-getParam24102Rs', 3), ('c-setParam24102Rs', 4), ('c-testIicpRs', 254), ('c-testConfigRs', 255)])
    RefMcmdRs._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< MCMDRES >-----#
    MCMDRES = CLASS(name='MCMDRES', mode=MODE_TYPE)
    _MCMDRES_refMcmd = INT(name='refMcmd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'RefMcmdRs')), uniq=True)
    _MCMDRES_Mcmd = OPEN(name='Mcmd', mode=MODE_TYPE)
    MCMDRES._cont = ASN1Dict([
        ('refMcmd', _MCMDRES_refMcmd),
        ('Mcmd', _MCMDRES_Mcmd),
        ])
    
    #-----< McmdRess >-----#
    McmdRess = CLASS(name='McmdRess', mode=MODE_SET, typeref=ASN1RefType(('CALMiitsscu', 'MCMDRES')))
    _McmdRess_val_Mcmd_0 = OCT_STR(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'PingIICP')))
    _McmdRess_val_Mcmd_1 = SEQ_OF(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'VCI-info-res')))
    _McmdRess_val_Mcmd_2 = NULL(name='Mcmd', mode=MODE_TYPE)
    _McmdRess_val_Mcmd_3 = SEQ(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'Param24102')))
    _McmdRess_val_Mcmd_4 = INT(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'ErrStatus')))
    _McmdRess_val_Mcmd_5 = NULL(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    McmdRess._val = ASN1Set(rv=[dict([('refMcmd', 0), ('Mcmd', _McmdRess_val_Mcmd_0)]), dict([('refMcmd', 1), ('Mcmd', _McmdRess_val_Mcmd_1)]), dict([('refMcmd', 2), ('Mcmd', _McmdRess_val_Mcmd_2)]), dict([('refMcmd', 3), ('Mcmd', _McmdRess_val_Mcmd_3)]), dict([('refMcmd', 4), ('Mcmd', _McmdRess_val_Mcmd_4)]), dict([('refMcmd', 255), ('Mcmd', _McmdRess_val_Mcmd_5)])], rr=[], ev=[], er=[])
    
    #-----< McmdRs >-----#
    McmdRs = SEQ(name='McmdRs', mode=MODE_TYPE)
    _McmdRs_mCmdRef = INT(name='mCmdRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMiitsscu', 'MCMDRES'), ['refMcmd']))
    __McmdRs_mCmdRef_tab = CLASS(name='_tab_MCMDRES', mode=MODE_SET, typeref=ASN1RefType(('CALMiitsscu', 'MCMDRES')))
    ___McmdRs_mCmdRef_tab_val_Mcmd_0 = OCT_STR(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'PingIICP')))
    ___McmdRs_mCmdRef_tab_val_Mcmd_1 = SEQ_OF(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'VCI-info-res')))
    ___McmdRs_mCmdRef_tab_val_Mcmd_2 = NULL(name='Mcmd', mode=MODE_TYPE)
    ___McmdRs_mCmdRef_tab_val_Mcmd_3 = SEQ(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'Param24102')))
    ___McmdRs_mCmdRef_tab_val_Mcmd_4 = INT(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'ErrStatus')))
    ___McmdRs_mCmdRef_tab_val_Mcmd_5 = NULL(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    __McmdRs_mCmdRef_tab._val = ASN1Set(rv=[dict([('refMcmd', 0), ('Mcmd', ___McmdRs_mCmdRef_tab_val_Mcmd_0)]), dict([('refMcmd', 1), ('Mcmd', ___McmdRs_mCmdRef_tab_val_Mcmd_1)]), dict([('refMcmd', 2), ('Mcmd', ___McmdRs_mCmdRef_tab_val_Mcmd_2)]), dict([('refMcmd', 3), ('Mcmd', ___McmdRs_mCmdRef_tab_val_Mcmd_3)]), dict([('refMcmd', 4), ('Mcmd', ___McmdRs_mCmdRef_tab_val_Mcmd_4)]), dict([('refMcmd', 255), ('Mcmd', ___McmdRs_mCmdRef_tab_val_Mcmd_5)])], rr=[], ev=None, er=[])
    _McmdRs_mCmdRef._const_tab = __McmdRs_mCmdRef_tab
    _McmdRs_mCmdRef._const_tab_at = None
    _McmdRs_mCmdRef._const_tab_id = 'refMcmd'
    _McmdRs_mcmd = OPEN(name='mcmd', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMiitsscu', 'MCMDRES'), ['Mcmd']))
    _McmdRs_mcmd._const_tab = __McmdRs_mCmdRef_tab
    _McmdRs_mcmd._const_tab_at = ('..', 'mCmdRef')
    _McmdRs_mcmd._const_tab_id = 'Mcmd'
    McmdRs._cont = ASN1Dict([
        ('mCmdRef', _McmdRs_mCmdRef),
        ('mcmd', _McmdRs_mcmd),
        ])
    McmdRs._ext = None
    
    #-----< pingRs >-----#
    pingRs = CLASS(name='pingRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'MCMDRES')))
    _pingRs_val_Mcmd = OCT_STR(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'PingIICP')))
    pingRs._val = dict([('refMcmd', 0), ('Mcmd', _pingRs_val_Mcmd)])
    
    #-----< vCIinfoRs >-----#
    vCIinfoRs = CLASS(name='vCIinfoRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'MCMDRES')))
    _vCIinfoRs_val_Mcmd = SEQ_OF(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'VCI-info-res')))
    vCIinfoRs._val = dict([('refMcmd', 1), ('Mcmd', _vCIinfoRs_val_Mcmd)])
    
    #-----< vCIupdateRs >-----#
    vCIupdateRs = CLASS(name='vCIupdateRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'MCMDRES')))
    _vCIupdateRs_val_Mcmd = NULL(name='Mcmd', mode=MODE_TYPE)
    vCIupdateRs._val = dict([('refMcmd', 2), ('Mcmd', _vCIupdateRs_val_Mcmd)])
    
    #-----< getParam24102Rs >-----#
    getParam24102Rs = CLASS(name='getParam24102Rs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'MCMDRES')))
    _getParam24102Rs_val_Mcmd = SEQ(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'Param24102')))
    getParam24102Rs._val = dict([('refMcmd', 3), ('Mcmd', _getParam24102Rs_val_Mcmd)])
    
    #-----< setParam24102Rs >-----#
    setParam24102Rs = CLASS(name='setParam24102Rs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'MCMDRES')))
    _setParam24102Rs_val_Mcmd = INT(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'ErrStatus')))
    setParam24102Rs._val = dict([('refMcmd', 4), ('Mcmd', _setParam24102Rs_val_Mcmd)])
    
    #-----< testConfigRs >-----#
    testConfigRs = CLASS(name='testConfigRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'MCMDRES')))
    _testConfigRs_val_Mcmd = NULL(name='Mcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    testConfigRs._val = dict([('refMcmd', 255), ('Mcmd', _testConfigRs_val_Mcmd)])
    
    #-----< PduErrStatus >-----#
    PduErrStatus = INT(name='PduErrStatus', mode=MODE_TYPE)
    PduErrStatus._cont = ASN1Dict([('success', 0), ('pduUnknown', 1), ('duplicateITS-scuId', 2), ('invalidAliveMessage', 3), ('invalidITSscuType', 4), ('unspecFailure', 255)])
    PduErrStatus._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< VCI-info-res >-----#
    VCI_info_res = SEQ_OF(name='VCI-info-res', mode=MODE_TYPE)
    _VCI_info_res__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'VCI-Info')))
    VCI_info_res._cont = _VCI_info_res__item_
    VCI_info_res._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< RefSECIICPRQ >-----#
    RefSECIICPRQ = INT(name='RefSECIICPRQ', mode=MODE_TYPE)
    RefSECIICPRQ._cont = ASN1Dict([('c-secRqRef', 0), ('c-secRq', 1)])
    RefSECIICPRQ._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< SECIICPRQ >-----#
    SECIICPRQ = CLASS(name='SECIICPRQ', mode=MODE_TYPE)
    _SECIICPRQ_ref = INT(name='ref', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'RefSECIICPRQ')), uniq=True)
    _SECIICPRQ_SecIICP = OPEN(name='SecIICP', mode=MODE_TYPE)
    SECIICPRQ._cont = ASN1Dict([
        ('ref', _SECIICPRQ_ref),
        ('SecIICP', _SECIICPRQ_SecIICP),
        ])
    
    #-----< SecIICPRQs >-----#
    SecIICPRQs = CLASS(name='SecIICPRQs', mode=MODE_SET, typeref=ASN1RefType(('CALMiitsscu', 'SECIICPRQ')))
    _SecIICPRQs_val_SecIICP_0 = NULL(name='SecIICP', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    _SecIICPRQs_val_SecIICP_1 = OCT_STR(name='SecIICP', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'SecIICPpayload')))
    SecIICPRQs._val = ASN1Set(rv=[dict([('ref', 0), ('SecIICP', _SecIICPRQs_val_SecIICP_0)]), dict([('ref', 1), ('SecIICP', _SecIICPRQs_val_SecIICP_1)])], rr=[], ev=[], er=[])
    
    #-----< SecRq >-----#
    SecRq = SEQ(name='SecRq', mode=MODE_TYPE)
    _SecRq_secRqRef = INT(name='secRqRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMiitsscu', 'SECIICPRQ'), ['ref']))
    __SecRq_secRqRef_tab = CLASS(name='_tab_SECIICPRQ', mode=MODE_SET, typeref=ASN1RefType(('CALMiitsscu', 'SECIICPRQ')))
    ___SecRq_secRqRef_tab_val_SecIICP_0 = NULL(name='SecIICP', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    ___SecRq_secRqRef_tab_val_SecIICP_1 = OCT_STR(name='SecIICP', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'SecIICPpayload')))
    __SecRq_secRqRef_tab._val = ASN1Set(rv=[dict([('ref', 0), ('SecIICP', ___SecRq_secRqRef_tab_val_SecIICP_0)]), dict([('ref', 1), ('SecIICP', ___SecRq_secRqRef_tab_val_SecIICP_1)])], rr=[], ev=None, er=[])
    _SecRq_secRqRef._const_tab = __SecRq_secRqRef_tab
    _SecRq_secRqRef._const_tab_at = None
    _SecRq_secRqRef._const_tab_id = 'ref'
    _SecRq_secRq = OPEN(name='secRq', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMiitsscu', 'SECIICPRQ'), ['SecIICP']))
    _SecRq_secRq._const_tab = __SecRq_secRqRef_tab
    _SecRq_secRq._const_tab_at = ('..', 'secRqRef')
    _SecRq_secRq._const_tab_id = 'SecIICP'
    SecRq._cont = ASN1Dict([
        ('secRqRef', _SecRq_secRqRef),
        ('secRq', _SecRq_secRq),
        ])
    SecRq._ext = None
    
    #-----< noSecurityRq >-----#
    noSecurityRq = CLASS(name='noSecurityRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'SECIICPRQ')))
    _noSecurityRq_val_SecIICP = NULL(name='SecIICP', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    noSecurityRq._val = dict([('ref', 0), ('SecIICP', _noSecurityRq_val_SecIICP)])
    
    #-----< octStringRq >-----#
    octStringRq = CLASS(name='octStringRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'SECIICPRQ')))
    _octStringRq_val_SecIICP = OCT_STR(name='SecIICP', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'SecIICPpayload')))
    octStringRq._val = dict([('ref', 1), ('SecIICP', _octStringRq_val_SecIICP)])
    
    #-----< RefSECIICPRS >-----#
    RefSECIICPRS = INT(name='RefSECIICPRS', mode=MODE_TYPE)
    RefSECIICPRS._cont = ASN1Dict([('c-secRsRef', 0), ('c-secRs', 1)])
    RefSECIICPRS._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< SECIICPRS >-----#
    SECIICPRS = CLASS(name='SECIICPRS', mode=MODE_TYPE)
    _SECIICPRS_ref = INT(name='ref', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'RefSECIICPRS')), uniq=True)
    _SECIICPRS_SecIICP = OPEN(name='SecIICP', mode=MODE_TYPE)
    SECIICPRS._cont = ASN1Dict([
        ('ref', _SECIICPRS_ref),
        ('SecIICP', _SECIICPRS_SecIICP),
        ])
    
    #-----< SECIICPRSs >-----#
    SECIICPRSs = CLASS(name='SECIICPRSs', mode=MODE_SET, typeref=ASN1RefType(('CALMiitsscu', 'SECIICPRS')))
    _SECIICPRSs_val_SecIICP_0 = NULL(name='SecIICP', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    _SECIICPRSs_val_SecIICP_1 = OCT_STR(name='SecIICP', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'SecIICPpayload')))
    SECIICPRSs._val = ASN1Set(rv=[dict([('ref', 0), ('SecIICP', _SECIICPRSs_val_SecIICP_0)]), dict([('ref', 1), ('SecIICP', _SECIICPRSs_val_SecIICP_1)])], rr=[], ev=[], er=[])
    
    #-----< SecRs >-----#
    SecRs = SEQ(name='SecRs', mode=MODE_TYPE)
    _SecRs_secRsRef = INT(name='secRsRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMiitsscu', 'SECIICPRS'), ['ref']))
    __SecRs_secRsRef_tab = CLASS(name='_tab_SECIICPRS', mode=MODE_SET, typeref=ASN1RefType(('CALMiitsscu', 'SECIICPRS')))
    ___SecRs_secRsRef_tab_val_SecIICP_0 = NULL(name='SecIICP', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    ___SecRs_secRsRef_tab_val_SecIICP_1 = OCT_STR(name='SecIICP', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'SecIICPpayload')))
    __SecRs_secRsRef_tab._val = ASN1Set(rv=[dict([('ref', 0), ('SecIICP', ___SecRs_secRsRef_tab_val_SecIICP_0)]), dict([('ref', 1), ('SecIICP', ___SecRs_secRsRef_tab_val_SecIICP_1)])], rr=[], ev=None, er=[])
    _SecRs_secRsRef._const_tab = __SecRs_secRsRef_tab
    _SecRs_secRsRef._const_tab_at = None
    _SecRs_secRsRef._const_tab_id = 'ref'
    _SecRs_secRs = OPEN(name='secRs', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMiitsscu', 'SECIICPRS'), ['SecIICP']))
    _SecRs_secRs._const_tab = __SecRs_secRsRef_tab
    _SecRs_secRs._const_tab_at = ('..', 'secRsRef')
    _SecRs_secRs._const_tab_id = 'SecIICP'
    SecRs._cont = ASN1Dict([
        ('secRsRef', _SecRs_secRsRef),
        ('secRs', _SecRs_secRs),
        ])
    SecRs._ext = None
    
    #-----< noSecurityRs >-----#
    noSecurityRs = CLASS(name='noSecurityRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'SECIICPRS')))
    _noSecurityRs_val_SecIICP = NULL(name='SecIICP', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    noSecurityRs._val = dict([('ref', 0), ('SecIICP', _noSecurityRs_val_SecIICP)])
    
    #-----< octStringRs >-----#
    octStringRs = CLASS(name='octStringRs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMiitsscu', 'SECIICPRS')))
    _octStringRs_val_SecIICP = OCT_STR(name='SecIICP', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'SecIICPpayload')))
    octStringRs._val = dict([('ref', 1), ('SecIICP', _octStringRs_val_SecIICP)])
    
    #-----< SecIICPpayload >-----#
    SecIICPpayload = OCT_STR(name='SecIICPpayload', mode=MODE_TYPE)
    SecIICPpayload._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< IICrequestTX >-----#
    IICrequestTX = SEQ(name='IICrequestTX', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'IIC-Request')))
    
    #-----< IICresponseTX >-----#
    IICresponseTX = SEQ(name='IICresponseTX', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'IIC-Response')))
    
    #-----< IICrequestRX >-----#
    IICrequestRX = SEQ(name='IICrequestRX', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'IIC-Request')))
    
    #-----< IICresponseRX >-----#
    IICresponseRX = SEQ(name='IICresponseRX', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'IIC-Response')))
    
    #-----< PduCounter >-----#
    PduCounter = INT(name='PduCounter', mode=MODE_TYPE)
    PduCounter._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< version >-----#
    version = INT(name='version', mode=MODE_VALUE)
    version._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    version._val = 2
    
    _all_ = [
        _IIC_Request_sourceITS_scuId,
        _IIC_Request_destinationITS_scuId,
        _IIC_Request_pduCounter,
        _IIC_Request_requestID,
        _IIC_Request_pduRequest,
        _IIC_Request_secRq,
        IIC_Request,
        RequestID,
        RefIICP,
        _IICPREQ_ref,
        _IICPREQ_IICPrequest,
        IICPREQ,
        IICPrequests,
        _IICPrequests_val_IICPrequest_0,
        _IICPrequests_val_IICPrequest_1,
        _IICPrequests_val_IICPrequest_2,
        _IICPrequests_val_IICPrequest_3,
        _IICPrequests_val_IICPrequest_4,
        _IICPrequests_val_IICPrequest_5,
        _IICPrequests_val_IICPrequest_6,
        _IICPrequests_val_IICPrequest_7,
        _IICPrequests_val_IICPrequest_8,
        _IICPrequests_val_IICPrequest_9,
        _IICPrequests_val_IICPrequest_10,
        _IICPrequests_val_IICPrequest_11,
        _IICPrequests_val_IICPrequest_12,
        _IICPrequests_val_IICPrequest_13,
        _IICPrequests_val_IICPrequest_14,
        _IICPrequests_val_IICPrequest_15,
        _IICPrequests_val_IICPrequest_16,
        _IICPrequests_val_IICPrequest_17,
        _IICPrequests_val_IICPrequest_18,
        _IICPrequests_val_IICPrequest_19,
        _IICPrequests_val_IICPrequest_20,
        _IICPrequests_val_IICPrequest_21,
        _IICPrequests_val_IICPrequest_22,
        _IICPrequests_val_IICPrequest_23,
        _IICPrequests_val_IICPrequest_24,
        _IICPrequests_val_IICPrequest_25,
        __PduRequest_reqRef_tab,
        ___PduRequest_reqRef_tab_val_IICPrequest_0,
        ___PduRequest_reqRef_tab_val_IICPrequest_1,
        ___PduRequest_reqRef_tab_val_IICPrequest_2,
        ___PduRequest_reqRef_tab_val_IICPrequest_3,
        ___PduRequest_reqRef_tab_val_IICPrequest_4,
        ___PduRequest_reqRef_tab_val_IICPrequest_5,
        ___PduRequest_reqRef_tab_val_IICPrequest_6,
        ___PduRequest_reqRef_tab_val_IICPrequest_7,
        ___PduRequest_reqRef_tab_val_IICPrequest_8,
        ___PduRequest_reqRef_tab_val_IICPrequest_9,
        ___PduRequest_reqRef_tab_val_IICPrequest_10,
        ___PduRequest_reqRef_tab_val_IICPrequest_11,
        ___PduRequest_reqRef_tab_val_IICPrequest_12,
        ___PduRequest_reqRef_tab_val_IICPrequest_13,
        ___PduRequest_reqRef_tab_val_IICPrequest_14,
        ___PduRequest_reqRef_tab_val_IICPrequest_15,
        ___PduRequest_reqRef_tab_val_IICPrequest_16,
        ___PduRequest_reqRef_tab_val_IICPrequest_17,
        ___PduRequest_reqRef_tab_val_IICPrequest_18,
        ___PduRequest_reqRef_tab_val_IICPrequest_19,
        ___PduRequest_reqRef_tab_val_IICPrequest_20,
        ___PduRequest_reqRef_tab_val_IICPrequest_21,
        ___PduRequest_reqRef_tab_val_IICPrequest_22,
        ___PduRequest_reqRef_tab_val_IICPrequest_23,
        ___PduRequest_reqRef_tab_val_IICPrequest_24,
        ___PduRequest_reqRef_tab_val_IICPrequest_25,
        _PduRequest_reqRef,
        _PduRequest_iicpReq,
        PduRequest,
        aliveRq,
        _aliveRq_val_IICPrequest,
        mfRcmdRq,
        _mfRcmdRq_val_IICPrequest,
        mfRreqRq,
        _mfRreqRq_val_IICPrequest,
        mnRcmdRq,
        _mnRcmdRq_val_IICPrequest,
        mnRreqRq,
        _mnRreqRq_val_IICPrequest,
        miRcmdRq,
        _miRcmdRq_val_IICPrequest,
        miRreqRq,
        _miRreqRq_val_IICPrequest,
        miRgetRq,
        _miRgetRq_val_IICPrequest,
        miRsetRq,
        _miRsetRq_val_IICPrequest,
        mCmdRq,
        _mCmdRq_val_IICPrequest,
        maRcmdRq,
        _maRcmdRq_val_IICPrequest,
        maRreqRq,
        _maRreqRq_val_IICPrequest,
        msRcmdRq,
        _msRcmdRq_val_IICPrequest,
        msRreqRq,
        _msRreqRq_val_IICPrequest,
        simFutCmdRq,
        _simFutCmdRq_val_IICPrequest,
        simFutReqRq,
        _simFutReqRq_val_IICPrequest,
        simNutCmdRq,
        _simNutCmdRq_val_IICPrequest,
        simNutReqRq,
        _simNutReqRq_val_IICPrequest,
        simIutCmdRq,
        _simIutCmdRq_val_IICPrequest,
        simIutReqRq,
        _simIutReqRq_val_IICPrequest,
        simFltCmdRq,
        _simFltCmdRq_val_IICPrequest,
        simFltReqRq,
        _simFltReqRq_val_IICPrequest,
        simNltCmdRq,
        _simNltCmdRq_val_IICPrequest,
        simNltReqRq,
        _simNltReqRq_val_IICPrequest,
        simUtInRq,
        _simUtInRq_val_IICPrequest,
        simUtOutRq,
        _simUtOutRq_val_IICPrequest,
        _ITS_SCUalive_message,
        _ITS_SCUalive_its_scuType,
        ITS_SCUalive,
        AliveMessage,
        ITS_SCUtype,
        _SimUt_fill,
        __SimUt_action_mfCmdReq,
        __SimUt_action_mfCmdConf,
        __SimUt_action_mnCmdReq,
        __SimUt_action_mnCmdConf,
        __SimUt_action_miCmdReq,
        __SimUt_action_miCmdConf,
        __SimUt_action_maCmdReq,
        __SimUt_action_maCmdConf,
        __SimUt_action_mfReqReq,
        __SimUt_action_mfReqConf,
        __SimUt_action_mnReqReq,
        __SimUt_action_mnReqConf,
        __SimUt_action_miReqReq,
        __SimUt_action_miReqConf,
        __SimUt_action_maReqReq,
        __SimUt_action_maReqConf,
        __SimUt_action_miGetReq,
        __SimUt_action_miGetConf,
        __SimUt_action_miSetReq,
        __SimUt_action_miSetConf,
        __SimUt_action_mcmdTrigger,
        __SimUt_action_mcmdEvent,
        _SimUt_action,
        SimUt,
        RefMcmdRq,
        _MCMDREQ_refMcmd,
        _MCMDREQ_Mcmd,
        MCMDREQ,
        McmdReqs,
        _McmdReqs_val_Mcmd_0,
        _McmdReqs_val_Mcmd_1,
        _McmdReqs_val_Mcmd_2,
        _McmdReqs_val_Mcmd_3,
        _McmdReqs_val_Mcmd_4,
        _McmdReqs_val_Mcmd_5,
        __McmdRq_mCmdRef_tab,
        ___McmdRq_mCmdRef_tab_val_Mcmd_0,
        ___McmdRq_mCmdRef_tab_val_Mcmd_1,
        ___McmdRq_mCmdRef_tab_val_Mcmd_2,
        ___McmdRq_mCmdRef_tab_val_Mcmd_3,
        ___McmdRq_mCmdRef_tab_val_Mcmd_4,
        ___McmdRq_mCmdRef_tab_val_Mcmd_5,
        _McmdRq_mCmdRef,
        _McmdRq_mcmd,
        McmdRq,
        pingRq,
        _pingRq_val_Mcmd,
        vCIinfoRq,
        _vCIinfoRq_val_Mcmd,
        vCIupdateRq,
        _vCIupdateRq_val_Mcmd,
        getParam24102Rq,
        _getParam24102Rq_val_Mcmd,
        setParam24102Rq,
        _setParam24102Rq_val_Mcmd,
        testConfigRq,
        _testConfigRq_val_Mcmd,
        PingIICP,
        _VCI_info_req_medType,
        _VCI_info_req_ciaClass,
        _VCI_info_req_ciClass,
        VCI_info_req,
        _VCI_update_req__item_,
        VCI_update_req,
        _VCI_Info_linkId,
        _VCI_Info_medType,
        _VCI_Info_ciaClass,
        _VCI_Info_ciClass,
        _VCI_Info_status,
        VCI_Info,
        _TestConfigIICP_location,
        _TestConfigIICP_lowerLayers,
        _TestConfigIICP_testMode,
        TestConfigIICP,
        _IIC_Response_sourceITS_scuId,
        _IIC_Response_destinationITS_scuId,
        _IIC_Response_pduCounter,
        _IIC_Response_responseID,
        _IIC_Response_pduResponse,
        _IIC_Response_errorStatus,
        _IIC_Response_secRs,
        IIC_Response,
        ResponseID,
        _IICPRES_ref,
        _IICPRES_IICPresponse,
        IICPRES,
        IICPresponses,
        _IICPresponses_val_IICPresponse_0,
        _IICPresponses_val_IICPresponse_1,
        _IICPresponses_val_IICPresponse_2,
        _IICPresponses_val_IICPresponse_3,
        _IICPresponses_val_IICPresponse_4,
        _IICPresponses_val_IICPresponse_5,
        _IICPresponses_val_IICPresponse_6,
        _IICPresponses_val_IICPresponse_7,
        _IICPresponses_val_IICPresponse_8,
        _IICPresponses_val_IICPresponse_9,
        _IICPresponses_val_IICPresponse_10,
        _IICPresponses_val_IICPresponse_11,
        _IICPresponses_val_IICPresponse_12,
        _IICPresponses_val_IICPresponse_13,
        _IICPresponses_val_IICPresponse_14,
        _IICPresponses_val_IICPresponse_15,
        _IICPresponses_val_IICPresponse_16,
        _IICPresponses_val_IICPresponse_17,
        _IICPresponses_val_IICPresponse_18,
        _IICPresponses_val_IICPresponse_19,
        _IICPresponses_val_IICPresponse_20,
        _IICPresponses_val_IICPresponse_21,
        _IICPresponses_val_IICPresponse_22,
        _IICPresponses_val_IICPresponse_23,
        _IICPresponses_val_IICPresponse_24,
        _IICPresponses_val_IICPresponse_25,
        _IICPresponses_val_IICPresponse_26,
        _IICPresponses_val_IICPresponse_27,
        _IICPresponses_val_IICPresponse_28,
        _IICPresponses_val_IICPresponse_29,
        __PduResponse_resRef_tab,
        ___PduResponse_resRef_tab_val_IICPresponse_0,
        ___PduResponse_resRef_tab_val_IICPresponse_1,
        ___PduResponse_resRef_tab_val_IICPresponse_2,
        ___PduResponse_resRef_tab_val_IICPresponse_3,
        ___PduResponse_resRef_tab_val_IICPresponse_4,
        ___PduResponse_resRef_tab_val_IICPresponse_5,
        ___PduResponse_resRef_tab_val_IICPresponse_6,
        ___PduResponse_resRef_tab_val_IICPresponse_7,
        ___PduResponse_resRef_tab_val_IICPresponse_8,
        ___PduResponse_resRef_tab_val_IICPresponse_9,
        ___PduResponse_resRef_tab_val_IICPresponse_10,
        ___PduResponse_resRef_tab_val_IICPresponse_11,
        ___PduResponse_resRef_tab_val_IICPresponse_12,
        ___PduResponse_resRef_tab_val_IICPresponse_13,
        ___PduResponse_resRef_tab_val_IICPresponse_14,
        ___PduResponse_resRef_tab_val_IICPresponse_15,
        ___PduResponse_resRef_tab_val_IICPresponse_16,
        ___PduResponse_resRef_tab_val_IICPresponse_17,
        ___PduResponse_resRef_tab_val_IICPresponse_18,
        ___PduResponse_resRef_tab_val_IICPresponse_19,
        ___PduResponse_resRef_tab_val_IICPresponse_20,
        ___PduResponse_resRef_tab_val_IICPresponse_21,
        ___PduResponse_resRef_tab_val_IICPresponse_22,
        ___PduResponse_resRef_tab_val_IICPresponse_23,
        ___PduResponse_resRef_tab_val_IICPresponse_24,
        ___PduResponse_resRef_tab_val_IICPresponse_25,
        ___PduResponse_resRef_tab_val_IICPresponse_26,
        ___PduResponse_resRef_tab_val_IICPresponse_27,
        ___PduResponse_resRef_tab_val_IICPresponse_28,
        ___PduResponse_resRef_tab_val_IICPresponse_29,
        _PduResponse_resRef,
        _PduResponse_iicpRes,
        PduResponse,
        aliveRs,
        _aliveRs_val_IICPresponse,
        mfRcmdRs,
        _mfRcmdRs_val_IICPresponse,
        mfRreqRs,
        _mfRreqRs_val_IICPresponse,
        mnRcmdRs,
        _mnRcmdRs_val_IICPresponse,
        mnRreqRs,
        _mnRreqRs_val_IICPresponse,
        miRcmdRs,
        _miRcmdRs_val_IICPresponse,
        miRreqRs,
        _miRreqRs_val_IICPresponse,
        miRgetRs,
        _miRgetRs_val_IICPresponse,
        miRsetRs,
        _miRsetRs_val_IICPresponse,
        mCmdRs,
        _mCmdRs_val_IICPresponse,
        maRcmdRs,
        _maRcmdRs_val_IICPresponse,
        maRreqRs,
        _maRreqRs_val_IICPresponse,
        msRcmdRs,
        _msRcmdRs_val_IICPresponse,
        msRreqRs,
        _msRreqRs_val_IICPresponse,
        simAutCmdRs,
        _simAutCmdRs_val_IICPresponse,
        simAutReqRs,
        _simAutReqRs_val_IICPresponse,
        simFutCmdRs,
        _simFutCmdRs_val_IICPresponse,
        simFutReqRs,
        _simFutReqRs_val_IICPresponse,
        simNutCmdRs,
        _simNutCmdRs_val_IICPresponse,
        simNutReqRs,
        _simNutReqRs_val_IICPresponse,
        simIutCmdRs,
        _simIutCmdRs_val_IICPresponse,
        simIutReqRs,
        _simIutReqRs_val_IICPresponse,
        simAltCmdRs,
        _simAltCmdRs_val_IICPresponse,
        simAltReqRs,
        _simAltReqRs_val_IICPresponse,
        simFltCmdRs,
        _simFltCmdRs_val_IICPresponse,
        simFltReqRs,
        _simFltReqRs_val_IICPresponse,
        simNltReqRs,
        _simNltReqRs_val_IICPresponse,
        simNltCmdRs,
        _simNltCmdRs_val_IICPresponse,
        simUtInRs,
        _simUtInRs_val_IICPresponse,
        simUtOutRs,
        _simUtOutRs_val_IICPresponse,
        RefMcmdRs,
        _MCMDRES_refMcmd,
        _MCMDRES_Mcmd,
        MCMDRES,
        McmdRess,
        _McmdRess_val_Mcmd_0,
        _McmdRess_val_Mcmd_1,
        _McmdRess_val_Mcmd_2,
        _McmdRess_val_Mcmd_3,
        _McmdRess_val_Mcmd_4,
        _McmdRess_val_Mcmd_5,
        __McmdRs_mCmdRef_tab,
        ___McmdRs_mCmdRef_tab_val_Mcmd_0,
        ___McmdRs_mCmdRef_tab_val_Mcmd_1,
        ___McmdRs_mCmdRef_tab_val_Mcmd_2,
        ___McmdRs_mCmdRef_tab_val_Mcmd_3,
        ___McmdRs_mCmdRef_tab_val_Mcmd_4,
        ___McmdRs_mCmdRef_tab_val_Mcmd_5,
        _McmdRs_mCmdRef,
        _McmdRs_mcmd,
        McmdRs,
        pingRs,
        _pingRs_val_Mcmd,
        vCIinfoRs,
        _vCIinfoRs_val_Mcmd,
        vCIupdateRs,
        _vCIupdateRs_val_Mcmd,
        getParam24102Rs,
        _getParam24102Rs_val_Mcmd,
        setParam24102Rs,
        _setParam24102Rs_val_Mcmd,
        testConfigRs,
        _testConfigRs_val_Mcmd,
        PduErrStatus,
        _VCI_info_res__item_,
        VCI_info_res,
        RefSECIICPRQ,
        _SECIICPRQ_ref,
        _SECIICPRQ_SecIICP,
        SECIICPRQ,
        SecIICPRQs,
        _SecIICPRQs_val_SecIICP_0,
        _SecIICPRQs_val_SecIICP_1,
        __SecRq_secRqRef_tab,
        ___SecRq_secRqRef_tab_val_SecIICP_0,
        ___SecRq_secRqRef_tab_val_SecIICP_1,
        _SecRq_secRqRef,
        _SecRq_secRq,
        SecRq,
        noSecurityRq,
        _noSecurityRq_val_SecIICP,
        octStringRq,
        _octStringRq_val_SecIICP,
        RefSECIICPRS,
        _SECIICPRS_ref,
        _SECIICPRS_SecIICP,
        SECIICPRS,
        SECIICPRSs,
        _SECIICPRSs_val_SecIICP_0,
        _SECIICPRSs_val_SecIICP_1,
        __SecRs_secRsRef_tab,
        ___SecRs_secRsRef_tab_val_SecIICP_0,
        ___SecRs_secRsRef_tab_val_SecIICP_1,
        _SecRs_secRsRef,
        _SecRs_secRs,
        SecRs,
        noSecurityRs,
        _noSecurityRs_val_SecIICP,
        octStringRs,
        _octStringRs_val_SecIICP,
        SecIICPpayload,
        IICrequestTX,
        IICresponseTX,
        IICrequestRX,
        IICresponseRX,
        PduCounter,
        version,
    ]

class CALMipv6:

    _name_  = 'CALMipv6'
    _oid_   = [1, 0, 21210, 1]
    
    _obj_ = [
        'DeleteIPv6',
        'DeleteNotIPv6',
        'SetConfIPv6',
        'SetIPv6',
        'SetNotIPv6',
        'UpdateIPv6',
        'UpdateNotIPv6',
        'IPv6timeout',
        ]
    _type_ = [
        'DeleteIPv6',
        'DeleteNotIPv6',
        'SetConfIPv6',
        'SetIPv6',
        'SetNotIPv6',
        'UpdateIPv6',
        'UpdateNotIPv6',
        'IPv6timeout',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< DeleteIPv6 >-----#
    DeleteIPv6 = SEQ(name='DeleteIPv6', mode=MODE_TYPE)
    _DeleteIPv6_reference = INT(name='reference', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DeleteIPv6_reference._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    DeleteIPv6._cont = ASN1Dict([
        ('reference', _DeleteIPv6_reference),
        ])
    DeleteIPv6._ext = None
    
    #-----< DeleteNotIPv6 >-----#
    DeleteNotIPv6 = SEQ(name='DeleteNotIPv6', mode=MODE_TYPE)
    _DeleteNotIPv6_reference = INT(name='reference', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DeleteNotIPv6_reference._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    DeleteNotIPv6._cont = ASN1Dict([
        ('reference', _DeleteNotIPv6_reference),
        ])
    DeleteNotIPv6._ext = None
    
    #-----< SetConfIPv6 >-----#
    SetConfIPv6 = SEQ(name='SetConfIPv6', mode=MODE_TYPE)
    _SetConfIPv6_reference = INT(name='reference', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SetConfIPv6_reference._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    SetConfIPv6._cont = ASN1Dict([
        ('reference', _SetConfIPv6_reference),
        ])
    SetConfIPv6._ext = None
    
    #-----< SetIPv6 >-----#
    SetIPv6 = SEQ(name='SetIPv6', mode=MODE_TYPE)
    _SetIPv6_reference = INT(name='reference', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SetIPv6_reference._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _SetIPv6_remoteIP = SEQ(name='remoteIP', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpAddressInfo')))
    _SetIPv6_ciid = SEQ(name='ciid', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _SetIPv6_ciStatus = INT(name='ciStatus', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'CIstatus')))
    _SetIPv6_localIP = SEQ(name='localIP', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpAddressInfo')))
    _SetIPv6_priority = INT(name='priority', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _SetIPv6_timeout = INT(name='timeout', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMipv6', 'IPv6timeout')))
    SetIPv6._cont = ASN1Dict([
        ('reference', _SetIPv6_reference),
        ('remoteIP', _SetIPv6_remoteIP),
        ('ciid', _SetIPv6_ciid),
        ('ciStatus', _SetIPv6_ciStatus),
        ('localIP', _SetIPv6_localIP),
        ('priority', _SetIPv6_priority),
        ('timeout', _SetIPv6_timeout),
        ])
    SetIPv6._ext = None
    
    #-----< SetNotIPv6 >-----#
    SetNotIPv6 = SEQ(name='SetNotIPv6', mode=MODE_TYPE)
    _SetNotIPv6_reference = INT(name='reference', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SetNotIPv6_reference._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _SetNotIPv6_remoteIP = SEQ(name='remoteIP', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpAddressInfo')))
    _SetNotIPv6_ciid = SEQ(name='ciid', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _SetNotIPv6_ciStatus = INT(name='ciStatus', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'CIstatus')))
    _SetNotIPv6_localIP = SEQ(name='localIP', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpAddressInfo')))
    _SetNotIPv6_priority = INT(name='priority', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _SetNotIPv6_timeout = INT(name='timeout', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMipv6', 'IPv6timeout')))
    SetNotIPv6._cont = ASN1Dict([
        ('reference', _SetNotIPv6_reference),
        ('remoteIP', _SetNotIPv6_remoteIP),
        ('ciid', _SetNotIPv6_ciid),
        ('ciStatus', _SetNotIPv6_ciStatus),
        ('localIP', _SetNotIPv6_localIP),
        ('priority', _SetNotIPv6_priority),
        ('timeout', _SetNotIPv6_timeout),
        ])
    SetNotIPv6._ext = None
    
    #-----< UpdateIPv6 >-----#
    UpdateIPv6 = SEQ(name='UpdateIPv6', mode=MODE_TYPE)
    _UpdateIPv6_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _UpdateIPv6_fill._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _UpdateIPv6_reference = INT(name='reference', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _UpdateIPv6_reference._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _UpdateIPv6_remoteIP = SEQ(name='remoteIP', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpAddressInfo')), opt=True)
    _UpdateIPv6_ciid = SEQ(name='ciid', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')), opt=True)
    _UpdateIPv6_ciStatus = INT(name='ciStatus', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'CIstatus')), opt=True)
    _UpdateIPv6_localIP = SEQ(name='localIP', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpAddressInfo')), opt=True)
    _UpdateIPv6_priority = INT(name='priority', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')), opt=True)
    _UpdateIPv6_timeout = INT(name='timeout', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMipv6', 'IPv6timeout')), opt=True)
    UpdateIPv6._cont = ASN1Dict([
        ('fill', _UpdateIPv6_fill),
        ('reference', _UpdateIPv6_reference),
        ('remoteIP', _UpdateIPv6_remoteIP),
        ('ciid', _UpdateIPv6_ciid),
        ('ciStatus', _UpdateIPv6_ciStatus),
        ('localIP', _UpdateIPv6_localIP),
        ('priority', _UpdateIPv6_priority),
        ('timeout', _UpdateIPv6_timeout),
        ])
    UpdateIPv6._ext = None
    
    #-----< UpdateNotIPv6 >-----#
    UpdateNotIPv6 = SEQ(name='UpdateNotIPv6', mode=MODE_TYPE)
    _UpdateNotIPv6_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _UpdateNotIPv6_fill._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _UpdateNotIPv6_reference = INT(name='reference', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _UpdateNotIPv6_reference._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _UpdateNotIPv6_remoteIP = SEQ(name='remoteIP', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpAddressInfo')), opt=True)
    _UpdateNotIPv6_ciid = SEQ(name='ciid', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')), opt=True)
    _UpdateNotIPv6_ciStatus = INT(name='ciStatus', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'CIstatus')), opt=True)
    _UpdateNotIPv6_localIP = SEQ(name='localIP', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfsap', 'IpAddressInfo')), opt=True)
    _UpdateNotIPv6_priority = INT(name='priority', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')), opt=True)
    _UpdateNotIPv6_timeout = INT(name='timeout', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMipv6', 'IPv6timeout')), opt=True)
    UpdateNotIPv6._cont = ASN1Dict([
        ('fill', _UpdateNotIPv6_fill),
        ('reference', _UpdateNotIPv6_reference),
        ('remoteIP', _UpdateNotIPv6_remoteIP),
        ('ciid', _UpdateNotIPv6_ciid),
        ('ciStatus', _UpdateNotIPv6_ciStatus),
        ('localIP', _UpdateNotIPv6_localIP),
        ('priority', _UpdateNotIPv6_priority),
        ('timeout', _UpdateNotIPv6_timeout),
        ])
    UpdateNotIPv6._ext = None
    
    #-----< IPv6timeout >-----#
    IPv6timeout = INT(name='IPv6timeout', mode=MODE_TYPE)
    IPv6timeout._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    _all_ = [
        _DeleteIPv6_reference,
        DeleteIPv6,
        _DeleteNotIPv6_reference,
        DeleteNotIPv6,
        _SetConfIPv6_reference,
        SetConfIPv6,
        _SetIPv6_reference,
        _SetIPv6_remoteIP,
        _SetIPv6_ciid,
        _SetIPv6_ciStatus,
        _SetIPv6_localIP,
        _SetIPv6_priority,
        _SetIPv6_timeout,
        SetIPv6,
        _SetNotIPv6_reference,
        _SetNotIPv6_remoteIP,
        _SetNotIPv6_ciid,
        _SetNotIPv6_ciStatus,
        _SetNotIPv6_localIP,
        _SetNotIPv6_priority,
        _SetNotIPv6_timeout,
        SetNotIPv6,
        _UpdateIPv6_fill,
        _UpdateIPv6_reference,
        _UpdateIPv6_remoteIP,
        _UpdateIPv6_ciid,
        _UpdateIPv6_ciStatus,
        _UpdateIPv6_localIP,
        _UpdateIPv6_priority,
        _UpdateIPv6_timeout,
        UpdateIPv6,
        _UpdateNotIPv6_fill,
        _UpdateNotIPv6_reference,
        _UpdateNotIPv6_remoteIP,
        _UpdateNotIPv6_ciid,
        _UpdateNotIPv6_ciStatus,
        _UpdateNotIPv6_localIP,
        _UpdateNotIPv6_priority,
        _UpdateNotIPv6_timeout,
        UpdateNotIPv6,
        IPv6timeout,
    ]

class CALMlegacySupport:

    _name_  = 'CALMlegacySupport'
    _oid_   = [1, 0, 29281, 2, 1]
    
    _obj_ = [
        'Param15628',
        'FNTPlpp',
        ]
    _type_ = [
        'Param15628',
        'FNTPlpp',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< Param15628 >-----#
    Param15628 = SEQ(name='Param15628', mode=MODE_TYPE)
    _Param15628_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Param15628_fill._const_sz = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    _Param15628_params = CHOICE(name='params', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __Param15628_params_legacyOption = INT(name='legacyOption', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Param15628_params_legacyOption._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    __Param15628_params_portPM = CHOICE(name='portPM', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    _Param15628_params._cont = ASN1Dict([
        ('legacyOption', __Param15628_params_legacyOption),
        ('portPM', __Param15628_params_portPM),
        ])
    _Param15628_params._ext = None
    Param15628._cont = ASN1Dict([
        ('fill', _Param15628_fill),
        ('params', _Param15628_params),
        ])
    Param15628._ext = None
    
    #-----< FNTPlpp >-----#
    FNTPlpp = OCT_STR(name='FNTPlpp', mode=MODE_TYPE)
    FNTPlpp._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    _all_ = [
        _Param15628_fill,
        __Param15628_params_legacyOption,
        __Param15628_params_portPM,
        _Param15628_params,
        Param15628,
        FNTPlpp,
    ]

class CALMllsap:

    _name_  = 'CALMllsap'
    _oid_   = [1, 0, 21218, 1]
    
    _obj_ = [
        'Alt',
        'CIaClass',
        'CIclass',
        'Link-ID',
        'CIstatus',
        'CommProfile',
        'Connect',
        'IN-SAPaddress',
        'DataRate',
        'DataRatesNW',
        'Directivity',
        'DirMode',
        'DirVar',
        'TxPowMax',
        'Errors',
        'SingleError',
        'Gs',
        'KineVectIn',
        'KineVectOut',
        'KineVectOptions',
        'Lat',
        'Lon',
        'LLserviceAddr',
        'MACaddress',
        'MediumUsage',
        'MedType',
        'MedUseObsTime',
        'TimeUnit',
        'Notify',
        'PeerRXpower',
        'PARAMS',
        'IPARAM',
        'I-Params',
        'I-Param',
        'errors',
        'commProfile',
        'properties',
        'manuDeviceID',
        'iTS-scuId',
        'medID',
        'localCIID',
        'timeoutReg',
        'macAddress',
        'macAddrTemp',
        'ciClass',
        'ciaClass',
        'ciStatus',
        'notify',
        'medType',
        'regInfo',
        'connect',
        'simPin',
        'providerInfo',
        'minUserPriority',
        'queueLevel',
        'queueLowTh',
        'queueAlarmTh',
        'distancePeer',
        'commRangeRef',
        'timeOfLastRecep',
        'inactTimeLimit',
        'mediumUsage',
        'medUseObsTime',
        'peerMAC',
        'virtualCIs',
        'minPrioCrossCI',
        'rxSens',
        'txPower',
        'txPowMax',
        'peerRXpower',
        'dataRate',
        'dataRateNW',
        'dataRatesNW',
        'dataRateNWreq',
        'directivity',
        'blockLength',
        'freeAirTime',
        'frameLengthMax',
        'kineVectIn',
        'kineVectOut',
        'cost',
        'reliability',
        'logicalChannel',
        'Time48IAT',
        'I-ParamNo',
        'SimPin',
        'LogicalChannels',
        'Distance',
        'MedID',
        'Properties',
        'ProviderInfo',
        'QueueLevel',
        'QueueValue',
        'RegInfo',
        'RegInfoStatus',
        'REGULSCHEME',
        'RegulatoryScheme',
        'RegulSchemes',
        'nullRegScheme',
        'Tta',
        'UserPriority',
        'VirtualCIs',
        'INSAP',
        'INsapspsdown',
        'INsapPrimitivesDown',
        'inUnitdataRq',
        'inDataAckRq',
        'inReplyAckRq',
        'inReplyUpdateRq',
        'IN-UNITDATA-request',
        'IN-DATA-ACK-request',
        'IN-REPLY-ACK-request',
        'IN-REPLY-UPDATE-request',
        'INSAPUP',
        'INsapspsup',
        'INsapPrimitivesUp',
        'inUnitdataInd',
        'inUnitdataStatusInd',
        'inDataAckInd',
        'inDataAckStatusInd',
        'inReplyInd',
        'inReplyStatusInd',
        'inReplyUpdateStatusInd',
        'IN-UNITDATA-indication',
        'IN-UNITDATA-STATUS-indication',
        'IN-DATA-ACK-indication',
        'IN-DATA-ACK-STATUS-indication',
        'IN-REPLY-indication',
        'IN-REPLY-STATUS-indication',
        'IN-REPLY-UPDATE-STATUS-indication',
        'INdata',
        'ACCPARAM',
        'nullAP',
        'AccessParameters',
        'AccParams',
        'NullType',
        'MACServiceClass',
        'INtxStatus',
        'VCIserialNumber',
        'EUI64',
        'LegacyCIID',
        'RemoteCIID',
        'OneOCTETones',
        'TwoOCTETones',
        'EUI64MAC48',
        'MACoui',
        'MACext',
        'MACmcID',
        'version',
        ]
    _type_ = [
        'Alt',
        'CIaClass',
        'CIclass',
        'Link-ID',
        'CIstatus',
        'CommProfile',
        'Connect',
        'IN-SAPaddress',
        'DataRate',
        'DataRatesNW',
        'Directivity',
        'DirMode',
        'DirVar',
        'TxPowMax',
        'Errors',
        'SingleError',
        'Gs',
        'KineVectIn',
        'KineVectOut',
        'KineVectOptions',
        'Lat',
        'Lon',
        'LLserviceAddr',
        'MACaddress',
        'MediumUsage',
        'MedType',
        'MedUseObsTime',
        'TimeUnit',
        'Notify',
        'PeerRXpower',
        'PARAMS',
        'IPARAM',
        'I-Param',
        'Time48IAT',
        'I-ParamNo',
        'SimPin',
        'LogicalChannels',
        'Distance',
        'MedID',
        'Properties',
        'ProviderInfo',
        'QueueLevel',
        'QueueValue',
        'RegInfo',
        'RegInfoStatus',
        'REGULSCHEME',
        'RegulatoryScheme',
        'Tta',
        'UserPriority',
        'VirtualCIs',
        'INSAP',
        'INsapPrimitivesDown',
        'IN-UNITDATA-request',
        'IN-DATA-ACK-request',
        'IN-REPLY-ACK-request',
        'IN-REPLY-UPDATE-request',
        'INSAPUP',
        'INsapPrimitivesUp',
        'IN-UNITDATA-indication',
        'IN-UNITDATA-STATUS-indication',
        'IN-DATA-ACK-indication',
        'IN-DATA-ACK-STATUS-indication',
        'IN-REPLY-indication',
        'IN-REPLY-STATUS-indication',
        'IN-REPLY-UPDATE-STATUS-indication',
        'INdata',
        'ACCPARAM',
        'AccessParameters',
        'NullType',
        'MACServiceClass',
        'INtxStatus',
        'VCIserialNumber',
        'EUI64',
        'LegacyCIID',
        'RemoteCIID',
        'OneOCTETones',
        'TwoOCTETones',
        'EUI64MAC48',
        'MACoui',
        'MACext',
        'MACmcID',
        ]
    _set_ = [
        'I-Params',
        'RegulSchemes',
        'INsapspsdown',
        'INsapspsup',
        'AccParams',
        ]
    _val_ = [
        'errors',
        'commProfile',
        'properties',
        'manuDeviceID',
        'iTS-scuId',
        'medID',
        'localCIID',
        'timeoutReg',
        'macAddress',
        'macAddrTemp',
        'ciClass',
        'ciaClass',
        'ciStatus',
        'notify',
        'medType',
        'regInfo',
        'connect',
        'simPin',
        'providerInfo',
        'minUserPriority',
        'queueLevel',
        'queueLowTh',
        'queueAlarmTh',
        'distancePeer',
        'commRangeRef',
        'timeOfLastRecep',
        'inactTimeLimit',
        'mediumUsage',
        'medUseObsTime',
        'peerMAC',
        'virtualCIs',
        'minPrioCrossCI',
        'rxSens',
        'txPower',
        'txPowMax',
        'peerRXpower',
        'dataRate',
        'dataRateNW',
        'dataRatesNW',
        'dataRateNWreq',
        'directivity',
        'blockLength',
        'freeAirTime',
        'frameLengthMax',
        'kineVectIn',
        'kineVectOut',
        'cost',
        'reliability',
        'logicalChannel',
        'nullRegScheme',
        'inUnitdataRq',
        'inDataAckRq',
        'inReplyAckRq',
        'inReplyUpdateRq',
        'inUnitdataInd',
        'inUnitdataStatusInd',
        'inDataAckInd',
        'inDataAckStatusInd',
        'inReplyInd',
        'inReplyStatusInd',
        'inReplyUpdateStatusInd',
        'nullAP',
        'version',
        ]
    _class_ = [
        'PARAMS',
        'IPARAM',
        'I-Params',
        'errors',
        'commProfile',
        'properties',
        'manuDeviceID',
        'iTS-scuId',
        'medID',
        'localCIID',
        'timeoutReg',
        'macAddress',
        'macAddrTemp',
        'ciClass',
        'ciaClass',
        'ciStatus',
        'notify',
        'medType',
        'regInfo',
        'connect',
        'simPin',
        'providerInfo',
        'minUserPriority',
        'queueLevel',
        'queueLowTh',
        'queueAlarmTh',
        'distancePeer',
        'commRangeRef',
        'timeOfLastRecep',
        'inactTimeLimit',
        'mediumUsage',
        'medUseObsTime',
        'peerMAC',
        'virtualCIs',
        'minPrioCrossCI',
        'rxSens',
        'txPower',
        'txPowMax',
        'peerRXpower',
        'dataRate',
        'dataRateNW',
        'dataRatesNW',
        'dataRateNWreq',
        'directivity',
        'blockLength',
        'freeAirTime',
        'frameLengthMax',
        'kineVectIn',
        'kineVectOut',
        'cost',
        'reliability',
        'logicalChannel',
        'REGULSCHEME',
        'RegulSchemes',
        'nullRegScheme',
        'INSAP',
        'INsapspsdown',
        'inUnitdataRq',
        'inDataAckRq',
        'inReplyAckRq',
        'inReplyUpdateRq',
        'INSAPUP',
        'INsapspsup',
        'inUnitdataInd',
        'inUnitdataStatusInd',
        'inDataAckInd',
        'inDataAckStatusInd',
        'inReplyInd',
        'inReplyStatusInd',
        'inReplyUpdateStatusInd',
        'ACCPARAM',
        'nullAP',
        'AccParams',
        ]
    _param_ = [
        ]
    
    #-----< Alt >-----#
    Alt = INT(name='Alt', mode=MODE_TYPE)
    Alt._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< CIaClass >-----#
    CIaClass = INT(name='CIaClass', mode=MODE_TYPE)
    CIaClass._cont = ASN1Dict([('unknown', 0), ('ciac-1', 1), ('ciac-2', 2), ('ciac-3', 3)])
    CIaClass._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< CIclass >-----#
    CIclass = INT(name='CIclass', mode=MODE_TYPE)
    CIclass._cont = ASN1Dict([('unknown', 0), ('cic-l1', 1), ('cic-l2', 2), ('cic-l3', 3), ('cic-l4', 4), ('cic-l5', 5), ('cic-il1', 254), ('cic-il2', 255)])
    CIclass._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< Link-ID >-----#
    Link_ID = SEQ(name='Link-ID', mode=MODE_TYPE)
    _Link_ID_remoteCIID = OCT_STR(name='remoteCIID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'EUI64')))
    _Link_ID_localCIID = OCT_STR(name='localCIID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'EUI64')))
    Link_ID._cont = ASN1Dict([
        ('remoteCIID', _Link_ID_remoteCIID),
        ('localCIID', _Link_ID_localCIID),
        ])
    Link_ID._ext = None
    
    #-----< CIstatus >-----#
    CIstatus = INT(name='CIstatus', mode=MODE_TYPE)
    CIstatus._cont = ASN1Dict([('not-existent', 0), ('existent', 1), ('unknown', 2), ('registered', 4), ('active', 8), ('connected', 16), ('suspended', 64), ('inactive', 128)])
    CIstatus._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< CommProfile >-----#
    CommProfile = SEQ_OF(name='CommProfile', mode=MODE_TYPE)
    _CommProfile__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'I-Param')))
    CommProfile._cont = _CommProfile__item_
    CommProfile._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< Connect >-----#
    Connect = INT(name='Connect', mode=MODE_TYPE)
    Connect._cont = ASN1Dict([('automatic', 0), ('manual', 255)])
    Connect._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< IN-SAPaddress >-----#
    IN_SAPaddress = INT(name='IN-SAPaddress', mode=MODE_TYPE)
    IN_SAPaddress._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< DataRate >-----#
    DataRate = INT(name='DataRate', mode=MODE_TYPE)
    DataRate._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=4294967295)], ev=None, er=[])
    
    #-----< DataRatesNW >-----#
    DataRatesNW = SEQ(name='DataRatesNW', mode=MODE_TYPE)
    _DataRatesNW_minimum = INT(name='minimum', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'DataRate')))
    _DataRatesNW_maximum = INT(name='maximum', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'DataRate')))
    DataRatesNW._cont = ASN1Dict([
        ('minimum', _DataRatesNW_minimum),
        ('maximum', _DataRatesNW_maximum),
        ])
    DataRatesNW._ext = None
    
    #-----< Directivity >-----#
    Directivity = SEQ(name='Directivity', mode=MODE_TYPE)
    _Directivity_mode = INT(name='mode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'DirMode')))
    _Directivity_dirPredef = INT(name='dirPredef', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Directivity_dirPredef._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _Directivity_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Directivity_fill._const_sz = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    _Directivity_dirVar = SEQ_OF(name='dirVar', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Directivity_dirVar__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'DirVar')))
    _Directivity_dirVar._cont = __Directivity_dirVar__item_
    _Directivity_dirVar._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1)], ev=None, er=[])
    Directivity._cont = ASN1Dict([
        ('mode', _Directivity_mode),
        ('dirPredef', _Directivity_dirPredef),
        ('fill', _Directivity_fill),
        ('dirVar', _Directivity_dirVar),
        ])
    Directivity._ext = None
    
    #-----< DirMode >-----#
    DirMode = INT(name='DirMode', mode=MODE_TYPE)
    DirMode._cont = ASN1Dict([('fixed', 0), ('tracking', 255)])
    DirMode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< DirVar >-----#
    DirVar = SEQ(name='DirVar', mode=MODE_TYPE)
    _DirVar_bsAzimuth = INT(name='bsAzimuth', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DirVar_bsAzimuth._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-32768, ub=32767)], ev=None, er=[])
    _DirVar_bsElevation = INT(name='bsElevation', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DirVar_bsElevation._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-128, ub=127)], ev=None, er=[])
    _DirVar_openHorizontal = INT(name='openHorizontal', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DirVar_openHorizontal._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _DirVar_openVertical = INT(name='openVertical', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DirVar_openVertical._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    DirVar._cont = ASN1Dict([
        ('bsAzimuth', _DirVar_bsAzimuth),
        ('bsElevation', _DirVar_bsElevation),
        ('openHorizontal', _DirVar_openHorizontal),
        ('openVertical', _DirVar_openVertical),
        ])
    DirVar._ext = None
    
    #-----< TxPowMax >-----#
    TxPowMax = INT(name='TxPowMax', mode=MODE_TYPE)
    TxPowMax._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< Errors >-----#
    Errors = SEQ_OF(name='Errors', mode=MODE_TYPE)
    _Errors__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'SingleError')))
    Errors._cont = _Errors__item_
    Errors._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< SingleError >-----#
    SingleError = SEQ(name='SingleError', mode=MODE_TYPE)
    _SingleError_paramNo = INT(name='paramNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SingleError_paramNo._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _SingleError_errStatus = INT(name='errStatus', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'ErrStatus')))
    SingleError._cont = ASN1Dict([
        ('paramNo', _SingleError_paramNo),
        ('errStatus', _SingleError_errStatus),
        ])
    SingleError._ext = None
    
    #-----< Gs >-----#
    Gs = INT(name='Gs', mode=MODE_TYPE)
    Gs._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< KineVectIn >-----#
    KineVectIn = SEQ(name='KineVectIn', mode=MODE_TYPE)
    _KineVectIn_dut = INT(name='dut', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Time48IAT')))
    _KineVectIn_lat = INT(name='lat', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Lat')))
    _KineVectIn_lon = INT(name='lon', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Lon')))
    _KineVectIn_alt = INT(name='alt', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Alt')))
    _KineVectIn_gs = INT(name='gs', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Gs')))
    _KineVectIn_tta = INT(name='tta', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Tta')))
    KineVectIn._cont = ASN1Dict([
        ('dut', _KineVectIn_dut),
        ('lat', _KineVectIn_lat),
        ('lon', _KineVectIn_lon),
        ('alt', _KineVectIn_alt),
        ('gs', _KineVectIn_gs),
        ('tta', _KineVectIn_tta),
        ])
    KineVectIn._ext = None
    
    #-----< KineVectOut >-----#
    KineVectOut = SEQ(name='KineVectOut', mode=MODE_TYPE)
    _KineVectOut_dut = INT(name='dut', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Time48IAT')))
    _KineVectOut_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _KineVectOut_fill._const_sz = ASN1Set(rv=[5], rr=[], ev=None, er=[])
    _KineVectOut_options = SEQ_OF(name='options', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __KineVectOut_options__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'KineVectOptions')))
    _KineVectOut_options._cont = __KineVectOut_options__item_
    _KineVectOut_options._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=5)], ev=None, er=[])
    KineVectOut._cont = ASN1Dict([
        ('dut', _KineVectOut_dut),
        ('fill', _KineVectOut_fill),
        ('options', _KineVectOut_options),
        ])
    KineVectOut._ext = None
    
    #-----< KineVectOptions >-----#
    KineVectOptions = CHOICE(name='KineVectOptions', mode=MODE_TYPE)
    _KineVectOptions_lat = INT(name='lat', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Lat')))
    _KineVectOptions_lon = INT(name='lon', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Lon')))
    _KineVectOptions_alt = INT(name='alt', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Alt')))
    _KineVectOptions_gs = INT(name='gs', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Gs')))
    _KineVectOptions_tta = INT(name='tta', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Tta')))
    KineVectOptions._cont = ASN1Dict([
        ('lat', _KineVectOptions_lat),
        ('lon', _KineVectOptions_lon),
        ('alt', _KineVectOptions_alt),
        ('gs', _KineVectOptions_gs),
        ('tta', _KineVectOptions_tta),
        ])
    KineVectOptions._ext = None
    
    #-----< Lat >-----#
    Lat = INT(name='Lat', mode=MODE_TYPE)
    Lat._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-2147483648, ub=2147483647)], ev=None, er=[])
    
    #-----< Lon >-----#
    Lon = INT(name='Lon', mode=MODE_TYPE)
    Lon._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-2147483648, ub=2147483647)], ev=None, er=[])
    
    #-----< LLserviceAddr >-----#
    LLserviceAddr = SEQ(name='LLserviceAddr', mode=MODE_TYPE)
    _LLserviceAddr_csap = INT(name='csap', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'IN-SAPaddress')))
    _LLserviceAddr_linkID = SEQ(name='linkID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    LLserviceAddr._cont = ASN1Dict([
        ('csap', _LLserviceAddr_csap),
        ('linkID', _LLserviceAddr_linkID),
        ])
    LLserviceAddr._ext = None
    
    #-----< MACaddress >-----#
    MACaddress = OCT_STR(name='MACaddress', mode=MODE_TYPE)
    MACaddress._const_sz = ASN1Set(rv=[6], rr=[], ev=None, er=[])
    
    #-----< MediumUsage >-----#
    MediumUsage = SEQ(name='MediumUsage', mode=MODE_TYPE)
    _MediumUsage_receive = INT(name='receive', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _MediumUsage_receive._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _MediumUsage_transmit = INT(name='transmit', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _MediumUsage_transmit._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    MediumUsage._cont = ASN1Dict([
        ('receive', _MediumUsage_receive),
        ('transmit', _MediumUsage_transmit),
        ])
    MediumUsage._ext = None
    
    #-----< MedType >-----#
    MedType = INT(name='MedType', mode=MODE_TYPE)
    MedType._cont = ASN1Dict([('unknown', 0), ('any', 1), ('iso21212', 2), ('iso21213', 3), ('iso21214', 4), ('iso21215', 5), ('iso21216', 6), ('iso25112', 7), ('iso25113', 8), ('iso29283', 9), ('iso17515', 10), ('iso15628', 128), ('can', 254), ('ethernet', 255)])
    MedType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< MedUseObsTime >-----#
    MedUseObsTime = SEQ(name='MedUseObsTime', mode=MODE_TYPE)
    _MedUseObsTime_value = INT(name='value', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _MedUseObsTime_value._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1023)], ev=None, er=[])
    _MedUseObsTime_unit = INT(name='unit', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'TimeUnit')))
    MedUseObsTime._cont = ASN1Dict([
        ('value', _MedUseObsTime_value),
        ('unit', _MedUseObsTime_unit),
        ])
    MedUseObsTime._ext = None
    
    #-----< TimeUnit >-----#
    TimeUnit = INT(name='TimeUnit', mode=MODE_TYPE)
    TimeUnit._cont = ASN1Dict([('microseconds', 0), ('milliseconds', 1), ('seconds', 2), ('minutes', 3), ('hours', 4), ('days', 5), ('weeks', 6), ('months', 7), ('years', 8)])
    TimeUnit._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=63)], ev=None, er=[])
    
    #-----< Notify >-----#
    Notify = SEQ_OF(name='Notify', mode=MODE_TYPE)
    _Notify__item_ = INT(name='_item_', mode=MODE_TYPE)
    _Notify__item_._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    Notify._cont = _Notify__item_
    Notify._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< PeerRXpower >-----#
    PeerRXpower = INT(name='PeerRXpower', mode=MODE_TYPE)
    PeerRXpower._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< PARAMS >-----#
    PARAMS = CLASS(name='PARAMS', mode=MODE_TYPE)
    _PARAMS_paramRef = INT(name='paramRef', mode=MODE_VALUE)
    _PARAMS_paramRef._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _PARAMS_Parameter = OPEN(name='Parameter', mode=MODE_TYPE)
    PARAMS._cont = ASN1Dict([
        ('paramRef', _PARAMS_paramRef),
        ('Parameter', _PARAMS_Parameter),
        ])
    
    #-----< IPARAM >-----#
    IPARAM = CLASS(name='IPARAM', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'PARAMS')))
    
    #-----< I-Params >-----#
    I_Params = CLASS(name='I-Params', mode=MODE_SET, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _I_Params_val_Parameter_0 = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Errors')))
    _I_Params_val_Parameter_1 = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'CommProfile')))
    _I_Params_val_Parameter_2 = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Properties')))
    _I_Params_val_Parameter_3 = STR_UTF8(name='Parameter', mode=MODE_TYPE)
    _I_Params_val_Parameter_4 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'ITS-scuId')))
    _I_Params_val_Parameter_5 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'MedID')))
    _I_Params_val_Parameter_6 = OCT_STR(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'EUI64')))
    _I_Params_val_Parameter_7 = INT(name='Parameter', mode=MODE_TYPE)
    _I_Params_val_Parameter_7._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _I_Params_val_Parameter_8 = OCT_STR(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'MACaddress')))
    _I_Params_val_Parameter_9 = OCT_STR(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'MACaddress')))
    _I_Params_val_Parameter_10 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'CIclass')))
    _I_Params_val_Parameter_11 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'CIaClass')))
    _I_Params_val_Parameter_12 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'CIstatus')))
    _I_Params_val_Parameter_13 = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Notify')))
    _I_Params_val_Parameter_14 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'MedType')))
    _I_Params_val_Parameter_15 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'RegInfo')))
    _I_Params_val_Parameter_16 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Connect')))
    _I_Params_val_Parameter_17 = OCT_STR(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'SimPin')))
    _I_Params_val_Parameter_18 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'ProviderInfo')))
    _I_Params_val_Parameter_19 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _I_Params_val_Parameter_20 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'QueueLevel')))
    _I_Params_val_Parameter_21 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'QueueValue')))
    _I_Params_val_Parameter_22 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'QueueValue')))
    _I_Params_val_Parameter_23 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Distance')))
    _I_Params_val_Parameter_24 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Distance')))
    _I_Params_val_Parameter_25 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Time48IAT')))
    _I_Params_val_Parameter_26 = INT(name='Parameter', mode=MODE_TYPE)
    _I_Params_val_Parameter_26._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _I_Params_val_Parameter_27 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'MediumUsage')))
    _I_Params_val_Parameter_28 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'MedUseObsTime')))
    _I_Params_val_Parameter_29 = OCT_STR(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'MACaddress')))
    _I_Params_val_Parameter_30 = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'VirtualCIs')))
    _I_Params_val_Parameter_31 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _I_Params_val_Parameter_32 = INT(name='Parameter', mode=MODE_TYPE)
    _I_Params_val_Parameter_32._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _I_Params_val_Parameter_33 = INT(name='Parameter', mode=MODE_TYPE)
    _I_Params_val_Parameter_33._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _I_Params_val_Parameter_34 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'TxPowMax')))
    _I_Params_val_Parameter_35 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'PeerRXpower')))
    _I_Params_val_Parameter_36 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'DataRate')))
    _I_Params_val_Parameter_37 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'DataRate')))
    _I_Params_val_Parameter_38 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'DataRatesNW')))
    _I_Params_val_Parameter_39 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'DataRate')))
    _I_Params_val_Parameter_40 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Directivity')))
    _I_Params_val_Parameter_41 = INT(name='Parameter', mode=MODE_TYPE)
    _I_Params_val_Parameter_41._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _I_Params_val_Parameter_42 = INT(name='Parameter', mode=MODE_TYPE)
    _I_Params_val_Parameter_42._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _I_Params_val_Parameter_43 = INT(name='Parameter', mode=MODE_TYPE)
    _I_Params_val_Parameter_43._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _I_Params_val_Parameter_44 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'KineVectIn')))
    _I_Params_val_Parameter_45 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'KineVectOut')))
    _I_Params_val_Parameter_46 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MediumCost')))
    _I_Params_val_Parameter_47 = INT(name='Parameter', mode=MODE_TYPE)
    _I_Params_val_Parameter_47._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _I_Params_val_Parameter_48 = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'LogicalChannels')))
    I_Params._val = ASN1Set(rv=[dict([('paramRef', 0), ('Parameter', _I_Params_val_Parameter_0)]), dict([('paramRef', 2), ('Parameter', _I_Params_val_Parameter_1)]), dict([('paramRef', 3), ('Parameter', _I_Params_val_Parameter_2)]), dict([('paramRef', 4), ('Parameter', _I_Params_val_Parameter_3)]), dict([('paramRef', 5), ('Parameter', _I_Params_val_Parameter_4)]), dict([('paramRef', 6), ('Parameter', _I_Params_val_Parameter_5)]), dict([('paramRef', 7), ('Parameter', _I_Params_val_Parameter_6)]), dict([('paramRef', 8), ('Parameter', _I_Params_val_Parameter_7)]), dict([('paramRef', 9), ('Parameter', _I_Params_val_Parameter_8)]), dict([('paramRef', 10), ('Parameter', _I_Params_val_Parameter_9)]), dict([('paramRef', 11), ('Parameter', _I_Params_val_Parameter_10)]), dict([('paramRef', 12), ('Parameter', _I_Params_val_Parameter_11)]), dict([('paramRef', 13), ('Parameter', _I_Params_val_Parameter_12)]), dict([('paramRef', 16), ('Parameter', _I_Params_val_Parameter_13)]), dict([('paramRef', 17), ('Parameter', _I_Params_val_Parameter_14)]), dict([('paramRef', 18), ('Parameter', _I_Params_val_Parameter_15)]), dict([('paramRef', 19), ('Parameter', _I_Params_val_Parameter_16)]), dict([('paramRef', 20), ('Parameter', _I_Params_val_Parameter_17)]), dict([('paramRef', 21), ('Parameter', _I_Params_val_Parameter_18)]), dict([('paramRef', 22), ('Parameter', _I_Params_val_Parameter_19)]), dict([('paramRef', 23), ('Parameter', _I_Params_val_Parameter_20)]), dict([('paramRef', 24), ('Parameter', _I_Params_val_Parameter_21)]), dict([('paramRef', 25), ('Parameter', _I_Params_val_Parameter_22)]), dict([('paramRef', 26), ('Parameter', _I_Params_val_Parameter_23)]), dict([('paramRef', 27), ('Parameter', _I_Params_val_Parameter_24)]), dict([('paramRef', 28), ('Parameter', _I_Params_val_Parameter_25)]), dict([('paramRef', 29), ('Parameter', _I_Params_val_Parameter_26)]), dict([('paramRef', 30), ('Parameter', _I_Params_val_Parameter_27)]), dict([('paramRef', 31), ('Parameter', _I_Params_val_Parameter_28)]), dict([('paramRef', 32), ('Parameter', _I_Params_val_Parameter_29)]), dict([('paramRef', 33), ('Parameter', _I_Params_val_Parameter_30)]), dict([('paramRef', 34), ('Parameter', _I_Params_val_Parameter_31)]), dict([('paramRef', 35), ('Parameter', _I_Params_val_Parameter_32)]), dict([('paramRef', 36), ('Parameter', _I_Params_val_Parameter_33)]), dict([('paramRef', 37), ('Parameter', _I_Params_val_Parameter_34)]), dict([('paramRef', 38), ('Parameter', _I_Params_val_Parameter_35)]), dict([('paramRef', 39), ('Parameter', _I_Params_val_Parameter_36)]), dict([('paramRef', 40), ('Parameter', _I_Params_val_Parameter_37)]), dict([('paramRef', 41), ('Parameter', _I_Params_val_Parameter_38)]), dict([('paramRef', 42), ('Parameter', _I_Params_val_Parameter_39)]), dict([('paramRef', 43), ('Parameter', _I_Params_val_Parameter_40)]), dict([('paramRef', 44), ('Parameter', _I_Params_val_Parameter_41)]), dict([('paramRef', 45), ('Parameter', _I_Params_val_Parameter_42)]), dict([('paramRef', 46), ('Parameter', _I_Params_val_Parameter_43)]), dict([('paramRef', 47), ('Parameter', _I_Params_val_Parameter_44)]), dict([('paramRef', 48), ('Parameter', _I_Params_val_Parameter_45)]), dict([('paramRef', 49), ('Parameter', _I_Params_val_Parameter_46)]), dict([('paramRef', 50), ('Parameter', _I_Params_val_Parameter_47)]), dict([('paramRef', 51), ('Parameter', _I_Params_val_Parameter_48)])], rr=[], ev=[], er=[])
    
    #-----< I-Param >-----#
    I_Param = SEQ(name='I-Param', mode=MODE_TYPE)
    _I_Param_paramNo = INT(name='paramNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMllsap', 'IPARAM'), ['paramRef']))
    __I_Param_paramNo_tab = CLASS(name='_tab_IPARAM', mode=MODE_SET, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    ___I_Param_paramNo_tab_val_Parameter_0 = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Errors')))
    ___I_Param_paramNo_tab_val_Parameter_1 = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'CommProfile')))
    ___I_Param_paramNo_tab_val_Parameter_2 = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Properties')))
    ___I_Param_paramNo_tab_val_Parameter_3 = STR_UTF8(name='Parameter', mode=MODE_TYPE)
    ___I_Param_paramNo_tab_val_Parameter_4 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'ITS-scuId')))
    ___I_Param_paramNo_tab_val_Parameter_5 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'MedID')))
    ___I_Param_paramNo_tab_val_Parameter_6 = OCT_STR(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'EUI64')))
    ___I_Param_paramNo_tab_val_Parameter_7 = INT(name='Parameter', mode=MODE_TYPE)
    ___I_Param_paramNo_tab_val_Parameter_7._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    ___I_Param_paramNo_tab_val_Parameter_8 = OCT_STR(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'MACaddress')))
    ___I_Param_paramNo_tab_val_Parameter_9 = OCT_STR(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'MACaddress')))
    ___I_Param_paramNo_tab_val_Parameter_10 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'CIclass')))
    ___I_Param_paramNo_tab_val_Parameter_11 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'CIaClass')))
    ___I_Param_paramNo_tab_val_Parameter_12 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'CIstatus')))
    ___I_Param_paramNo_tab_val_Parameter_13 = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Notify')))
    ___I_Param_paramNo_tab_val_Parameter_14 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'MedType')))
    ___I_Param_paramNo_tab_val_Parameter_15 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'RegInfo')))
    ___I_Param_paramNo_tab_val_Parameter_16 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Connect')))
    ___I_Param_paramNo_tab_val_Parameter_17 = OCT_STR(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'SimPin')))
    ___I_Param_paramNo_tab_val_Parameter_18 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'ProviderInfo')))
    ___I_Param_paramNo_tab_val_Parameter_19 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    ___I_Param_paramNo_tab_val_Parameter_20 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'QueueLevel')))
    ___I_Param_paramNo_tab_val_Parameter_21 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'QueueValue')))
    ___I_Param_paramNo_tab_val_Parameter_22 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'QueueValue')))
    ___I_Param_paramNo_tab_val_Parameter_23 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Distance')))
    ___I_Param_paramNo_tab_val_Parameter_24 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Distance')))
    ___I_Param_paramNo_tab_val_Parameter_25 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Time48IAT')))
    ___I_Param_paramNo_tab_val_Parameter_26 = INT(name='Parameter', mode=MODE_TYPE)
    ___I_Param_paramNo_tab_val_Parameter_26._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    ___I_Param_paramNo_tab_val_Parameter_27 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'MediumUsage')))
    ___I_Param_paramNo_tab_val_Parameter_28 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'MedUseObsTime')))
    ___I_Param_paramNo_tab_val_Parameter_29 = OCT_STR(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'MACaddress')))
    ___I_Param_paramNo_tab_val_Parameter_30 = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'VirtualCIs')))
    ___I_Param_paramNo_tab_val_Parameter_31 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    ___I_Param_paramNo_tab_val_Parameter_32 = INT(name='Parameter', mode=MODE_TYPE)
    ___I_Param_paramNo_tab_val_Parameter_32._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    ___I_Param_paramNo_tab_val_Parameter_33 = INT(name='Parameter', mode=MODE_TYPE)
    ___I_Param_paramNo_tab_val_Parameter_33._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    ___I_Param_paramNo_tab_val_Parameter_34 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'TxPowMax')))
    ___I_Param_paramNo_tab_val_Parameter_35 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'PeerRXpower')))
    ___I_Param_paramNo_tab_val_Parameter_36 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'DataRate')))
    ___I_Param_paramNo_tab_val_Parameter_37 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'DataRate')))
    ___I_Param_paramNo_tab_val_Parameter_38 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'DataRatesNW')))
    ___I_Param_paramNo_tab_val_Parameter_39 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'DataRate')))
    ___I_Param_paramNo_tab_val_Parameter_40 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Directivity')))
    ___I_Param_paramNo_tab_val_Parameter_41 = INT(name='Parameter', mode=MODE_TYPE)
    ___I_Param_paramNo_tab_val_Parameter_41._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    ___I_Param_paramNo_tab_val_Parameter_42 = INT(name='Parameter', mode=MODE_TYPE)
    ___I_Param_paramNo_tab_val_Parameter_42._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    ___I_Param_paramNo_tab_val_Parameter_43 = INT(name='Parameter', mode=MODE_TYPE)
    ___I_Param_paramNo_tab_val_Parameter_43._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    ___I_Param_paramNo_tab_val_Parameter_44 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'KineVectIn')))
    ___I_Param_paramNo_tab_val_Parameter_45 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'KineVectOut')))
    ___I_Param_paramNo_tab_val_Parameter_46 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MediumCost')))
    ___I_Param_paramNo_tab_val_Parameter_47 = INT(name='Parameter', mode=MODE_TYPE)
    ___I_Param_paramNo_tab_val_Parameter_47._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    ___I_Param_paramNo_tab_val_Parameter_48 = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'LogicalChannels')))
    __I_Param_paramNo_tab._val = ASN1Set(rv=[dict([('paramRef', 0), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_0)]), dict([('paramRef', 2), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_1)]), dict([('paramRef', 3), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_2)]), dict([('paramRef', 4), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_3)]), dict([('paramRef', 5), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_4)]), dict([('paramRef', 6), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_5)]), dict([('paramRef', 7), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_6)]), dict([('paramRef', 8), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_7)]), dict([('paramRef', 9), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_8)]), dict([('paramRef', 10), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_9)]), dict([('paramRef', 11), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_10)]), dict([('paramRef', 12), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_11)]), dict([('paramRef', 13), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_12)]), dict([('paramRef', 16), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_13)]), dict([('paramRef', 17), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_14)]), dict([('paramRef', 18), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_15)]), dict([('paramRef', 19), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_16)]), dict([('paramRef', 20), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_17)]), dict([('paramRef', 21), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_18)]), dict([('paramRef', 22), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_19)]), dict([('paramRef', 23), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_20)]), dict([('paramRef', 24), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_21)]), dict([('paramRef', 25), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_22)]), dict([('paramRef', 26), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_23)]), dict([('paramRef', 27), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_24)]), dict([('paramRef', 28), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_25)]), dict([('paramRef', 29), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_26)]), dict([('paramRef', 30), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_27)]), dict([('paramRef', 31), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_28)]), dict([('paramRef', 32), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_29)]), dict([('paramRef', 33), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_30)]), dict([('paramRef', 34), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_31)]), dict([('paramRef', 35), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_32)]), dict([('paramRef', 36), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_33)]), dict([('paramRef', 37), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_34)]), dict([('paramRef', 38), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_35)]), dict([('paramRef', 39), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_36)]), dict([('paramRef', 40), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_37)]), dict([('paramRef', 41), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_38)]), dict([('paramRef', 42), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_39)]), dict([('paramRef', 43), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_40)]), dict([('paramRef', 44), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_41)]), dict([('paramRef', 45), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_42)]), dict([('paramRef', 46), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_43)]), dict([('paramRef', 47), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_44)]), dict([('paramRef', 48), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_45)]), dict([('paramRef', 49), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_46)]), dict([('paramRef', 50), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_47)]), dict([('paramRef', 51), ('Parameter', ___I_Param_paramNo_tab_val_Parameter_48)])], rr=[], ev=None, er=[])
    _I_Param_paramNo._const_tab = __I_Param_paramNo_tab
    _I_Param_paramNo._const_tab_at = None
    _I_Param_paramNo._const_tab_id = 'paramRef'
    _I_Param_parameter = OPEN(name='parameter', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMllsap', 'IPARAM'), ['Parameter']))
    _I_Param_parameter._const_tab = __I_Param_paramNo_tab
    _I_Param_parameter._const_tab_at = ('..', 'paramNo')
    _I_Param_parameter._const_tab_id = 'Parameter'
    I_Param._cont = ASN1Dict([
        ('paramNo', _I_Param_paramNo),
        ('parameter', _I_Param_parameter),
        ])
    I_Param._ext = None
    
    #-----< errors >-----#
    errors = CLASS(name='errors', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _errors_val_Parameter = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Errors')))
    errors._val = dict([('paramRef', 0), ('Parameter', _errors_val_Parameter)])
    
    #-----< commProfile >-----#
    commProfile = CLASS(name='commProfile', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _commProfile_val_Parameter = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'CommProfile')))
    commProfile._val = dict([('paramRef', 2), ('Parameter', _commProfile_val_Parameter)])
    
    #-----< properties >-----#
    properties = CLASS(name='properties', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _properties_val_Parameter = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Properties')))
    properties._val = dict([('paramRef', 3), ('Parameter', _properties_val_Parameter)])
    
    #-----< manuDeviceID >-----#
    manuDeviceID = CLASS(name='manuDeviceID', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _manuDeviceID_val_Parameter = STR_UTF8(name='Parameter', mode=MODE_TYPE)
    manuDeviceID._val = dict([('paramRef', 4), ('Parameter', _manuDeviceID_val_Parameter)])
    
    #-----< iTS-scuId >-----#
    iTS_scuId = CLASS(name='iTS-scuId', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _iTS_scuId_val_Parameter = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'ITS-scuId')))
    iTS_scuId._val = dict([('paramRef', 5), ('Parameter', _iTS_scuId_val_Parameter)])
    
    #-----< medID >-----#
    medID = CLASS(name='medID', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _medID_val_Parameter = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'MedID')))
    medID._val = dict([('paramRef', 6), ('Parameter', _medID_val_Parameter)])
    
    #-----< localCIID >-----#
    localCIID = CLASS(name='localCIID', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _localCIID_val_Parameter = OCT_STR(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'EUI64')))
    localCIID._val = dict([('paramRef', 7), ('Parameter', _localCIID_val_Parameter)])
    
    #-----< timeoutReg >-----#
    timeoutReg = CLASS(name='timeoutReg', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _timeoutReg_val_Parameter = INT(name='Parameter', mode=MODE_TYPE)
    _timeoutReg_val_Parameter._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    timeoutReg._val = dict([('paramRef', 8), ('Parameter', _timeoutReg_val_Parameter)])
    
    #-----< macAddress >-----#
    macAddress = CLASS(name='macAddress', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _macAddress_val_Parameter = OCT_STR(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'MACaddress')))
    macAddress._val = dict([('paramRef', 9), ('Parameter', _macAddress_val_Parameter)])
    
    #-----< macAddrTemp >-----#
    macAddrTemp = CLASS(name='macAddrTemp', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _macAddrTemp_val_Parameter = OCT_STR(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'MACaddress')))
    macAddrTemp._val = dict([('paramRef', 10), ('Parameter', _macAddrTemp_val_Parameter)])
    
    #-----< ciClass >-----#
    ciClass = CLASS(name='ciClass', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _ciClass_val_Parameter = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'CIclass')))
    ciClass._val = dict([('paramRef', 11), ('Parameter', _ciClass_val_Parameter)])
    
    #-----< ciaClass >-----#
    ciaClass = CLASS(name='ciaClass', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _ciaClass_val_Parameter = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'CIaClass')))
    ciaClass._val = dict([('paramRef', 12), ('Parameter', _ciaClass_val_Parameter)])
    
    #-----< ciStatus >-----#
    ciStatus = CLASS(name='ciStatus', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _ciStatus_val_Parameter = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'CIstatus')))
    ciStatus._val = dict([('paramRef', 13), ('Parameter', _ciStatus_val_Parameter)])
    
    #-----< notify >-----#
    notify = CLASS(name='notify', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _notify_val_Parameter = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Notify')))
    notify._val = dict([('paramRef', 16), ('Parameter', _notify_val_Parameter)])
    
    #-----< medType >-----#
    medType = CLASS(name='medType', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _medType_val_Parameter = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'MedType')))
    medType._val = dict([('paramRef', 17), ('Parameter', _medType_val_Parameter)])
    
    #-----< regInfo >-----#
    regInfo = CLASS(name='regInfo', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _regInfo_val_Parameter = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'RegInfo')))
    regInfo._val = dict([('paramRef', 18), ('Parameter', _regInfo_val_Parameter)])
    
    #-----< connect >-----#
    connect = CLASS(name='connect', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _connect_val_Parameter = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Connect')))
    connect._val = dict([('paramRef', 19), ('Parameter', _connect_val_Parameter)])
    
    #-----< simPin >-----#
    simPin = CLASS(name='simPin', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _simPin_val_Parameter = OCT_STR(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'SimPin')))
    simPin._val = dict([('paramRef', 20), ('Parameter', _simPin_val_Parameter)])
    
    #-----< providerInfo >-----#
    providerInfo = CLASS(name='providerInfo', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _providerInfo_val_Parameter = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'ProviderInfo')))
    providerInfo._val = dict([('paramRef', 21), ('Parameter', _providerInfo_val_Parameter)])
    
    #-----< minUserPriority >-----#
    minUserPriority = CLASS(name='minUserPriority', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _minUserPriority_val_Parameter = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    minUserPriority._val = dict([('paramRef', 22), ('Parameter', _minUserPriority_val_Parameter)])
    
    #-----< queueLevel >-----#
    queueLevel = CLASS(name='queueLevel', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _queueLevel_val_Parameter = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'QueueLevel')))
    queueLevel._val = dict([('paramRef', 23), ('Parameter', _queueLevel_val_Parameter)])
    
    #-----< queueLowTh >-----#
    queueLowTh = CLASS(name='queueLowTh', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _queueLowTh_val_Parameter = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'QueueValue')))
    queueLowTh._val = dict([('paramRef', 24), ('Parameter', _queueLowTh_val_Parameter)])
    
    #-----< queueAlarmTh >-----#
    queueAlarmTh = CLASS(name='queueAlarmTh', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _queueAlarmTh_val_Parameter = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'QueueValue')))
    queueAlarmTh._val = dict([('paramRef', 25), ('Parameter', _queueAlarmTh_val_Parameter)])
    
    #-----< distancePeer >-----#
    distancePeer = CLASS(name='distancePeer', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _distancePeer_val_Parameter = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Distance')))
    distancePeer._val = dict([('paramRef', 26), ('Parameter', _distancePeer_val_Parameter)])
    
    #-----< commRangeRef >-----#
    commRangeRef = CLASS(name='commRangeRef', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _commRangeRef_val_Parameter = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Distance')))
    commRangeRef._val = dict([('paramRef', 27), ('Parameter', _commRangeRef_val_Parameter)])
    
    #-----< timeOfLastRecep >-----#
    timeOfLastRecep = CLASS(name='timeOfLastRecep', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _timeOfLastRecep_val_Parameter = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Time48IAT')))
    timeOfLastRecep._val = dict([('paramRef', 28), ('Parameter', _timeOfLastRecep_val_Parameter)])
    
    #-----< inactTimeLimit >-----#
    inactTimeLimit = CLASS(name='inactTimeLimit', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _inactTimeLimit_val_Parameter = INT(name='Parameter', mode=MODE_TYPE)
    _inactTimeLimit_val_Parameter._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    inactTimeLimit._val = dict([('paramRef', 29), ('Parameter', _inactTimeLimit_val_Parameter)])
    
    #-----< mediumUsage >-----#
    mediumUsage = CLASS(name='mediumUsage', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _mediumUsage_val_Parameter = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'MediumUsage')))
    mediumUsage._val = dict([('paramRef', 30), ('Parameter', _mediumUsage_val_Parameter)])
    
    #-----< medUseObsTime >-----#
    medUseObsTime = CLASS(name='medUseObsTime', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _medUseObsTime_val_Parameter = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'MedUseObsTime')))
    medUseObsTime._val = dict([('paramRef', 31), ('Parameter', _medUseObsTime_val_Parameter)])
    
    #-----< peerMAC >-----#
    peerMAC = CLASS(name='peerMAC', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _peerMAC_val_Parameter = OCT_STR(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'MACaddress')))
    peerMAC._val = dict([('paramRef', 32), ('Parameter', _peerMAC_val_Parameter)])
    
    #-----< virtualCIs >-----#
    virtualCIs = CLASS(name='virtualCIs', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _virtualCIs_val_Parameter = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'VirtualCIs')))
    virtualCIs._val = dict([('paramRef', 33), ('Parameter', _virtualCIs_val_Parameter)])
    
    #-----< minPrioCrossCI >-----#
    minPrioCrossCI = CLASS(name='minPrioCrossCI', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _minPrioCrossCI_val_Parameter = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    minPrioCrossCI._val = dict([('paramRef', 34), ('Parameter', _minPrioCrossCI_val_Parameter)])
    
    #-----< rxSens >-----#
    rxSens = CLASS(name='rxSens', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _rxSens_val_Parameter = INT(name='Parameter', mode=MODE_TYPE)
    _rxSens_val_Parameter._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    rxSens._val = dict([('paramRef', 35), ('Parameter', _rxSens_val_Parameter)])
    
    #-----< txPower >-----#
    txPower = CLASS(name='txPower', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _txPower_val_Parameter = INT(name='Parameter', mode=MODE_TYPE)
    _txPower_val_Parameter._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    txPower._val = dict([('paramRef', 36), ('Parameter', _txPower_val_Parameter)])
    
    #-----< txPowMax >-----#
    txPowMax = CLASS(name='txPowMax', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _txPowMax_val_Parameter = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'TxPowMax')))
    txPowMax._val = dict([('paramRef', 37), ('Parameter', _txPowMax_val_Parameter)])
    
    #-----< peerRXpower >-----#
    peerRXpower = CLASS(name='peerRXpower', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _peerRXpower_val_Parameter = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'PeerRXpower')))
    peerRXpower._val = dict([('paramRef', 38), ('Parameter', _peerRXpower_val_Parameter)])
    
    #-----< dataRate >-----#
    dataRate = CLASS(name='dataRate', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _dataRate_val_Parameter = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'DataRate')))
    dataRate._val = dict([('paramRef', 39), ('Parameter', _dataRate_val_Parameter)])
    
    #-----< dataRateNW >-----#
    dataRateNW = CLASS(name='dataRateNW', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _dataRateNW_val_Parameter = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'DataRate')))
    dataRateNW._val = dict([('paramRef', 40), ('Parameter', _dataRateNW_val_Parameter)])
    
    #-----< dataRatesNW >-----#
    dataRatesNW = CLASS(name='dataRatesNW', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _dataRatesNW_val_Parameter = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'DataRatesNW')))
    dataRatesNW._val = dict([('paramRef', 41), ('Parameter', _dataRatesNW_val_Parameter)])
    
    #-----< dataRateNWreq >-----#
    dataRateNWreq = CLASS(name='dataRateNWreq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _dataRateNWreq_val_Parameter = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'DataRate')))
    dataRateNWreq._val = dict([('paramRef', 42), ('Parameter', _dataRateNWreq_val_Parameter)])
    
    #-----< directivity >-----#
    directivity = CLASS(name='directivity', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _directivity_val_Parameter = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Directivity')))
    directivity._val = dict([('paramRef', 43), ('Parameter', _directivity_val_Parameter)])
    
    #-----< blockLength >-----#
    blockLength = CLASS(name='blockLength', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _blockLength_val_Parameter = INT(name='Parameter', mode=MODE_TYPE)
    _blockLength_val_Parameter._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    blockLength._val = dict([('paramRef', 44), ('Parameter', _blockLength_val_Parameter)])
    
    #-----< freeAirTime >-----#
    freeAirTime = CLASS(name='freeAirTime', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _freeAirTime_val_Parameter = INT(name='Parameter', mode=MODE_TYPE)
    _freeAirTime_val_Parameter._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    freeAirTime._val = dict([('paramRef', 45), ('Parameter', _freeAirTime_val_Parameter)])
    
    #-----< frameLengthMax >-----#
    frameLengthMax = CLASS(name='frameLengthMax', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _frameLengthMax_val_Parameter = INT(name='Parameter', mode=MODE_TYPE)
    _frameLengthMax_val_Parameter._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    frameLengthMax._val = dict([('paramRef', 46), ('Parameter', _frameLengthMax_val_Parameter)])
    
    #-----< kineVectIn >-----#
    kineVectIn = CLASS(name='kineVectIn', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _kineVectIn_val_Parameter = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'KineVectIn')))
    kineVectIn._val = dict([('paramRef', 47), ('Parameter', _kineVectIn_val_Parameter)])
    
    #-----< kineVectOut >-----#
    kineVectOut = CLASS(name='kineVectOut', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _kineVectOut_val_Parameter = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'KineVectOut')))
    kineVectOut._val = dict([('paramRef', 48), ('Parameter', _kineVectOut_val_Parameter)])
    
    #-----< cost >-----#
    cost = CLASS(name='cost', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _cost_val_Parameter = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MediumCost')))
    cost._val = dict([('paramRef', 49), ('Parameter', _cost_val_Parameter)])
    
    #-----< reliability >-----#
    reliability = CLASS(name='reliability', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _reliability_val_Parameter = INT(name='Parameter', mode=MODE_TYPE)
    _reliability_val_Parameter._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    reliability._val = dict([('paramRef', 50), ('Parameter', _reliability_val_Parameter)])
    
    #-----< logicalChannel >-----#
    logicalChannel = CLASS(name='logicalChannel', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'IPARAM')))
    _logicalChannel_val_Parameter = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'LogicalChannels')))
    logicalChannel._val = dict([('paramRef', 51), ('Parameter', _logicalChannel_val_Parameter)])
    
    #-----< Time48IAT >-----#
    Time48IAT = INT(name='Time48IAT', mode=MODE_TYPE)
    Time48IAT._cont = ASN1Dict([('utcStartOf2004', 0), ('oneMillisecAfterUTCStartOf2004', 1)])
    Time48IAT._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=281474976710655)], ev=None, er=[])
    
    #-----< I-ParamNo >-----#
    I_ParamNo = INT(name='I-ParamNo', mode=MODE_TYPE)
    I_ParamNo._cont = ASN1Dict([('errors', 0), ('commProfile', 2), ('properties', 3), ('manuDeviceID', 4), ('iTS-scuId', 5), ('medID', 6), ('localCIID', 7), ('timeoutReg', 8), ('macAddress', 9), ('macAddrTemp', 10), ('ciClass', 11), ('ciaClass', 12), ('ciStatus', 13), ('notify', 16), ('medType', 17), ('regInfo', 18), ('connect', 19), ('simPin', 20), ('providerInfo', 21), ('minUserPriority', 22), ('queueLevel', 23), ('queueLowTh', 24), ('queueAlarmTh', 25), ('distancePeer', 26), ('commRangeRef', 27), ('timeOfLastRecep', 28), ('inactTimeLimit', 29), ('mediumUsage', 30), ('medUseObsTime', 31), ('peerMAC', 32), ('virtualCI', 33), ('minPrioCrossCI', 34), ('rxSens', 35), ('txPower', 36), ('txPowMax', 37), ('peerRXpower', 38), ('dataRate', 39), ('dataRateNW', 40), ('dataRatesNW', 41), ('dataRateNWreq', 42), ('directivity', 43), ('blockLength', 44), ('freeAirTime', 45), ('frameLengthMax', 46), ('kineVectIn', 47), ('kineVectOut', 48), ('cost', 49), ('reliability', 50), ('logicalChannel', 51)])
    I_ParamNo._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< SimPin >-----#
    SimPin = OCT_STR(name='SimPin', mode=MODE_TYPE)
    
    #-----< LogicalChannels >-----#
    LogicalChannels = SEQ_OF(name='LogicalChannels', mode=MODE_TYPE)
    _LogicalChannels__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtComm', 'LogicalChannelType')))
    LogicalChannels._cont = _LogicalChannels__item_
    LogicalChannels._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< Distance >-----#
    Distance = INT(name='Distance', mode=MODE_TYPE)
    Distance._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< MedID >-----#
    MedID = INT(name='MedID', mode=MODE_TYPE)
    MedID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< Properties >-----#
    Properties = SEQ_OF(name='Properties', mode=MODE_TYPE)
    _Properties__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'I-Param')))
    Properties._cont = _Properties__item_
    Properties._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< ProviderInfo >-----#
    ProviderInfo = SEQ(name='ProviderInfo', mode=MODE_TYPE)
    _ProviderInfo_provName = OCT_STR(name='provName', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ProviderInfo_provName._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _ProviderInfo_apn = OCT_STR(name='apn', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ProviderInfo_apn._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _ProviderInfo_username = OCT_STR(name='username', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ProviderInfo_username._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _ProviderInfo_password = OCT_STR(name='password', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ProviderInfo_password._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    ProviderInfo._cont = ASN1Dict([
        ('provName', _ProviderInfo_provName),
        ('apn', _ProviderInfo_apn),
        ('username', _ProviderInfo_username),
        ('password', _ProviderInfo_password),
        ])
    ProviderInfo._ext = None
    
    #-----< QueueLevel >-----#
    QueueLevel = SEQ(name='QueueLevel', mode=MODE_TYPE)
    _QueueLevel_priority = INT(name='priority', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _QueueLevel_level = INT(name='level', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'QueueValue')))
    QueueLevel._cont = ASN1Dict([
        ('priority', _QueueLevel_priority),
        ('level', _QueueLevel_level),
        ])
    QueueLevel._ext = None
    
    #-----< QueueValue >-----#
    QueueValue = INT(name='QueueValue', mode=MODE_TYPE)
    QueueValue._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< RegInfo >-----#
    RegInfo = SEQ(name='RegInfo', mode=MODE_TYPE)
    _RegInfo_status = INT(name='status', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'RegInfoStatus')))
    _RegInfo_limits = SEQ(name='limits', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'RegulatoryScheme')))
    RegInfo._cont = ASN1Dict([
        ('status', _RegInfo_status),
        ('limits', _RegInfo_limits),
        ])
    RegInfo._ext = None
    
    #-----< RegInfoStatus >-----#
    RegInfoStatus = INT(name='RegInfoStatus', mode=MODE_TYPE)
    RegInfoStatus._cont = ASN1Dict([('notApplicable', 0), ('invalid', 1), ('new', 254), ('valid', 255)])
    RegInfoStatus._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< REGULSCHEME >-----#
    REGULSCHEME = CLASS(name='REGULSCHEME', mode=MODE_TYPE)
    _REGULSCHEME_regID = INT(name='regID', mode=MODE_VALUE)
    _REGULSCHEME_regID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _REGULSCHEME_RegInfo = OPEN(name='RegInfo', mode=MODE_TYPE)
    REGULSCHEME._cont = ASN1Dict([
        ('regID', _REGULSCHEME_regID),
        ('RegInfo', _REGULSCHEME_RegInfo),
        ])
    
    #-----< RegulatoryScheme >-----#
    RegulatoryScheme = SEQ(name='RegulatoryScheme', mode=MODE_TYPE)
    _RegulatoryScheme_reguIdent = INT(name='reguIdent', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMllsap', 'REGULSCHEME'), ['regID']))
    __RegulatoryScheme_reguIdent_tab = CLASS(name='_tab_REGULSCHEME', mode=MODE_SET, typeref=ASN1RefType(('CALMllsap', 'REGULSCHEME')))
    ___RegulatoryScheme_reguIdent_tab_val_RegInfo_0 = NULL(name='RegInfo', mode=MODE_TYPE)
    __RegulatoryScheme_reguIdent_tab._val = ASN1Set(rv=[dict([('regID', 0), ('RegInfo', ___RegulatoryScheme_reguIdent_tab_val_RegInfo_0)])], rr=[], ev=None, er=[])
    _RegulatoryScheme_reguIdent._const_tab = __RegulatoryScheme_reguIdent_tab
    _RegulatoryScheme_reguIdent._const_tab_at = None
    _RegulatoryScheme_reguIdent._const_tab_id = 'regID'
    _RegulatoryScheme_reguInfo = OPEN(name='reguInfo', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMllsap', 'REGULSCHEME'), ['RegInfo']))
    _RegulatoryScheme_reguInfo._const_tab = __RegulatoryScheme_reguIdent_tab
    _RegulatoryScheme_reguInfo._const_tab_at = ('..', 'reguIdent')
    _RegulatoryScheme_reguInfo._const_tab_id = 'RegInfo'
    RegulatoryScheme._cont = ASN1Dict([
        ('reguIdent', _RegulatoryScheme_reguIdent),
        ('reguInfo', _RegulatoryScheme_reguInfo),
        ])
    RegulatoryScheme._ext = None
    
    #-----< RegulSchemes >-----#
    RegulSchemes = CLASS(name='RegulSchemes', mode=MODE_SET, typeref=ASN1RefType(('CALMllsap', 'REGULSCHEME')))
    _RegulSchemes_val_RegInfo_0 = NULL(name='RegInfo', mode=MODE_TYPE)
    RegulSchemes._val = ASN1Set(rv=[dict([('regID', 0), ('RegInfo', _RegulSchemes_val_RegInfo_0)])], rr=[], ev=[], er=[])
    
    #-----< nullRegScheme >-----#
    nullRegScheme = CLASS(name='nullRegScheme', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'REGULSCHEME')))
    _nullRegScheme_val_RegInfo = NULL(name='RegInfo', mode=MODE_TYPE)
    nullRegScheme._val = dict([('regID', 0), ('RegInfo', _nullRegScheme_val_RegInfo)])
    
    #-----< Tta >-----#
    Tta = INT(name='Tta', mode=MODE_TYPE)
    Tta._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< UserPriority >-----#
    UserPriority = INT(name='UserPriority', mode=MODE_TYPE)
    UserPriority._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< VirtualCIs >-----#
    VirtualCIs = SEQ_OF(name='VirtualCIs', mode=MODE_TYPE)
    _VirtualCIs__item_ = OCT_STR(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'RemoteCIID')))
    VirtualCIs._cont = _VirtualCIs__item_
    VirtualCIs._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< INSAP >-----#
    INSAP = CLASS(name='INSAP', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'COMMUPDOWN')))
    
    #-----< INsapspsdown >-----#
    INsapspsdown = CLASS(name='INsapspsdown', mode=MODE_SET, typeref=ASN1RefType(('CALMllsap', 'INSAP')))
    _INsapspsdown_val_Primitive_0 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-UNITDATA-request')))
    _INsapspsdown_val_Primitive_1 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-DATA-ACK-request')))
    _INsapspsdown_val_Primitive_2 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-REPLY-ACK-request')))
    _INsapspsdown_val_Primitive_3 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-REPLY-UPDATE-request')))
    INsapspsdown._val = ASN1Set(rv=[dict([('primitiveRef', 0), ('Primitive', _INsapspsdown_val_Primitive_0)]), dict([('primitiveRef', 1), ('Primitive', _INsapspsdown_val_Primitive_1)]), dict([('primitiveRef', 2), ('Primitive', _INsapspsdown_val_Primitive_2)]), dict([('primitiveRef', 3), ('Primitive', _INsapspsdown_val_Primitive_3)])], rr=[], ev=[], er=[])
    
    #-----< INsapPrimitivesDown >-----#
    INsapPrimitivesDown = SEQ(name='INsapPrimitivesDown', mode=MODE_TYPE)
    _INsapPrimitivesDown_spRef = INT(name='spRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMllsap', 'INSAP'), ['primitiveRef']))
    __INsapPrimitivesDown_spRef_tab = CLASS(name='_tab_INSAP', mode=MODE_SET, typeref=ASN1RefType(('CALMllsap', 'INSAP')))
    ___INsapPrimitivesDown_spRef_tab_val_Primitive_0 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-UNITDATA-request')))
    ___INsapPrimitivesDown_spRef_tab_val_Primitive_1 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-DATA-ACK-request')))
    ___INsapPrimitivesDown_spRef_tab_val_Primitive_2 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-REPLY-ACK-request')))
    ___INsapPrimitivesDown_spRef_tab_val_Primitive_3 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-REPLY-UPDATE-request')))
    __INsapPrimitivesDown_spRef_tab._val = ASN1Set(rv=[dict([('primitiveRef', 0), ('Primitive', ___INsapPrimitivesDown_spRef_tab_val_Primitive_0)]), dict([('primitiveRef', 1), ('Primitive', ___INsapPrimitivesDown_spRef_tab_val_Primitive_1)]), dict([('primitiveRef', 2), ('Primitive', ___INsapPrimitivesDown_spRef_tab_val_Primitive_2)]), dict([('primitiveRef', 3), ('Primitive', ___INsapPrimitivesDown_spRef_tab_val_Primitive_3)])], rr=[], ev=None, er=[])
    _INsapPrimitivesDown_spRef._const_tab = __INsapPrimitivesDown_spRef_tab
    _INsapPrimitivesDown_spRef._const_tab_at = None
    _INsapPrimitivesDown_spRef._const_tab_id = 'primitiveRef'
    _INsapPrimitivesDown_servPrimitive = OPEN(name='servPrimitive', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMllsap', 'INSAP'), ['Primitive']))
    _INsapPrimitivesDown_servPrimitive._const_tab = __INsapPrimitivesDown_spRef_tab
    _INsapPrimitivesDown_servPrimitive._const_tab_at = ('..', 'spRef')
    _INsapPrimitivesDown_servPrimitive._const_tab_id = 'Primitive'
    INsapPrimitivesDown._cont = ASN1Dict([
        ('spRef', _INsapPrimitivesDown_spRef),
        ('servPrimitive', _INsapPrimitivesDown_servPrimitive),
        ])
    INsapPrimitivesDown._ext = None
    
    #-----< inUnitdataRq >-----#
    inUnitdataRq = CLASS(name='inUnitdataRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'INSAP')))
    _inUnitdataRq_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-UNITDATA-request')))
    inUnitdataRq._val = dict([('primitiveRef', 0), ('Primitive', _inUnitdataRq_val_Primitive)])
    
    #-----< inDataAckRq >-----#
    inDataAckRq = CLASS(name='inDataAckRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'INSAP')))
    _inDataAckRq_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-DATA-ACK-request')))
    inDataAckRq._val = dict([('primitiveRef', 1), ('Primitive', _inDataAckRq_val_Primitive)])
    
    #-----< inReplyAckRq >-----#
    inReplyAckRq = CLASS(name='inReplyAckRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'INSAP')))
    _inReplyAckRq_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-REPLY-ACK-request')))
    inReplyAckRq._val = dict([('primitiveRef', 2), ('Primitive', _inReplyAckRq_val_Primitive)])
    
    #-----< inReplyUpdateRq >-----#
    inReplyUpdateRq = CLASS(name='inReplyUpdateRq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'INSAP')))
    _inReplyUpdateRq_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-REPLY-UPDATE-request')))
    inReplyUpdateRq._val = dict([('primitiveRef', 3), ('Primitive', _inReplyUpdateRq_val_Primitive)])
    
    #-----< IN-UNITDATA-request >-----#
    IN_UNITDATA_request = SEQ(name='IN-UNITDATA-request', mode=MODE_TYPE)
    _IN_UNITDATA_request_source_addr = SEQ(name='source-addr', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _IN_UNITDATA_request_dest_addr = SEQ(name='dest-addr', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _IN_UNITDATA_request_data = OCT_STR(name='data', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'INdata')))
    _IN_UNITDATA_request_priority = INT(name='priority', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _IN_UNITDATA_request_accessParams = SEQ(name='accessParams', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'AccessParameters')))
    IN_UNITDATA_request._cont = ASN1Dict([
        ('source-addr', _IN_UNITDATA_request_source_addr),
        ('dest-addr', _IN_UNITDATA_request_dest_addr),
        ('data', _IN_UNITDATA_request_data),
        ('priority', _IN_UNITDATA_request_priority),
        ('accessParams', _IN_UNITDATA_request_accessParams),
        ])
    IN_UNITDATA_request._ext = None
    
    #-----< IN-DATA-ACK-request >-----#
    IN_DATA_ACK_request = SEQ(name='IN-DATA-ACK-request', mode=MODE_TYPE)
    _IN_DATA_ACK_request_source_addr = SEQ(name='source-addr', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _IN_DATA_ACK_request_dest_addr = SEQ(name='dest-addr', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _IN_DATA_ACK_request_data = OCT_STR(name='data', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'INdata')))
    _IN_DATA_ACK_request_priority = INT(name='priority', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _IN_DATA_ACK_request_serviceClass = INT(name='serviceClass', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'MACServiceClass')))
    IN_DATA_ACK_request._cont = ASN1Dict([
        ('source-addr', _IN_DATA_ACK_request_source_addr),
        ('dest-addr', _IN_DATA_ACK_request_dest_addr),
        ('data', _IN_DATA_ACK_request_data),
        ('priority', _IN_DATA_ACK_request_priority),
        ('serviceClass', _IN_DATA_ACK_request_serviceClass),
        ])
    IN_DATA_ACK_request._ext = None
    
    #-----< IN-REPLY-ACK-request >-----#
    IN_REPLY_ACK_request = SEQ(name='IN-REPLY-ACK-request', mode=MODE_TYPE)
    _IN_REPLY_ACK_request_source_addr = SEQ(name='source-addr', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _IN_REPLY_ACK_request_dest_addr = SEQ(name='dest-addr', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _IN_REPLY_ACK_request_data = OCT_STR(name='data', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'INdata')))
    _IN_REPLY_ACK_request_priority = INT(name='priority', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _IN_REPLY_ACK_request_serviceClass = INT(name='serviceClass', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'MACServiceClass')))
    IN_REPLY_ACK_request._cont = ASN1Dict([
        ('source-addr', _IN_REPLY_ACK_request_source_addr),
        ('dest-addr', _IN_REPLY_ACK_request_dest_addr),
        ('data', _IN_REPLY_ACK_request_data),
        ('priority', _IN_REPLY_ACK_request_priority),
        ('serviceClass', _IN_REPLY_ACK_request_serviceClass),
        ])
    IN_REPLY_ACK_request._ext = None
    
    #-----< IN-REPLY-UPDATE-request >-----#
    IN_REPLY_UPDATE_request = SEQ(name='IN-REPLY-UPDATE-request', mode=MODE_TYPE)
    _IN_REPLY_UPDATE_request_source_addr = SEQ(name='source-addr', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _IN_REPLY_UPDATE_request_data = OCT_STR(name='data', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'INdata')))
    IN_REPLY_UPDATE_request._cont = ASN1Dict([
        ('source-addr', _IN_REPLY_UPDATE_request_source_addr),
        ('data', _IN_REPLY_UPDATE_request_data),
        ])
    IN_REPLY_UPDATE_request._ext = None
    
    #-----< INSAPUP >-----#
    INSAPUP = CLASS(name='INSAPUP', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'COMMUPDOWN')))
    
    #-----< INsapspsup >-----#
    INsapspsup = CLASS(name='INsapspsup', mode=MODE_SET, typeref=ASN1RefType(('CALMllsap', 'INSAP')))
    _INsapspsup_val_Primitive_0 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-UNITDATA-indication')))
    _INsapspsup_val_Primitive_1 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-UNITDATA-STATUS-indication')))
    _INsapspsup_val_Primitive_2 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-DATA-ACK-indication')))
    _INsapspsup_val_Primitive_3 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-DATA-ACK-STATUS-indication')))
    _INsapspsup_val_Primitive_4 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-REPLY-indication')))
    _INsapspsup_val_Primitive_5 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-REPLY-STATUS-indication')))
    _INsapspsup_val_Primitive_6 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-REPLY-UPDATE-STATUS-indication')))
    INsapspsup._val = ASN1Set(rv=[dict([('primitiveRef', 0), ('Primitive', _INsapspsup_val_Primitive_0)]), dict([('primitiveRef', 1), ('Primitive', _INsapspsup_val_Primitive_1)]), dict([('primitiveRef', 2), ('Primitive', _INsapspsup_val_Primitive_2)]), dict([('primitiveRef', 3), ('Primitive', _INsapspsup_val_Primitive_3)]), dict([('primitiveRef', 4), ('Primitive', _INsapspsup_val_Primitive_4)]), dict([('primitiveRef', 5), ('Primitive', _INsapspsup_val_Primitive_5)]), dict([('primitiveRef', 6), ('Primitive', _INsapspsup_val_Primitive_6)])], rr=[], ev=[], er=[])
    
    #-----< INsapPrimitivesUp >-----#
    INsapPrimitivesUp = SEQ(name='INsapPrimitivesUp', mode=MODE_TYPE)
    _INsapPrimitivesUp_spRef = INT(name='spRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMllsap', 'INSAP'), ['primitiveRef']))
    __INsapPrimitivesUp_spRef_tab = CLASS(name='_tab_INSAP', mode=MODE_SET, typeref=ASN1RefType(('CALMllsap', 'INSAP')))
    ___INsapPrimitivesUp_spRef_tab_val_Primitive_0 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-UNITDATA-indication')))
    ___INsapPrimitivesUp_spRef_tab_val_Primitive_1 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-UNITDATA-STATUS-indication')))
    ___INsapPrimitivesUp_spRef_tab_val_Primitive_2 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-DATA-ACK-indication')))
    ___INsapPrimitivesUp_spRef_tab_val_Primitive_3 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-DATA-ACK-STATUS-indication')))
    ___INsapPrimitivesUp_spRef_tab_val_Primitive_4 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-REPLY-indication')))
    ___INsapPrimitivesUp_spRef_tab_val_Primitive_5 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-REPLY-STATUS-indication')))
    ___INsapPrimitivesUp_spRef_tab_val_Primitive_6 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-REPLY-UPDATE-STATUS-indication')))
    __INsapPrimitivesUp_spRef_tab._val = ASN1Set(rv=[dict([('primitiveRef', 0), ('Primitive', ___INsapPrimitivesUp_spRef_tab_val_Primitive_0)]), dict([('primitiveRef', 1), ('Primitive', ___INsapPrimitivesUp_spRef_tab_val_Primitive_1)]), dict([('primitiveRef', 2), ('Primitive', ___INsapPrimitivesUp_spRef_tab_val_Primitive_2)]), dict([('primitiveRef', 3), ('Primitive', ___INsapPrimitivesUp_spRef_tab_val_Primitive_3)]), dict([('primitiveRef', 4), ('Primitive', ___INsapPrimitivesUp_spRef_tab_val_Primitive_4)]), dict([('primitiveRef', 5), ('Primitive', ___INsapPrimitivesUp_spRef_tab_val_Primitive_5)]), dict([('primitiveRef', 6), ('Primitive', ___INsapPrimitivesUp_spRef_tab_val_Primitive_6)])], rr=[], ev=None, er=[])
    _INsapPrimitivesUp_spRef._const_tab = __INsapPrimitivesUp_spRef_tab
    _INsapPrimitivesUp_spRef._const_tab_at = None
    _INsapPrimitivesUp_spRef._const_tab_id = 'primitiveRef'
    _INsapPrimitivesUp_servPrimitive = OPEN(name='servPrimitive', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMllsap', 'INSAP'), ['Primitive']))
    _INsapPrimitivesUp_servPrimitive._const_tab = __INsapPrimitivesUp_spRef_tab
    _INsapPrimitivesUp_servPrimitive._const_tab_at = ('..', 'spRef')
    _INsapPrimitivesUp_servPrimitive._const_tab_id = 'Primitive'
    INsapPrimitivesUp._cont = ASN1Dict([
        ('spRef', _INsapPrimitivesUp_spRef),
        ('servPrimitive', _INsapPrimitivesUp_servPrimitive),
        ])
    INsapPrimitivesUp._ext = None
    
    #-----< inUnitdataInd >-----#
    inUnitdataInd = CLASS(name='inUnitdataInd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'INSAP')))
    _inUnitdataInd_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-UNITDATA-indication')))
    inUnitdataInd._val = dict([('primitiveRef', 0), ('Primitive', _inUnitdataInd_val_Primitive)])
    
    #-----< inUnitdataStatusInd >-----#
    inUnitdataStatusInd = CLASS(name='inUnitdataStatusInd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'INSAP')))
    _inUnitdataStatusInd_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-UNITDATA-STATUS-indication')))
    inUnitdataStatusInd._val = dict([('primitiveRef', 1), ('Primitive', _inUnitdataStatusInd_val_Primitive)])
    
    #-----< inDataAckInd >-----#
    inDataAckInd = CLASS(name='inDataAckInd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'INSAP')))
    _inDataAckInd_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-DATA-ACK-indication')))
    inDataAckInd._val = dict([('primitiveRef', 2), ('Primitive', _inDataAckInd_val_Primitive)])
    
    #-----< inDataAckStatusInd >-----#
    inDataAckStatusInd = CLASS(name='inDataAckStatusInd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'INSAP')))
    _inDataAckStatusInd_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-DATA-ACK-STATUS-indication')))
    inDataAckStatusInd._val = dict([('primitiveRef', 3), ('Primitive', _inDataAckStatusInd_val_Primitive)])
    
    #-----< inReplyInd >-----#
    inReplyInd = CLASS(name='inReplyInd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'INSAP')))
    _inReplyInd_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-REPLY-indication')))
    inReplyInd._val = dict([('primitiveRef', 4), ('Primitive', _inReplyInd_val_Primitive)])
    
    #-----< inReplyStatusInd >-----#
    inReplyStatusInd = CLASS(name='inReplyStatusInd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'INSAP')))
    _inReplyStatusInd_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-REPLY-STATUS-indication')))
    inReplyStatusInd._val = dict([('primitiveRef', 5), ('Primitive', _inReplyStatusInd_val_Primitive)])
    
    #-----< inReplyUpdateStatusInd >-----#
    inReplyUpdateStatusInd = CLASS(name='inReplyUpdateStatusInd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'INSAP')))
    _inReplyUpdateStatusInd_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'IN-REPLY-UPDATE-STATUS-indication')))
    inReplyUpdateStatusInd._val = dict([('primitiveRef', 6), ('Primitive', _inReplyUpdateStatusInd_val_Primitive)])
    
    #-----< IN-UNITDATA-indication >-----#
    IN_UNITDATA_indication = SEQ(name='IN-UNITDATA-indication', mode=MODE_TYPE)
    _IN_UNITDATA_indication_source_addr = SEQ(name='source-addr', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _IN_UNITDATA_indication_dest_addr = SEQ(name='dest-addr', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _IN_UNITDATA_indication_data = OCT_STR(name='data', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'INdata')))
    _IN_UNITDATA_indication_priority = INT(name='priority', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _IN_UNITDATA_indication_accessParams = SEQ(name='accessParams', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'AccessParameters')))
    IN_UNITDATA_indication._cont = ASN1Dict([
        ('source-addr', _IN_UNITDATA_indication_source_addr),
        ('dest-addr', _IN_UNITDATA_indication_dest_addr),
        ('data', _IN_UNITDATA_indication_data),
        ('priority', _IN_UNITDATA_indication_priority),
        ('accessParams', _IN_UNITDATA_indication_accessParams),
        ])
    IN_UNITDATA_indication._ext = None
    
    #-----< IN-UNITDATA-STATUS-indication >-----#
    IN_UNITDATA_STATUS_indication = SEQ(name='IN-UNITDATA-STATUS-indication', mode=MODE_TYPE)
    _IN_UNITDATA_STATUS_indication_source_addr = SEQ(name='source-addr', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _IN_UNITDATA_STATUS_indication_dest_addr = SEQ(name='dest-addr', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _IN_UNITDATA_STATUS_indication_data = OCT_STR(name='data', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'INdata')))
    _IN_UNITDATA_STATUS_indication_priority = INT(name='priority', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _IN_UNITDATA_STATUS_indication_accessParams = SEQ(name='accessParams', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'AccessParameters')))
    _IN_UNITDATA_STATUS_indication_txStatus = INT(name='txStatus', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'INtxStatus')))
    IN_UNITDATA_STATUS_indication._cont = ASN1Dict([
        ('source-addr', _IN_UNITDATA_STATUS_indication_source_addr),
        ('dest-addr', _IN_UNITDATA_STATUS_indication_dest_addr),
        ('data', _IN_UNITDATA_STATUS_indication_data),
        ('priority', _IN_UNITDATA_STATUS_indication_priority),
        ('accessParams', _IN_UNITDATA_STATUS_indication_accessParams),
        ('txStatus', _IN_UNITDATA_STATUS_indication_txStatus),
        ])
    IN_UNITDATA_STATUS_indication._ext = None
    
    #-----< IN-DATA-ACK-indication >-----#
    IN_DATA_ACK_indication = SEQ(name='IN-DATA-ACK-indication', mode=MODE_TYPE)
    _IN_DATA_ACK_indication_source_addr = SEQ(name='source-addr', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _IN_DATA_ACK_indication_dest_addr = SEQ(name='dest-addr', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _IN_DATA_ACK_indication_data = OCT_STR(name='data', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'INdata')))
    _IN_DATA_ACK_indication_priority = INT(name='priority', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _IN_DATA_ACK_indication_serviceClass = INT(name='serviceClass', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'MACServiceClass')))
    IN_DATA_ACK_indication._cont = ASN1Dict([
        ('source-addr', _IN_DATA_ACK_indication_source_addr),
        ('dest-addr', _IN_DATA_ACK_indication_dest_addr),
        ('data', _IN_DATA_ACK_indication_data),
        ('priority', _IN_DATA_ACK_indication_priority),
        ('serviceClass', _IN_DATA_ACK_indication_serviceClass),
        ])
    IN_DATA_ACK_indication._ext = None
    
    #-----< IN-DATA-ACK-STATUS-indication >-----#
    IN_DATA_ACK_STATUS_indication = SEQ(name='IN-DATA-ACK-STATUS-indication', mode=MODE_TYPE)
    _IN_DATA_ACK_STATUS_indication_source_addr = SEQ(name='source-addr', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _IN_DATA_ACK_STATUS_indication_dest_addr = SEQ(name='dest-addr', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _IN_DATA_ACK_STATUS_indication_data = OCT_STR(name='data', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'INdata')))
    _IN_DATA_ACK_STATUS_indication_priority = INT(name='priority', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _IN_DATA_ACK_STATUS_indication_serviceClass = INT(name='serviceClass', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'MACServiceClass')))
    _IN_DATA_ACK_STATUS_indication_status = INT(name='status', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'INtxStatus')))
    IN_DATA_ACK_STATUS_indication._cont = ASN1Dict([
        ('source-addr', _IN_DATA_ACK_STATUS_indication_source_addr),
        ('dest-addr', _IN_DATA_ACK_STATUS_indication_dest_addr),
        ('data', _IN_DATA_ACK_STATUS_indication_data),
        ('priority', _IN_DATA_ACK_STATUS_indication_priority),
        ('serviceClass', _IN_DATA_ACK_STATUS_indication_serviceClass),
        ('status', _IN_DATA_ACK_STATUS_indication_status),
        ])
    IN_DATA_ACK_STATUS_indication._ext = None
    
    #-----< IN-REPLY-indication >-----#
    IN_REPLY_indication = SEQ(name='IN-REPLY-indication', mode=MODE_TYPE)
    _IN_REPLY_indication_source_addr = SEQ(name='source-addr', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _IN_REPLY_indication_dest_addr = SEQ(name='dest-addr', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _IN_REPLY_indication_data = OCT_STR(name='data', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'INdata')))
    _IN_REPLY_indication_priority = INT(name='priority', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _IN_REPLY_indication_serviceClass = INT(name='serviceClass', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'MACServiceClass')))
    IN_REPLY_indication._cont = ASN1Dict([
        ('source-addr', _IN_REPLY_indication_source_addr),
        ('dest-addr', _IN_REPLY_indication_dest_addr),
        ('data', _IN_REPLY_indication_data),
        ('priority', _IN_REPLY_indication_priority),
        ('serviceClass', _IN_REPLY_indication_serviceClass),
        ])
    IN_REPLY_indication._ext = None
    
    #-----< IN-REPLY-STATUS-indication >-----#
    IN_REPLY_STATUS_indication = SEQ(name='IN-REPLY-STATUS-indication', mode=MODE_TYPE)
    _IN_REPLY_STATUS_indication_source_addr = SEQ(name='source-addr', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _IN_REPLY_STATUS_indication_status = INT(name='status', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'INtxStatus')))
    IN_REPLY_STATUS_indication._cont = ASN1Dict([
        ('source-addr', _IN_REPLY_STATUS_indication_source_addr),
        ('status', _IN_REPLY_STATUS_indication_status),
        ])
    IN_REPLY_STATUS_indication._ext = None
    
    #-----< IN-REPLY-UPDATE-STATUS-indication >-----#
    IN_REPLY_UPDATE_STATUS_indication = SEQ(name='IN-REPLY-UPDATE-STATUS-indication', mode=MODE_TYPE)
    _IN_REPLY_UPDATE_STATUS_indication_source_addr = SEQ(name='source-addr', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'LLserviceAddr')))
    _IN_REPLY_UPDATE_STATUS_indication_data = OCT_STR(name='data', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'INdata')))
    _IN_REPLY_UPDATE_STATUS_indication_priority = INT(name='priority', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _IN_REPLY_UPDATE_STATUS_indication_accessParams = SEQ(name='accessParams', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'AccessParameters')))
    _IN_REPLY_UPDATE_STATUS_indication_txStatus = INT(name='txStatus', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'INtxStatus')))
    IN_REPLY_UPDATE_STATUS_indication._cont = ASN1Dict([
        ('source-addr', _IN_REPLY_UPDATE_STATUS_indication_source_addr),
        ('data', _IN_REPLY_UPDATE_STATUS_indication_data),
        ('priority', _IN_REPLY_UPDATE_STATUS_indication_priority),
        ('accessParams', _IN_REPLY_UPDATE_STATUS_indication_accessParams),
        ('txStatus', _IN_REPLY_UPDATE_STATUS_indication_txStatus),
        ])
    IN_REPLY_UPDATE_STATUS_indication._ext = None
    
    #-----< INdata >-----#
    INdata = OCT_STR(name='INdata', mode=MODE_TYPE)
    INdata._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< ACCPARAM >-----#
    ACCPARAM = CLASS(name='ACCPARAM', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'PARAMS')))
    
    #-----< nullAP >-----#
    nullAP = CLASS(name='nullAP', mode=MODE_VALUE, typeref=ASN1RefType(('CALMllsap', 'ACCPARAM')))
    _nullAP_val_Parameter = NULL(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    nullAP._val = dict([('paramRef', 0), ('Parameter', _nullAP_val_Parameter)])
    
    #-----< AccessParameters >-----#
    AccessParameters = SEQ(name='AccessParameters', mode=MODE_TYPE)
    _AccessParameters_apRef = INT(name='apRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMllsap', 'ACCPARAM'), ['paramRef']))
    __AccessParameters_apRef_tab = CLASS(name='_tab_ACCPARAM', mode=MODE_SET, typeref=ASN1RefType(('CALMllsap', 'ACCPARAM')))
    ___AccessParameters_apRef_tab_val_Parameter_0 = NULL(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    __AccessParameters_apRef_tab._val = ASN1Set(rv=[dict([('paramRef', 0), ('Parameter', ___AccessParameters_apRef_tab_val_Parameter_0)])], rr=[], ev=None, er=[])
    _AccessParameters_apRef._const_tab = __AccessParameters_apRef_tab
    _AccessParameters_apRef._const_tab_at = None
    _AccessParameters_apRef._const_tab_id = 'paramRef'
    _AccessParameters_aParameter = OPEN(name='aParameter', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMllsap', 'ACCPARAM'), ['Parameter']))
    _AccessParameters_aParameter._const_tab = __AccessParameters_apRef_tab
    _AccessParameters_aParameter._const_tab_at = ('..', 'apRef')
    _AccessParameters_aParameter._const_tab_id = 'Parameter'
    AccessParameters._cont = ASN1Dict([
        ('apRef', _AccessParameters_apRef),
        ('aParameter', _AccessParameters_aParameter),
        ])
    AccessParameters._ext = None
    
    #-----< AccParams >-----#
    AccParams = CLASS(name='AccParams', mode=MODE_SET, typeref=ASN1RefType(('CALMllsap', 'ACCPARAM')))
    _AccParams_val_Parameter_0 = NULL(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    AccParams._val = ASN1Set(rv=[dict([('paramRef', 0), ('Parameter', _AccParams_val_Parameter_0)])], rr=[], ev=[], er=[])
    
    #-----< NullType >-----#
    NullType = NULL(name='NullType', mode=MODE_TYPE)
    
    #-----< MACServiceClass >-----#
    MACServiceClass = INT(name='MACServiceClass', mode=MODE_TYPE)
    MACServiceClass._cont = ASN1Dict([('macAckNotUsed', 0), ('macAckUsed', 255)])
    MACServiceClass._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< INtxStatus >-----#
    INtxStatus = INT(name='INtxStatus', mode=MODE_TYPE)
    INtxStatus._cont = ASN1Dict([('success', 0), ('queueFull', 1), ('timeout', 2), ('priority', 3), ('unspecFailure', 255)])
    INtxStatus._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< VCIserialNumber >-----#
    VCIserialNumber = INT(name='VCIserialNumber', mode=MODE_TYPE)
    VCIserialNumber._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< EUI64 >-----#
    EUI64 = OCT_STR(name='EUI64', mode=MODE_TYPE)
    EUI64._const_sz = ASN1Set(rv=[8], rr=[], ev=None, er=[])
    
    #-----< LegacyCIID >-----#
    LegacyCIID = SEQ(name='LegacyCIID', mode=MODE_TYPE)
    _LegacyCIID_selector1 = INT(name='selector1', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'OneOCTETones')))
    _LegacyCIID_iTS_scuId = INT(name='iTS-scuId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ITS-scuId')))
    _LegacyCIID_selector2 = INT(name='selector2', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'TwoOCTETones')))
    _LegacyCIID_medID = INT(name='medID', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'MedID')))
    _LegacyCIID_vciSerialNumber = INT(name='vciSerialNumber', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'VCIserialNumber')))
    LegacyCIID._cont = ASN1Dict([
        ('selector1', _LegacyCIID_selector1),
        ('iTS-scuId', _LegacyCIID_iTS_scuId),
        ('selector2', _LegacyCIID_selector2),
        ('medID', _LegacyCIID_medID),
        ('vciSerialNumber', _LegacyCIID_vciSerialNumber),
        ])
    LegacyCIID._ext = None
    
    #-----< RemoteCIID >-----#
    RemoteCIID = OCT_STR(name='RemoteCIID', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'EUI64')))
    
    #-----< OneOCTETones >-----#
    OneOCTETones = INT(name='OneOCTETones', mode=MODE_TYPE)
    OneOCTETones._cont = ASN1Dict([('all', 255)])
    OneOCTETones._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< TwoOCTETones >-----#
    TwoOCTETones = INT(name='TwoOCTETones', mode=MODE_TYPE)
    TwoOCTETones._cont = ASN1Dict([('all', 65535)])
    TwoOCTETones._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< EUI64MAC48 >-----#
    EUI64MAC48 = SEQ(name='EUI64MAC48', mode=MODE_TYPE)
    _EUI64MAC48_oui = SEQ(name='oui', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'MACoui')))
    _EUI64MAC48_selector2 = INT(name='selector2', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'TwoOCTETones')))
    _EUI64MAC48_ext = OCT_STR(name='ext', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'MACext')))
    EUI64MAC48._cont = ASN1Dict([
        ('oui', _EUI64MAC48_oui),
        ('selector2', _EUI64MAC48_selector2),
        ('ext', _EUI64MAC48_ext),
        ])
    EUI64MAC48._ext = None
    
    #-----< MACoui >-----#
    MACoui = SEQ(name='MACoui', mode=MODE_TYPE)
    _MACoui_uoi1 = INT(name='uoi1', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _MACoui_uoi1._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=63)], ev=None, er=[])
    _MACoui_ulBit = BOOL(name='ulBit', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _MACoui_igBIT = BOOL(name='igBIT', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _MACoui_uoi2 = OCT_STR(name='uoi2', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _MACoui_uoi2._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    MACoui._cont = ASN1Dict([
        ('uoi1', _MACoui_uoi1),
        ('ulBit', _MACoui_ulBit),
        ('igBIT', _MACoui_igBIT),
        ('uoi2', _MACoui_uoi2),
        ])
    MACoui._ext = None
    
    #-----< MACext >-----#
    MACext = OCT_STR(name='MACext', mode=MODE_TYPE)
    MACext._const_sz = ASN1Set(rv=[3], rr=[], ev=None, er=[])
    
    #-----< MACmcID >-----#
    MACmcID = SEQ(name='MACmcID', mode=MODE_TYPE)
    _MACmcID_ucgc = INT(name='ucgc', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _MACmcID_ucgc._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=63)], ev=None, er=[])
    _MACmcID_mc = INT(name='mc', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _MACmcID_mc._cont = ASN1Dict([('all', 3)])
    _MACmcID_mc._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=3)], ev=None, er=[])
    _MACmcID_serial = OCT_STR(name='serial', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _MACmcID_serial._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    MACmcID._cont = ASN1Dict([
        ('ucgc', _MACmcID_ucgc),
        ('mc', _MACmcID_mc),
        ('serial', _MACmcID_serial),
        ])
    MACmcID._ext = None
    
    #-----< version >-----#
    version = INT(name='version', mode=MODE_VALUE)
    version._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    version._val = 2
    
    _all_ = [
        Alt,
        CIaClass,
        CIclass,
        _Link_ID_remoteCIID,
        _Link_ID_localCIID,
        Link_ID,
        CIstatus,
        _CommProfile__item_,
        CommProfile,
        Connect,
        IN_SAPaddress,
        DataRate,
        _DataRatesNW_minimum,
        _DataRatesNW_maximum,
        DataRatesNW,
        _Directivity_mode,
        _Directivity_dirPredef,
        _Directivity_fill,
        __Directivity_dirVar__item_,
        _Directivity_dirVar,
        Directivity,
        DirMode,
        _DirVar_bsAzimuth,
        _DirVar_bsElevation,
        _DirVar_openHorizontal,
        _DirVar_openVertical,
        DirVar,
        TxPowMax,
        _Errors__item_,
        Errors,
        _SingleError_paramNo,
        _SingleError_errStatus,
        SingleError,
        Gs,
        _KineVectIn_dut,
        _KineVectIn_lat,
        _KineVectIn_lon,
        _KineVectIn_alt,
        _KineVectIn_gs,
        _KineVectIn_tta,
        KineVectIn,
        _KineVectOut_dut,
        _KineVectOut_fill,
        __KineVectOut_options__item_,
        _KineVectOut_options,
        KineVectOut,
        _KineVectOptions_lat,
        _KineVectOptions_lon,
        _KineVectOptions_alt,
        _KineVectOptions_gs,
        _KineVectOptions_tta,
        KineVectOptions,
        Lat,
        Lon,
        _LLserviceAddr_csap,
        _LLserviceAddr_linkID,
        LLserviceAddr,
        MACaddress,
        _MediumUsage_receive,
        _MediumUsage_transmit,
        MediumUsage,
        MedType,
        _MedUseObsTime_value,
        _MedUseObsTime_unit,
        MedUseObsTime,
        TimeUnit,
        _Notify__item_,
        Notify,
        PeerRXpower,
        _PARAMS_paramRef,
        _PARAMS_Parameter,
        PARAMS,
        IPARAM,
        I_Params,
        _I_Params_val_Parameter_0,
        _I_Params_val_Parameter_1,
        _I_Params_val_Parameter_2,
        _I_Params_val_Parameter_3,
        _I_Params_val_Parameter_4,
        _I_Params_val_Parameter_5,
        _I_Params_val_Parameter_6,
        _I_Params_val_Parameter_7,
        _I_Params_val_Parameter_8,
        _I_Params_val_Parameter_9,
        _I_Params_val_Parameter_10,
        _I_Params_val_Parameter_11,
        _I_Params_val_Parameter_12,
        _I_Params_val_Parameter_13,
        _I_Params_val_Parameter_14,
        _I_Params_val_Parameter_15,
        _I_Params_val_Parameter_16,
        _I_Params_val_Parameter_17,
        _I_Params_val_Parameter_18,
        _I_Params_val_Parameter_19,
        _I_Params_val_Parameter_20,
        _I_Params_val_Parameter_21,
        _I_Params_val_Parameter_22,
        _I_Params_val_Parameter_23,
        _I_Params_val_Parameter_24,
        _I_Params_val_Parameter_25,
        _I_Params_val_Parameter_26,
        _I_Params_val_Parameter_27,
        _I_Params_val_Parameter_28,
        _I_Params_val_Parameter_29,
        _I_Params_val_Parameter_30,
        _I_Params_val_Parameter_31,
        _I_Params_val_Parameter_32,
        _I_Params_val_Parameter_33,
        _I_Params_val_Parameter_34,
        _I_Params_val_Parameter_35,
        _I_Params_val_Parameter_36,
        _I_Params_val_Parameter_37,
        _I_Params_val_Parameter_38,
        _I_Params_val_Parameter_39,
        _I_Params_val_Parameter_40,
        _I_Params_val_Parameter_41,
        _I_Params_val_Parameter_42,
        _I_Params_val_Parameter_43,
        _I_Params_val_Parameter_44,
        _I_Params_val_Parameter_45,
        _I_Params_val_Parameter_46,
        _I_Params_val_Parameter_47,
        _I_Params_val_Parameter_48,
        __I_Param_paramNo_tab,
        ___I_Param_paramNo_tab_val_Parameter_0,
        ___I_Param_paramNo_tab_val_Parameter_1,
        ___I_Param_paramNo_tab_val_Parameter_2,
        ___I_Param_paramNo_tab_val_Parameter_3,
        ___I_Param_paramNo_tab_val_Parameter_4,
        ___I_Param_paramNo_tab_val_Parameter_5,
        ___I_Param_paramNo_tab_val_Parameter_6,
        ___I_Param_paramNo_tab_val_Parameter_7,
        ___I_Param_paramNo_tab_val_Parameter_8,
        ___I_Param_paramNo_tab_val_Parameter_9,
        ___I_Param_paramNo_tab_val_Parameter_10,
        ___I_Param_paramNo_tab_val_Parameter_11,
        ___I_Param_paramNo_tab_val_Parameter_12,
        ___I_Param_paramNo_tab_val_Parameter_13,
        ___I_Param_paramNo_tab_val_Parameter_14,
        ___I_Param_paramNo_tab_val_Parameter_15,
        ___I_Param_paramNo_tab_val_Parameter_16,
        ___I_Param_paramNo_tab_val_Parameter_17,
        ___I_Param_paramNo_tab_val_Parameter_18,
        ___I_Param_paramNo_tab_val_Parameter_19,
        ___I_Param_paramNo_tab_val_Parameter_20,
        ___I_Param_paramNo_tab_val_Parameter_21,
        ___I_Param_paramNo_tab_val_Parameter_22,
        ___I_Param_paramNo_tab_val_Parameter_23,
        ___I_Param_paramNo_tab_val_Parameter_24,
        ___I_Param_paramNo_tab_val_Parameter_25,
        ___I_Param_paramNo_tab_val_Parameter_26,
        ___I_Param_paramNo_tab_val_Parameter_27,
        ___I_Param_paramNo_tab_val_Parameter_28,
        ___I_Param_paramNo_tab_val_Parameter_29,
        ___I_Param_paramNo_tab_val_Parameter_30,
        ___I_Param_paramNo_tab_val_Parameter_31,
        ___I_Param_paramNo_tab_val_Parameter_32,
        ___I_Param_paramNo_tab_val_Parameter_33,
        ___I_Param_paramNo_tab_val_Parameter_34,
        ___I_Param_paramNo_tab_val_Parameter_35,
        ___I_Param_paramNo_tab_val_Parameter_36,
        ___I_Param_paramNo_tab_val_Parameter_37,
        ___I_Param_paramNo_tab_val_Parameter_38,
        ___I_Param_paramNo_tab_val_Parameter_39,
        ___I_Param_paramNo_tab_val_Parameter_40,
        ___I_Param_paramNo_tab_val_Parameter_41,
        ___I_Param_paramNo_tab_val_Parameter_42,
        ___I_Param_paramNo_tab_val_Parameter_43,
        ___I_Param_paramNo_tab_val_Parameter_44,
        ___I_Param_paramNo_tab_val_Parameter_45,
        ___I_Param_paramNo_tab_val_Parameter_46,
        ___I_Param_paramNo_tab_val_Parameter_47,
        ___I_Param_paramNo_tab_val_Parameter_48,
        _I_Param_paramNo,
        _I_Param_parameter,
        I_Param,
        errors,
        _errors_val_Parameter,
        commProfile,
        _commProfile_val_Parameter,
        properties,
        _properties_val_Parameter,
        manuDeviceID,
        _manuDeviceID_val_Parameter,
        iTS_scuId,
        _iTS_scuId_val_Parameter,
        medID,
        _medID_val_Parameter,
        localCIID,
        _localCIID_val_Parameter,
        timeoutReg,
        _timeoutReg_val_Parameter,
        macAddress,
        _macAddress_val_Parameter,
        macAddrTemp,
        _macAddrTemp_val_Parameter,
        ciClass,
        _ciClass_val_Parameter,
        ciaClass,
        _ciaClass_val_Parameter,
        ciStatus,
        _ciStatus_val_Parameter,
        notify,
        _notify_val_Parameter,
        medType,
        _medType_val_Parameter,
        regInfo,
        _regInfo_val_Parameter,
        connect,
        _connect_val_Parameter,
        simPin,
        _simPin_val_Parameter,
        providerInfo,
        _providerInfo_val_Parameter,
        minUserPriority,
        _minUserPriority_val_Parameter,
        queueLevel,
        _queueLevel_val_Parameter,
        queueLowTh,
        _queueLowTh_val_Parameter,
        queueAlarmTh,
        _queueAlarmTh_val_Parameter,
        distancePeer,
        _distancePeer_val_Parameter,
        commRangeRef,
        _commRangeRef_val_Parameter,
        timeOfLastRecep,
        _timeOfLastRecep_val_Parameter,
        inactTimeLimit,
        _inactTimeLimit_val_Parameter,
        mediumUsage,
        _mediumUsage_val_Parameter,
        medUseObsTime,
        _medUseObsTime_val_Parameter,
        peerMAC,
        _peerMAC_val_Parameter,
        virtualCIs,
        _virtualCIs_val_Parameter,
        minPrioCrossCI,
        _minPrioCrossCI_val_Parameter,
        rxSens,
        _rxSens_val_Parameter,
        txPower,
        _txPower_val_Parameter,
        txPowMax,
        _txPowMax_val_Parameter,
        peerRXpower,
        _peerRXpower_val_Parameter,
        dataRate,
        _dataRate_val_Parameter,
        dataRateNW,
        _dataRateNW_val_Parameter,
        dataRatesNW,
        _dataRatesNW_val_Parameter,
        dataRateNWreq,
        _dataRateNWreq_val_Parameter,
        directivity,
        _directivity_val_Parameter,
        blockLength,
        _blockLength_val_Parameter,
        freeAirTime,
        _freeAirTime_val_Parameter,
        frameLengthMax,
        _frameLengthMax_val_Parameter,
        kineVectIn,
        _kineVectIn_val_Parameter,
        kineVectOut,
        _kineVectOut_val_Parameter,
        cost,
        _cost_val_Parameter,
        reliability,
        _reliability_val_Parameter,
        logicalChannel,
        _logicalChannel_val_Parameter,
        Time48IAT,
        I_ParamNo,
        SimPin,
        _LogicalChannels__item_,
        LogicalChannels,
        Distance,
        MedID,
        _Properties__item_,
        Properties,
        _ProviderInfo_provName,
        _ProviderInfo_apn,
        _ProviderInfo_username,
        _ProviderInfo_password,
        ProviderInfo,
        _QueueLevel_priority,
        _QueueLevel_level,
        QueueLevel,
        QueueValue,
        _RegInfo_status,
        _RegInfo_limits,
        RegInfo,
        RegInfoStatus,
        _REGULSCHEME_regID,
        _REGULSCHEME_RegInfo,
        REGULSCHEME,
        __RegulatoryScheme_reguIdent_tab,
        ___RegulatoryScheme_reguIdent_tab_val_RegInfo_0,
        _RegulatoryScheme_reguIdent,
        _RegulatoryScheme_reguInfo,
        RegulatoryScheme,
        RegulSchemes,
        _RegulSchemes_val_RegInfo_0,
        nullRegScheme,
        _nullRegScheme_val_RegInfo,
        Tta,
        UserPriority,
        _VirtualCIs__item_,
        VirtualCIs,
        INSAP,
        INsapspsdown,
        _INsapspsdown_val_Primitive_0,
        _INsapspsdown_val_Primitive_1,
        _INsapspsdown_val_Primitive_2,
        _INsapspsdown_val_Primitive_3,
        __INsapPrimitivesDown_spRef_tab,
        ___INsapPrimitivesDown_spRef_tab_val_Primitive_0,
        ___INsapPrimitivesDown_spRef_tab_val_Primitive_1,
        ___INsapPrimitivesDown_spRef_tab_val_Primitive_2,
        ___INsapPrimitivesDown_spRef_tab_val_Primitive_3,
        _INsapPrimitivesDown_spRef,
        _INsapPrimitivesDown_servPrimitive,
        INsapPrimitivesDown,
        inUnitdataRq,
        _inUnitdataRq_val_Primitive,
        inDataAckRq,
        _inDataAckRq_val_Primitive,
        inReplyAckRq,
        _inReplyAckRq_val_Primitive,
        inReplyUpdateRq,
        _inReplyUpdateRq_val_Primitive,
        _IN_UNITDATA_request_source_addr,
        _IN_UNITDATA_request_dest_addr,
        _IN_UNITDATA_request_data,
        _IN_UNITDATA_request_priority,
        _IN_UNITDATA_request_accessParams,
        IN_UNITDATA_request,
        _IN_DATA_ACK_request_source_addr,
        _IN_DATA_ACK_request_dest_addr,
        _IN_DATA_ACK_request_data,
        _IN_DATA_ACK_request_priority,
        _IN_DATA_ACK_request_serviceClass,
        IN_DATA_ACK_request,
        _IN_REPLY_ACK_request_source_addr,
        _IN_REPLY_ACK_request_dest_addr,
        _IN_REPLY_ACK_request_data,
        _IN_REPLY_ACK_request_priority,
        _IN_REPLY_ACK_request_serviceClass,
        IN_REPLY_ACK_request,
        _IN_REPLY_UPDATE_request_source_addr,
        _IN_REPLY_UPDATE_request_data,
        IN_REPLY_UPDATE_request,
        INSAPUP,
        INsapspsup,
        _INsapspsup_val_Primitive_0,
        _INsapspsup_val_Primitive_1,
        _INsapspsup_val_Primitive_2,
        _INsapspsup_val_Primitive_3,
        _INsapspsup_val_Primitive_4,
        _INsapspsup_val_Primitive_5,
        _INsapspsup_val_Primitive_6,
        __INsapPrimitivesUp_spRef_tab,
        ___INsapPrimitivesUp_spRef_tab_val_Primitive_0,
        ___INsapPrimitivesUp_spRef_tab_val_Primitive_1,
        ___INsapPrimitivesUp_spRef_tab_val_Primitive_2,
        ___INsapPrimitivesUp_spRef_tab_val_Primitive_3,
        ___INsapPrimitivesUp_spRef_tab_val_Primitive_4,
        ___INsapPrimitivesUp_spRef_tab_val_Primitive_5,
        ___INsapPrimitivesUp_spRef_tab_val_Primitive_6,
        _INsapPrimitivesUp_spRef,
        _INsapPrimitivesUp_servPrimitive,
        INsapPrimitivesUp,
        inUnitdataInd,
        _inUnitdataInd_val_Primitive,
        inUnitdataStatusInd,
        _inUnitdataStatusInd_val_Primitive,
        inDataAckInd,
        _inDataAckInd_val_Primitive,
        inDataAckStatusInd,
        _inDataAckStatusInd_val_Primitive,
        inReplyInd,
        _inReplyInd_val_Primitive,
        inReplyStatusInd,
        _inReplyStatusInd_val_Primitive,
        inReplyUpdateStatusInd,
        _inReplyUpdateStatusInd_val_Primitive,
        _IN_UNITDATA_indication_source_addr,
        _IN_UNITDATA_indication_dest_addr,
        _IN_UNITDATA_indication_data,
        _IN_UNITDATA_indication_priority,
        _IN_UNITDATA_indication_accessParams,
        IN_UNITDATA_indication,
        _IN_UNITDATA_STATUS_indication_source_addr,
        _IN_UNITDATA_STATUS_indication_dest_addr,
        _IN_UNITDATA_STATUS_indication_data,
        _IN_UNITDATA_STATUS_indication_priority,
        _IN_UNITDATA_STATUS_indication_accessParams,
        _IN_UNITDATA_STATUS_indication_txStatus,
        IN_UNITDATA_STATUS_indication,
        _IN_DATA_ACK_indication_source_addr,
        _IN_DATA_ACK_indication_dest_addr,
        _IN_DATA_ACK_indication_data,
        _IN_DATA_ACK_indication_priority,
        _IN_DATA_ACK_indication_serviceClass,
        IN_DATA_ACK_indication,
        _IN_DATA_ACK_STATUS_indication_source_addr,
        _IN_DATA_ACK_STATUS_indication_dest_addr,
        _IN_DATA_ACK_STATUS_indication_data,
        _IN_DATA_ACK_STATUS_indication_priority,
        _IN_DATA_ACK_STATUS_indication_serviceClass,
        _IN_DATA_ACK_STATUS_indication_status,
        IN_DATA_ACK_STATUS_indication,
        _IN_REPLY_indication_source_addr,
        _IN_REPLY_indication_dest_addr,
        _IN_REPLY_indication_data,
        _IN_REPLY_indication_priority,
        _IN_REPLY_indication_serviceClass,
        IN_REPLY_indication,
        _IN_REPLY_STATUS_indication_source_addr,
        _IN_REPLY_STATUS_indication_status,
        IN_REPLY_STATUS_indication,
        _IN_REPLY_UPDATE_STATUS_indication_source_addr,
        _IN_REPLY_UPDATE_STATUS_indication_data,
        _IN_REPLY_UPDATE_STATUS_indication_priority,
        _IN_REPLY_UPDATE_STATUS_indication_accessParams,
        _IN_REPLY_UPDATE_STATUS_indication_txStatus,
        IN_REPLY_UPDATE_STATUS_indication,
        INdata,
        ACCPARAM,
        nullAP,
        _nullAP_val_Parameter,
        __AccessParameters_apRef_tab,
        ___AccessParameters_apRef_tab_val_Parameter_0,
        _AccessParameters_apRef,
        _AccessParameters_aParameter,
        AccessParameters,
        AccParams,
        _AccParams_val_Parameter_0,
        NullType,
        MACServiceClass,
        INtxStatus,
        VCIserialNumber,
        EUI64,
        _LegacyCIID_selector1,
        _LegacyCIID_iTS_scuId,
        _LegacyCIID_selector2,
        _LegacyCIID_medID,
        _LegacyCIID_vciSerialNumber,
        LegacyCIID,
        RemoteCIID,
        OneOCTETones,
        TwoOCTETones,
        _EUI64MAC48_oui,
        _EUI64MAC48_selector2,
        _EUI64MAC48_ext,
        EUI64MAC48,
        _MACoui_uoi1,
        _MACoui_ulBit,
        _MACoui_igBIT,
        _MACoui_uoi2,
        MACoui,
        MACext,
        _MACmcID_ucgc,
        _MACmcID_mc,
        _MACmcID_serial,
        MACmcID,
        version,
    ]

class CALMmanagement:

    _name_  = 'CALMmanagement'
    _oid_   = [1, 0, 24102, 1, 1]
    
    _obj_ = [
        'ApplReqList',
        'ApplicationID',
        'CrCiPrioList',
        'CrCiPrioReq',
        'CCPrequest',
        'CCPpotInt',
        'CCPstatus',
        'ITS-scuId',
        'ITS-scuList',
        'ITS-SSI',
        'MPARAM',
        'Param24102',
        'M-Params',
        'stationID',
        'minPrioCrossCI',
        'stationPosition',
        'iTS-scuId',
        'vciList',
        'crCiPrioList',
        'timerITS-SSI',
        'its-ssi',
        'applReqList',
        'vCIperformList',
        'talive',
        'iTS-scuList',
        'Param24102No',
        'Talive',
        'VciList',
        'VciListEntry',
        'VCIperformList',
        'VCIperformance',
        'StationID',
        'StationType',
        ]
    _type_ = [
        'ApplReqList',
        'ApplicationID',
        'CrCiPrioList',
        'CrCiPrioReq',
        'CCPrequest',
        'CCPpotInt',
        'CCPstatus',
        'ITS-scuId',
        'ITS-scuList',
        'ITS-SSI',
        'MPARAM',
        'Param24102',
        'Param24102No',
        'Talive',
        'VciList',
        'VciListEntry',
        'VCIperformList',
        'VCIperformance',
        'StationID',
        'StationType',
        ]
    _set_ = [
        'M-Params',
        ]
    _val_ = [
        'stationID',
        'minPrioCrossCI',
        'stationPosition',
        'iTS-scuId',
        'vciList',
        'crCiPrioList',
        'timerITS-SSI',
        'its-ssi',
        'applReqList',
        'vCIperformList',
        'talive',
        'iTS-scuList',
        ]
    _class_ = [
        'MPARAM',
        'M-Params',
        'stationID',
        'minPrioCrossCI',
        'stationPosition',
        'iTS-scuId',
        'vciList',
        'crCiPrioList',
        'timerITS-SSI',
        'its-ssi',
        'applReqList',
        'vCIperformList',
        'talive',
        'iTS-scuList',
        ]
    _param_ = [
        ]
    
    #-----< ApplReqList >-----#
    ApplReqList = SEQ(name='ApplReqList', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITSSappCPReqReg')))
    
    #-----< ApplicationID >-----#
    ApplicationID = SEQ(name='ApplicationID', mode=MODE_TYPE)
    _ApplicationID_hostITS_scuId = INT(name='hostITS-scuId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ITS-scuId')))
    _ApplicationID_seqNumber = SEQ(name='seqNumber', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'ServiceRef')))
    ApplicationID._cont = ASN1Dict([
        ('hostITS-scuId', _ApplicationID_hostITS_scuId),
        ('seqNumber', _ApplicationID_seqNumber),
        ])
    ApplicationID._ext = None
    
    #-----< CrCiPrioList >-----#
    CrCiPrioList = SEQ_OF(name='CrCiPrioList', mode=MODE_TYPE)
    _CrCiPrioList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'CrCiPrioReq')))
    CrCiPrioList._cont = _CrCiPrioList__item_
    CrCiPrioList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< CrCiPrioReq >-----#
    CrCiPrioReq = SEQ(name='CrCiPrioReq', mode=MODE_TYPE)
    _CrCiPrioReq_linkId = SEQ(name='linkId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _CrCiPrioReq_timeout = INT(name='timeout', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CrCiPrioReq_timeout._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _CrCiPrioReq_request = SEQ_OF(name='request', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'CCPrequest')))
    _CrCiPrioReq_interferer = SEQ_OF(name='interferer', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __CrCiPrioReq_interferer__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'CCPpotInt')))
    _CrCiPrioReq_interferer._cont = __CrCiPrioReq_interferer__item_
    CrCiPrioReq._cont = ASN1Dict([
        ('linkId', _CrCiPrioReq_linkId),
        ('timeout', _CrCiPrioReq_timeout),
        ('request', _CrCiPrioReq_request),
        ('interferer', _CrCiPrioReq_interferer),
        ])
    CrCiPrioReq._ext = None
    
    #-----< CCPrequest >-----#
    CCPrequest = SEQ_OF(name='CCPrequest', mode=MODE_TYPE)
    _CCPrequest__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    __CCPrequest__item__reqNo = INT(name='reqNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __CCPrequest__item__reqNo._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    __CCPrequest__item__priority = INT(name='priority', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    __CCPrequest__item__status = INT(name='status', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'CCPstatus')))
    _CCPrequest__item_._cont = ASN1Dict([
        ('reqNo', __CCPrequest__item__reqNo),
        ('priority', __CCPrequest__item__priority),
        ('status', __CCPrequest__item__status),
        ])
    _CCPrequest__item_._ext = None
    CCPrequest._cont = _CCPrequest__item_
    CCPrequest._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< CCPpotInt >-----#
    CCPpotInt = SEQ(name='CCPpotInt', mode=MODE_TYPE)
    _CCPpotInt_linkID = SEQ(name='linkID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _CCPpotInt_status = INT(name='status', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'CCPstatus')))
    CCPpotInt._cont = ASN1Dict([
        ('linkID', _CCPpotInt_linkID),
        ('status', _CCPpotInt_status),
        ])
    CCPpotInt._ext = None
    
    #-----< CCPstatus >-----#
    CCPstatus = INT(name='CCPstatus', mode=MODE_TYPE)
    CCPstatus._cont = ASN1Dict([('released', 0), ('requestd', 16), ('ignored', 64), ('granted', 128)])
    
    #-----< ITS-scuId >-----#
    ITS_scuId = INT(name='ITS-scuId', mode=MODE_TYPE)
    ITS_scuId._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< ITS-scuList >-----#
    ITS_scuList = SEQ(name='ITS-scuList', mode=MODE_TYPE)
    _ITS_scuList_iTS_scuId = INT(name='iTS-scuId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ITS-scuId')))
    _ITS_scuList_its_scuType = INT(name='its-scuType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMiitsscu', 'ITS-SCUtype')))
    _ITS_scuList_time = TIME_GEN(name='time', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ITS_scuList_uniqueID = STR_PRINT(name='uniqueID', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ITS_scuList._cont = ASN1Dict([
        ('iTS-scuId', _ITS_scuList_iTS_scuId),
        ('its-scuType', _ITS_scuList_its_scuType),
        ('time', _ITS_scuList_time),
        ('uniqueID', _ITS_scuList_uniqueID),
        ])
    ITS_scuList._ext = None
    
    #-----< ITS-SSI >-----#
    ITS_SSI = SEQ(name='ITS-SSI', mode=MODE_TYPE)
    _ITS_SSI_stationType = INT(name='stationType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'StationType')))
    _ITS_SSI_stationID = OCT_STR(name='stationID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'StationID')))
    _ITS_SSI_stationPosition = SEQ(name='stationPosition', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'KineVectOut')))
    ITS_SSI._cont = ASN1Dict([
        ('stationType', _ITS_SSI_stationType),
        ('stationID', _ITS_SSI_stationID),
        ('stationPosition', _ITS_SSI_stationPosition),
        ])
    ITS_SSI._ext = None
    
    #-----< MPARAM >-----#
    MPARAM = CLASS(name='MPARAM', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'PARAMS')))
    
    #-----< Param24102 >-----#
    Param24102 = SEQ(name='Param24102', mode=MODE_TYPE)
    _Param24102_paramNo = INT(name='paramNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmanagement', 'MPARAM'), ['paramRef']))
    __Param24102_paramNo_tab = CLASS(name='_tab_MPARAM', mode=MODE_SET, typeref=ASN1RefType(('CALMmanagement', 'MPARAM')))
    ___Param24102_paramNo_tab_val_Parameter_0 = OCT_STR(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'StationID')))
    ___Param24102_paramNo_tab_val_Parameter_1 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    ___Param24102_paramNo_tab_val_Parameter_2 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'KineVectOut')))
    ___Param24102_paramNo_tab_val_Parameter_3 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'ITS-scuId')))
    ___Param24102_paramNo_tab_val_Parameter_4 = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'VciList')))
    ___Param24102_paramNo_tab_val_Parameter_5 = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'CrCiPrioList')))
    ___Param24102_paramNo_tab_val_Parameter_6 = INT(name='Parameter', mode=MODE_TYPE)
    ___Param24102_paramNo_tab_val_Parameter_6._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    ___Param24102_paramNo_tab_val_Parameter_7 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'ITS-SSI')))
    ___Param24102_paramNo_tab_val_Parameter_8 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'ApplReqList')))
    ___Param24102_paramNo_tab_val_Parameter_9 = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'VCIperformList')))
    ___Param24102_paramNo_tab_val_Parameter_10 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'Talive')))
    ___Param24102_paramNo_tab_val_Parameter_11 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'ITS-scuList')))
    __Param24102_paramNo_tab._val = ASN1Set(rv=[dict([('paramRef', 0), ('Parameter', ___Param24102_paramNo_tab_val_Parameter_0)]), dict([('paramRef', 1), ('Parameter', ___Param24102_paramNo_tab_val_Parameter_1)]), dict([('paramRef', 2), ('Parameter', ___Param24102_paramNo_tab_val_Parameter_2)]), dict([('paramRef', 3), ('Parameter', ___Param24102_paramNo_tab_val_Parameter_3)]), dict([('paramRef', 4), ('Parameter', ___Param24102_paramNo_tab_val_Parameter_4)]), dict([('paramRef', 5), ('Parameter', ___Param24102_paramNo_tab_val_Parameter_5)]), dict([('paramRef', 6), ('Parameter', ___Param24102_paramNo_tab_val_Parameter_6)]), dict([('paramRef', 7), ('Parameter', ___Param24102_paramNo_tab_val_Parameter_7)]), dict([('paramRef', 8), ('Parameter', ___Param24102_paramNo_tab_val_Parameter_8)]), dict([('paramRef', 9), ('Parameter', ___Param24102_paramNo_tab_val_Parameter_9)]), dict([('paramRef', 10), ('Parameter', ___Param24102_paramNo_tab_val_Parameter_10)]), dict([('paramRef', 11), ('Parameter', ___Param24102_paramNo_tab_val_Parameter_11)])], rr=[], ev=None, er=[])
    _Param24102_paramNo._const_tab = __Param24102_paramNo_tab
    _Param24102_paramNo._const_tab_at = None
    _Param24102_paramNo._const_tab_id = 'paramRef'
    _Param24102_param = OPEN(name='param', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmanagement', 'MPARAM'), ['Parameter']))
    _Param24102_param._const_tab = __Param24102_paramNo_tab
    _Param24102_param._const_tab_at = ('..', 'paramNo')
    _Param24102_param._const_tab_id = 'Parameter'
    Param24102._cont = ASN1Dict([
        ('paramNo', _Param24102_paramNo),
        ('param', _Param24102_param),
        ])
    Param24102._ext = None
    
    #-----< M-Params >-----#
    M_Params = CLASS(name='M-Params', mode=MODE_SET, typeref=ASN1RefType(('CALMmanagement', 'MPARAM')))
    _M_Params_val_Parameter_0 = OCT_STR(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'StationID')))
    _M_Params_val_Parameter_1 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _M_Params_val_Parameter_2 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'KineVectOut')))
    _M_Params_val_Parameter_3 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'ITS-scuId')))
    _M_Params_val_Parameter_4 = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'VciList')))
    _M_Params_val_Parameter_5 = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'CrCiPrioList')))
    _M_Params_val_Parameter_6 = INT(name='Parameter', mode=MODE_TYPE)
    _M_Params_val_Parameter_6._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _M_Params_val_Parameter_7 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'ITS-SSI')))
    _M_Params_val_Parameter_8 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'ApplReqList')))
    _M_Params_val_Parameter_9 = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'VCIperformList')))
    _M_Params_val_Parameter_10 = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'Talive')))
    _M_Params_val_Parameter_11 = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'ITS-scuList')))
    M_Params._val = ASN1Set(rv=[dict([('paramRef', 0), ('Parameter', _M_Params_val_Parameter_0)]), dict([('paramRef', 1), ('Parameter', _M_Params_val_Parameter_1)]), dict([('paramRef', 2), ('Parameter', _M_Params_val_Parameter_2)]), dict([('paramRef', 3), ('Parameter', _M_Params_val_Parameter_3)]), dict([('paramRef', 4), ('Parameter', _M_Params_val_Parameter_4)]), dict([('paramRef', 5), ('Parameter', _M_Params_val_Parameter_5)]), dict([('paramRef', 6), ('Parameter', _M_Params_val_Parameter_6)]), dict([('paramRef', 7), ('Parameter', _M_Params_val_Parameter_7)]), dict([('paramRef', 8), ('Parameter', _M_Params_val_Parameter_8)]), dict([('paramRef', 9), ('Parameter', _M_Params_val_Parameter_9)]), dict([('paramRef', 10), ('Parameter', _M_Params_val_Parameter_10)]), dict([('paramRef', 11), ('Parameter', _M_Params_val_Parameter_11)])], rr=[], ev=[], er=[])
    
    #-----< stationID >-----#
    stationID = CLASS(name='stationID', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmanagement', 'MPARAM')))
    _stationID_val_Parameter = OCT_STR(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'StationID')))
    stationID._val = dict([('paramRef', 0), ('Parameter', _stationID_val_Parameter)])
    
    #-----< minPrioCrossCI >-----#
    minPrioCrossCI = CLASS(name='minPrioCrossCI', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmanagement', 'MPARAM')))
    _minPrioCrossCI_val_Parameter = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    minPrioCrossCI._val = dict([('paramRef', 1), ('Parameter', _minPrioCrossCI_val_Parameter)])
    
    #-----< stationPosition >-----#
    stationPosition = CLASS(name='stationPosition', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmanagement', 'MPARAM')))
    _stationPosition_val_Parameter = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'KineVectOut')))
    stationPosition._val = dict([('paramRef', 2), ('Parameter', _stationPosition_val_Parameter)])
    
    #-----< iTS-scuId >-----#
    iTS_scuId = CLASS(name='iTS-scuId', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmanagement', 'MPARAM')))
    _iTS_scuId_val_Parameter = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'ITS-scuId')))
    iTS_scuId._val = dict([('paramRef', 3), ('Parameter', _iTS_scuId_val_Parameter)])
    
    #-----< vciList >-----#
    vciList = CLASS(name='vciList', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmanagement', 'MPARAM')))
    _vciList_val_Parameter = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'VciList')))
    vciList._val = dict([('paramRef', 4), ('Parameter', _vciList_val_Parameter)])
    
    #-----< crCiPrioList >-----#
    crCiPrioList = CLASS(name='crCiPrioList', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmanagement', 'MPARAM')))
    _crCiPrioList_val_Parameter = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'CrCiPrioList')))
    crCiPrioList._val = dict([('paramRef', 5), ('Parameter', _crCiPrioList_val_Parameter)])
    
    #-----< timerITS-SSI >-----#
    timerITS_SSI = CLASS(name='timerITS-SSI', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmanagement', 'MPARAM')))
    _timerITS_SSI_val_Parameter = INT(name='Parameter', mode=MODE_TYPE)
    _timerITS_SSI_val_Parameter._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    timerITS_SSI._val = dict([('paramRef', 6), ('Parameter', _timerITS_SSI_val_Parameter)])
    
    #-----< its-ssi >-----#
    its_ssi = CLASS(name='its-ssi', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmanagement', 'MPARAM')))
    _its_ssi_val_Parameter = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'ITS-SSI')))
    its_ssi._val = dict([('paramRef', 7), ('Parameter', _its_ssi_val_Parameter)])
    
    #-----< applReqList >-----#
    applReqList = CLASS(name='applReqList', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmanagement', 'MPARAM')))
    _applReqList_val_Parameter = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'ApplReqList')))
    applReqList._val = dict([('paramRef', 8), ('Parameter', _applReqList_val_Parameter)])
    
    #-----< vCIperformList >-----#
    vCIperformList = CLASS(name='vCIperformList', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmanagement', 'MPARAM')))
    _vCIperformList_val_Parameter = SEQ_OF(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'VCIperformList')))
    vCIperformList._val = dict([('paramRef', 9), ('Parameter', _vCIperformList_val_Parameter)])
    
    #-----< talive >-----#
    talive = CLASS(name='talive', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmanagement', 'MPARAM')))
    _talive_val_Parameter = INT(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'Talive')))
    talive._val = dict([('paramRef', 10), ('Parameter', _talive_val_Parameter)])
    
    #-----< iTS-scuList >-----#
    iTS_scuList = CLASS(name='iTS-scuList', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmanagement', 'MPARAM')))
    _iTS_scuList_val_Parameter = SEQ(name='Parameter', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'ITS-scuList')))
    iTS_scuList._val = dict([('paramRef', 11), ('Parameter', _iTS_scuList_val_Parameter)])
    
    #-----< Param24102No >-----#
    Param24102No = INT(name='Param24102No', mode=MODE_TYPE)
    Param24102No._cont = ASN1Dict([('stationID', 0), ('minPrioCrossCI', 1), ('stationPosition', 2), ('iTS-scuId', 3), ('vciList', 4), ('crCiPrioList', 5), ('timerITS-SSI', 6), ('its-ssi', 7), ('applReqList', 8), ('vCIperformList', 9), ('talive', 10), ('iTS-scuList', 11)])
    Param24102No._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< Talive >-----#
    Talive = INT(name='Talive', mode=MODE_TYPE)
    Talive._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< VciList >-----#
    VciList = SEQ_OF(name='VciList', mode=MODE_TYPE)
    _VciList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'VciListEntry')))
    VciList._cont = _VciList__item_
    VciList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< VciListEntry >-----#
    VciListEntry = SEQ(name='VciListEntry', mode=MODE_TYPE)
    _VciListEntry_linkId = SEQ(name='linkId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _VciListEntry_medType = INT(name='medType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'MedType')))
    _VciListEntry_status = INT(name='status', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'CIstatus')))
    _VciListEntry_connect = INT(name='connect', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Connect')))
    _VciListEntry_macAddress = OCT_STR(name='macAddress', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'MACaddress')))
    VciListEntry._cont = ASN1Dict([
        ('linkId', _VciListEntry_linkId),
        ('medType', _VciListEntry_medType),
        ('status', _VciListEntry_status),
        ('connect', _VciListEntry_connect),
        ('macAddress', _VciListEntry_macAddress),
        ])
    VciListEntry._ext = None
    
    #-----< VCIperformList >-----#
    VCIperformList = SEQ_OF(name='VCIperformList', mode=MODE_TYPE)
    _VCIperformList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'VCIperformance')))
    VCIperformList._cont = _VCIperformList__item_
    VCIperformList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< VCIperformance >-----#
    VCIperformance = SEQ(name='VCIperformance', mode=MODE_TYPE)
    _VCIperformance_linkId = SEQ(name='linkId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _VCIperformance_channelType = CHOICE(name='channelType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtComm', 'LogicalChannelType')))
    _VCIperformance_channelNo = INT(name='channelNo', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _VCIperformance_channelNo._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _VCIperformance_minUserPrio = INT(name='minUserPrio', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _VCIperformance_dataRateNW = INT(name='dataRateNW', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'DataRate')))
    _VCIperformance_dataRatesNW = SEQ(name='dataRatesNW', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'DataRatesNW')))
    _VCIperformance_directivity = SEQ(name='directivity', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Directivity')))
    _VCIperformance_commRangeRef = INT(name='commRangeRef', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _VCIperformance_commRangeRef._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _VCIperformance_cost = SEQ(name='cost', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'MediumCost')))
    _VCIperformance_reliability = INT(name='reliability', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _VCIperformance_reliability._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    VCIperformance._cont = ASN1Dict([
        ('linkId', _VCIperformance_linkId),
        ('channelType', _VCIperformance_channelType),
        ('channelNo', _VCIperformance_channelNo),
        ('minUserPrio', _VCIperformance_minUserPrio),
        ('dataRateNW', _VCIperformance_dataRateNW),
        ('dataRatesNW', _VCIperformance_dataRatesNW),
        ('directivity', _VCIperformance_directivity),
        ('commRangeRef', _VCIperformance_commRangeRef),
        ('cost', _VCIperformance_cost),
        ('reliability', _VCIperformance_reliability),
        ])
    VCIperformance._ext = None
    
    #-----< StationID >-----#
    StationID = OCT_STR(name='StationID', mode=MODE_TYPE)
    StationID._const_sz = ASN1Set(rv=[4], rr=[], ev=None, er=[])
    
    #-----< StationType >-----#
    StationType = INT(name='StationType', mode=MODE_TYPE)
    StationType._cont = ASN1Dict([('mobile', 0), ('fixed', 1), ('portable', 2), ('infrastructure', 254), ('unknown', 255)])
    StationType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    _all_ = [
        ApplReqList,
        _ApplicationID_hostITS_scuId,
        _ApplicationID_seqNumber,
        ApplicationID,
        _CrCiPrioList__item_,
        CrCiPrioList,
        _CrCiPrioReq_linkId,
        _CrCiPrioReq_timeout,
        _CrCiPrioReq_request,
        __CrCiPrioReq_interferer__item_,
        _CrCiPrioReq_interferer,
        CrCiPrioReq,
        __CCPrequest__item__reqNo,
        __CCPrequest__item__priority,
        __CCPrequest__item__status,
        _CCPrequest__item_,
        CCPrequest,
        _CCPpotInt_linkID,
        _CCPpotInt_status,
        CCPpotInt,
        CCPstatus,
        ITS_scuId,
        _ITS_scuList_iTS_scuId,
        _ITS_scuList_its_scuType,
        _ITS_scuList_time,
        _ITS_scuList_uniqueID,
        ITS_scuList,
        _ITS_SSI_stationType,
        _ITS_SSI_stationID,
        _ITS_SSI_stationPosition,
        ITS_SSI,
        MPARAM,
        __Param24102_paramNo_tab,
        ___Param24102_paramNo_tab_val_Parameter_0,
        ___Param24102_paramNo_tab_val_Parameter_1,
        ___Param24102_paramNo_tab_val_Parameter_2,
        ___Param24102_paramNo_tab_val_Parameter_3,
        ___Param24102_paramNo_tab_val_Parameter_4,
        ___Param24102_paramNo_tab_val_Parameter_5,
        ___Param24102_paramNo_tab_val_Parameter_6,
        ___Param24102_paramNo_tab_val_Parameter_7,
        ___Param24102_paramNo_tab_val_Parameter_8,
        ___Param24102_paramNo_tab_val_Parameter_9,
        ___Param24102_paramNo_tab_val_Parameter_10,
        ___Param24102_paramNo_tab_val_Parameter_11,
        _Param24102_paramNo,
        _Param24102_param,
        Param24102,
        M_Params,
        _M_Params_val_Parameter_0,
        _M_Params_val_Parameter_1,
        _M_Params_val_Parameter_2,
        _M_Params_val_Parameter_3,
        _M_Params_val_Parameter_4,
        _M_Params_val_Parameter_5,
        _M_Params_val_Parameter_6,
        _M_Params_val_Parameter_7,
        _M_Params_val_Parameter_8,
        _M_Params_val_Parameter_9,
        _M_Params_val_Parameter_10,
        _M_Params_val_Parameter_11,
        stationID,
        _stationID_val_Parameter,
        minPrioCrossCI,
        _minPrioCrossCI_val_Parameter,
        stationPosition,
        _stationPosition_val_Parameter,
        iTS_scuId,
        _iTS_scuId_val_Parameter,
        vciList,
        _vciList_val_Parameter,
        crCiPrioList,
        _crCiPrioList_val_Parameter,
        timerITS_SSI,
        _timerITS_SSI_val_Parameter,
        its_ssi,
        _its_ssi_val_Parameter,
        applReqList,
        _applReqList_val_Parameter,
        vCIperformList,
        _vCIperformList_val_Parameter,
        talive,
        _talive_val_Parameter,
        iTS_scuList,
        _iTS_scuList_val_Parameter,
        Param24102No,
        Talive,
        _VciList__item_,
        VciList,
        _VciListEntry_linkId,
        _VciListEntry_medType,
        _VciListEntry_status,
        _VciListEntry_connect,
        _VciListEntry_macAddress,
        VciListEntry,
        _VCIperformList__item_,
        VCIperformList,
        _VCIperformance_linkId,
        _VCIperformance_channelType,
        _VCIperformance_channelNo,
        _VCIperformance_minUserPrio,
        _VCIperformance_dataRateNW,
        _VCIperformance_dataRatesNW,
        _VCIperformance_directivity,
        _VCIperformance_commRangeRef,
        _VCIperformance_cost,
        _VCIperformance_reliability,
        VCIperformance,
        StationID,
        StationType,
    ]

class CALMmsap:

    _name_  = 'CALMmsap'
    _oid_   = [1, 0, 24102, 3, 1]
    
    _obj_ = [
        'COMMUPDOWN',
        'FASAPDOWN',
        'FAsapPrimitivesDown',
        'FAsapspsdown',
        'gCsamctxConfFA',
        'gCregServerFA',
        'gCupdateServerFA',
        'gCderegServerFA',
        'gCregClientFA',
        'gCupdateClientFA',
        'gCderegClientFA',
        'FASAPUP',
        'FAsapPrimitivesUp',
        'FAsapspsup',
        'gCsamctxFA',
        'gCregServerConfFA',
        'gCupdateServerConfFA',
        'gCderegServerConfFA',
        'gCregClientConfFA',
        'gCupdateClientConfFA',
        'gCderegClientConfFA',
        'gCsamFA',
        'gCctxFA',
        'MXSERV',
        'MFSAP-CR',
        'MF-Command',
        'MF-Command-request',
        'simFUTcmd',
        'simFLTcmd',
        'gCsamctx',
        'gCsam',
        'gCctx',
        'lDMnotifyCmd',
        'legacyCICmd',
        'stateCInotify',
        'gCperiodCmd',
        'gCctxTxCmd',
        'gCdeleteCmd',
        'iICrequestTX',
        'iICresponseTX',
        'testMF',
        'SimFUTcmd',
        'SimFLTcmd',
        'LDMnotify',
        'RadarView',
        'LegacyCIreq',
        'StateCInotify',
        'MFSAP-CC',
        'MF-CmdConfirm',
        'MF-Command-confirm',
        'simFUTcmdConf',
        'simFLTcmdConf',
        'gCsamctxConf',
        'gCsamConf',
        'gCctxConf',
        'lDMnotifyConf',
        'legacyCIConf',
        'stateCInotifyConf',
        'gCperiodCmdConf',
        'gCctxTxCmdConf',
        'gCdeleteCmdConf',
        'iICrequestTXConf',
        'iICresponseTXConf',
        'testMFConf',
        'MFSAP-RR',
        'MF-Request',
        'MF-Request-request',
        'simFUTreq',
        'simFLTreq',
        'iTS-S-Appl-Reg',
        'gCregServer',
        'gCupdateServer',
        'gCderegServer',
        'gCregClient',
        'gCupdateClient',
        'gCderegClient',
        'lDMregister',
        'sAMrxNot',
        'cTXrxNot',
        'iICrequestRX',
        'iICresponseRX',
        'iTS-S-Appl-ReqFinal',
        'testMFecho',
        'SimFUTreq',
        'SimFLTreq',
        'LDMregister',
        'TestMFecho',
        'MFSAP-RC',
        'MF-ReqConfirm',
        'MF-Request-confirm',
        'simFUTreqConf',
        'simFLTreqConf',
        'iTS-S-Appl-RegConf',
        'gCregServerConf',
        'gCupdateServerConf',
        'gCderegServerConf',
        'gCregClientConf',
        'gCupdateClientConf',
        'gCderegClientConf',
        'lDMregisterConf',
        'sAMrxNotConf',
        'cTXrxNotConf',
        'iICrequestRXConf',
        'iICresponseRXConf',
        'iTS-S-Appl-ReqFinalConf',
        'testMFechoConf',
        'MNSAP-CR',
        'MN-Command',
        'MN-Command-request',
        'simNUTcmd',
        'simNLTcmd',
        'fWTset',
        'fWTupdate',
        'fWTdelete',
        'testMN',
        'SimNUTcmd',
        'SimNLTcmd',
        'FWT',
        'FWTset',
        'NTprotsSet',
        'FWTupdate',
        'NTprotsUpdate',
        'FWTdelete',
        'NTprotsDelete',
        'fntpset',
        'fntpupdate',
        'fntpdelete',
        'MNSAP-CC',
        'MN-CmdConfirm',
        'MN-Command-confirm',
        'simNUTcmdConf',
        'simNLTcmdConf',
        'fWTsetConf',
        'fWTupdateConf',
        'fWTdeletConf',
        'testMNConf',
        'FWTCONF',
        'FWTsetConf',
        'NTprotsSetConf',
        'FWTupdateConf',
        'NTprotsUpdateConf',
        'FWTdeleteConf',
        'NTprotsDeleteConf',
        'fntpsetConf',
        'fntpupdateConf',
        'fntpdeleteConf',
        'MNSAP-RR',
        'MN-Request',
        'MN-Request-request',
        'simNUTreq',
        'simNLTreq',
        'fWTsetNot',
        'fWTupdateNot',
        'fWTdeletNot',
        'vCIcreatePeerMAC',
        'its-ssiPeerNot',
        'testMNecho',
        'SimNUTreq',
        'SimNLTreq',
        'FWTNOT',
        'FWTsetNot',
        'NTprotsSetNot',
        'FWTupdateNot',
        'NTprotsUpdateNot',
        'FWTdeleteNot',
        'NTprotsDeleteNot',
        'fntpsetNot',
        'fntpupdateNot',
        'fntpdeleteNot',
        'VCIcreatePeerMAC',
        'Its-ssiPeerNot',
        'StationType',
        'StationID',
        'TestMNecho',
        'MNSAP-RC',
        'MN-ReqConfirm',
        'MN-Request-confirm',
        'simNUTreqConf',
        'simNLTreqConf',
        'fWTsetNotConf',
        'fWTupdateNotConf',
        'fWTdeletNotConf',
        'vCIcreatePeerMACConf',
        'its-ssiPeerNotConf',
        'testMNechoConf',
        'VCIPeerMAC',
        'MISAP-CR',
        'MI-Command',
        'MI-Command-request',
        'simIUTcmd',
        'regCmd',
        'cIstate',
        'wakeUp',
        'rTScmd',
        'rTSackCmd',
        'cONcmd',
        'rIcmd',
        'manuCmd',
        'vciCmd',
        'monitor',
        'unitDataCmd',
        'testMI',
        'unknownCmd',
        'UnknownCommand',
        'SimIUTcmd',
        'RegCmd',
        'CIstateChng',
        'WakeUp',
        'RTScmd',
        'ReqID',
        'RTSackCmd',
        'CONcmd',
        'RIcmd',
        'RI',
        'VciCmd',
        'Monitor',
        'UnitData',
        'DataUnitData',
        'ParameterUnitData',
        'MI-Command-confirm',
        'MISAP-RR',
        'MI-Request',
        'MI-Request-request',
        'simIUTreq',
        'regReq',
        'prioReg',
        'rTSreq',
        'rTSackReq',
        'rIreq',
        'manuReq',
        'events',
        'posUpdateReq',
        'unitDataReq',
        'testMIecho',
        'SimIUTreq',
        'RegReq',
        'PrioReg',
        'Interferers',
        'RTSreq',
        'RTSackReq',
        'RIreq',
        'RIaccess',
        'EVENT21218',
        'Events21218',
        'Events-21218',
        'minUserPrio',
        'txQueueThreshold',
        'txQueueFull',
        'vciCreated',
        'vciDeleted',
        'paramMonitor',
        'txQueueLow',
        'vciReset',
        'E21218-0',
        'E21218-1',
        'E21218-2',
        'E21218-3',
        'E21218-4',
        'E21218-5',
        'E21218-6',
        'E21218-7',
        'PosUpdateReq',
        'TestMIecho',
        'MI-Request-confirm',
        'MI-Set-request',
        'MI-Set-confirm',
        'MI-Get-request',
        'MI-Get-confirm',
        'MSSAP-CR',
        'MS-Command-request',
        'MS-Command',
        'testMS',
        'MSSAP-CC',
        'MS-Command-confirm',
        'MS-CmdConfirm',
        'testMSConf',
        'MSSAP-RR',
        'MS-Request-request',
        'MS-Request',
        'iTS-S-Appl-ProcS-Reg',
        'iTS-S-Appl-ProcS-ReqFinal',
        'testMSecho',
        'TestMSecho',
        'MSSAP-RC',
        'MS-Request-confirm',
        'MS-ReqConfirm',
        'iTS-S-Appl-ProcS-RegConf',
        'iTS-S-Appl-ProcS-ReqFinalConf',
        'testMSechoConf',
        'MASAP-CR',
        'MA-Command-request',
        'MA-Command',
        'testMA',
        'MASAP-CC',
        'testMAConf',
        'MA-Command-confirm',
        'MA-CmdConfirm',
        'MASAP-RR',
        'MA-Request-request',
        'MA-Request',
        'iTS-S-Appl-Proc-Reg',
        'iTS-S-Appl-Proc-ReqFinal',
        'testMAecho',
        'TestMAecho',
        'MASAP-RC',
        'MA-Request-confirm',
        'MA-ReqConfirm',
        'iTS-S-Appl-Proc-RegConf',
        'iTS-S-Appl-Proc-ReqFinalConf',
        'testMAechoConf',
        'ErrStatus',
        'CommandRef',
        ]
    _type_ = [
        'COMMUPDOWN',
        'FASAPDOWN',
        'FAsapPrimitivesDown',
        'FASAPUP',
        'FAsapPrimitivesUp',
        'MXSERV',
        'MFSAP-CR',
        'MF-Command-request',
        'SimFUTcmd',
        'SimFLTcmd',
        'LDMnotify',
        'RadarView',
        'LegacyCIreq',
        'StateCInotify',
        'MFSAP-CC',
        'MF-Command-confirm',
        'MFSAP-RR',
        'MF-Request-request',
        'SimFUTreq',
        'SimFLTreq',
        'LDMregister',
        'TestMFecho',
        'MFSAP-RC',
        'MF-Request-confirm',
        'MNSAP-CR',
        'MN-Command-request',
        'SimNUTcmd',
        'SimNLTcmd',
        'FWT',
        'FWTset',
        'FWTupdate',
        'FWTdelete',
        'MNSAP-CC',
        'MN-Command-confirm',
        'FWTCONF',
        'FWTsetConf',
        'FWTupdateConf',
        'FWTdeleteConf',
        'MNSAP-RR',
        'MN-Request-request',
        'SimNUTreq',
        'SimNLTreq',
        'FWTNOT',
        'FWTsetNot',
        'FWTupdateNot',
        'FWTdeleteNot',
        'VCIcreatePeerMAC',
        'Its-ssiPeerNot',
        'StationType',
        'StationID',
        'TestMNecho',
        'MNSAP-RC',
        'MN-Request-confirm',
        'VCIPeerMAC',
        'MISAP-CR',
        'MI-Command-request',
        'UnknownCommand',
        'SimIUTcmd',
        'RegCmd',
        'CIstateChng',
        'WakeUp',
        'RTScmd',
        'ReqID',
        'RTSackCmd',
        'CONcmd',
        'RIcmd',
        'RI',
        'VciCmd',
        'Monitor',
        'UnitData',
        'DataUnitData',
        'ParameterUnitData',
        'MI-Command-confirm',
        'MISAP-RR',
        'MI-Request-request',
        'SimIUTreq',
        'RegReq',
        'PrioReg',
        'Interferers',
        'RTSreq',
        'RTSackReq',
        'RIreq',
        'RIaccess',
        'EVENT21218',
        'Events21218',
        'E21218-0',
        'E21218-1',
        'E21218-2',
        'E21218-3',
        'E21218-4',
        'E21218-5',
        'E21218-6',
        'E21218-7',
        'PosUpdateReq',
        'TestMIecho',
        'MI-Request-confirm',
        'MI-Set-request',
        'MI-Set-confirm',
        'MI-Get-request',
        'MI-Get-confirm',
        'MSSAP-CR',
        'MS-Command-request',
        'MSSAP-CC',
        'MS-Command-confirm',
        'MSSAP-RR',
        'MS-Request-request',
        'TestMSecho',
        'MSSAP-RC',
        'MS-Request-confirm',
        'MASAP-CR',
        'MA-Command-request',
        'MASAP-CC',
        'MA-Command-confirm',
        'MASAP-RR',
        'MA-Request-request',
        'TestMAecho',
        'MASAP-RC',
        'MA-Request-confirm',
        'ErrStatus',
        'CommandRef',
        ]
    _set_ = [
        'FAsapspsdown',
        'FAsapspsup',
        'MF-Command',
        'MF-CmdConfirm',
        'MF-Request',
        'MF-ReqConfirm',
        'MN-Command',
        'NTprotsSet',
        'NTprotsUpdate',
        'NTprotsDelete',
        'MN-CmdConfirm',
        'NTprotsSetConf',
        'NTprotsUpdateConf',
        'NTprotsDeleteConf',
        'MN-Request',
        'NTprotsSetNot',
        'NTprotsUpdateNot',
        'NTprotsDeleteNot',
        'MN-ReqConfirm',
        'MI-Command',
        'MI-Request',
        'Events-21218',
        'MS-Command',
        'MS-CmdConfirm',
        'MS-Request',
        'MS-ReqConfirm',
        'MA-Command',
        'MA-CmdConfirm',
        'MA-Request',
        'MA-ReqConfirm',
        ]
    _val_ = [
        'gCsamctxConfFA',
        'gCregServerFA',
        'gCupdateServerFA',
        'gCderegServerFA',
        'gCregClientFA',
        'gCupdateClientFA',
        'gCderegClientFA',
        'gCsamctxFA',
        'gCregServerConfFA',
        'gCupdateServerConfFA',
        'gCderegServerConfFA',
        'gCregClientConfFA',
        'gCupdateClientConfFA',
        'gCderegClientConfFA',
        'gCsamFA',
        'gCctxFA',
        'simFUTcmd',
        'simFLTcmd',
        'gCsamctx',
        'gCsam',
        'gCctx',
        'lDMnotifyCmd',
        'legacyCICmd',
        'stateCInotify',
        'gCperiodCmd',
        'gCctxTxCmd',
        'gCdeleteCmd',
        'iICrequestTX',
        'iICresponseTX',
        'testMF',
        'simFUTcmdConf',
        'simFLTcmdConf',
        'gCsamctxConf',
        'gCsamConf',
        'gCctxConf',
        'lDMnotifyConf',
        'legacyCIConf',
        'stateCInotifyConf',
        'gCperiodCmdConf',
        'gCctxTxCmdConf',
        'gCdeleteCmdConf',
        'iICrequestTXConf',
        'iICresponseTXConf',
        'testMFConf',
        'simFUTreq',
        'simFLTreq',
        'iTS-S-Appl-Reg',
        'gCregServer',
        'gCupdateServer',
        'gCderegServer',
        'gCregClient',
        'gCupdateClient',
        'gCderegClient',
        'lDMregister',
        'sAMrxNot',
        'cTXrxNot',
        'iICrequestRX',
        'iICresponseRX',
        'iTS-S-Appl-ReqFinal',
        'testMFecho',
        'simFUTreqConf',
        'simFLTreqConf',
        'iTS-S-Appl-RegConf',
        'gCregServerConf',
        'gCupdateServerConf',
        'gCderegServerConf',
        'gCregClientConf',
        'gCupdateClientConf',
        'gCderegClientConf',
        'lDMregisterConf',
        'sAMrxNotConf',
        'cTXrxNotConf',
        'iICrequestRXConf',
        'iICresponseRXConf',
        'iTS-S-Appl-ReqFinalConf',
        'testMFechoConf',
        'simNUTcmd',
        'simNLTcmd',
        'fWTset',
        'fWTupdate',
        'fWTdelete',
        'testMN',
        'fntpset',
        'fntpupdate',
        'fntpdelete',
        'simNUTcmdConf',
        'simNLTcmdConf',
        'fWTsetConf',
        'fWTupdateConf',
        'fWTdeletConf',
        'testMNConf',
        'fntpsetConf',
        'fntpupdateConf',
        'fntpdeleteConf',
        'simNUTreq',
        'simNLTreq',
        'fWTsetNot',
        'fWTupdateNot',
        'fWTdeletNot',
        'vCIcreatePeerMAC',
        'its-ssiPeerNot',
        'testMNecho',
        'fntpsetNot',
        'fntpupdateNot',
        'fntpdeleteNot',
        'simNUTreqConf',
        'simNLTreqConf',
        'fWTsetNotConf',
        'fWTupdateNotConf',
        'fWTdeletNotConf',
        'vCIcreatePeerMACConf',
        'its-ssiPeerNotConf',
        'testMNechoConf',
        'simIUTcmd',
        'regCmd',
        'cIstate',
        'wakeUp',
        'rTScmd',
        'rTSackCmd',
        'cONcmd',
        'rIcmd',
        'manuCmd',
        'vciCmd',
        'monitor',
        'unitDataCmd',
        'testMI',
        'unknownCmd',
        'simIUTreq',
        'regReq',
        'prioReg',
        'rTSreq',
        'rTSackReq',
        'rIreq',
        'manuReq',
        'events',
        'posUpdateReq',
        'unitDataReq',
        'testMIecho',
        'minUserPrio',
        'txQueueThreshold',
        'txQueueFull',
        'vciCreated',
        'vciDeleted',
        'paramMonitor',
        'txQueueLow',
        'vciReset',
        'testMS',
        'testMSConf',
        'iTS-S-Appl-ProcS-Reg',
        'iTS-S-Appl-ProcS-ReqFinal',
        'testMSecho',
        'iTS-S-Appl-ProcS-RegConf',
        'iTS-S-Appl-ProcS-ReqFinalConf',
        'testMSechoConf',
        'testMA',
        'testMAConf',
        'iTS-S-Appl-Proc-Reg',
        'iTS-S-Appl-Proc-ReqFinal',
        'testMAecho',
        'iTS-S-Appl-Proc-RegConf',
        'iTS-S-Appl-Proc-ReqFinalConf',
        'testMAechoConf',
        ]
    _class_ = [
        'COMMUPDOWN',
        'FASAPDOWN',
        'FAsapspsdown',
        'gCsamctxConfFA',
        'gCregServerFA',
        'gCupdateServerFA',
        'gCderegServerFA',
        'gCregClientFA',
        'gCupdateClientFA',
        'gCderegClientFA',
        'FASAPUP',
        'FAsapspsup',
        'gCsamctxFA',
        'gCregServerConfFA',
        'gCupdateServerConfFA',
        'gCderegServerConfFA',
        'gCregClientConfFA',
        'gCupdateClientConfFA',
        'gCderegClientConfFA',
        'gCsamFA',
        'gCctxFA',
        'MXSERV',
        'MFSAP-CR',
        'MF-Command',
        'simFUTcmd',
        'simFLTcmd',
        'gCsamctx',
        'gCsam',
        'gCctx',
        'lDMnotifyCmd',
        'legacyCICmd',
        'stateCInotify',
        'gCperiodCmd',
        'gCctxTxCmd',
        'gCdeleteCmd',
        'iICrequestTX',
        'iICresponseTX',
        'testMF',
        'MFSAP-CC',
        'MF-CmdConfirm',
        'simFUTcmdConf',
        'simFLTcmdConf',
        'gCsamctxConf',
        'gCsamConf',
        'gCctxConf',
        'lDMnotifyConf',
        'legacyCIConf',
        'stateCInotifyConf',
        'gCperiodCmdConf',
        'gCctxTxCmdConf',
        'gCdeleteCmdConf',
        'iICrequestTXConf',
        'iICresponseTXConf',
        'testMFConf',
        'MFSAP-RR',
        'MF-Request',
        'simFUTreq',
        'simFLTreq',
        'iTS-S-Appl-Reg',
        'gCregServer',
        'gCupdateServer',
        'gCderegServer',
        'gCregClient',
        'gCupdateClient',
        'gCderegClient',
        'lDMregister',
        'sAMrxNot',
        'cTXrxNot',
        'iICrequestRX',
        'iICresponseRX',
        'iTS-S-Appl-ReqFinal',
        'testMFecho',
        'MFSAP-RC',
        'MF-ReqConfirm',
        'simFUTreqConf',
        'simFLTreqConf',
        'iTS-S-Appl-RegConf',
        'gCregServerConf',
        'gCupdateServerConf',
        'gCderegServerConf',
        'gCregClientConf',
        'gCupdateClientConf',
        'gCderegClientConf',
        'lDMregisterConf',
        'sAMrxNotConf',
        'cTXrxNotConf',
        'iICrequestRXConf',
        'iICresponseRXConf',
        'iTS-S-Appl-ReqFinalConf',
        'testMFechoConf',
        'MNSAP-CR',
        'MN-Command',
        'simNUTcmd',
        'simNLTcmd',
        'fWTset',
        'fWTupdate',
        'fWTdelete',
        'testMN',
        'FWT',
        'NTprotsSet',
        'NTprotsUpdate',
        'NTprotsDelete',
        'fntpset',
        'fntpupdate',
        'fntpdelete',
        'MNSAP-CC',
        'MN-CmdConfirm',
        'simNUTcmdConf',
        'simNLTcmdConf',
        'fWTsetConf',
        'fWTupdateConf',
        'fWTdeletConf',
        'testMNConf',
        'FWTCONF',
        'NTprotsSetConf',
        'NTprotsUpdateConf',
        'NTprotsDeleteConf',
        'fntpsetConf',
        'fntpupdateConf',
        'fntpdeleteConf',
        'MNSAP-RR',
        'MN-Request',
        'simNUTreq',
        'simNLTreq',
        'fWTsetNot',
        'fWTupdateNot',
        'fWTdeletNot',
        'vCIcreatePeerMAC',
        'its-ssiPeerNot',
        'testMNecho',
        'FWTNOT',
        'NTprotsSetNot',
        'NTprotsUpdateNot',
        'NTprotsDeleteNot',
        'fntpsetNot',
        'fntpupdateNot',
        'fntpdeleteNot',
        'MNSAP-RC',
        'MN-ReqConfirm',
        'simNUTreqConf',
        'simNLTreqConf',
        'fWTsetNotConf',
        'fWTupdateNotConf',
        'fWTdeletNotConf',
        'vCIcreatePeerMACConf',
        'its-ssiPeerNotConf',
        'testMNechoConf',
        'MISAP-CR',
        'MI-Command',
        'simIUTcmd',
        'regCmd',
        'cIstate',
        'wakeUp',
        'rTScmd',
        'rTSackCmd',
        'cONcmd',
        'rIcmd',
        'manuCmd',
        'vciCmd',
        'monitor',
        'unitDataCmd',
        'testMI',
        'unknownCmd',
        'MISAP-RR',
        'MI-Request',
        'simIUTreq',
        'regReq',
        'prioReg',
        'rTSreq',
        'rTSackReq',
        'rIreq',
        'manuReq',
        'events',
        'posUpdateReq',
        'unitDataReq',
        'testMIecho',
        'EVENT21218',
        'Events-21218',
        'minUserPrio',
        'txQueueThreshold',
        'txQueueFull',
        'vciCreated',
        'vciDeleted',
        'paramMonitor',
        'txQueueLow',
        'vciReset',
        'MSSAP-CR',
        'MS-Command',
        'testMS',
        'MSSAP-CC',
        'MS-CmdConfirm',
        'testMSConf',
        'MSSAP-RR',
        'MS-Request',
        'iTS-S-Appl-ProcS-Reg',
        'iTS-S-Appl-ProcS-ReqFinal',
        'testMSecho',
        'MSSAP-RC',
        'MS-ReqConfirm',
        'iTS-S-Appl-ProcS-RegConf',
        'iTS-S-Appl-ProcS-ReqFinalConf',
        'testMSechoConf',
        'MASAP-CR',
        'MA-Command',
        'testMA',
        'MASAP-CC',
        'testMAConf',
        'MA-CmdConfirm',
        'MASAP-RR',
        'MA-Request',
        'iTS-S-Appl-Proc-Reg',
        'iTS-S-Appl-Proc-ReqFinal',
        'testMAecho',
        'MASAP-RC',
        'MA-ReqConfirm',
        'iTS-S-Appl-Proc-RegConf',
        'iTS-S-Appl-Proc-ReqFinalConf',
        'testMAechoConf',
        ]
    _param_ = [
        ]
    
    #-----< COMMUPDOWN >-----#
    COMMUPDOWN = CLASS(name='COMMUPDOWN', mode=MODE_TYPE)
    _COMMUPDOWN_primitiveRef = INT(name='primitiveRef', mode=MODE_VALUE)
    _COMMUPDOWN_primitiveRef._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _COMMUPDOWN_Primitive = OPEN(name='Primitive', mode=MODE_TYPE)
    COMMUPDOWN._cont = ASN1Dict([
        ('primitiveRef', _COMMUPDOWN_primitiveRef),
        ('Primitive', _COMMUPDOWN_Primitive),
        ])
    
    #-----< FASAPDOWN >-----#
    FASAPDOWN = CLASS(name='FASAPDOWN', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'COMMUPDOWN')))
    
    #-----< FAsapPrimitivesDown >-----#
    FAsapPrimitivesDown = SEQ(name='FAsapPrimitivesDown', mode=MODE_TYPE)
    _FAsapPrimitivesDown_spRef = INT(name='spRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'FASAPDOWN'), ['primitiveRef']))
    __FAsapPrimitivesDown_spRef_tab = CLASS(name='_tab_FASAPDOWN', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'FASAPDOWN')))
    ___FAsapPrimitivesDown_spRef_tab_val_Primitive_0 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCsamctxConf')))
    ___FAsapPrimitivesDown_spRef_tab_val_Primitive_1 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregServer')))
    ___FAsapPrimitivesDown_spRef_tab_val_Primitive_2 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateServer')))
    ___FAsapPrimitivesDown_spRef_tab_val_Primitive_3 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegServer')))
    ___FAsapPrimitivesDown_spRef_tab_val_Primitive_4 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregClient')))
    ___FAsapPrimitivesDown_spRef_tab_val_Primitive_5 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateClient')))
    ___FAsapPrimitivesDown_spRef_tab_val_Primitive_6 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegClient')))
    __FAsapPrimitivesDown_spRef_tab._val = ASN1Set(rv=[dict([('primitiveRef', 2), ('Primitive', ___FAsapPrimitivesDown_spRef_tab_val_Primitive_0)]), dict([('primitiveRef', 3), ('Primitive', ___FAsapPrimitivesDown_spRef_tab_val_Primitive_1)]), dict([('primitiveRef', 4), ('Primitive', ___FAsapPrimitivesDown_spRef_tab_val_Primitive_2)]), dict([('primitiveRef', 5), ('Primitive', ___FAsapPrimitivesDown_spRef_tab_val_Primitive_3)]), dict([('primitiveRef', 6), ('Primitive', ___FAsapPrimitivesDown_spRef_tab_val_Primitive_4)]), dict([('primitiveRef', 7), ('Primitive', ___FAsapPrimitivesDown_spRef_tab_val_Primitive_5)]), dict([('primitiveRef', 8), ('Primitive', ___FAsapPrimitivesDown_spRef_tab_val_Primitive_6)])], rr=[], ev=None, er=[])
    _FAsapPrimitivesDown_spRef._const_tab = __FAsapPrimitivesDown_spRef_tab
    _FAsapPrimitivesDown_spRef._const_tab_at = None
    _FAsapPrimitivesDown_spRef._const_tab_id = 'primitiveRef'
    _FAsapPrimitivesDown_servPrimitive = OPEN(name='servPrimitive', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'FASAPDOWN'), ['Primitive']))
    _FAsapPrimitivesDown_servPrimitive._const_tab = __FAsapPrimitivesDown_spRef_tab
    _FAsapPrimitivesDown_servPrimitive._const_tab_at = ('..', 'spRef')
    _FAsapPrimitivesDown_servPrimitive._const_tab_id = 'Primitive'
    FAsapPrimitivesDown._cont = ASN1Dict([
        ('spRef', _FAsapPrimitivesDown_spRef),
        ('servPrimitive', _FAsapPrimitivesDown_servPrimitive),
        ])
    FAsapPrimitivesDown._ext = None
    
    #-----< FAsapspsdown >-----#
    FAsapspsdown = CLASS(name='FAsapspsdown', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'FASAPDOWN')))
    _FAsapspsdown_val_Primitive_0 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCsamctxConf')))
    _FAsapspsdown_val_Primitive_1 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregServer')))
    _FAsapspsdown_val_Primitive_2 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateServer')))
    _FAsapspsdown_val_Primitive_3 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegServer')))
    _FAsapspsdown_val_Primitive_4 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregClient')))
    _FAsapspsdown_val_Primitive_5 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateClient')))
    _FAsapspsdown_val_Primitive_6 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegClient')))
    FAsapspsdown._val = ASN1Set(rv=[dict([('primitiveRef', 2), ('Primitive', _FAsapspsdown_val_Primitive_0)]), dict([('primitiveRef', 3), ('Primitive', _FAsapspsdown_val_Primitive_1)]), dict([('primitiveRef', 4), ('Primitive', _FAsapspsdown_val_Primitive_2)]), dict([('primitiveRef', 5), ('Primitive', _FAsapspsdown_val_Primitive_3)]), dict([('primitiveRef', 6), ('Primitive', _FAsapspsdown_val_Primitive_4)]), dict([('primitiveRef', 7), ('Primitive', _FAsapspsdown_val_Primitive_5)]), dict([('primitiveRef', 8), ('Primitive', _FAsapspsdown_val_Primitive_6)])], rr=[], ev=[], er=[])
    
    #-----< gCsamctxConfFA >-----#
    gCsamctxConfFA = CLASS(name='gCsamctxConfFA', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FASAPDOWN')))
    _gCsamctxConfFA_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCsamctxConf')))
    gCsamctxConfFA._val = dict([('primitiveRef', 2), ('Primitive', _gCsamctxConfFA_val_Primitive)])
    
    #-----< gCregServerFA >-----#
    gCregServerFA = CLASS(name='gCregServerFA', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FASAPDOWN')))
    _gCregServerFA_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregServer')))
    gCregServerFA._val = dict([('primitiveRef', 3), ('Primitive', _gCregServerFA_val_Primitive)])
    
    #-----< gCupdateServerFA >-----#
    gCupdateServerFA = CLASS(name='gCupdateServerFA', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FASAPDOWN')))
    _gCupdateServerFA_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateServer')))
    gCupdateServerFA._val = dict([('primitiveRef', 4), ('Primitive', _gCupdateServerFA_val_Primitive)])
    
    #-----< gCderegServerFA >-----#
    gCderegServerFA = CLASS(name='gCderegServerFA', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FASAPDOWN')))
    _gCderegServerFA_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegServer')))
    gCderegServerFA._val = dict([('primitiveRef', 5), ('Primitive', _gCderegServerFA_val_Primitive)])
    
    #-----< gCregClientFA >-----#
    gCregClientFA = CLASS(name='gCregClientFA', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FASAPDOWN')))
    _gCregClientFA_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregClient')))
    gCregClientFA._val = dict([('primitiveRef', 6), ('Primitive', _gCregClientFA_val_Primitive)])
    
    #-----< gCupdateClientFA >-----#
    gCupdateClientFA = CLASS(name='gCupdateClientFA', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FASAPDOWN')))
    _gCupdateClientFA_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateClient')))
    gCupdateClientFA._val = dict([('primitiveRef', 7), ('Primitive', _gCupdateClientFA_val_Primitive)])
    
    #-----< gCderegClientFA >-----#
    gCderegClientFA = CLASS(name='gCderegClientFA', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FASAPDOWN')))
    _gCderegClientFA_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegClient')))
    gCderegClientFA._val = dict([('primitiveRef', 8), ('Primitive', _gCderegClientFA_val_Primitive)])
    
    #-----< FASAPUP >-----#
    FASAPUP = CLASS(name='FASAPUP', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'COMMUPDOWN')))
    
    #-----< FAsapPrimitivesUp >-----#
    FAsapPrimitivesUp = SEQ(name='FAsapPrimitivesUp', mode=MODE_TYPE)
    _FAsapPrimitivesUp_spRef = INT(name='spRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'FASAPUP'), ['primitiveRef']))
    __FAsapPrimitivesUp_spRef_tab = CLASS(name='_tab_FASAPUP', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'FASAPUP')))
    ___FAsapPrimitivesUp_spRef_tab_val_Primitive_0 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCsamctx')))
    ___FAsapPrimitivesUp_spRef_tab_val_Primitive_1 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregServerConf')))
    ___FAsapPrimitivesUp_spRef_tab_val_Primitive_2 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateServerConf')))
    ___FAsapPrimitivesUp_spRef_tab_val_Primitive_3 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegServerConf')))
    ___FAsapPrimitivesUp_spRef_tab_val_Primitive_4 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregClientConf')))
    ___FAsapPrimitivesUp_spRef_tab_val_Primitive_5 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateClientConf')))
    ___FAsapPrimitivesUp_spRef_tab_val_Primitive_6 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegClientConf')))
    ___FAsapPrimitivesUp_spRef_tab_val_Primitive_7 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCsam')))
    ___FAsapPrimitivesUp_spRef_tab_val_Primitive_8 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCctx')))
    __FAsapPrimitivesUp_spRef_tab._val = ASN1Set(rv=[dict([('primitiveRef', 2), ('Primitive', ___FAsapPrimitivesUp_spRef_tab_val_Primitive_0)]), dict([('primitiveRef', 3), ('Primitive', ___FAsapPrimitivesUp_spRef_tab_val_Primitive_1)]), dict([('primitiveRef', 4), ('Primitive', ___FAsapPrimitivesUp_spRef_tab_val_Primitive_2)]), dict([('primitiveRef', 5), ('Primitive', ___FAsapPrimitivesUp_spRef_tab_val_Primitive_3)]), dict([('primitiveRef', 6), ('Primitive', ___FAsapPrimitivesUp_spRef_tab_val_Primitive_4)]), dict([('primitiveRef', 7), ('Primitive', ___FAsapPrimitivesUp_spRef_tab_val_Primitive_5)]), dict([('primitiveRef', 8), ('Primitive', ___FAsapPrimitivesUp_spRef_tab_val_Primitive_6)]), dict([('primitiveRef', 9), ('Primitive', ___FAsapPrimitivesUp_spRef_tab_val_Primitive_7)]), dict([('primitiveRef', 10), ('Primitive', ___FAsapPrimitivesUp_spRef_tab_val_Primitive_8)])], rr=[], ev=None, er=[])
    _FAsapPrimitivesUp_spRef._const_tab = __FAsapPrimitivesUp_spRef_tab
    _FAsapPrimitivesUp_spRef._const_tab_at = None
    _FAsapPrimitivesUp_spRef._const_tab_id = 'primitiveRef'
    _FAsapPrimitivesUp_servPrimitive = OPEN(name='servPrimitive', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'FASAPUP'), ['Primitive']))
    _FAsapPrimitivesUp_servPrimitive._const_tab = __FAsapPrimitivesUp_spRef_tab
    _FAsapPrimitivesUp_servPrimitive._const_tab_at = ('..', 'spRef')
    _FAsapPrimitivesUp_servPrimitive._const_tab_id = 'Primitive'
    FAsapPrimitivesUp._cont = ASN1Dict([
        ('spRef', _FAsapPrimitivesUp_spRef),
        ('servPrimitive', _FAsapPrimitivesUp_servPrimitive),
        ])
    FAsapPrimitivesUp._ext = None
    
    #-----< FAsapspsup >-----#
    FAsapspsup = CLASS(name='FAsapspsup', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'FASAPUP')))
    _FAsapspsup_val_Primitive_0 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCsamctx')))
    _FAsapspsup_val_Primitive_1 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregServerConf')))
    _FAsapspsup_val_Primitive_2 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateServerConf')))
    _FAsapspsup_val_Primitive_3 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegServerConf')))
    _FAsapspsup_val_Primitive_4 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregClientConf')))
    _FAsapspsup_val_Primitive_5 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateClientConf')))
    _FAsapspsup_val_Primitive_6 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegClientConf')))
    _FAsapspsup_val_Primitive_7 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCsam')))
    _FAsapspsup_val_Primitive_8 = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCctx')))
    FAsapspsup._val = ASN1Set(rv=[dict([('primitiveRef', 2), ('Primitive', _FAsapspsup_val_Primitive_0)]), dict([('primitiveRef', 3), ('Primitive', _FAsapspsup_val_Primitive_1)]), dict([('primitiveRef', 4), ('Primitive', _FAsapspsup_val_Primitive_2)]), dict([('primitiveRef', 5), ('Primitive', _FAsapspsup_val_Primitive_3)]), dict([('primitiveRef', 6), ('Primitive', _FAsapspsup_val_Primitive_4)]), dict([('primitiveRef', 7), ('Primitive', _FAsapspsup_val_Primitive_5)]), dict([('primitiveRef', 8), ('Primitive', _FAsapspsup_val_Primitive_6)]), dict([('primitiveRef', 9), ('Primitive', _FAsapspsup_val_Primitive_7)]), dict([('primitiveRef', 10), ('Primitive', _FAsapspsup_val_Primitive_8)])], rr=[], ev=[], er=[])
    
    #-----< gCsamctxFA >-----#
    gCsamctxFA = CLASS(name='gCsamctxFA', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FASAPUP')))
    _gCsamctxFA_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCsamctx')))
    gCsamctxFA._val = dict([('primitiveRef', 2), ('Primitive', _gCsamctxFA_val_Primitive)])
    
    #-----< gCregServerConfFA >-----#
    gCregServerConfFA = CLASS(name='gCregServerConfFA', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FASAPUP')))
    _gCregServerConfFA_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregServerConf')))
    gCregServerConfFA._val = dict([('primitiveRef', 3), ('Primitive', _gCregServerConfFA_val_Primitive)])
    
    #-----< gCupdateServerConfFA >-----#
    gCupdateServerConfFA = CLASS(name='gCupdateServerConfFA', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FASAPUP')))
    _gCupdateServerConfFA_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateServerConf')))
    gCupdateServerConfFA._val = dict([('primitiveRef', 4), ('Primitive', _gCupdateServerConfFA_val_Primitive)])
    
    #-----< gCderegServerConfFA >-----#
    gCderegServerConfFA = CLASS(name='gCderegServerConfFA', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FASAPUP')))
    _gCderegServerConfFA_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegServerConf')))
    gCderegServerConfFA._val = dict([('primitiveRef', 5), ('Primitive', _gCderegServerConfFA_val_Primitive)])
    
    #-----< gCregClientConfFA >-----#
    gCregClientConfFA = CLASS(name='gCregClientConfFA', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FASAPUP')))
    _gCregClientConfFA_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregClientConf')))
    gCregClientConfFA._val = dict([('primitiveRef', 6), ('Primitive', _gCregClientConfFA_val_Primitive)])
    
    #-----< gCupdateClientConfFA >-----#
    gCupdateClientConfFA = CLASS(name='gCupdateClientConfFA', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FASAPUP')))
    _gCupdateClientConfFA_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateClientConf')))
    gCupdateClientConfFA._val = dict([('primitiveRef', 7), ('Primitive', _gCupdateClientConfFA_val_Primitive)])
    
    #-----< gCderegClientConfFA >-----#
    gCderegClientConfFA = CLASS(name='gCderegClientConfFA', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FASAPUP')))
    _gCderegClientConfFA_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegClientConf')))
    gCderegClientConfFA._val = dict([('primitiveRef', 8), ('Primitive', _gCderegClientConfFA_val_Primitive)])
    
    #-----< gCsamFA >-----#
    gCsamFA = CLASS(name='gCsamFA', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FASAPUP')))
    _gCsamFA_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCsam')))
    gCsamFA._val = dict([('primitiveRef', 9), ('Primitive', _gCsamFA_val_Primitive)])
    
    #-----< gCctxFA >-----#
    gCctxFA = CLASS(name='gCctxFA', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FASAPUP')))
    _gCctxFA_val_Primitive = SEQ(name='Primitive', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCctx')))
    gCctxFA._val = dict([('primitiveRef', 10), ('Primitive', _gCctxFA_val_Primitive)])
    
    #-----< MXSERV >-----#
    MXSERV = CLASS(name='MXSERV', mode=MODE_TYPE)
    _MXSERV_mxref = INT(name='mxref', mode=MODE_VALUE)
    _MXSERV_mxref._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _MXSERV_MXParam = OPEN(name='MXParam', mode=MODE_TYPE)
    MXSERV._cont = ASN1Dict([
        ('mxref', _MXSERV_mxref),
        ('MXParam', _MXSERV_MXParam),
        ])
    
    #-----< MFSAP-CR >-----#
    MFSAP_CR = CLASS(name='MFSAP-CR', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MXSERV')))
    
    #-----< MF-Command >-----#
    MF_Command = CLASS(name='MF-Command', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CR')))
    _MF_Command_val_MXParam_0 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFUTcmd')))
    _MF_Command_val_MXParam_1 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFLTcmd')))
    _MF_Command_val_MXParam_2 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCsamctx')))
    _MF_Command_val_MXParam_3 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCsam')))
    _MF_Command_val_MXParam_4 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCctx')))
    _MF_Command_val_MXParam_5 = SEQ_OF(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'LDMnotify')))
    _MF_Command_val_MXParam_6 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'LegacyCIreq')))
    _MF_Command_val_MXParam_7 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'StateCInotify')))
    _MF_Command_val_MXParam_8 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCperiodCmd')))
    _MF_Command_val_MXParam_9 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCctxTxCmd')))
    _MF_Command_val_MXParam_10 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCdeleteCmd')))
    _MF_Command_val_MXParam_11 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'IICrequestTX')))
    _MF_Command_val_MXParam_12 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'IICresponseTX')))
    _MF_Command_val_MXParam_13 = OCT_STR(name='MXParam', mode=MODE_TYPE)
    _MF_Command_val_MXParam_13._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    MF_Command._val = ASN1Set(rv=[dict([('mxref', 0), ('MXParam', _MF_Command_val_MXParam_0)]), dict([('mxref', 1), ('MXParam', _MF_Command_val_MXParam_1)]), dict([('mxref', 2), ('MXParam', _MF_Command_val_MXParam_2)]), dict([('mxref', 3), ('MXParam', _MF_Command_val_MXParam_3)]), dict([('mxref', 4), ('MXParam', _MF_Command_val_MXParam_4)]), dict([('mxref', 5), ('MXParam', _MF_Command_val_MXParam_5)]), dict([('mxref', 6), ('MXParam', _MF_Command_val_MXParam_6)]), dict([('mxref', 7), ('MXParam', _MF_Command_val_MXParam_7)]), dict([('mxref', 8), ('MXParam', _MF_Command_val_MXParam_8)]), dict([('mxref', 9), ('MXParam', _MF_Command_val_MXParam_9)]), dict([('mxref', 10), ('MXParam', _MF_Command_val_MXParam_10)]), dict([('mxref', 11), ('MXParam', _MF_Command_val_MXParam_11)]), dict([('mxref', 12), ('MXParam', _MF_Command_val_MXParam_12)]), dict([('mxref', 255), ('MXParam', _MF_Command_val_MXParam_13)])], rr=[], ev=[], er=[])
    
    #-----< MF-Command-request >-----#
    MF_Command_request = SEQ(name='MF-Command-request', mode=MODE_TYPE)
    _MF_Command_request_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MF_Command_request_ref = INT(name='ref', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MFSAP-CR'), ['mxref']))
    __MF_Command_request_ref_tab = CLASS(name='_tab_MFSAP-CR', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CR')))
    ___MF_Command_request_ref_tab_val_MXParam_0 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFUTcmd')))
    ___MF_Command_request_ref_tab_val_MXParam_1 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFLTcmd')))
    ___MF_Command_request_ref_tab_val_MXParam_2 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCsamctx')))
    ___MF_Command_request_ref_tab_val_MXParam_3 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCsam')))
    ___MF_Command_request_ref_tab_val_MXParam_4 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCctx')))
    ___MF_Command_request_ref_tab_val_MXParam_5 = SEQ_OF(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'LDMnotify')))
    ___MF_Command_request_ref_tab_val_MXParam_6 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'LegacyCIreq')))
    ___MF_Command_request_ref_tab_val_MXParam_7 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'StateCInotify')))
    ___MF_Command_request_ref_tab_val_MXParam_8 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCperiodCmd')))
    ___MF_Command_request_ref_tab_val_MXParam_9 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCctxTxCmd')))
    ___MF_Command_request_ref_tab_val_MXParam_10 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCdeleteCmd')))
    ___MF_Command_request_ref_tab_val_MXParam_11 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'IICrequestTX')))
    ___MF_Command_request_ref_tab_val_MXParam_12 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'IICresponseTX')))
    ___MF_Command_request_ref_tab_val_MXParam_13 = OCT_STR(name='MXParam', mode=MODE_TYPE)
    ___MF_Command_request_ref_tab_val_MXParam_13._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    __MF_Command_request_ref_tab._val = ASN1Set(rv=[dict([('mxref', 0), ('MXParam', ___MF_Command_request_ref_tab_val_MXParam_0)]), dict([('mxref', 1), ('MXParam', ___MF_Command_request_ref_tab_val_MXParam_1)]), dict([('mxref', 2), ('MXParam', ___MF_Command_request_ref_tab_val_MXParam_2)]), dict([('mxref', 3), ('MXParam', ___MF_Command_request_ref_tab_val_MXParam_3)]), dict([('mxref', 4), ('MXParam', ___MF_Command_request_ref_tab_val_MXParam_4)]), dict([('mxref', 5), ('MXParam', ___MF_Command_request_ref_tab_val_MXParam_5)]), dict([('mxref', 6), ('MXParam', ___MF_Command_request_ref_tab_val_MXParam_6)]), dict([('mxref', 7), ('MXParam', ___MF_Command_request_ref_tab_val_MXParam_7)]), dict([('mxref', 8), ('MXParam', ___MF_Command_request_ref_tab_val_MXParam_8)]), dict([('mxref', 9), ('MXParam', ___MF_Command_request_ref_tab_val_MXParam_9)]), dict([('mxref', 10), ('MXParam', ___MF_Command_request_ref_tab_val_MXParam_10)]), dict([('mxref', 11), ('MXParam', ___MF_Command_request_ref_tab_val_MXParam_11)]), dict([('mxref', 12), ('MXParam', ___MF_Command_request_ref_tab_val_MXParam_12)]), dict([('mxref', 255), ('MXParam', ___MF_Command_request_ref_tab_val_MXParam_13)])], rr=[], ev=None, er=[])
    _MF_Command_request_ref._const_tab = __MF_Command_request_ref_tab
    _MF_Command_request_ref._const_tab_at = None
    _MF_Command_request_ref._const_tab_id = 'mxref'
    _MF_Command_request_command_param = OPEN(name='command-param', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MFSAP-CR'), ['MXParam']))
    _MF_Command_request_command_param._const_tab = __MF_Command_request_ref_tab
    _MF_Command_request_command_param._const_tab_at = ('..', 'ref')
    _MF_Command_request_command_param._const_tab_id = 'MXParam'
    MF_Command_request._cont = ASN1Dict([
        ('commandRef', _MF_Command_request_commandRef),
        ('ref', _MF_Command_request_ref),
        ('command-param', _MF_Command_request_command_param),
        ])
    MF_Command_request._ext = None
    
    #-----< simFUTcmd >-----#
    simFUTcmd = CLASS(name='simFUTcmd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CR')))
    _simFUTcmd_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFUTcmd')))
    simFUTcmd._val = dict([('mxref', 0), ('MXParam', _simFUTcmd_val_MXParam)])
    
    #-----< simFLTcmd >-----#
    simFLTcmd = CLASS(name='simFLTcmd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CR')))
    _simFLTcmd_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFLTcmd')))
    simFLTcmd._val = dict([('mxref', 1), ('MXParam', _simFLTcmd_val_MXParam)])
    
    #-----< gCsamctx >-----#
    gCsamctx = CLASS(name='gCsamctx', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CR')))
    _gCsamctx_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCsamctx')))
    gCsamctx._val = dict([('mxref', 2), ('MXParam', _gCsamctx_val_MXParam)])
    
    #-----< gCsam >-----#
    gCsam = CLASS(name='gCsam', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CR')))
    _gCsam_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCsam')))
    gCsam._val = dict([('mxref', 3), ('MXParam', _gCsam_val_MXParam)])
    
    #-----< gCctx >-----#
    gCctx = CLASS(name='gCctx', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CR')))
    _gCctx_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCctx')))
    gCctx._val = dict([('mxref', 4), ('MXParam', _gCctx_val_MXParam)])
    
    #-----< lDMnotifyCmd >-----#
    lDMnotifyCmd = CLASS(name='lDMnotifyCmd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CR')))
    _lDMnotifyCmd_val_MXParam = SEQ_OF(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'LDMnotify')))
    lDMnotifyCmd._val = dict([('mxref', 5), ('MXParam', _lDMnotifyCmd_val_MXParam)])
    
    #-----< legacyCICmd >-----#
    legacyCICmd = CLASS(name='legacyCICmd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CR')))
    _legacyCICmd_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'LegacyCIreq')))
    legacyCICmd._val = dict([('mxref', 6), ('MXParam', _legacyCICmd_val_MXParam)])
    
    #-----< stateCInotify >-----#
    stateCInotify = CLASS(name='stateCInotify', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CR')))
    _stateCInotify_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'StateCInotify')))
    stateCInotify._val = dict([('mxref', 7), ('MXParam', _stateCInotify_val_MXParam)])
    
    #-----< gCperiodCmd >-----#
    gCperiodCmd = CLASS(name='gCperiodCmd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CR')))
    _gCperiodCmd_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCperiodCmd')))
    gCperiodCmd._val = dict([('mxref', 8), ('MXParam', _gCperiodCmd_val_MXParam)])
    
    #-----< gCctxTxCmd >-----#
    gCctxTxCmd = CLASS(name='gCctxTxCmd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CR')))
    _gCctxTxCmd_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCctxTxCmd')))
    gCctxTxCmd._val = dict([('mxref', 9), ('MXParam', _gCctxTxCmd_val_MXParam)])
    
    #-----< gCdeleteCmd >-----#
    gCdeleteCmd = CLASS(name='gCdeleteCmd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CR')))
    _gCdeleteCmd_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCdeleteCmd')))
    gCdeleteCmd._val = dict([('mxref', 10), ('MXParam', _gCdeleteCmd_val_MXParam)])
    
    #-----< iICrequestTX >-----#
    iICrequestTX = CLASS(name='iICrequestTX', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CR')))
    _iICrequestTX_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'IICrequestTX')))
    iICrequestTX._val = dict([('mxref', 11), ('MXParam', _iICrequestTX_val_MXParam)])
    
    #-----< iICresponseTX >-----#
    iICresponseTX = CLASS(name='iICresponseTX', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CR')))
    _iICresponseTX_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'IICresponseTX')))
    iICresponseTX._val = dict([('mxref', 12), ('MXParam', _iICresponseTX_val_MXParam)])
    
    #-----< testMF >-----#
    testMF = CLASS(name='testMF', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CR')))
    _testMF_val_MXParam = OCT_STR(name='MXParam', mode=MODE_TYPE)
    _testMF_val_MXParam._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    testMF._val = dict([('mxref', 255), ('MXParam', _testMF_val_MXParam)])
    
    #-----< SimFUTcmd >-----#
    SimFUTcmd = SEQ(name='SimFUTcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FAsapPrimitivesDown')))
    
    #-----< SimFLTcmd >-----#
    SimFLTcmd = SEQ(name='SimFLTcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'NFsapPrimitivesUp')))
    
    #-----< LDMnotify >-----#
    LDMnotify = SEQ_OF(name='LDMnotify', mode=MODE_TYPE)
    _LDMnotify__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RadarView')))
    LDMnotify._cont = _LDMnotify__item_
    LDMnotify._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< RadarView >-----#
    RadarView = SEQ(name='RadarView', mode=MODE_TYPE)
    _RadarView_peerITS_SSI = SEQ(name='peerITS-SSI', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ITS-SSI')))
    RadarView._cont = ASN1Dict([
        ('peerITS-SSI', _RadarView_peerITS_SSI),
        ])
    RadarView._ext = None
    
    #-----< LegacyCIreq >-----#
    LegacyCIreq = SEQ(name='LegacyCIreq', mode=MODE_TYPE)
    _LegacyCIreq_cIclass = INT(name='cIclass', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'CIclass')))
    _LegacyCIreq_legacyOption = INT(name='legacyOption', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LegacyCIreq_legacyOption._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _LegacyCIreq_linkId = SEQ(name='linkId', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    LegacyCIreq._cont = ASN1Dict([
        ('cIclass', _LegacyCIreq_cIclass),
        ('legacyOption', _LegacyCIreq_legacyOption),
        ('linkId', _LegacyCIreq_linkId),
        ])
    LegacyCIreq._ext = None
    
    #-----< StateCInotify >-----#
    StateCInotify = SEQ(name='StateCInotify', mode=MODE_TYPE)
    _StateCInotify_linkId = SEQ(name='linkId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _StateCInotify_cIstatus = INT(name='cIstatus', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'CIstatus')))
    StateCInotify._cont = ASN1Dict([
        ('linkId', _StateCInotify_linkId),
        ('cIstatus', _StateCInotify_cIstatus),
        ])
    StateCInotify._ext = None
    
    #-----< MFSAP-CC >-----#
    MFSAP_CC = CLASS(name='MFSAP-CC', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MXSERV')))
    
    #-----< MF-CmdConfirm >-----#
    MF_CmdConfirm = CLASS(name='MF-CmdConfirm', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CC')))
    _MF_CmdConfirm_val_MXParam_0 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    _MF_CmdConfirm_val_MXParam_1 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    _MF_CmdConfirm_val_MXParam_2 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCsamctxConf')))
    _MF_CmdConfirm_val_MXParam_3 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    _MF_CmdConfirm_val_MXParam_4 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    _MF_CmdConfirm_val_MXParam_5 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    _MF_CmdConfirm_val_MXParam_6 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'HostServiceInfo')))
    _MF_CmdConfirm_val_MXParam_7 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    _MF_CmdConfirm_val_MXParam_8 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    _MF_CmdConfirm_val_MXParam_9 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    _MF_CmdConfirm_val_MXParam_10 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    _MF_CmdConfirm_val_MXParam_11 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    _MF_CmdConfirm_val_MXParam_12 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    _MF_CmdConfirm_val_MXParam_13 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    MF_CmdConfirm._val = ASN1Set(rv=[dict([('mxref', 0), ('MXParam', _MF_CmdConfirm_val_MXParam_0)]), dict([('mxref', 1), ('MXParam', _MF_CmdConfirm_val_MXParam_1)]), dict([('mxref', 2), ('MXParam', _MF_CmdConfirm_val_MXParam_2)]), dict([('mxref', 3), ('MXParam', _MF_CmdConfirm_val_MXParam_3)]), dict([('mxref', 4), ('MXParam', _MF_CmdConfirm_val_MXParam_4)]), dict([('mxref', 5), ('MXParam', _MF_CmdConfirm_val_MXParam_5)]), dict([('mxref', 6), ('MXParam', _MF_CmdConfirm_val_MXParam_6)]), dict([('mxref', 7), ('MXParam', _MF_CmdConfirm_val_MXParam_7)]), dict([('mxref', 8), ('MXParam', _MF_CmdConfirm_val_MXParam_8)]), dict([('mxref', 9), ('MXParam', _MF_CmdConfirm_val_MXParam_9)]), dict([('mxref', 10), ('MXParam', _MF_CmdConfirm_val_MXParam_10)]), dict([('mxref', 11), ('MXParam', _MF_CmdConfirm_val_MXParam_11)]), dict([('mxref', 12), ('MXParam', _MF_CmdConfirm_val_MXParam_12)]), dict([('mxref', 255), ('MXParam', _MF_CmdConfirm_val_MXParam_13)])], rr=[], ev=[], er=[])
    
    #-----< MF-Command-confirm >-----#
    MF_Command_confirm = SEQ(name='MF-Command-confirm', mode=MODE_TYPE)
    _MF_Command_confirm_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MF_Command_confirm_ref = INT(name='ref', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MFSAP-CC'), ['mxref']))
    __MF_Command_confirm_ref_tab = CLASS(name='_tab_MFSAP-CC', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CC')))
    ___MF_Command_confirm_ref_tab_val_MXParam_0 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    ___MF_Command_confirm_ref_tab_val_MXParam_1 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    ___MF_Command_confirm_ref_tab_val_MXParam_2 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCsamctxConf')))
    ___MF_Command_confirm_ref_tab_val_MXParam_3 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    ___MF_Command_confirm_ref_tab_val_MXParam_4 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    ___MF_Command_confirm_ref_tab_val_MXParam_5 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    ___MF_Command_confirm_ref_tab_val_MXParam_6 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'HostServiceInfo')))
    ___MF_Command_confirm_ref_tab_val_MXParam_7 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    ___MF_Command_confirm_ref_tab_val_MXParam_8 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    ___MF_Command_confirm_ref_tab_val_MXParam_9 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    ___MF_Command_confirm_ref_tab_val_MXParam_10 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    ___MF_Command_confirm_ref_tab_val_MXParam_11 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    ___MF_Command_confirm_ref_tab_val_MXParam_12 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    ___MF_Command_confirm_ref_tab_val_MXParam_13 = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    __MF_Command_confirm_ref_tab._val = ASN1Set(rv=[dict([('mxref', 0), ('MXParam', ___MF_Command_confirm_ref_tab_val_MXParam_0)]), dict([('mxref', 1), ('MXParam', ___MF_Command_confirm_ref_tab_val_MXParam_1)]), dict([('mxref', 2), ('MXParam', ___MF_Command_confirm_ref_tab_val_MXParam_2)]), dict([('mxref', 3), ('MXParam', ___MF_Command_confirm_ref_tab_val_MXParam_3)]), dict([('mxref', 4), ('MXParam', ___MF_Command_confirm_ref_tab_val_MXParam_4)]), dict([('mxref', 5), ('MXParam', ___MF_Command_confirm_ref_tab_val_MXParam_5)]), dict([('mxref', 6), ('MXParam', ___MF_Command_confirm_ref_tab_val_MXParam_6)]), dict([('mxref', 7), ('MXParam', ___MF_Command_confirm_ref_tab_val_MXParam_7)]), dict([('mxref', 8), ('MXParam', ___MF_Command_confirm_ref_tab_val_MXParam_8)]), dict([('mxref', 9), ('MXParam', ___MF_Command_confirm_ref_tab_val_MXParam_9)]), dict([('mxref', 10), ('MXParam', ___MF_Command_confirm_ref_tab_val_MXParam_10)]), dict([('mxref', 11), ('MXParam', ___MF_Command_confirm_ref_tab_val_MXParam_11)]), dict([('mxref', 12), ('MXParam', ___MF_Command_confirm_ref_tab_val_MXParam_12)]), dict([('mxref', 255), ('MXParam', ___MF_Command_confirm_ref_tab_val_MXParam_13)])], rr=[], ev=None, er=[])
    _MF_Command_confirm_ref._const_tab = __MF_Command_confirm_ref_tab
    _MF_Command_confirm_ref._const_tab_at = None
    _MF_Command_confirm_ref._const_tab_id = 'mxref'
    _MF_Command_confirm_cmdConfirm_param = OPEN(name='cmdConfirm-param', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MFSAP-CC'), ['MXParam']))
    _MF_Command_confirm_cmdConfirm_param._const_tab = __MF_Command_confirm_ref_tab
    _MF_Command_confirm_cmdConfirm_param._const_tab_at = ('..', 'ref')
    _MF_Command_confirm_cmdConfirm_param._const_tab_id = 'MXParam'
    _MF_Command_confirm_errStatus = INT(name='errStatus', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'ErrStatus')))
    MF_Command_confirm._cont = ASN1Dict([
        ('commandRef', _MF_Command_confirm_commandRef),
        ('ref', _MF_Command_confirm_ref),
        ('cmdConfirm-param', _MF_Command_confirm_cmdConfirm_param),
        ('errStatus', _MF_Command_confirm_errStatus),
        ])
    MF_Command_confirm._ext = None
    
    #-----< simFUTcmdConf >-----#
    simFUTcmdConf = CLASS(name='simFUTcmdConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CC')))
    _simFUTcmdConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    simFUTcmdConf._val = dict([('mxref', 0), ('MXParam', _simFUTcmdConf_val_MXParam)])
    
    #-----< simFLTcmdConf >-----#
    simFLTcmdConf = CLASS(name='simFLTcmdConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CC')))
    _simFLTcmdConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    simFLTcmdConf._val = dict([('mxref', 1), ('MXParam', _simFLTcmdConf_val_MXParam)])
    
    #-----< gCsamctxConf >-----#
    gCsamctxConf = CLASS(name='gCsamctxConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CC')))
    _gCsamctxConf_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCsamctxConf')))
    gCsamctxConf._val = dict([('mxref', 2), ('MXParam', _gCsamctxConf_val_MXParam)])
    
    #-----< gCsamConf >-----#
    gCsamConf = CLASS(name='gCsamConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CC')))
    _gCsamConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    gCsamConf._val = dict([('mxref', 3), ('MXParam', _gCsamConf_val_MXParam)])
    
    #-----< gCctxConf >-----#
    gCctxConf = CLASS(name='gCctxConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CC')))
    _gCctxConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    gCctxConf._val = dict([('mxref', 4), ('MXParam', _gCctxConf_val_MXParam)])
    
    #-----< lDMnotifyConf >-----#
    lDMnotifyConf = CLASS(name='lDMnotifyConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CC')))
    _lDMnotifyConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    lDMnotifyConf._val = dict([('mxref', 5), ('MXParam', _lDMnotifyConf_val_MXParam)])
    
    #-----< legacyCIConf >-----#
    legacyCIConf = CLASS(name='legacyCIConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CC')))
    _legacyCIConf_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'HostServiceInfo')))
    legacyCIConf._val = dict([('mxref', 6), ('MXParam', _legacyCIConf_val_MXParam)])
    
    #-----< stateCInotifyConf >-----#
    stateCInotifyConf = CLASS(name='stateCInotifyConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CC')))
    _stateCInotifyConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    stateCInotifyConf._val = dict([('mxref', 7), ('MXParam', _stateCInotifyConf_val_MXParam)])
    
    #-----< gCperiodCmdConf >-----#
    gCperiodCmdConf = CLASS(name='gCperiodCmdConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CC')))
    _gCperiodCmdConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    gCperiodCmdConf._val = dict([('mxref', 8), ('MXParam', _gCperiodCmdConf_val_MXParam)])
    
    #-----< gCctxTxCmdConf >-----#
    gCctxTxCmdConf = CLASS(name='gCctxTxCmdConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CC')))
    _gCctxTxCmdConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    gCctxTxCmdConf._val = dict([('mxref', 9), ('MXParam', _gCctxTxCmdConf_val_MXParam)])
    
    #-----< gCdeleteCmdConf >-----#
    gCdeleteCmdConf = CLASS(name='gCdeleteCmdConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CC')))
    _gCdeleteCmdConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    gCdeleteCmdConf._val = dict([('mxref', 10), ('MXParam', _gCdeleteCmdConf_val_MXParam)])
    
    #-----< iICrequestTXConf >-----#
    iICrequestTXConf = CLASS(name='iICrequestTXConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CC')))
    _iICrequestTXConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    iICrequestTXConf._val = dict([('mxref', 11), ('MXParam', _iICrequestTXConf_val_MXParam)])
    
    #-----< iICresponseTXConf >-----#
    iICresponseTXConf = CLASS(name='iICresponseTXConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CC')))
    _iICresponseTXConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    iICresponseTXConf._val = dict([('mxref', 12), ('MXParam', _iICresponseTXConf_val_MXParam)])
    
    #-----< testMFConf >-----#
    testMFConf = CLASS(name='testMFConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-CC')))
    _testMFConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'NullType')))
    testMFConf._val = dict([('mxref', 255), ('MXParam', _testMFConf_val_MXParam)])
    
    #-----< MFSAP-RR >-----#
    MFSAP_RR = CLASS(name='MFSAP-RR', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MXSERV')))
    
    #-----< MF-Request >-----#
    MF_Request = CLASS(name='MF-Request', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RR')))
    _MF_Request_val_MXParam_0 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFUTreq')))
    _MF_Request_val_MXParam_1 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFLTreq')))
    _MF_Request_val_MXParam_2 = SEQ_OF(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITS-S-Appl-Reg')))
    _MF_Request_val_MXParam_3 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregServer')))
    _MF_Request_val_MXParam_4 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateServer')))
    _MF_Request_val_MXParam_5 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegServer')))
    _MF_Request_val_MXParam_6 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregClient')))
    _MF_Request_val_MXParam_7 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateClient')))
    _MF_Request_val_MXParam_8 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegClient')))
    _MF_Request_val_MXParam_9 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'LDMregister')))
    _MF_Request_val_MXParam_10 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'SAMrxNot')))
    _MF_Request_val_MXParam_11 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'CTXrxNot')))
    _MF_Request_val_MXParam_12 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'IICrequestRX')))
    _MF_Request_val_MXParam_13 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'IICresponseRX')))
    _MF_Request_val_MXParam_14 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITS-S-Appl-RegFinal')))
    _MF_Request_val_MXParam_15 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'TestMFecho')))
    MF_Request._val = ASN1Set(rv=[dict([('mxref', 0), ('MXParam', _MF_Request_val_MXParam_0)]), dict([('mxref', 1), ('MXParam', _MF_Request_val_MXParam_1)]), dict([('mxref', 2), ('MXParam', _MF_Request_val_MXParam_2)]), dict([('mxref', 3), ('MXParam', _MF_Request_val_MXParam_3)]), dict([('mxref', 4), ('MXParam', _MF_Request_val_MXParam_4)]), dict([('mxref', 5), ('MXParam', _MF_Request_val_MXParam_5)]), dict([('mxref', 6), ('MXParam', _MF_Request_val_MXParam_6)]), dict([('mxref', 7), ('MXParam', _MF_Request_val_MXParam_7)]), dict([('mxref', 8), ('MXParam', _MF_Request_val_MXParam_8)]), dict([('mxref', 9), ('MXParam', _MF_Request_val_MXParam_9)]), dict([('mxref', 10), ('MXParam', _MF_Request_val_MXParam_10)]), dict([('mxref', 11), ('MXParam', _MF_Request_val_MXParam_11)]), dict([('mxref', 12), ('MXParam', _MF_Request_val_MXParam_12)]), dict([('mxref', 13), ('MXParam', _MF_Request_val_MXParam_13)]), dict([('mxref', 14), ('MXParam', _MF_Request_val_MXParam_14)]), dict([('mxref', 255), ('MXParam', _MF_Request_val_MXParam_15)])], rr=[], ev=[], er=[])
    
    #-----< MF-Request-request >-----#
    MF_Request_request = SEQ(name='MF-Request-request', mode=MODE_TYPE)
    _MF_Request_request_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MF_Request_request_ref = INT(name='ref', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MFSAP-RR'), ['mxref']))
    __MF_Request_request_ref_tab = CLASS(name='_tab_MFSAP-RR', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RR')))
    ___MF_Request_request_ref_tab_val_MXParam_0 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFUTreq')))
    ___MF_Request_request_ref_tab_val_MXParam_1 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFLTreq')))
    ___MF_Request_request_ref_tab_val_MXParam_2 = SEQ_OF(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITS-S-Appl-Reg')))
    ___MF_Request_request_ref_tab_val_MXParam_3 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregServer')))
    ___MF_Request_request_ref_tab_val_MXParam_4 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateServer')))
    ___MF_Request_request_ref_tab_val_MXParam_5 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegServer')))
    ___MF_Request_request_ref_tab_val_MXParam_6 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregClient')))
    ___MF_Request_request_ref_tab_val_MXParam_7 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateClient')))
    ___MF_Request_request_ref_tab_val_MXParam_8 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegClient')))
    ___MF_Request_request_ref_tab_val_MXParam_9 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'LDMregister')))
    ___MF_Request_request_ref_tab_val_MXParam_10 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'SAMrxNot')))
    ___MF_Request_request_ref_tab_val_MXParam_11 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'CTXrxNot')))
    ___MF_Request_request_ref_tab_val_MXParam_12 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'IICrequestRX')))
    ___MF_Request_request_ref_tab_val_MXParam_13 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'IICresponseRX')))
    ___MF_Request_request_ref_tab_val_MXParam_14 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITS-S-Appl-RegFinal')))
    ___MF_Request_request_ref_tab_val_MXParam_15 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'TestMFecho')))
    __MF_Request_request_ref_tab._val = ASN1Set(rv=[dict([('mxref', 0), ('MXParam', ___MF_Request_request_ref_tab_val_MXParam_0)]), dict([('mxref', 1), ('MXParam', ___MF_Request_request_ref_tab_val_MXParam_1)]), dict([('mxref', 2), ('MXParam', ___MF_Request_request_ref_tab_val_MXParam_2)]), dict([('mxref', 3), ('MXParam', ___MF_Request_request_ref_tab_val_MXParam_3)]), dict([('mxref', 4), ('MXParam', ___MF_Request_request_ref_tab_val_MXParam_4)]), dict([('mxref', 5), ('MXParam', ___MF_Request_request_ref_tab_val_MXParam_5)]), dict([('mxref', 6), ('MXParam', ___MF_Request_request_ref_tab_val_MXParam_6)]), dict([('mxref', 7), ('MXParam', ___MF_Request_request_ref_tab_val_MXParam_7)]), dict([('mxref', 8), ('MXParam', ___MF_Request_request_ref_tab_val_MXParam_8)]), dict([('mxref', 9), ('MXParam', ___MF_Request_request_ref_tab_val_MXParam_9)]), dict([('mxref', 10), ('MXParam', ___MF_Request_request_ref_tab_val_MXParam_10)]), dict([('mxref', 11), ('MXParam', ___MF_Request_request_ref_tab_val_MXParam_11)]), dict([('mxref', 12), ('MXParam', ___MF_Request_request_ref_tab_val_MXParam_12)]), dict([('mxref', 13), ('MXParam', ___MF_Request_request_ref_tab_val_MXParam_13)]), dict([('mxref', 14), ('MXParam', ___MF_Request_request_ref_tab_val_MXParam_14)]), dict([('mxref', 255), ('MXParam', ___MF_Request_request_ref_tab_val_MXParam_15)])], rr=[], ev=None, er=[])
    _MF_Request_request_ref._const_tab = __MF_Request_request_ref_tab
    _MF_Request_request_ref._const_tab_at = None
    _MF_Request_request_ref._const_tab_id = 'mxref'
    _MF_Request_request_request_param = OPEN(name='request-param', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MFSAP-RR'), ['MXParam']))
    _MF_Request_request_request_param._const_tab = __MF_Request_request_ref_tab
    _MF_Request_request_request_param._const_tab_at = ('..', 'ref')
    _MF_Request_request_request_param._const_tab_id = 'MXParam'
    MF_Request_request._cont = ASN1Dict([
        ('commandRef', _MF_Request_request_commandRef),
        ('ref', _MF_Request_request_ref),
        ('request-param', _MF_Request_request_request_param),
        ])
    MF_Request_request._ext = None
    
    #-----< simFUTreq >-----#
    simFUTreq = CLASS(name='simFUTreq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RR')))
    _simFUTreq_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFUTreq')))
    simFUTreq._val = dict([('mxref', 0), ('MXParam', _simFUTreq_val_MXParam)])
    
    #-----< simFLTreq >-----#
    simFLTreq = CLASS(name='simFLTreq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RR')))
    _simFLTreq_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimFLTreq')))
    simFLTreq._val = dict([('mxref', 1), ('MXParam', _simFLTreq_val_MXParam)])
    
    #-----< iTS-S-Appl-Reg >-----#
    iTS_S_Appl_Reg = CLASS(name='iTS-S-Appl-Reg', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RR')))
    _iTS_S_Appl_Reg_val_MXParam = SEQ_OF(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITS-S-Appl-Reg')))
    iTS_S_Appl_Reg._val = dict([('mxref', 2), ('MXParam', _iTS_S_Appl_Reg_val_MXParam)])
    
    #-----< gCregServer >-----#
    gCregServer = CLASS(name='gCregServer', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RR')))
    _gCregServer_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregServer')))
    gCregServer._val = dict([('mxref', 3), ('MXParam', _gCregServer_val_MXParam)])
    
    #-----< gCupdateServer >-----#
    gCupdateServer = CLASS(name='gCupdateServer', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RR')))
    _gCupdateServer_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateServer')))
    gCupdateServer._val = dict([('mxref', 4), ('MXParam', _gCupdateServer_val_MXParam)])
    
    #-----< gCderegServer >-----#
    gCderegServer = CLASS(name='gCderegServer', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RR')))
    _gCderegServer_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegServer')))
    gCderegServer._val = dict([('mxref', 5), ('MXParam', _gCderegServer_val_MXParam)])
    
    #-----< gCregClient >-----#
    gCregClient = CLASS(name='gCregClient', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RR')))
    _gCregClient_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregClient')))
    gCregClient._val = dict([('mxref', 6), ('MXParam', _gCregClient_val_MXParam)])
    
    #-----< gCupdateClient >-----#
    gCupdateClient = CLASS(name='gCupdateClient', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RR')))
    _gCupdateClient_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateClient')))
    gCupdateClient._val = dict([('mxref', 7), ('MXParam', _gCupdateClient_val_MXParam)])
    
    #-----< gCderegClient >-----#
    gCderegClient = CLASS(name='gCderegClient', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RR')))
    _gCderegClient_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegClient')))
    gCderegClient._val = dict([('mxref', 8), ('MXParam', _gCderegClient_val_MXParam)])
    
    #-----< lDMregister >-----#
    lDMregister = CLASS(name='lDMregister', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RR')))
    _lDMregister_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'LDMregister')))
    lDMregister._val = dict([('mxref', 9), ('MXParam', _lDMregister_val_MXParam)])
    
    #-----< sAMrxNot >-----#
    sAMrxNot = CLASS(name='sAMrxNot', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RR')))
    _sAMrxNot_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'SAMrxNot')))
    sAMrxNot._val = dict([('mxref', 10), ('MXParam', _sAMrxNot_val_MXParam)])
    
    #-----< cTXrxNot >-----#
    cTXrxNot = CLASS(name='cTXrxNot', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RR')))
    _cTXrxNot_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'CTXrxNot')))
    cTXrxNot._val = dict([('mxref', 11), ('MXParam', _cTXrxNot_val_MXParam)])
    
    #-----< iICrequestRX >-----#
    iICrequestRX = CLASS(name='iICrequestRX', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RR')))
    _iICrequestRX_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'IICrequestRX')))
    iICrequestRX._val = dict([('mxref', 12), ('MXParam', _iICrequestRX_val_MXParam)])
    
    #-----< iICresponseRX >-----#
    iICresponseRX = CLASS(name='iICresponseRX', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RR')))
    _iICresponseRX_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMiitsscu', 'IICresponseRX')))
    iICresponseRX._val = dict([('mxref', 13), ('MXParam', _iICresponseRX_val_MXParam)])
    
    #-----< iTS-S-Appl-ReqFinal >-----#
    iTS_S_Appl_ReqFinal = CLASS(name='iTS-S-Appl-ReqFinal', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RR')))
    _iTS_S_Appl_ReqFinal_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITS-S-Appl-RegFinal')))
    iTS_S_Appl_ReqFinal._val = dict([('mxref', 14), ('MXParam', _iTS_S_Appl_ReqFinal_val_MXParam)])
    
    #-----< testMFecho >-----#
    testMFecho = CLASS(name='testMFecho', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RR')))
    _testMFecho_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'TestMFecho')))
    testMFecho._val = dict([('mxref', 255), ('MXParam', _testMFecho_val_MXParam)])
    
    #-----< SimFUTreq >-----#
    SimFUTreq = SEQ(name='SimFUTreq', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FAsapPrimitivesUp')))
    
    #-----< SimFLTreq >-----#
    SimFLTreq = SEQ(name='SimFLTreq', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'NFsapPrimitivesDown')))
    
    #-----< LDMregister >-----#
    LDMregister = SEQ(name='LDMregister', mode=MODE_TYPE)
    _LDMregister_iTS_scuId = INT(name='iTS-scuId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ITS-scuId')))
    _LDMregister_reference = OCT_STR(name='reference', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LDMregister_reference._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    LDMregister._cont = ASN1Dict([
        ('iTS-scuId', _LDMregister_iTS_scuId),
        ('reference', _LDMregister_reference),
        ])
    LDMregister._ext = None
    
    #-----< TestMFecho >-----#
    TestMFecho = SEQ(name='TestMFecho', mode=MODE_TYPE)
    _TestMFecho_sap = INT(name='sap', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TestMFecho_sap._cont = ASN1Dict([('f', 70)])
    _TestMFecho_sap._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _TestMFecho_info = OCT_STR(name='info', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TestMFecho_info._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    TestMFecho._cont = ASN1Dict([
        ('sap', _TestMFecho_sap),
        ('info', _TestMFecho_info),
        ])
    TestMFecho._ext = None
    
    #-----< MFSAP-RC >-----#
    MFSAP_RC = CLASS(name='MFSAP-RC', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MXSERV')))
    
    #-----< MF-ReqConfirm >-----#
    MF_ReqConfirm = CLASS(name='MF-ReqConfirm', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RC')))
    _MF_ReqConfirm_val_MXParam_0 = NULL(name='MXParam', mode=MODE_TYPE)
    _MF_ReqConfirm_val_MXParam_1 = NULL(name='MXParam', mode=MODE_TYPE)
    _MF_ReqConfirm_val_MXParam_2 = NULL(name='MXParam', mode=MODE_TYPE)
    _MF_ReqConfirm_val_MXParam_3 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregServerConf')))
    _MF_ReqConfirm_val_MXParam_4 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateServerConf')))
    _MF_ReqConfirm_val_MXParam_5 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegServerConf')))
    _MF_ReqConfirm_val_MXParam_6 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregClientConf')))
    _MF_ReqConfirm_val_MXParam_7 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateClientConf')))
    _MF_ReqConfirm_val_MXParam_8 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegClientConf')))
    _MF_ReqConfirm_val_MXParam_9 = INT(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'ITS-scuId')))
    _MF_ReqConfirm_val_MXParam_10 = NULL(name='MXParam', mode=MODE_TYPE)
    _MF_ReqConfirm_val_MXParam_11 = NULL(name='MXParam', mode=MODE_TYPE)
    _MF_ReqConfirm_val_MXParam_12 = NULL(name='MXParam', mode=MODE_TYPE)
    _MF_ReqConfirm_val_MXParam_13 = NULL(name='MXParam', mode=MODE_TYPE)
    _MF_ReqConfirm_val_MXParam_14 = NULL(name='MXParam', mode=MODE_TYPE)
    _MF_ReqConfirm_val_MXParam_15 = NULL(name='MXParam', mode=MODE_TYPE)
    MF_ReqConfirm._val = ASN1Set(rv=[dict([('mxref', 0), ('MXParam', _MF_ReqConfirm_val_MXParam_0)]), dict([('mxref', 1), ('MXParam', _MF_ReqConfirm_val_MXParam_1)]), dict([('mxref', 2), ('MXParam', _MF_ReqConfirm_val_MXParam_2)]), dict([('mxref', 3), ('MXParam', _MF_ReqConfirm_val_MXParam_3)]), dict([('mxref', 4), ('MXParam', _MF_ReqConfirm_val_MXParam_4)]), dict([('mxref', 5), ('MXParam', _MF_ReqConfirm_val_MXParam_5)]), dict([('mxref', 6), ('MXParam', _MF_ReqConfirm_val_MXParam_6)]), dict([('mxref', 7), ('MXParam', _MF_ReqConfirm_val_MXParam_7)]), dict([('mxref', 8), ('MXParam', _MF_ReqConfirm_val_MXParam_8)]), dict([('mxref', 9), ('MXParam', _MF_ReqConfirm_val_MXParam_9)]), dict([('mxref', 10), ('MXParam', _MF_ReqConfirm_val_MXParam_10)]), dict([('mxref', 11), ('MXParam', _MF_ReqConfirm_val_MXParam_11)]), dict([('mxref', 12), ('MXParam', _MF_ReqConfirm_val_MXParam_12)]), dict([('mxref', 13), ('MXParam', _MF_ReqConfirm_val_MXParam_13)]), dict([('mxref', 14), ('MXParam', _MF_ReqConfirm_val_MXParam_14)]), dict([('mxref', 255), ('MXParam', _MF_ReqConfirm_val_MXParam_15)])], rr=[], ev=[], er=[])
    
    #-----< MF-Request-confirm >-----#
    MF_Request_confirm = SEQ(name='MF-Request-confirm', mode=MODE_TYPE)
    _MF_Request_confirm_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MF_Request_confirm_ref = INT(name='ref', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MFSAP-RC'), ['mxref']))
    __MF_Request_confirm_ref_tab = CLASS(name='_tab_MFSAP-RC', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RC')))
    ___MF_Request_confirm_ref_tab_val_MXParam_0 = NULL(name='MXParam', mode=MODE_TYPE)
    ___MF_Request_confirm_ref_tab_val_MXParam_1 = NULL(name='MXParam', mode=MODE_TYPE)
    ___MF_Request_confirm_ref_tab_val_MXParam_2 = NULL(name='MXParam', mode=MODE_TYPE)
    ___MF_Request_confirm_ref_tab_val_MXParam_3 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregServerConf')))
    ___MF_Request_confirm_ref_tab_val_MXParam_4 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateServerConf')))
    ___MF_Request_confirm_ref_tab_val_MXParam_5 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegServerConf')))
    ___MF_Request_confirm_ref_tab_val_MXParam_6 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregClientConf')))
    ___MF_Request_confirm_ref_tab_val_MXParam_7 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateClientConf')))
    ___MF_Request_confirm_ref_tab_val_MXParam_8 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegClientConf')))
    ___MF_Request_confirm_ref_tab_val_MXParam_9 = INT(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'ITS-scuId')))
    ___MF_Request_confirm_ref_tab_val_MXParam_10 = NULL(name='MXParam', mode=MODE_TYPE)
    ___MF_Request_confirm_ref_tab_val_MXParam_11 = NULL(name='MXParam', mode=MODE_TYPE)
    ___MF_Request_confirm_ref_tab_val_MXParam_12 = NULL(name='MXParam', mode=MODE_TYPE)
    ___MF_Request_confirm_ref_tab_val_MXParam_13 = NULL(name='MXParam', mode=MODE_TYPE)
    ___MF_Request_confirm_ref_tab_val_MXParam_14 = NULL(name='MXParam', mode=MODE_TYPE)
    ___MF_Request_confirm_ref_tab_val_MXParam_15 = NULL(name='MXParam', mode=MODE_TYPE)
    __MF_Request_confirm_ref_tab._val = ASN1Set(rv=[dict([('mxref', 0), ('MXParam', ___MF_Request_confirm_ref_tab_val_MXParam_0)]), dict([('mxref', 1), ('MXParam', ___MF_Request_confirm_ref_tab_val_MXParam_1)]), dict([('mxref', 2), ('MXParam', ___MF_Request_confirm_ref_tab_val_MXParam_2)]), dict([('mxref', 3), ('MXParam', ___MF_Request_confirm_ref_tab_val_MXParam_3)]), dict([('mxref', 4), ('MXParam', ___MF_Request_confirm_ref_tab_val_MXParam_4)]), dict([('mxref', 5), ('MXParam', ___MF_Request_confirm_ref_tab_val_MXParam_5)]), dict([('mxref', 6), ('MXParam', ___MF_Request_confirm_ref_tab_val_MXParam_6)]), dict([('mxref', 7), ('MXParam', ___MF_Request_confirm_ref_tab_val_MXParam_7)]), dict([('mxref', 8), ('MXParam', ___MF_Request_confirm_ref_tab_val_MXParam_8)]), dict([('mxref', 9), ('MXParam', ___MF_Request_confirm_ref_tab_val_MXParam_9)]), dict([('mxref', 10), ('MXParam', ___MF_Request_confirm_ref_tab_val_MXParam_10)]), dict([('mxref', 11), ('MXParam', ___MF_Request_confirm_ref_tab_val_MXParam_11)]), dict([('mxref', 12), ('MXParam', ___MF_Request_confirm_ref_tab_val_MXParam_12)]), dict([('mxref', 13), ('MXParam', ___MF_Request_confirm_ref_tab_val_MXParam_13)]), dict([('mxref', 14), ('MXParam', ___MF_Request_confirm_ref_tab_val_MXParam_14)]), dict([('mxref', 255), ('MXParam', ___MF_Request_confirm_ref_tab_val_MXParam_15)])], rr=[], ev=None, er=[])
    _MF_Request_confirm_ref._const_tab = __MF_Request_confirm_ref_tab
    _MF_Request_confirm_ref._const_tab_at = None
    _MF_Request_confirm_ref._const_tab_id = 'mxref'
    _MF_Request_confirm_reqConfirm_param = OPEN(name='reqConfirm-param', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MFSAP-RC'), ['MXParam']))
    _MF_Request_confirm_reqConfirm_param._const_tab = __MF_Request_confirm_ref_tab
    _MF_Request_confirm_reqConfirm_param._const_tab_at = ('..', 'ref')
    _MF_Request_confirm_reqConfirm_param._const_tab_id = 'MXParam'
    _MF_Request_confirm_errStatus = INT(name='errStatus', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'ErrStatus')))
    MF_Request_confirm._cont = ASN1Dict([
        ('commandRef', _MF_Request_confirm_commandRef),
        ('ref', _MF_Request_confirm_ref),
        ('reqConfirm-param', _MF_Request_confirm_reqConfirm_param),
        ('errStatus', _MF_Request_confirm_errStatus),
        ])
    MF_Request_confirm._ext = None
    
    #-----< simFUTreqConf >-----#
    simFUTreqConf = CLASS(name='simFUTreqConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RC')))
    _simFUTreqConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    simFUTreqConf._val = dict([('mxref', 0), ('MXParam', _simFUTreqConf_val_MXParam)])
    
    #-----< simFLTreqConf >-----#
    simFLTreqConf = CLASS(name='simFLTreqConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RC')))
    _simFLTreqConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    simFLTreqConf._val = dict([('mxref', 1), ('MXParam', _simFLTreqConf_val_MXParam)])
    
    #-----< iTS-S-Appl-RegConf >-----#
    iTS_S_Appl_RegConf = CLASS(name='iTS-S-Appl-RegConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RC')))
    _iTS_S_Appl_RegConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    iTS_S_Appl_RegConf._val = dict([('mxref', 2), ('MXParam', _iTS_S_Appl_RegConf_val_MXParam)])
    
    #-----< gCregServerConf >-----#
    gCregServerConf = CLASS(name='gCregServerConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RC')))
    _gCregServerConf_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregServerConf')))
    gCregServerConf._val = dict([('mxref', 3), ('MXParam', _gCregServerConf_val_MXParam)])
    
    #-----< gCupdateServerConf >-----#
    gCupdateServerConf = CLASS(name='gCupdateServerConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RC')))
    _gCupdateServerConf_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateServerConf')))
    gCupdateServerConf._val = dict([('mxref', 4), ('MXParam', _gCupdateServerConf_val_MXParam)])
    
    #-----< gCderegServerConf >-----#
    gCderegServerConf = CLASS(name='gCderegServerConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RC')))
    _gCderegServerConf_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegServerConf')))
    gCderegServerConf._val = dict([('mxref', 5), ('MXParam', _gCderegServerConf_val_MXParam)])
    
    #-----< gCregClientConf >-----#
    gCregClientConf = CLASS(name='gCregClientConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RC')))
    _gCregClientConf_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCregClientConf')))
    gCregClientConf._val = dict([('mxref', 6), ('MXParam', _gCregClientConf_val_MXParam)])
    
    #-----< gCupdateClientConf >-----#
    gCupdateClientConf = CLASS(name='gCupdateClientConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RC')))
    _gCupdateClientConf_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCupdateClientConf')))
    gCupdateClientConf._val = dict([('mxref', 7), ('MXParam', _gCupdateClientConf_val_MXParam)])
    
    #-----< gCderegClientConf >-----#
    gCderegClientConf = CLASS(name='gCderegClientConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RC')))
    _gCderegClientConf_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfsap', 'GCderegClientConf')))
    gCderegClientConf._val = dict([('mxref', 8), ('MXParam', _gCderegClientConf_val_MXParam)])
    
    #-----< lDMregisterConf >-----#
    lDMregisterConf = CLASS(name='lDMregisterConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RC')))
    _lDMregisterConf_val_MXParam = INT(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmanagement', 'ITS-scuId')))
    lDMregisterConf._val = dict([('mxref', 9), ('MXParam', _lDMregisterConf_val_MXParam)])
    
    #-----< sAMrxNotConf >-----#
    sAMrxNotConf = CLASS(name='sAMrxNotConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RC')))
    _sAMrxNotConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    sAMrxNotConf._val = dict([('mxref', 10), ('MXParam', _sAMrxNotConf_val_MXParam)])
    
    #-----< cTXrxNotConf >-----#
    cTXrxNotConf = CLASS(name='cTXrxNotConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RC')))
    _cTXrxNotConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    cTXrxNotConf._val = dict([('mxref', 11), ('MXParam', _cTXrxNotConf_val_MXParam)])
    
    #-----< iICrequestRXConf >-----#
    iICrequestRXConf = CLASS(name='iICrequestRXConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RC')))
    _iICrequestRXConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    iICrequestRXConf._val = dict([('mxref', 12), ('MXParam', _iICrequestRXConf_val_MXParam)])
    
    #-----< iICresponseRXConf >-----#
    iICresponseRXConf = CLASS(name='iICresponseRXConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RC')))
    _iICresponseRXConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    iICresponseRXConf._val = dict([('mxref', 13), ('MXParam', _iICresponseRXConf_val_MXParam)])
    
    #-----< iTS-S-Appl-ReqFinalConf >-----#
    iTS_S_Appl_ReqFinalConf = CLASS(name='iTS-S-Appl-ReqFinalConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RC')))
    _iTS_S_Appl_ReqFinalConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    iTS_S_Appl_ReqFinalConf._val = dict([('mxref', 14), ('MXParam', _iTS_S_Appl_ReqFinalConf_val_MXParam)])
    
    #-----< testMFechoConf >-----#
    testMFechoConf = CLASS(name='testMFechoConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MFSAP-RC')))
    _testMFechoConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    testMFechoConf._val = dict([('mxref', 255), ('MXParam', _testMFechoConf_val_MXParam)])
    
    #-----< MNSAP-CR >-----#
    MNSAP_CR = CLASS(name='MNSAP-CR', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MXSERV')))
    
    #-----< MN-Command >-----#
    MN_Command = CLASS(name='MN-Command', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MNSAP-CR')))
    _MN_Command_val_MXParam_0 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNUTcmd')))
    _MN_Command_val_MXParam_1 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNLTcmd')))
    _MN_Command_val_MXParam_2 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTset')))
    _MN_Command_val_MXParam_3 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTupdate')))
    _MN_Command_val_MXParam_4 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTdelete')))
    _MN_Command_val_MXParam_5 = OCT_STR(name='MXParam', mode=MODE_TYPE)
    _MN_Command_val_MXParam_5._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    MN_Command._val = ASN1Set(rv=[dict([('mxref', 0), ('MXParam', _MN_Command_val_MXParam_0)]), dict([('mxref', 1), ('MXParam', _MN_Command_val_MXParam_1)]), dict([('mxref', 2), ('MXParam', _MN_Command_val_MXParam_2)]), dict([('mxref', 3), ('MXParam', _MN_Command_val_MXParam_3)]), dict([('mxref', 4), ('MXParam', _MN_Command_val_MXParam_4)]), dict([('mxref', 255), ('MXParam', _MN_Command_val_MXParam_5)])], rr=[], ev=[], er=[])
    
    #-----< MN-Command-request >-----#
    MN_Command_request = SEQ(name='MN-Command-request', mode=MODE_TYPE)
    _MN_Command_request_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MN_Command_request_ref = INT(name='ref', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MNSAP-CR'), ['mxref']))
    __MN_Command_request_ref_tab = CLASS(name='_tab_MNSAP-CR', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MNSAP-CR')))
    ___MN_Command_request_ref_tab_val_MXParam_0 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNUTcmd')))
    ___MN_Command_request_ref_tab_val_MXParam_1 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNLTcmd')))
    ___MN_Command_request_ref_tab_val_MXParam_2 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTset')))
    ___MN_Command_request_ref_tab_val_MXParam_3 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTupdate')))
    ___MN_Command_request_ref_tab_val_MXParam_4 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTdelete')))
    ___MN_Command_request_ref_tab_val_MXParam_5 = OCT_STR(name='MXParam', mode=MODE_TYPE)
    ___MN_Command_request_ref_tab_val_MXParam_5._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    __MN_Command_request_ref_tab._val = ASN1Set(rv=[dict([('mxref', 0), ('MXParam', ___MN_Command_request_ref_tab_val_MXParam_0)]), dict([('mxref', 1), ('MXParam', ___MN_Command_request_ref_tab_val_MXParam_1)]), dict([('mxref', 2), ('MXParam', ___MN_Command_request_ref_tab_val_MXParam_2)]), dict([('mxref', 3), ('MXParam', ___MN_Command_request_ref_tab_val_MXParam_3)]), dict([('mxref', 4), ('MXParam', ___MN_Command_request_ref_tab_val_MXParam_4)]), dict([('mxref', 255), ('MXParam', ___MN_Command_request_ref_tab_val_MXParam_5)])], rr=[], ev=None, er=[])
    _MN_Command_request_ref._const_tab = __MN_Command_request_ref_tab
    _MN_Command_request_ref._const_tab_at = None
    _MN_Command_request_ref._const_tab_id = 'mxref'
    _MN_Command_request_command_param = OPEN(name='command-param', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MNSAP-CR'), ['MXParam']))
    _MN_Command_request_command_param._const_tab = __MN_Command_request_ref_tab
    _MN_Command_request_command_param._const_tab_at = ('..', 'ref')
    _MN_Command_request_command_param._const_tab_id = 'MXParam'
    MN_Command_request._cont = ASN1Dict([
        ('commandRef', _MN_Command_request_commandRef),
        ('ref', _MN_Command_request_ref),
        ('command-param', _MN_Command_request_command_param),
        ])
    MN_Command_request._ext = None
    
    #-----< simNUTcmd >-----#
    simNUTcmd = CLASS(name='simNUTcmd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-CR')))
    _simNUTcmd_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNUTcmd')))
    simNUTcmd._val = dict([('mxref', 0), ('MXParam', _simNUTcmd_val_MXParam)])
    
    #-----< simNLTcmd >-----#
    simNLTcmd = CLASS(name='simNLTcmd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-CR')))
    _simNLTcmd_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNLTcmd')))
    simNLTcmd._val = dict([('mxref', 1), ('MXParam', _simNLTcmd_val_MXParam)])
    
    #-----< fWTset >-----#
    fWTset = CLASS(name='fWTset', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-CR')))
    _fWTset_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTset')))
    fWTset._val = dict([('mxref', 2), ('MXParam', _fWTset_val_MXParam)])
    
    #-----< fWTupdate >-----#
    fWTupdate = CLASS(name='fWTupdate', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-CR')))
    _fWTupdate_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTupdate')))
    fWTupdate._val = dict([('mxref', 3), ('MXParam', _fWTupdate_val_MXParam)])
    
    #-----< fWTdelete >-----#
    fWTdelete = CLASS(name='fWTdelete', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-CR')))
    _fWTdelete_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTdelete')))
    fWTdelete._val = dict([('mxref', 4), ('MXParam', _fWTdelete_val_MXParam)])
    
    #-----< testMN >-----#
    testMN = CLASS(name='testMN', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-CR')))
    _testMN_val_MXParam = OCT_STR(name='MXParam', mode=MODE_TYPE)
    _testMN_val_MXParam._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    testMN._val = dict([('mxref', 255), ('MXParam', _testMN_val_MXParam)])
    
    #-----< SimNUTcmd >-----#
    SimNUTcmd = SEQ(name='SimNUTcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'NFsapPrimitivesDown')))
    
    #-----< SimNLTcmd >-----#
    SimNLTcmd = SEQ(name='SimNLTcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'INsapPrimitivesUp')))
    
    #-----< FWT >-----#
    FWT = CLASS(name='FWT', mode=MODE_TYPE)
    _FWT_fwtRef = INT(name='fwtRef', mode=MODE_VALUE)
    _FWT_fwtRef._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _FWT_Fwt = OPEN(name='Fwt', mode=MODE_TYPE)
    FWT._cont = ASN1Dict([
        ('fwtRef', _FWT_fwtRef),
        ('Fwt', _FWT_Fwt),
        ])
    
    #-----< FWTset >-----#
    FWTset = SEQ(name='FWTset', mode=MODE_TYPE)
    _FWTset_fwtNo = INT(name='fwtNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'FWT'), ['fwtRef']))
    __FWTset_fwtNo_tab = CLASS(name='_tab_FWT', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'FWT')))
    ___FWTset_fwtNo_tab_val_Fwt_0 = SEQ(name='Fwt', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'SetFNTP')))
    __FWTset_fwtNo_tab._val = ASN1Set(rv=[dict([('fwtRef', 0), ('Fwt', ___FWTset_fwtNo_tab_val_Fwt_0)])], rr=[], ev=None, er=[])
    _FWTset_fwtNo._const_tab = __FWTset_fwtNo_tab
    _FWTset_fwtNo._const_tab_at = None
    _FWTset_fwtNo._const_tab_id = 'fwtRef'
    _FWTset_fwt = OPEN(name='fwt', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'FWT'), ['Fwt']))
    _FWTset_fwt._const_tab = __FWTset_fwtNo_tab
    _FWTset_fwt._const_tab_at = ('..', 'fwtNo')
    _FWTset_fwt._const_tab_id = 'Fwt'
    FWTset._cont = ASN1Dict([
        ('fwtNo', _FWTset_fwtNo),
        ('fwt', _FWTset_fwt),
        ])
    FWTset._ext = None
    
    #-----< NTprotsSet >-----#
    NTprotsSet = CLASS(name='NTprotsSet', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'FWT')))
    _NTprotsSet_val_Fwt_0 = SEQ(name='Fwt', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'SetFNTP')))
    NTprotsSet._val = ASN1Set(rv=[dict([('fwtRef', 0), ('Fwt', _NTprotsSet_val_Fwt_0)])], rr=[], ev=[], er=[])
    
    #-----< FWTupdate >-----#
    FWTupdate = SEQ(name='FWTupdate', mode=MODE_TYPE)
    _FWTupdate_fwtNo = INT(name='fwtNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'FWT'), ['fwtRef']))
    __FWTupdate_fwtNo_tab = CLASS(name='_tab_FWT', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'FWT')))
    ___FWTupdate_fwtNo_tab_val_Fwt_0 = SEQ(name='Fwt', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'UpdateFNTP')))
    __FWTupdate_fwtNo_tab._val = ASN1Set(rv=[dict([('fwtRef', 1), ('Fwt', ___FWTupdate_fwtNo_tab_val_Fwt_0)])], rr=[], ev=None, er=[])
    _FWTupdate_fwtNo._const_tab = __FWTupdate_fwtNo_tab
    _FWTupdate_fwtNo._const_tab_at = None
    _FWTupdate_fwtNo._const_tab_id = 'fwtRef'
    _FWTupdate_fwt = OPEN(name='fwt', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'FWT'), ['Fwt']))
    _FWTupdate_fwt._const_tab = __FWTupdate_fwtNo_tab
    _FWTupdate_fwt._const_tab_at = ('..', 'fwtNo')
    _FWTupdate_fwt._const_tab_id = 'Fwt'
    FWTupdate._cont = ASN1Dict([
        ('fwtNo', _FWTupdate_fwtNo),
        ('fwt', _FWTupdate_fwt),
        ])
    FWTupdate._ext = None
    
    #-----< NTprotsUpdate >-----#
    NTprotsUpdate = CLASS(name='NTprotsUpdate', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'FWT')))
    _NTprotsUpdate_val_Fwt_0 = SEQ(name='Fwt', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'UpdateFNTP')))
    NTprotsUpdate._val = ASN1Set(rv=[dict([('fwtRef', 1), ('Fwt', _NTprotsUpdate_val_Fwt_0)])], rr=[], ev=[], er=[])
    
    #-----< FWTdelete >-----#
    FWTdelete = SEQ(name='FWTdelete', mode=MODE_TYPE)
    _FWTdelete_fwtNo = INT(name='fwtNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'FWT'), ['fwtRef']))
    __FWTdelete_fwtNo_tab = CLASS(name='_tab_FWT', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'FWT')))
    ___FWTdelete_fwtNo_tab_val_Fwt_0 = SEQ(name='Fwt', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'DeleteFNTP')))
    __FWTdelete_fwtNo_tab._val = ASN1Set(rv=[dict([('fwtRef', 2), ('Fwt', ___FWTdelete_fwtNo_tab_val_Fwt_0)])], rr=[], ev=None, er=[])
    _FWTdelete_fwtNo._const_tab = __FWTdelete_fwtNo_tab
    _FWTdelete_fwtNo._const_tab_at = None
    _FWTdelete_fwtNo._const_tab_id = 'fwtRef'
    _FWTdelete_fwt = OPEN(name='fwt', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'FWT'), ['Fwt']))
    _FWTdelete_fwt._const_tab = __FWTdelete_fwtNo_tab
    _FWTdelete_fwt._const_tab_at = ('..', 'fwtNo')
    _FWTdelete_fwt._const_tab_id = 'Fwt'
    FWTdelete._cont = ASN1Dict([
        ('fwtNo', _FWTdelete_fwtNo),
        ('fwt', _FWTdelete_fwt),
        ])
    FWTdelete._ext = None
    
    #-----< NTprotsDelete >-----#
    NTprotsDelete = CLASS(name='NTprotsDelete', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'FWT')))
    _NTprotsDelete_val_Fwt_0 = SEQ(name='Fwt', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'DeleteFNTP')))
    NTprotsDelete._val = ASN1Set(rv=[dict([('fwtRef', 2), ('Fwt', _NTprotsDelete_val_Fwt_0)])], rr=[], ev=[], er=[])
    
    #-----< fntpset >-----#
    fntpset = CLASS(name='fntpset', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FWT')))
    _fntpset_val_Fwt = SEQ(name='Fwt', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'SetFNTP')))
    fntpset._val = dict([('fwtRef', 0), ('Fwt', _fntpset_val_Fwt)])
    
    #-----< fntpupdate >-----#
    fntpupdate = CLASS(name='fntpupdate', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FWT')))
    _fntpupdate_val_Fwt = SEQ(name='Fwt', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'UpdateFNTP')))
    fntpupdate._val = dict([('fwtRef', 1), ('Fwt', _fntpupdate_val_Fwt)])
    
    #-----< fntpdelete >-----#
    fntpdelete = CLASS(name='fntpdelete', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FWT')))
    _fntpdelete_val_Fwt = SEQ(name='Fwt', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'DeleteFNTP')))
    fntpdelete._val = dict([('fwtRef', 2), ('Fwt', _fntpdelete_val_Fwt)])
    
    #-----< MNSAP-CC >-----#
    MNSAP_CC = CLASS(name='MNSAP-CC', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MXSERV')))
    
    #-----< MN-CmdConfirm >-----#
    MN_CmdConfirm = CLASS(name='MN-CmdConfirm', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MNSAP-CC')))
    _MN_CmdConfirm_val_MXParam_0 = NULL(name='MXParam', mode=MODE_TYPE)
    _MN_CmdConfirm_val_MXParam_1 = NULL(name='MXParam', mode=MODE_TYPE)
    _MN_CmdConfirm_val_MXParam_2 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTsetConf')))
    _MN_CmdConfirm_val_MXParam_3 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTupdateConf')))
    _MN_CmdConfirm_val_MXParam_4 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTdeleteConf')))
    _MN_CmdConfirm_val_MXParam_5 = NULL(name='MXParam', mode=MODE_TYPE)
    MN_CmdConfirm._val = ASN1Set(rv=[dict([('mxref', 0), ('MXParam', _MN_CmdConfirm_val_MXParam_0)]), dict([('mxref', 1), ('MXParam', _MN_CmdConfirm_val_MXParam_1)]), dict([('mxref', 2), ('MXParam', _MN_CmdConfirm_val_MXParam_2)]), dict([('mxref', 3), ('MXParam', _MN_CmdConfirm_val_MXParam_3)]), dict([('mxref', 4), ('MXParam', _MN_CmdConfirm_val_MXParam_4)]), dict([('mxref', 255), ('MXParam', _MN_CmdConfirm_val_MXParam_5)])], rr=[], ev=[], er=[])
    
    #-----< MN-Command-confirm >-----#
    MN_Command_confirm = SEQ(name='MN-Command-confirm', mode=MODE_TYPE)
    _MN_Command_confirm_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MN_Command_confirm_ref = INT(name='ref', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MNSAP-CC'), ['mxref']))
    __MN_Command_confirm_ref_tab = CLASS(name='_tab_MNSAP-CC', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MNSAP-CC')))
    ___MN_Command_confirm_ref_tab_val_MXParam_0 = NULL(name='MXParam', mode=MODE_TYPE)
    ___MN_Command_confirm_ref_tab_val_MXParam_1 = NULL(name='MXParam', mode=MODE_TYPE)
    ___MN_Command_confirm_ref_tab_val_MXParam_2 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTsetConf')))
    ___MN_Command_confirm_ref_tab_val_MXParam_3 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTupdateConf')))
    ___MN_Command_confirm_ref_tab_val_MXParam_4 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTdeleteConf')))
    ___MN_Command_confirm_ref_tab_val_MXParam_5 = NULL(name='MXParam', mode=MODE_TYPE)
    __MN_Command_confirm_ref_tab._val = ASN1Set(rv=[dict([('mxref', 0), ('MXParam', ___MN_Command_confirm_ref_tab_val_MXParam_0)]), dict([('mxref', 1), ('MXParam', ___MN_Command_confirm_ref_tab_val_MXParam_1)]), dict([('mxref', 2), ('MXParam', ___MN_Command_confirm_ref_tab_val_MXParam_2)]), dict([('mxref', 3), ('MXParam', ___MN_Command_confirm_ref_tab_val_MXParam_3)]), dict([('mxref', 4), ('MXParam', ___MN_Command_confirm_ref_tab_val_MXParam_4)]), dict([('mxref', 255), ('MXParam', ___MN_Command_confirm_ref_tab_val_MXParam_5)])], rr=[], ev=None, er=[])
    _MN_Command_confirm_ref._const_tab = __MN_Command_confirm_ref_tab
    _MN_Command_confirm_ref._const_tab_at = None
    _MN_Command_confirm_ref._const_tab_id = 'mxref'
    _MN_Command_confirm_cmdConfirm_param = OPEN(name='cmdConfirm-param', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MNSAP-CC'), ['MXParam']))
    _MN_Command_confirm_cmdConfirm_param._const_tab = __MN_Command_confirm_ref_tab
    _MN_Command_confirm_cmdConfirm_param._const_tab_at = ('..', 'ref')
    _MN_Command_confirm_cmdConfirm_param._const_tab_id = 'MXParam'
    _MN_Command_confirm_errStatus = INT(name='errStatus', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'ErrStatus')))
    MN_Command_confirm._cont = ASN1Dict([
        ('commandRef', _MN_Command_confirm_commandRef),
        ('ref', _MN_Command_confirm_ref),
        ('cmdConfirm-param', _MN_Command_confirm_cmdConfirm_param),
        ('errStatus', _MN_Command_confirm_errStatus),
        ])
    MN_Command_confirm._ext = None
    
    #-----< simNUTcmdConf >-----#
    simNUTcmdConf = CLASS(name='simNUTcmdConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-CC')))
    _simNUTcmdConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    simNUTcmdConf._val = dict([('mxref', 0), ('MXParam', _simNUTcmdConf_val_MXParam)])
    
    #-----< simNLTcmdConf >-----#
    simNLTcmdConf = CLASS(name='simNLTcmdConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-CC')))
    _simNLTcmdConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    simNLTcmdConf._val = dict([('mxref', 1), ('MXParam', _simNLTcmdConf_val_MXParam)])
    
    #-----< fWTsetConf >-----#
    fWTsetConf = CLASS(name='fWTsetConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-CC')))
    _fWTsetConf_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTsetConf')))
    fWTsetConf._val = dict([('mxref', 2), ('MXParam', _fWTsetConf_val_MXParam)])
    
    #-----< fWTupdateConf >-----#
    fWTupdateConf = CLASS(name='fWTupdateConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-CC')))
    _fWTupdateConf_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTupdateConf')))
    fWTupdateConf._val = dict([('mxref', 3), ('MXParam', _fWTupdateConf_val_MXParam)])
    
    #-----< fWTdeletConf >-----#
    fWTdeletConf = CLASS(name='fWTdeletConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-CC')))
    _fWTdeletConf_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTdeleteConf')))
    fWTdeletConf._val = dict([('mxref', 4), ('MXParam', _fWTdeletConf_val_MXParam)])
    
    #-----< testMNConf >-----#
    testMNConf = CLASS(name='testMNConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-CC')))
    _testMNConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    testMNConf._val = dict([('mxref', 255), ('MXParam', _testMNConf_val_MXParam)])
    
    #-----< FWTCONF >-----#
    FWTCONF = CLASS(name='FWTCONF', mode=MODE_TYPE)
    _FWTCONF_fwtRef = INT(name='fwtRef', mode=MODE_VALUE)
    _FWTCONF_fwtRef._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _FWTCONF_Fwt = OPEN(name='Fwt', mode=MODE_TYPE)
    FWTCONF._cont = ASN1Dict([
        ('fwtRef', _FWTCONF_fwtRef),
        ('Fwt', _FWTCONF_Fwt),
        ])
    
    #-----< FWTsetConf >-----#
    FWTsetConf = SEQ(name='FWTsetConf', mode=MODE_TYPE)
    _FWTsetConf_fwtNo = INT(name='fwtNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'FWTCONF'), ['fwtRef']))
    __FWTsetConf_fwtNo_tab = CLASS(name='_tab_FWTCONF', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'FWTCONF')))
    ___FWTsetConf_fwtNo_tab_val_Fwt_0 = SEQ(name='Fwt', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'SetConfFNTP')))
    __FWTsetConf_fwtNo_tab._val = ASN1Set(rv=[dict([('fwtRef', 0), ('Fwt', ___FWTsetConf_fwtNo_tab_val_Fwt_0)])], rr=[], ev=None, er=[])
    _FWTsetConf_fwtNo._const_tab = __FWTsetConf_fwtNo_tab
    _FWTsetConf_fwtNo._const_tab_at = None
    _FWTsetConf_fwtNo._const_tab_id = 'fwtRef'
    _FWTsetConf_fwt = OPEN(name='fwt', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'FWTCONF'), ['Fwt']))
    _FWTsetConf_fwt._const_tab = __FWTsetConf_fwtNo_tab
    _FWTsetConf_fwt._const_tab_at = ('..', 'fwtNo')
    _FWTsetConf_fwt._const_tab_id = 'Fwt'
    FWTsetConf._cont = ASN1Dict([
        ('fwtNo', _FWTsetConf_fwtNo),
        ('fwt', _FWTsetConf_fwt),
        ])
    FWTsetConf._ext = None
    
    #-----< NTprotsSetConf >-----#
    NTprotsSetConf = CLASS(name='NTprotsSetConf', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'FWTCONF')))
    _NTprotsSetConf_val_Fwt_0 = SEQ(name='Fwt', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'SetConfFNTP')))
    NTprotsSetConf._val = ASN1Set(rv=[dict([('fwtRef', 0), ('Fwt', _NTprotsSetConf_val_Fwt_0)])], rr=[], ev=[], er=[])
    
    #-----< FWTupdateConf >-----#
    FWTupdateConf = SEQ(name='FWTupdateConf', mode=MODE_TYPE)
    _FWTupdateConf_fwtNo = INT(name='fwtNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'FWTCONF'), ['fwtRef']))
    __FWTupdateConf_fwtNo_tab = CLASS(name='_tab_FWTCONF', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'FWTCONF')))
    ___FWTupdateConf_fwtNo_tab_val_Fwt_0 = NULL(name='Fwt', mode=MODE_TYPE)
    __FWTupdateConf_fwtNo_tab._val = ASN1Set(rv=[dict([('fwtRef', 1), ('Fwt', ___FWTupdateConf_fwtNo_tab_val_Fwt_0)])], rr=[], ev=None, er=[])
    _FWTupdateConf_fwtNo._const_tab = __FWTupdateConf_fwtNo_tab
    _FWTupdateConf_fwtNo._const_tab_at = None
    _FWTupdateConf_fwtNo._const_tab_id = 'fwtRef'
    _FWTupdateConf_fwt = OPEN(name='fwt', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'FWTCONF'), ['Fwt']))
    _FWTupdateConf_fwt._const_tab = __FWTupdateConf_fwtNo_tab
    _FWTupdateConf_fwt._const_tab_at = ('..', 'fwtNo')
    _FWTupdateConf_fwt._const_tab_id = 'Fwt'
    FWTupdateConf._cont = ASN1Dict([
        ('fwtNo', _FWTupdateConf_fwtNo),
        ('fwt', _FWTupdateConf_fwt),
        ])
    FWTupdateConf._ext = None
    
    #-----< NTprotsUpdateConf >-----#
    NTprotsUpdateConf = CLASS(name='NTprotsUpdateConf', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'FWTCONF')))
    _NTprotsUpdateConf_val_Fwt_0 = NULL(name='Fwt', mode=MODE_TYPE)
    NTprotsUpdateConf._val = ASN1Set(rv=[dict([('fwtRef', 1), ('Fwt', _NTprotsUpdateConf_val_Fwt_0)])], rr=[], ev=[], er=[])
    
    #-----< FWTdeleteConf >-----#
    FWTdeleteConf = SEQ(name='FWTdeleteConf', mode=MODE_TYPE)
    _FWTdeleteConf_fwtNo = INT(name='fwtNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'FWTCONF'), ['fwtRef']))
    __FWTdeleteConf_fwtNo_tab = CLASS(name='_tab_FWTCONF', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'FWTCONF')))
    ___FWTdeleteConf_fwtNo_tab_val_Fwt_0 = NULL(name='Fwt', mode=MODE_TYPE)
    __FWTdeleteConf_fwtNo_tab._val = ASN1Set(rv=[dict([('fwtRef', 2), ('Fwt', ___FWTdeleteConf_fwtNo_tab_val_Fwt_0)])], rr=[], ev=None, er=[])
    _FWTdeleteConf_fwtNo._const_tab = __FWTdeleteConf_fwtNo_tab
    _FWTdeleteConf_fwtNo._const_tab_at = None
    _FWTdeleteConf_fwtNo._const_tab_id = 'fwtRef'
    _FWTdeleteConf_fwt = OPEN(name='fwt', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'FWTCONF'), ['Fwt']))
    _FWTdeleteConf_fwt._const_tab = __FWTdeleteConf_fwtNo_tab
    _FWTdeleteConf_fwt._const_tab_at = ('..', 'fwtNo')
    _FWTdeleteConf_fwt._const_tab_id = 'Fwt'
    FWTdeleteConf._cont = ASN1Dict([
        ('fwtNo', _FWTdeleteConf_fwtNo),
        ('fwt', _FWTdeleteConf_fwt),
        ])
    FWTdeleteConf._ext = None
    
    #-----< NTprotsDeleteConf >-----#
    NTprotsDeleteConf = CLASS(name='NTprotsDeleteConf', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'FWTCONF')))
    _NTprotsDeleteConf_val_Fwt_0 = NULL(name='Fwt', mode=MODE_TYPE)
    NTprotsDeleteConf._val = ASN1Set(rv=[dict([('fwtRef', 2), ('Fwt', _NTprotsDeleteConf_val_Fwt_0)])], rr=[], ev=[], er=[])
    
    #-----< fntpsetConf >-----#
    fntpsetConf = CLASS(name='fntpsetConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FWTCONF')))
    _fntpsetConf_val_Fwt = SEQ(name='Fwt', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'SetConfFNTP')))
    fntpsetConf._val = dict([('fwtRef', 0), ('Fwt', _fntpsetConf_val_Fwt)])
    
    #-----< fntpupdateConf >-----#
    fntpupdateConf = CLASS(name='fntpupdateConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FWTCONF')))
    _fntpupdateConf_val_Fwt = NULL(name='Fwt', mode=MODE_TYPE)
    fntpupdateConf._val = dict([('fwtRef', 1), ('Fwt', _fntpupdateConf_val_Fwt)])
    
    #-----< fntpdeleteConf >-----#
    fntpdeleteConf = CLASS(name='fntpdeleteConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FWTCONF')))
    _fntpdeleteConf_val_Fwt = NULL(name='Fwt', mode=MODE_TYPE)
    fntpdeleteConf._val = dict([('fwtRef', 2), ('Fwt', _fntpdeleteConf_val_Fwt)])
    
    #-----< MNSAP-RR >-----#
    MNSAP_RR = CLASS(name='MNSAP-RR', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MXSERV')))
    
    #-----< MN-Request >-----#
    MN_Request = CLASS(name='MN-Request', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MNSAP-RR')))
    _MN_Request_val_MXParam_0 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNUTreq')))
    _MN_Request_val_MXParam_1 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNLTreq')))
    _MN_Request_val_MXParam_2 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTsetNot')))
    _MN_Request_val_MXParam_3 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTupdateNot')))
    _MN_Request_val_MXParam_4 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTdeleteNot')))
    _MN_Request_val_MXParam_5 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'VCIcreatePeerMAC')))
    _MN_Request_val_MXParam_6 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'Its-ssiPeerNot')))
    _MN_Request_val_MXParam_7 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'TestMNecho')))
    MN_Request._val = ASN1Set(rv=[dict([('mxref', 0), ('MXParam', _MN_Request_val_MXParam_0)]), dict([('mxref', 1), ('MXParam', _MN_Request_val_MXParam_1)]), dict([('mxref', 2), ('MXParam', _MN_Request_val_MXParam_2)]), dict([('mxref', 3), ('MXParam', _MN_Request_val_MXParam_3)]), dict([('mxref', 4), ('MXParam', _MN_Request_val_MXParam_4)]), dict([('mxref', 5), ('MXParam', _MN_Request_val_MXParam_5)]), dict([('mxref', 6), ('MXParam', _MN_Request_val_MXParam_6)]), dict([('mxref', 255), ('MXParam', _MN_Request_val_MXParam_7)])], rr=[], ev=[], er=[])
    
    #-----< MN-Request-request >-----#
    MN_Request_request = SEQ(name='MN-Request-request', mode=MODE_TYPE)
    _MN_Request_request_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MN_Request_request_ref = INT(name='ref', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MNSAP-RR'), ['mxref']))
    __MN_Request_request_ref_tab = CLASS(name='_tab_MNSAP-RR', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MNSAP-RR')))
    ___MN_Request_request_ref_tab_val_MXParam_0 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNUTreq')))
    ___MN_Request_request_ref_tab_val_MXParam_1 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNLTreq')))
    ___MN_Request_request_ref_tab_val_MXParam_2 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTsetNot')))
    ___MN_Request_request_ref_tab_val_MXParam_3 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTupdateNot')))
    ___MN_Request_request_ref_tab_val_MXParam_4 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTdeleteNot')))
    ___MN_Request_request_ref_tab_val_MXParam_5 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'VCIcreatePeerMAC')))
    ___MN_Request_request_ref_tab_val_MXParam_6 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'Its-ssiPeerNot')))
    ___MN_Request_request_ref_tab_val_MXParam_7 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'TestMNecho')))
    __MN_Request_request_ref_tab._val = ASN1Set(rv=[dict([('mxref', 0), ('MXParam', ___MN_Request_request_ref_tab_val_MXParam_0)]), dict([('mxref', 1), ('MXParam', ___MN_Request_request_ref_tab_val_MXParam_1)]), dict([('mxref', 2), ('MXParam', ___MN_Request_request_ref_tab_val_MXParam_2)]), dict([('mxref', 3), ('MXParam', ___MN_Request_request_ref_tab_val_MXParam_3)]), dict([('mxref', 4), ('MXParam', ___MN_Request_request_ref_tab_val_MXParam_4)]), dict([('mxref', 5), ('MXParam', ___MN_Request_request_ref_tab_val_MXParam_5)]), dict([('mxref', 6), ('MXParam', ___MN_Request_request_ref_tab_val_MXParam_6)]), dict([('mxref', 255), ('MXParam', ___MN_Request_request_ref_tab_val_MXParam_7)])], rr=[], ev=None, er=[])
    _MN_Request_request_ref._const_tab = __MN_Request_request_ref_tab
    _MN_Request_request_ref._const_tab_at = None
    _MN_Request_request_ref._const_tab_id = 'mxref'
    _MN_Request_request_request_param = OPEN(name='request-param', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MNSAP-RR'), ['MXParam']))
    _MN_Request_request_request_param._const_tab = __MN_Request_request_ref_tab
    _MN_Request_request_request_param._const_tab_at = ('..', 'ref')
    _MN_Request_request_request_param._const_tab_id = 'MXParam'
    MN_Request_request._cont = ASN1Dict([
        ('commandRef', _MN_Request_request_commandRef),
        ('ref', _MN_Request_request_ref),
        ('request-param', _MN_Request_request_request_param),
        ])
    MN_Request_request._ext = None
    
    #-----< simNUTreq >-----#
    simNUTreq = CLASS(name='simNUTreq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-RR')))
    _simNUTreq_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNUTreq')))
    simNUTreq._val = dict([('mxref', 0), ('MXParam', _simNUTreq_val_MXParam)])
    
    #-----< simNLTreq >-----#
    simNLTreq = CLASS(name='simNLTreq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-RR')))
    _simNLTreq_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimNLTreq')))
    simNLTreq._val = dict([('mxref', 1), ('MXParam', _simNLTreq_val_MXParam)])
    
    #-----< fWTsetNot >-----#
    fWTsetNot = CLASS(name='fWTsetNot', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-RR')))
    _fWTsetNot_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTsetNot')))
    fWTsetNot._val = dict([('mxref', 2), ('MXParam', _fWTsetNot_val_MXParam)])
    
    #-----< fWTupdateNot >-----#
    fWTupdateNot = CLASS(name='fWTupdateNot', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-RR')))
    _fWTupdateNot_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTupdateNot')))
    fWTupdateNot._val = dict([('mxref', 3), ('MXParam', _fWTupdateNot_val_MXParam)])
    
    #-----< fWTdeletNot >-----#
    fWTdeletNot = CLASS(name='fWTdeletNot', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-RR')))
    _fWTdeletNot_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'FWTdeleteNot')))
    fWTdeletNot._val = dict([('mxref', 4), ('MXParam', _fWTdeletNot_val_MXParam)])
    
    #-----< vCIcreatePeerMAC >-----#
    vCIcreatePeerMAC = CLASS(name='vCIcreatePeerMAC', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-RR')))
    _vCIcreatePeerMAC_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'VCIcreatePeerMAC')))
    vCIcreatePeerMAC._val = dict([('mxref', 5), ('MXParam', _vCIcreatePeerMAC_val_MXParam)])
    
    #-----< its-ssiPeerNot >-----#
    its_ssiPeerNot = CLASS(name='its-ssiPeerNot', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-RR')))
    _its_ssiPeerNot_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'Its-ssiPeerNot')))
    its_ssiPeerNot._val = dict([('mxref', 6), ('MXParam', _its_ssiPeerNot_val_MXParam)])
    
    #-----< testMNecho >-----#
    testMNecho = CLASS(name='testMNecho', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-RR')))
    _testMNecho_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'TestMNecho')))
    testMNecho._val = dict([('mxref', 255), ('MXParam', _testMNecho_val_MXParam)])
    
    #-----< SimNUTreq >-----#
    SimNUTreq = SEQ(name='SimNUTreq', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'NFsapPrimitivesUp')))
    
    #-----< SimNLTreq >-----#
    SimNLTreq = SEQ(name='SimNLTreq', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'INsapPrimitivesDown')))
    
    #-----< FWTNOT >-----#
    FWTNOT = CLASS(name='FWTNOT', mode=MODE_TYPE)
    _FWTNOT_fwtRef = INT(name='fwtRef', mode=MODE_VALUE)
    _FWTNOT_fwtRef._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _FWTNOT_Fwt = OPEN(name='Fwt', mode=MODE_TYPE)
    FWTNOT._cont = ASN1Dict([
        ('fwtRef', _FWTNOT_fwtRef),
        ('Fwt', _FWTNOT_Fwt),
        ])
    
    #-----< FWTsetNot >-----#
    FWTsetNot = SEQ(name='FWTsetNot', mode=MODE_TYPE)
    _FWTsetNot_fwtNo = INT(name='fwtNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'FWTNOT'), ['fwtRef']))
    __FWTsetNot_fwtNo_tab = CLASS(name='_tab_FWTNOT', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'FWTNOT')))
    ___FWTsetNot_fwtNo_tab_val_Fwt_0 = SEQ(name='Fwt', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'SetNotFNTP')))
    __FWTsetNot_fwtNo_tab._val = ASN1Set(rv=[dict([('fwtRef', 0), ('Fwt', ___FWTsetNot_fwtNo_tab_val_Fwt_0)])], rr=[], ev=None, er=[])
    _FWTsetNot_fwtNo._const_tab = __FWTsetNot_fwtNo_tab
    _FWTsetNot_fwtNo._const_tab_at = None
    _FWTsetNot_fwtNo._const_tab_id = 'fwtRef'
    _FWTsetNot_fwt = OPEN(name='fwt', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'FWTNOT'), ['Fwt']))
    _FWTsetNot_fwt._const_tab = __FWTsetNot_fwtNo_tab
    _FWTsetNot_fwt._const_tab_at = ('..', 'fwtNo')
    _FWTsetNot_fwt._const_tab_id = 'Fwt'
    FWTsetNot._cont = ASN1Dict([
        ('fwtNo', _FWTsetNot_fwtNo),
        ('fwt', _FWTsetNot_fwt),
        ])
    FWTsetNot._ext = None
    
    #-----< NTprotsSetNot >-----#
    NTprotsSetNot = CLASS(name='NTprotsSetNot', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'FWTNOT')))
    _NTprotsSetNot_val_Fwt_0 = SEQ(name='Fwt', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'SetNotFNTP')))
    NTprotsSetNot._val = ASN1Set(rv=[dict([('fwtRef', 0), ('Fwt', _NTprotsSetNot_val_Fwt_0)])], rr=[], ev=[], er=[])
    
    #-----< FWTupdateNot >-----#
    FWTupdateNot = SEQ(name='FWTupdateNot', mode=MODE_TYPE)
    _FWTupdateNot_fwtNo = INT(name='fwtNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'FWTNOT'), ['fwtRef']))
    __FWTupdateNot_fwtNo_tab = CLASS(name='_tab_FWTNOT', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'FWTNOT')))
    ___FWTupdateNot_fwtNo_tab_val_Fwt_0 = SEQ(name='Fwt', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'UpdateNotFNTP')))
    __FWTupdateNot_fwtNo_tab._val = ASN1Set(rv=[dict([('fwtRef', 1), ('Fwt', ___FWTupdateNot_fwtNo_tab_val_Fwt_0)])], rr=[], ev=None, er=[])
    _FWTupdateNot_fwtNo._const_tab = __FWTupdateNot_fwtNo_tab
    _FWTupdateNot_fwtNo._const_tab_at = None
    _FWTupdateNot_fwtNo._const_tab_id = 'fwtRef'
    _FWTupdateNot_fwt = OPEN(name='fwt', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'FWTNOT'), ['Fwt']))
    _FWTupdateNot_fwt._const_tab = __FWTupdateNot_fwtNo_tab
    _FWTupdateNot_fwt._const_tab_at = ('..', 'fwtNo')
    _FWTupdateNot_fwt._const_tab_id = 'Fwt'
    FWTupdateNot._cont = ASN1Dict([
        ('fwtNo', _FWTupdateNot_fwtNo),
        ('fwt', _FWTupdateNot_fwt),
        ])
    FWTupdateNot._ext = None
    
    #-----< NTprotsUpdateNot >-----#
    NTprotsUpdateNot = CLASS(name='NTprotsUpdateNot', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'FWTNOT')))
    _NTprotsUpdateNot_val_Fwt_0 = SEQ(name='Fwt', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'UpdateNotFNTP')))
    NTprotsUpdateNot._val = ASN1Set(rv=[dict([('fwtRef', 1), ('Fwt', _NTprotsUpdateNot_val_Fwt_0)])], rr=[], ev=[], er=[])
    
    #-----< FWTdeleteNot >-----#
    FWTdeleteNot = SEQ(name='FWTdeleteNot', mode=MODE_TYPE)
    _FWTdeleteNot_fwtNo = INT(name='fwtNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'FWTNOT'), ['fwtRef']))
    __FWTdeleteNot_fwtNo_tab = CLASS(name='_tab_FWTNOT', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'FWTNOT')))
    ___FWTdeleteNot_fwtNo_tab_val_Fwt_0 = SEQ(name='Fwt', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'DeleteNotFNTP')))
    __FWTdeleteNot_fwtNo_tab._val = ASN1Set(rv=[dict([('fwtRef', 2), ('Fwt', ___FWTdeleteNot_fwtNo_tab_val_Fwt_0)])], rr=[], ev=None, er=[])
    _FWTdeleteNot_fwtNo._const_tab = __FWTdeleteNot_fwtNo_tab
    _FWTdeleteNot_fwtNo._const_tab_at = None
    _FWTdeleteNot_fwtNo._const_tab_id = 'fwtRef'
    _FWTdeleteNot_fwt = OPEN(name='fwt', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'FWTNOT'), ['Fwt']))
    _FWTdeleteNot_fwt._const_tab = __FWTdeleteNot_fwtNo_tab
    _FWTdeleteNot_fwt._const_tab_at = ('..', 'fwtNo')
    _FWTdeleteNot_fwt._const_tab_id = 'Fwt'
    FWTdeleteNot._cont = ASN1Dict([
        ('fwtNo', _FWTdeleteNot_fwtNo),
        ('fwt', _FWTdeleteNot_fwt),
        ])
    FWTdeleteNot._ext = None
    
    #-----< NTprotsDeleteNot >-----#
    NTprotsDeleteNot = CLASS(name='NTprotsDeleteNot', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'FWTNOT')))
    _NTprotsDeleteNot_val_Fwt_0 = SEQ(name='Fwt', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'DeleteNotFNTP')))
    NTprotsDeleteNot._val = ASN1Set(rv=[dict([('fwtRef', 2), ('Fwt', _NTprotsDeleteNot_val_Fwt_0)])], rr=[], ev=[], er=[])
    
    #-----< fntpsetNot >-----#
    fntpsetNot = CLASS(name='fntpsetNot', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FWTNOT')))
    _fntpsetNot_val_Fwt = SEQ(name='Fwt', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'SetNotFNTP')))
    fntpsetNot._val = dict([('fwtRef', 0), ('Fwt', _fntpsetNot_val_Fwt)])
    
    #-----< fntpupdateNot >-----#
    fntpupdateNot = CLASS(name='fntpupdateNot', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FWTNOT')))
    _fntpupdateNot_val_Fwt = SEQ(name='Fwt', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'UpdateNotFNTP')))
    fntpupdateNot._val = dict([('fwtRef', 1), ('Fwt', _fntpupdateNot_val_Fwt)])
    
    #-----< fntpdeleteNot >-----#
    fntpdeleteNot = CLASS(name='fntpdeleteNot', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'FWTNOT')))
    _fntpdeleteNot_val_Fwt = SEQ(name='Fwt', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'DeleteNotFNTP')))
    fntpdeleteNot._val = dict([('fwtRef', 2), ('Fwt', _fntpdeleteNot_val_Fwt)])
    
    #-----< VCIcreatePeerMAC >-----#
    VCIcreatePeerMAC = SEQ(name='VCIcreatePeerMAC', mode=MODE_TYPE)
    _VCIcreatePeerMAC_reference = INT(name='reference', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _VCIcreatePeerMAC_reference._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _VCIcreatePeerMAC_linkId = SEQ(name='linkId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _VCIcreatePeerMAC_peerMac = OCT_STR(name='peerMac', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'MACaddress')))
    VCIcreatePeerMAC._cont = ASN1Dict([
        ('reference', _VCIcreatePeerMAC_reference),
        ('linkId', _VCIcreatePeerMAC_linkId),
        ('peerMac', _VCIcreatePeerMAC_peerMac),
        ])
    VCIcreatePeerMAC._ext = None
    
    #-----< Its-ssiPeerNot >-----#
    Its_ssiPeerNot = SEQ(name='Its-ssiPeerNot', mode=MODE_TYPE)
    _Its_ssiPeerNot_sap = INT(name='sap', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Its_ssiPeerNot_sap._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _Its_ssiPeerNot_mACaddress = OCT_STR(name='mACaddress', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'MACaddress')))
    _Its_ssiPeerNot_linkId = SEQ(name='linkId', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _Its_ssiPeerNot_its_ssiData = SEQ(name='its-ssiData', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ITS-SSI')))
    Its_ssiPeerNot._cont = ASN1Dict([
        ('sap', _Its_ssiPeerNot_sap),
        ('mACaddress', _Its_ssiPeerNot_mACaddress),
        ('linkId', _Its_ssiPeerNot_linkId),
        ('its-ssiData', _Its_ssiPeerNot_its_ssiData),
        ])
    Its_ssiPeerNot._ext = None
    
    #-----< StationType >-----#
    StationType = INT(name='StationType', mode=MODE_TYPE)
    StationType._cont = ASN1Dict([('mobile', 0), ('fixed', 1), ('infrastructure', 2), ('vehicle', 3), ('roadside', 4), ('central', 5), ('portable', 6), ('unknown', 255)])
    StationType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< StationID >-----#
    StationID = OCT_STR(name='StationID', mode=MODE_TYPE)
    StationID._const_sz = ASN1Set(rv=[4], rr=[], ev=None, er=[])
    
    #-----< TestMNecho >-----#
    TestMNecho = SEQ(name='TestMNecho', mode=MODE_TYPE)
    _TestMNecho_sap = INT(name='sap', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TestMNecho_sap._cont = ASN1Dict([('n', 78)])
    _TestMNecho_sap._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _TestMNecho_info = OCT_STR(name='info', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TestMNecho_info._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    TestMNecho._cont = ASN1Dict([
        ('sap', _TestMNecho_sap),
        ('info', _TestMNecho_info),
        ])
    TestMNecho._ext = None
    
    #-----< MNSAP-RC >-----#
    MNSAP_RC = CLASS(name='MNSAP-RC', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MXSERV')))
    
    #-----< MN-ReqConfirm >-----#
    MN_ReqConfirm = CLASS(name='MN-ReqConfirm', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MNSAP-RC')))
    _MN_ReqConfirm_val_MXParam_0 = NULL(name='MXParam', mode=MODE_TYPE)
    _MN_ReqConfirm_val_MXParam_1 = NULL(name='MXParam', mode=MODE_TYPE)
    _MN_ReqConfirm_val_MXParam_2 = NULL(name='MXParam', mode=MODE_TYPE)
    _MN_ReqConfirm_val_MXParam_3 = NULL(name='MXParam', mode=MODE_TYPE)
    _MN_ReqConfirm_val_MXParam_4 = NULL(name='MXParam', mode=MODE_TYPE)
    _MN_ReqConfirm_val_MXParam_5 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'VCIPeerMAC')))
    _MN_ReqConfirm_val_MXParam_6 = NULL(name='MXParam', mode=MODE_TYPE)
    _MN_ReqConfirm_val_MXParam_7 = NULL(name='MXParam', mode=MODE_TYPE)
    MN_ReqConfirm._val = ASN1Set(rv=[dict([('mxref', 0), ('MXParam', _MN_ReqConfirm_val_MXParam_0)]), dict([('mxref', 1), ('MXParam', _MN_ReqConfirm_val_MXParam_1)]), dict([('mxref', 2), ('MXParam', _MN_ReqConfirm_val_MXParam_2)]), dict([('mxref', 3), ('MXParam', _MN_ReqConfirm_val_MXParam_3)]), dict([('mxref', 4), ('MXParam', _MN_ReqConfirm_val_MXParam_4)]), dict([('mxref', 5), ('MXParam', _MN_ReqConfirm_val_MXParam_5)]), dict([('mxref', 6), ('MXParam', _MN_ReqConfirm_val_MXParam_6)]), dict([('mxref', 255), ('MXParam', _MN_ReqConfirm_val_MXParam_7)])], rr=[], ev=[], er=[])
    
    #-----< MN-Request-confirm >-----#
    MN_Request_confirm = SEQ(name='MN-Request-confirm', mode=MODE_TYPE)
    _MN_Request_confirm_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MN_Request_confirm_ref = INT(name='ref', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MNSAP-RC'), ['mxref']))
    __MN_Request_confirm_ref_tab = CLASS(name='_tab_MNSAP-RC', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MNSAP-RC')))
    ___MN_Request_confirm_ref_tab_val_MXParam_0 = NULL(name='MXParam', mode=MODE_TYPE)
    ___MN_Request_confirm_ref_tab_val_MXParam_1 = NULL(name='MXParam', mode=MODE_TYPE)
    ___MN_Request_confirm_ref_tab_val_MXParam_2 = NULL(name='MXParam', mode=MODE_TYPE)
    ___MN_Request_confirm_ref_tab_val_MXParam_3 = NULL(name='MXParam', mode=MODE_TYPE)
    ___MN_Request_confirm_ref_tab_val_MXParam_4 = NULL(name='MXParam', mode=MODE_TYPE)
    ___MN_Request_confirm_ref_tab_val_MXParam_5 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'VCIPeerMAC')))
    ___MN_Request_confirm_ref_tab_val_MXParam_6 = NULL(name='MXParam', mode=MODE_TYPE)
    ___MN_Request_confirm_ref_tab_val_MXParam_7 = NULL(name='MXParam', mode=MODE_TYPE)
    __MN_Request_confirm_ref_tab._val = ASN1Set(rv=[dict([('mxref', 0), ('MXParam', ___MN_Request_confirm_ref_tab_val_MXParam_0)]), dict([('mxref', 1), ('MXParam', ___MN_Request_confirm_ref_tab_val_MXParam_1)]), dict([('mxref', 2), ('MXParam', ___MN_Request_confirm_ref_tab_val_MXParam_2)]), dict([('mxref', 3), ('MXParam', ___MN_Request_confirm_ref_tab_val_MXParam_3)]), dict([('mxref', 4), ('MXParam', ___MN_Request_confirm_ref_tab_val_MXParam_4)]), dict([('mxref', 5), ('MXParam', ___MN_Request_confirm_ref_tab_val_MXParam_5)]), dict([('mxref', 6), ('MXParam', ___MN_Request_confirm_ref_tab_val_MXParam_6)]), dict([('mxref', 255), ('MXParam', ___MN_Request_confirm_ref_tab_val_MXParam_7)])], rr=[], ev=None, er=[])
    _MN_Request_confirm_ref._const_tab = __MN_Request_confirm_ref_tab
    _MN_Request_confirm_ref._const_tab_at = None
    _MN_Request_confirm_ref._const_tab_id = 'mxref'
    _MN_Request_confirm_reqConfirm_param = OPEN(name='reqConfirm-param', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MNSAP-RC'), ['MXParam']))
    _MN_Request_confirm_reqConfirm_param._const_tab = __MN_Request_confirm_ref_tab
    _MN_Request_confirm_reqConfirm_param._const_tab_at = ('..', 'ref')
    _MN_Request_confirm_reqConfirm_param._const_tab_id = 'MXParam'
    _MN_Request_confirm_errStatus = INT(name='errStatus', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'ErrStatus')))
    MN_Request_confirm._cont = ASN1Dict([
        ('commandRef', _MN_Request_confirm_commandRef),
        ('ref', _MN_Request_confirm_ref),
        ('reqConfirm-param', _MN_Request_confirm_reqConfirm_param),
        ('errStatus', _MN_Request_confirm_errStatus),
        ])
    MN_Request_confirm._ext = None
    
    #-----< simNUTreqConf >-----#
    simNUTreqConf = CLASS(name='simNUTreqConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-RC')))
    _simNUTreqConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    simNUTreqConf._val = dict([('mxref', 0), ('MXParam', _simNUTreqConf_val_MXParam)])
    
    #-----< simNLTreqConf >-----#
    simNLTreqConf = CLASS(name='simNLTreqConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-RC')))
    _simNLTreqConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    simNLTreqConf._val = dict([('mxref', 1), ('MXParam', _simNLTreqConf_val_MXParam)])
    
    #-----< fWTsetNotConf >-----#
    fWTsetNotConf = CLASS(name='fWTsetNotConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-RC')))
    _fWTsetNotConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    fWTsetNotConf._val = dict([('mxref', 2), ('MXParam', _fWTsetNotConf_val_MXParam)])
    
    #-----< fWTupdateNotConf >-----#
    fWTupdateNotConf = CLASS(name='fWTupdateNotConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-RC')))
    _fWTupdateNotConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    fWTupdateNotConf._val = dict([('mxref', 3), ('MXParam', _fWTupdateNotConf_val_MXParam)])
    
    #-----< fWTdeletNotConf >-----#
    fWTdeletNotConf = CLASS(name='fWTdeletNotConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-RC')))
    _fWTdeletNotConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    fWTdeletNotConf._val = dict([('mxref', 4), ('MXParam', _fWTdeletNotConf_val_MXParam)])
    
    #-----< vCIcreatePeerMACConf >-----#
    vCIcreatePeerMACConf = CLASS(name='vCIcreatePeerMACConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-RC')))
    _vCIcreatePeerMACConf_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'VCIPeerMAC')))
    vCIcreatePeerMACConf._val = dict([('mxref', 5), ('MXParam', _vCIcreatePeerMACConf_val_MXParam)])
    
    #-----< its-ssiPeerNotConf >-----#
    its_ssiPeerNotConf = CLASS(name='its-ssiPeerNotConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-RC')))
    _its_ssiPeerNotConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    its_ssiPeerNotConf._val = dict([('mxref', 6), ('MXParam', _its_ssiPeerNotConf_val_MXParam)])
    
    #-----< testMNechoConf >-----#
    testMNechoConf = CLASS(name='testMNechoConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MNSAP-RC')))
    _testMNechoConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    testMNechoConf._val = dict([('mxref', 255), ('MXParam', _testMNechoConf_val_MXParam)])
    
    #-----< VCIPeerMAC >-----#
    VCIPeerMAC = SEQ(name='VCIPeerMAC', mode=MODE_TYPE)
    _VCIPeerMAC_reference = INT(name='reference', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _VCIPeerMAC_reference._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _VCIPeerMAC_linkId = SEQ(name='linkId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    VCIPeerMAC._cont = ASN1Dict([
        ('reference', _VCIPeerMAC_reference),
        ('linkId', _VCIPeerMAC_linkId),
        ])
    VCIPeerMAC._ext = None
    
    #-----< MISAP-CR >-----#
    MISAP_CR = CLASS(name='MISAP-CR', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MXSERV')))
    
    #-----< MI-Command >-----#
    MI_Command = CLASS(name='MI-Command', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MISAP-CR')))
    _MI_Command_val_MXParam_0 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimIUTcmd')))
    _MI_Command_val_MXParam_1 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RegCmd')))
    _MI_Command_val_MXParam_2 = INT(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'CIstateChng')))
    _MI_Command_val_MXParam_3 = INT(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'WakeUp')))
    _MI_Command_val_MXParam_4 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RTScmd')))
    _MI_Command_val_MXParam_5 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RTSackCmd')))
    _MI_Command_val_MXParam_6 = INT(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'CONcmd')))
    _MI_Command_val_MXParam_7 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RIcmd')))
    _MI_Command_val_MXParam_8 = OCT_STR(name='MXParam', mode=MODE_TYPE)
    _MI_Command_val_MXParam_9 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'VciCmd')))
    _MI_Command_val_MXParam_10 = SEQ_OF(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'Monitor')))
    _MI_Command_val_MXParam_11 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'UnitData')))
    _MI_Command_val_MXParam_12 = OCT_STR(name='MXParam', mode=MODE_TYPE)
    _MI_Command_val_MXParam_12._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _MI_Command_val_MXParam_13 = INT(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'UnknownCommand')))
    MI_Command._val = ASN1Set(rv=[dict([('mxref', 0), ('MXParam', _MI_Command_val_MXParam_0)]), dict([('mxref', 1), ('MXParam', _MI_Command_val_MXParam_1)]), dict([('mxref', 2), ('MXParam', _MI_Command_val_MXParam_2)]), dict([('mxref', 3), ('MXParam', _MI_Command_val_MXParam_3)]), dict([('mxref', 4), ('MXParam', _MI_Command_val_MXParam_4)]), dict([('mxref', 5), ('MXParam', _MI_Command_val_MXParam_5)]), dict([('mxref', 6), ('MXParam', _MI_Command_val_MXParam_6)]), dict([('mxref', 7), ('MXParam', _MI_Command_val_MXParam_7)]), dict([('mxref', 8), ('MXParam', _MI_Command_val_MXParam_8)]), dict([('mxref', 9), ('MXParam', _MI_Command_val_MXParam_9)]), dict([('mxref', 10), ('MXParam', _MI_Command_val_MXParam_10)]), dict([('mxref', 11), ('MXParam', _MI_Command_val_MXParam_11)]), dict([('mxref', 255), ('MXParam', _MI_Command_val_MXParam_12)]), dict([('mxref', 254), ('MXParam', _MI_Command_val_MXParam_13)])], rr=[], ev=[], er=[])
    
    #-----< MI-Command-request >-----#
    MI_Command_request = SEQ(name='MI-Command-request', mode=MODE_TYPE)
    _MI_Command_request_linkID = SEQ(name='linkID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _MI_Command_request_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MI_Command_request_ref = INT(name='ref', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MISAP-CR'), ['mxref']))
    __MI_Command_request_ref_tab = CLASS(name='_tab_MISAP-CR', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MISAP-CR')))
    ___MI_Command_request_ref_tab_val_MXParam_0 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimIUTcmd')))
    ___MI_Command_request_ref_tab_val_MXParam_1 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RegCmd')))
    ___MI_Command_request_ref_tab_val_MXParam_2 = INT(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'CIstateChng')))
    ___MI_Command_request_ref_tab_val_MXParam_3 = INT(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'WakeUp')))
    ___MI_Command_request_ref_tab_val_MXParam_4 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RTScmd')))
    ___MI_Command_request_ref_tab_val_MXParam_5 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RTSackCmd')))
    ___MI_Command_request_ref_tab_val_MXParam_6 = INT(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'CONcmd')))
    ___MI_Command_request_ref_tab_val_MXParam_7 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RIcmd')))
    ___MI_Command_request_ref_tab_val_MXParam_8 = OCT_STR(name='MXParam', mode=MODE_TYPE)
    ___MI_Command_request_ref_tab_val_MXParam_9 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'VciCmd')))
    ___MI_Command_request_ref_tab_val_MXParam_10 = SEQ_OF(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'Monitor')))
    ___MI_Command_request_ref_tab_val_MXParam_11 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'UnitData')))
    ___MI_Command_request_ref_tab_val_MXParam_12 = OCT_STR(name='MXParam', mode=MODE_TYPE)
    ___MI_Command_request_ref_tab_val_MXParam_12._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    ___MI_Command_request_ref_tab_val_MXParam_13 = INT(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'UnknownCommand')))
    __MI_Command_request_ref_tab._val = ASN1Set(rv=[dict([('mxref', 0), ('MXParam', ___MI_Command_request_ref_tab_val_MXParam_0)]), dict([('mxref', 1), ('MXParam', ___MI_Command_request_ref_tab_val_MXParam_1)]), dict([('mxref', 2), ('MXParam', ___MI_Command_request_ref_tab_val_MXParam_2)]), dict([('mxref', 3), ('MXParam', ___MI_Command_request_ref_tab_val_MXParam_3)]), dict([('mxref', 4), ('MXParam', ___MI_Command_request_ref_tab_val_MXParam_4)]), dict([('mxref', 5), ('MXParam', ___MI_Command_request_ref_tab_val_MXParam_5)]), dict([('mxref', 6), ('MXParam', ___MI_Command_request_ref_tab_val_MXParam_6)]), dict([('mxref', 7), ('MXParam', ___MI_Command_request_ref_tab_val_MXParam_7)]), dict([('mxref', 8), ('MXParam', ___MI_Command_request_ref_tab_val_MXParam_8)]), dict([('mxref', 9), ('MXParam', ___MI_Command_request_ref_tab_val_MXParam_9)]), dict([('mxref', 10), ('MXParam', ___MI_Command_request_ref_tab_val_MXParam_10)]), dict([('mxref', 11), ('MXParam', ___MI_Command_request_ref_tab_val_MXParam_11)]), dict([('mxref', 255), ('MXParam', ___MI_Command_request_ref_tab_val_MXParam_12)]), dict([('mxref', 254), ('MXParam', ___MI_Command_request_ref_tab_val_MXParam_13)])], rr=[], ev=None, er=[])
    _MI_Command_request_ref._const_tab = __MI_Command_request_ref_tab
    _MI_Command_request_ref._const_tab_at = None
    _MI_Command_request_ref._const_tab_id = 'mxref'
    _MI_Command_request_command_param = OPEN(name='command-param', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MISAP-CR'), ['MXParam']))
    _MI_Command_request_command_param._const_tab = __MI_Command_request_ref_tab
    _MI_Command_request_command_param._const_tab_at = ('..', 'ref')
    _MI_Command_request_command_param._const_tab_id = 'MXParam'
    MI_Command_request._cont = ASN1Dict([
        ('linkID', _MI_Command_request_linkID),
        ('commandRef', _MI_Command_request_commandRef),
        ('ref', _MI_Command_request_ref),
        ('command-param', _MI_Command_request_command_param),
        ])
    MI_Command_request._ext = None
    
    #-----< simIUTcmd >-----#
    simIUTcmd = CLASS(name='simIUTcmd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-CR')))
    _simIUTcmd_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimIUTcmd')))
    simIUTcmd._val = dict([('mxref', 0), ('MXParam', _simIUTcmd_val_MXParam)])
    
    #-----< regCmd >-----#
    regCmd = CLASS(name='regCmd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-CR')))
    _regCmd_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RegCmd')))
    regCmd._val = dict([('mxref', 1), ('MXParam', _regCmd_val_MXParam)])
    
    #-----< cIstate >-----#
    cIstate = CLASS(name='cIstate', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-CR')))
    _cIstate_val_MXParam = INT(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'CIstateChng')))
    cIstate._val = dict([('mxref', 2), ('MXParam', _cIstate_val_MXParam)])
    
    #-----< wakeUp >-----#
    wakeUp = CLASS(name='wakeUp', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-CR')))
    _wakeUp_val_MXParam = INT(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'WakeUp')))
    wakeUp._val = dict([('mxref', 3), ('MXParam', _wakeUp_val_MXParam)])
    
    #-----< rTScmd >-----#
    rTScmd = CLASS(name='rTScmd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-CR')))
    _rTScmd_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RTScmd')))
    rTScmd._val = dict([('mxref', 4), ('MXParam', _rTScmd_val_MXParam)])
    
    #-----< rTSackCmd >-----#
    rTSackCmd = CLASS(name='rTSackCmd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-CR')))
    _rTSackCmd_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RTSackCmd')))
    rTSackCmd._val = dict([('mxref', 5), ('MXParam', _rTSackCmd_val_MXParam)])
    
    #-----< cONcmd >-----#
    cONcmd = CLASS(name='cONcmd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-CR')))
    _cONcmd_val_MXParam = INT(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'CONcmd')))
    cONcmd._val = dict([('mxref', 6), ('MXParam', _cONcmd_val_MXParam)])
    
    #-----< rIcmd >-----#
    rIcmd = CLASS(name='rIcmd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-CR')))
    _rIcmd_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RIcmd')))
    rIcmd._val = dict([('mxref', 7), ('MXParam', _rIcmd_val_MXParam)])
    
    #-----< manuCmd >-----#
    manuCmd = CLASS(name='manuCmd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-CR')))
    _manuCmd_val_MXParam = OCT_STR(name='MXParam', mode=MODE_TYPE)
    manuCmd._val = dict([('mxref', 8), ('MXParam', _manuCmd_val_MXParam)])
    
    #-----< vciCmd >-----#
    vciCmd = CLASS(name='vciCmd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-CR')))
    _vciCmd_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'VciCmd')))
    vciCmd._val = dict([('mxref', 9), ('MXParam', _vciCmd_val_MXParam)])
    
    #-----< monitor >-----#
    monitor = CLASS(name='monitor', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-CR')))
    _monitor_val_MXParam = SEQ_OF(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'Monitor')))
    monitor._val = dict([('mxref', 10), ('MXParam', _monitor_val_MXParam)])
    
    #-----< unitDataCmd >-----#
    unitDataCmd = CLASS(name='unitDataCmd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-CR')))
    _unitDataCmd_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'UnitData')))
    unitDataCmd._val = dict([('mxref', 11), ('MXParam', _unitDataCmd_val_MXParam)])
    
    #-----< testMI >-----#
    testMI = CLASS(name='testMI', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-CR')))
    _testMI_val_MXParam = OCT_STR(name='MXParam', mode=MODE_TYPE)
    _testMI_val_MXParam._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    testMI._val = dict([('mxref', 255), ('MXParam', _testMI_val_MXParam)])
    
    #-----< unknownCmd >-----#
    unknownCmd = CLASS(name='unknownCmd', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-CR')))
    _unknownCmd_val_MXParam = INT(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'UnknownCommand')))
    unknownCmd._val = dict([('mxref', 254), ('MXParam', _unknownCmd_val_MXParam)])
    
    #-----< UnknownCommand >-----#
    UnknownCommand = INT(name='UnknownCommand', mode=MODE_TYPE)
    
    #-----< SimIUTcmd >-----#
    SimIUTcmd = SEQ(name='SimIUTcmd', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'INsapPrimitivesDown')))
    
    #-----< RegCmd >-----#
    RegCmd = SEQ(name='RegCmd', mode=MODE_TYPE)
    _RegCmd_scuId = INT(name='scuId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ITS-scuId')))
    _RegCmd_medID = INT(name='medID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'MedID')))
    RegCmd._cont = ASN1Dict([
        ('scuId', _RegCmd_scuId),
        ('medID', _RegCmd_medID),
        ])
    RegCmd._ext = None
    
    #-----< CIstateChng >-----#
    CIstateChng = INT(name='CIstateChng', mode=MODE_TYPE)
    CIstateChng._cont = ASN1Dict([('deregister', 0), ('activate', 4), ('resume', 8), ('connect', 16), ('disconnect', 32), ('suspend', 64), ('inactivate', 128)])
    CIstateChng._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< WakeUp >-----#
    WakeUp = INT(name='WakeUp', mode=MODE_TYPE)
    WakeUp._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< RTScmd >-----#
    RTScmd = SEQ(name='RTScmd', mode=MODE_TYPE)
    _RTScmd_reqID = SEQ(name='reqID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'ReqID')))
    _RTScmd_priority = INT(name='priority', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _RTScmd_seqNo = INT(name='seqNo', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RTScmd_seqNo._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _RTScmd_status = INT(name='status', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RTScmd_status._cont = ASN1Dict([('release', 0), ('request', 16)])
    _RTScmd_status._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    RTScmd._cont = ASN1Dict([
        ('reqID', _RTScmd_reqID),
        ('priority', _RTScmd_priority),
        ('seqNo', _RTScmd_seqNo),
        ('status', _RTScmd_status),
        ])
    RTScmd._ext = None
    
    #-----< ReqID >-----#
    ReqID = SEQ(name='ReqID', mode=MODE_TYPE)
    _ReqID_linkID = SEQ(name='linkID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    ReqID._cont = ASN1Dict([
        ('linkID', _ReqID_linkID),
        ])
    ReqID._ext = None
    
    #-----< RTSackCmd >-----#
    RTSackCmd = SEQ(name='RTSackCmd', mode=MODE_TYPE)
    _RTSackCmd_priority = INT(name='priority', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _RTSackCmd_seqNo = INT(name='seqNo', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RTSackCmd_seqNo._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _RTSackCmd_status = INT(name='status', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RTSackCmd_status._cont = ASN1Dict([('ignored', 64), ('granted', 128)])
    _RTSackCmd_status._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    RTSackCmd._cont = ASN1Dict([
        ('priority', _RTSackCmd_priority),
        ('seqNo', _RTSackCmd_seqNo),
        ('status', _RTSackCmd_status),
        ])
    RTSackCmd._ext = None
    
    #-----< CONcmd >-----#
    CONcmd = INT(name='CONcmd', mode=MODE_TYPE)
    CONcmd._cont = ASN1Dict([('deleteAC', 0), ('connect', 1), ('disconnect', 255)])
    CONcmd._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< RIcmd >-----#
    RIcmd = SEQ(name='RIcmd', mode=MODE_TYPE)
    _RIcmd_linkID = SEQ(name='linkID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _RIcmd_ri = OCT_STR(name='ri', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'RI')))
    RIcmd._cont = ASN1Dict([
        ('linkID', _RIcmd_linkID),
        ('ri', _RIcmd_ri),
        ])
    RIcmd._ext = None
    
    #-----< RI >-----#
    RI = OCT_STR(name='RI', mode=MODE_TYPE)
    RI._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< VciCmd >-----#
    VciCmd = SEQ(name='VciCmd', mode=MODE_TYPE)
    _VciCmd_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _VciCmd_fill._const_sz = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    _VciCmd_linkID = SEQ(name='linkID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _VciCmd_alive = BOOL(name='alive', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    VciCmd._cont = ASN1Dict([
        ('fill', _VciCmd_fill),
        ('linkID', _VciCmd_linkID),
        ('alive', _VciCmd_alive),
        ])
    VciCmd._ext = None
    
    #-----< Monitor >-----#
    Monitor = SEQ_OF(name='Monitor', mode=MODE_TYPE)
    _Monitor__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    __Monitor__item__paramNo = INT(name='paramNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Monitor__item__paramNo._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    __Monitor__item__active = INT(name='active', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Monitor__item__active._cont = ASN1Dict([('stop', 0), ('start', 255)])
    __Monitor__item__active._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _Monitor__item_._cont = ASN1Dict([
        ('paramNo', __Monitor__item__paramNo),
        ('active', __Monitor__item__active),
        ])
    _Monitor__item_._ext = None
    Monitor._cont = _Monitor__item_
    Monitor._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< UnitData >-----#
    UnitData = SEQ(name='UnitData', mode=MODE_TYPE)
    _UnitData_sourceAddr = SEQ(name='sourceAddr', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _UnitData_destAddr = SEQ(name='destAddr', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _UnitData_data = OCT_STR(name='data', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'DataUnitData')))
    _UnitData_priority = INT(name='priority', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _UnitData_parameter = OCT_STR(name='parameter', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'ParameterUnitData')))
    UnitData._cont = ASN1Dict([
        ('sourceAddr', _UnitData_sourceAddr),
        ('destAddr', _UnitData_destAddr),
        ('data', _UnitData_data),
        ('priority', _UnitData_priority),
        ('parameter', _UnitData_parameter),
        ])
    UnitData._ext = None
    
    #-----< DataUnitData >-----#
    DataUnitData = OCT_STR(name='DataUnitData', mode=MODE_TYPE)
    DataUnitData._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< ParameterUnitData >-----#
    ParameterUnitData = OCT_STR(name='ParameterUnitData', mode=MODE_TYPE)
    ParameterUnitData._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< MI-Command-confirm >-----#
    MI_Command_confirm = SEQ(name='MI-Command-confirm', mode=MODE_TYPE)
    _MI_Command_confirm_linkID = SEQ(name='linkID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _MI_Command_confirm_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MI_Command_confirm_errStatus = INT(name='errStatus', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'ErrStatus')))
    MI_Command_confirm._cont = ASN1Dict([
        ('linkID', _MI_Command_confirm_linkID),
        ('commandRef', _MI_Command_confirm_commandRef),
        ('errStatus', _MI_Command_confirm_errStatus),
        ])
    MI_Command_confirm._ext = None
    
    #-----< MISAP-RR >-----#
    MISAP_RR = CLASS(name='MISAP-RR', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MXSERV')))
    
    #-----< MI-Request >-----#
    MI_Request = CLASS(name='MI-Request', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MISAP-RR')))
    _MI_Request_val_MXParam_0 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimIUTreq')))
    _MI_Request_val_MXParam_1 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RegReq')))
    _MI_Request_val_MXParam_2 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'PrioReg')))
    _MI_Request_val_MXParam_3 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RTSreq')))
    _MI_Request_val_MXParam_4 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RTSackReq')))
    _MI_Request_val_MXParam_5 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RIreq')))
    _MI_Request_val_MXParam_6 = OCT_STR(name='MXParam', mode=MODE_TYPE)
    _MI_Request_val_MXParam_7 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'Events21218')))
    _MI_Request_val_MXParam_8 = INT(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'PosUpdateReq')))
    _MI_Request_val_MXParam_9 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'UnitData')))
    _MI_Request_val_MXParam_10 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'TestMIecho')))
    MI_Request._val = ASN1Set(rv=[dict([('mxref', 0), ('MXParam', _MI_Request_val_MXParam_0)]), dict([('mxref', 1), ('MXParam', _MI_Request_val_MXParam_1)]), dict([('mxref', 2), ('MXParam', _MI_Request_val_MXParam_2)]), dict([('mxref', 3), ('MXParam', _MI_Request_val_MXParam_3)]), dict([('mxref', 4), ('MXParam', _MI_Request_val_MXParam_4)]), dict([('mxref', 5), ('MXParam', _MI_Request_val_MXParam_5)]), dict([('mxref', 6), ('MXParam', _MI_Request_val_MXParam_6)]), dict([('mxref', 7), ('MXParam', _MI_Request_val_MXParam_7)]), dict([('mxref', 8), ('MXParam', _MI_Request_val_MXParam_8)]), dict([('mxref', 9), ('MXParam', _MI_Request_val_MXParam_9)]), dict([('mxref', 255), ('MXParam', _MI_Request_val_MXParam_10)])], rr=[], ev=[], er=[])
    
    #-----< MI-Request-request >-----#
    MI_Request_request = SEQ(name='MI-Request-request', mode=MODE_TYPE)
    _MI_Request_request_linkID = SEQ(name='linkID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _MI_Request_request_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MI_Request_request_ref = INT(name='ref', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MISAP-RR'), ['mxref']))
    __MI_Request_request_ref_tab = CLASS(name='_tab_MISAP-RR', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MISAP-RR')))
    ___MI_Request_request_ref_tab_val_MXParam_0 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimIUTreq')))
    ___MI_Request_request_ref_tab_val_MXParam_1 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RegReq')))
    ___MI_Request_request_ref_tab_val_MXParam_2 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'PrioReg')))
    ___MI_Request_request_ref_tab_val_MXParam_3 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RTSreq')))
    ___MI_Request_request_ref_tab_val_MXParam_4 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RTSackReq')))
    ___MI_Request_request_ref_tab_val_MXParam_5 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RIreq')))
    ___MI_Request_request_ref_tab_val_MXParam_6 = OCT_STR(name='MXParam', mode=MODE_TYPE)
    ___MI_Request_request_ref_tab_val_MXParam_7 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'Events21218')))
    ___MI_Request_request_ref_tab_val_MXParam_8 = INT(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'PosUpdateReq')))
    ___MI_Request_request_ref_tab_val_MXParam_9 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'UnitData')))
    ___MI_Request_request_ref_tab_val_MXParam_10 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'TestMIecho')))
    __MI_Request_request_ref_tab._val = ASN1Set(rv=[dict([('mxref', 0), ('MXParam', ___MI_Request_request_ref_tab_val_MXParam_0)]), dict([('mxref', 1), ('MXParam', ___MI_Request_request_ref_tab_val_MXParam_1)]), dict([('mxref', 2), ('MXParam', ___MI_Request_request_ref_tab_val_MXParam_2)]), dict([('mxref', 3), ('MXParam', ___MI_Request_request_ref_tab_val_MXParam_3)]), dict([('mxref', 4), ('MXParam', ___MI_Request_request_ref_tab_val_MXParam_4)]), dict([('mxref', 5), ('MXParam', ___MI_Request_request_ref_tab_val_MXParam_5)]), dict([('mxref', 6), ('MXParam', ___MI_Request_request_ref_tab_val_MXParam_6)]), dict([('mxref', 7), ('MXParam', ___MI_Request_request_ref_tab_val_MXParam_7)]), dict([('mxref', 8), ('MXParam', ___MI_Request_request_ref_tab_val_MXParam_8)]), dict([('mxref', 9), ('MXParam', ___MI_Request_request_ref_tab_val_MXParam_9)]), dict([('mxref', 255), ('MXParam', ___MI_Request_request_ref_tab_val_MXParam_10)])], rr=[], ev=None, er=[])
    _MI_Request_request_ref._const_tab = __MI_Request_request_ref_tab
    _MI_Request_request_ref._const_tab_at = None
    _MI_Request_request_ref._const_tab_id = 'mxref'
    _MI_Request_request_request_param = OPEN(name='request-param', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MISAP-RR'), ['MXParam']))
    _MI_Request_request_request_param._const_tab = __MI_Request_request_ref_tab
    _MI_Request_request_request_param._const_tab_at = ('..', 'ref')
    _MI_Request_request_request_param._const_tab_id = 'MXParam'
    MI_Request_request._cont = ASN1Dict([
        ('linkID', _MI_Request_request_linkID),
        ('commandRef', _MI_Request_request_commandRef),
        ('ref', _MI_Request_request_ref),
        ('request-param', _MI_Request_request_request_param),
        ])
    MI_Request_request._ext = None
    
    #-----< simIUTreq >-----#
    simIUTreq = CLASS(name='simIUTreq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-RR')))
    _simIUTreq_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'SimIUTreq')))
    simIUTreq._val = dict([('mxref', 0), ('MXParam', _simIUTreq_val_MXParam)])
    
    #-----< regReq >-----#
    regReq = CLASS(name='regReq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-RR')))
    _regReq_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RegReq')))
    regReq._val = dict([('mxref', 1), ('MXParam', _regReq_val_MXParam)])
    
    #-----< prioReg >-----#
    prioReg = CLASS(name='prioReg', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-RR')))
    _prioReg_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'PrioReg')))
    prioReg._val = dict([('mxref', 2), ('MXParam', _prioReg_val_MXParam)])
    
    #-----< rTSreq >-----#
    rTSreq = CLASS(name='rTSreq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-RR')))
    _rTSreq_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RTSreq')))
    rTSreq._val = dict([('mxref', 3), ('MXParam', _rTSreq_val_MXParam)])
    
    #-----< rTSackReq >-----#
    rTSackReq = CLASS(name='rTSackReq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-RR')))
    _rTSackReq_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RTSackReq')))
    rTSackReq._val = dict([('mxref', 4), ('MXParam', _rTSackReq_val_MXParam)])
    
    #-----< rIreq >-----#
    rIreq = CLASS(name='rIreq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-RR')))
    _rIreq_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'RIreq')))
    rIreq._val = dict([('mxref', 5), ('MXParam', _rIreq_val_MXParam)])
    
    #-----< manuReq >-----#
    manuReq = CLASS(name='manuReq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-RR')))
    _manuReq_val_MXParam = OCT_STR(name='MXParam', mode=MODE_TYPE)
    manuReq._val = dict([('mxref', 6), ('MXParam', _manuReq_val_MXParam)])
    
    #-----< events >-----#
    events = CLASS(name='events', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-RR')))
    _events_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'Events21218')))
    events._val = dict([('mxref', 7), ('MXParam', _events_val_MXParam)])
    
    #-----< posUpdateReq >-----#
    posUpdateReq = CLASS(name='posUpdateReq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-RR')))
    _posUpdateReq_val_MXParam = INT(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'PosUpdateReq')))
    posUpdateReq._val = dict([('mxref', 8), ('MXParam', _posUpdateReq_val_MXParam)])
    
    #-----< unitDataReq >-----#
    unitDataReq = CLASS(name='unitDataReq', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-RR')))
    _unitDataReq_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'UnitData')))
    unitDataReq._val = dict([('mxref', 9), ('MXParam', _unitDataReq_val_MXParam)])
    
    #-----< testMIecho >-----#
    testMIecho = CLASS(name='testMIecho', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MISAP-RR')))
    _testMIecho_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'TestMIecho')))
    testMIecho._val = dict([('mxref', 255), ('MXParam', _testMIecho_val_MXParam)])
    
    #-----< SimIUTreq >-----#
    SimIUTreq = SEQ(name='SimIUTreq', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'INsapPrimitivesUp')))
    
    #-----< RegReq >-----#
    RegReq = SEQ(name='RegReq', mode=MODE_TYPE)
    _RegReq_medType = INT(name='medType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'MedType')))
    RegReq._cont = ASN1Dict([
        ('medType', _RegReq_medType),
        ])
    RegReq._ext = None
    
    #-----< PrioReg >-----#
    PrioReg = SEQ(name='PrioReg', mode=MODE_TYPE)
    _PrioReg_interferers = SEQ_OF(name='interferers', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'Interferers')))
    _PrioReg_timeout = INT(name='timeout', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PrioReg_timeout._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    PrioReg._cont = ASN1Dict([
        ('interferers', _PrioReg_interferers),
        ('timeout', _PrioReg_timeout),
        ])
    PrioReg._ext = None
    
    #-----< Interferers >-----#
    Interferers = SEQ_OF(name='Interferers', mode=MODE_TYPE)
    _Interferers__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'MedType')))
    Interferers._cont = _Interferers__item_
    Interferers._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< RTSreq >-----#
    RTSreq = SEQ(name='RTSreq', mode=MODE_TYPE)
    _RTSreq_priority = INT(name='priority', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _RTSreq_seqNo = INT(name='seqNo', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RTSreq_seqNo._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _RTSreq_status = INT(name='status', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RTSreq_status._cont = ASN1Dict([('release', 0), ('request', 16)])
    _RTSreq_status._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    RTSreq._cont = ASN1Dict([
        ('priority', _RTSreq_priority),
        ('seqNo', _RTSreq_seqNo),
        ('status', _RTSreq_status),
        ])
    RTSreq._ext = None
    
    #-----< RTSackReq >-----#
    RTSackReq = SEQ(name='RTSackReq', mode=MODE_TYPE)
    _RTSackReq_reqID = SEQ(name='reqID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'ReqID')))
    _RTSackReq_seqNo = INT(name='seqNo', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RTSackReq_seqNo._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _RTSackReq_status = INT(name='status', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RTSackReq_status._cont = ASN1Dict([('ignored', 64), ('granted', 128)])
    _RTSackReq_status._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    RTSackReq._cont = ASN1Dict([
        ('reqID', _RTSackReq_reqID),
        ('seqNo', _RTSackReq_seqNo),
        ('status', _RTSackReq_status),
        ])
    RTSackReq._ext = None
    
    #-----< RIreq >-----#
    RIreq = SEQ(name='RIreq', mode=MODE_TYPE)
    _RIreq_medType = INT(name='medType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'MedType')))
    _RIreq_riAccess = OCT_STR(name='riAccess', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'RIaccess')))
    RIreq._cont = ASN1Dict([
        ('medType', _RIreq_medType),
        ('riAccess', _RIreq_riAccess),
        ])
    RIreq._ext = None
    
    #-----< RIaccess >-----#
    RIaccess = OCT_STR(name='RIaccess', mode=MODE_TYPE)
    RIaccess._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< EVENT21218 >-----#
    EVENT21218 = CLASS(name='EVENT21218', mode=MODE_TYPE)
    _EVENT21218_eventRef = INT(name='eventRef', mode=MODE_VALUE)
    _EVENT21218_eventRef._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _EVENT21218_Event21218 = OPEN(name='Event21218', mode=MODE_TYPE)
    EVENT21218._cont = ASN1Dict([
        ('eventRef', _EVENT21218_eventRef),
        ('Event21218', _EVENT21218_Event21218),
        ])
    
    #-----< Events21218 >-----#
    Events21218 = SEQ(name='Events21218', mode=MODE_TYPE)
    _Events21218_eventNo = INT(name='eventNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'EVENT21218'), ['eventRef']))
    __Events21218_eventNo_tab = CLASS(name='_tab_EVENT21218', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'EVENT21218')))
    ___Events21218_eventNo_tab_val_Event21218_0 = SEQ(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-0')))
    ___Events21218_eventNo_tab_val_Event21218_1 = INT(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-1')))
    ___Events21218_eventNo_tab_val_Event21218_2 = INT(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-2')))
    ___Events21218_eventNo_tab_val_Event21218_3 = SEQ(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-3')))
    ___Events21218_eventNo_tab_val_Event21218_4 = SEQ(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-4')))
    ___Events21218_eventNo_tab_val_Event21218_5 = SEQ(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-5')))
    ___Events21218_eventNo_tab_val_Event21218_6 = INT(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-6')))
    ___Events21218_eventNo_tab_val_Event21218_7 = SEQ(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-7')))
    __Events21218_eventNo_tab._val = ASN1Set(rv=[dict([('eventRef', 0), ('Event21218', ___Events21218_eventNo_tab_val_Event21218_0)]), dict([('eventRef', 1), ('Event21218', ___Events21218_eventNo_tab_val_Event21218_1)]), dict([('eventRef', 2), ('Event21218', ___Events21218_eventNo_tab_val_Event21218_2)]), dict([('eventRef', 3), ('Event21218', ___Events21218_eventNo_tab_val_Event21218_3)]), dict([('eventRef', 4), ('Event21218', ___Events21218_eventNo_tab_val_Event21218_4)]), dict([('eventRef', 5), ('Event21218', ___Events21218_eventNo_tab_val_Event21218_5)]), dict([('eventRef', 6), ('Event21218', ___Events21218_eventNo_tab_val_Event21218_6)]), dict([('eventRef', 7), ('Event21218', ___Events21218_eventNo_tab_val_Event21218_7)])], rr=[], ev=None, er=[])
    _Events21218_eventNo._const_tab = __Events21218_eventNo_tab
    _Events21218_eventNo._const_tab_at = None
    _Events21218_eventNo._const_tab_id = 'eventRef'
    _Events21218_event = OPEN(name='event', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'EVENT21218'), ['Event21218']))
    _Events21218_event._const_tab = __Events21218_eventNo_tab
    _Events21218_event._const_tab_at = ('..', 'eventNo')
    _Events21218_event._const_tab_id = 'Event21218'
    Events21218._cont = ASN1Dict([
        ('eventNo', _Events21218_eventNo),
        ('event', _Events21218_event),
        ])
    Events21218._ext = None
    
    #-----< Events-21218 >-----#
    Events_21218 = CLASS(name='Events-21218', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'EVENT21218')))
    _Events_21218_val_Event21218_0 = SEQ(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-0')))
    _Events_21218_val_Event21218_1 = INT(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-1')))
    _Events_21218_val_Event21218_2 = INT(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-2')))
    _Events_21218_val_Event21218_3 = SEQ(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-3')))
    _Events_21218_val_Event21218_4 = SEQ(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-4')))
    _Events_21218_val_Event21218_5 = SEQ(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-5')))
    _Events_21218_val_Event21218_6 = INT(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-6')))
    _Events_21218_val_Event21218_7 = SEQ(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-7')))
    Events_21218._val = ASN1Set(rv=[dict([('eventRef', 0), ('Event21218', _Events_21218_val_Event21218_0)]), dict([('eventRef', 1), ('Event21218', _Events_21218_val_Event21218_1)]), dict([('eventRef', 2), ('Event21218', _Events_21218_val_Event21218_2)]), dict([('eventRef', 3), ('Event21218', _Events_21218_val_Event21218_3)]), dict([('eventRef', 4), ('Event21218', _Events_21218_val_Event21218_4)]), dict([('eventRef', 5), ('Event21218', _Events_21218_val_Event21218_5)]), dict([('eventRef', 6), ('Event21218', _Events_21218_val_Event21218_6)]), dict([('eventRef', 7), ('Event21218', _Events_21218_val_Event21218_7)])], rr=[], ev=[], er=[])
    
    #-----< minUserPrio >-----#
    minUserPrio = CLASS(name='minUserPrio', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'EVENT21218')))
    _minUserPrio_val_Event21218 = SEQ(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-0')))
    minUserPrio._val = dict([('eventRef', 0), ('Event21218', _minUserPrio_val_Event21218)])
    
    #-----< txQueueThreshold >-----#
    txQueueThreshold = CLASS(name='txQueueThreshold', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'EVENT21218')))
    _txQueueThreshold_val_Event21218 = INT(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-1')))
    txQueueThreshold._val = dict([('eventRef', 1), ('Event21218', _txQueueThreshold_val_Event21218)])
    
    #-----< txQueueFull >-----#
    txQueueFull = CLASS(name='txQueueFull', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'EVENT21218')))
    _txQueueFull_val_Event21218 = INT(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-2')))
    txQueueFull._val = dict([('eventRef', 2), ('Event21218', _txQueueFull_val_Event21218)])
    
    #-----< vciCreated >-----#
    vciCreated = CLASS(name='vciCreated', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'EVENT21218')))
    _vciCreated_val_Event21218 = SEQ(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-3')))
    vciCreated._val = dict([('eventRef', 3), ('Event21218', _vciCreated_val_Event21218)])
    
    #-----< vciDeleted >-----#
    vciDeleted = CLASS(name='vciDeleted', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'EVENT21218')))
    _vciDeleted_val_Event21218 = SEQ(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-4')))
    vciDeleted._val = dict([('eventRef', 4), ('Event21218', _vciDeleted_val_Event21218)])
    
    #-----< paramMonitor >-----#
    paramMonitor = CLASS(name='paramMonitor', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'EVENT21218')))
    _paramMonitor_val_Event21218 = SEQ(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-5')))
    paramMonitor._val = dict([('eventRef', 5), ('Event21218', _paramMonitor_val_Event21218)])
    
    #-----< txQueueLow >-----#
    txQueueLow = CLASS(name='txQueueLow', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'EVENT21218')))
    _txQueueLow_val_Event21218 = INT(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-6')))
    txQueueLow._val = dict([('eventRef', 6), ('Event21218', _txQueueLow_val_Event21218)])
    
    #-----< vciReset >-----#
    vciReset = CLASS(name='vciReset', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'EVENT21218')))
    _vciReset_val_Event21218 = SEQ(name='Event21218', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'E21218-7')))
    vciReset._val = dict([('eventRef', 7), ('Event21218', _vciReset_val_Event21218)])
    
    #-----< E21218-0 >-----#
    E21218_0 = SEQ(name='E21218-0', mode=MODE_TYPE)
    _E21218_0_priority = INT(name='priority', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    _E21218_0_linkID = SEQ(name='linkID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    E21218_0._cont = ASN1Dict([
        ('priority', _E21218_0_priority),
        ('linkID', _E21218_0_linkID),
        ])
    E21218_0._ext = None
    
    #-----< E21218-1 >-----#
    E21218_1 = INT(name='E21218-1', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    
    #-----< E21218-2 >-----#
    E21218_2 = INT(name='E21218-2', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    
    #-----< E21218-3 >-----#
    E21218_3 = SEQ(name='E21218-3', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    
    #-----< E21218-4 >-----#
    E21218_4 = SEQ(name='E21218-4', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    
    #-----< E21218-5 >-----#
    E21218_5 = SEQ(name='E21218-5', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'I-Param')))
    
    #-----< E21218-6 >-----#
    E21218_6 = INT(name='E21218-6', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    
    #-----< E21218-7 >-----#
    E21218_7 = SEQ(name='E21218-7', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    
    #-----< PosUpdateReq >-----#
    PosUpdateReq = INT(name='PosUpdateReq', mode=MODE_TYPE)
    PosUpdateReq._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< TestMIecho >-----#
    TestMIecho = SEQ(name='TestMIecho', mode=MODE_TYPE)
    _TestMIecho_sap = INT(name='sap', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TestMIecho_sap._cont = ASN1Dict([('i', 73)])
    _TestMIecho_sap._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _TestMIecho_info = OCT_STR(name='info', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TestMIecho_info._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    TestMIecho._cont = ASN1Dict([
        ('sap', _TestMIecho_sap),
        ('info', _TestMIecho_info),
        ])
    TestMIecho._ext = None
    
    #-----< MI-Request-confirm >-----#
    MI_Request_confirm = SEQ(name='MI-Request-confirm', mode=MODE_TYPE)
    _MI_Request_confirm_linkID = SEQ(name='linkID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _MI_Request_confirm_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MI_Request_confirm_errStatus = INT(name='errStatus', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'ErrStatus')))
    MI_Request_confirm._cont = ASN1Dict([
        ('linkID', _MI_Request_confirm_linkID),
        ('commandRef', _MI_Request_confirm_commandRef),
        ('errStatus', _MI_Request_confirm_errStatus),
        ])
    MI_Request_confirm._ext = None
    
    #-----< MI-Set-request >-----#
    MI_Set_request = SEQ(name='MI-Set-request', mode=MODE_TYPE)
    _MI_Set_request_linkID = SEQ(name='linkID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _MI_Set_request_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MI_Set_request_set_param = SEQ_OF(name='set-param', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __MI_Set_request_set_param__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'I-Param')))
    _MI_Set_request_set_param._cont = __MI_Set_request_set_param__item_
    MI_Set_request._cont = ASN1Dict([
        ('linkID', _MI_Set_request_linkID),
        ('commandRef', _MI_Set_request_commandRef),
        ('set-param', _MI_Set_request_set_param),
        ])
    MI_Set_request._ext = None
    
    #-----< MI-Set-confirm >-----#
    MI_Set_confirm = SEQ(name='MI-Set-confirm', mode=MODE_TYPE)
    _MI_Set_confirm_linkID = SEQ(name='linkID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _MI_Set_confirm_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MI_Set_confirm_set_param = SEQ_OF(name='set-param', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Errors')))
    MI_Set_confirm._cont = ASN1Dict([
        ('linkID', _MI_Set_confirm_linkID),
        ('commandRef', _MI_Set_confirm_commandRef),
        ('set-param', _MI_Set_confirm_set_param),
        ])
    MI_Set_confirm._ext = None
    
    #-----< MI-Get-request >-----#
    MI_Get_request = SEQ(name='MI-Get-request', mode=MODE_TYPE)
    _MI_Get_request_linkID = SEQ(name='linkID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _MI_Get_request_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MI_Get_request_get_param_no = SEQ_OF(name='get-param-no', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __MI_Get_request_get_param_no__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'I-ParamNo')))
    _MI_Get_request_get_param_no._cont = __MI_Get_request_get_param_no__item_
    MI_Get_request._cont = ASN1Dict([
        ('linkID', _MI_Get_request_linkID),
        ('commandRef', _MI_Get_request_commandRef),
        ('get-param-no', _MI_Get_request_get_param_no),
        ])
    MI_Get_request._ext = None
    
    #-----< MI-Get-confirm >-----#
    MI_Get_confirm = SEQ(name='MI-Get-confirm', mode=MODE_TYPE)
    _MI_Get_confirm_linkID = SEQ(name='linkID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Link-ID')))
    _MI_Get_confirm_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MI_Get_confirm_get_param = SEQ_OF(name='get-param', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __MI_Get_confirm_get_param__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'I-Param')))
    _MI_Get_confirm_get_param._cont = __MI_Get_confirm_get_param__item_
    MI_Get_confirm._cont = ASN1Dict([
        ('linkID', _MI_Get_confirm_linkID),
        ('commandRef', _MI_Get_confirm_commandRef),
        ('get-param', _MI_Get_confirm_get_param),
        ])
    MI_Get_confirm._ext = None
    
    #-----< MSSAP-CR >-----#
    MSSAP_CR = CLASS(name='MSSAP-CR', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MXSERV')))
    
    #-----< MS-Command-request >-----#
    MS_Command_request = SEQ(name='MS-Command-request', mode=MODE_TYPE)
    _MS_Command_request_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MS_Command_request_ref = INT(name='ref', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MSSAP-CR'), ['mxref']))
    __MS_Command_request_ref_tab = CLASS(name='_tab_MSSAP-CR', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MSSAP-CR')))
    ___MS_Command_request_ref_tab_val_MXParam_0 = OCT_STR(name='MXParam', mode=MODE_TYPE)
    ___MS_Command_request_ref_tab_val_MXParam_0._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    __MS_Command_request_ref_tab._val = ASN1Set(rv=[dict([('mxref', 255), ('MXParam', ___MS_Command_request_ref_tab_val_MXParam_0)])], rr=[], ev=None, er=[])
    _MS_Command_request_ref._const_tab = __MS_Command_request_ref_tab
    _MS_Command_request_ref._const_tab_at = None
    _MS_Command_request_ref._const_tab_id = 'mxref'
    _MS_Command_request_command_param = OPEN(name='command-param', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MSSAP-CR'), ['MXParam']))
    _MS_Command_request_command_param._const_tab = __MS_Command_request_ref_tab
    _MS_Command_request_command_param._const_tab_at = ('..', 'ref')
    _MS_Command_request_command_param._const_tab_id = 'MXParam'
    MS_Command_request._cont = ASN1Dict([
        ('commandRef', _MS_Command_request_commandRef),
        ('ref', _MS_Command_request_ref),
        ('command-param', _MS_Command_request_command_param),
        ])
    MS_Command_request._ext = None
    
    #-----< MS-Command >-----#
    MS_Command = CLASS(name='MS-Command', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MSSAP-CR')))
    _MS_Command_val_MXParam_0 = OCT_STR(name='MXParam', mode=MODE_TYPE)
    _MS_Command_val_MXParam_0._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    MS_Command._val = ASN1Set(rv=[dict([('mxref', 255), ('MXParam', _MS_Command_val_MXParam_0)])], rr=[], ev=[], er=[])
    
    #-----< testMS >-----#
    testMS = CLASS(name='testMS', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MSSAP-CR')))
    _testMS_val_MXParam = OCT_STR(name='MXParam', mode=MODE_TYPE)
    _testMS_val_MXParam._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    testMS._val = dict([('mxref', 255), ('MXParam', _testMS_val_MXParam)])
    
    #-----< MSSAP-CC >-----#
    MSSAP_CC = CLASS(name='MSSAP-CC', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MXSERV')))
    
    #-----< MS-Command-confirm >-----#
    MS_Command_confirm = SEQ(name='MS-Command-confirm', mode=MODE_TYPE)
    _MS_Command_confirm_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MS_Command_confirm_ref = INT(name='ref', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MSSAP-CC'), ['mxref']))
    __MS_Command_confirm_ref_tab = CLASS(name='_tab_MSSAP-CC', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MSSAP-CC')))
    ___MS_Command_confirm_ref_tab_val_MXParam_0 = NULL(name='MXParam', mode=MODE_TYPE)
    __MS_Command_confirm_ref_tab._val = ASN1Set(rv=[dict([('mxref', 255), ('MXParam', ___MS_Command_confirm_ref_tab_val_MXParam_0)])], rr=[], ev=None, er=[])
    _MS_Command_confirm_ref._const_tab = __MS_Command_confirm_ref_tab
    _MS_Command_confirm_ref._const_tab_at = None
    _MS_Command_confirm_ref._const_tab_id = 'mxref'
    _MS_Command_confirm_cmdConfirm_param = OPEN(name='cmdConfirm-param', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MSSAP-CC'), ['MXParam']))
    _MS_Command_confirm_cmdConfirm_param._const_tab = __MS_Command_confirm_ref_tab
    _MS_Command_confirm_cmdConfirm_param._const_tab_at = ('..', 'ref')
    _MS_Command_confirm_cmdConfirm_param._const_tab_id = 'MXParam'
    _MS_Command_confirm_errStatus = INT(name='errStatus', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'ErrStatus')))
    MS_Command_confirm._cont = ASN1Dict([
        ('commandRef', _MS_Command_confirm_commandRef),
        ('ref', _MS_Command_confirm_ref),
        ('cmdConfirm-param', _MS_Command_confirm_cmdConfirm_param),
        ('errStatus', _MS_Command_confirm_errStatus),
        ])
    MS_Command_confirm._ext = None
    
    #-----< MS-CmdConfirm >-----#
    MS_CmdConfirm = CLASS(name='MS-CmdConfirm', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MSSAP-CC')))
    _MS_CmdConfirm_val_MXParam_0 = NULL(name='MXParam', mode=MODE_TYPE)
    MS_CmdConfirm._val = ASN1Set(rv=[dict([('mxref', 255), ('MXParam', _MS_CmdConfirm_val_MXParam_0)])], rr=[], ev=[], er=[])
    
    #-----< testMSConf >-----#
    testMSConf = CLASS(name='testMSConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MSSAP-CC')))
    _testMSConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    testMSConf._val = dict([('mxref', 255), ('MXParam', _testMSConf_val_MXParam)])
    
    #-----< MSSAP-RR >-----#
    MSSAP_RR = CLASS(name='MSSAP-RR', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MXSERV')))
    
    #-----< MS-Request-request >-----#
    MS_Request_request = SEQ(name='MS-Request-request', mode=MODE_TYPE)
    _MS_Request_request_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MS_Request_request_ref = INT(name='ref', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MSSAP-RR'), ['mxref']))
    __MS_Request_request_ref_tab = CLASS(name='_tab_MSSAP-RR', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MSSAP-RR')))
    ___MS_Request_request_ref_tab_val_MXParam_0 = SEQ_OF(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITS-S-Appl-Reg')))
    ___MS_Request_request_ref_tab_val_MXParam_1 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITS-S-Appl-RegFinal')))
    ___MS_Request_request_ref_tab_val_MXParam_2 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'TestMSecho')))
    __MS_Request_request_ref_tab._val = ASN1Set(rv=[dict([('mxref', 1), ('MXParam', ___MS_Request_request_ref_tab_val_MXParam_0)]), dict([('mxref', 13), ('MXParam', ___MS_Request_request_ref_tab_val_MXParam_1)]), dict([('mxref', 255), ('MXParam', ___MS_Request_request_ref_tab_val_MXParam_2)])], rr=[], ev=None, er=[])
    _MS_Request_request_ref._const_tab = __MS_Request_request_ref_tab
    _MS_Request_request_ref._const_tab_at = None
    _MS_Request_request_ref._const_tab_id = 'mxref'
    _MS_Request_request_request_param = OPEN(name='request-param', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MSSAP-RR'), ['MXParam']))
    _MS_Request_request_request_param._const_tab = __MS_Request_request_ref_tab
    _MS_Request_request_request_param._const_tab_at = ('..', 'ref')
    _MS_Request_request_request_param._const_tab_id = 'MXParam'
    MS_Request_request._cont = ASN1Dict([
        ('commandRef', _MS_Request_request_commandRef),
        ('ref', _MS_Request_request_ref),
        ('request-param', _MS_Request_request_request_param),
        ])
    MS_Request_request._ext = None
    
    #-----< MS-Request >-----#
    MS_Request = CLASS(name='MS-Request', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MSSAP-RR')))
    _MS_Request_val_MXParam_0 = SEQ_OF(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITS-S-Appl-Reg')))
    _MS_Request_val_MXParam_1 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITS-S-Appl-RegFinal')))
    _MS_Request_val_MXParam_2 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'TestMSecho')))
    MS_Request._val = ASN1Set(rv=[dict([('mxref', 1), ('MXParam', _MS_Request_val_MXParam_0)]), dict([('mxref', 13), ('MXParam', _MS_Request_val_MXParam_1)]), dict([('mxref', 255), ('MXParam', _MS_Request_val_MXParam_2)])], rr=[], ev=[], er=[])
    
    #-----< iTS-S-Appl-ProcS-Reg >-----#
    iTS_S_Appl_ProcS_Reg = CLASS(name='iTS-S-Appl-ProcS-Reg', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MSSAP-RR')))
    _iTS_S_Appl_ProcS_Reg_val_MXParam = SEQ_OF(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITS-S-Appl-Reg')))
    iTS_S_Appl_ProcS_Reg._val = dict([('mxref', 1), ('MXParam', _iTS_S_Appl_ProcS_Reg_val_MXParam)])
    
    #-----< iTS-S-Appl-ProcS-ReqFinal >-----#
    iTS_S_Appl_ProcS_ReqFinal = CLASS(name='iTS-S-Appl-ProcS-ReqFinal', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MSSAP-RR')))
    _iTS_S_Appl_ProcS_ReqFinal_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITS-S-Appl-RegFinal')))
    iTS_S_Appl_ProcS_ReqFinal._val = dict([('mxref', 13), ('MXParam', _iTS_S_Appl_ProcS_ReqFinal_val_MXParam)])
    
    #-----< testMSecho >-----#
    testMSecho = CLASS(name='testMSecho', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MSSAP-RR')))
    _testMSecho_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'TestMSecho')))
    testMSecho._val = dict([('mxref', 255), ('MXParam', _testMSecho_val_MXParam)])
    
    #-----< TestMSecho >-----#
    TestMSecho = SEQ(name='TestMSecho', mode=MODE_TYPE)
    _TestMSecho_sap = INT(name='sap', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TestMSecho_sap._cont = ASN1Dict([('s', 83)])
    _TestMSecho_sap._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _TestMSecho_info = OCT_STR(name='info', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TestMSecho_info._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    TestMSecho._cont = ASN1Dict([
        ('sap', _TestMSecho_sap),
        ('info', _TestMSecho_info),
        ])
    TestMSecho._ext = None
    
    #-----< MSSAP-RC >-----#
    MSSAP_RC = CLASS(name='MSSAP-RC', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MXSERV')))
    
    #-----< MS-Request-confirm >-----#
    MS_Request_confirm = SEQ(name='MS-Request-confirm', mode=MODE_TYPE)
    _MS_Request_confirm_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MS_Request_confirm_ref = INT(name='ref', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MSSAP-RC'), ['mxref']))
    __MS_Request_confirm_ref_tab = CLASS(name='_tab_MSSAP-RC', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MSSAP-RC')))
    ___MS_Request_confirm_ref_tab_val_MXParam_0 = NULL(name='MXParam', mode=MODE_TYPE)
    ___MS_Request_confirm_ref_tab_val_MXParam_1 = NULL(name='MXParam', mode=MODE_TYPE)
    ___MS_Request_confirm_ref_tab_val_MXParam_2 = NULL(name='MXParam', mode=MODE_TYPE)
    __MS_Request_confirm_ref_tab._val = ASN1Set(rv=[dict([('mxref', 1), ('MXParam', ___MS_Request_confirm_ref_tab_val_MXParam_0)]), dict([('mxref', 13), ('MXParam', ___MS_Request_confirm_ref_tab_val_MXParam_1)]), dict([('mxref', 255), ('MXParam', ___MS_Request_confirm_ref_tab_val_MXParam_2)])], rr=[], ev=None, er=[])
    _MS_Request_confirm_ref._const_tab = __MS_Request_confirm_ref_tab
    _MS_Request_confirm_ref._const_tab_at = None
    _MS_Request_confirm_ref._const_tab_id = 'mxref'
    _MS_Request_confirm_reqConfirm_param = OPEN(name='reqConfirm-param', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MSSAP-RC'), ['MXParam']))
    _MS_Request_confirm_reqConfirm_param._const_tab = __MS_Request_confirm_ref_tab
    _MS_Request_confirm_reqConfirm_param._const_tab_at = ('..', 'ref')
    _MS_Request_confirm_reqConfirm_param._const_tab_id = 'MXParam'
    _MS_Request_confirm_errStatus = INT(name='errStatus', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'ErrStatus')))
    MS_Request_confirm._cont = ASN1Dict([
        ('commandRef', _MS_Request_confirm_commandRef),
        ('ref', _MS_Request_confirm_ref),
        ('reqConfirm-param', _MS_Request_confirm_reqConfirm_param),
        ('errStatus', _MS_Request_confirm_errStatus),
        ])
    MS_Request_confirm._ext = None
    
    #-----< MS-ReqConfirm >-----#
    MS_ReqConfirm = CLASS(name='MS-ReqConfirm', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MSSAP-RC')))
    _MS_ReqConfirm_val_MXParam_0 = NULL(name='MXParam', mode=MODE_TYPE)
    _MS_ReqConfirm_val_MXParam_1 = NULL(name='MXParam', mode=MODE_TYPE)
    _MS_ReqConfirm_val_MXParam_2 = NULL(name='MXParam', mode=MODE_TYPE)
    MS_ReqConfirm._val = ASN1Set(rv=[dict([('mxref', 1), ('MXParam', _MS_ReqConfirm_val_MXParam_0)]), dict([('mxref', 13), ('MXParam', _MS_ReqConfirm_val_MXParam_1)]), dict([('mxref', 255), ('MXParam', _MS_ReqConfirm_val_MXParam_2)])], rr=[], ev=[], er=[])
    
    #-----< iTS-S-Appl-ProcS-RegConf >-----#
    iTS_S_Appl_ProcS_RegConf = CLASS(name='iTS-S-Appl-ProcS-RegConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MSSAP-RR')))
    _iTS_S_Appl_ProcS_RegConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    iTS_S_Appl_ProcS_RegConf._val = dict([('mxref', 1), ('MXParam', _iTS_S_Appl_ProcS_RegConf_val_MXParam)])
    
    #-----< iTS-S-Appl-ProcS-ReqFinalConf >-----#
    iTS_S_Appl_ProcS_ReqFinalConf = CLASS(name='iTS-S-Appl-ProcS-ReqFinalConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MSSAP-RR')))
    _iTS_S_Appl_ProcS_ReqFinalConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    iTS_S_Appl_ProcS_ReqFinalConf._val = dict([('mxref', 13), ('MXParam', _iTS_S_Appl_ProcS_ReqFinalConf_val_MXParam)])
    
    #-----< testMSechoConf >-----#
    testMSechoConf = CLASS(name='testMSechoConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MSSAP-RR')))
    _testMSechoConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    testMSechoConf._val = dict([('mxref', 255), ('MXParam', _testMSechoConf_val_MXParam)])
    
    #-----< MASAP-CR >-----#
    MASAP_CR = CLASS(name='MASAP-CR', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MXSERV')))
    
    #-----< MA-Command-request >-----#
    MA_Command_request = SEQ(name='MA-Command-request', mode=MODE_TYPE)
    _MA_Command_request_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MA_Command_request_ref = INT(name='ref', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MASAP-CR'), ['mxref']))
    __MA_Command_request_ref_tab = CLASS(name='_tab_MASAP-CR', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MASAP-CR')))
    ___MA_Command_request_ref_tab_val_MXParam_0 = OCT_STR(name='MXParam', mode=MODE_TYPE)
    ___MA_Command_request_ref_tab_val_MXParam_0._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    __MA_Command_request_ref_tab._val = ASN1Set(rv=[dict([('mxref', 255), ('MXParam', ___MA_Command_request_ref_tab_val_MXParam_0)])], rr=[], ev=None, er=[])
    _MA_Command_request_ref._const_tab = __MA_Command_request_ref_tab
    _MA_Command_request_ref._const_tab_at = None
    _MA_Command_request_ref._const_tab_id = 'mxref'
    _MA_Command_request_command_param = OPEN(name='command-param', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MASAP-CR'), ['MXParam']))
    _MA_Command_request_command_param._const_tab = __MA_Command_request_ref_tab
    _MA_Command_request_command_param._const_tab_at = ('..', 'ref')
    _MA_Command_request_command_param._const_tab_id = 'MXParam'
    MA_Command_request._cont = ASN1Dict([
        ('commandRef', _MA_Command_request_commandRef),
        ('ref', _MA_Command_request_ref),
        ('command-param', _MA_Command_request_command_param),
        ])
    MA_Command_request._ext = None
    
    #-----< MA-Command >-----#
    MA_Command = CLASS(name='MA-Command', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MASAP-CR')))
    _MA_Command_val_MXParam_0 = OCT_STR(name='MXParam', mode=MODE_TYPE)
    _MA_Command_val_MXParam_0._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    MA_Command._val = ASN1Set(rv=[dict([('mxref', 255), ('MXParam', _MA_Command_val_MXParam_0)])], rr=[], ev=[], er=[])
    
    #-----< testMA >-----#
    testMA = CLASS(name='testMA', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MASAP-CR')))
    _testMA_val_MXParam = OCT_STR(name='MXParam', mode=MODE_TYPE)
    _testMA_val_MXParam._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    testMA._val = dict([('mxref', 255), ('MXParam', _testMA_val_MXParam)])
    
    #-----< MASAP-CC >-----#
    MASAP_CC = CLASS(name='MASAP-CC', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MXSERV')))
    
    #-----< testMAConf >-----#
    testMAConf = CLASS(name='testMAConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MASAP-CC')))
    _testMAConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    testMAConf._val = dict([('mxref', 255), ('MXParam', _testMAConf_val_MXParam)])
    
    #-----< MA-Command-confirm >-----#
    MA_Command_confirm = SEQ(name='MA-Command-confirm', mode=MODE_TYPE)
    _MA_Command_confirm_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MA_Command_confirm_ref = INT(name='ref', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MASAP-CC'), ['mxref']))
    __MA_Command_confirm_ref_tab = CLASS(name='_tab_MASAP-CC', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MASAP-CC')))
    ___MA_Command_confirm_ref_tab_val_MXParam_0 = NULL(name='MXParam', mode=MODE_TYPE)
    __MA_Command_confirm_ref_tab._val = ASN1Set(rv=[dict([('mxref', 255), ('MXParam', ___MA_Command_confirm_ref_tab_val_MXParam_0)])], rr=[], ev=None, er=[])
    _MA_Command_confirm_ref._const_tab = __MA_Command_confirm_ref_tab
    _MA_Command_confirm_ref._const_tab_at = None
    _MA_Command_confirm_ref._const_tab_id = 'mxref'
    _MA_Command_confirm_cmdConfirm_param = OPEN(name='cmdConfirm-param', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MASAP-CC'), ['MXParam']))
    _MA_Command_confirm_cmdConfirm_param._const_tab = __MA_Command_confirm_ref_tab
    _MA_Command_confirm_cmdConfirm_param._const_tab_at = ('..', 'ref')
    _MA_Command_confirm_cmdConfirm_param._const_tab_id = 'MXParam'
    _MA_Command_confirm_errStatus = INT(name='errStatus', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'ErrStatus')))
    MA_Command_confirm._cont = ASN1Dict([
        ('commandRef', _MA_Command_confirm_commandRef),
        ('ref', _MA_Command_confirm_ref),
        ('cmdConfirm-param', _MA_Command_confirm_cmdConfirm_param),
        ('errStatus', _MA_Command_confirm_errStatus),
        ])
    MA_Command_confirm._ext = None
    
    #-----< MA-CmdConfirm >-----#
    MA_CmdConfirm = CLASS(name='MA-CmdConfirm', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MASAP-CC')))
    _MA_CmdConfirm_val_MXParam_0 = NULL(name='MXParam', mode=MODE_TYPE)
    MA_CmdConfirm._val = ASN1Set(rv=[dict([('mxref', 255), ('MXParam', _MA_CmdConfirm_val_MXParam_0)])], rr=[], ev=[], er=[])
    
    #-----< MASAP-RR >-----#
    MASAP_RR = CLASS(name='MASAP-RR', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MXSERV')))
    
    #-----< MA-Request-request >-----#
    MA_Request_request = SEQ(name='MA-Request-request', mode=MODE_TYPE)
    _MA_Request_request_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MA_Request_request_ref = INT(name='ref', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MASAP-RR'), ['mxref']))
    __MA_Request_request_ref_tab = CLASS(name='_tab_MASAP-RR', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MASAP-RR')))
    ___MA_Request_request_ref_tab_val_MXParam_0 = SEQ_OF(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITS-S-Appl-Reg')))
    ___MA_Request_request_ref_tab_val_MXParam_1 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITS-S-Appl-RegFinal')))
    ___MA_Request_request_ref_tab_val_MXParam_2 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'TestMAecho')))
    __MA_Request_request_ref_tab._val = ASN1Set(rv=[dict([('mxref', 1), ('MXParam', ___MA_Request_request_ref_tab_val_MXParam_0)]), dict([('mxref', 13), ('MXParam', ___MA_Request_request_ref_tab_val_MXParam_1)]), dict([('mxref', 255), ('MXParam', ___MA_Request_request_ref_tab_val_MXParam_2)])], rr=[], ev=None, er=[])
    _MA_Request_request_ref._const_tab = __MA_Request_request_ref_tab
    _MA_Request_request_ref._const_tab_at = None
    _MA_Request_request_ref._const_tab_id = 'mxref'
    _MA_Request_request_request_param = OPEN(name='request-param', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MASAP-RR'), ['MXParam']))
    _MA_Request_request_request_param._const_tab = __MA_Request_request_ref_tab
    _MA_Request_request_request_param._const_tab_at = ('..', 'ref')
    _MA_Request_request_request_param._const_tab_id = 'MXParam'
    MA_Request_request._cont = ASN1Dict([
        ('commandRef', _MA_Request_request_commandRef),
        ('ref', _MA_Request_request_ref),
        ('request-param', _MA_Request_request_request_param),
        ])
    MA_Request_request._ext = None
    
    #-----< MA-Request >-----#
    MA_Request = CLASS(name='MA-Request', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MASAP-RR')))
    _MA_Request_val_MXParam_0 = SEQ_OF(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITS-S-Appl-Reg')))
    _MA_Request_val_MXParam_1 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITS-S-Appl-RegFinal')))
    _MA_Request_val_MXParam_2 = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'TestMAecho')))
    MA_Request._val = ASN1Set(rv=[dict([('mxref', 1), ('MXParam', _MA_Request_val_MXParam_0)]), dict([('mxref', 13), ('MXParam', _MA_Request_val_MXParam_1)]), dict([('mxref', 255), ('MXParam', _MA_Request_val_MXParam_2)])], rr=[], ev=[], er=[])
    
    #-----< iTS-S-Appl-Proc-Reg >-----#
    iTS_S_Appl_Proc_Reg = CLASS(name='iTS-S-Appl-Proc-Reg', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MASAP-RR')))
    _iTS_S_Appl_Proc_Reg_val_MXParam = SEQ_OF(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITS-S-Appl-Reg')))
    iTS_S_Appl_Proc_Reg._val = dict([('mxref', 1), ('MXParam', _iTS_S_Appl_Proc_Reg_val_MXParam)])
    
    #-----< iTS-S-Appl-Proc-ReqFinal >-----#
    iTS_S_Appl_Proc_ReqFinal = CLASS(name='iTS-S-Appl-Proc-ReqFinal', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MASAP-RR')))
    _iTS_S_Appl_Proc_ReqFinal_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITS-S-Appl-RegFinal')))
    iTS_S_Appl_Proc_ReqFinal._val = dict([('mxref', 13), ('MXParam', _iTS_S_Appl_Proc_ReqFinal_val_MXParam)])
    
    #-----< testMAecho >-----#
    testMAecho = CLASS(name='testMAecho', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MASAP-RR')))
    _testMAecho_val_MXParam = SEQ(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'TestMAecho')))
    testMAecho._val = dict([('mxref', 255), ('MXParam', _testMAecho_val_MXParam)])
    
    #-----< TestMAecho >-----#
    TestMAecho = SEQ(name='TestMAecho', mode=MODE_TYPE)
    _TestMAecho_sap = INT(name='sap', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TestMAecho_sap._cont = ASN1Dict([('a', 65)])
    _TestMAecho_sap._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _TestMAecho_info = OCT_STR(name='info', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TestMAecho_info._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    TestMAecho._cont = ASN1Dict([
        ('sap', _TestMAecho_sap),
        ('info', _TestMAecho_info),
        ])
    TestMAecho._ext = None
    
    #-----< MASAP-RC >-----#
    MASAP_RC = CLASS(name='MASAP-RC', mode=MODE_TYPE, typeref=ASN1RefType(('CALMmsap', 'MXSERV')))
    
    #-----< MA-Request-confirm >-----#
    MA_Request_confirm = SEQ(name='MA-Request-confirm', mode=MODE_TYPE)
    _MA_Request_confirm_commandRef = INT(name='commandRef', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'CommandRef')))
    _MA_Request_confirm_ref = INT(name='ref', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MASAP-RC'), ['mxref']))
    __MA_Request_confirm_ref_tab = CLASS(name='_tab_MASAP-RC', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MASAP-RC')))
    ___MA_Request_confirm_ref_tab_val_MXParam_0 = SEQ_OF(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITS-S-Appl-RegConf')))
    ___MA_Request_confirm_ref_tab_val_MXParam_1 = NULL(name='MXParam', mode=MODE_TYPE)
    ___MA_Request_confirm_ref_tab_val_MXParam_2 = NULL(name='MXParam', mode=MODE_TYPE)
    __MA_Request_confirm_ref_tab._val = ASN1Set(rv=[dict([('mxref', 1), ('MXParam', ___MA_Request_confirm_ref_tab_val_MXParam_0)]), dict([('mxref', 13), ('MXParam', ___MA_Request_confirm_ref_tab_val_MXParam_1)]), dict([('mxref', 255), ('MXParam', ___MA_Request_confirm_ref_tab_val_MXParam_2)])], rr=[], ev=None, er=[])
    _MA_Request_confirm_ref._const_tab = __MA_Request_confirm_ref_tab
    _MA_Request_confirm_ref._const_tab_at = None
    _MA_Request_confirm_ref._const_tab_id = 'mxref'
    _MA_Request_confirm_reqConfirm_param = OPEN(name='reqConfirm-param', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CALMmsap', 'MASAP-RC'), ['MXParam']))
    _MA_Request_confirm_reqConfirm_param._const_tab = __MA_Request_confirm_ref_tab
    _MA_Request_confirm_reqConfirm_param._const_tab_at = ('..', 'ref')
    _MA_Request_confirm_reqConfirm_param._const_tab_id = 'MXParam'
    _MA_Request_confirm_errStatus = INT(name='errStatus', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmsap', 'ErrStatus')))
    MA_Request_confirm._cont = ASN1Dict([
        ('commandRef', _MA_Request_confirm_commandRef),
        ('ref', _MA_Request_confirm_ref),
        ('reqConfirm-param', _MA_Request_confirm_reqConfirm_param),
        ('errStatus', _MA_Request_confirm_errStatus),
        ])
    MA_Request_confirm._ext = None
    
    #-----< MA-ReqConfirm >-----#
    MA_ReqConfirm = CLASS(name='MA-ReqConfirm', mode=MODE_SET, typeref=ASN1RefType(('CALMmsap', 'MASAP-RC')))
    _MA_ReqConfirm_val_MXParam_0 = SEQ_OF(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITS-S-Appl-RegConf')))
    _MA_ReqConfirm_val_MXParam_1 = NULL(name='MXParam', mode=MODE_TYPE)
    _MA_ReqConfirm_val_MXParam_2 = NULL(name='MXParam', mode=MODE_TYPE)
    MA_ReqConfirm._val = ASN1Set(rv=[dict([('mxref', 1), ('MXParam', _MA_ReqConfirm_val_MXParam_0)]), dict([('mxref', 13), ('MXParam', _MA_ReqConfirm_val_MXParam_1)]), dict([('mxref', 255), ('MXParam', _MA_ReqConfirm_val_MXParam_2)])], rr=[], ev=[], er=[])
    
    #-----< iTS-S-Appl-Proc-RegConf >-----#
    iTS_S_Appl_Proc_RegConf = CLASS(name='iTS-S-Appl-Proc-RegConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MASAP-RC')))
    _iTS_S_Appl_Proc_RegConf_val_MXParam = SEQ_OF(name='MXParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITS-S-Appl-RegConf')))
    iTS_S_Appl_Proc_RegConf._val = dict([('mxref', 1), ('MXParam', _iTS_S_Appl_Proc_RegConf_val_MXParam)])
    
    #-----< iTS-S-Appl-Proc-ReqFinalConf >-----#
    iTS_S_Appl_Proc_ReqFinalConf = CLASS(name='iTS-S-Appl-Proc-ReqFinalConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MASAP-RC')))
    _iTS_S_Appl_Proc_ReqFinalConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    iTS_S_Appl_Proc_ReqFinalConf._val = dict([('mxref', 13), ('MXParam', _iTS_S_Appl_Proc_ReqFinalConf_val_MXParam)])
    
    #-----< testMAechoConf >-----#
    testMAechoConf = CLASS(name='testMAechoConf', mode=MODE_VALUE, typeref=ASN1RefType(('CALMmsap', 'MASAP-RC')))
    _testMAechoConf_val_MXParam = NULL(name='MXParam', mode=MODE_TYPE)
    testMAechoConf._val = dict([('mxref', 255), ('MXParam', _testMAechoConf_val_MXParam)])
    
    #-----< ErrStatus >-----#
    ErrStatus = INT(name='ErrStatus', mode=MODE_TYPE)
    ErrStatus._cont = ASN1Dict([('success', 0), ('unspecFailure', 1), ('invalParamNo', 2), ('invalParamVal', 3), ('riViolation', 4), ('cmdReqNo', 5), ('cmdReqVal', 6), ('accessViolation', 7), ('invalidType', 8), ('sequenceError', 9), ('nonavailValue', 10), ('hardwareFailure', 255)])
    ErrStatus._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< CommandRef >-----#
    CommandRef = INT(name='CommandRef', mode=MODE_TYPE)
    CommandRef._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    _all_ = [
        _COMMUPDOWN_primitiveRef,
        _COMMUPDOWN_Primitive,
        COMMUPDOWN,
        FASAPDOWN,
        __FAsapPrimitivesDown_spRef_tab,
        ___FAsapPrimitivesDown_spRef_tab_val_Primitive_0,
        ___FAsapPrimitivesDown_spRef_tab_val_Primitive_1,
        ___FAsapPrimitivesDown_spRef_tab_val_Primitive_2,
        ___FAsapPrimitivesDown_spRef_tab_val_Primitive_3,
        ___FAsapPrimitivesDown_spRef_tab_val_Primitive_4,
        ___FAsapPrimitivesDown_spRef_tab_val_Primitive_5,
        ___FAsapPrimitivesDown_spRef_tab_val_Primitive_6,
        _FAsapPrimitivesDown_spRef,
        _FAsapPrimitivesDown_servPrimitive,
        FAsapPrimitivesDown,
        FAsapspsdown,
        _FAsapspsdown_val_Primitive_0,
        _FAsapspsdown_val_Primitive_1,
        _FAsapspsdown_val_Primitive_2,
        _FAsapspsdown_val_Primitive_3,
        _FAsapspsdown_val_Primitive_4,
        _FAsapspsdown_val_Primitive_5,
        _FAsapspsdown_val_Primitive_6,
        gCsamctxConfFA,
        _gCsamctxConfFA_val_Primitive,
        gCregServerFA,
        _gCregServerFA_val_Primitive,
        gCupdateServerFA,
        _gCupdateServerFA_val_Primitive,
        gCderegServerFA,
        _gCderegServerFA_val_Primitive,
        gCregClientFA,
        _gCregClientFA_val_Primitive,
        gCupdateClientFA,
        _gCupdateClientFA_val_Primitive,
        gCderegClientFA,
        _gCderegClientFA_val_Primitive,
        FASAPUP,
        __FAsapPrimitivesUp_spRef_tab,
        ___FAsapPrimitivesUp_spRef_tab_val_Primitive_0,
        ___FAsapPrimitivesUp_spRef_tab_val_Primitive_1,
        ___FAsapPrimitivesUp_spRef_tab_val_Primitive_2,
        ___FAsapPrimitivesUp_spRef_tab_val_Primitive_3,
        ___FAsapPrimitivesUp_spRef_tab_val_Primitive_4,
        ___FAsapPrimitivesUp_spRef_tab_val_Primitive_5,
        ___FAsapPrimitivesUp_spRef_tab_val_Primitive_6,
        ___FAsapPrimitivesUp_spRef_tab_val_Primitive_7,
        ___FAsapPrimitivesUp_spRef_tab_val_Primitive_8,
        _FAsapPrimitivesUp_spRef,
        _FAsapPrimitivesUp_servPrimitive,
        FAsapPrimitivesUp,
        FAsapspsup,
        _FAsapspsup_val_Primitive_0,
        _FAsapspsup_val_Primitive_1,
        _FAsapspsup_val_Primitive_2,
        _FAsapspsup_val_Primitive_3,
        _FAsapspsup_val_Primitive_4,
        _FAsapspsup_val_Primitive_5,
        _FAsapspsup_val_Primitive_6,
        _FAsapspsup_val_Primitive_7,
        _FAsapspsup_val_Primitive_8,
        gCsamctxFA,
        _gCsamctxFA_val_Primitive,
        gCregServerConfFA,
        _gCregServerConfFA_val_Primitive,
        gCupdateServerConfFA,
        _gCupdateServerConfFA_val_Primitive,
        gCderegServerConfFA,
        _gCderegServerConfFA_val_Primitive,
        gCregClientConfFA,
        _gCregClientConfFA_val_Primitive,
        gCupdateClientConfFA,
        _gCupdateClientConfFA_val_Primitive,
        gCderegClientConfFA,
        _gCderegClientConfFA_val_Primitive,
        gCsamFA,
        _gCsamFA_val_Primitive,
        gCctxFA,
        _gCctxFA_val_Primitive,
        _MXSERV_mxref,
        _MXSERV_MXParam,
        MXSERV,
        MFSAP_CR,
        MF_Command,
        _MF_Command_val_MXParam_0,
        _MF_Command_val_MXParam_1,
        _MF_Command_val_MXParam_2,
        _MF_Command_val_MXParam_3,
        _MF_Command_val_MXParam_4,
        _MF_Command_val_MXParam_5,
        _MF_Command_val_MXParam_6,
        _MF_Command_val_MXParam_7,
        _MF_Command_val_MXParam_8,
        _MF_Command_val_MXParam_9,
        _MF_Command_val_MXParam_10,
        _MF_Command_val_MXParam_11,
        _MF_Command_val_MXParam_12,
        _MF_Command_val_MXParam_13,
        _MF_Command_request_commandRef,
        __MF_Command_request_ref_tab,
        ___MF_Command_request_ref_tab_val_MXParam_0,
        ___MF_Command_request_ref_tab_val_MXParam_1,
        ___MF_Command_request_ref_tab_val_MXParam_2,
        ___MF_Command_request_ref_tab_val_MXParam_3,
        ___MF_Command_request_ref_tab_val_MXParam_4,
        ___MF_Command_request_ref_tab_val_MXParam_5,
        ___MF_Command_request_ref_tab_val_MXParam_6,
        ___MF_Command_request_ref_tab_val_MXParam_7,
        ___MF_Command_request_ref_tab_val_MXParam_8,
        ___MF_Command_request_ref_tab_val_MXParam_9,
        ___MF_Command_request_ref_tab_val_MXParam_10,
        ___MF_Command_request_ref_tab_val_MXParam_11,
        ___MF_Command_request_ref_tab_val_MXParam_12,
        ___MF_Command_request_ref_tab_val_MXParam_13,
        _MF_Command_request_ref,
        _MF_Command_request_command_param,
        MF_Command_request,
        simFUTcmd,
        _simFUTcmd_val_MXParam,
        simFLTcmd,
        _simFLTcmd_val_MXParam,
        gCsamctx,
        _gCsamctx_val_MXParam,
        gCsam,
        _gCsam_val_MXParam,
        gCctx,
        _gCctx_val_MXParam,
        lDMnotifyCmd,
        _lDMnotifyCmd_val_MXParam,
        legacyCICmd,
        _legacyCICmd_val_MXParam,
        stateCInotify,
        _stateCInotify_val_MXParam,
        gCperiodCmd,
        _gCperiodCmd_val_MXParam,
        gCctxTxCmd,
        _gCctxTxCmd_val_MXParam,
        gCdeleteCmd,
        _gCdeleteCmd_val_MXParam,
        iICrequestTX,
        _iICrequestTX_val_MXParam,
        iICresponseTX,
        _iICresponseTX_val_MXParam,
        testMF,
        _testMF_val_MXParam,
        SimFUTcmd,
        SimFLTcmd,
        _LDMnotify__item_,
        LDMnotify,
        _RadarView_peerITS_SSI,
        RadarView,
        _LegacyCIreq_cIclass,
        _LegacyCIreq_legacyOption,
        _LegacyCIreq_linkId,
        LegacyCIreq,
        _StateCInotify_linkId,
        _StateCInotify_cIstatus,
        StateCInotify,
        MFSAP_CC,
        MF_CmdConfirm,
        _MF_CmdConfirm_val_MXParam_0,
        _MF_CmdConfirm_val_MXParam_1,
        _MF_CmdConfirm_val_MXParam_2,
        _MF_CmdConfirm_val_MXParam_3,
        _MF_CmdConfirm_val_MXParam_4,
        _MF_CmdConfirm_val_MXParam_5,
        _MF_CmdConfirm_val_MXParam_6,
        _MF_CmdConfirm_val_MXParam_7,
        _MF_CmdConfirm_val_MXParam_8,
        _MF_CmdConfirm_val_MXParam_9,
        _MF_CmdConfirm_val_MXParam_10,
        _MF_CmdConfirm_val_MXParam_11,
        _MF_CmdConfirm_val_MXParam_12,
        _MF_CmdConfirm_val_MXParam_13,
        _MF_Command_confirm_commandRef,
        __MF_Command_confirm_ref_tab,
        ___MF_Command_confirm_ref_tab_val_MXParam_0,
        ___MF_Command_confirm_ref_tab_val_MXParam_1,
        ___MF_Command_confirm_ref_tab_val_MXParam_2,
        ___MF_Command_confirm_ref_tab_val_MXParam_3,
        ___MF_Command_confirm_ref_tab_val_MXParam_4,
        ___MF_Command_confirm_ref_tab_val_MXParam_5,
        ___MF_Command_confirm_ref_tab_val_MXParam_6,
        ___MF_Command_confirm_ref_tab_val_MXParam_7,
        ___MF_Command_confirm_ref_tab_val_MXParam_8,
        ___MF_Command_confirm_ref_tab_val_MXParam_9,
        ___MF_Command_confirm_ref_tab_val_MXParam_10,
        ___MF_Command_confirm_ref_tab_val_MXParam_11,
        ___MF_Command_confirm_ref_tab_val_MXParam_12,
        ___MF_Command_confirm_ref_tab_val_MXParam_13,
        _MF_Command_confirm_ref,
        _MF_Command_confirm_cmdConfirm_param,
        _MF_Command_confirm_errStatus,
        MF_Command_confirm,
        simFUTcmdConf,
        _simFUTcmdConf_val_MXParam,
        simFLTcmdConf,
        _simFLTcmdConf_val_MXParam,
        gCsamctxConf,
        _gCsamctxConf_val_MXParam,
        gCsamConf,
        _gCsamConf_val_MXParam,
        gCctxConf,
        _gCctxConf_val_MXParam,
        lDMnotifyConf,
        _lDMnotifyConf_val_MXParam,
        legacyCIConf,
        _legacyCIConf_val_MXParam,
        stateCInotifyConf,
        _stateCInotifyConf_val_MXParam,
        gCperiodCmdConf,
        _gCperiodCmdConf_val_MXParam,
        gCctxTxCmdConf,
        _gCctxTxCmdConf_val_MXParam,
        gCdeleteCmdConf,
        _gCdeleteCmdConf_val_MXParam,
        iICrequestTXConf,
        _iICrequestTXConf_val_MXParam,
        iICresponseTXConf,
        _iICresponseTXConf_val_MXParam,
        testMFConf,
        _testMFConf_val_MXParam,
        MFSAP_RR,
        MF_Request,
        _MF_Request_val_MXParam_0,
        _MF_Request_val_MXParam_1,
        _MF_Request_val_MXParam_2,
        _MF_Request_val_MXParam_3,
        _MF_Request_val_MXParam_4,
        _MF_Request_val_MXParam_5,
        _MF_Request_val_MXParam_6,
        _MF_Request_val_MXParam_7,
        _MF_Request_val_MXParam_8,
        _MF_Request_val_MXParam_9,
        _MF_Request_val_MXParam_10,
        _MF_Request_val_MXParam_11,
        _MF_Request_val_MXParam_12,
        _MF_Request_val_MXParam_13,
        _MF_Request_val_MXParam_14,
        _MF_Request_val_MXParam_15,
        _MF_Request_request_commandRef,
        __MF_Request_request_ref_tab,
        ___MF_Request_request_ref_tab_val_MXParam_0,
        ___MF_Request_request_ref_tab_val_MXParam_1,
        ___MF_Request_request_ref_tab_val_MXParam_2,
        ___MF_Request_request_ref_tab_val_MXParam_3,
        ___MF_Request_request_ref_tab_val_MXParam_4,
        ___MF_Request_request_ref_tab_val_MXParam_5,
        ___MF_Request_request_ref_tab_val_MXParam_6,
        ___MF_Request_request_ref_tab_val_MXParam_7,
        ___MF_Request_request_ref_tab_val_MXParam_8,
        ___MF_Request_request_ref_tab_val_MXParam_9,
        ___MF_Request_request_ref_tab_val_MXParam_10,
        ___MF_Request_request_ref_tab_val_MXParam_11,
        ___MF_Request_request_ref_tab_val_MXParam_12,
        ___MF_Request_request_ref_tab_val_MXParam_13,
        ___MF_Request_request_ref_tab_val_MXParam_14,
        ___MF_Request_request_ref_tab_val_MXParam_15,
        _MF_Request_request_ref,
        _MF_Request_request_request_param,
        MF_Request_request,
        simFUTreq,
        _simFUTreq_val_MXParam,
        simFLTreq,
        _simFLTreq_val_MXParam,
        iTS_S_Appl_Reg,
        _iTS_S_Appl_Reg_val_MXParam,
        gCregServer,
        _gCregServer_val_MXParam,
        gCupdateServer,
        _gCupdateServer_val_MXParam,
        gCderegServer,
        _gCderegServer_val_MXParam,
        gCregClient,
        _gCregClient_val_MXParam,
        gCupdateClient,
        _gCupdateClient_val_MXParam,
        gCderegClient,
        _gCderegClient_val_MXParam,
        lDMregister,
        _lDMregister_val_MXParam,
        sAMrxNot,
        _sAMrxNot_val_MXParam,
        cTXrxNot,
        _cTXrxNot_val_MXParam,
        iICrequestRX,
        _iICrequestRX_val_MXParam,
        iICresponseRX,
        _iICresponseRX_val_MXParam,
        iTS_S_Appl_ReqFinal,
        _iTS_S_Appl_ReqFinal_val_MXParam,
        testMFecho,
        _testMFecho_val_MXParam,
        SimFUTreq,
        SimFLTreq,
        _LDMregister_iTS_scuId,
        _LDMregister_reference,
        LDMregister,
        _TestMFecho_sap,
        _TestMFecho_info,
        TestMFecho,
        MFSAP_RC,
        MF_ReqConfirm,
        _MF_ReqConfirm_val_MXParam_0,
        _MF_ReqConfirm_val_MXParam_1,
        _MF_ReqConfirm_val_MXParam_2,
        _MF_ReqConfirm_val_MXParam_3,
        _MF_ReqConfirm_val_MXParam_4,
        _MF_ReqConfirm_val_MXParam_5,
        _MF_ReqConfirm_val_MXParam_6,
        _MF_ReqConfirm_val_MXParam_7,
        _MF_ReqConfirm_val_MXParam_8,
        _MF_ReqConfirm_val_MXParam_9,
        _MF_ReqConfirm_val_MXParam_10,
        _MF_ReqConfirm_val_MXParam_11,
        _MF_ReqConfirm_val_MXParam_12,
        _MF_ReqConfirm_val_MXParam_13,
        _MF_ReqConfirm_val_MXParam_14,
        _MF_ReqConfirm_val_MXParam_15,
        _MF_Request_confirm_commandRef,
        __MF_Request_confirm_ref_tab,
        ___MF_Request_confirm_ref_tab_val_MXParam_0,
        ___MF_Request_confirm_ref_tab_val_MXParam_1,
        ___MF_Request_confirm_ref_tab_val_MXParam_2,
        ___MF_Request_confirm_ref_tab_val_MXParam_3,
        ___MF_Request_confirm_ref_tab_val_MXParam_4,
        ___MF_Request_confirm_ref_tab_val_MXParam_5,
        ___MF_Request_confirm_ref_tab_val_MXParam_6,
        ___MF_Request_confirm_ref_tab_val_MXParam_7,
        ___MF_Request_confirm_ref_tab_val_MXParam_8,
        ___MF_Request_confirm_ref_tab_val_MXParam_9,
        ___MF_Request_confirm_ref_tab_val_MXParam_10,
        ___MF_Request_confirm_ref_tab_val_MXParam_11,
        ___MF_Request_confirm_ref_tab_val_MXParam_12,
        ___MF_Request_confirm_ref_tab_val_MXParam_13,
        ___MF_Request_confirm_ref_tab_val_MXParam_14,
        ___MF_Request_confirm_ref_tab_val_MXParam_15,
        _MF_Request_confirm_ref,
        _MF_Request_confirm_reqConfirm_param,
        _MF_Request_confirm_errStatus,
        MF_Request_confirm,
        simFUTreqConf,
        _simFUTreqConf_val_MXParam,
        simFLTreqConf,
        _simFLTreqConf_val_MXParam,
        iTS_S_Appl_RegConf,
        _iTS_S_Appl_RegConf_val_MXParam,
        gCregServerConf,
        _gCregServerConf_val_MXParam,
        gCupdateServerConf,
        _gCupdateServerConf_val_MXParam,
        gCderegServerConf,
        _gCderegServerConf_val_MXParam,
        gCregClientConf,
        _gCregClientConf_val_MXParam,
        gCupdateClientConf,
        _gCupdateClientConf_val_MXParam,
        gCderegClientConf,
        _gCderegClientConf_val_MXParam,
        lDMregisterConf,
        _lDMregisterConf_val_MXParam,
        sAMrxNotConf,
        _sAMrxNotConf_val_MXParam,
        cTXrxNotConf,
        _cTXrxNotConf_val_MXParam,
        iICrequestRXConf,
        _iICrequestRXConf_val_MXParam,
        iICresponseRXConf,
        _iICresponseRXConf_val_MXParam,
        iTS_S_Appl_ReqFinalConf,
        _iTS_S_Appl_ReqFinalConf_val_MXParam,
        testMFechoConf,
        _testMFechoConf_val_MXParam,
        MNSAP_CR,
        MN_Command,
        _MN_Command_val_MXParam_0,
        _MN_Command_val_MXParam_1,
        _MN_Command_val_MXParam_2,
        _MN_Command_val_MXParam_3,
        _MN_Command_val_MXParam_4,
        _MN_Command_val_MXParam_5,
        _MN_Command_request_commandRef,
        __MN_Command_request_ref_tab,
        ___MN_Command_request_ref_tab_val_MXParam_0,
        ___MN_Command_request_ref_tab_val_MXParam_1,
        ___MN_Command_request_ref_tab_val_MXParam_2,
        ___MN_Command_request_ref_tab_val_MXParam_3,
        ___MN_Command_request_ref_tab_val_MXParam_4,
        ___MN_Command_request_ref_tab_val_MXParam_5,
        _MN_Command_request_ref,
        _MN_Command_request_command_param,
        MN_Command_request,
        simNUTcmd,
        _simNUTcmd_val_MXParam,
        simNLTcmd,
        _simNLTcmd_val_MXParam,
        fWTset,
        _fWTset_val_MXParam,
        fWTupdate,
        _fWTupdate_val_MXParam,
        fWTdelete,
        _fWTdelete_val_MXParam,
        testMN,
        _testMN_val_MXParam,
        SimNUTcmd,
        SimNLTcmd,
        _FWT_fwtRef,
        _FWT_Fwt,
        FWT,
        __FWTset_fwtNo_tab,
        ___FWTset_fwtNo_tab_val_Fwt_0,
        _FWTset_fwtNo,
        _FWTset_fwt,
        FWTset,
        NTprotsSet,
        _NTprotsSet_val_Fwt_0,
        __FWTupdate_fwtNo_tab,
        ___FWTupdate_fwtNo_tab_val_Fwt_0,
        _FWTupdate_fwtNo,
        _FWTupdate_fwt,
        FWTupdate,
        NTprotsUpdate,
        _NTprotsUpdate_val_Fwt_0,
        __FWTdelete_fwtNo_tab,
        ___FWTdelete_fwtNo_tab_val_Fwt_0,
        _FWTdelete_fwtNo,
        _FWTdelete_fwt,
        FWTdelete,
        NTprotsDelete,
        _NTprotsDelete_val_Fwt_0,
        fntpset,
        _fntpset_val_Fwt,
        fntpupdate,
        _fntpupdate_val_Fwt,
        fntpdelete,
        _fntpdelete_val_Fwt,
        MNSAP_CC,
        MN_CmdConfirm,
        _MN_CmdConfirm_val_MXParam_0,
        _MN_CmdConfirm_val_MXParam_1,
        _MN_CmdConfirm_val_MXParam_2,
        _MN_CmdConfirm_val_MXParam_3,
        _MN_CmdConfirm_val_MXParam_4,
        _MN_CmdConfirm_val_MXParam_5,
        _MN_Command_confirm_commandRef,
        __MN_Command_confirm_ref_tab,
        ___MN_Command_confirm_ref_tab_val_MXParam_0,
        ___MN_Command_confirm_ref_tab_val_MXParam_1,
        ___MN_Command_confirm_ref_tab_val_MXParam_2,
        ___MN_Command_confirm_ref_tab_val_MXParam_3,
        ___MN_Command_confirm_ref_tab_val_MXParam_4,
        ___MN_Command_confirm_ref_tab_val_MXParam_5,
        _MN_Command_confirm_ref,
        _MN_Command_confirm_cmdConfirm_param,
        _MN_Command_confirm_errStatus,
        MN_Command_confirm,
        simNUTcmdConf,
        _simNUTcmdConf_val_MXParam,
        simNLTcmdConf,
        _simNLTcmdConf_val_MXParam,
        fWTsetConf,
        _fWTsetConf_val_MXParam,
        fWTupdateConf,
        _fWTupdateConf_val_MXParam,
        fWTdeletConf,
        _fWTdeletConf_val_MXParam,
        testMNConf,
        _testMNConf_val_MXParam,
        _FWTCONF_fwtRef,
        _FWTCONF_Fwt,
        FWTCONF,
        __FWTsetConf_fwtNo_tab,
        ___FWTsetConf_fwtNo_tab_val_Fwt_0,
        _FWTsetConf_fwtNo,
        _FWTsetConf_fwt,
        FWTsetConf,
        NTprotsSetConf,
        _NTprotsSetConf_val_Fwt_0,
        __FWTupdateConf_fwtNo_tab,
        ___FWTupdateConf_fwtNo_tab_val_Fwt_0,
        _FWTupdateConf_fwtNo,
        _FWTupdateConf_fwt,
        FWTupdateConf,
        NTprotsUpdateConf,
        _NTprotsUpdateConf_val_Fwt_0,
        __FWTdeleteConf_fwtNo_tab,
        ___FWTdeleteConf_fwtNo_tab_val_Fwt_0,
        _FWTdeleteConf_fwtNo,
        _FWTdeleteConf_fwt,
        FWTdeleteConf,
        NTprotsDeleteConf,
        _NTprotsDeleteConf_val_Fwt_0,
        fntpsetConf,
        _fntpsetConf_val_Fwt,
        fntpupdateConf,
        _fntpupdateConf_val_Fwt,
        fntpdeleteConf,
        _fntpdeleteConf_val_Fwt,
        MNSAP_RR,
        MN_Request,
        _MN_Request_val_MXParam_0,
        _MN_Request_val_MXParam_1,
        _MN_Request_val_MXParam_2,
        _MN_Request_val_MXParam_3,
        _MN_Request_val_MXParam_4,
        _MN_Request_val_MXParam_5,
        _MN_Request_val_MXParam_6,
        _MN_Request_val_MXParam_7,
        _MN_Request_request_commandRef,
        __MN_Request_request_ref_tab,
        ___MN_Request_request_ref_tab_val_MXParam_0,
        ___MN_Request_request_ref_tab_val_MXParam_1,
        ___MN_Request_request_ref_tab_val_MXParam_2,
        ___MN_Request_request_ref_tab_val_MXParam_3,
        ___MN_Request_request_ref_tab_val_MXParam_4,
        ___MN_Request_request_ref_tab_val_MXParam_5,
        ___MN_Request_request_ref_tab_val_MXParam_6,
        ___MN_Request_request_ref_tab_val_MXParam_7,
        _MN_Request_request_ref,
        _MN_Request_request_request_param,
        MN_Request_request,
        simNUTreq,
        _simNUTreq_val_MXParam,
        simNLTreq,
        _simNLTreq_val_MXParam,
        fWTsetNot,
        _fWTsetNot_val_MXParam,
        fWTupdateNot,
        _fWTupdateNot_val_MXParam,
        fWTdeletNot,
        _fWTdeletNot_val_MXParam,
        vCIcreatePeerMAC,
        _vCIcreatePeerMAC_val_MXParam,
        its_ssiPeerNot,
        _its_ssiPeerNot_val_MXParam,
        testMNecho,
        _testMNecho_val_MXParam,
        SimNUTreq,
        SimNLTreq,
        _FWTNOT_fwtRef,
        _FWTNOT_Fwt,
        FWTNOT,
        __FWTsetNot_fwtNo_tab,
        ___FWTsetNot_fwtNo_tab_val_Fwt_0,
        _FWTsetNot_fwtNo,
        _FWTsetNot_fwt,
        FWTsetNot,
        NTprotsSetNot,
        _NTprotsSetNot_val_Fwt_0,
        __FWTupdateNot_fwtNo_tab,
        ___FWTupdateNot_fwtNo_tab_val_Fwt_0,
        _FWTupdateNot_fwtNo,
        _FWTupdateNot_fwt,
        FWTupdateNot,
        NTprotsUpdateNot,
        _NTprotsUpdateNot_val_Fwt_0,
        __FWTdeleteNot_fwtNo_tab,
        ___FWTdeleteNot_fwtNo_tab_val_Fwt_0,
        _FWTdeleteNot_fwtNo,
        _FWTdeleteNot_fwt,
        FWTdeleteNot,
        NTprotsDeleteNot,
        _NTprotsDeleteNot_val_Fwt_0,
        fntpsetNot,
        _fntpsetNot_val_Fwt,
        fntpupdateNot,
        _fntpupdateNot_val_Fwt,
        fntpdeleteNot,
        _fntpdeleteNot_val_Fwt,
        _VCIcreatePeerMAC_reference,
        _VCIcreatePeerMAC_linkId,
        _VCIcreatePeerMAC_peerMac,
        VCIcreatePeerMAC,
        _Its_ssiPeerNot_sap,
        _Its_ssiPeerNot_mACaddress,
        _Its_ssiPeerNot_linkId,
        _Its_ssiPeerNot_its_ssiData,
        Its_ssiPeerNot,
        StationType,
        StationID,
        _TestMNecho_sap,
        _TestMNecho_info,
        TestMNecho,
        MNSAP_RC,
        MN_ReqConfirm,
        _MN_ReqConfirm_val_MXParam_0,
        _MN_ReqConfirm_val_MXParam_1,
        _MN_ReqConfirm_val_MXParam_2,
        _MN_ReqConfirm_val_MXParam_3,
        _MN_ReqConfirm_val_MXParam_4,
        _MN_ReqConfirm_val_MXParam_5,
        _MN_ReqConfirm_val_MXParam_6,
        _MN_ReqConfirm_val_MXParam_7,
        _MN_Request_confirm_commandRef,
        __MN_Request_confirm_ref_tab,
        ___MN_Request_confirm_ref_tab_val_MXParam_0,
        ___MN_Request_confirm_ref_tab_val_MXParam_1,
        ___MN_Request_confirm_ref_tab_val_MXParam_2,
        ___MN_Request_confirm_ref_tab_val_MXParam_3,
        ___MN_Request_confirm_ref_tab_val_MXParam_4,
        ___MN_Request_confirm_ref_tab_val_MXParam_5,
        ___MN_Request_confirm_ref_tab_val_MXParam_6,
        ___MN_Request_confirm_ref_tab_val_MXParam_7,
        _MN_Request_confirm_ref,
        _MN_Request_confirm_reqConfirm_param,
        _MN_Request_confirm_errStatus,
        MN_Request_confirm,
        simNUTreqConf,
        _simNUTreqConf_val_MXParam,
        simNLTreqConf,
        _simNLTreqConf_val_MXParam,
        fWTsetNotConf,
        _fWTsetNotConf_val_MXParam,
        fWTupdateNotConf,
        _fWTupdateNotConf_val_MXParam,
        fWTdeletNotConf,
        _fWTdeletNotConf_val_MXParam,
        vCIcreatePeerMACConf,
        _vCIcreatePeerMACConf_val_MXParam,
        its_ssiPeerNotConf,
        _its_ssiPeerNotConf_val_MXParam,
        testMNechoConf,
        _testMNechoConf_val_MXParam,
        _VCIPeerMAC_reference,
        _VCIPeerMAC_linkId,
        VCIPeerMAC,
        MISAP_CR,
        MI_Command,
        _MI_Command_val_MXParam_0,
        _MI_Command_val_MXParam_1,
        _MI_Command_val_MXParam_2,
        _MI_Command_val_MXParam_3,
        _MI_Command_val_MXParam_4,
        _MI_Command_val_MXParam_5,
        _MI_Command_val_MXParam_6,
        _MI_Command_val_MXParam_7,
        _MI_Command_val_MXParam_8,
        _MI_Command_val_MXParam_9,
        _MI_Command_val_MXParam_10,
        _MI_Command_val_MXParam_11,
        _MI_Command_val_MXParam_12,
        _MI_Command_val_MXParam_13,
        _MI_Command_request_linkID,
        _MI_Command_request_commandRef,
        __MI_Command_request_ref_tab,
        ___MI_Command_request_ref_tab_val_MXParam_0,
        ___MI_Command_request_ref_tab_val_MXParam_1,
        ___MI_Command_request_ref_tab_val_MXParam_2,
        ___MI_Command_request_ref_tab_val_MXParam_3,
        ___MI_Command_request_ref_tab_val_MXParam_4,
        ___MI_Command_request_ref_tab_val_MXParam_5,
        ___MI_Command_request_ref_tab_val_MXParam_6,
        ___MI_Command_request_ref_tab_val_MXParam_7,
        ___MI_Command_request_ref_tab_val_MXParam_8,
        ___MI_Command_request_ref_tab_val_MXParam_9,
        ___MI_Command_request_ref_tab_val_MXParam_10,
        ___MI_Command_request_ref_tab_val_MXParam_11,
        ___MI_Command_request_ref_tab_val_MXParam_12,
        ___MI_Command_request_ref_tab_val_MXParam_13,
        _MI_Command_request_ref,
        _MI_Command_request_command_param,
        MI_Command_request,
        simIUTcmd,
        _simIUTcmd_val_MXParam,
        regCmd,
        _regCmd_val_MXParam,
        cIstate,
        _cIstate_val_MXParam,
        wakeUp,
        _wakeUp_val_MXParam,
        rTScmd,
        _rTScmd_val_MXParam,
        rTSackCmd,
        _rTSackCmd_val_MXParam,
        cONcmd,
        _cONcmd_val_MXParam,
        rIcmd,
        _rIcmd_val_MXParam,
        manuCmd,
        _manuCmd_val_MXParam,
        vciCmd,
        _vciCmd_val_MXParam,
        monitor,
        _monitor_val_MXParam,
        unitDataCmd,
        _unitDataCmd_val_MXParam,
        testMI,
        _testMI_val_MXParam,
        unknownCmd,
        _unknownCmd_val_MXParam,
        UnknownCommand,
        SimIUTcmd,
        _RegCmd_scuId,
        _RegCmd_medID,
        RegCmd,
        CIstateChng,
        WakeUp,
        _RTScmd_reqID,
        _RTScmd_priority,
        _RTScmd_seqNo,
        _RTScmd_status,
        RTScmd,
        _ReqID_linkID,
        ReqID,
        _RTSackCmd_priority,
        _RTSackCmd_seqNo,
        _RTSackCmd_status,
        RTSackCmd,
        CONcmd,
        _RIcmd_linkID,
        _RIcmd_ri,
        RIcmd,
        RI,
        _VciCmd_fill,
        _VciCmd_linkID,
        _VciCmd_alive,
        VciCmd,
        __Monitor__item__paramNo,
        __Monitor__item__active,
        _Monitor__item_,
        Monitor,
        _UnitData_sourceAddr,
        _UnitData_destAddr,
        _UnitData_data,
        _UnitData_priority,
        _UnitData_parameter,
        UnitData,
        DataUnitData,
        ParameterUnitData,
        _MI_Command_confirm_linkID,
        _MI_Command_confirm_commandRef,
        _MI_Command_confirm_errStatus,
        MI_Command_confirm,
        MISAP_RR,
        MI_Request,
        _MI_Request_val_MXParam_0,
        _MI_Request_val_MXParam_1,
        _MI_Request_val_MXParam_2,
        _MI_Request_val_MXParam_3,
        _MI_Request_val_MXParam_4,
        _MI_Request_val_MXParam_5,
        _MI_Request_val_MXParam_6,
        _MI_Request_val_MXParam_7,
        _MI_Request_val_MXParam_8,
        _MI_Request_val_MXParam_9,
        _MI_Request_val_MXParam_10,
        _MI_Request_request_linkID,
        _MI_Request_request_commandRef,
        __MI_Request_request_ref_tab,
        ___MI_Request_request_ref_tab_val_MXParam_0,
        ___MI_Request_request_ref_tab_val_MXParam_1,
        ___MI_Request_request_ref_tab_val_MXParam_2,
        ___MI_Request_request_ref_tab_val_MXParam_3,
        ___MI_Request_request_ref_tab_val_MXParam_4,
        ___MI_Request_request_ref_tab_val_MXParam_5,
        ___MI_Request_request_ref_tab_val_MXParam_6,
        ___MI_Request_request_ref_tab_val_MXParam_7,
        ___MI_Request_request_ref_tab_val_MXParam_8,
        ___MI_Request_request_ref_tab_val_MXParam_9,
        ___MI_Request_request_ref_tab_val_MXParam_10,
        _MI_Request_request_ref,
        _MI_Request_request_request_param,
        MI_Request_request,
        simIUTreq,
        _simIUTreq_val_MXParam,
        regReq,
        _regReq_val_MXParam,
        prioReg,
        _prioReg_val_MXParam,
        rTSreq,
        _rTSreq_val_MXParam,
        rTSackReq,
        _rTSackReq_val_MXParam,
        rIreq,
        _rIreq_val_MXParam,
        manuReq,
        _manuReq_val_MXParam,
        events,
        _events_val_MXParam,
        posUpdateReq,
        _posUpdateReq_val_MXParam,
        unitDataReq,
        _unitDataReq_val_MXParam,
        testMIecho,
        _testMIecho_val_MXParam,
        SimIUTreq,
        _RegReq_medType,
        RegReq,
        _PrioReg_interferers,
        _PrioReg_timeout,
        PrioReg,
        _Interferers__item_,
        Interferers,
        _RTSreq_priority,
        _RTSreq_seqNo,
        _RTSreq_status,
        RTSreq,
        _RTSackReq_reqID,
        _RTSackReq_seqNo,
        _RTSackReq_status,
        RTSackReq,
        _RIreq_medType,
        _RIreq_riAccess,
        RIreq,
        RIaccess,
        _EVENT21218_eventRef,
        _EVENT21218_Event21218,
        EVENT21218,
        __Events21218_eventNo_tab,
        ___Events21218_eventNo_tab_val_Event21218_0,
        ___Events21218_eventNo_tab_val_Event21218_1,
        ___Events21218_eventNo_tab_val_Event21218_2,
        ___Events21218_eventNo_tab_val_Event21218_3,
        ___Events21218_eventNo_tab_val_Event21218_4,
        ___Events21218_eventNo_tab_val_Event21218_5,
        ___Events21218_eventNo_tab_val_Event21218_6,
        ___Events21218_eventNo_tab_val_Event21218_7,
        _Events21218_eventNo,
        _Events21218_event,
        Events21218,
        Events_21218,
        _Events_21218_val_Event21218_0,
        _Events_21218_val_Event21218_1,
        _Events_21218_val_Event21218_2,
        _Events_21218_val_Event21218_3,
        _Events_21218_val_Event21218_4,
        _Events_21218_val_Event21218_5,
        _Events_21218_val_Event21218_6,
        _Events_21218_val_Event21218_7,
        minUserPrio,
        _minUserPrio_val_Event21218,
        txQueueThreshold,
        _txQueueThreshold_val_Event21218,
        txQueueFull,
        _txQueueFull_val_Event21218,
        vciCreated,
        _vciCreated_val_Event21218,
        vciDeleted,
        _vciDeleted_val_Event21218,
        paramMonitor,
        _paramMonitor_val_Event21218,
        txQueueLow,
        _txQueueLow_val_Event21218,
        vciReset,
        _vciReset_val_Event21218,
        _E21218_0_priority,
        _E21218_0_linkID,
        E21218_0,
        E21218_1,
        E21218_2,
        E21218_3,
        E21218_4,
        E21218_5,
        E21218_6,
        E21218_7,
        PosUpdateReq,
        _TestMIecho_sap,
        _TestMIecho_info,
        TestMIecho,
        _MI_Request_confirm_linkID,
        _MI_Request_confirm_commandRef,
        _MI_Request_confirm_errStatus,
        MI_Request_confirm,
        _MI_Set_request_linkID,
        _MI_Set_request_commandRef,
        __MI_Set_request_set_param__item_,
        _MI_Set_request_set_param,
        MI_Set_request,
        _MI_Set_confirm_linkID,
        _MI_Set_confirm_commandRef,
        _MI_Set_confirm_set_param,
        MI_Set_confirm,
        _MI_Get_request_linkID,
        _MI_Get_request_commandRef,
        __MI_Get_request_get_param_no__item_,
        _MI_Get_request_get_param_no,
        MI_Get_request,
        _MI_Get_confirm_linkID,
        _MI_Get_confirm_commandRef,
        __MI_Get_confirm_get_param__item_,
        _MI_Get_confirm_get_param,
        MI_Get_confirm,
        MSSAP_CR,
        _MS_Command_request_commandRef,
        __MS_Command_request_ref_tab,
        ___MS_Command_request_ref_tab_val_MXParam_0,
        _MS_Command_request_ref,
        _MS_Command_request_command_param,
        MS_Command_request,
        MS_Command,
        _MS_Command_val_MXParam_0,
        testMS,
        _testMS_val_MXParam,
        MSSAP_CC,
        _MS_Command_confirm_commandRef,
        __MS_Command_confirm_ref_tab,
        ___MS_Command_confirm_ref_tab_val_MXParam_0,
        _MS_Command_confirm_ref,
        _MS_Command_confirm_cmdConfirm_param,
        _MS_Command_confirm_errStatus,
        MS_Command_confirm,
        MS_CmdConfirm,
        _MS_CmdConfirm_val_MXParam_0,
        testMSConf,
        _testMSConf_val_MXParam,
        MSSAP_RR,
        _MS_Request_request_commandRef,
        __MS_Request_request_ref_tab,
        ___MS_Request_request_ref_tab_val_MXParam_0,
        ___MS_Request_request_ref_tab_val_MXParam_1,
        ___MS_Request_request_ref_tab_val_MXParam_2,
        _MS_Request_request_ref,
        _MS_Request_request_request_param,
        MS_Request_request,
        MS_Request,
        _MS_Request_val_MXParam_0,
        _MS_Request_val_MXParam_1,
        _MS_Request_val_MXParam_2,
        iTS_S_Appl_ProcS_Reg,
        _iTS_S_Appl_ProcS_Reg_val_MXParam,
        iTS_S_Appl_ProcS_ReqFinal,
        _iTS_S_Appl_ProcS_ReqFinal_val_MXParam,
        testMSecho,
        _testMSecho_val_MXParam,
        _TestMSecho_sap,
        _TestMSecho_info,
        TestMSecho,
        MSSAP_RC,
        _MS_Request_confirm_commandRef,
        __MS_Request_confirm_ref_tab,
        ___MS_Request_confirm_ref_tab_val_MXParam_0,
        ___MS_Request_confirm_ref_tab_val_MXParam_1,
        ___MS_Request_confirm_ref_tab_val_MXParam_2,
        _MS_Request_confirm_ref,
        _MS_Request_confirm_reqConfirm_param,
        _MS_Request_confirm_errStatus,
        MS_Request_confirm,
        MS_ReqConfirm,
        _MS_ReqConfirm_val_MXParam_0,
        _MS_ReqConfirm_val_MXParam_1,
        _MS_ReqConfirm_val_MXParam_2,
        iTS_S_Appl_ProcS_RegConf,
        _iTS_S_Appl_ProcS_RegConf_val_MXParam,
        iTS_S_Appl_ProcS_ReqFinalConf,
        _iTS_S_Appl_ProcS_ReqFinalConf_val_MXParam,
        testMSechoConf,
        _testMSechoConf_val_MXParam,
        MASAP_CR,
        _MA_Command_request_commandRef,
        __MA_Command_request_ref_tab,
        ___MA_Command_request_ref_tab_val_MXParam_0,
        _MA_Command_request_ref,
        _MA_Command_request_command_param,
        MA_Command_request,
        MA_Command,
        _MA_Command_val_MXParam_0,
        testMA,
        _testMA_val_MXParam,
        MASAP_CC,
        testMAConf,
        _testMAConf_val_MXParam,
        _MA_Command_confirm_commandRef,
        __MA_Command_confirm_ref_tab,
        ___MA_Command_confirm_ref_tab_val_MXParam_0,
        _MA_Command_confirm_ref,
        _MA_Command_confirm_cmdConfirm_param,
        _MA_Command_confirm_errStatus,
        MA_Command_confirm,
        MA_CmdConfirm,
        _MA_CmdConfirm_val_MXParam_0,
        MASAP_RR,
        _MA_Request_request_commandRef,
        __MA_Request_request_ref_tab,
        ___MA_Request_request_ref_tab_val_MXParam_0,
        ___MA_Request_request_ref_tab_val_MXParam_1,
        ___MA_Request_request_ref_tab_val_MXParam_2,
        _MA_Request_request_ref,
        _MA_Request_request_request_param,
        MA_Request_request,
        MA_Request,
        _MA_Request_val_MXParam_0,
        _MA_Request_val_MXParam_1,
        _MA_Request_val_MXParam_2,
        iTS_S_Appl_Proc_Reg,
        _iTS_S_Appl_Proc_Reg_val_MXParam,
        iTS_S_Appl_Proc_ReqFinal,
        _iTS_S_Appl_Proc_ReqFinal_val_MXParam,
        testMAecho,
        _testMAecho_val_MXParam,
        _TestMAecho_sap,
        _TestMAecho_info,
        TestMAecho,
        MASAP_RC,
        _MA_Request_confirm_commandRef,
        __MA_Request_confirm_ref_tab,
        ___MA_Request_confirm_ref_tab_val_MXParam_0,
        ___MA_Request_confirm_ref_tab_val_MXParam_1,
        ___MA_Request_confirm_ref_tab_val_MXParam_2,
        _MA_Request_confirm_ref,
        _MA_Request_confirm_reqConfirm_param,
        _MA_Request_confirm_errStatus,
        MA_Request_confirm,
        MA_ReqConfirm,
        _MA_ReqConfirm_val_MXParam_0,
        _MA_ReqConfirm_val_MXParam_1,
        _MA_ReqConfirm_val_MXParam_2,
        iTS_S_Appl_Proc_RegConf,
        _iTS_S_Appl_Proc_RegConf_val_MXParam,
        iTS_S_Appl_Proc_ReqFinalConf,
        _iTS_S_Appl_Proc_ReqFinalConf_val_MXParam,
        testMAechoConf,
        _testMAechoConf_val_MXParam,
        ErrStatus,
        CommandRef,
    ]

class CAM_PDU_Descriptions:

    _name_  = 'CAM-PDU-Descriptions'
    _oid_   = [0, 4, 0, 5, 1, 302637, 2, 1]
    
    _obj_ = [
        'CAM',
        'CoopAwareness',
        'CamParameters',
        'HighFrequencyContainer',
        'LowFrequencyContainer',
        'SpecialVehicleContainer',
        'BasicContainer',
        'BasicVehicleContainerHighFrequency',
        'BasicVehicleContainerLowFrequency',
        'PublicTransportContainer',
        'SpecialTransportContainer',
        'DangerousGoodsContainer',
        'RoadWorksContainerBasic',
        'RescueContainer',
        'EmergencyContainer',
        'SafetyCarContainer',
        'RSUContainerHighFrequency',
        'GenerationDeltaTime',
        ]
    _type_ = [
        'CAM',
        'CoopAwareness',
        'CamParameters',
        'HighFrequencyContainer',
        'LowFrequencyContainer',
        'SpecialVehicleContainer',
        'BasicContainer',
        'BasicVehicleContainerHighFrequency',
        'BasicVehicleContainerLowFrequency',
        'PublicTransportContainer',
        'SpecialTransportContainer',
        'DangerousGoodsContainer',
        'RoadWorksContainerBasic',
        'RescueContainer',
        'EmergencyContainer',
        'SafetyCarContainer',
        'RSUContainerHighFrequency',
        'GenerationDeltaTime',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< CAM >-----#
    CAM = SEQ(name='CAM', mode=MODE_TYPE)
    _CAM_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ItsPduHeader')))
    _CAM_cam = SEQ(name='cam', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CAM-PDU-Descriptions', 'CoopAwareness')))
    CAM._cont = ASN1Dict([
        ('header', _CAM_header),
        ('cam', _CAM_cam),
        ])
    CAM._ext = None
    
    #-----< CoopAwareness >-----#
    CoopAwareness = SEQ(name='CoopAwareness', mode=MODE_TYPE)
    _CoopAwareness_generationDeltaTime = INT(name='generationDeltaTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CAM-PDU-Descriptions', 'GenerationDeltaTime')))
    _CoopAwareness_camParameters = SEQ(name='camParameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CAM-PDU-Descriptions', 'CamParameters')))
    CoopAwareness._cont = ASN1Dict([
        ('generationDeltaTime', _CoopAwareness_generationDeltaTime),
        ('camParameters', _CoopAwareness_camParameters),
        ])
    CoopAwareness._ext = None
    
    #-----< CamParameters >-----#
    CamParameters = SEQ(name='CamParameters', mode=MODE_TYPE)
    _CamParameters_basicContainer = SEQ(name='basicContainer', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CAM-PDU-Descriptions', 'BasicContainer')))
    _CamParameters_highFrequencyContainer = CHOICE(name='highFrequencyContainer', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CAM-PDU-Descriptions', 'HighFrequencyContainer')))
    _CamParameters_lowFrequencyContainer = CHOICE(name='lowFrequencyContainer', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CAM-PDU-Descriptions', 'LowFrequencyContainer')), opt=True)
    _CamParameters_specialVehicleContainer = CHOICE(name='specialVehicleContainer', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CAM-PDU-Descriptions', 'SpecialVehicleContainer')), opt=True)
    CamParameters._cont = ASN1Dict([
        ('basicContainer', _CamParameters_basicContainer),
        ('highFrequencyContainer', _CamParameters_highFrequencyContainer),
        ('lowFrequencyContainer', _CamParameters_lowFrequencyContainer),
        ('specialVehicleContainer', _CamParameters_specialVehicleContainer),
        ])
    CamParameters._ext = []
    
    #-----< HighFrequencyContainer >-----#
    HighFrequencyContainer = CHOICE(name='HighFrequencyContainer', mode=MODE_TYPE)
    _HighFrequencyContainer_basicVehicleContainerHighFrequency = SEQ(name='basicVehicleContainerHighFrequency', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CAM-PDU-Descriptions', 'BasicVehicleContainerHighFrequency')))
    _HighFrequencyContainer_rsuContainerHighFrequency = SEQ(name='rsuContainerHighFrequency', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CAM-PDU-Descriptions', 'RSUContainerHighFrequency')))
    HighFrequencyContainer._cont = ASN1Dict([
        ('basicVehicleContainerHighFrequency', _HighFrequencyContainer_basicVehicleContainerHighFrequency),
        ('rsuContainerHighFrequency', _HighFrequencyContainer_rsuContainerHighFrequency),
        ])
    HighFrequencyContainer._ext = []
    
    #-----< LowFrequencyContainer >-----#
    LowFrequencyContainer = CHOICE(name='LowFrequencyContainer', mode=MODE_TYPE)
    _LowFrequencyContainer_basicVehicleContainerLowFrequency = SEQ(name='basicVehicleContainerLowFrequency', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CAM-PDU-Descriptions', 'BasicVehicleContainerLowFrequency')))
    LowFrequencyContainer._cont = ASN1Dict([
        ('basicVehicleContainerLowFrequency', _LowFrequencyContainer_basicVehicleContainerLowFrequency),
        ])
    LowFrequencyContainer._ext = []
    
    #-----< SpecialVehicleContainer >-----#
    SpecialVehicleContainer = CHOICE(name='SpecialVehicleContainer', mode=MODE_TYPE)
    _SpecialVehicleContainer_publicTransportContainer = SEQ(name='publicTransportContainer', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CAM-PDU-Descriptions', 'PublicTransportContainer')))
    _SpecialVehicleContainer_specialTransportContainer = SEQ(name='specialTransportContainer', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CAM-PDU-Descriptions', 'SpecialTransportContainer')))
    _SpecialVehicleContainer_dangerousGoodsContainer = SEQ(name='dangerousGoodsContainer', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CAM-PDU-Descriptions', 'DangerousGoodsContainer')))
    _SpecialVehicleContainer_roadWorksContainerBasic = SEQ(name='roadWorksContainerBasic', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CAM-PDU-Descriptions', 'RoadWorksContainerBasic')))
    _SpecialVehicleContainer_rescueContainer = SEQ(name='rescueContainer', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CAM-PDU-Descriptions', 'RescueContainer')))
    _SpecialVehicleContainer_emergencyContainer = SEQ(name='emergencyContainer', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CAM-PDU-Descriptions', 'EmergencyContainer')))
    _SpecialVehicleContainer_safetyCarContainer = SEQ(name='safetyCarContainer', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CAM-PDU-Descriptions', 'SafetyCarContainer')))
    SpecialVehicleContainer._cont = ASN1Dict([
        ('publicTransportContainer', _SpecialVehicleContainer_publicTransportContainer),
        ('specialTransportContainer', _SpecialVehicleContainer_specialTransportContainer),
        ('dangerousGoodsContainer', _SpecialVehicleContainer_dangerousGoodsContainer),
        ('roadWorksContainerBasic', _SpecialVehicleContainer_roadWorksContainerBasic),
        ('rescueContainer', _SpecialVehicleContainer_rescueContainer),
        ('emergencyContainer', _SpecialVehicleContainer_emergencyContainer),
        ('safetyCarContainer', _SpecialVehicleContainer_safetyCarContainer),
        ])
    SpecialVehicleContainer._ext = []
    
    #-----< BasicContainer >-----#
    BasicContainer = SEQ(name='BasicContainer', mode=MODE_TYPE)
    _BasicContainer_stationType = INT(name='stationType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'StationType')))
    _BasicContainer_referencePosition = SEQ(name='referencePosition', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ReferencePosition')))
    BasicContainer._cont = ASN1Dict([
        ('stationType', _BasicContainer_stationType),
        ('referencePosition', _BasicContainer_referencePosition),
        ])
    BasicContainer._ext = []
    
    #-----< BasicVehicleContainerHighFrequency >-----#
    BasicVehicleContainerHighFrequency = SEQ(name='BasicVehicleContainerHighFrequency', mode=MODE_TYPE)
    _BasicVehicleContainerHighFrequency_heading = SEQ(name='heading', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Heading')))
    _BasicVehicleContainerHighFrequency_speed = SEQ(name='speed', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Speed')))
    _BasicVehicleContainerHighFrequency_driveDirection = ENUM(name='driveDirection', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'DriveDirection')))
    _BasicVehicleContainerHighFrequency_vehicleLength = SEQ(name='vehicleLength', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'VehicleLength')))
    _BasicVehicleContainerHighFrequency_vehicleWidth = INT(name='vehicleWidth', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'VehicleWidth')))
    _BasicVehicleContainerHighFrequency_longitudinalAcceleration = SEQ(name='longitudinalAcceleration', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'LongitudinalAcceleration')))
    _BasicVehicleContainerHighFrequency_curvature = SEQ(name='curvature', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Curvature')))
    _BasicVehicleContainerHighFrequency_curvatureCalculationMode = ENUM(name='curvatureCalculationMode', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'CurvatureCalculationMode')))
    _BasicVehicleContainerHighFrequency_yawRate = SEQ(name='yawRate', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'YawRate')))
    _BasicVehicleContainerHighFrequency_accelerationControl = BIT_STR(name='accelerationControl', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'AccelerationControl')), opt=True)
    _BasicVehicleContainerHighFrequency_lanePosition = INT(name='lanePosition', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'LanePosition')), opt=True)
    _BasicVehicleContainerHighFrequency_steeringWheelAngle = SEQ(name='steeringWheelAngle', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'SteeringWheelAngle')), opt=True)
    _BasicVehicleContainerHighFrequency_lateralAcceleration = SEQ(name='lateralAcceleration', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'LateralAcceleration')), opt=True)
    _BasicVehicleContainerHighFrequency_verticalAcceleration = SEQ(name='verticalAcceleration', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'VerticalAcceleration')), opt=True)
    _BasicVehicleContainerHighFrequency_performanceClass = INT(name='performanceClass', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'PerformanceClass')), opt=True)
    _BasicVehicleContainerHighFrequency_cenDsrcTollingZone = SEQ(name='cenDsrcTollingZone', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'CenDsrcTollingZone')), opt=True)
    BasicVehicleContainerHighFrequency._cont = ASN1Dict([
        ('heading', _BasicVehicleContainerHighFrequency_heading),
        ('speed', _BasicVehicleContainerHighFrequency_speed),
        ('driveDirection', _BasicVehicleContainerHighFrequency_driveDirection),
        ('vehicleLength', _BasicVehicleContainerHighFrequency_vehicleLength),
        ('vehicleWidth', _BasicVehicleContainerHighFrequency_vehicleWidth),
        ('longitudinalAcceleration', _BasicVehicleContainerHighFrequency_longitudinalAcceleration),
        ('curvature', _BasicVehicleContainerHighFrequency_curvature),
        ('curvatureCalculationMode', _BasicVehicleContainerHighFrequency_curvatureCalculationMode),
        ('yawRate', _BasicVehicleContainerHighFrequency_yawRate),
        ('accelerationControl', _BasicVehicleContainerHighFrequency_accelerationControl),
        ('lanePosition', _BasicVehicleContainerHighFrequency_lanePosition),
        ('steeringWheelAngle', _BasicVehicleContainerHighFrequency_steeringWheelAngle),
        ('lateralAcceleration', _BasicVehicleContainerHighFrequency_lateralAcceleration),
        ('verticalAcceleration', _BasicVehicleContainerHighFrequency_verticalAcceleration),
        ('performanceClass', _BasicVehicleContainerHighFrequency_performanceClass),
        ('cenDsrcTollingZone', _BasicVehicleContainerHighFrequency_cenDsrcTollingZone),
        ])
    BasicVehicleContainerHighFrequency._ext = None
    
    #-----< BasicVehicleContainerLowFrequency >-----#
    BasicVehicleContainerLowFrequency = SEQ(name='BasicVehicleContainerLowFrequency', mode=MODE_TYPE)
    _BasicVehicleContainerLowFrequency_vehicleRole = ENUM(name='vehicleRole', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'VehicleRole')))
    _BasicVehicleContainerLowFrequency_exteriorLights = BIT_STR(name='exteriorLights', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ExteriorLights')))
    _BasicVehicleContainerLowFrequency_pathHistory = SEQ_OF(name='pathHistory', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'PathHistory')))
    BasicVehicleContainerLowFrequency._cont = ASN1Dict([
        ('vehicleRole', _BasicVehicleContainerLowFrequency_vehicleRole),
        ('exteriorLights', _BasicVehicleContainerLowFrequency_exteriorLights),
        ('pathHistory', _BasicVehicleContainerLowFrequency_pathHistory),
        ])
    BasicVehicleContainerLowFrequency._ext = None
    
    #-----< PublicTransportContainer >-----#
    PublicTransportContainer = SEQ(name='PublicTransportContainer', mode=MODE_TYPE)
    _PublicTransportContainer_embarkationStatus = BOOL(name='embarkationStatus', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'EmbarkationStatus')))
    _PublicTransportContainer_ptActivation = SEQ(name='ptActivation', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'PtActivation')), opt=True)
    PublicTransportContainer._cont = ASN1Dict([
        ('embarkationStatus', _PublicTransportContainer_embarkationStatus),
        ('ptActivation', _PublicTransportContainer_ptActivation),
        ])
    PublicTransportContainer._ext = None
    
    #-----< SpecialTransportContainer >-----#
    SpecialTransportContainer = SEQ(name='SpecialTransportContainer', mode=MODE_TYPE)
    _SpecialTransportContainer_specialTransportType = BIT_STR(name='specialTransportType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'SpecialTransportType')))
    _SpecialTransportContainer_lightBarSirenInUse = BIT_STR(name='lightBarSirenInUse', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'LightBarSirenInUse')))
    SpecialTransportContainer._cont = ASN1Dict([
        ('specialTransportType', _SpecialTransportContainer_specialTransportType),
        ('lightBarSirenInUse', _SpecialTransportContainer_lightBarSirenInUse),
        ])
    SpecialTransportContainer._ext = None
    
    #-----< DangerousGoodsContainer >-----#
    DangerousGoodsContainer = SEQ(name='DangerousGoodsContainer', mode=MODE_TYPE)
    _DangerousGoodsContainer_dangerousGoodsBasic = ENUM(name='dangerousGoodsBasic', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'DangerousGoodsBasic')))
    DangerousGoodsContainer._cont = ASN1Dict([
        ('dangerousGoodsBasic', _DangerousGoodsContainer_dangerousGoodsBasic),
        ])
    DangerousGoodsContainer._ext = None
    
    #-----< RoadWorksContainerBasic >-----#
    RoadWorksContainerBasic = SEQ(name='RoadWorksContainerBasic', mode=MODE_TYPE)
    _RoadWorksContainerBasic_roadworksSubCauseCode = INT(name='roadworksSubCauseCode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'RoadworksSubCauseCode')), opt=True)
    _RoadWorksContainerBasic_lightBarSirenInUse = BIT_STR(name='lightBarSirenInUse', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'LightBarSirenInUse')))
    _RoadWorksContainerBasic_closedLanes = SEQ(name='closedLanes', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ClosedLanes')), opt=True)
    RoadWorksContainerBasic._cont = ASN1Dict([
        ('roadworksSubCauseCode', _RoadWorksContainerBasic_roadworksSubCauseCode),
        ('lightBarSirenInUse', _RoadWorksContainerBasic_lightBarSirenInUse),
        ('closedLanes', _RoadWorksContainerBasic_closedLanes),
        ])
    RoadWorksContainerBasic._ext = None
    
    #-----< RescueContainer >-----#
    RescueContainer = SEQ(name='RescueContainer', mode=MODE_TYPE)
    _RescueContainer_lightBarSirenInUse = BIT_STR(name='lightBarSirenInUse', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'LightBarSirenInUse')))
    RescueContainer._cont = ASN1Dict([
        ('lightBarSirenInUse', _RescueContainer_lightBarSirenInUse),
        ])
    RescueContainer._ext = None
    
    #-----< EmergencyContainer >-----#
    EmergencyContainer = SEQ(name='EmergencyContainer', mode=MODE_TYPE)
    _EmergencyContainer_lightBarSirenInUse = BIT_STR(name='lightBarSirenInUse', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'LightBarSirenInUse')))
    _EmergencyContainer_incidentIndication = SEQ(name='incidentIndication', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'CauseCode')), opt=True)
    _EmergencyContainer_emergencyPriority = BIT_STR(name='emergencyPriority', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'EmergencyPriority')), opt=True)
    EmergencyContainer._cont = ASN1Dict([
        ('lightBarSirenInUse', _EmergencyContainer_lightBarSirenInUse),
        ('incidentIndication', _EmergencyContainer_incidentIndication),
        ('emergencyPriority', _EmergencyContainer_emergencyPriority),
        ])
    EmergencyContainer._ext = None
    
    #-----< SafetyCarContainer >-----#
    SafetyCarContainer = SEQ(name='SafetyCarContainer', mode=MODE_TYPE)
    _SafetyCarContainer_lightBarSirenInUse = BIT_STR(name='lightBarSirenInUse', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'LightBarSirenInUse')))
    _SafetyCarContainer_incidentIndication = SEQ(name='incidentIndication', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'CauseCode')), opt=True)
    _SafetyCarContainer_trafficRule = ENUM(name='trafficRule', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'TrafficRule')), opt=True)
    _SafetyCarContainer_speedLimit = INT(name='speedLimit', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'SpeedLimit')), opt=True)
    SafetyCarContainer._cont = ASN1Dict([
        ('lightBarSirenInUse', _SafetyCarContainer_lightBarSirenInUse),
        ('incidentIndication', _SafetyCarContainer_incidentIndication),
        ('trafficRule', _SafetyCarContainer_trafficRule),
        ('speedLimit', _SafetyCarContainer_speedLimit),
        ])
    SafetyCarContainer._ext = None
    
    #-----< RSUContainerHighFrequency >-----#
    RSUContainerHighFrequency = SEQ(name='RSUContainerHighFrequency', mode=MODE_TYPE)
    _RSUContainerHighFrequency_protectedCommunicationZonesRSU = SEQ_OF(name='protectedCommunicationZonesRSU', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ProtectedCommunicationZonesRSU')), opt=True)
    RSUContainerHighFrequency._cont = ASN1Dict([
        ('protectedCommunicationZonesRSU', _RSUContainerHighFrequency_protectedCommunicationZonesRSU),
        ])
    RSUContainerHighFrequency._ext = []
    
    #-----< GenerationDeltaTime >-----#
    GenerationDeltaTime = INT(name='GenerationDeltaTime', mode=MODE_TYPE)
    GenerationDeltaTime._cont = ASN1Dict([('oneMilliSec', 1)])
    GenerationDeltaTime._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    _all_ = [
        _CAM_header,
        _CAM_cam,
        CAM,
        _CoopAwareness_generationDeltaTime,
        _CoopAwareness_camParameters,
        CoopAwareness,
        _CamParameters_basicContainer,
        _CamParameters_highFrequencyContainer,
        _CamParameters_lowFrequencyContainer,
        _CamParameters_specialVehicleContainer,
        CamParameters,
        _HighFrequencyContainer_basicVehicleContainerHighFrequency,
        _HighFrequencyContainer_rsuContainerHighFrequency,
        HighFrequencyContainer,
        _LowFrequencyContainer_basicVehicleContainerLowFrequency,
        LowFrequencyContainer,
        _SpecialVehicleContainer_publicTransportContainer,
        _SpecialVehicleContainer_specialTransportContainer,
        _SpecialVehicleContainer_dangerousGoodsContainer,
        _SpecialVehicleContainer_roadWorksContainerBasic,
        _SpecialVehicleContainer_rescueContainer,
        _SpecialVehicleContainer_emergencyContainer,
        _SpecialVehicleContainer_safetyCarContainer,
        SpecialVehicleContainer,
        _BasicContainer_stationType,
        _BasicContainer_referencePosition,
        BasicContainer,
        _BasicVehicleContainerHighFrequency_heading,
        _BasicVehicleContainerHighFrequency_speed,
        _BasicVehicleContainerHighFrequency_driveDirection,
        _BasicVehicleContainerHighFrequency_vehicleLength,
        _BasicVehicleContainerHighFrequency_vehicleWidth,
        _BasicVehicleContainerHighFrequency_longitudinalAcceleration,
        _BasicVehicleContainerHighFrequency_curvature,
        _BasicVehicleContainerHighFrequency_curvatureCalculationMode,
        _BasicVehicleContainerHighFrequency_yawRate,
        _BasicVehicleContainerHighFrequency_accelerationControl,
        _BasicVehicleContainerHighFrequency_lanePosition,
        _BasicVehicleContainerHighFrequency_steeringWheelAngle,
        _BasicVehicleContainerHighFrequency_lateralAcceleration,
        _BasicVehicleContainerHighFrequency_verticalAcceleration,
        _BasicVehicleContainerHighFrequency_performanceClass,
        _BasicVehicleContainerHighFrequency_cenDsrcTollingZone,
        BasicVehicleContainerHighFrequency,
        _BasicVehicleContainerLowFrequency_vehicleRole,
        _BasicVehicleContainerLowFrequency_exteriorLights,
        _BasicVehicleContainerLowFrequency_pathHistory,
        BasicVehicleContainerLowFrequency,
        _PublicTransportContainer_embarkationStatus,
        _PublicTransportContainer_ptActivation,
        PublicTransportContainer,
        _SpecialTransportContainer_specialTransportType,
        _SpecialTransportContainer_lightBarSirenInUse,
        SpecialTransportContainer,
        _DangerousGoodsContainer_dangerousGoodsBasic,
        DangerousGoodsContainer,
        _RoadWorksContainerBasic_roadworksSubCauseCode,
        _RoadWorksContainerBasic_lightBarSirenInUse,
        _RoadWorksContainerBasic_closedLanes,
        RoadWorksContainerBasic,
        _RescueContainer_lightBarSirenInUse,
        RescueContainer,
        _EmergencyContainer_lightBarSirenInUse,
        _EmergencyContainer_incidentIndication,
        _EmergencyContainer_emergencyPriority,
        EmergencyContainer,
        _SafetyCarContainer_lightBarSirenInUse,
        _SafetyCarContainer_incidentIndication,
        _SafetyCarContainer_trafficRule,
        _SafetyCarContainer_speedLimit,
        SafetyCarContainer,
        _RSUContainerHighFrequency_protectedCommunicationZonesRSU,
        RSUContainerHighFrequency,
        GenerationDeltaTime,
    ]

class CITSapplMgmtApplReg:

    _name_  = 'CITSapplMgmtApplReg'
    _oid_   = [1, 0, 17419, 2, 1]
    
    _obj_ = [
        'ITSapObRegistry',
        'ITSapOb',
        'ITSapObPorts',
        'ITSapObPort',
        'ITSAPOBSR',
        'ITSapObPortRule',
        'ITSapObPortRules',
        'iTSapObRxTx',
        'iTSapObLch',
        'iTSapObPn',
        'PortRxTx',
        'LogicalChannelPrio',
        'ITSObName',
        'ITSapObType',
        'ITSObOwner',
        'ITSObOwnerName',
        'ITSObOwnerType',
        'ITSapObPriority',
        'ITSapObCertificate',
        'IssuingSA',
        'SAname',
        'CertStartDate',
        'CertEndDate',
        'CertStatus',
        'CertBlocked',
        'ITSmsgSetRegistry',
        'ITSmsgSet',
        'ITSregRegionRegistry',
        'ITSregRegion',
        'ITS-RegPolicyAuthority',
        'URLreg',
        'ITSRPAREA',
        'ITS-RParea',
        'ITS-RPareaTypes',
        'rpAreaCountryCode',
        'rpAreaGeoPolygon',
        'GeoPolygon',
        'GeoCoordinates',
        'CountryCode',
        'ITSpolRegionRegistry',
        'ITSpolRegion',
        'ITSportNumberRegistry',
        'ITSportNumber',
        'ItsAppInfo',
        'NTprotocol',
        'ProtocolReference',
        'ITSflowTypeRegistry',
        'ITSflowType',
        'FlowTypeID',
        'ITSlchRegistry',
        'ITSlch',
        'ITSsuRegistry',
        'ITSsu',
        'ITSscuRegistry',
        'ITSscu',
        'ITSSappRegistry',
        'ITSSapPrPr',
        'RegEntryOwner',
        'ITSemRegistry',
        'ITSem',
        'ITSaooRegistry',
        'ITSaoo',
        'Registry',
        'ITSmso',
        'ITSSapdRegistry',
        'ITSSapd',
        'ITSaid',
        'ITSmsgSetID',
        'ITSemID',
        'ITSsuID',
        'ITSscuID',
        'ITSSappid',
        'ITSrrID',
        'ITSprID',
        'ITSaooID',
        'ITSmsoID',
        'ITSSapdID',
        'oidISO',
        'oidETSI',
        'oidIEEE',
        'oidCEN',
        'fntpRefNo',
        'version',
        ]
    _type_ = [
        'ITSapObRegistry',
        'ITSapOb',
        'ITSapObPorts',
        'ITSapObPort',
        'ITSAPOBSR',
        'ITSapObPortRule',
        'PortRxTx',
        'LogicalChannelPrio',
        'ITSObName',
        'ITSapObType',
        'ITSObOwner',
        'ITSObOwnerName',
        'ITSObOwnerType',
        'ITSapObPriority',
        'ITSapObCertificate',
        'IssuingSA',
        'SAname',
        'CertStartDate',
        'CertEndDate',
        'CertStatus',
        'CertBlocked',
        'ITSmsgSetRegistry',
        'ITSmsgSet',
        'ITSregRegionRegistry',
        'ITSregRegion',
        'ITS-RegPolicyAuthority',
        'URLreg',
        'ITSRPAREA',
        'ITS-RParea',
        'GeoPolygon',
        'GeoCoordinates',
        'CountryCode',
        'ITSpolRegionRegistry',
        'ITSpolRegion',
        'ITSportNumberRegistry',
        'ITSportNumber',
        'ItsAppInfo',
        'NTprotocol',
        'ProtocolReference',
        'ITSflowTypeRegistry',
        'ITSflowType',
        'FlowTypeID',
        'ITSlchRegistry',
        'ITSlch',
        'ITSsuRegistry',
        'ITSsu',
        'ITSscuRegistry',
        'ITSscu',
        'ITSSappRegistry',
        'ITSSapPrPr',
        'RegEntryOwner',
        'ITSemRegistry',
        'ITSem',
        'ITSaooRegistry',
        'ITSaoo',
        'Registry',
        'ITSmso',
        'ITSSapdRegistry',
        'ITSSapd',
        'ITSaid',
        'ITSmsgSetID',
        'ITSemID',
        'ITSsuID',
        'ITSscuID',
        'ITSSappid',
        'ITSrrID',
        'ITSprID',
        'ITSaooID',
        'ITSmsoID',
        'ITSSapdID',
        ]
    _set_ = [
        'ITSapObPortRules',
        'ITS-RPareaTypes',
        ]
    _val_ = [
        'iTSapObRxTx',
        'iTSapObLch',
        'iTSapObPn',
        'rpAreaCountryCode',
        'rpAreaGeoPolygon',
        'oidISO',
        'oidETSI',
        'oidIEEE',
        'oidCEN',
        'fntpRefNo',
        'version',
        ]
    _class_ = [
        'ITSAPOBSR',
        'ITSapObPortRules',
        'iTSapObRxTx',
        'iTSapObLch',
        'iTSapObPn',
        'ITSRPAREA',
        'ITS-RPareaTypes',
        'rpAreaCountryCode',
        'rpAreaGeoPolygon',
        ]
    _param_ = [
        ]
    
    #-----< ITSapObRegistry >-----#
    ITSapObRegistry = SEQ_OF(name='ITSapObRegistry', mode=MODE_TYPE)
    _ITSapObRegistry__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSapOb')))
    ITSapObRegistry._cont = _ITSapObRegistry__item_
    
    #-----< ITSapOb >-----#
    ITSapOb = SEQ(name='ITSapOb', mode=MODE_TYPE)
    _ITSapOb_iTSaid = CHOICE(name='iTSaid', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSaid')))
    _ITSapOb_iTSapObName = OCT_STR(name='iTSapObName', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSObName')))
    _ITSapOb_iTSapObType = INT(name='iTSapObType', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSapObType')))
    _ITSapOb_iTSapObOwner = SEQ(name='iTSapObOwner', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSObOwner')))
    _ITSapOb_iTSapObCert = SEQ(name='iTSapObCert', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSapObCertificate')))
    _ITSapOb_iTSapObPorts = SEQ_OF(name='iTSapObPorts', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSapObPorts')))
    ITSapOb._cont = ASN1Dict([
        ('iTSaid', _ITSapOb_iTSaid),
        ('iTSapObName', _ITSapOb_iTSapObName),
        ('iTSapObType', _ITSapOb_iTSapObType),
        ('iTSapObOwner', _ITSapOb_iTSapObOwner),
        ('iTSapObCert', _ITSapOb_iTSapObCert),
        ('iTSapObPorts', _ITSapOb_iTSapObPorts),
        ])
    ITSapOb._ext = None
    
    #-----< ITSapObPorts >-----#
    ITSapObPorts = SEQ_OF(name='ITSapObPorts', mode=MODE_TYPE)
    _ITSapObPorts__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    __ITSapObPorts__item__portNo = CHOICE(name='portNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplReq', 'ITSSappRxTxPortNo')))
    __ITSapObPorts__item__rules = SEQ_OF(name='rules', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___ITSapObPorts__item__rules__item_ = SEQ_OF(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSapObPort')))
    __ITSapObPorts__item__rules._cont = ___ITSapObPorts__item__rules__item_
    _ITSapObPorts__item_._cont = ASN1Dict([
        ('portNo', __ITSapObPorts__item__portNo),
        ('rules', __ITSapObPorts__item__rules),
        ])
    _ITSapObPorts__item_._ext = None
    ITSapObPorts._cont = _ITSapObPorts__item_
    
    #-----< ITSapObPort >-----#
    ITSapObPort = SEQ_OF(name='ITSapObPort', mode=MODE_TYPE)
    _ITSapObPort__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSapObPortRule')))
    ITSapObPort._cont = _ITSapObPort__item_
    
    #-----< ITSAPOBSR >-----#
    ITSAPOBSR = CLASS(name='ITSAPOBSR', mode=MODE_TYPE)
    _ITSAPOBSR_ruleRef = INT(name='ruleRef', mode=MODE_VALUE)
    _ITSAPOBSR_ruleRef._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _ITSAPOBSR_Rule = OPEN(name='Rule', mode=MODE_TYPE)
    ITSAPOBSR._cont = ASN1Dict([
        ('ruleRef', _ITSAPOBSR_ruleRef),
        ('Rule', _ITSAPOBSR_Rule),
        ])
    
    #-----< ITSapObPortRule >-----#
    ITSapObPortRule = SEQ(name='ITSapObPortRule', mode=MODE_TYPE)
    _ITSapObPortRule_ruleNo = INT(name='ruleNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CITSapplMgmtApplReg', 'ITSAPOBSR'), ['ruleRef']))
    __ITSapObPortRule_ruleNo_tab = CLASS(name='_tab_ITSAPOBSR', mode=MODE_SET, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSAPOBSR')))
    ___ITSapObPortRule_ruleNo_tab_val_Rule_0 = INT(name='Rule', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'PortRxTx')))
    ___ITSapObPortRule_ruleNo_tab_val_Rule_1 = SEQ(name='Rule', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'LogicalChannelPrio')))
    ___ITSapObPortRule_ruleNo_tab_val_Rule_2 = CHOICE(name='Rule', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    __ITSapObPortRule_ruleNo_tab._val = ASN1Set(rv=[dict([('ruleRef', 0), ('Rule', ___ITSapObPortRule_ruleNo_tab_val_Rule_0)]), dict([('ruleRef', 1), ('Rule', ___ITSapObPortRule_ruleNo_tab_val_Rule_1)]), dict([('ruleRef', 2), ('Rule', ___ITSapObPortRule_ruleNo_tab_val_Rule_2)])], rr=[], ev=None, er=[])
    _ITSapObPortRule_ruleNo._const_tab = __ITSapObPortRule_ruleNo_tab
    _ITSapObPortRule_ruleNo._const_tab_at = None
    _ITSapObPortRule_ruleNo._const_tab_id = 'ruleRef'
    _ITSapObPortRule_rule = OPEN(name='rule', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CITSapplMgmtApplReg', 'ITSAPOBSR'), ['Rule']))
    _ITSapObPortRule_rule._const_tab = __ITSapObPortRule_ruleNo_tab
    _ITSapObPortRule_rule._const_tab_at = ('..', 'ruleNo')
    _ITSapObPortRule_rule._const_tab_id = 'Rule'
    ITSapObPortRule._cont = ASN1Dict([
        ('ruleNo', _ITSapObPortRule_ruleNo),
        ('rule', _ITSapObPortRule_rule),
        ])
    ITSapObPortRule._ext = None
    
    #-----< ITSapObPortRules >-----#
    ITSapObPortRules = CLASS(name='ITSapObPortRules', mode=MODE_SET, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSAPOBSR')))
    _ITSapObPortRules_val_Rule_0 = INT(name='Rule', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'PortRxTx')))
    _ITSapObPortRules_val_Rule_1 = SEQ(name='Rule', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'LogicalChannelPrio')))
    _ITSapObPortRules_val_Rule_2 = CHOICE(name='Rule', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    ITSapObPortRules._val = ASN1Set(rv=[dict([('ruleRef', 0), ('Rule', _ITSapObPortRules_val_Rule_0)]), dict([('ruleRef', 1), ('Rule', _ITSapObPortRules_val_Rule_1)]), dict([('ruleRef', 2), ('Rule', _ITSapObPortRules_val_Rule_2)])], rr=[], ev=[], er=[])
    
    #-----< iTSapObRxTx >-----#
    iTSapObRxTx = CLASS(name='iTSapObRxTx', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSAPOBSR')))
    _iTSapObRxTx_val_Rule = INT(name='Rule', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'PortRxTx')))
    iTSapObRxTx._val = dict([('ruleRef', 0), ('Rule', _iTSapObRxTx_val_Rule)])
    
    #-----< iTSapObLch >-----#
    iTSapObLch = CLASS(name='iTSapObLch', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSAPOBSR')))
    _iTSapObLch_val_Rule = SEQ(name='Rule', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'LogicalChannelPrio')))
    iTSapObLch._val = dict([('ruleRef', 1), ('Rule', _iTSapObLch_val_Rule)])
    
    #-----< iTSapObPn >-----#
    iTSapObPn = CLASS(name='iTSapObPn', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSAPOBSR')))
    _iTSapObPn_val_Rule = CHOICE(name='Rule', mode=MODE_TYPE, typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    iTSapObPn._val = dict([('ruleRef', 2), ('Rule', _iTSapObPn_val_Rule)])
    
    #-----< PortRxTx >-----#
    PortRxTx = INT(name='PortRxTx', mode=MODE_TYPE)
    PortRxTx._cont = ASN1Dict([('rxPort', 0), ('txPort', 255)])
    PortRxTx._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< LogicalChannelPrio >-----#
    LogicalChannelPrio = SEQ(name='LogicalChannelPrio', mode=MODE_TYPE)
    _LogicalChannelPrio_lch = CHOICE(name='lch', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtComm', 'LogicalChannelType')))
    _LogicalChannelPrio_prio = INT(name='prio', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    LogicalChannelPrio._cont = ASN1Dict([
        ('lch', _LogicalChannelPrio_lch),
        ('prio', _LogicalChannelPrio_prio),
        ])
    LogicalChannelPrio._ext = None
    
    #-----< ITSObName >-----#
    ITSObName = OCT_STR(name='ITSObName', mode=MODE_TYPE)
    ITSObName._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< ITSapObType >-----#
    ITSapObType = INT(name='ITSapObType', mode=MODE_TYPE)
    ITSapObType._cont = ASN1Dict([('appClass', 0), ('application', 1)])
    ITSapObType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< ITSObOwner >-----#
    ITSObOwner = SEQ(name='ITSObOwner', mode=MODE_TYPE)
    _ITSObOwner_ownerName = OCT_STR(name='ownerName', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSObOwnerName')))
    _ITSObOwner_ownerType = INT(name='ownerType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSObOwnerType')))
    _ITSObOwner_ownerOID = OID(name='ownerOID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ITSObOwner._cont = ASN1Dict([
        ('ownerName', _ITSObOwner_ownerName),
        ('ownerType', _ITSObOwner_ownerType),
        ('ownerOID', _ITSObOwner_ownerOID),
        ])
    ITSObOwner._ext = None
    
    #-----< ITSObOwnerName >-----#
    ITSObOwnerName = OCT_STR(name='ITSObOwnerName', mode=MODE_TYPE)
    ITSObOwnerName._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< ITSObOwnerType >-----#
    ITSObOwnerType = INT(name='ITSObOwnerType', mode=MODE_TYPE)
    ITSObOwnerType._cont = ASN1Dict([('standard', 0), ('private', 1)])
    ITSObOwnerType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< ITSapObPriority >-----#
    ITSapObPriority = INT(name='ITSapObPriority', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'UserPriority')))
    
    #-----< ITSapObCertificate >-----#
    ITSapObCertificate = SEQ(name='ITSapObCertificate', mode=MODE_TYPE)
    _ITSapObCertificate_issuingSA = SEQ(name='issuingSA', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'IssuingSA')))
    _ITSapObCertificate_startDate = SEQ(name='startDate', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'CertStartDate')))
    _ITSapObCertificate_endDate = SEQ(name='endDate', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'CertEndDate')))
    _ITSapObCertificate_status = SEQ(name='status', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'CertStatus')))
    ITSapObCertificate._cont = ASN1Dict([
        ('issuingSA', _ITSapObCertificate_issuingSA),
        ('startDate', _ITSapObCertificate_startDate),
        ('endDate', _ITSapObCertificate_endDate),
        ('status', _ITSapObCertificate_status),
        ])
    ITSapObCertificate._ext = None
    
    #-----< IssuingSA >-----#
    IssuingSA = SEQ(name='IssuingSA', mode=MODE_TYPE)
    _IssuingSA_name = OCT_STR(name='name', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'SAname')))
    _IssuingSA_saOID = OID(name='saOID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    IssuingSA._cont = ASN1Dict([
        ('name', _IssuingSA_name),
        ('saOID', _IssuingSA_saOID),
        ])
    IssuingSA._ext = None
    
    #-----< SAname >-----#
    SAname = OCT_STR(name='SAname', mode=MODE_TYPE)
    SAname._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< CertStartDate >-----#
    CertStartDate = SEQ(name='CertStartDate', mode=MODE_TYPE)
    _CertStartDate_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CertStartDate_fill._const_sz = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    _CertStartDate_csd = CHOICE(name='csd', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CertStartDate_csd_inactive = NULL(name='inactive', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __CertStartDate_csd_date = STR_NUM(name='date', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __CertStartDate_csd_date._const_sz = ASN1Set(rv=[8], rr=[], ev=None, er=[])
    _CertStartDate_csd._cont = ASN1Dict([
        ('inactive', __CertStartDate_csd_inactive),
        ('date', __CertStartDate_csd_date),
        ])
    _CertStartDate_csd._ext = None
    CertStartDate._cont = ASN1Dict([
        ('fill', _CertStartDate_fill),
        ('csd', _CertStartDate_csd),
        ])
    CertStartDate._ext = None
    
    #-----< CertEndDate >-----#
    CertEndDate = SEQ(name='CertEndDate', mode=MODE_TYPE)
    _CertEndDate_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CertEndDate_fill._const_sz = ASN1Set(rv=[6], rr=[], ev=None, er=[])
    _CertEndDate_ced = CHOICE(name='ced', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CertEndDate_ced_inactive = NULL(name='inactive', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __CertEndDate_ced_date = STR_NUM(name='date', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __CertEndDate_ced_date._const_sz = ASN1Set(rv=[8], rr=[], ev=None, er=[])
    __CertEndDate_ced_never = NULL(name='never', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CertEndDate_ced._cont = ASN1Dict([
        ('inactive', __CertEndDate_ced_inactive),
        ('date', __CertEndDate_ced_date),
        ('never', __CertEndDate_ced_never),
        ])
    _CertEndDate_ced._ext = None
    CertEndDate._cont = ASN1Dict([
        ('fill', _CertEndDate_fill),
        ('ced', _CertEndDate_ced),
        ])
    CertEndDate._ext = None
    
    #-----< CertStatus >-----#
    CertStatus = SEQ(name='CertStatus', mode=MODE_TYPE)
    _CertStatus_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CertStatus_fill._const_sz = ASN1Set(rv=[6], rr=[], ev=None, er=[])
    _CertStatus_cs = CHOICE(name='cs', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CertStatus_cs_active = NULL(name='active', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __CertStatus_cs_inactive = NULL(name='inactive', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __CertStatus_cs_testActiv = NULL(name='testActiv', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __CertStatus_cs_blocked = SEQ(name='blocked', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'CertBlocked')))
    _CertStatus_cs._cont = ASN1Dict([
        ('active', __CertStatus_cs_active),
        ('inactive', __CertStatus_cs_inactive),
        ('testActiv', __CertStatus_cs_testActiv),
        ('blocked', __CertStatus_cs_blocked),
        ])
    _CertStatus_cs._ext = None
    CertStatus._cont = ASN1Dict([
        ('fill', _CertStatus_fill),
        ('cs', _CertStatus_cs),
        ])
    CertStatus._ext = None
    
    #-----< CertBlocked >-----#
    CertBlocked = SEQ(name='CertBlocked', mode=MODE_TYPE)
    _CertBlocked_date = STR_NUM(name='date', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CertBlocked_date._const_sz = ASN1Set(rv=[8], rr=[], ev=None, er=[])
    _CertBlocked_issuingSA = SEQ(name='issuingSA', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'IssuingSA')))
    CertBlocked._cont = ASN1Dict([
        ('date', _CertBlocked_date),
        ('issuingSA', _CertBlocked_issuingSA),
        ])
    CertBlocked._ext = None
    
    #-----< ITSmsgSetRegistry >-----#
    ITSmsgSetRegistry = SEQ_OF(name='ITSmsgSetRegistry', mode=MODE_TYPE)
    _ITSmsgSetRegistry__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSmsgSet')))
    ITSmsgSetRegistry._cont = _ITSmsgSetRegistry__item_
    
    #-----< ITSmsgSet >-----#
    ITSmsgSet = SEQ(name='ITSmsgSet', mode=MODE_TYPE)
    _ITSmsgSet_iTSmsID = CHOICE(name='iTSmsID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSmsgSetID')))
    _ITSmsgSet_iTSmsName = OCT_STR(name='iTSmsName', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSObName')))
    _ITSmsgSet_iTSmsOwner = SEQ(name='iTSmsOwner', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSObOwner')))
    ITSmsgSet._cont = ASN1Dict([
        ('iTSmsID', _ITSmsgSet_iTSmsID),
        ('iTSmsName', _ITSmsgSet_iTSmsName),
        ('iTSmsOwner', _ITSmsgSet_iTSmsOwner),
        ])
    ITSmsgSet._ext = None
    
    #-----< ITSregRegionRegistry >-----#
    ITSregRegionRegistry = SEQ_OF(name='ITSregRegionRegistry', mode=MODE_TYPE)
    _ITSregRegionRegistry__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSregRegion')))
    ITSregRegionRegistry._cont = _ITSregRegionRegistry__item_
    
    #-----< ITSregRegion >-----#
    ITSregRegion = SEQ(name='ITSregRegion', mode=MODE_TYPE)
    _ITSregRegion_regID = CHOICE(name='regID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSrrID')))
    _ITSregRegion_regAuthority = SEQ(name='regAuthority', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITS-RegPolicyAuthority')))
    _ITSregRegion_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ITSregRegion_fill._const_sz = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    _ITSregRegion_regArea = SEQ(name='regArea', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITS-RParea')))
    ITSregRegion._cont = ASN1Dict([
        ('regID', _ITSregRegion_regID),
        ('regAuthority', _ITSregRegion_regAuthority),
        ('fill', _ITSregRegion_fill),
        ('regArea', _ITSregRegion_regArea),
        ])
    ITSregRegion._ext = None
    
    #-----< ITS-RegPolicyAuthority >-----#
    ITS_RegPolicyAuthority = SEQ(name='ITS-RegPolicyAuthority', mode=MODE_TYPE)
    _ITS_RegPolicyAuthority_name = OCT_STR(name='name', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSObOwnerName')))
    _ITS_RegPolicyAuthority_url = OCT_STR(name='url', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'URLreg')))
    ITS_RegPolicyAuthority._cont = ASN1Dict([
        ('name', _ITS_RegPolicyAuthority_name),
        ('url', _ITS_RegPolicyAuthority_url),
        ])
    ITS_RegPolicyAuthority._ext = None
    
    #-----< URLreg >-----#
    URLreg = OCT_STR(name='URLreg', mode=MODE_TYPE)
    URLreg._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=256)], ev=None, er=[])
    
    #-----< ITSRPAREA >-----#
    ITSRPAREA = CLASS(name='ITSRPAREA', mode=MODE_TYPE)
    _ITSRPAREA_areaRef = INT(name='areaRef', mode=MODE_VALUE)
    _ITSRPAREA_areaRef._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _ITSRPAREA_Area = OPEN(name='Area', mode=MODE_TYPE)
    ITSRPAREA._cont = ASN1Dict([
        ('areaRef', _ITSRPAREA_areaRef),
        ('Area', _ITSRPAREA_Area),
        ])
    
    #-----< ITS-RParea >-----#
    ITS_RParea = SEQ(name='ITS-RParea', mode=MODE_TYPE)
    _ITS_RParea_areaTypeNo = INT(name='areaTypeNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CITSapplMgmtApplReg', 'ITSRPAREA'), ['areaRef']))
    __ITS_RParea_areaTypeNo_tab = CLASS(name='_tab_ITSRPAREA', mode=MODE_SET, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSRPAREA')))
    ___ITS_RParea_areaTypeNo_tab_val_Area_0 = OCT_STR(name='Area', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'CountryCode')))
    ___ITS_RParea_areaTypeNo_tab_val_Area_1 = SEQ_OF(name='Area', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'GeoPolygon')))
    __ITS_RParea_areaTypeNo_tab._val = ASN1Set(rv=[dict([('areaRef', 0), ('Area', ___ITS_RParea_areaTypeNo_tab_val_Area_0)]), dict([('areaRef', 1), ('Area', ___ITS_RParea_areaTypeNo_tab_val_Area_1)])], rr=[], ev=None, er=[])
    _ITS_RParea_areaTypeNo._const_tab = __ITS_RParea_areaTypeNo_tab
    _ITS_RParea_areaTypeNo._const_tab_at = None
    _ITS_RParea_areaTypeNo._const_tab_id = 'areaRef'
    _ITS_RParea_areaType = OPEN(name='areaType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CITSapplMgmtApplReg', 'ITSRPAREA'), ['Area']))
    _ITS_RParea_areaType._const_tab = __ITS_RParea_areaTypeNo_tab
    _ITS_RParea_areaType._const_tab_at = None
    _ITS_RParea_areaType._const_tab_id = 'Area'
    ITS_RParea._cont = ASN1Dict([
        ('areaTypeNo', _ITS_RParea_areaTypeNo),
        ('areaType', _ITS_RParea_areaType),
        ])
    ITS_RParea._ext = None
    
    #-----< ITS-RPareaTypes >-----#
    ITS_RPareaTypes = CLASS(name='ITS-RPareaTypes', mode=MODE_SET, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSRPAREA')))
    _ITS_RPareaTypes_val_Area_0 = OCT_STR(name='Area', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'CountryCode')))
    _ITS_RPareaTypes_val_Area_1 = SEQ_OF(name='Area', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'GeoPolygon')))
    ITS_RPareaTypes._val = ASN1Set(rv=[dict([('areaRef', 0), ('Area', _ITS_RPareaTypes_val_Area_0)]), dict([('areaRef', 1), ('Area', _ITS_RPareaTypes_val_Area_1)])], rr=[], ev=[], er=[])
    
    #-----< rpAreaCountryCode >-----#
    rpAreaCountryCode = CLASS(name='rpAreaCountryCode', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSRPAREA')))
    _rpAreaCountryCode_val_Area = OCT_STR(name='Area', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'CountryCode')))
    rpAreaCountryCode._val = dict([('areaRef', 0), ('Area', _rpAreaCountryCode_val_Area)])
    
    #-----< rpAreaGeoPolygon >-----#
    rpAreaGeoPolygon = CLASS(name='rpAreaGeoPolygon', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSRPAREA')))
    _rpAreaGeoPolygon_val_Area = SEQ_OF(name='Area', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'GeoPolygon')))
    rpAreaGeoPolygon._val = dict([('areaRef', 1), ('Area', _rpAreaGeoPolygon_val_Area)])
    
    #-----< GeoPolygon >-----#
    GeoPolygon = SEQ_OF(name='GeoPolygon', mode=MODE_TYPE)
    _GeoPolygon__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'GeoCoordinates')))
    GeoPolygon._cont = _GeoPolygon__item_
    GeoPolygon._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< GeoCoordinates >-----#
    GeoCoordinates = SEQ(name='GeoCoordinates', mode=MODE_TYPE)
    _GeoCoordinates_lat = INT(name='lat', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Lat')))
    _GeoCoordinates_long = INT(name='long', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'Lon')))
    GeoCoordinates._cont = ASN1Dict([
        ('lat', _GeoCoordinates_lat),
        ('long', _GeoCoordinates_long),
        ])
    GeoCoordinates._ext = None
    
    #-----< CountryCode >-----#
    CountryCode = OCT_STR(name='CountryCode', mode=MODE_TYPE)
    CountryCode._const_sz = ASN1Set(rv=[3], rr=[], ev=None, er=[])
    
    #-----< ITSpolRegionRegistry >-----#
    ITSpolRegionRegistry = SEQ_OF(name='ITSpolRegionRegistry', mode=MODE_TYPE)
    _ITSpolRegionRegistry__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSpolRegion')))
    ITSpolRegionRegistry._cont = _ITSpolRegionRegistry__item_
    
    #-----< ITSpolRegion >-----#
    ITSpolRegion = SEQ(name='ITSpolRegion', mode=MODE_TYPE)
    _ITSpolRegion_polID = CHOICE(name='polID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSprID')))
    _ITSpolRegion_polAuthority = SEQ(name='polAuthority', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITS-RegPolicyAuthority')))
    _ITSpolRegion_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ITSpolRegion_fill._const_sz = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    _ITSpolRegion_polArea = SEQ(name='polArea', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITS-RParea')))
    ITSpolRegion._cont = ASN1Dict([
        ('polID', _ITSpolRegion_polID),
        ('polAuthority', _ITSpolRegion_polAuthority),
        ('fill', _ITSpolRegion_fill),
        ('polArea', _ITSpolRegion_polArea),
        ])
    ITSpolRegion._ext = None
    
    #-----< ITSportNumberRegistry >-----#
    ITSportNumberRegistry = SEQ_OF(name='ITSportNumberRegistry', mode=MODE_TYPE)
    _ITSportNumberRegistry__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSportNumber')))
    ITSportNumberRegistry._cont = _ITSportNumberRegistry__item_
    
    #-----< ITSportNumber >-----#
    ITSportNumber = SEQ(name='ITSportNumber', mode=MODE_TYPE)
    _ITSportNumber_pn = CHOICE(name='pn', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CALMfntp', 'PortNumber')))
    _ITSportNumber_ntProt = SEQ(name='ntProt', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'NTprotocol')))
    _ITSportNumber_itssAp = SEQ(name='itssAp', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ItsAppInfo')))
    ITSportNumber._cont = ASN1Dict([
        ('pn', _ITSportNumber_pn),
        ('ntProt', _ITSportNumber_ntProt),
        ('itssAp', _ITSportNumber_itssAp),
        ])
    ITSportNumber._ext = None
    
    #-----< ItsAppInfo >-----#
    ItsAppInfo = SEQ(name='ItsAppInfo', mode=MODE_TYPE)
    _ItsAppInfo_itsAid = CHOICE(name='itsAid', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSaid')))
    _ItsAppInfo_rxTxPortNo = CHOICE(name='rxTxPortNo', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplReq', 'ITSSappRxTxPortNo')))
    ItsAppInfo._cont = ASN1Dict([
        ('itsAid', _ItsAppInfo_itsAid),
        ('rxTxPortNo', _ItsAppInfo_rxTxPortNo),
        ])
    ItsAppInfo._ext = None
    
    #-----< NTprotocol >-----#
    NTprotocol = SEQ(name='NTprotocol', mode=MODE_TYPE)
    _NTprotocol_name = OCT_STR(name='name', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _NTprotocol_name._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _NTprotocol_protRef = SEQ(name='protRef', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ProtocolReference')))
    NTprotocol._cont = ASN1Dict([
        ('name', _NTprotocol_name),
        ('protRef', _NTprotocol_protRef),
        ])
    NTprotocol._ext = None
    
    #-----< ProtocolReference >-----#
    ProtocolReference = SEQ(name='ProtocolReference', mode=MODE_TYPE)
    _ProtocolReference_sdo = OCT_STR(name='sdo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ProtocolReference_sdo._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _ProtocolReference_docNo = OCT_STR(name='docNo', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ProtocolReference_docNo._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    ProtocolReference._cont = ASN1Dict([
        ('sdo', _ProtocolReference_sdo),
        ('docNo', _ProtocolReference_docNo),
        ])
    ProtocolReference._ext = None
    
    #-----< ITSflowTypeRegistry >-----#
    ITSflowTypeRegistry = SEQ_OF(name='ITSflowTypeRegistry', mode=MODE_TYPE)
    _ITSflowTypeRegistry__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSflowType')))
    ITSflowTypeRegistry._cont = _ITSflowTypeRegistry__item_
    
    #-----< ITSflowType >-----#
    ITSflowType = SEQ(name='ITSflowType', mode=MODE_TYPE)
    _ITSflowType_id = CHOICE(name='id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'FlowTypeID')))
    _ITSflowType_req = SEQ(name='req', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'ITSSappCPReqReg')))
    ITSflowType._cont = ASN1Dict([
        ('id', _ITSflowType_id),
        ('req', _ITSflowType_req),
        ])
    ITSflowType._ext = None
    
    #-----< FlowTypeID >-----#
    FlowTypeID = CHOICE(name='FlowTypeID', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtIDs', 'VarLengthNumber2')))
    
    #-----< ITSlchRegistry >-----#
    ITSlchRegistry = SEQ_OF(name='ITSlchRegistry', mode=MODE_TYPE)
    _ITSlchRegistry__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSlch')))
    ITSlchRegistry._cont = _ITSlchRegistry__item_
    
    #-----< ITSlch >-----#
    ITSlch = SEQ(name='ITSlch', mode=MODE_TYPE)
    _ITSlch_lchID = CHOICE(name='lchID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtComm', 'LogicalChannelType')))
    _ITSlch_lchPurpose = OCT_STR(name='lchPurpose', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ITSlch_lchPurpose._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    ITSlch._cont = ASN1Dict([
        ('lchID', _ITSlch_lchID),
        ('lchPurpose', _ITSlch_lchPurpose),
        ])
    ITSlch._ext = None
    
    #-----< ITSsuRegistry >-----#
    ITSsuRegistry = SEQ_OF(name='ITSsuRegistry', mode=MODE_TYPE)
    _ITSsuRegistry__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSsu')))
    ITSsuRegistry._cont = _ITSsuRegistry__item_
    
    #-----< ITSsu >-----#
    ITSsu = SEQ(name='ITSsu', mode=MODE_TYPE)
    _ITSsu_itssuID = SEQ(name='itssuID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSsuID')))
    ITSsu._cont = ASN1Dict([
        ('itssuID', _ITSsu_itssuID),
        ])
    ITSsu._ext = None
    
    #-----< ITSscuRegistry >-----#
    ITSscuRegistry = SEQ_OF(name='ITSscuRegistry', mode=MODE_TYPE)
    _ITSscuRegistry__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSscu')))
    ITSscuRegistry._cont = _ITSscuRegistry__item_
    
    #-----< ITSscu >-----#
    ITSscu = SEQ(name='ITSscu', mode=MODE_TYPE)
    _ITSscu_itsscuID = SEQ(name='itsscuID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSscuID')))
    ITSscu._cont = ASN1Dict([
        ('itsscuID', _ITSscu_itsscuID),
        ])
    ITSscu._ext = None
    
    #-----< ITSSappRegistry >-----#
    ITSSappRegistry = SEQ_OF(name='ITSSappRegistry', mode=MODE_TYPE)
    _ITSSappRegistry__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSSapPrPr')))
    ITSSappRegistry._cont = _ITSSappRegistry__item_
    
    #-----< ITSSapPrPr >-----#
    ITSSapPrPr = SEQ(name='ITSSapPrPr', mode=MODE_TYPE)
    _ITSSapPrPr_itssappID = CHOICE(name='itssappID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSSappid')))
    _ITSSapPrPr_itssapProv = SEQ(name='itssapProv', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'RegEntryOwner')))
    ITSSapPrPr._cont = ASN1Dict([
        ('itssappID', _ITSSapPrPr_itssappID),
        ('itssapProv', _ITSSapPrPr_itssapProv),
        ])
    ITSSapPrPr._ext = None
    
    #-----< RegEntryOwner >-----#
    RegEntryOwner = SEQ(name='RegEntryOwner', mode=MODE_TYPE)
    _RegEntryOwner_ownerName = OCT_STR(name='ownerName', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RegEntryOwner_ownerName._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _RegEntryOwner_ownerAddress = OCT_STR(name='ownerAddress', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _RegEntryOwner_ownerAddress._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _RegEntryOwner_ownerURL = OCT_STR(name='ownerURL', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'URLreg')))
    RegEntryOwner._cont = ASN1Dict([
        ('ownerName', _RegEntryOwner_ownerName),
        ('ownerAddress', _RegEntryOwner_ownerAddress),
        ('ownerURL', _RegEntryOwner_ownerURL),
        ])
    RegEntryOwner._ext = None
    
    #-----< ITSemRegistry >-----#
    ITSemRegistry = SEQ_OF(name='ITSemRegistry', mode=MODE_TYPE)
    _ITSemRegistry__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSem')))
    ITSemRegistry._cont = _ITSemRegistry__item_
    
    #-----< ITSem >-----#
    ITSem = SEQ(name='ITSem', mode=MODE_TYPE)
    _ITSem_itsemID = CHOICE(name='itsemID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSemID')))
    _ITSem_equipManu = SEQ(name='equipManu', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'RegEntryOwner')))
    ITSem._cont = ASN1Dict([
        ('itsemID', _ITSem_itsemID),
        ('equipManu', _ITSem_equipManu),
        ])
    ITSem._ext = None
    
    #-----< ITSaooRegistry >-----#
    ITSaooRegistry = SEQ_OF(name='ITSaooRegistry', mode=MODE_TYPE)
    _ITSaooRegistry__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSaoo')))
    ITSaooRegistry._cont = _ITSaooRegistry__item_
    
    #-----< ITSaoo >-----#
    ITSaoo = SEQ(name='ITSaoo', mode=MODE_TYPE)
    _ITSaoo_itsaooID = CHOICE(name='itsaooID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSaooID')))
    _ITSaoo_aoo = SEQ(name='aoo', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'RegEntryOwner')))
    ITSaoo._cont = ASN1Dict([
        ('itsaooID', _ITSaoo_itsaooID),
        ('aoo', _ITSaoo_aoo),
        ])
    ITSaoo._ext = None
    
    #-----< Registry >-----#
    Registry = SEQ_OF(name='Registry', mode=MODE_TYPE)
    _Registry__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSmso')))
    Registry._cont = _Registry__item_
    
    #-----< ITSmso >-----#
    ITSmso = SEQ(name='ITSmso', mode=MODE_TYPE)
    _ITSmso_iTSmsoID = CHOICE(name='iTSmsoID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSmsoID')))
    _ITSmso_mso = SEQ(name='mso', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'RegEntryOwner')))
    ITSmso._cont = ASN1Dict([
        ('iTSmsoID', _ITSmso_iTSmsoID),
        ('mso', _ITSmso_mso),
        ])
    ITSmso._ext = None
    
    #-----< ITSSapdRegistry >-----#
    ITSSapdRegistry = SEQ_OF(name='ITSSapdRegistry', mode=MODE_TYPE)
    _ITSSapdRegistry__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSSapd')))
    ITSSapdRegistry._cont = _ITSSapdRegistry__item_
    
    #-----< ITSSapd >-----#
    ITSSapd = SEQ(name='ITSSapd', mode=MODE_TYPE)
    _ITSSapd_itssapdID = CHOICE(name='itssapdID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSSapdID')))
    _ITSSapd_ad = SEQ(name='ad', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'RegEntryOwner')))
    ITSSapd._cont = ASN1Dict([
        ('itssapdID', _ITSSapd_itssapdID),
        ('ad', _ITSSapd_ad),
        ])
    ITSSapd._ext = None
    
    #-----< ITSaid >-----#
    ITSaid = CHOICE(name='ITSaid', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtIDs', 'VarLengthNumber')))
    
    #-----< ITSmsgSetID >-----#
    ITSmsgSetID = CHOICE(name='ITSmsgSetID', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtIDs', 'VarLengthNumber')))
    
    #-----< ITSemID >-----#
    ITSemID = CHOICE(name='ITSemID', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtIDs', 'VarLengthNumber2')))
    
    #-----< ITSsuID >-----#
    ITSsuID = SEQ(name='ITSsuID', mode=MODE_TYPE)
    _ITSsuID_suID = CHOICE(name='suID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtIDs', 'VarLengthNumber')))
    _ITSsuID_scuID = SEQ(name='scuID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSscuID')))
    ITSsuID._cont = ASN1Dict([
        ('suID', _ITSsuID_suID),
        ('scuID', _ITSsuID_scuID),
        ])
    ITSsuID._ext = None
    
    #-----< ITSscuID >-----#
    ITSscuID = SEQ(name='ITSscuID', mode=MODE_TYPE)
    _ITSscuID_emID = CHOICE(name='emID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSemID')))
    _ITSscuID_serialNo = CHOICE(name='serialNo', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtIDs', 'VarLengthNumber')))
    ITSscuID._cont = ASN1Dict([
        ('emID', _ITSscuID_emID),
        ('serialNo', _ITSscuID_serialNo),
        ])
    ITSscuID._ext = None
    
    #-----< ITSSappid >-----#
    ITSSappid = CHOICE(name='ITSSappid', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtIDs', 'VarLengthNumber')))
    
    #-----< ITSrrID >-----#
    ITSrrID = CHOICE(name='ITSrrID', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtIDs', 'VarLengthNumber')))
    
    #-----< ITSprID >-----#
    ITSprID = CHOICE(name='ITSprID', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtIDs', 'VarLengthNumber')))
    
    #-----< ITSaooID >-----#
    ITSaooID = CHOICE(name='ITSaooID', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtIDs', 'VarLengthNumber')))
    
    #-----< ITSmsoID >-----#
    ITSmsoID = CHOICE(name='ITSmsoID', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtIDs', 'VarLengthNumber2')))
    
    #-----< ITSSapdID >-----#
    ITSSapdID = CHOICE(name='ITSSapdID', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtIDs', 'VarLengthNumber')))
    
    #-----< oidISO >-----#
    oidISO = OID(name='oidISO', mode=MODE_VALUE)
    oidISO._val = (1, 0)
    
    #-----< oidETSI >-----#
    oidETSI = OID(name='oidETSI', mode=MODE_VALUE)
    oidETSI._val = (0, 4, 0)
    
    #-----< oidIEEE >-----#
    oidIEEE = OID(name='oidIEEE', mode=MODE_VALUE)
    oidIEEE._val = (1, 3, 3)
    
    #-----< oidCEN >-----#
    oidCEN = OID(name='oidCEN', mode=MODE_VALUE)
    oidCEN._val = (1, 3, 162)
    
    #-----< fntpRefNo >-----#
    fntpRefNo = OCT_STR(name='fntpRefNo', mode=MODE_VALUE)
    fntpRefNo._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    fntpRefNo._val = b'ISO 29281-1'
    
    #-----< version >-----#
    version = INT(name='version', mode=MODE_VALUE)
    version._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    version._val = 1
    
    _all_ = [
        _ITSapObRegistry__item_,
        ITSapObRegistry,
        _ITSapOb_iTSaid,
        _ITSapOb_iTSapObName,
        _ITSapOb_iTSapObType,
        _ITSapOb_iTSapObOwner,
        _ITSapOb_iTSapObCert,
        _ITSapOb_iTSapObPorts,
        ITSapOb,
        __ITSapObPorts__item__portNo,
        ___ITSapObPorts__item__rules__item_,
        __ITSapObPorts__item__rules,
        _ITSapObPorts__item_,
        ITSapObPorts,
        _ITSapObPort__item_,
        ITSapObPort,
        _ITSAPOBSR_ruleRef,
        _ITSAPOBSR_Rule,
        ITSAPOBSR,
        __ITSapObPortRule_ruleNo_tab,
        ___ITSapObPortRule_ruleNo_tab_val_Rule_0,
        ___ITSapObPortRule_ruleNo_tab_val_Rule_1,
        ___ITSapObPortRule_ruleNo_tab_val_Rule_2,
        _ITSapObPortRule_ruleNo,
        _ITSapObPortRule_rule,
        ITSapObPortRule,
        ITSapObPortRules,
        _ITSapObPortRules_val_Rule_0,
        _ITSapObPortRules_val_Rule_1,
        _ITSapObPortRules_val_Rule_2,
        iTSapObRxTx,
        _iTSapObRxTx_val_Rule,
        iTSapObLch,
        _iTSapObLch_val_Rule,
        iTSapObPn,
        _iTSapObPn_val_Rule,
        PortRxTx,
        _LogicalChannelPrio_lch,
        _LogicalChannelPrio_prio,
        LogicalChannelPrio,
        ITSObName,
        ITSapObType,
        _ITSObOwner_ownerName,
        _ITSObOwner_ownerType,
        _ITSObOwner_ownerOID,
        ITSObOwner,
        ITSObOwnerName,
        ITSObOwnerType,
        ITSapObPriority,
        _ITSapObCertificate_issuingSA,
        _ITSapObCertificate_startDate,
        _ITSapObCertificate_endDate,
        _ITSapObCertificate_status,
        ITSapObCertificate,
        _IssuingSA_name,
        _IssuingSA_saOID,
        IssuingSA,
        SAname,
        _CertStartDate_fill,
        __CertStartDate_csd_inactive,
        __CertStartDate_csd_date,
        _CertStartDate_csd,
        CertStartDate,
        _CertEndDate_fill,
        __CertEndDate_ced_inactive,
        __CertEndDate_ced_date,
        __CertEndDate_ced_never,
        _CertEndDate_ced,
        CertEndDate,
        _CertStatus_fill,
        __CertStatus_cs_active,
        __CertStatus_cs_inactive,
        __CertStatus_cs_testActiv,
        __CertStatus_cs_blocked,
        _CertStatus_cs,
        CertStatus,
        _CertBlocked_date,
        _CertBlocked_issuingSA,
        CertBlocked,
        _ITSmsgSetRegistry__item_,
        ITSmsgSetRegistry,
        _ITSmsgSet_iTSmsID,
        _ITSmsgSet_iTSmsName,
        _ITSmsgSet_iTSmsOwner,
        ITSmsgSet,
        _ITSregRegionRegistry__item_,
        ITSregRegionRegistry,
        _ITSregRegion_regID,
        _ITSregRegion_regAuthority,
        _ITSregRegion_fill,
        _ITSregRegion_regArea,
        ITSregRegion,
        _ITS_RegPolicyAuthority_name,
        _ITS_RegPolicyAuthority_url,
        ITS_RegPolicyAuthority,
        URLreg,
        _ITSRPAREA_areaRef,
        _ITSRPAREA_Area,
        ITSRPAREA,
        __ITS_RParea_areaTypeNo_tab,
        ___ITS_RParea_areaTypeNo_tab_val_Area_0,
        ___ITS_RParea_areaTypeNo_tab_val_Area_1,
        _ITS_RParea_areaTypeNo,
        _ITS_RParea_areaType,
        ITS_RParea,
        ITS_RPareaTypes,
        _ITS_RPareaTypes_val_Area_0,
        _ITS_RPareaTypes_val_Area_1,
        rpAreaCountryCode,
        _rpAreaCountryCode_val_Area,
        rpAreaGeoPolygon,
        _rpAreaGeoPolygon_val_Area,
        _GeoPolygon__item_,
        GeoPolygon,
        _GeoCoordinates_lat,
        _GeoCoordinates_long,
        GeoCoordinates,
        CountryCode,
        _ITSpolRegionRegistry__item_,
        ITSpolRegionRegistry,
        _ITSpolRegion_polID,
        _ITSpolRegion_polAuthority,
        _ITSpolRegion_fill,
        _ITSpolRegion_polArea,
        ITSpolRegion,
        _ITSportNumberRegistry__item_,
        ITSportNumberRegistry,
        _ITSportNumber_pn,
        _ITSportNumber_ntProt,
        _ITSportNumber_itssAp,
        ITSportNumber,
        _ItsAppInfo_itsAid,
        _ItsAppInfo_rxTxPortNo,
        ItsAppInfo,
        _NTprotocol_name,
        _NTprotocol_protRef,
        NTprotocol,
        _ProtocolReference_sdo,
        _ProtocolReference_docNo,
        ProtocolReference,
        _ITSflowTypeRegistry__item_,
        ITSflowTypeRegistry,
        _ITSflowType_id,
        _ITSflowType_req,
        ITSflowType,
        FlowTypeID,
        _ITSlchRegistry__item_,
        ITSlchRegistry,
        _ITSlch_lchID,
        _ITSlch_lchPurpose,
        ITSlch,
        _ITSsuRegistry__item_,
        ITSsuRegistry,
        _ITSsu_itssuID,
        ITSsu,
        _ITSscuRegistry__item_,
        ITSscuRegistry,
        _ITSscu_itsscuID,
        ITSscu,
        _ITSSappRegistry__item_,
        ITSSappRegistry,
        _ITSSapPrPr_itssappID,
        _ITSSapPrPr_itssapProv,
        ITSSapPrPr,
        _RegEntryOwner_ownerName,
        _RegEntryOwner_ownerAddress,
        _RegEntryOwner_ownerURL,
        RegEntryOwner,
        _ITSemRegistry__item_,
        ITSemRegistry,
        _ITSem_itsemID,
        _ITSem_equipManu,
        ITSem,
        _ITSaooRegistry__item_,
        ITSaooRegistry,
        _ITSaoo_itsaooID,
        _ITSaoo_aoo,
        ITSaoo,
        _Registry__item_,
        Registry,
        _ITSmso_iTSmsoID,
        _ITSmso_mso,
        ITSmso,
        _ITSSapdRegistry__item_,
        ITSSapdRegistry,
        _ITSSapd_itssapdID,
        _ITSSapd_ad,
        ITSSapd,
        ITSaid,
        ITSmsgSetID,
        ITSemID,
        _ITSsuID_suID,
        _ITSsuID_scuID,
        ITSsuID,
        _ITSscuID_emID,
        _ITSscuID_serialNo,
        ITSscuID,
        ITSSappid,
        ITSrrID,
        ITSprID,
        ITSaooID,
        ITSmsoID,
        ITSSapdID,
        oidISO,
        oidETSI,
        oidIEEE,
        oidCEN,
        fntpRefNo,
        version,
    ]

class CITSapplMgmtComm:

    _name_  = 'CITSapplMgmtComm'
    _oid_   = [1, 0, 17419, 3]
    
    _obj_ = [
        'LogicalChannelType',
        'MCgroup',
        'ITSprotocolStackID',
        'version',
        ]
    _type_ = [
        'LogicalChannelType',
        'MCgroup',
        'ITSprotocolStackID',
        ]
    _set_ = [
        ]
    _val_ = [
        'version',
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< LogicalChannelType >-----#
    LogicalChannelType = CHOICE(name='LogicalChannelType', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtIDs', 'VarLengthNumber2')))
    
    #-----< MCgroup >-----#
    MCgroup = CHOICE(name='MCgroup', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtIDs', 'VarLengthNumber')))
    
    #-----< ITSprotocolStackID >-----#
    ITSprotocolStackID = CHOICE(name='ITSprotocolStackID', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtIDs', 'VarLengthNumber')))
    
    #-----< version >-----#
    version = INT(name='version', mode=MODE_VALUE)
    version._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    version._val = 1
    
    _all_ = [
        LogicalChannelType,
        MCgroup,
        ITSprotocolStackID,
        version,
    ]

class CITSapplMgmtIDs:

    _name_  = 'CITSapplMgmtIDs'
    _oid_   = [1, 0, 17419, 1]
    
    _obj_ = [
        'VarLengthNumber',
        'Ext1',
        'Ext2',
        'Ext3',
        'VarLengthNumber2',
        'version',
        ]
    _type_ = [
        'VarLengthNumber',
        'Ext1',
        'Ext2',
        'Ext3',
        'VarLengthNumber2',
        ]
    _set_ = [
        ]
    _val_ = [
        'version',
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< VarLengthNumber >-----#
    VarLengthNumber = CHOICE(name='VarLengthNumber', mode=MODE_TYPE)
    _VarLengthNumber_content = INT(name='content', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _VarLengthNumber_content._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=None, er=[])
    _VarLengthNumber_extension = CHOICE(name='extension', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtIDs', 'Ext1')))
    VarLengthNumber._cont = ASN1Dict([
        ('content', _VarLengthNumber_content),
        ('extension', _VarLengthNumber_extension),
        ])
    VarLengthNumber._ext = None
    
    #-----< Ext1 >-----#
    Ext1 = CHOICE(name='Ext1', mode=MODE_TYPE)
    _Ext1_content = INT(name='content', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Ext1_content._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=128, ub=16511)], ev=None, er=[])
    _Ext1_extension = CHOICE(name='extension', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtIDs', 'Ext2')))
    Ext1._cont = ASN1Dict([
        ('content', _Ext1_content),
        ('extension', _Ext1_extension),
        ])
    Ext1._ext = None
    
    #-----< Ext2 >-----#
    Ext2 = CHOICE(name='Ext2', mode=MODE_TYPE)
    _Ext2_content = INT(name='content', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Ext2_content._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=16512, ub=2113663)], ev=None, er=[])
    _Ext2_extension = INT(name='extension', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplMgmtIDs', 'Ext3')))
    Ext2._cont = ASN1Dict([
        ('content', _Ext2_content),
        ('extension', _Ext2_extension),
        ])
    Ext2._ext = None
    
    #-----< Ext3 >-----#
    Ext3 = INT(name='Ext3', mode=MODE_TYPE)
    Ext3._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=211664, ub=270549119)], ev=[], er=[])
    
    #-----< VarLengthNumber2 >-----#
    VarLengthNumber2 = CHOICE(name='VarLengthNumber2', mode=MODE_TYPE)
    _VarLengthNumber2_shortNo = INT(name='shortNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _VarLengthNumber2_shortNo._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=None, er=[])
    _VarLengthNumber2_longNo = INT(name='longNo', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _VarLengthNumber2_longNo._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=32767)], ev=None, er=[])
    VarLengthNumber2._cont = ASN1Dict([
        ('shortNo', _VarLengthNumber2_shortNo),
        ('longNo', _VarLengthNumber2_longNo),
        ])
    VarLengthNumber2._ext = None
    
    #-----< version >-----#
    version = INT(name='version', mode=MODE_VALUE)
    version._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    version._val = 1
    
    _all_ = [
        _VarLengthNumber_content,
        _VarLengthNumber_extension,
        VarLengthNumber,
        _Ext1_content,
        _Ext1_extension,
        Ext1,
        _Ext2_content,
        _Ext2_extension,
        Ext2,
        Ext3,
        _VarLengthNumber2_shortNo,
        _VarLengthNumber2_longNo,
        VarLengthNumber2,
        version,
    ]

class CITSapplReq:

    _name_  = 'CITSapplReq'
    _oid_   = [1, 0, 17423, 1]
    
    _obj_ = [
        'ITSSappCPReqReg',
        'ITSSappRxTxPort',
        'ITSSappRxTxPortNo',
        'ITSSappRxTxPortType',
        'ServiceRef',
        'FlowNo',
        'ITSSappCPReqConf',
        'REQSCP',
        'ITSSappReq',
        'REQSCPCONF',
        'ITSSappReqConf',
        'ITSSappCPFinal',
        'Req-SCP',
        'logChannel',
        'destType',
        'destDomain',
        'maxAPDU',
        'DestinationType',
        'DestType',
        'AddressBasedType',
        'GeoLocationBasedType',
        'DestDomain',
        'MaxADU',
        'contConnect',
        'nxRepeat',
        'storeForward',
        'flowType',
        'commDistance',
        'directivity',
        'multiHop',
        'reduntOp',
        'minThP',
        'maxLat',
        'protocolReq',
        'dataConfidentiality',
        'dataIntegrity',
        'nonReputability',
        'dataAuthentication',
        'ContConnect',
        'TimDurationValue',
        'NxRepeat',
        'StoreForward',
        'CommDistance',
        'MultiHop',
        'Resilience',
        'MinThP',
        'MaxLat',
        'ProtocolReq',
        'DataConfidentiality',
        'DataIntegrity',
        'ReqNonrepudiation',
        'DataAuthentication',
        'ReqConf-SCP',
        'logChannelConf',
        'destTypeConf',
        'destDomainConf',
        'maxAPDUConf',
        'contConnectConf',
        'nxRepeatConf',
        'storeForwardConf',
        'flowTypeConf',
        'commDistanceConf',
        'directivityConf',
        'multiHopConf',
        'reduntOpConf',
        'minThPConf',
        'maxLatConf',
        'protocolReqConf',
        'dataConfidentialityConf',
        'dataIntegrityConf',
        'nonReputabilityConf',
        'dataAuthenticationConf',
        'POLICYC',
        'Policies',
        'Policy',
        'mediumCost',
        'locPrivacy',
        'anonymity',
        'MediumCost',
        'CostClass',
        'CostAmount',
        'CostValue',
        'CostTimeUnit',
        'CostAmountUnit',
        'LocPrivacy',
        'Anonymity',
        'ITS-S-Appl-Reg',
        'ITS-S-Appl-RegConf',
        'ITS-S-Appl-RegFinal',
        'Logic',
        'ConfValue',
        'CostObjective',
        ]
    _type_ = [
        'ITSSappCPReqReg',
        'ITSSappRxTxPort',
        'ITSSappRxTxPortNo',
        'ITSSappRxTxPortType',
        'ServiceRef',
        'FlowNo',
        'ITSSappCPReqConf',
        'REQSCP',
        'ITSSappReq',
        'REQSCPCONF',
        'ITSSappReqConf',
        'ITSSappCPFinal',
        'DestinationType',
        'DestType',
        'AddressBasedType',
        'GeoLocationBasedType',
        'DestDomain',
        'MaxADU',
        'ContConnect',
        'TimDurationValue',
        'NxRepeat',
        'StoreForward',
        'CommDistance',
        'MultiHop',
        'Resilience',
        'MinThP',
        'MaxLat',
        'ProtocolReq',
        'DataConfidentiality',
        'DataIntegrity',
        'ReqNonrepudiation',
        'DataAuthentication',
        'POLICYC',
        'Policies',
        'MediumCost',
        'CostClass',
        'CostAmount',
        'CostValue',
        'CostTimeUnit',
        'CostAmountUnit',
        'LocPrivacy',
        'Anonymity',
        'ITS-S-Appl-Reg',
        'ITS-S-Appl-RegConf',
        'ITS-S-Appl-RegFinal',
        'Logic',
        'ConfValue',
        'CostObjective',
        ]
    _set_ = [
        'Req-SCP',
        'ReqConf-SCP',
        'Policy',
        ]
    _val_ = [
        'logChannel',
        'destType',
        'destDomain',
        'maxAPDU',
        'contConnect',
        'nxRepeat',
        'storeForward',
        'flowType',
        'commDistance',
        'directivity',
        'multiHop',
        'reduntOp',
        'minThP',
        'maxLat',
        'protocolReq',
        'dataConfidentiality',
        'dataIntegrity',
        'nonReputability',
        'dataAuthentication',
        'logChannelConf',
        'destTypeConf',
        'destDomainConf',
        'maxAPDUConf',
        'contConnectConf',
        'nxRepeatConf',
        'storeForwardConf',
        'flowTypeConf',
        'commDistanceConf',
        'directivityConf',
        'multiHopConf',
        'reduntOpConf',
        'minThPConf',
        'maxLatConf',
        'protocolReqConf',
        'dataConfidentialityConf',
        'dataIntegrityConf',
        'nonReputabilityConf',
        'dataAuthenticationConf',
        'mediumCost',
        'locPrivacy',
        'anonymity',
        ]
    _class_ = [
        'REQSCP',
        'REQSCPCONF',
        'Req-SCP',
        'logChannel',
        'destType',
        'destDomain',
        'maxAPDU',
        'contConnect',
        'nxRepeat',
        'storeForward',
        'flowType',
        'commDistance',
        'directivity',
        'multiHop',
        'reduntOp',
        'minThP',
        'maxLat',
        'protocolReq',
        'dataConfidentiality',
        'dataIntegrity',
        'nonReputability',
        'dataAuthentication',
        'ReqConf-SCP',
        'logChannelConf',
        'destTypeConf',
        'destDomainConf',
        'maxAPDUConf',
        'contConnectConf',
        'nxRepeatConf',
        'storeForwardConf',
        'flowTypeConf',
        'commDistanceConf',
        'directivityConf',
        'multiHopConf',
        'reduntOpConf',
        'minThPConf',
        'maxLatConf',
        'protocolReqConf',
        'dataConfidentialityConf',
        'dataIntegrityConf',
        'nonReputabilityConf',
        'dataAuthenticationConf',
        'POLICYC',
        'Policy',
        'mediumCost',
        'locPrivacy',
        'anonymity',
        ]
    _param_ = [
        ]
    
    #-----< ITSSappCPReqReg >-----#
    ITSSappCPReqReg = SEQ(name='ITSSappCPReqReg', mode=MODE_TYPE)
    _ITSSappCPReqReg_applicationID = SEQ(name='applicationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ApplicationID')))
    _ITSSappCPReqReg_rxTxPort = SEQ(name='rxTxPort', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'ITSSappRxTxPort')))
    _ITSSappCPReqReg_requirements = SEQ_OF(name='requirements', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'ITSSappReq')))
    ITSSappCPReqReg._cont = ASN1Dict([
        ('applicationID', _ITSSappCPReqReg_applicationID),
        ('rxTxPort', _ITSSappCPReqReg_rxTxPort),
        ('requirements', _ITSSappCPReqReg_requirements),
        ])
    ITSSappCPReqReg._ext = None
    
    #-----< ITSSappRxTxPort >-----#
    ITSSappRxTxPort = SEQ(name='ITSSappRxTxPort', mode=MODE_TYPE)
    _ITSSappRxTxPort_portNo = CHOICE(name='portNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplReq', 'ITSSappRxTxPortNo')))
    _ITSSappRxTxPort_portType = INT(name='portType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'ITSSappRxTxPortType')))
    ITSSappRxTxPort._cont = ASN1Dict([
        ('portNo', _ITSSappRxTxPort_portNo),
        ('portType', _ITSSappRxTxPort_portType),
        ])
    ITSSappRxTxPort._ext = None
    
    #-----< ITSSappRxTxPortNo >-----#
    ITSSappRxTxPortNo = CHOICE(name='ITSSappRxTxPortNo', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtIDs', 'VarLengthNumber2')))
    
    #-----< ITSSappRxTxPortType >-----#
    ITSSappRxTxPortType = INT(name='ITSSappRxTxPortType', mode=MODE_TYPE)
    ITSSappRxTxPortType._cont = ASN1Dict([('rxPort', 0), ('txPort', 255)])
    ITSSappRxTxPortType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< ServiceRef >-----#
    ServiceRef = SEQ(name='ServiceRef', mode=MODE_TYPE)
    _ServiceRef_itsaid = CHOICE(name='itsaid', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtApplReg', 'ITSaid')))
    _ServiceRef_instance = INT(name='instance', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ServiceRef_instance._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _ServiceRef_flowNo = INT(name='flowNo', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'FlowNo')))
    ServiceRef._cont = ASN1Dict([
        ('itsaid', _ServiceRef_itsaid),
        ('instance', _ServiceRef_instance),
        ('flowNo', _ServiceRef_flowNo),
        ])
    ServiceRef._ext = None
    
    #-----< FlowNo >-----#
    FlowNo = INT(name='FlowNo', mode=MODE_TYPE)
    FlowNo._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< ITSSappCPReqConf >-----#
    ITSSappCPReqConf = SEQ(name='ITSSappCPReqConf', mode=MODE_TYPE)
    _ITSSappCPReqConf_applicationID = SEQ(name='applicationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ApplicationID')))
    _ITSSappCPReqConf_rxTxPort = SEQ(name='rxTxPort', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'ITSSappRxTxPort')))
    _ITSSappCPReqConf_confDetails = SEQ_OF(name='confDetails', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'ITSSappReqConf')))
    ITSSappCPReqConf._cont = ASN1Dict([
        ('applicationID', _ITSSappCPReqConf_applicationID),
        ('rxTxPort', _ITSSappCPReqConf_rxTxPort),
        ('confDetails', _ITSSappCPReqConf_confDetails),
        ])
    ITSSappCPReqConf._ext = None
    
    #-----< REQSCP >-----#
    REQSCP = CLASS(name='REQSCP', mode=MODE_TYPE)
    _REQSCP_ref = INT(name='ref', mode=MODE_VALUE)
    _REQSCP_ref._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _REQSCP_ReqParam = OPEN(name='ReqParam', mode=MODE_TYPE)
    REQSCP._cont = ASN1Dict([
        ('ref', _REQSCP_ref),
        ('ReqParam', _REQSCP_ReqParam),
        ])
    
    #-----< ITSSappReq >-----#
    ITSSappReq = SEQ_OF(name='ITSSappReq', mode=MODE_TYPE)
    _ITSSappReq__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    __ITSSappReq__item__refNo = INT(name='refNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CITSapplReq', 'REQSCP'), ['ref']))
    ___ITSSappReq__item__refNo_tab = CLASS(name='_tab_REQSCP', mode=MODE_SET, typeref=ASN1RefType(('CITSapplReq', 'REQSCP')))
    ____ITSSappReq__item__refNo_tab_val_ReqParam_0 = CHOICE(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtComm', 'LogicalChannelType')))
    ____ITSSappReq__item__refNo_tab_val_ReqParam_1 = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'DestinationType')))
    ____ITSSappReq__item__refNo_tab_val_ReqParam_2 = INT(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'DestDomain')))
    ____ITSSappReq__item__refNo_tab_val_ReqParam_3 = INT(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MaxADU')))
    ____ITSSappReq__item__refNo_tab_val_ReqParam_4 = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ContConnect')))
    ____ITSSappReq__item__refNo_tab_val_ReqParam_5 = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'NxRepeat')))
    ____ITSSappReq__item__refNo_tab_val_ReqParam_6 = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'StoreForward')))
    ____ITSSappReq__item__refNo_tab_val_ReqParam_7 = CHOICE(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'FlowTypeID')))
    ____ITSSappReq__item__refNo_tab_val_ReqParam_8 = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'CommDistance')))
    ____ITSSappReq__item__refNo_tab_val_ReqParam_9 = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Directivity')))
    ____ITSSappReq__item__refNo_tab_val_ReqParam_10 = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MultiHop')))
    ____ITSSappReq__item__refNo_tab_val_ReqParam_11 = INT(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Resilience')))
    ____ITSSappReq__item__refNo_tab_val_ReqParam_12 = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MinThP')))
    ____ITSSappReq__item__refNo_tab_val_ReqParam_13 = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MaxLat')))
    ____ITSSappReq__item__refNo_tab_val_ReqParam_14 = CHOICE(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ProtocolReq')))
    ____ITSSappReq__item__refNo_tab_val_ReqParam_15 = INT(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'DataConfidentiality')))
    ____ITSSappReq__item__refNo_tab_val_ReqParam_16 = INT(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'DataIntegrity')))
    ____ITSSappReq__item__refNo_tab_val_ReqParam_17 = INT(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ReqNonrepudiation')))
    ____ITSSappReq__item__refNo_tab_val_ReqParam_18 = INT(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'DataAuthentication')))
    ___ITSSappReq__item__refNo_tab._val = ASN1Set(rv=[dict([('ref', 0), ('ReqParam', ____ITSSappReq__item__refNo_tab_val_ReqParam_0)]), dict([('ref', 2), ('ReqParam', ____ITSSappReq__item__refNo_tab_val_ReqParam_1)]), dict([('ref', 4), ('ReqParam', ____ITSSappReq__item__refNo_tab_val_ReqParam_2)]), dict([('ref', 6), ('ReqParam', ____ITSSappReq__item__refNo_tab_val_ReqParam_3)]), dict([('ref', 1), ('ReqParam', ____ITSSappReq__item__refNo_tab_val_ReqParam_4)]), dict([('ref', 3), ('ReqParam', ____ITSSappReq__item__refNo_tab_val_ReqParam_5)]), dict([('ref', 5), ('ReqParam', ____ITSSappReq__item__refNo_tab_val_ReqParam_6)]), dict([('ref', 7), ('ReqParam', ____ITSSappReq__item__refNo_tab_val_ReqParam_7)]), dict([('ref', 9), ('ReqParam', ____ITSSappReq__item__refNo_tab_val_ReqParam_8)]), dict([('ref', 11), ('ReqParam', ____ITSSappReq__item__refNo_tab_val_ReqParam_9)]), dict([('ref', 13), ('ReqParam', ____ITSSappReq__item__refNo_tab_val_ReqParam_10)]), dict([('ref', 15), ('ReqParam', ____ITSSappReq__item__refNo_tab_val_ReqParam_11)]), dict([('ref', 17), ('ReqParam', ____ITSSappReq__item__refNo_tab_val_ReqParam_12)]), dict([('ref', 19), ('ReqParam', ____ITSSappReq__item__refNo_tab_val_ReqParam_13)]), dict([('ref', 21), ('ReqParam', ____ITSSappReq__item__refNo_tab_val_ReqParam_14)]), dict([('ref', 23), ('ReqParam', ____ITSSappReq__item__refNo_tab_val_ReqParam_15)]), dict([('ref', 25), ('ReqParam', ____ITSSappReq__item__refNo_tab_val_ReqParam_16)]), dict([('ref', 27), ('ReqParam', ____ITSSappReq__item__refNo_tab_val_ReqParam_17)]), dict([('ref', 29), ('ReqParam', ____ITSSappReq__item__refNo_tab_val_ReqParam_18)])], rr=[], ev=None, er=[])
    __ITSSappReq__item__refNo._const_tab = ___ITSSappReq__item__refNo_tab
    __ITSSappReq__item__refNo._const_tab_at = None
    __ITSSappReq__item__refNo._const_tab_id = 'ref'
    __ITSSappReq__item__param = OPEN(name='param', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CITSapplReq', 'REQSCP'), ['ReqParam']))
    __ITSSappReq__item__param._const_tab = ___ITSSappReq__item__refNo_tab
    __ITSSappReq__item__param._const_tab_at = ('..', 'refNo')
    __ITSSappReq__item__param._const_tab_id = 'ReqParam'
    _ITSSappReq__item_._cont = ASN1Dict([
        ('refNo', __ITSSappReq__item__refNo),
        ('param', __ITSSappReq__item__param),
        ])
    _ITSSappReq__item_._ext = None
    ITSSappReq._cont = _ITSSappReq__item_
    
    #-----< REQSCPCONF >-----#
    REQSCPCONF = CLASS(name='REQSCPCONF', mode=MODE_TYPE)
    _REQSCPCONF_ref = INT(name='ref', mode=MODE_VALUE)
    _REQSCPCONF_ref._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _REQSCPCONF_ReqConfParam = OPEN(name='ReqConfParam', mode=MODE_TYPE)
    REQSCPCONF._cont = ASN1Dict([
        ('ref', _REQSCPCONF_ref),
        ('ReqConfParam', _REQSCPCONF_ReqConfParam),
        ])
    
    #-----< ITSSappReqConf >-----#
    ITSSappReqConf = SEQ_OF(name='ITSSappReqConf', mode=MODE_TYPE)
    _ITSSappReqConf__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    __ITSSappReqConf__item__refNo = INT(name='refNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CITSapplReq', 'REQSCPCONF'), ['ref']))
    ___ITSSappReqConf__item__refNo_tab = CLASS(name='_tab_REQSCPCONF', mode=MODE_SET, typeref=ASN1RefType(('CITSapplReq', 'REQSCPCONF')))
    ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_0 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_1 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_2 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_3 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MaxADU')))
    ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_4 = SEQ(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ContConnect')))
    ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_5 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_6 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_7 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_8 = SEQ(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'CommDistance')))
    ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_9 = SEQ(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Directivity')))
    ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_10 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_11 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_12 = SEQ(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MinThP')))
    ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_13 = SEQ(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MaxLat')))
    ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_14 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_15 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_16 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_17 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_18 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    ___ITSSappReqConf__item__refNo_tab._val = ASN1Set(rv=[dict([('ref', 0), ('ReqConfParam', ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_0)]), dict([('ref', 2), ('ReqConfParam', ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_1)]), dict([('ref', 4), ('ReqConfParam', ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_2)]), dict([('ref', 6), ('ReqConfParam', ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_3)]), dict([('ref', 1), ('ReqConfParam', ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_4)]), dict([('ref', 3), ('ReqConfParam', ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_5)]), dict([('ref', 5), ('ReqConfParam', ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_6)]), dict([('ref', 7), ('ReqConfParam', ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_7)]), dict([('ref', 9), ('ReqConfParam', ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_8)]), dict([('ref', 11), ('ReqConfParam', ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_9)]), dict([('ref', 13), ('ReqConfParam', ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_10)]), dict([('ref', 15), ('ReqConfParam', ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_11)]), dict([('ref', 17), ('ReqConfParam', ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_12)]), dict([('ref', 19), ('ReqConfParam', ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_13)]), dict([('ref', 21), ('ReqConfParam', ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_14)]), dict([('ref', 23), ('ReqConfParam', ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_15)]), dict([('ref', 25), ('ReqConfParam', ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_16)]), dict([('ref', 27), ('ReqConfParam', ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_17)]), dict([('ref', 29), ('ReqConfParam', ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_18)])], rr=[], ev=None, er=[])
    __ITSSappReqConf__item__refNo._const_tab = ___ITSSappReqConf__item__refNo_tab
    __ITSSappReqConf__item__refNo._const_tab_at = None
    __ITSSappReqConf__item__refNo._const_tab_id = 'ref'
    __ITSSappReqConf__item__param = OPEN(name='param', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CITSapplReq', 'REQSCPCONF'), ['ReqConfParam']))
    __ITSSappReqConf__item__param._const_tab = ___ITSSappReqConf__item__refNo_tab
    __ITSSappReqConf__item__param._const_tab_at = ('..', 'refNo')
    __ITSSappReqConf__item__param._const_tab_id = 'ReqConfParam'
    _ITSSappReqConf__item_._cont = ASN1Dict([
        ('refNo', __ITSSappReqConf__item__refNo),
        ('param', __ITSSappReqConf__item__param),
        ])
    _ITSSappReqConf__item_._ext = None
    ITSSappReqConf._cont = _ITSSappReqConf__item_
    
    #-----< ITSSappCPFinal >-----#
    ITSSappCPFinal = SEQ(name='ITSSappCPFinal', mode=MODE_TYPE)
    _ITSSappCPFinal_applicationID = SEQ(name='applicationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMmanagement', 'ApplicationID')))
    _ITSSappCPFinal_final = INT(name='final', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    ITSSappCPFinal._cont = ASN1Dict([
        ('applicationID', _ITSSappCPFinal_applicationID),
        ('final', _ITSSappCPFinal_final),
        ])
    ITSSappCPFinal._ext = None
    
    #-----< Req-SCP >-----#
    Req_SCP = CLASS(name='Req-SCP', mode=MODE_SET, typeref=ASN1RefType(('CITSapplReq', 'REQSCP')))
    _Req_SCP_val_ReqParam_0 = CHOICE(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtComm', 'LogicalChannelType')))
    _Req_SCP_val_ReqParam_1 = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'DestinationType')))
    _Req_SCP_val_ReqParam_2 = INT(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'DestDomain')))
    _Req_SCP_val_ReqParam_3 = INT(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MaxADU')))
    _Req_SCP_val_ReqParam_4 = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ContConnect')))
    _Req_SCP_val_ReqParam_5 = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'NxRepeat')))
    _Req_SCP_val_ReqParam_6 = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'StoreForward')))
    _Req_SCP_val_ReqParam_7 = CHOICE(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'FlowTypeID')))
    _Req_SCP_val_ReqParam_8 = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'CommDistance')))
    _Req_SCP_val_ReqParam_9 = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Directivity')))
    _Req_SCP_val_ReqParam_10 = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MultiHop')))
    _Req_SCP_val_ReqParam_11 = INT(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Resilience')))
    _Req_SCP_val_ReqParam_12 = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MinThP')))
    _Req_SCP_val_ReqParam_13 = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MaxLat')))
    _Req_SCP_val_ReqParam_14 = CHOICE(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ProtocolReq')))
    _Req_SCP_val_ReqParam_15 = INT(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'DataConfidentiality')))
    _Req_SCP_val_ReqParam_16 = INT(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'DataIntegrity')))
    _Req_SCP_val_ReqParam_17 = INT(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ReqNonrepudiation')))
    _Req_SCP_val_ReqParam_18 = INT(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'DataAuthentication')))
    Req_SCP._val = ASN1Set(rv=[dict([('ref', 0), ('ReqParam', _Req_SCP_val_ReqParam_0)]), dict([('ref', 2), ('ReqParam', _Req_SCP_val_ReqParam_1)]), dict([('ref', 4), ('ReqParam', _Req_SCP_val_ReqParam_2)]), dict([('ref', 6), ('ReqParam', _Req_SCP_val_ReqParam_3)]), dict([('ref', 1), ('ReqParam', _Req_SCP_val_ReqParam_4)]), dict([('ref', 3), ('ReqParam', _Req_SCP_val_ReqParam_5)]), dict([('ref', 5), ('ReqParam', _Req_SCP_val_ReqParam_6)]), dict([('ref', 7), ('ReqParam', _Req_SCP_val_ReqParam_7)]), dict([('ref', 9), ('ReqParam', _Req_SCP_val_ReqParam_8)]), dict([('ref', 11), ('ReqParam', _Req_SCP_val_ReqParam_9)]), dict([('ref', 13), ('ReqParam', _Req_SCP_val_ReqParam_10)]), dict([('ref', 15), ('ReqParam', _Req_SCP_val_ReqParam_11)]), dict([('ref', 17), ('ReqParam', _Req_SCP_val_ReqParam_12)]), dict([('ref', 19), ('ReqParam', _Req_SCP_val_ReqParam_13)]), dict([('ref', 21), ('ReqParam', _Req_SCP_val_ReqParam_14)]), dict([('ref', 23), ('ReqParam', _Req_SCP_val_ReqParam_15)]), dict([('ref', 25), ('ReqParam', _Req_SCP_val_ReqParam_16)]), dict([('ref', 27), ('ReqParam', _Req_SCP_val_ReqParam_17)]), dict([('ref', 29), ('ReqParam', _Req_SCP_val_ReqParam_18)])], rr=[], ev=[], er=[])
    
    #-----< logChannel >-----#
    logChannel = CLASS(name='logChannel', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCP')))
    _logChannel_val_ReqParam = CHOICE(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtComm', 'LogicalChannelType')))
    logChannel._val = dict([('ref', 0), ('ReqParam', _logChannel_val_ReqParam)])
    
    #-----< destType >-----#
    destType = CLASS(name='destType', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCP')))
    _destType_val_ReqParam = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'DestinationType')))
    destType._val = dict([('ref', 2), ('ReqParam', _destType_val_ReqParam)])
    
    #-----< destDomain >-----#
    destDomain = CLASS(name='destDomain', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCP')))
    _destDomain_val_ReqParam = INT(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'DestDomain')))
    destDomain._val = dict([('ref', 4), ('ReqParam', _destDomain_val_ReqParam)])
    
    #-----< maxAPDU >-----#
    maxAPDU = CLASS(name='maxAPDU', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCP')))
    _maxAPDU_val_ReqParam = INT(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MaxADU')))
    maxAPDU._val = dict([('ref', 6), ('ReqParam', _maxAPDU_val_ReqParam)])
    
    #-----< DestinationType >-----#
    DestinationType = SEQ(name='DestinationType', mode=MODE_TYPE)
    _DestinationType_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DestinationType_fill._const_sz = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    _DestinationType_type = CHOICE(name='type', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplReq', 'DestType')))
    DestinationType._cont = ASN1Dict([
        ('fill', _DestinationType_fill),
        ('type', _DestinationType_type),
        ])
    DestinationType._ext = None
    
    #-----< DestType >-----#
    DestType = CHOICE(name='DestType', mode=MODE_TYPE)
    _DestType_addressType = SEQ(name='addressType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'AddressBasedType')))
    _DestType_geoLocType = SEQ(name='geoLocType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'GeoLocationBasedType')))
    DestType._cont = ASN1Dict([
        ('addressType', _DestType_addressType),
        ('geoLocType', _DestType_geoLocType),
        ])
    DestType._ext = None
    
    #-----< AddressBasedType >-----#
    AddressBasedType = SEQ(name='AddressBasedType', mode=MODE_TYPE)
    _AddressBasedType_type = INT(name='type', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _AddressBasedType_type._cont = ASN1Dict([('broadCast', 0), ('multiCast', 1), ('unicast', 2)])
    _AddressBasedType_type._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=None, er=[])
    _AddressBasedType_mcGroups = SEQ_OF(name='mcGroups', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __AddressBasedType_mcGroups__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtComm', 'MCgroup')))
    _AddressBasedType_mcGroups._cont = __AddressBasedType_mcGroups__item_
    _AddressBasedType_mcGroups._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    AddressBasedType._cont = ASN1Dict([
        ('type', _AddressBasedType_type),
        ('mcGroups', _AddressBasedType_mcGroups),
        ])
    AddressBasedType._ext = None
    
    #-----< GeoLocationBasedType >-----#
    GeoLocationBasedType = SEQ(name='GeoLocationBasedType', mode=MODE_TYPE)
    _GeoLocationBasedType_type = INT(name='type', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _GeoLocationBasedType_type._cont = ASN1Dict([('geoUnicast', 0), ('geoAnycast', 1), ('geoMulticast', 2), ('geoBroadcast', 4)])
    _GeoLocationBasedType_type._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=None, er=[])
    _GeoLocationBasedType_mcGroups = SEQ_OF(name='mcGroups', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __GeoLocationBasedType_mcGroups__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtComm', 'MCgroup')))
    _GeoLocationBasedType_mcGroups._cont = __GeoLocationBasedType_mcGroups__item_
    _GeoLocationBasedType_mcGroups._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    GeoLocationBasedType._cont = ASN1Dict([
        ('type', _GeoLocationBasedType_type),
        ('mcGroups', _GeoLocationBasedType_mcGroups),
        ])
    GeoLocationBasedType._ext = None
    
    #-----< DestDomain >-----#
    DestDomain = INT(name='DestDomain', mode=MODE_TYPE)
    DestDomain._cont = ASN1Dict([('stationInternal', 0), ('linkLocal', 1), ('siteLocal', 2), ('itsNWlocal', 4), ('global', 8)])
    DestDomain._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< MaxADU >-----#
    MaxADU = INT(name='MaxADU', mode=MODE_TYPE)
    MaxADU._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< contConnect >-----#
    contConnect = CLASS(name='contConnect', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCP')))
    _contConnect_val_ReqParam = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ContConnect')))
    contConnect._val = dict([('ref', 1), ('ReqParam', _contConnect_val_ReqParam)])
    
    #-----< nxRepeat >-----#
    nxRepeat = CLASS(name='nxRepeat', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCP')))
    _nxRepeat_val_ReqParam = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'NxRepeat')))
    nxRepeat._val = dict([('ref', 3), ('ReqParam', _nxRepeat_val_ReqParam)])
    
    #-----< storeForward >-----#
    storeForward = CLASS(name='storeForward', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCP')))
    _storeForward_val_ReqParam = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'StoreForward')))
    storeForward._val = dict([('ref', 5), ('ReqParam', _storeForward_val_ReqParam)])
    
    #-----< flowType >-----#
    flowType = CLASS(name='flowType', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCP')))
    _flowType_val_ReqParam = CHOICE(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtApplReg', 'FlowTypeID')))
    flowType._val = dict([('ref', 7), ('ReqParam', _flowType_val_ReqParam)])
    
    #-----< commDistance >-----#
    commDistance = CLASS(name='commDistance', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCP')))
    _commDistance_val_ReqParam = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'CommDistance')))
    commDistance._val = dict([('ref', 9), ('ReqParam', _commDistance_val_ReqParam)])
    
    #-----< directivity >-----#
    directivity = CLASS(name='directivity', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCP')))
    _directivity_val_ReqParam = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Directivity')))
    directivity._val = dict([('ref', 11), ('ReqParam', _directivity_val_ReqParam)])
    
    #-----< multiHop >-----#
    multiHop = CLASS(name='multiHop', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCP')))
    _multiHop_val_ReqParam = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MultiHop')))
    multiHop._val = dict([('ref', 13), ('ReqParam', _multiHop_val_ReqParam)])
    
    #-----< reduntOp >-----#
    reduntOp = CLASS(name='reduntOp', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCP')))
    _reduntOp_val_ReqParam = INT(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Resilience')))
    reduntOp._val = dict([('ref', 15), ('ReqParam', _reduntOp_val_ReqParam)])
    
    #-----< minThP >-----#
    minThP = CLASS(name='minThP', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCP')))
    _minThP_val_ReqParam = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MinThP')))
    minThP._val = dict([('ref', 17), ('ReqParam', _minThP_val_ReqParam)])
    
    #-----< maxLat >-----#
    maxLat = CLASS(name='maxLat', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCP')))
    _maxLat_val_ReqParam = SEQ(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MaxLat')))
    maxLat._val = dict([('ref', 19), ('ReqParam', _maxLat_val_ReqParam)])
    
    #-----< protocolReq >-----#
    protocolReq = CLASS(name='protocolReq', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCP')))
    _protocolReq_val_ReqParam = CHOICE(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ProtocolReq')))
    protocolReq._val = dict([('ref', 21), ('ReqParam', _protocolReq_val_ReqParam)])
    
    #-----< dataConfidentiality >-----#
    dataConfidentiality = CLASS(name='dataConfidentiality', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCP')))
    _dataConfidentiality_val_ReqParam = INT(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'DataConfidentiality')))
    dataConfidentiality._val = dict([('ref', 23), ('ReqParam', _dataConfidentiality_val_ReqParam)])
    
    #-----< dataIntegrity >-----#
    dataIntegrity = CLASS(name='dataIntegrity', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCP')))
    _dataIntegrity_val_ReqParam = INT(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'DataIntegrity')))
    dataIntegrity._val = dict([('ref', 25), ('ReqParam', _dataIntegrity_val_ReqParam)])
    
    #-----< nonReputability >-----#
    nonReputability = CLASS(name='nonReputability', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCP')))
    _nonReputability_val_ReqParam = INT(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ReqNonrepudiation')))
    nonReputability._val = dict([('ref', 27), ('ReqParam', _nonReputability_val_ReqParam)])
    
    #-----< dataAuthentication >-----#
    dataAuthentication = CLASS(name='dataAuthentication', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCP')))
    _dataAuthentication_val_ReqParam = INT(name='ReqParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'DataAuthentication')))
    dataAuthentication._val = dict([('ref', 29), ('ReqParam', _dataAuthentication_val_ReqParam)])
    
    #-----< ContConnect >-----#
    ContConnect = SEQ(name='ContConnect', mode=MODE_TYPE)
    _ContConnect_duration = SEQ(name='duration', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'TimDurationValue')))
    _ContConnect_interrupt = INT(name='interrupt', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    ContConnect._cont = ASN1Dict([
        ('duration', _ContConnect_duration),
        ('interrupt', _ContConnect_interrupt),
        ])
    ContConnect._ext = None
    
    #-----< TimDurationValue >-----#
    TimDurationValue = SEQ(name='TimDurationValue', mode=MODE_TYPE)
    _TimDurationValue_value = INT(name='value', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TimDurationValue_value._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1023)], ev=None, er=[])
    _TimDurationValue_unit = INT(name='unit', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'TimeUnit')))
    TimDurationValue._cont = ASN1Dict([
        ('value', _TimDurationValue_value),
        ('unit', _TimDurationValue_unit),
        ])
    TimDurationValue._ext = None
    
    #-----< NxRepeat >-----#
    NxRepeat = SEQ(name='NxRepeat', mode=MODE_TYPE)
    _NxRepeat_repeat = INT(name='repeat', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _NxRepeat_repeat._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _NxRepeat_interval = SEQ(name='interval', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'TimDurationValue')))
    NxRepeat._cont = ASN1Dict([
        ('repeat', _NxRepeat_repeat),
        ('interval', _NxRepeat_interval),
        ])
    NxRepeat._ext = None
    
    #-----< StoreForward >-----#
    StoreForward = SEQ(name='StoreForward', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'TimDurationValue')))
    
    #-----< CommDistance >-----#
    CommDistance = SEQ(name='CommDistance', mode=MODE_TYPE)
    _CommDistance_minDistance = INT(name='minDistance', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CommDistance_minDistance._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _CommDistance_cost = INT(name='cost', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'CostObjective')))
    CommDistance._cont = ASN1Dict([
        ('minDistance', _CommDistance_minDistance),
        ('cost', _CommDistance_cost),
        ])
    CommDistance._ext = None
    
    #-----< MultiHop >-----#
    MultiHop = SEQ(name='MultiHop', mode=MODE_TYPE)
    _MultiHop_hops = INT(name='hops', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _MultiHop_hops._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _MultiHop_cost = INT(name='cost', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'CostObjective')))
    MultiHop._cont = ASN1Dict([
        ('hops', _MultiHop_hops),
        ('cost', _MultiHop_cost),
        ])
    MultiHop._ext = None
    
    #-----< Resilience >-----#
    Resilience = INT(name='Resilience', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'CostObjective')))
    
    #-----< MinThP >-----#
    MinThP = SEQ(name='MinThP', mode=MODE_TYPE)
    _MinThP_minThP = INT(name='minThP', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'DataRate')))
    _MinThP_cost = INT(name='cost', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'CostObjective')))
    MinThP._cont = ASN1Dict([
        ('minThP', _MinThP_minThP),
        ('cost', _MinThP_cost),
        ])
    MinThP._ext = None
    
    #-----< MaxLat >-----#
    MaxLat = SEQ(name='MaxLat', mode=MODE_TYPE)
    _MaxLat_lat = INT(name='lat', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _MaxLat_lat._cont = ASN1Dict([('unknown', 0), ('any', 1), ('ms', 2), ('ms10', 4), ('ms100', 8), ('sec', 16), ('sec10', 32), ('min', 64), ('min10', 128)])
    _MaxLat_lat._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _MaxLat_cost = INT(name='cost', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'CostObjective')))
    MaxLat._cont = ASN1Dict([
        ('lat', _MaxLat_lat),
        ('cost', _MaxLat_cost),
        ])
    MaxLat._ext = None
    
    #-----< ProtocolReq >-----#
    ProtocolReq = CHOICE(name='ProtocolReq', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplMgmtComm', 'ITSprotocolStackID')))
    
    #-----< DataConfidentiality >-----#
    DataConfidentiality = INT(name='DataConfidentiality', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ConfValue')))
    
    #-----< DataIntegrity >-----#
    DataIntegrity = INT(name='DataIntegrity', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ConfValue')))
    
    #-----< ReqNonrepudiation >-----#
    ReqNonrepudiation = INT(name='ReqNonrepudiation', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ConfValue')))
    
    #-----< DataAuthentication >-----#
    DataAuthentication = INT(name='DataAuthentication', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ConfValue')))
    
    #-----< ReqConf-SCP >-----#
    ReqConf_SCP = CLASS(name='ReqConf-SCP', mode=MODE_SET, typeref=ASN1RefType(('CITSapplReq', 'REQSCPCONF')))
    _ReqConf_SCP_val_ReqConfParam_0 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    _ReqConf_SCP_val_ReqConfParam_1 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    _ReqConf_SCP_val_ReqConfParam_2 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    _ReqConf_SCP_val_ReqConfParam_3 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MaxADU')))
    _ReqConf_SCP_val_ReqConfParam_4 = SEQ(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ContConnect')))
    _ReqConf_SCP_val_ReqConfParam_5 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    _ReqConf_SCP_val_ReqConfParam_6 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    _ReqConf_SCP_val_ReqConfParam_7 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    _ReqConf_SCP_val_ReqConfParam_8 = SEQ(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'CommDistance')))
    _ReqConf_SCP_val_ReqConfParam_9 = SEQ(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Directivity')))
    _ReqConf_SCP_val_ReqConfParam_10 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    _ReqConf_SCP_val_ReqConfParam_11 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    _ReqConf_SCP_val_ReqConfParam_12 = SEQ(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MinThP')))
    _ReqConf_SCP_val_ReqConfParam_13 = SEQ(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MaxLat')))
    _ReqConf_SCP_val_ReqConfParam_14 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    _ReqConf_SCP_val_ReqConfParam_15 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    _ReqConf_SCP_val_ReqConfParam_16 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    _ReqConf_SCP_val_ReqConfParam_17 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    _ReqConf_SCP_val_ReqConfParam_18 = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    ReqConf_SCP._val = ASN1Set(rv=[dict([('ref', 0), ('ReqConfParam', _ReqConf_SCP_val_ReqConfParam_0)]), dict([('ref', 2), ('ReqConfParam', _ReqConf_SCP_val_ReqConfParam_1)]), dict([('ref', 4), ('ReqConfParam', _ReqConf_SCP_val_ReqConfParam_2)]), dict([('ref', 6), ('ReqConfParam', _ReqConf_SCP_val_ReqConfParam_3)]), dict([('ref', 1), ('ReqConfParam', _ReqConf_SCP_val_ReqConfParam_4)]), dict([('ref', 3), ('ReqConfParam', _ReqConf_SCP_val_ReqConfParam_5)]), dict([('ref', 5), ('ReqConfParam', _ReqConf_SCP_val_ReqConfParam_6)]), dict([('ref', 7), ('ReqConfParam', _ReqConf_SCP_val_ReqConfParam_7)]), dict([('ref', 9), ('ReqConfParam', _ReqConf_SCP_val_ReqConfParam_8)]), dict([('ref', 11), ('ReqConfParam', _ReqConf_SCP_val_ReqConfParam_9)]), dict([('ref', 13), ('ReqConfParam', _ReqConf_SCP_val_ReqConfParam_10)]), dict([('ref', 15), ('ReqConfParam', _ReqConf_SCP_val_ReqConfParam_11)]), dict([('ref', 17), ('ReqConfParam', _ReqConf_SCP_val_ReqConfParam_12)]), dict([('ref', 19), ('ReqConfParam', _ReqConf_SCP_val_ReqConfParam_13)]), dict([('ref', 21), ('ReqConfParam', _ReqConf_SCP_val_ReqConfParam_14)]), dict([('ref', 23), ('ReqConfParam', _ReqConf_SCP_val_ReqConfParam_15)]), dict([('ref', 25), ('ReqConfParam', _ReqConf_SCP_val_ReqConfParam_16)]), dict([('ref', 27), ('ReqConfParam', _ReqConf_SCP_val_ReqConfParam_17)]), dict([('ref', 29), ('ReqConfParam', _ReqConf_SCP_val_ReqConfParam_18)])], rr=[], ev=[], er=[])
    
    #-----< logChannelConf >-----#
    logChannelConf = CLASS(name='logChannelConf', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCPCONF')))
    _logChannelConf_val_ReqConfParam = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    logChannelConf._val = dict([('ref', 0), ('ReqConfParam', _logChannelConf_val_ReqConfParam)])
    
    #-----< destTypeConf >-----#
    destTypeConf = CLASS(name='destTypeConf', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCPCONF')))
    _destTypeConf_val_ReqConfParam = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    destTypeConf._val = dict([('ref', 2), ('ReqConfParam', _destTypeConf_val_ReqConfParam)])
    
    #-----< destDomainConf >-----#
    destDomainConf = CLASS(name='destDomainConf', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCPCONF')))
    _destDomainConf_val_ReqConfParam = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    destDomainConf._val = dict([('ref', 4), ('ReqConfParam', _destDomainConf_val_ReqConfParam)])
    
    #-----< maxAPDUConf >-----#
    maxAPDUConf = CLASS(name='maxAPDUConf', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCPCONF')))
    _maxAPDUConf_val_ReqConfParam = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MaxADU')))
    maxAPDUConf._val = dict([('ref', 6), ('ReqConfParam', _maxAPDUConf_val_ReqConfParam)])
    
    #-----< contConnectConf >-----#
    contConnectConf = CLASS(name='contConnectConf', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCPCONF')))
    _contConnectConf_val_ReqConfParam = SEQ(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ContConnect')))
    contConnectConf._val = dict([('ref', 1), ('ReqConfParam', _contConnectConf_val_ReqConfParam)])
    
    #-----< nxRepeatConf >-----#
    nxRepeatConf = CLASS(name='nxRepeatConf', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCPCONF')))
    _nxRepeatConf_val_ReqConfParam = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    nxRepeatConf._val = dict([('ref', 3), ('ReqConfParam', _nxRepeatConf_val_ReqConfParam)])
    
    #-----< storeForwardConf >-----#
    storeForwardConf = CLASS(name='storeForwardConf', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCPCONF')))
    _storeForwardConf_val_ReqConfParam = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    storeForwardConf._val = dict([('ref', 5), ('ReqConfParam', _storeForwardConf_val_ReqConfParam)])
    
    #-----< flowTypeConf >-----#
    flowTypeConf = CLASS(name='flowTypeConf', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCPCONF')))
    _flowTypeConf_val_ReqConfParam = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    flowTypeConf._val = dict([('ref', 7), ('ReqConfParam', _flowTypeConf_val_ReqConfParam)])
    
    #-----< commDistanceConf >-----#
    commDistanceConf = CLASS(name='commDistanceConf', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCPCONF')))
    _commDistanceConf_val_ReqConfParam = SEQ(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'CommDistance')))
    commDistanceConf._val = dict([('ref', 9), ('ReqConfParam', _commDistanceConf_val_ReqConfParam)])
    
    #-----< directivityConf >-----#
    directivityConf = CLASS(name='directivityConf', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCPCONF')))
    _directivityConf_val_ReqConfParam = SEQ(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CALMllsap', 'Directivity')))
    directivityConf._val = dict([('ref', 11), ('ReqConfParam', _directivityConf_val_ReqConfParam)])
    
    #-----< multiHopConf >-----#
    multiHopConf = CLASS(name='multiHopConf', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCPCONF')))
    _multiHopConf_val_ReqConfParam = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    multiHopConf._val = dict([('ref', 13), ('ReqConfParam', _multiHopConf_val_ReqConfParam)])
    
    #-----< reduntOpConf >-----#
    reduntOpConf = CLASS(name='reduntOpConf', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCPCONF')))
    _reduntOpConf_val_ReqConfParam = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    reduntOpConf._val = dict([('ref', 15), ('ReqConfParam', _reduntOpConf_val_ReqConfParam)])
    
    #-----< minThPConf >-----#
    minThPConf = CLASS(name='minThPConf', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCPCONF')))
    _minThPConf_val_ReqConfParam = SEQ(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MinThP')))
    minThPConf._val = dict([('ref', 17), ('ReqConfParam', _minThPConf_val_ReqConfParam)])
    
    #-----< maxLatConf >-----#
    maxLatConf = CLASS(name='maxLatConf', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCPCONF')))
    _maxLatConf_val_ReqConfParam = SEQ(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MaxLat')))
    maxLatConf._val = dict([('ref', 19), ('ReqConfParam', _maxLatConf_val_ReqConfParam)])
    
    #-----< protocolReqConf >-----#
    protocolReqConf = CLASS(name='protocolReqConf', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCPCONF')))
    _protocolReqConf_val_ReqConfParam = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    protocolReqConf._val = dict([('ref', 21), ('ReqConfParam', _protocolReqConf_val_ReqConfParam)])
    
    #-----< dataConfidentialityConf >-----#
    dataConfidentialityConf = CLASS(name='dataConfidentialityConf', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCPCONF')))
    _dataConfidentialityConf_val_ReqConfParam = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    dataConfidentialityConf._val = dict([('ref', 23), ('ReqConfParam', _dataConfidentialityConf_val_ReqConfParam)])
    
    #-----< dataIntegrityConf >-----#
    dataIntegrityConf = CLASS(name='dataIntegrityConf', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCPCONF')))
    _dataIntegrityConf_val_ReqConfParam = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    dataIntegrityConf._val = dict([('ref', 25), ('ReqConfParam', _dataIntegrityConf_val_ReqConfParam)])
    
    #-----< nonReputabilityConf >-----#
    nonReputabilityConf = CLASS(name='nonReputabilityConf', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCPCONF')))
    _nonReputabilityConf_val_ReqConfParam = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    nonReputabilityConf._val = dict([('ref', 27), ('ReqConfParam', _nonReputabilityConf_val_ReqConfParam)])
    
    #-----< dataAuthenticationConf >-----#
    dataAuthenticationConf = CLASS(name='dataAuthenticationConf', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'REQSCPCONF')))
    _dataAuthenticationConf_val_ReqConfParam = INT(name='ReqConfParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Logic')))
    dataAuthenticationConf._val = dict([('ref', 29), ('ReqConfParam', _dataAuthenticationConf_val_ReqConfParam)])
    
    #-----< POLICYC >-----#
    POLICYC = CLASS(name='POLICYC', mode=MODE_TYPE)
    _POLICYC_ref = INT(name='ref', mode=MODE_VALUE)
    _POLICYC_ref._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _POLICYC_PolParam = OPEN(name='PolParam', mode=MODE_TYPE)
    POLICYC._cont = ASN1Dict([
        ('ref', _POLICYC_ref),
        ('PolParam', _POLICYC_PolParam),
        ])
    
    #-----< Policies >-----#
    Policies = SEQ_OF(name='Policies', mode=MODE_TYPE)
    _Policies__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    __Policies__item__refNo = INT(name='refNo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('CITSapplReq', 'POLICYC'), ['ref']))
    ___Policies__item__refNo_tab = CLASS(name='_tab_POLICYC', mode=MODE_SET, typeref=ASN1RefType(('CITSapplReq', 'POLICYC')))
    ____Policies__item__refNo_tab_val_PolParam_0 = SEQ(name='PolParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MediumCost')))
    ____Policies__item__refNo_tab_val_PolParam_1 = INT(name='PolParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'LocPrivacy')))
    ____Policies__item__refNo_tab_val_PolParam_2 = INT(name='PolParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Anonymity')))
    ___Policies__item__refNo_tab._val = ASN1Set(rv=[dict([('ref', 0), ('PolParam', ____Policies__item__refNo_tab_val_PolParam_0)]), dict([('ref', 1), ('PolParam', ____Policies__item__refNo_tab_val_PolParam_1)]), dict([('ref', 2), ('PolParam', ____Policies__item__refNo_tab_val_PolParam_2)])], rr=[], ev=None, er=[])
    __Policies__item__refNo._const_tab = ___Policies__item__refNo_tab
    __Policies__item__refNo._const_tab_at = None
    __Policies__item__refNo._const_tab_id = 'ref'
    __Policies__item__param = OPEN(name='param', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('CITSapplReq', 'POLICYC'), ['PolParam']))
    __Policies__item__param._const_tab = ___Policies__item__refNo_tab
    __Policies__item__param._const_tab_at = ('..', 'refNo')
    __Policies__item__param._const_tab_id = 'PolParam'
    _Policies__item_._cont = ASN1Dict([
        ('refNo', __Policies__item__refNo),
        ('param', __Policies__item__param),
        ])
    _Policies__item_._ext = None
    Policies._cont = _Policies__item_
    
    #-----< Policy >-----#
    Policy = CLASS(name='Policy', mode=MODE_SET, typeref=ASN1RefType(('CITSapplReq', 'POLICYC')))
    _Policy_val_PolParam_0 = SEQ(name='PolParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MediumCost')))
    _Policy_val_PolParam_1 = INT(name='PolParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'LocPrivacy')))
    _Policy_val_PolParam_2 = INT(name='PolParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Anonymity')))
    Policy._val = ASN1Set(rv=[dict([('ref', 0), ('PolParam', _Policy_val_PolParam_0)]), dict([('ref', 1), ('PolParam', _Policy_val_PolParam_1)]), dict([('ref', 2), ('PolParam', _Policy_val_PolParam_2)])], rr=[], ev=[], er=[])
    
    #-----< mediumCost >-----#
    mediumCost = CLASS(name='mediumCost', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'POLICYC')))
    _mediumCost_val_PolParam = SEQ(name='PolParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'MediumCost')))
    mediumCost._val = dict([('ref', 0), ('PolParam', _mediumCost_val_PolParam)])
    
    #-----< locPrivacy >-----#
    locPrivacy = CLASS(name='locPrivacy', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'POLICYC')))
    _locPrivacy_val_PolParam = INT(name='PolParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'LocPrivacy')))
    locPrivacy._val = dict([('ref', 1), ('PolParam', _locPrivacy_val_PolParam)])
    
    #-----< anonymity >-----#
    anonymity = CLASS(name='anonymity', mode=MODE_VALUE, typeref=ASN1RefType(('CITSapplReq', 'POLICYC')))
    _anonymity_val_PolParam = INT(name='PolParam', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'Anonymity')))
    anonymity._val = dict([('ref', 2), ('PolParam', _anonymity_val_PolParam)])
    
    #-----< MediumCost >-----#
    MediumCost = SEQ(name='MediumCost', mode=MODE_TYPE)
    _MediumCost_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _MediumCost_fill._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _MediumCost_costClass = INT(name='costClass', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'CostClass')))
    _MediumCost_costAmount = SEQ(name='costAmount', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'CostAmount')), opt=True)
    _MediumCost_timeUnit = SEQ(name='timeUnit', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'CostTimeUnit')), opt=True)
    _MediumCost_amountUnit = INT(name='amountUnit', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'CostAmountUnit')), opt=True)
    MediumCost._cont = ASN1Dict([
        ('fill', _MediumCost_fill),
        ('costClass', _MediumCost_costClass),
        ('costAmount', _MediumCost_costAmount),
        ('timeUnit', _MediumCost_timeUnit),
        ('amountUnit', _MediumCost_amountUnit),
        ])
    MediumCost._ext = None
    
    #-----< CostClass >-----#
    CostClass = INT(name='CostClass', mode=MODE_TYPE)
    CostClass._cont = ASN1Dict([('tempUnavailable', 0), ('noCharge', 1), ('flatRate', 2), ('perTime', 3), ('perAmount', 4), ('perConnection', 5)])
    CostClass._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=7)], ev=None, er=[])
    
    #-----< CostAmount >-----#
    CostAmount = SEQ(name='CostAmount', mode=MODE_TYPE)
    _CostAmount_currency = INT(name='currency', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CostAmount_currency._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1023)], ev=None, er=[])
    _CostAmount_value = SEQ(name='value', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CITSapplReq', 'CostValue')))
    CostAmount._cont = ASN1Dict([
        ('currency', _CostAmount_currency),
        ('value', _CostAmount_value),
        ])
    CostAmount._ext = None
    
    #-----< CostValue >-----#
    CostValue = SEQ(name='CostValue', mode=MODE_TYPE)
    _CostValue_main = INT(name='main', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CostValue_main._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=4095)], ev=None, er=[])
    _CostValue_fraction = INT(name='fraction', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CostValue_fraction._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1023)], ev=None, er=[])
    CostValue._cont = ASN1Dict([
        ('main', _CostValue_main),
        ('fraction', _CostValue_fraction),
        ])
    CostValue._ext = None
    
    #-----< CostTimeUnit >-----#
    CostTimeUnit = SEQ(name='CostTimeUnit', mode=MODE_TYPE)
    _CostTimeUnit_value = INT(name='value', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CostTimeUnit_value._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1023)], ev=None, er=[])
    _CostTimeUnit_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CostTimeUnit_fill._const_sz = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    _CostTimeUnit_unit = INT(name='unit', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('CALMllsap', 'TimeUnit')))
    CostTimeUnit._cont = ASN1Dict([
        ('value', _CostTimeUnit_value),
        ('fill', _CostTimeUnit_fill),
        ('unit', _CostTimeUnit_unit),
        ])
    CostTimeUnit._ext = None
    
    #-----< CostAmountUnit >-----#
    CostAmountUnit = INT(name='CostAmountUnit', mode=MODE_TYPE)
    CostAmountUnit._cont = ASN1Dict([('tempUnavailable', 0), ('kbyte', 1), ('tkbyte', 2), ('hkbyte', 4), ('mbyte', 8), ('tmbyte', 16), ('hmbyte', 32), ('gbyte', 64), ('tgbyte', 128)])
    CostAmountUnit._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< LocPrivacy >-----#
    LocPrivacy = INT(name='LocPrivacy', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ConfValue')))
    
    #-----< Anonymity >-----#
    Anonymity = INT(name='Anonymity', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ConfValue')))
    
    #-----< ITS-S-Appl-Reg >-----#
    ITS_S_Appl_Reg = SEQ_OF(name='ITS-S-Appl-Reg', mode=MODE_TYPE)
    _ITS_S_Appl_Reg__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITSSappCPReqReg')))
    ITS_S_Appl_Reg._cont = _ITS_S_Appl_Reg__item_
    
    #-----< ITS-S-Appl-RegConf >-----#
    ITS_S_Appl_RegConf = SEQ_OF(name='ITS-S-Appl-RegConf', mode=MODE_TYPE)
    _ITS_S_Appl_RegConf__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITSSappCPReqConf')))
    ITS_S_Appl_RegConf._cont = _ITS_S_Appl_RegConf__item_
    
    #-----< ITS-S-Appl-RegFinal >-----#
    ITS_S_Appl_RegFinal = SEQ(name='ITS-S-Appl-RegFinal', mode=MODE_TYPE, typeref=ASN1RefType(('CITSapplReq', 'ITSSappCPFinal')))
    
    #-----< Logic >-----#
    Logic = INT(name='Logic', mode=MODE_TYPE)
    Logic._cont = ASN1Dict([('false', 0), ('true', 255)])
    Logic._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< ConfValue >-----#
    ConfValue = INT(name='ConfValue', mode=MODE_TYPE)
    ConfValue._cont = ASN1Dict([('ok', 0), ('alternative', 1), ('nok', 2)])
    ConfValue._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< CostObjective >-----#
    CostObjective = INT(name='CostObjective', mode=MODE_TYPE)
    CostObjective._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    _all_ = [
        _ITSSappCPReqReg_applicationID,
        _ITSSappCPReqReg_rxTxPort,
        _ITSSappCPReqReg_requirements,
        ITSSappCPReqReg,
        _ITSSappRxTxPort_portNo,
        _ITSSappRxTxPort_portType,
        ITSSappRxTxPort,
        ITSSappRxTxPortNo,
        ITSSappRxTxPortType,
        _ServiceRef_itsaid,
        _ServiceRef_instance,
        _ServiceRef_flowNo,
        ServiceRef,
        FlowNo,
        _ITSSappCPReqConf_applicationID,
        _ITSSappCPReqConf_rxTxPort,
        _ITSSappCPReqConf_confDetails,
        ITSSappCPReqConf,
        _REQSCP_ref,
        _REQSCP_ReqParam,
        REQSCP,
        ___ITSSappReq__item__refNo_tab,
        ____ITSSappReq__item__refNo_tab_val_ReqParam_0,
        ____ITSSappReq__item__refNo_tab_val_ReqParam_1,
        ____ITSSappReq__item__refNo_tab_val_ReqParam_2,
        ____ITSSappReq__item__refNo_tab_val_ReqParam_3,
        ____ITSSappReq__item__refNo_tab_val_ReqParam_4,
        ____ITSSappReq__item__refNo_tab_val_ReqParam_5,
        ____ITSSappReq__item__refNo_tab_val_ReqParam_6,
        ____ITSSappReq__item__refNo_tab_val_ReqParam_7,
        ____ITSSappReq__item__refNo_tab_val_ReqParam_8,
        ____ITSSappReq__item__refNo_tab_val_ReqParam_9,
        ____ITSSappReq__item__refNo_tab_val_ReqParam_10,
        ____ITSSappReq__item__refNo_tab_val_ReqParam_11,
        ____ITSSappReq__item__refNo_tab_val_ReqParam_12,
        ____ITSSappReq__item__refNo_tab_val_ReqParam_13,
        ____ITSSappReq__item__refNo_tab_val_ReqParam_14,
        ____ITSSappReq__item__refNo_tab_val_ReqParam_15,
        ____ITSSappReq__item__refNo_tab_val_ReqParam_16,
        ____ITSSappReq__item__refNo_tab_val_ReqParam_17,
        ____ITSSappReq__item__refNo_tab_val_ReqParam_18,
        __ITSSappReq__item__refNo,
        __ITSSappReq__item__param,
        _ITSSappReq__item_,
        ITSSappReq,
        _REQSCPCONF_ref,
        _REQSCPCONF_ReqConfParam,
        REQSCPCONF,
        ___ITSSappReqConf__item__refNo_tab,
        ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_0,
        ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_1,
        ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_2,
        ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_3,
        ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_4,
        ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_5,
        ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_6,
        ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_7,
        ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_8,
        ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_9,
        ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_10,
        ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_11,
        ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_12,
        ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_13,
        ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_14,
        ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_15,
        ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_16,
        ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_17,
        ____ITSSappReqConf__item__refNo_tab_val_ReqConfParam_18,
        __ITSSappReqConf__item__refNo,
        __ITSSappReqConf__item__param,
        _ITSSappReqConf__item_,
        ITSSappReqConf,
        _ITSSappCPFinal_applicationID,
        _ITSSappCPFinal_final,
        ITSSappCPFinal,
        Req_SCP,
        _Req_SCP_val_ReqParam_0,
        _Req_SCP_val_ReqParam_1,
        _Req_SCP_val_ReqParam_2,
        _Req_SCP_val_ReqParam_3,
        _Req_SCP_val_ReqParam_4,
        _Req_SCP_val_ReqParam_5,
        _Req_SCP_val_ReqParam_6,
        _Req_SCP_val_ReqParam_7,
        _Req_SCP_val_ReqParam_8,
        _Req_SCP_val_ReqParam_9,
        _Req_SCP_val_ReqParam_10,
        _Req_SCP_val_ReqParam_11,
        _Req_SCP_val_ReqParam_12,
        _Req_SCP_val_ReqParam_13,
        _Req_SCP_val_ReqParam_14,
        _Req_SCP_val_ReqParam_15,
        _Req_SCP_val_ReqParam_16,
        _Req_SCP_val_ReqParam_17,
        _Req_SCP_val_ReqParam_18,
        logChannel,
        _logChannel_val_ReqParam,
        destType,
        _destType_val_ReqParam,
        destDomain,
        _destDomain_val_ReqParam,
        maxAPDU,
        _maxAPDU_val_ReqParam,
        _DestinationType_fill,
        _DestinationType_type,
        DestinationType,
        _DestType_addressType,
        _DestType_geoLocType,
        DestType,
        _AddressBasedType_type,
        __AddressBasedType_mcGroups__item_,
        _AddressBasedType_mcGroups,
        AddressBasedType,
        _GeoLocationBasedType_type,
        __GeoLocationBasedType_mcGroups__item_,
        _GeoLocationBasedType_mcGroups,
        GeoLocationBasedType,
        DestDomain,
        MaxADU,
        contConnect,
        _contConnect_val_ReqParam,
        nxRepeat,
        _nxRepeat_val_ReqParam,
        storeForward,
        _storeForward_val_ReqParam,
        flowType,
        _flowType_val_ReqParam,
        commDistance,
        _commDistance_val_ReqParam,
        directivity,
        _directivity_val_ReqParam,
        multiHop,
        _multiHop_val_ReqParam,
        reduntOp,
        _reduntOp_val_ReqParam,
        minThP,
        _minThP_val_ReqParam,
        maxLat,
        _maxLat_val_ReqParam,
        protocolReq,
        _protocolReq_val_ReqParam,
        dataConfidentiality,
        _dataConfidentiality_val_ReqParam,
        dataIntegrity,
        _dataIntegrity_val_ReqParam,
        nonReputability,
        _nonReputability_val_ReqParam,
        dataAuthentication,
        _dataAuthentication_val_ReqParam,
        _ContConnect_duration,
        _ContConnect_interrupt,
        ContConnect,
        _TimDurationValue_value,
        _TimDurationValue_unit,
        TimDurationValue,
        _NxRepeat_repeat,
        _NxRepeat_interval,
        NxRepeat,
        StoreForward,
        _CommDistance_minDistance,
        _CommDistance_cost,
        CommDistance,
        _MultiHop_hops,
        _MultiHop_cost,
        MultiHop,
        Resilience,
        _MinThP_minThP,
        _MinThP_cost,
        MinThP,
        _MaxLat_lat,
        _MaxLat_cost,
        MaxLat,
        ProtocolReq,
        DataConfidentiality,
        DataIntegrity,
        ReqNonrepudiation,
        DataAuthentication,
        ReqConf_SCP,
        _ReqConf_SCP_val_ReqConfParam_0,
        _ReqConf_SCP_val_ReqConfParam_1,
        _ReqConf_SCP_val_ReqConfParam_2,
        _ReqConf_SCP_val_ReqConfParam_3,
        _ReqConf_SCP_val_ReqConfParam_4,
        _ReqConf_SCP_val_ReqConfParam_5,
        _ReqConf_SCP_val_ReqConfParam_6,
        _ReqConf_SCP_val_ReqConfParam_7,
        _ReqConf_SCP_val_ReqConfParam_8,
        _ReqConf_SCP_val_ReqConfParam_9,
        _ReqConf_SCP_val_ReqConfParam_10,
        _ReqConf_SCP_val_ReqConfParam_11,
        _ReqConf_SCP_val_ReqConfParam_12,
        _ReqConf_SCP_val_ReqConfParam_13,
        _ReqConf_SCP_val_ReqConfParam_14,
        _ReqConf_SCP_val_ReqConfParam_15,
        _ReqConf_SCP_val_ReqConfParam_16,
        _ReqConf_SCP_val_ReqConfParam_17,
        _ReqConf_SCP_val_ReqConfParam_18,
        logChannelConf,
        _logChannelConf_val_ReqConfParam,
        destTypeConf,
        _destTypeConf_val_ReqConfParam,
        destDomainConf,
        _destDomainConf_val_ReqConfParam,
        maxAPDUConf,
        _maxAPDUConf_val_ReqConfParam,
        contConnectConf,
        _contConnectConf_val_ReqConfParam,
        nxRepeatConf,
        _nxRepeatConf_val_ReqConfParam,
        storeForwardConf,
        _storeForwardConf_val_ReqConfParam,
        flowTypeConf,
        _flowTypeConf_val_ReqConfParam,
        commDistanceConf,
        _commDistanceConf_val_ReqConfParam,
        directivityConf,
        _directivityConf_val_ReqConfParam,
        multiHopConf,
        _multiHopConf_val_ReqConfParam,
        reduntOpConf,
        _reduntOpConf_val_ReqConfParam,
        minThPConf,
        _minThPConf_val_ReqConfParam,
        maxLatConf,
        _maxLatConf_val_ReqConfParam,
        protocolReqConf,
        _protocolReqConf_val_ReqConfParam,
        dataConfidentialityConf,
        _dataConfidentialityConf_val_ReqConfParam,
        dataIntegrityConf,
        _dataIntegrityConf_val_ReqConfParam,
        nonReputabilityConf,
        _nonReputabilityConf_val_ReqConfParam,
        dataAuthenticationConf,
        _dataAuthenticationConf_val_ReqConfParam,
        _POLICYC_ref,
        _POLICYC_PolParam,
        POLICYC,
        ___Policies__item__refNo_tab,
        ____Policies__item__refNo_tab_val_PolParam_0,
        ____Policies__item__refNo_tab_val_PolParam_1,
        ____Policies__item__refNo_tab_val_PolParam_2,
        __Policies__item__refNo,
        __Policies__item__param,
        _Policies__item_,
        Policies,
        Policy,
        _Policy_val_PolParam_0,
        _Policy_val_PolParam_1,
        _Policy_val_PolParam_2,
        mediumCost,
        _mediumCost_val_PolParam,
        locPrivacy,
        _locPrivacy_val_PolParam,
        anonymity,
        _anonymity_val_PolParam,
        _MediumCost_fill,
        _MediumCost_costClass,
        _MediumCost_costAmount,
        _MediumCost_timeUnit,
        _MediumCost_amountUnit,
        MediumCost,
        CostClass,
        _CostAmount_currency,
        _CostAmount_value,
        CostAmount,
        _CostValue_main,
        _CostValue_fraction,
        CostValue,
        _CostTimeUnit_value,
        _CostTimeUnit_fill,
        _CostTimeUnit_unit,
        CostTimeUnit,
        CostAmountUnit,
        LocPrivacy,
        Anonymity,
        _ITS_S_Appl_Reg__item_,
        ITS_S_Appl_Reg,
        _ITS_S_Appl_RegConf__item_,
        ITS_S_Appl_RegConf,
        ITS_S_Appl_RegFinal,
        Logic,
        ConfValue,
        CostObjective,
    ]

class DENM_PDU_Descriptions:

    _name_  = 'DENM-PDU-Descriptions'
    _oid_   = [0, 4, 0, 5, 1, 302637, 1, 1]
    
    _obj_ = [
        'DENM',
        'DecentralizedEnvironmentalNotificationMessage',
        'ManagementContainer',
        'SituationContainer',
        'LocationContainer',
        'ImpactReductionContainer',
        'RoadWorksContainerExtended',
        'StationaryVehicleContainer',
        'AlacarteContainer',
        'defaultValidity',
        'Termination',
        'ReferenceDenms',
        ]
    _type_ = [
        'DENM',
        'DecentralizedEnvironmentalNotificationMessage',
        'ManagementContainer',
        'SituationContainer',
        'LocationContainer',
        'ImpactReductionContainer',
        'RoadWorksContainerExtended',
        'StationaryVehicleContainer',
        'AlacarteContainer',
        'Termination',
        'ReferenceDenms',
        ]
    _set_ = [
        ]
    _val_ = [
        'defaultValidity',
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< DENM >-----#
    DENM = SEQ(name='DENM', mode=MODE_TYPE)
    _DENM_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ItsPduHeader')))
    _DENM_denm = SEQ(name='denm', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DENM-PDU-Descriptions', 'DecentralizedEnvironmentalNotificationMessage')))
    DENM._cont = ASN1Dict([
        ('header', _DENM_header),
        ('denm', _DENM_denm),
        ])
    DENM._ext = None
    
    #-----< DecentralizedEnvironmentalNotificationMessage >-----#
    DecentralizedEnvironmentalNotificationMessage = SEQ(name='DecentralizedEnvironmentalNotificationMessage', mode=MODE_TYPE)
    _DecentralizedEnvironmentalNotificationMessage_management = SEQ(name='management', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DENM-PDU-Descriptions', 'ManagementContainer')))
    _DecentralizedEnvironmentalNotificationMessage_situation = SEQ(name='situation', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DENM-PDU-Descriptions', 'SituationContainer')), opt=True)
    _DecentralizedEnvironmentalNotificationMessage_location = SEQ(name='location', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DENM-PDU-Descriptions', 'LocationContainer')), opt=True)
    _DecentralizedEnvironmentalNotificationMessage_alacarte = SEQ(name='alacarte', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DENM-PDU-Descriptions', 'AlacarteContainer')), opt=True)
    DecentralizedEnvironmentalNotificationMessage._cont = ASN1Dict([
        ('management', _DecentralizedEnvironmentalNotificationMessage_management),
        ('situation', _DecentralizedEnvironmentalNotificationMessage_situation),
        ('location', _DecentralizedEnvironmentalNotificationMessage_location),
        ('alacarte', _DecentralizedEnvironmentalNotificationMessage_alacarte),
        ])
    DecentralizedEnvironmentalNotificationMessage._ext = None
    
    #-----< ManagementContainer >-----#
    ManagementContainer = SEQ(name='ManagementContainer', mode=MODE_TYPE)
    _ManagementContainer_actionID = SEQ(name='actionID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ActionID')))
    _ManagementContainer_detectionTime = INT(name='detectionTime', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'TimestampIts')))
    _ManagementContainer_referenceTime = INT(name='referenceTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'TimestampIts')))
    _ManagementContainer_termination = ENUM(name='termination', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DENM-PDU-Descriptions', 'Termination')), opt=True)
    _ManagementContainer_eventPosition = SEQ(name='eventPosition', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ReferencePosition')))
    _ManagementContainer_relevanceDistance = ENUM(name='relevanceDistance', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'RelevanceDistance')), opt=True)
    _ManagementContainer_relevanceTrafficDirection = ENUM(name='relevanceTrafficDirection', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'RelevanceTrafficDirection')), opt=True)
    _ManagementContainer_validityDuration = INT(name='validityDuration', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ValidityDuration')), default=600)
    _ManagementContainer_transmissionInterval = INT(name='transmissionInterval', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'TransmissionInterval')), opt=True)
    _ManagementContainer_stationType = INT(name='stationType', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'StationType')))
    ManagementContainer._cont = ASN1Dict([
        ('actionID', _ManagementContainer_actionID),
        ('detectionTime', _ManagementContainer_detectionTime),
        ('referenceTime', _ManagementContainer_referenceTime),
        ('termination', _ManagementContainer_termination),
        ('eventPosition', _ManagementContainer_eventPosition),
        ('relevanceDistance', _ManagementContainer_relevanceDistance),
        ('relevanceTrafficDirection', _ManagementContainer_relevanceTrafficDirection),
        ('validityDuration', _ManagementContainer_validityDuration),
        ('transmissionInterval', _ManagementContainer_transmissionInterval),
        ('stationType', _ManagementContainer_stationType),
        ])
    ManagementContainer._ext = []
    
    #-----< SituationContainer >-----#
    SituationContainer = SEQ(name='SituationContainer', mode=MODE_TYPE)
    _SituationContainer_informationQuality = INT(name='informationQuality', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'InformationQuality')))
    _SituationContainer_eventType = SEQ(name='eventType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'CauseCode')))
    _SituationContainer_linkedCause = SEQ(name='linkedCause', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'CauseCode')), opt=True)
    _SituationContainer_eventHistory = SEQ_OF(name='eventHistory', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'EventHistory')), opt=True)
    SituationContainer._cont = ASN1Dict([
        ('informationQuality', _SituationContainer_informationQuality),
        ('eventType', _SituationContainer_eventType),
        ('linkedCause', _SituationContainer_linkedCause),
        ('eventHistory', _SituationContainer_eventHistory),
        ])
    SituationContainer._ext = []
    
    #-----< LocationContainer >-----#
    LocationContainer = SEQ(name='LocationContainer', mode=MODE_TYPE)
    _LocationContainer_eventSpeed = SEQ(name='eventSpeed', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Speed')), opt=True)
    _LocationContainer_eventPositionHeading = SEQ(name='eventPositionHeading', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Heading')), opt=True)
    _LocationContainer_traces = SEQ_OF(name='traces', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Traces')))
    _LocationContainer_roadType = ENUM(name='roadType', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'RoadType')), opt=True)
    LocationContainer._cont = ASN1Dict([
        ('eventSpeed', _LocationContainer_eventSpeed),
        ('eventPositionHeading', _LocationContainer_eventPositionHeading),
        ('traces', _LocationContainer_traces),
        ('roadType', _LocationContainer_roadType),
        ])
    LocationContainer._ext = []
    
    #-----< ImpactReductionContainer >-----#
    ImpactReductionContainer = SEQ(name='ImpactReductionContainer', mode=MODE_TYPE)
    _ImpactReductionContainer_heightLonCarrLeft = INT(name='heightLonCarrLeft', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'HeightLonCarr')))
    _ImpactReductionContainer_heightLonCarrRight = INT(name='heightLonCarrRight', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'HeightLonCarr')))
    _ImpactReductionContainer_posLonCarrLeft = INT(name='posLonCarrLeft', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'PosLonCarr')))
    _ImpactReductionContainer_posLonCarrRight = INT(name='posLonCarrRight', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'PosLonCarr')))
    _ImpactReductionContainer_positionOfPillars = SEQ_OF(name='positionOfPillars', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'PositionOfPillars')))
    _ImpactReductionContainer_posCentMass = INT(name='posCentMass', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'PosCentMass')))
    _ImpactReductionContainer_wheelBaseVehicle = INT(name='wheelBaseVehicle', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'WheelBaseVehicle')))
    _ImpactReductionContainer_turningRadius = INT(name='turningRadius', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'TurningRadius')))
    _ImpactReductionContainer_posFrontAx = INT(name='posFrontAx', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'PosFrontAx')))
    _ImpactReductionContainer_positionOfOccupants = BIT_STR(name='positionOfOccupants', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'PositionOfOccupants')))
    _ImpactReductionContainer_vehicleMass = INT(name='vehicleMass', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'VehicleMass')))
    _ImpactReductionContainer_requestResponseIndication = ENUM(name='requestResponseIndication', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'RequestResponseIndication')))
    ImpactReductionContainer._cont = ASN1Dict([
        ('heightLonCarrLeft', _ImpactReductionContainer_heightLonCarrLeft),
        ('heightLonCarrRight', _ImpactReductionContainer_heightLonCarrRight),
        ('posLonCarrLeft', _ImpactReductionContainer_posLonCarrLeft),
        ('posLonCarrRight', _ImpactReductionContainer_posLonCarrRight),
        ('positionOfPillars', _ImpactReductionContainer_positionOfPillars),
        ('posCentMass', _ImpactReductionContainer_posCentMass),
        ('wheelBaseVehicle', _ImpactReductionContainer_wheelBaseVehicle),
        ('turningRadius', _ImpactReductionContainer_turningRadius),
        ('posFrontAx', _ImpactReductionContainer_posFrontAx),
        ('positionOfOccupants', _ImpactReductionContainer_positionOfOccupants),
        ('vehicleMass', _ImpactReductionContainer_vehicleMass),
        ('requestResponseIndication', _ImpactReductionContainer_requestResponseIndication),
        ])
    ImpactReductionContainer._ext = None
    
    #-----< RoadWorksContainerExtended >-----#
    RoadWorksContainerExtended = SEQ(name='RoadWorksContainerExtended', mode=MODE_TYPE)
    _RoadWorksContainerExtended_lightBarSirenInUse = BIT_STR(name='lightBarSirenInUse', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'LightBarSirenInUse')), opt=True)
    _RoadWorksContainerExtended_closedLanes = SEQ(name='closedLanes', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ClosedLanes')), opt=True)
    _RoadWorksContainerExtended_restriction = SEQ_OF(name='restriction', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'RestrictedTypes')), opt=True)
    _RoadWorksContainerExtended_speedLimit = INT(name='speedLimit', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'SpeedLimit')), opt=True)
    _RoadWorksContainerExtended_incidentIndication = SEQ(name='incidentIndication', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'CauseCode')), opt=True)
    _RoadWorksContainerExtended_recommendedPath = SEQ_OF(name='recommendedPath', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ItineraryPath')), opt=True)
    _RoadWorksContainerExtended_startingPointSpeedLimit = SEQ(name='startingPointSpeedLimit', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'DeltaReferencePosition')), opt=True)
    _RoadWorksContainerExtended_trafficFlowRule = ENUM(name='trafficFlowRule', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'TrafficRule')), opt=True)
    _RoadWorksContainerExtended_referenceDenms = SEQ_OF(name='referenceDenms', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DENM-PDU-Descriptions', 'ReferenceDenms')), opt=True)
    RoadWorksContainerExtended._cont = ASN1Dict([
        ('lightBarSirenInUse', _RoadWorksContainerExtended_lightBarSirenInUse),
        ('closedLanes', _RoadWorksContainerExtended_closedLanes),
        ('restriction', _RoadWorksContainerExtended_restriction),
        ('speedLimit', _RoadWorksContainerExtended_speedLimit),
        ('incidentIndication', _RoadWorksContainerExtended_incidentIndication),
        ('recommendedPath', _RoadWorksContainerExtended_recommendedPath),
        ('startingPointSpeedLimit', _RoadWorksContainerExtended_startingPointSpeedLimit),
        ('trafficFlowRule', _RoadWorksContainerExtended_trafficFlowRule),
        ('referenceDenms', _RoadWorksContainerExtended_referenceDenms),
        ])
    RoadWorksContainerExtended._ext = None
    
    #-----< StationaryVehicleContainer >-----#
    StationaryVehicleContainer = SEQ(name='StationaryVehicleContainer', mode=MODE_TYPE)
    _StationaryVehicleContainer_stationarySince = ENUM(name='stationarySince', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'StationarySince')), opt=True)
    _StationaryVehicleContainer_stationaryCause = SEQ(name='stationaryCause', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'CauseCode')), opt=True)
    _StationaryVehicleContainer_carryingDangerousGoods = SEQ(name='carryingDangerousGoods', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'DangerousGoodsExtended')), opt=True)
    _StationaryVehicleContainer_numberOfOccupants = INT(name='numberOfOccupants', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'NumberOfOccupants')), opt=True)
    _StationaryVehicleContainer_vehicleIdentification = SEQ(name='vehicleIdentification', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'VehicleIdentification')), opt=True)
    _StationaryVehicleContainer_energyStorageType = BIT_STR(name='energyStorageType', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'EnergyStorageType')), opt=True)
    StationaryVehicleContainer._cont = ASN1Dict([
        ('stationarySince', _StationaryVehicleContainer_stationarySince),
        ('stationaryCause', _StationaryVehicleContainer_stationaryCause),
        ('carryingDangerousGoods', _StationaryVehicleContainer_carryingDangerousGoods),
        ('numberOfOccupants', _StationaryVehicleContainer_numberOfOccupants),
        ('vehicleIdentification', _StationaryVehicleContainer_vehicleIdentification),
        ('energyStorageType', _StationaryVehicleContainer_energyStorageType),
        ])
    StationaryVehicleContainer._ext = None
    
    #-----< AlacarteContainer >-----#
    AlacarteContainer = SEQ(name='AlacarteContainer', mode=MODE_TYPE)
    _AlacarteContainer_lanePosition = INT(name='lanePosition', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'LanePosition')), opt=True)
    _AlacarteContainer_impactReduction = SEQ(name='impactReduction', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DENM-PDU-Descriptions', 'ImpactReductionContainer')), opt=True)
    _AlacarteContainer_externalTemperature = INT(name='externalTemperature', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Temperature')), opt=True)
    _AlacarteContainer_roadWorks = SEQ(name='roadWorks', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DENM-PDU-Descriptions', 'RoadWorksContainerExtended')), opt=True)
    _AlacarteContainer_positioningSolution = ENUM(name='positioningSolution', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'PositioningSolutionType')), opt=True)
    _AlacarteContainer_stationaryVehicle = SEQ(name='stationaryVehicle', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DENM-PDU-Descriptions', 'StationaryVehicleContainer')), opt=True)
    AlacarteContainer._cont = ASN1Dict([
        ('lanePosition', _AlacarteContainer_lanePosition),
        ('impactReduction', _AlacarteContainer_impactReduction),
        ('externalTemperature', _AlacarteContainer_externalTemperature),
        ('roadWorks', _AlacarteContainer_roadWorks),
        ('positioningSolution', _AlacarteContainer_positioningSolution),
        ('stationaryVehicle', _AlacarteContainer_stationaryVehicle),
        ])
    AlacarteContainer._ext = []
    
    #-----< defaultValidity >-----#
    defaultValidity = INT(name='defaultValidity', mode=MODE_VALUE)
    defaultValidity._val = 600
    
    #-----< Termination >-----#
    Termination = ENUM(name='Termination', mode=MODE_TYPE)
    Termination._cont = ASN1Dict([('isCancellation', 0), ('isNegation', 1)])
    Termination._ext = None
    
    #-----< ReferenceDenms >-----#
    ReferenceDenms = SEQ_OF(name='ReferenceDenms', mode=MODE_TYPE)
    _ReferenceDenms__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ITS-Container', 'ActionID')))
    ReferenceDenms._cont = _ReferenceDenms__item_
    ReferenceDenms._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=[], er=[])
    
    _all_ = [
        _DENM_header,
        _DENM_denm,
        DENM,
        _DecentralizedEnvironmentalNotificationMessage_management,
        _DecentralizedEnvironmentalNotificationMessage_situation,
        _DecentralizedEnvironmentalNotificationMessage_location,
        _DecentralizedEnvironmentalNotificationMessage_alacarte,
        DecentralizedEnvironmentalNotificationMessage,
        _ManagementContainer_actionID,
        _ManagementContainer_detectionTime,
        _ManagementContainer_referenceTime,
        _ManagementContainer_termination,
        _ManagementContainer_eventPosition,
        _ManagementContainer_relevanceDistance,
        _ManagementContainer_relevanceTrafficDirection,
        _ManagementContainer_validityDuration,
        _ManagementContainer_transmissionInterval,
        _ManagementContainer_stationType,
        ManagementContainer,
        _SituationContainer_informationQuality,
        _SituationContainer_eventType,
        _SituationContainer_linkedCause,
        _SituationContainer_eventHistory,
        SituationContainer,
        _LocationContainer_eventSpeed,
        _LocationContainer_eventPositionHeading,
        _LocationContainer_traces,
        _LocationContainer_roadType,
        LocationContainer,
        _ImpactReductionContainer_heightLonCarrLeft,
        _ImpactReductionContainer_heightLonCarrRight,
        _ImpactReductionContainer_posLonCarrLeft,
        _ImpactReductionContainer_posLonCarrRight,
        _ImpactReductionContainer_positionOfPillars,
        _ImpactReductionContainer_posCentMass,
        _ImpactReductionContainer_wheelBaseVehicle,
        _ImpactReductionContainer_turningRadius,
        _ImpactReductionContainer_posFrontAx,
        _ImpactReductionContainer_positionOfOccupants,
        _ImpactReductionContainer_vehicleMass,
        _ImpactReductionContainer_requestResponseIndication,
        ImpactReductionContainer,
        _RoadWorksContainerExtended_lightBarSirenInUse,
        _RoadWorksContainerExtended_closedLanes,
        _RoadWorksContainerExtended_restriction,
        _RoadWorksContainerExtended_speedLimit,
        _RoadWorksContainerExtended_incidentIndication,
        _RoadWorksContainerExtended_recommendedPath,
        _RoadWorksContainerExtended_startingPointSpeedLimit,
        _RoadWorksContainerExtended_trafficFlowRule,
        _RoadWorksContainerExtended_referenceDenms,
        RoadWorksContainerExtended,
        _StationaryVehicleContainer_stationarySince,
        _StationaryVehicleContainer_stationaryCause,
        _StationaryVehicleContainer_carryingDangerousGoods,
        _StationaryVehicleContainer_numberOfOccupants,
        _StationaryVehicleContainer_vehicleIdentification,
        _StationaryVehicleContainer_energyStorageType,
        StationaryVehicleContainer,
        _AlacarteContainer_lanePosition,
        _AlacarteContainer_impactReduction,
        _AlacarteContainer_externalTemperature,
        _AlacarteContainer_roadWorks,
        _AlacarteContainer_positioningSolution,
        _AlacarteContainer_stationaryVehicle,
        AlacarteContainer,
        defaultValidity,
        Termination,
        _ReferenceDenms__item_,
        ReferenceDenms,
    ]

class DSRCData:

    _name_  = 'DSRCData'
    _oid_   = [1, 0, 15628, 0, 1]
    
    _obj_ = [
        'Action-Request',
        'Action-Response',
        'ActionType',
        'ApplicationContextMark',
        'ApplicationList',
        'AttributeIdList',
        'AttributeList',
        'Attributes',
        'BeaconID',
        'BroadcastPool',
        'BST',
        'Container',
        'Directory',
        'Dsrc-EID',
        'DSRCApplicationEntityID',
        'Event-Report-Request',
        'Event-Report-Response',
        'EventType',
        'File',
        'FileName',
        'FileType',
        'Get-Request',
        'Get-Response',
        'Initialisation-Request',
        'Initialisation-Response',
        'NamedFile',
        'ObeConfiguration',
        'Profile',
        'Record',
        'ReturnStatus',
        'Set-Request',
        'Set-Response',
        'Time',
        'T-APDUs',
        'VST',
        ]
    _type_ = [
        'Action-Request',
        'Action-Response',
        'ActionType',
        'ApplicationContextMark',
        'ApplicationList',
        'AttributeIdList',
        'AttributeList',
        'Attributes',
        'BeaconID',
        'BroadcastPool',
        'BST',
        'Container',
        'Directory',
        'Dsrc-EID',
        'DSRCApplicationEntityID',
        'Event-Report-Request',
        'Event-Report-Response',
        'EventType',
        'File',
        'FileName',
        'FileType',
        'Get-Request',
        'Get-Response',
        'Initialisation-Request',
        'Initialisation-Response',
        'NamedFile',
        'ObeConfiguration',
        'Profile',
        'Record',
        'ReturnStatus',
        'Set-Request',
        'Set-Response',
        'Time',
        'T-APDUs',
        'VST',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< Action-Request >-----#
    Action_Request = SEQ(name='Action-Request', mode=MODE_TYPE)
    _Action_Request_mode = BOOL(name='mode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Action_Request_eid = INT(name='eid', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Dsrc-EID')))
    _Action_Request_actionType = INT(name='actionType', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'ActionType')))
    _Action_Request_accessCredentials = OCT_STR(name='accessCredentials', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Action_Request_accessCredentials._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    _Action_Request_actionParameter = CHOICE(name='actionParameter', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('DSRCData', 'Container')), opt=True)
    _Action_Request_iid = INT(name='iid', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Dsrc-EID')), opt=True)
    Action_Request._cont = ASN1Dict([
        ('mode', _Action_Request_mode),
        ('eid', _Action_Request_eid),
        ('actionType', _Action_Request_actionType),
        ('accessCredentials', _Action_Request_accessCredentials),
        ('actionParameter', _Action_Request_actionParameter),
        ('iid', _Action_Request_iid),
        ])
    Action_Request._ext = None
    
    #-----< Action-Response >-----#
    Action_Response = SEQ(name='Action-Response', mode=MODE_TYPE)
    _Action_Response_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Action_Response_fill._const_sz = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    _Action_Response_eid = INT(name='eid', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Dsrc-EID')))
    _Action_Response_iid = INT(name='iid', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Dsrc-EID')), opt=True)
    _Action_Response_responseParameter = CHOICE(name='responseParameter', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('DSRCData', 'Container')), opt=True)
    _Action_Response_ret = INT(name='ret', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'ReturnStatus')), opt=True)
    Action_Response._cont = ASN1Dict([
        ('fill', _Action_Response_fill),
        ('eid', _Action_Response_eid),
        ('iid', _Action_Response_iid),
        ('responseParameter', _Action_Response_responseParameter),
        ('ret', _Action_Response_ret),
        ])
    Action_Response._ext = None
    
    #-----< ActionType >-----#
    ActionType = INT(name='ActionType', mode=MODE_TYPE)
    ActionType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    
    #-----< ApplicationContextMark >-----#
    ApplicationContextMark = CHOICE(name='ApplicationContextMark', mode=MODE_TYPE, typeref=ASN1RefType(('DSRCData', 'Container')))
    
    #-----< ApplicationList >-----#
    ApplicationList = SEQ_OF(name='ApplicationList', mode=MODE_TYPE)
    _ApplicationList__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    __ApplicationList__item__aid = INT(name='aid', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'DSRCApplicationEntityID')))
    __ApplicationList__item__eid = INT(name='eid', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Dsrc-EID')), opt=True)
    __ApplicationList__item__parameter = CHOICE(name='parameter', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('DSRCData', 'ApplicationContextMark')), opt=True)
    _ApplicationList__item_._cont = ASN1Dict([
        ('aid', __ApplicationList__item__aid),
        ('eid', __ApplicationList__item__eid),
        ('parameter', __ApplicationList__item__parameter),
        ])
    _ApplicationList__item_._ext = None
    ApplicationList._cont = _ApplicationList__item_
    ApplicationList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    
    #-----< AttributeIdList >-----#
    AttributeIdList = SEQ_OF(name='AttributeIdList', mode=MODE_TYPE)
    _AttributeIdList__item_ = INT(name='_item_', mode=MODE_TYPE)
    _AttributeIdList__item_._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    AttributeIdList._cont = _AttributeIdList__item_
    AttributeIdList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    
    #-----< AttributeList >-----#
    AttributeList = SEQ_OF(name='AttributeList', mode=MODE_TYPE)
    _AttributeList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRCData', 'Attributes')))
    AttributeList._cont = _AttributeList__item_
    AttributeList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    
    #-----< Attributes >-----#
    Attributes = SEQ(name='Attributes', mode=MODE_TYPE)
    _Attributes_attributeId = INT(name='attributeId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Attributes_attributeId._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    _Attributes_attributeValue = CHOICE(name='attributeValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('DSRCData', 'Container')))
    Attributes._cont = ASN1Dict([
        ('attributeId', _Attributes_attributeId),
        ('attributeValue', _Attributes_attributeValue),
        ])
    Attributes._ext = None
    
    #-----< BeaconID >-----#
    BeaconID = SEQ(name='BeaconID', mode=MODE_TYPE)
    _BeaconID_manufacturerid = INT(name='manufacturerid', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _BeaconID_manufacturerid._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _BeaconID_individualid = INT(name='individualid', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _BeaconID_individualid._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=134217727)], ev=None, er=[])
    BeaconID._cont = ASN1Dict([
        ('manufacturerid', _BeaconID_manufacturerid),
        ('individualid', _BeaconID_individualid),
        ])
    BeaconID._ext = None
    
    #-----< BroadcastPool >-----#
    BroadcastPool = SEQ(name='BroadcastPool', mode=MODE_TYPE)
    _BroadcastPool_directoryvalue = SEQ_OF(name='directoryvalue', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Directory')))
    _BroadcastPool_content = SEQ_OF(name='content', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __BroadcastPool_content__item_ = SEQ_OF(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRCData', 'File')))
    _BroadcastPool_content._cont = __BroadcastPool_content__item_
    _BroadcastPool_content._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    BroadcastPool._cont = ASN1Dict([
        ('directoryvalue', _BroadcastPool_directoryvalue),
        ('content', _BroadcastPool_content),
        ])
    BroadcastPool._ext = None
    
    #-----< BST >-----#
    BST = SEQ(name='BST', mode=MODE_TYPE)
    _BST_rsu = SEQ(name='rsu', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'BeaconID')))
    _BST_time = INT(name='time', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Time')))
    _BST_profile = INT(name='profile', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Profile')))
    _BST_mandApplications = SEQ_OF(name='mandApplications', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'ApplicationList')))
    _BST_nonmandApplications = SEQ_OF(name='nonmandApplications', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'ApplicationList')), opt=True)
    _BST_profileList = SEQ_OF(name='profileList', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __BST_profileList__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRCData', 'Profile')))
    _BST_profileList._cont = __BST_profileList__item_
    _BST_profileList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    BST._cont = ASN1Dict([
        ('rsu', _BST_rsu),
        ('time', _BST_time),
        ('profile', _BST_profile),
        ('mandApplications', _BST_mandApplications),
        ('nonmandApplications', _BST_nonmandApplications),
        ('profileList', _BST_profileList),
        ])
    BST._ext = None
    
    #-----< Container >-----#
    Container = CHOICE(name='Container', mode=MODE_TYPE)
    _Container_integer = INT(name='integer', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Container_bitstring = BIT_STR(name='bitstring', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Container_octetstring = OCT_STR(name='octetstring', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Container_octetstring._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    _Container_universalString = STR_UNIV(name='universalString', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Container_beaconId = SEQ(name='beaconId', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'BeaconID')))
    _Container_t_apdu = CHOICE(name='t-apdu', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'T-APDUs')))
    _Container_dsrcApplicationEntityId = INT(name='dsrcApplicationEntityId', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'DSRCApplicationEntityID')))
    _Container_dsrc_Ase_Id = INT(name='dsrc-Ase-Id', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Dsrc-EID')))
    _Container_attrIdList = SEQ_OF(name='attrIdList', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'AttributeIdList')))
    _Container_attrList = SEQ_OF(name='attrList', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'AttributeList')))
    _Container_broadcastPool = SEQ(name='broadcastPool', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'BroadcastPool')))
    _Container_directory = SEQ_OF(name='directory', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Directory')))
    _Container_file = SEQ_OF(name='file', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'File')))
    _Container_fileType = NULL(name='fileType', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'FileType')))
    _Container_record = CHOICE(name='record', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Record')))
    _Container_time = INT(name='time', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Time')))
    _Container_vector = SEQ_OF(name='vector', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Container_vector__item_ = INT(name='_item_', mode=MODE_TYPE)
    __Container_vector__item_._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    _Container_vector._cont = __Container_vector__item_
    _Container_vector._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    Container._cont = ASN1Dict([
        ('integer', _Container_integer),
        ('bitstring', _Container_bitstring),
        ('octetstring', _Container_octetstring),
        ('universalString', _Container_universalString),
        ('beaconId', _Container_beaconId),
        ('t-apdu', _Container_t_apdu),
        ('dsrcApplicationEntityId', _Container_dsrcApplicationEntityId),
        ('dsrc-Ase-Id', _Container_dsrc_Ase_Id),
        ('attrIdList', _Container_attrIdList),
        ('attrList', _Container_attrList),
        ('broadcastPool', _Container_broadcastPool),
        ('directory', _Container_directory),
        ('file', _Container_file),
        ('fileType', _Container_fileType),
        ('record', _Container_record),
        ('time', _Container_time),
        ('vector', _Container_vector),
        ])
    Container._ext = []
    
    #-----< Directory >-----#
    Directory = SEQ_OF(name='Directory', mode=MODE_TYPE)
    _Directory__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRCData', 'FileName')))
    Directory._cont = _Directory__item_
    Directory._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    
    #-----< Dsrc-EID >-----#
    Dsrc_EID = INT(name='Dsrc-EID', mode=MODE_TYPE)
    Dsrc_EID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    
    #-----< DSRCApplicationEntityID >-----#
    DSRCApplicationEntityID = INT(name='DSRCApplicationEntityID', mode=MODE_TYPE)
    DSRCApplicationEntityID._cont = ASN1Dict([('system', 0), ('electronic-fee-collection', 1), ('freight-fleet-management', 2), ('public-transport', 3), ('traffic-traveller-information', 4), ('traffic-control', 5), ('parking-management', 6), ('geographic-road-database', 7), ('medium-range-preinformation', 8), ('man-machine-interface', 9), ('intersystem-interface', 10), ('automatic-vehicle-identification', 11), ('emergency-warning', 12), ('private', 13), ('multi-purpose-payment', 14), ('dsrc-resource-manager', 15), ('after-theft-systems', 16), ('cruise-assist-highway-system', 17), ('multi-purpose-information-system', 18), ('multi-mobile-information-system', 19)])
    DSRCApplicationEntityID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=31)], ev=[], er=[])
    
    #-----< Event-Report-Request >-----#
    Event_Report_Request = SEQ(name='Event-Report-Request', mode=MODE_TYPE)
    _Event_Report_Request_mode = BOOL(name='mode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Event_Report_Request_eid = INT(name='eid', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Dsrc-EID')))
    _Event_Report_Request_eventType = INT(name='eventType', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'EventType')))
    _Event_Report_Request_accessCredentials = OCT_STR(name='accessCredentials', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Event_Report_Request_accessCredentials._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    _Event_Report_Request_eventParameter = CHOICE(name='eventParameter', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('DSRCData', 'Container')), opt=True)
    _Event_Report_Request_iid = INT(name='iid', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Dsrc-EID')), opt=True)
    Event_Report_Request._cont = ASN1Dict([
        ('mode', _Event_Report_Request_mode),
        ('eid', _Event_Report_Request_eid),
        ('eventType', _Event_Report_Request_eventType),
        ('accessCredentials', _Event_Report_Request_accessCredentials),
        ('eventParameter', _Event_Report_Request_eventParameter),
        ('iid', _Event_Report_Request_iid),
        ])
    Event_Report_Request._ext = None
    
    #-----< Event-Report-Response >-----#
    Event_Report_Response = SEQ(name='Event-Report-Response', mode=MODE_TYPE)
    _Event_Report_Response_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Event_Report_Response_fill._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _Event_Report_Response_eid = INT(name='eid', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Dsrc-EID')))
    _Event_Report_Response_iid = INT(name='iid', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Dsrc-EID')), opt=True)
    _Event_Report_Response_ret = INT(name='ret', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'ReturnStatus')), opt=True)
    Event_Report_Response._cont = ASN1Dict([
        ('fill', _Event_Report_Response_fill),
        ('eid', _Event_Report_Response_eid),
        ('iid', _Event_Report_Response_iid),
        ('ret', _Event_Report_Response_ret),
        ])
    Event_Report_Response._ext = None
    
    #-----< EventType >-----#
    EventType = INT(name='EventType', mode=MODE_TYPE)
    EventType._cont = ASN1Dict([('release', 0)])
    EventType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    
    #-----< File >-----#
    File = SEQ_OF(name='File', mode=MODE_TYPE)
    _File__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRCData', 'Record')))
    File._cont = _File__item_
    File._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    
    #-----< FileName >-----#
    FileName = SEQ(name='FileName', mode=MODE_TYPE)
    _FileName_aseID = INT(name='aseID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Dsrc-EID')))
    _FileName_fileID = INT(name='fileID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _FileName_fileID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    FileName._cont = ASN1Dict([
        ('aseID', _FileName_aseID),
        ('fileID', _FileName_fileID),
        ])
    FileName._ext = None
    
    #-----< FileType >-----#
    FileType = NULL(name='FileType', mode=MODE_TYPE)
    
    #-----< Get-Request >-----#
    Get_Request = SEQ(name='Get-Request', mode=MODE_TYPE)
    _Get_Request_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Get_Request_fill._const_sz = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    _Get_Request_eid = INT(name='eid', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Dsrc-EID')))
    _Get_Request_accessCredentials = OCT_STR(name='accessCredentials', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Get_Request_accessCredentials._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    _Get_Request_iid = INT(name='iid', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Dsrc-EID')), opt=True)
    _Get_Request_attrIdList = SEQ_OF(name='attrIdList', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'AttributeIdList')), opt=True)
    Get_Request._cont = ASN1Dict([
        ('fill', _Get_Request_fill),
        ('eid', _Get_Request_eid),
        ('accessCredentials', _Get_Request_accessCredentials),
        ('iid', _Get_Request_iid),
        ('attrIdList', _Get_Request_attrIdList),
        ])
    Get_Request._ext = None
    
    #-----< Get-Response >-----#
    Get_Response = SEQ(name='Get-Response', mode=MODE_TYPE)
    _Get_Response_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Get_Response_fill._const_sz = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    _Get_Response_eid = INT(name='eid', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Dsrc-EID')))
    _Get_Response_iid = INT(name='iid', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Dsrc-EID')), opt=True)
    _Get_Response_attributelist = SEQ_OF(name='attributelist', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'AttributeList')), opt=True)
    _Get_Response_ret = INT(name='ret', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'ReturnStatus')), opt=True)
    Get_Response._cont = ASN1Dict([
        ('fill', _Get_Response_fill),
        ('eid', _Get_Response_eid),
        ('iid', _Get_Response_iid),
        ('attributelist', _Get_Response_attributelist),
        ('ret', _Get_Response_ret),
        ])
    Get_Response._ext = None
    
    #-----< Initialisation-Request >-----#
    Initialisation_Request = SEQ(name='Initialisation-Request', mode=MODE_TYPE, typeref=ASN1RefType(('DSRCData', 'BST')))
    
    #-----< Initialisation-Response >-----#
    Initialisation_Response = SEQ(name='Initialisation-Response', mode=MODE_TYPE, typeref=ASN1RefType(('DSRCData', 'VST')))
    
    #-----< NamedFile >-----#
    NamedFile = SEQ(name='NamedFile', mode=MODE_TYPE)
    _NamedFile_name = SEQ(name='name', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'FileName')))
    _NamedFile_file = SEQ_OF(name='file', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'File')))
    NamedFile._cont = ASN1Dict([
        ('name', _NamedFile_name),
        ('file', _NamedFile_file),
        ])
    NamedFile._ext = None
    
    #-----< ObeConfiguration >-----#
    ObeConfiguration = SEQ(name='ObeConfiguration', mode=MODE_TYPE)
    _ObeConfiguration_equipmentClass = INT(name='equipmentClass', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ObeConfiguration_equipmentClass._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=32767)], ev=None, er=[])
    _ObeConfiguration_manufacturerID = INT(name='manufacturerID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ObeConfiguration_manufacturerID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _ObeConfiguration_obeStatus = INT(name='obeStatus', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ObeConfiguration_obeStatus._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    ObeConfiguration._cont = ASN1Dict([
        ('equipmentClass', _ObeConfiguration_equipmentClass),
        ('manufacturerID', _ObeConfiguration_manufacturerID),
        ('obeStatus', _ObeConfiguration_obeStatus),
        ])
    ObeConfiguration._ext = None
    
    #-----< Profile >-----#
    Profile = INT(name='Profile', mode=MODE_TYPE)
    Profile._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    
    #-----< Record >-----#
    Record = CHOICE(name='Record', mode=MODE_TYPE)
    _Record_simple = STR_VIS(name='simple', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    Record._cont = ASN1Dict([
        ('simple', _Record_simple),
        ])
    Record._ext = []
    
    #-----< ReturnStatus >-----#
    ReturnStatus = INT(name='ReturnStatus', mode=MODE_TYPE)
    ReturnStatus._cont = ASN1Dict([('noError', 0), ('accessDenied', 1), ('argumentError', 2), ('complexityLimitation', 3), ('processingFailure', 4), ('processing', 5), ('chainingError', 6)])
    ReturnStatus._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    
    #-----< Set-Request >-----#
    Set_Request = SEQ(name='Set-Request', mode=MODE_TYPE)
    _Set_Request_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Set_Request_fill._const_sz = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    _Set_Request_mode = BOOL(name='mode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Set_Request_eid = INT(name='eid', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Dsrc-EID')))
    _Set_Request_accessCredentials = OCT_STR(name='accessCredentials', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Set_Request_accessCredentials._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    _Set_Request_attrList = SEQ_OF(name='attrList', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'AttributeList')))
    _Set_Request_iid = INT(name='iid', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Dsrc-EID')), opt=True)
    Set_Request._cont = ASN1Dict([
        ('fill', _Set_Request_fill),
        ('mode', _Set_Request_mode),
        ('eid', _Set_Request_eid),
        ('accessCredentials', _Set_Request_accessCredentials),
        ('attrList', _Set_Request_attrList),
        ('iid', _Set_Request_iid),
        ])
    Set_Request._ext = None
    
    #-----< Set-Response >-----#
    Set_Response = SEQ(name='Set-Response', mode=MODE_TYPE)
    _Set_Response_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Set_Response_fill._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _Set_Response_eid = INT(name='eid', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Dsrc-EID')))
    _Set_Response_iid = INT(name='iid', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Dsrc-EID')), opt=True)
    _Set_Response_ret = INT(name='ret', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'ReturnStatus')), opt=True)
    Set_Response._cont = ASN1Dict([
        ('fill', _Set_Response_fill),
        ('eid', _Set_Response_eid),
        ('iid', _Set_Response_iid),
        ('ret', _Set_Response_ret),
        ])
    Set_Response._ext = None
    
    #-----< Time >-----#
    Time = INT(name='Time', mode=MODE_TYPE)
    Time._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=4294967295)], ev=None, er=[])
    
    #-----< T-APDUs >-----#
    T_APDUs = CHOICE(name='T-APDUs', mode=MODE_TYPE)
    _T_APDUs_action_request = SEQ(name='action-request', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Action-Request')))
    _T_APDUs_action_response = SEQ(name='action-response', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Action-Response')))
    _T_APDUs_event_report_request = SEQ(name='event-report-request', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Event-Report-Request')))
    _T_APDUs_event_report_response = SEQ(name='event-report-response', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Event-Report-Response')))
    _T_APDUs_set_request = SEQ(name='set-request', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Set-Request')))
    _T_APDUs_set_response = SEQ(name='set-response', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Set-Response')))
    _T_APDUs_get_request = SEQ(name='get-request', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Get-Request')))
    _T_APDUs_get_response = SEQ(name='get-response', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Get-Response')))
    _T_APDUs_initialisation_request = SEQ(name='initialisation-request', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Initialisation-Request')))
    _T_APDUs_initialisation_response = SEQ(name='initialisation-response', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Initialisation-Response')))
    T_APDUs._cont = ASN1Dict([
        ('action-request', _T_APDUs_action_request),
        ('action-response', _T_APDUs_action_response),
        ('event-report-request', _T_APDUs_event_report_request),
        ('event-report-response', _T_APDUs_event_report_response),
        ('set-request', _T_APDUs_set_request),
        ('set-response', _T_APDUs_set_response),
        ('get-request', _T_APDUs_get_request),
        ('get-response', _T_APDUs_get_response),
        ('initialisation-request', _T_APDUs_initialisation_request),
        ('initialisation-response', _T_APDUs_initialisation_response),
        ])
    T_APDUs._ext = None
    
    #-----< VST >-----#
    VST = SEQ(name='VST', mode=MODE_TYPE)
    _VST_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _VST_fill._const_sz = ASN1Set(rv=[4], rr=[], ev=None, er=[])
    _VST_profile = INT(name='profile', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'Profile')))
    _VST_applications = SEQ_OF(name='applications', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'ApplicationList')))
    _VST_obeConfiguration = SEQ(name='obeConfiguration', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRCData', 'ObeConfiguration')))
    VST._cont = ASN1Dict([
        ('fill', _VST_fill),
        ('profile', _VST_profile),
        ('applications', _VST_applications),
        ('obeConfiguration', _VST_obeConfiguration),
        ])
    VST._ext = None
    
    _all_ = [
        _Action_Request_mode,
        _Action_Request_eid,
        _Action_Request_actionType,
        _Action_Request_accessCredentials,
        _Action_Request_actionParameter,
        _Action_Request_iid,
        Action_Request,
        _Action_Response_fill,
        _Action_Response_eid,
        _Action_Response_iid,
        _Action_Response_responseParameter,
        _Action_Response_ret,
        Action_Response,
        ActionType,
        ApplicationContextMark,
        __ApplicationList__item__aid,
        __ApplicationList__item__eid,
        __ApplicationList__item__parameter,
        _ApplicationList__item_,
        ApplicationList,
        _AttributeIdList__item_,
        AttributeIdList,
        _AttributeList__item_,
        AttributeList,
        _Attributes_attributeId,
        _Attributes_attributeValue,
        Attributes,
        _BeaconID_manufacturerid,
        _BeaconID_individualid,
        BeaconID,
        _BroadcastPool_directoryvalue,
        __BroadcastPool_content__item_,
        _BroadcastPool_content,
        BroadcastPool,
        _BST_rsu,
        _BST_time,
        _BST_profile,
        _BST_mandApplications,
        _BST_nonmandApplications,
        __BST_profileList__item_,
        _BST_profileList,
        BST,
        _Container_integer,
        _Container_bitstring,
        _Container_octetstring,
        _Container_universalString,
        _Container_beaconId,
        _Container_t_apdu,
        _Container_dsrcApplicationEntityId,
        _Container_dsrc_Ase_Id,
        _Container_attrIdList,
        _Container_attrList,
        _Container_broadcastPool,
        _Container_directory,
        _Container_file,
        _Container_fileType,
        _Container_record,
        _Container_time,
        __Container_vector__item_,
        _Container_vector,
        Container,
        _Directory__item_,
        Directory,
        Dsrc_EID,
        DSRCApplicationEntityID,
        _Event_Report_Request_mode,
        _Event_Report_Request_eid,
        _Event_Report_Request_eventType,
        _Event_Report_Request_accessCredentials,
        _Event_Report_Request_eventParameter,
        _Event_Report_Request_iid,
        Event_Report_Request,
        _Event_Report_Response_fill,
        _Event_Report_Response_eid,
        _Event_Report_Response_iid,
        _Event_Report_Response_ret,
        Event_Report_Response,
        EventType,
        _File__item_,
        File,
        _FileName_aseID,
        _FileName_fileID,
        FileName,
        FileType,
        _Get_Request_fill,
        _Get_Request_eid,
        _Get_Request_accessCredentials,
        _Get_Request_iid,
        _Get_Request_attrIdList,
        Get_Request,
        _Get_Response_fill,
        _Get_Response_eid,
        _Get_Response_iid,
        _Get_Response_attributelist,
        _Get_Response_ret,
        Get_Response,
        Initialisation_Request,
        Initialisation_Response,
        _NamedFile_name,
        _NamedFile_file,
        NamedFile,
        _ObeConfiguration_equipmentClass,
        _ObeConfiguration_manufacturerID,
        _ObeConfiguration_obeStatus,
        ObeConfiguration,
        Profile,
        _Record_simple,
        Record,
        ReturnStatus,
        _Set_Request_fill,
        _Set_Request_mode,
        _Set_Request_eid,
        _Set_Request_accessCredentials,
        _Set_Request_attrList,
        _Set_Request_iid,
        Set_Request,
        _Set_Response_fill,
        _Set_Response_eid,
        _Set_Response_iid,
        _Set_Response_ret,
        Set_Response,
        Time,
        _T_APDUs_action_request,
        _T_APDUs_action_response,
        _T_APDUs_event_report_request,
        _T_APDUs_event_report_response,
        _T_APDUs_set_request,
        _T_APDUs_set_response,
        _T_APDUs_get_request,
        _T_APDUs_get_response,
        _T_APDUs_initialisation_request,
        _T_APDUs_initialisation_response,
        T_APDUs,
        _VST_fill,
        _VST_profile,
        _VST_applications,
        _VST_obeConfiguration,
        VST,
    ]

class SPATEM_PDU_Descriptions:

    _name_  = 'SPATEM-PDU-Descriptions'
    _oid_   = [0, 4, 0, 5, 1, 103301, 0, 1]
    
    _obj_ = [
        'SPATEM',
        ]
    _type_ = [
        'SPATEM',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< SPATEM >-----#
    SPATEM = SEQ(name='SPATEM', mode=MODE_TYPE)
    _SPATEM_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ItsPduHeader')))
    _SPATEM_spat = SEQ(name='spat', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'SPAT')))
    SPATEM._cont = ASN1Dict([
        ('header', _SPATEM_header),
        ('spat', _SPATEM_spat),
        ])
    SPATEM._ext = None
    
    _all_ = [
        _SPATEM_header,
        _SPATEM_spat,
        SPATEM,
    ]

class MAPEM_PDU_Descriptions:

    _name_  = 'MAPEM-PDU-Descriptions'
    _oid_   = [0, 4, 0, 5, 1, 103301, 1, 1]
    
    _obj_ = [
        'MAPEM',
        ]
    _type_ = [
        'MAPEM',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< MAPEM >-----#
    MAPEM = SEQ(name='MAPEM', mode=MODE_TYPE)
    _MAPEM_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ItsPduHeader')))
    _MAPEM_map = SEQ(name='map', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'MapData')))
    MAPEM._cont = ASN1Dict([
        ('header', _MAPEM_header),
        ('map', _MAPEM_map),
        ])
    MAPEM._ext = None
    
    _all_ = [
        _MAPEM_header,
        _MAPEM_map,
        MAPEM,
    ]

class IVIM_PDU_Descriptions:

    _name_  = 'IVIM-PDU-Descriptions'
    _oid_   = [0, 4, 0, 5, 1, 103301, 2, 1]
    
    _obj_ = [
        'IVIM',
        ]
    _type_ = [
        'IVIM',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< IVIM >-----#
    IVIM = SEQ(name='IVIM', mode=MODE_TYPE)
    _IVIM_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ItsPduHeader')))
    _IVIM_ivi = SEQ(name='ivi', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'IviStructure')))
    IVIM._cont = ASN1Dict([
        ('header', _IVIM_header),
        ('ivi', _IVIM_ivi),
        ])
    IVIM._ext = None
    
    _all_ = [
        _IVIM_header,
        _IVIM_ivi,
        IVIM,
    ]

class SREM_PDU_Descriptions:

    _name_  = 'SREM-PDU-Descriptions'
    _oid_   = [0, 4, 0, 5, 1, 103301, 3, 1]
    
    _obj_ = [
        'SREM',
        ]
    _type_ = [
        'SREM',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< SREM >-----#
    SREM = SEQ(name='SREM', mode=MODE_TYPE)
    _SREM_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ItsPduHeader')))
    _SREM_srm = SEQ(name='srm', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'SignalRequestMessage')))
    SREM._cont = ASN1Dict([
        ('header', _SREM_header),
        ('srm', _SREM_srm),
        ])
    SREM._ext = None
    
    _all_ = [
        _SREM_header,
        _SREM_srm,
        SREM,
    ]

class SSEM_PDU_Descriptions:

    _name_  = 'SSEM-PDU-Descriptions'
    _oid_   = [0, 4, 0, 5, 1, 103301, 4, 1]
    
    _obj_ = [
        'SSEM',
        ]
    _type_ = [
        'SSEM',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< SSEM >-----#
    SSEM = SEQ(name='SSEM', mode=MODE_TYPE)
    _SSEM_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ItsPduHeader')))
    _SSEM_ssm = SEQ(name='ssm', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'SignalStatusMessage')))
    SSEM._cont = ASN1Dict([
        ('header', _SSEM_header),
        ('ssm', _SSEM_ssm),
        ])
    SSEM._ext = None
    
    _all_ = [
        _SSEM_header,
        _SSEM_ssm,
        SSEM,
    ]

class EVCSN_PDU_Descriptions:

    _name_  = 'EVCSN-PDU-Descriptions'
    _oid_   = [0, 4, 0, 5, 1, 101556, 1, 1]
    
    _obj_ = [
        'EvcsnPdu',
        'EVChargingSpotNotificationPOIMessage',
        'ItsPOIHeader',
        'ItsEVCSNData',
        'ItsChargingStationData',
        'ItsChargingSpots',
        'ItsChargingSpotDataElements',
        'DigitalMap',
        'ChargingSpotType',
        'TypeOfReceptacle',
        'ParkingPlacesData',
        'SpotAvailability',
        'POIType',
        'NumberStations',
        ]
    _type_ = [
        'EvcsnPdu',
        'EVChargingSpotNotificationPOIMessage',
        'ItsPOIHeader',
        'ItsEVCSNData',
        'ItsChargingStationData',
        'ItsChargingSpots',
        'ItsChargingSpotDataElements',
        'DigitalMap',
        'ChargingSpotType',
        'TypeOfReceptacle',
        'ParkingPlacesData',
        'SpotAvailability',
        'POIType',
        'NumberStations',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< EvcsnPdu >-----#
    EvcsnPdu = SEQ(name='EvcsnPdu', mode=MODE_TYPE)
    _EvcsnPdu_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ItsPduHeader')))
    _EvcsnPdu_evcsn = SEQ(name='evcsn', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EVCSN-PDU-Descriptions', 'EVChargingSpotNotificationPOIMessage')))
    EvcsnPdu._cont = ASN1Dict([
        ('header', _EvcsnPdu_header),
        ('evcsn', _EvcsnPdu_evcsn),
        ])
    EvcsnPdu._ext = None
    
    #-----< EVChargingSpotNotificationPOIMessage >-----#
    EVChargingSpotNotificationPOIMessage = SEQ(name='EVChargingSpotNotificationPOIMessage', mode=MODE_TYPE)
    _EVChargingSpotNotificationPOIMessage_poiHeader = SEQ(name='poiHeader', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EVCSN-PDU-Descriptions', 'ItsPOIHeader')))
    _EVChargingSpotNotificationPOIMessage_evcsnData = SEQ(name='evcsnData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EVCSN-PDU-Descriptions', 'ItsEVCSNData')))
    EVChargingSpotNotificationPOIMessage._cont = ASN1Dict([
        ('poiHeader', _EVChargingSpotNotificationPOIMessage_poiHeader),
        ('evcsnData', _EVChargingSpotNotificationPOIMessage_evcsnData),
        ])
    EVChargingSpotNotificationPOIMessage._ext = None
    
    #-----< ItsPOIHeader >-----#
    ItsPOIHeader = SEQ(name='ItsPOIHeader', mode=MODE_TYPE)
    _ItsPOIHeader_poiType = INT(name='poiType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EVCSN-PDU-Descriptions', 'POIType')))
    _ItsPOIHeader_timeStamp = INT(name='timeStamp', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'TimestampIts')))
    _ItsPOIHeader_relayCapable = BOOL(name='relayCapable', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ItsPOIHeader._cont = ASN1Dict([
        ('poiType', _ItsPOIHeader_poiType),
        ('timeStamp', _ItsPOIHeader_timeStamp),
        ('relayCapable', _ItsPOIHeader_relayCapable),
        ])
    ItsPOIHeader._ext = None
    
    #-----< ItsEVCSNData >-----#
    ItsEVCSNData = SEQ(name='ItsEVCSNData', mode=MODE_TYPE)
    _ItsEVCSNData_totalNumberOfStations = INT(name='totalNumberOfStations', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EVCSN-PDU-Descriptions', 'NumberStations')))
    _ItsEVCSNData_chargingStationsData = SEQ_OF(name='chargingStationsData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __ItsEVCSNData_chargingStationsData__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EVCSN-PDU-Descriptions', 'ItsChargingStationData')))
    _ItsEVCSNData_chargingStationsData._cont = __ItsEVCSNData_chargingStationsData__item_
    _ItsEVCSNData_chargingStationsData._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    ItsEVCSNData._cont = ASN1Dict([
        ('totalNumberOfStations', _ItsEVCSNData_totalNumberOfStations),
        ('chargingStationsData', _ItsEVCSNData_chargingStationsData),
        ])
    ItsEVCSNData._ext = None
    
    #-----< ItsChargingStationData >-----#
    ItsChargingStationData = SEQ(name='ItsChargingStationData', mode=MODE_TYPE)
    _ItsChargingStationData_chargingStationID = INT(name='chargingStationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'StationID')))
    _ItsChargingStationData_utilityDistributorId = STR_UTF8(name='utilityDistributorId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ItsChargingStationData_utilityDistributorId._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    _ItsChargingStationData_providerID = STR_UTF8(name='providerID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ItsChargingStationData_providerID._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    _ItsChargingStationData_chargingStationLocation = SEQ(name='chargingStationLocation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ReferencePosition')))
    _ItsChargingStationData_address = STR_UTF8(name='address', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ItsChargingStationData_phoneNumber = STR_NUM(name='phoneNumber', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ItsChargingStationData_phoneNumber._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    _ItsChargingStationData_accessibility = STR_UTF8(name='accessibility', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ItsChargingStationData_accessibility._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    _ItsChargingStationData_digitalMap = SEQ_OF(name='digitalMap', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EVCSN-PDU-Descriptions', 'DigitalMap')), opt=True)
    _ItsChargingStationData_openingDaysHours = STR_UTF8(name='openingDaysHours', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ItsChargingStationData_pricing = STR_UTF8(name='pricing', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ItsChargingStationData_bookingContactInfo = STR_UTF8(name='bookingContactInfo', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ItsChargingStationData_payment = STR_UTF8(name='payment', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ItsChargingStationData_chargingSpotsAvailable = SEQ_OF(name='chargingSpotsAvailable', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EVCSN-PDU-Descriptions', 'ItsChargingSpots')))
    ItsChargingStationData._cont = ASN1Dict([
        ('chargingStationID', _ItsChargingStationData_chargingStationID),
        ('utilityDistributorId', _ItsChargingStationData_utilityDistributorId),
        ('providerID', _ItsChargingStationData_providerID),
        ('chargingStationLocation', _ItsChargingStationData_chargingStationLocation),
        ('address', _ItsChargingStationData_address),
        ('phoneNumber', _ItsChargingStationData_phoneNumber),
        ('accessibility', _ItsChargingStationData_accessibility),
        ('digitalMap', _ItsChargingStationData_digitalMap),
        ('openingDaysHours', _ItsChargingStationData_openingDaysHours),
        ('pricing', _ItsChargingStationData_pricing),
        ('bookingContactInfo', _ItsChargingStationData_bookingContactInfo),
        ('payment', _ItsChargingStationData_payment),
        ('chargingSpotsAvailable', _ItsChargingStationData_chargingSpotsAvailable),
        ])
    ItsChargingStationData._ext = []
    
    #-----< ItsChargingSpots >-----#
    ItsChargingSpots = SEQ_OF(name='ItsChargingSpots', mode=MODE_TYPE)
    _ItsChargingSpots__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EVCSN-PDU-Descriptions', 'ItsChargingSpotDataElements')))
    ItsChargingSpots._cont = _ItsChargingSpots__item_
    ItsChargingSpots._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< ItsChargingSpotDataElements >-----#
    ItsChargingSpotDataElements = SEQ(name='ItsChargingSpotDataElements', mode=MODE_TYPE)
    _ItsChargingSpotDataElements_type = BIT_STR(name='type', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EVCSN-PDU-Descriptions', 'ChargingSpotType')))
    _ItsChargingSpotDataElements_evEquipmentID = STR_UTF8(name='evEquipmentID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ItsChargingSpotDataElements_typeOfReceptacle = BIT_STR(name='typeOfReceptacle', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EVCSN-PDU-Descriptions', 'TypeOfReceptacle')))
    _ItsChargingSpotDataElements_energyAvailability = STR_UTF8(name='energyAvailability', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ItsChargingSpotDataElements_parkingPlacesData = SEQ_OF(name='parkingPlacesData', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EVCSN-PDU-Descriptions', 'ParkingPlacesData')), opt=True)
    ItsChargingSpotDataElements._cont = ASN1Dict([
        ('type', _ItsChargingSpotDataElements_type),
        ('evEquipmentID', _ItsChargingSpotDataElements_evEquipmentID),
        ('typeOfReceptacle', _ItsChargingSpotDataElements_typeOfReceptacle),
        ('energyAvailability', _ItsChargingSpotDataElements_energyAvailability),
        ('parkingPlacesData', _ItsChargingSpotDataElements_parkingPlacesData),
        ])
    ItsChargingSpotDataElements._ext = None
    
    #-----< DigitalMap >-----#
    DigitalMap = SEQ_OF(name='DigitalMap', mode=MODE_TYPE)
    _DigitalMap__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ITS-Container', 'ReferencePosition')))
    DigitalMap._cont = _DigitalMap__item_
    DigitalMap._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< ChargingSpotType >-----#
    ChargingSpotType = BIT_STR(name='ChargingSpotType', mode=MODE_TYPE)
    ChargingSpotType._cont = ASN1Dict([('standardChargeMode1', 0), ('standardChargeMode2', 1), ('standardOrFastChargeMode3', 2), ('fastChargeWithExternalCharger', 3), ('quickDrop', 8), ('inductiveChargeWhileStationary', 12), ('inductiveChargeWhileDriving', 14)])
    
    #-----< TypeOfReceptacle >-----#
    TypeOfReceptacle = BIT_STR(name='TypeOfReceptacle', mode=MODE_TYPE)
    
    #-----< ParkingPlacesData >-----#
    ParkingPlacesData = SEQ_OF(name='ParkingPlacesData', mode=MODE_TYPE)
    _ParkingPlacesData__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EVCSN-PDU-Descriptions', 'SpotAvailability')))
    ParkingPlacesData._cont = _ParkingPlacesData__item_
    ParkingPlacesData._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    
    #-----< SpotAvailability >-----#
    SpotAvailability = SEQ(name='SpotAvailability', mode=MODE_TYPE)
    _SpotAvailability_maxWaitingTimeMinutes = INT(name='maxWaitingTimeMinutes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SpotAvailability_maxWaitingTimeMinutes._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1400)], ev=None, er=[])
    _SpotAvailability_blocking = BOOL(name='blocking', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    SpotAvailability._cont = ASN1Dict([
        ('maxWaitingTimeMinutes', _SpotAvailability_maxWaitingTimeMinutes),
        ('blocking', _SpotAvailability_blocking),
        ])
    SpotAvailability._ext = None
    
    #-----< POIType >-----#
    POIType = INT(name='POIType', mode=MODE_TYPE)
    POIType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< NumberStations >-----#
    NumberStations = INT(name='NumberStations', mode=MODE_TYPE)
    NumberStations._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    _all_ = [
        _EvcsnPdu_header,
        _EvcsnPdu_evcsn,
        EvcsnPdu,
        _EVChargingSpotNotificationPOIMessage_poiHeader,
        _EVChargingSpotNotificationPOIMessage_evcsnData,
        EVChargingSpotNotificationPOIMessage,
        _ItsPOIHeader_poiType,
        _ItsPOIHeader_timeStamp,
        _ItsPOIHeader_relayCapable,
        ItsPOIHeader,
        _ItsEVCSNData_totalNumberOfStations,
        __ItsEVCSNData_chargingStationsData__item_,
        _ItsEVCSNData_chargingStationsData,
        ItsEVCSNData,
        _ItsChargingStationData_chargingStationID,
        _ItsChargingStationData_utilityDistributorId,
        _ItsChargingStationData_providerID,
        _ItsChargingStationData_chargingStationLocation,
        _ItsChargingStationData_address,
        _ItsChargingStationData_phoneNumber,
        _ItsChargingStationData_accessibility,
        _ItsChargingStationData_digitalMap,
        _ItsChargingStationData_openingDaysHours,
        _ItsChargingStationData_pricing,
        _ItsChargingStationData_bookingContactInfo,
        _ItsChargingStationData_payment,
        _ItsChargingStationData_chargingSpotsAvailable,
        ItsChargingStationData,
        _ItsChargingSpots__item_,
        ItsChargingSpots,
        _ItsChargingSpotDataElements_type,
        _ItsChargingSpotDataElements_evEquipmentID,
        _ItsChargingSpotDataElements_typeOfReceptacle,
        _ItsChargingSpotDataElements_energyAvailability,
        _ItsChargingSpotDataElements_parkingPlacesData,
        ItsChargingSpotDataElements,
        _DigitalMap__item_,
        DigitalMap,
        ChargingSpotType,
        TypeOfReceptacle,
        _ParkingPlacesData__item_,
        ParkingPlacesData,
        _SpotAvailability_maxWaitingTimeMinutes,
        _SpotAvailability_blocking,
        SpotAvailability,
        POIType,
        NumberStations,
    ]

class EV_RechargingSpotReservation_PDU_Descriptions:

    _name_  = 'EV-RechargingSpotReservation-PDU-Descriptions'
    _oid_   = [0, 4, 0, 5, 1, 101556, 4, 1]
    
    _obj_ = [
        'EV-RSR',
        'EV-RSR-MessageBody',
        'PreReservationRequestMessage',
        'PreReservationResponseMessage',
        'ReservationRequestMessage',
        'ReservationResponseMessage',
        'CancellationRequestMessage',
        'CancellationResponseMessage',
        'UpdateRequestMessage',
        'UpdateResponseMessage',
        'AvailabilityStatus',
        'BatteryType',
        'CancellationResponseCode',
        'ChargingSpotLabel',
        'ContractID',
        'EAmount',
        'ChargingPower',
        'EVSE-ID',
        'ExternalIdentificationMeans',
        'Pairing-ID',
        'PaymentType',
        'Payment-ID',
        'RechargingType',
        'RechargingMode',
        'PowerSource',
        'ReservationResponseCode',
        'Reservation-ID',
        'PreReservation-ID',
        'Reservation-Password',
        'StationDetails',
        'SupportedPaymentTypes',
        'TimestampUTC',
        'UpdateResponseCode',
        'StatusResponseCode',
        ]
    _type_ = [
        'EV-RSR',
        'EV-RSR-MessageBody',
        'PreReservationRequestMessage',
        'PreReservationResponseMessage',
        'ReservationRequestMessage',
        'ReservationResponseMessage',
        'CancellationRequestMessage',
        'CancellationResponseMessage',
        'UpdateRequestMessage',
        'UpdateResponseMessage',
        'AvailabilityStatus',
        'BatteryType',
        'CancellationResponseCode',
        'ChargingSpotLabel',
        'ContractID',
        'EAmount',
        'ChargingPower',
        'EVSE-ID',
        'ExternalIdentificationMeans',
        'Pairing-ID',
        'PaymentType',
        'Payment-ID',
        'RechargingType',
        'RechargingMode',
        'PowerSource',
        'ReservationResponseCode',
        'Reservation-ID',
        'PreReservation-ID',
        'Reservation-Password',
        'StationDetails',
        'SupportedPaymentTypes',
        'TimestampUTC',
        'UpdateResponseCode',
        'StatusResponseCode',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< EV-RSR >-----#
    EV_RSR = SEQ(name='EV-RSR', mode=MODE_TYPE)
    _EV_RSR_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ItsPduHeader')))
    _EV_RSR_messageBody = CHOICE(name='messageBody', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'EV-RSR-MessageBody')))
    EV_RSR._cont = ASN1Dict([
        ('header', _EV_RSR_header),
        ('messageBody', _EV_RSR_messageBody),
        ])
    EV_RSR._ext = None
    
    #-----< EV-RSR-MessageBody >-----#
    EV_RSR_MessageBody = CHOICE(name='EV-RSR-MessageBody', mode=MODE_TYPE)
    _EV_RSR_MessageBody_preReservationRequestMessage = SEQ(name='preReservationRequestMessage', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'PreReservationRequestMessage')))
    _EV_RSR_MessageBody_preReservationResponseMessage = SEQ(name='preReservationResponseMessage', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'PreReservationResponseMessage')))
    _EV_RSR_MessageBody_reservationRequestMessage = SEQ(name='reservationRequestMessage', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'ReservationRequestMessage')))
    _EV_RSR_MessageBody_reservationResponseMessage = SEQ(name='reservationResponseMessage', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'ReservationResponseMessage')))
    _EV_RSR_MessageBody_cancellationRequestMessage = SEQ(name='cancellationRequestMessage', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'CancellationRequestMessage')))
    _EV_RSR_MessageBody_cancellationResponseMessage = SEQ(name='cancellationResponseMessage', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'CancellationResponseMessage')))
    _EV_RSR_MessageBody_updateRequestMessage = SEQ(name='updateRequestMessage', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'UpdateRequestMessage')))
    _EV_RSR_MessageBody_updateResponseMessage = SEQ(name='updateResponseMessage', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'UpdateResponseMessage')))
    EV_RSR_MessageBody._cont = ASN1Dict([
        ('preReservationRequestMessage', _EV_RSR_MessageBody_preReservationRequestMessage),
        ('preReservationResponseMessage', _EV_RSR_MessageBody_preReservationResponseMessage),
        ('reservationRequestMessage', _EV_RSR_MessageBody_reservationRequestMessage),
        ('reservationResponseMessage', _EV_RSR_MessageBody_reservationResponseMessage),
        ('cancellationRequestMessage', _EV_RSR_MessageBody_cancellationRequestMessage),
        ('cancellationResponseMessage', _EV_RSR_MessageBody_cancellationResponseMessage),
        ('updateRequestMessage', _EV_RSR_MessageBody_updateRequestMessage),
        ('updateResponseMessage', _EV_RSR_MessageBody_updateResponseMessage),
        ])
    EV_RSR_MessageBody._ext = []
    
    #-----< PreReservationRequestMessage >-----#
    PreReservationRequestMessage = SEQ(name='PreReservationRequestMessage', mode=MODE_TYPE)
    _PreReservationRequestMessage_evse_ID = OCT_STR(name='evse-ID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'EVSE-ID')))
    _PreReservationRequestMessage_arrivalTime = INT(name='arrivalTime', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'TimestampUTC')))
    _PreReservationRequestMessage_departureTime = INT(name='departureTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'TimestampUTC')), opt=True)
    _PreReservationRequestMessage_rechargingType = SEQ(name='rechargingType', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'RechargingType')))
    _PreReservationRequestMessage_batteryType = STR_UTF8(name='batteryType', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'BatteryType')), opt=True)
    PreReservationRequestMessage._cont = ASN1Dict([
        ('evse-ID', _PreReservationRequestMessage_evse_ID),
        ('arrivalTime', _PreReservationRequestMessage_arrivalTime),
        ('departureTime', _PreReservationRequestMessage_departureTime),
        ('rechargingType', _PreReservationRequestMessage_rechargingType),
        ('batteryType', _PreReservationRequestMessage_batteryType),
        ])
    PreReservationRequestMessage._ext = []
    
    #-----< PreReservationResponseMessage >-----#
    PreReservationResponseMessage = SEQ(name='PreReservationResponseMessage', mode=MODE_TYPE)
    _PreReservationResponseMessage_preReservation_ID = STR_VIS(name='preReservation-ID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'PreReservation-ID')))
    _PreReservationResponseMessage_availabilityStatus = ENUM(name='availabilityStatus', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'AvailabilityStatus')))
    _PreReservationResponseMessage_preReservationExpirationTime = INT(name='preReservationExpirationTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'TimestampUTC')))
    _PreReservationResponseMessage_supportedPaymentTypes = BIT_STR(name='supportedPaymentTypes', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'SupportedPaymentTypes')))
    PreReservationResponseMessage._cont = ASN1Dict([
        ('preReservation-ID', _PreReservationResponseMessage_preReservation_ID),
        ('availabilityStatus', _PreReservationResponseMessage_availabilityStatus),
        ('preReservationExpirationTime', _PreReservationResponseMessage_preReservationExpirationTime),
        ('supportedPaymentTypes', _PreReservationResponseMessage_supportedPaymentTypes),
        ])
    PreReservationResponseMessage._ext = []
    
    #-----< ReservationRequestMessage >-----#
    ReservationRequestMessage = SEQ(name='ReservationRequestMessage', mode=MODE_TYPE)
    _ReservationRequestMessage_currentTime = INT(name='currentTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'TimestampUTC')))
    _ReservationRequestMessage_preReservation_ID = STR_VIS(name='preReservation-ID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'PreReservation-ID')))
    _ReservationRequestMessage_arrivalTime = INT(name='arrivalTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'TimestampUTC')))
    _ReservationRequestMessage_departureTime = INT(name='departureTime', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'TimestampUTC')), opt=True)
    _ReservationRequestMessage_eAmount = INT(name='eAmount', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'EAmount')))
    _ReservationRequestMessage_eAmountMin = INT(name='eAmountMin', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'EAmount')))
    _ReservationRequestMessage_paymentType = ENUM(name='paymentType', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'PaymentType')))
    _ReservationRequestMessage_payment_ID = CHOICE(name='payment-ID', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'Payment-ID')))
    _ReservationRequestMessage_secondPayment_ID = CHOICE(name='secondPayment-ID', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'Payment-ID')), opt=True)
    _ReservationRequestMessage_pairing_ID = STR_VIS(name='pairing-ID', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'Pairing-ID')), opt=True)
    ReservationRequestMessage._cont = ASN1Dict([
        ('currentTime', _ReservationRequestMessage_currentTime),
        ('preReservation-ID', _ReservationRequestMessage_preReservation_ID),
        ('arrivalTime', _ReservationRequestMessage_arrivalTime),
        ('departureTime', _ReservationRequestMessage_departureTime),
        ('eAmount', _ReservationRequestMessage_eAmount),
        ('eAmountMin', _ReservationRequestMessage_eAmountMin),
        ('paymentType', _ReservationRequestMessage_paymentType),
        ('payment-ID', _ReservationRequestMessage_payment_ID),
        ('secondPayment-ID', _ReservationRequestMessage_secondPayment_ID),
        ('pairing-ID', _ReservationRequestMessage_pairing_ID),
        ])
    ReservationRequestMessage._ext = []
    
    #-----< ReservationResponseMessage >-----#
    ReservationResponseMessage = SEQ(name='ReservationResponseMessage', mode=MODE_TYPE)
    _ReservationResponseMessage_reservationResponseCode = ENUM(name='reservationResponseCode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'ReservationResponseCode')))
    _ReservationResponseMessage_reservation_ID = STR_VIS(name='reservation-ID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'Reservation-ID')), opt=True)
    _ReservationResponseMessage_reservation_Password = STR_VIS(name='reservation-Password', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'Reservation-Password')), opt=True)
    _ReservationResponseMessage_stationDetails = STR_UTF8(name='stationDetails', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'StationDetails')), opt=True)
    _ReservationResponseMessage_chargingSpotLabel = STR_UTF8(name='chargingSpotLabel', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'ChargingSpotLabel')), opt=True)
    _ReservationResponseMessage_expirationTime = INT(name='expirationTime', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'TimestampUTC')))
    _ReservationResponseMessage_freeCancelTimeLimit = INT(name='freeCancelTimeLimit', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'TimestampUTC')), opt=True)
    ReservationResponseMessage._cont = ASN1Dict([
        ('reservationResponseCode', _ReservationResponseMessage_reservationResponseCode),
        ('reservation-ID', _ReservationResponseMessage_reservation_ID),
        ('reservation-Password', _ReservationResponseMessage_reservation_Password),
        ('stationDetails', _ReservationResponseMessage_stationDetails),
        ('chargingSpotLabel', _ReservationResponseMessage_chargingSpotLabel),
        ('expirationTime', _ReservationResponseMessage_expirationTime),
        ('freeCancelTimeLimit', _ReservationResponseMessage_freeCancelTimeLimit),
        ])
    ReservationResponseMessage._ext = []
    
    #-----< CancellationRequestMessage >-----#
    CancellationRequestMessage = SEQ(name='CancellationRequestMessage', mode=MODE_TYPE)
    _CancellationRequestMessage_reservation_ID = STR_VIS(name='reservation-ID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'Reservation-ID')))
    _CancellationRequestMessage_reservation_Password = STR_VIS(name='reservation-Password', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'Reservation-Password')))
    _CancellationRequestMessage_currentTime = INT(name='currentTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'TimestampUTC')))
    CancellationRequestMessage._cont = ASN1Dict([
        ('reservation-ID', _CancellationRequestMessage_reservation_ID),
        ('reservation-Password', _CancellationRequestMessage_reservation_Password),
        ('currentTime', _CancellationRequestMessage_currentTime),
        ])
    CancellationRequestMessage._ext = []
    
    #-----< CancellationResponseMessage >-----#
    CancellationResponseMessage = SEQ(name='CancellationResponseMessage', mode=MODE_TYPE)
    _CancellationResponseMessage_reservation_ID = STR_VIS(name='reservation-ID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'Reservation-ID')))
    _CancellationResponseMessage_cancellationResponseCode = ENUM(name='cancellationResponseCode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'CancellationResponseCode')))
    CancellationResponseMessage._cont = ASN1Dict([
        ('reservation-ID', _CancellationResponseMessage_reservation_ID),
        ('cancellationResponseCode', _CancellationResponseMessage_cancellationResponseCode),
        ])
    CancellationResponseMessage._ext = []
    
    #-----< UpdateRequestMessage >-----#
    UpdateRequestMessage = SEQ(name='UpdateRequestMessage', mode=MODE_TYPE)
    _UpdateRequestMessage_reservation_ID = STR_VIS(name='reservation-ID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'Reservation-ID')))
    _UpdateRequestMessage_reservation_Password = STR_VIS(name='reservation-Password', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'Reservation-Password')))
    _UpdateRequestMessage_updatedArrivalTime = INT(name='updatedArrivalTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'TimestampUTC')))
    _UpdateRequestMessage_updatedDepartureTime = INT(name='updatedDepartureTime', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'TimestampUTC')))
    UpdateRequestMessage._cont = ASN1Dict([
        ('reservation-ID', _UpdateRequestMessage_reservation_ID),
        ('reservation-Password', _UpdateRequestMessage_reservation_Password),
        ('updatedArrivalTime', _UpdateRequestMessage_updatedArrivalTime),
        ('updatedDepartureTime', _UpdateRequestMessage_updatedDepartureTime),
        ])
    UpdateRequestMessage._ext = []
    
    #-----< UpdateResponseMessage >-----#
    UpdateResponseMessage = SEQ(name='UpdateResponseMessage', mode=MODE_TYPE)
    _UpdateResponseMessage_reservation_ID = STR_VIS(name='reservation-ID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'Reservation-ID')))
    _UpdateResponseMessage_updateResponseCode = ENUM(name='updateResponseCode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'UpdateResponseCode')))
    _UpdateResponseMessage_chargingSpotLabel = STR_UTF8(name='chargingSpotLabel', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'ChargingSpotLabel')), opt=True)
    UpdateResponseMessage._cont = ASN1Dict([
        ('reservation-ID', _UpdateResponseMessage_reservation_ID),
        ('updateResponseCode', _UpdateResponseMessage_updateResponseCode),
        ('chargingSpotLabel', _UpdateResponseMessage_chargingSpotLabel),
        ])
    UpdateResponseMessage._ext = []
    
    #-----< AvailabilityStatus >-----#
    AvailabilityStatus = ENUM(name='AvailabilityStatus', mode=MODE_TYPE)
    AvailabilityStatus._cont = ASN1Dict([('available', 0), ('no-free-capacity', 1)])
    AvailabilityStatus._ext = None
    
    #-----< BatteryType >-----#
    BatteryType = STR_UTF8(name='BatteryType', mode=MODE_TYPE)
    BatteryType._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< CancellationResponseCode >-----#
    CancellationResponseCode = ENUM(name='CancellationResponseCode', mode=MODE_TYPE)
    CancellationResponseCode._cont = ASN1Dict([('ok', 0), ('unknown-Reservation-ID', 1), ('mismatching-Reservation-Password', 2)])
    CancellationResponseCode._ext = None
    
    #-----< ChargingSpotLabel >-----#
    ChargingSpotLabel = STR_UTF8(name='ChargingSpotLabel', mode=MODE_TYPE)
    ChargingSpotLabel._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    
    #-----< ContractID >-----#
    ContractID = STR_UTF8(name='ContractID', mode=MODE_TYPE)
    ContractID._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=24)], ev=None, er=[])
    
    #-----< EAmount >-----#
    EAmount = INT(name='EAmount', mode=MODE_TYPE)
    EAmount._cont = ASN1Dict([('oneWh', 1)])
    EAmount._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=500000)], ev=None, er=[])
    
    #-----< ChargingPower >-----#
    ChargingPower = INT(name='ChargingPower', mode=MODE_TYPE)
    ChargingPower._cont = ASN1Dict([('oneW', 1)])
    ChargingPower._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=200000)], ev=None, er=[])
    
    #-----< EVSE-ID >-----#
    EVSE_ID = OCT_STR(name='EVSE-ID', mode=MODE_TYPE)
    EVSE_ID._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< ExternalIdentificationMeans >-----#
    ExternalIdentificationMeans = STR_UTF8(name='ExternalIdentificationMeans', mode=MODE_TYPE)
    ExternalIdentificationMeans._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=24)], ev=None, er=[])
    
    #-----< Pairing-ID >-----#
    Pairing_ID = STR_VIS(name='Pairing-ID', mode=MODE_TYPE)
    Pairing_ID._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    
    #-----< PaymentType >-----#
    PaymentType = ENUM(name='PaymentType', mode=MODE_TYPE)
    PaymentType._cont = ASN1Dict([('contract', 0), ('externalIdentification', 1)])
    PaymentType._ext = None
    
    #-----< Payment-ID >-----#
    Payment_ID = CHOICE(name='Payment-ID', mode=MODE_TYPE)
    _Payment_ID_contractID = STR_UTF8(name='contractID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'ContractID')))
    _Payment_ID_externalIdentificationMeans = STR_UTF8(name='externalIdentificationMeans', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'ExternalIdentificationMeans')))
    Payment_ID._cont = ASN1Dict([
        ('contractID', _Payment_ID_contractID),
        ('externalIdentificationMeans', _Payment_ID_externalIdentificationMeans),
        ])
    Payment_ID._ext = None
    
    #-----< RechargingType >-----#
    RechargingType = SEQ(name='RechargingType', mode=MODE_TYPE)
    _RechargingType_rechargingMode = INT(name='rechargingMode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'RechargingMode')))
    _RechargingType_powerSource = INT(name='powerSource', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'PowerSource')))
    RechargingType._cont = ASN1Dict([
        ('rechargingMode', _RechargingType_rechargingMode),
        ('powerSource', _RechargingType_powerSource),
        ])
    RechargingType._ext = None
    
    #-----< RechargingMode >-----#
    RechargingMode = INT(name='RechargingMode', mode=MODE_TYPE)
    RechargingMode._cont = ASN1Dict([('mode1', 0), ('mode2', 1), ('mode3', 2), ('mode4', 3), ('quickDrop', 8), ('inductiveChargingWhileStationary', 12), ('inductiveChargingWhileDriving', 14)])
    RechargingMode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< PowerSource >-----#
    PowerSource = INT(name='PowerSource', mode=MODE_TYPE)
    PowerSource._cont = ASN1Dict([('notApplicable', 0), ('ac1Phase', 1), ('ac2Phase', 2), ('ac3Phase', 3), ('dcc', 4), ('chaDeMo', 5)])
    PowerSource._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=7)], ev=None, er=[])
    
    #-----< ReservationResponseCode >-----#
    ReservationResponseCode = ENUM(name='ReservationResponseCode', mode=MODE_TYPE)
    ReservationResponseCode._cont = ASN1Dict([('ok', 0), ('invalid-EVSE-ID', 1), ('payment-type-not-supported', 2), ('payment-error', 3), ('authentication-error', 4), ('insufficient-power-availability', 5)])
    ReservationResponseCode._ext = None
    
    #-----< Reservation-ID >-----#
    Reservation_ID = STR_VIS(name='Reservation-ID', mode=MODE_TYPE)
    Reservation_ID._const_sz = ASN1Set(rv=[8], rr=[], ev=None, er=[])
    
    #-----< PreReservation-ID >-----#
    PreReservation_ID = STR_VIS(name='PreReservation-ID', mode=MODE_TYPE, typeref=ASN1RefType(('EV-RechargingSpotReservation-PDU-Descriptions', 'Reservation-ID')))
    
    #-----< Reservation-Password >-----#
    Reservation_Password = STR_VIS(name='Reservation-Password', mode=MODE_TYPE)
    Reservation_Password._const_sz = ASN1Set(rv=[8], rr=[], ev=None, er=[])
    
    #-----< StationDetails >-----#
    StationDetails = STR_UTF8(name='StationDetails', mode=MODE_TYPE)
    StationDetails._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< SupportedPaymentTypes >-----#
    SupportedPaymentTypes = BIT_STR(name='SupportedPaymentTypes', mode=MODE_TYPE)
    SupportedPaymentTypes._cont = ASN1Dict([('contract', 0), ('externalIdentification', 1)])
    SupportedPaymentTypes._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    
    #-----< TimestampUTC >-----#
    TimestampUTC = INT(name='TimestampUTC', mode=MODE_TYPE)
    TimestampUTC._cont = ASN1Dict([('utcStartOf2013', 0), ('oneSecondAfterUTCStartOf2013', 1)])
    
    #-----< UpdateResponseCode >-----#
    UpdateResponseCode = ENUM(name='UpdateResponseCode', mode=MODE_TYPE)
    UpdateResponseCode._cont = ASN1Dict([('ok', 0), ('unknown-Reservation-ID', 1), ('mismatching-Reservation-Password', 2), ('invalid-Arrival-Time', 3), ('invalid-Departure-Time', 4)])
    UpdateResponseCode._ext = None
    
    #-----< StatusResponseCode >-----#
    StatusResponseCode = ENUM(name='StatusResponseCode', mode=MODE_TYPE)
    StatusResponseCode._cont = ASN1Dict([('charging-Spot-Occupied', 0), ('charging-Spot-Unoccupied', 1), ('charging-Ongoing', 2), ('reservation-Limit-Exceeded', 3), ('reservation-Cancelled', 4), ('unknown-Reservation-ID', 5), ('expired-Reservation-ID', 6)])
    StatusResponseCode._ext = None
    
    _all_ = [
        _EV_RSR_header,
        _EV_RSR_messageBody,
        EV_RSR,
        _EV_RSR_MessageBody_preReservationRequestMessage,
        _EV_RSR_MessageBody_preReservationResponseMessage,
        _EV_RSR_MessageBody_reservationRequestMessage,
        _EV_RSR_MessageBody_reservationResponseMessage,
        _EV_RSR_MessageBody_cancellationRequestMessage,
        _EV_RSR_MessageBody_cancellationResponseMessage,
        _EV_RSR_MessageBody_updateRequestMessage,
        _EV_RSR_MessageBody_updateResponseMessage,
        EV_RSR_MessageBody,
        _PreReservationRequestMessage_evse_ID,
        _PreReservationRequestMessage_arrivalTime,
        _PreReservationRequestMessage_departureTime,
        _PreReservationRequestMessage_rechargingType,
        _PreReservationRequestMessage_batteryType,
        PreReservationRequestMessage,
        _PreReservationResponseMessage_preReservation_ID,
        _PreReservationResponseMessage_availabilityStatus,
        _PreReservationResponseMessage_preReservationExpirationTime,
        _PreReservationResponseMessage_supportedPaymentTypes,
        PreReservationResponseMessage,
        _ReservationRequestMessage_currentTime,
        _ReservationRequestMessage_preReservation_ID,
        _ReservationRequestMessage_arrivalTime,
        _ReservationRequestMessage_departureTime,
        _ReservationRequestMessage_eAmount,
        _ReservationRequestMessage_eAmountMin,
        _ReservationRequestMessage_paymentType,
        _ReservationRequestMessage_payment_ID,
        _ReservationRequestMessage_secondPayment_ID,
        _ReservationRequestMessage_pairing_ID,
        ReservationRequestMessage,
        _ReservationResponseMessage_reservationResponseCode,
        _ReservationResponseMessage_reservation_ID,
        _ReservationResponseMessage_reservation_Password,
        _ReservationResponseMessage_stationDetails,
        _ReservationResponseMessage_chargingSpotLabel,
        _ReservationResponseMessage_expirationTime,
        _ReservationResponseMessage_freeCancelTimeLimit,
        ReservationResponseMessage,
        _CancellationRequestMessage_reservation_ID,
        _CancellationRequestMessage_reservation_Password,
        _CancellationRequestMessage_currentTime,
        CancellationRequestMessage,
        _CancellationResponseMessage_reservation_ID,
        _CancellationResponseMessage_cancellationResponseCode,
        CancellationResponseMessage,
        _UpdateRequestMessage_reservation_ID,
        _UpdateRequestMessage_reservation_Password,
        _UpdateRequestMessage_updatedArrivalTime,
        _UpdateRequestMessage_updatedDepartureTime,
        UpdateRequestMessage,
        _UpdateResponseMessage_reservation_ID,
        _UpdateResponseMessage_updateResponseCode,
        _UpdateResponseMessage_chargingSpotLabel,
        UpdateResponseMessage,
        AvailabilityStatus,
        BatteryType,
        CancellationResponseCode,
        ChargingSpotLabel,
        ContractID,
        EAmount,
        ChargingPower,
        EVSE_ID,
        ExternalIdentificationMeans,
        Pairing_ID,
        PaymentType,
        _Payment_ID_contractID,
        _Payment_ID_externalIdentificationMeans,
        Payment_ID,
        _RechargingType_rechargingMode,
        _RechargingType_powerSource,
        RechargingType,
        RechargingMode,
        PowerSource,
        ReservationResponseCode,
        Reservation_ID,
        PreReservation_ID,
        Reservation_Password,
        StationDetails,
        SupportedPaymentTypes,
        TimestampUTC,
        UpdateResponseCode,
        StatusResponseCode,
    ]

class AVIAEINumberingAndDataStructures:

    _name_  = 'AVIAEINumberingAndDataStructures'
    _oid_   = [1, 0, 14816, 1, 1]
    
    _obj_ = [
        'CS5',
        'CountryCode',
        'IssuerIdentifier',
        ]
    _type_ = [
        'CS5',
        'CountryCode',
        'IssuerIdentifier',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< CS5 >-----#
    CS5 = SEQ(name='CS5', mode=MODE_TYPE)
    _CS5_vin = STR_VIS(name='vin', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CS5_fill = BIT_STR(name='fill', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CS5_fill._const_sz = ASN1Set(rv=[9], rr=[], ev=None, er=[])
    CS5._cont = ASN1Dict([
        ('vin', _CS5_vin),
        ('fill', _CS5_fill),
        ])
    CS5._ext = None
    
    #-----< CountryCode >-----#
    CountryCode = BIT_STR(name='CountryCode', mode=MODE_TYPE)
    CountryCode._const_sz = ASN1Set(rv=[10], rr=[], ev=None, er=[])
    
    #-----< IssuerIdentifier >-----#
    IssuerIdentifier = INT(name='IssuerIdentifier', mode=MODE_TYPE)
    IssuerIdentifier._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=16383)], ev=None, er=[])
    
    _all_ = [
        _CS5_vin,
        _CS5_fill,
        CS5,
        CountryCode,
        IssuerIdentifier,
    ]

class EfcDsrcApplication:

    _name_  = 'EfcDsrcApplication'
    _oid_   = [1, 0, 14906, 0, 5]
    
    _obj_ = [
        'AxleWeightLimits',
        'DieselEmissionValues',
        'EnvironmentalCharacteristics',
        'EuroValue',
        'CopValue',
        'EngineCharacteristics',
        'ExhaustEmissionValues',
        'Int1',
        'Int2',
        'PassengerCapacity',
        'Provider',
        'SoundLevel',
        'UnitType',
        'VehicleDimensions',
        'VehicleWeightLimits',
        ]
    _type_ = [
        'AxleWeightLimits',
        'DieselEmissionValues',
        'EnvironmentalCharacteristics',
        'EuroValue',
        'CopValue',
        'EngineCharacteristics',
        'ExhaustEmissionValues',
        'Int1',
        'Int2',
        'PassengerCapacity',
        'Provider',
        'SoundLevel',
        'UnitType',
        'VehicleDimensions',
        'VehicleWeightLimits',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< AxleWeightLimits >-----#
    AxleWeightLimits = SEQ(name='AxleWeightLimits', mode=MODE_TYPE)
    _AxleWeightLimits_maxLadenweightOnAxle1 = INT(name='maxLadenweightOnAxle1', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'Int2')))
    _AxleWeightLimits_maxLadenweightOnAxle2 = INT(name='maxLadenweightOnAxle2', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'Int2')))
    _AxleWeightLimits_maxLadenweightOnAxle3 = INT(name='maxLadenweightOnAxle3', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'Int2')))
    _AxleWeightLimits_maxLadenweightOnAxle4 = INT(name='maxLadenweightOnAxle4', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'Int2')))
    _AxleWeightLimits_maxLadenweightOnAxle5 = INT(name='maxLadenweightOnAxle5', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'Int2')))
    AxleWeightLimits._cont = ASN1Dict([
        ('maxLadenweightOnAxle1', _AxleWeightLimits_maxLadenweightOnAxle1),
        ('maxLadenweightOnAxle2', _AxleWeightLimits_maxLadenweightOnAxle2),
        ('maxLadenweightOnAxle3', _AxleWeightLimits_maxLadenweightOnAxle3),
        ('maxLadenweightOnAxle4', _AxleWeightLimits_maxLadenweightOnAxle4),
        ('maxLadenweightOnAxle5', _AxleWeightLimits_maxLadenweightOnAxle5),
        ])
    AxleWeightLimits._ext = None
    
    #-----< DieselEmissionValues >-----#
    DieselEmissionValues = SEQ(name='DieselEmissionValues', mode=MODE_TYPE)
    _DieselEmissionValues_particulate = SEQ(name='particulate', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __DieselEmissionValues_particulate_unitType = ENUM(name='unitType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'UnitType')))
    __DieselEmissionValues_particulate_value = INT(name='value', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __DieselEmissionValues_particulate_value._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=32767)], ev=None, er=[])
    _DieselEmissionValues_particulate._cont = ASN1Dict([
        ('unitType', __DieselEmissionValues_particulate_unitType),
        ('value', __DieselEmissionValues_particulate_value),
        ])
    _DieselEmissionValues_particulate._ext = None
    _DieselEmissionValues_absorptionCoeff = INT(name='absorptionCoeff', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'Int2')))
    DieselEmissionValues._cont = ASN1Dict([
        ('particulate', _DieselEmissionValues_particulate),
        ('absorptionCoeff', _DieselEmissionValues_absorptionCoeff),
        ])
    DieselEmissionValues._ext = None
    
    #-----< EnvironmentalCharacteristics >-----#
    EnvironmentalCharacteristics = SEQ(name='EnvironmentalCharacteristics', mode=MODE_TYPE)
    _EnvironmentalCharacteristics_euroValue = ENUM(name='euroValue', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'EuroValue')))
    _EnvironmentalCharacteristics_copValue = ENUM(name='copValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'CopValue')))
    EnvironmentalCharacteristics._cont = ASN1Dict([
        ('euroValue', _EnvironmentalCharacteristics_euroValue),
        ('copValue', _EnvironmentalCharacteristics_copValue),
        ])
    EnvironmentalCharacteristics._ext = None
    
    #-----< EuroValue >-----#
    EuroValue = ENUM(name='EuroValue', mode=MODE_TYPE)
    EuroValue._cont = ASN1Dict([('noEntry', 0), ('euro-1', 1), ('euro-2', 2), ('euro-3', 3), ('euro-4', 4), ('euro-5', 5), ('euro-6', 6), ('reservedForUse1', 7), ('reservedForUse2', 8), ('reservedForUse3', 9), ('reservedForUse4', 10), ('reservedForUse5', 11), ('reservedForUse6', 12), ('reservedForUse7', 13), ('reservedForUse8', 14), ('eev', 15)])
    EuroValue._ext = None
    
    #-----< CopValue >-----#
    CopValue = ENUM(name='CopValue', mode=MODE_TYPE)
    CopValue._cont = ASN1Dict([('noEntry', 0), ('co2class1', 1), ('co2class2', 2), ('co2class3', 3), ('co2class4', 4), ('co2class5', 5), ('co2class6', 6), ('co2class7', 7), ('reservedforUse', 8)])
    CopValue._ext = None
    
    #-----< EngineCharacteristics >-----#
    EngineCharacteristics = INT(name='EngineCharacteristics', mode=MODE_TYPE)
    EngineCharacteristics._cont = ASN1Dict([('noEntry', 0), ('noEngine', 1), ('petrolUnleaded', 2), ('petrolLeaded', 3), ('diesel', 4), ('lPG', 5), ('battery', 6), ('solar', 7), ('hybrid', 8), ('hydrogen', 9)])
    EngineCharacteristics._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< ExhaustEmissionValues >-----#
    ExhaustEmissionValues = SEQ(name='ExhaustEmissionValues', mode=MODE_TYPE)
    _ExhaustEmissionValues_unitType = ENUM(name='unitType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'UnitType')))
    _ExhaustEmissionValues_emissionCO = INT(name='emissionCO', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ExhaustEmissionValues_emissionCO._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=32767)], ev=None, er=[])
    _ExhaustEmissionValues_emissionHC = INT(name='emissionHC', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'Int2')))
    _ExhaustEmissionValues_emissionNOX = INT(name='emissionNOX', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'Int2')))
    _ExhaustEmissionValues_emissionHCNOX = INT(name='emissionHCNOX', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'Int2')))
    ExhaustEmissionValues._cont = ASN1Dict([
        ('unitType', _ExhaustEmissionValues_unitType),
        ('emissionCO', _ExhaustEmissionValues_emissionCO),
        ('emissionHC', _ExhaustEmissionValues_emissionHC),
        ('emissionNOX', _ExhaustEmissionValues_emissionNOX),
        ('emissionHCNOX', _ExhaustEmissionValues_emissionHCNOX),
        ])
    ExhaustEmissionValues._ext = None
    
    #-----< Int1 >-----#
    Int1 = INT(name='Int1', mode=MODE_TYPE)
    Int1._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< Int2 >-----#
    Int2 = INT(name='Int2', mode=MODE_TYPE)
    Int2._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< PassengerCapacity >-----#
    PassengerCapacity = SEQ(name='PassengerCapacity', mode=MODE_TYPE)
    _PassengerCapacity_numberOfSeats = INT(name='numberOfSeats', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'Int1')))
    _PassengerCapacity_numberOfStandingPlaces = INT(name='numberOfStandingPlaces', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'Int1')))
    PassengerCapacity._cont = ASN1Dict([
        ('numberOfSeats', _PassengerCapacity_numberOfSeats),
        ('numberOfStandingPlaces', _PassengerCapacity_numberOfStandingPlaces),
        ])
    PassengerCapacity._ext = None
    
    #-----< Provider >-----#
    Provider = SEQ(name='Provider', mode=MODE_TYPE)
    _Provider_countryCode = BIT_STR(name='countryCode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AVIAEINumberingAndDataStructures', 'CountryCode')))
    _Provider_providerIdentifier = INT(name='providerIdentifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AVIAEINumberingAndDataStructures', 'IssuerIdentifier')))
    Provider._cont = ASN1Dict([
        ('countryCode', _Provider_countryCode),
        ('providerIdentifier', _Provider_providerIdentifier),
        ])
    Provider._ext = None
    
    #-----< SoundLevel >-----#
    SoundLevel = SEQ(name='SoundLevel', mode=MODE_TYPE)
    _SoundLevel_soundstationary = INT(name='soundstationary', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'Int1')))
    _SoundLevel_sounddriveby = INT(name='sounddriveby', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'Int1')))
    SoundLevel._cont = ASN1Dict([
        ('soundstationary', _SoundLevel_soundstationary),
        ('sounddriveby', _SoundLevel_sounddriveby),
        ])
    SoundLevel._ext = None
    
    #-----< UnitType >-----#
    UnitType = ENUM(name='UnitType', mode=MODE_TYPE)
    UnitType._cont = ASN1Dict([('mg-km', 0), ('mg-kWh', 1)])
    UnitType._ext = None
    
    #-----< VehicleDimensions >-----#
    VehicleDimensions = SEQ(name='VehicleDimensions', mode=MODE_TYPE)
    _VehicleDimensions_vehicleLengthOverall = INT(name='vehicleLengthOverall', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'Int1')))
    _VehicleDimensions_vehicleHeigthOverall = INT(name='vehicleHeigthOverall', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'Int1')))
    _VehicleDimensions_vehicleWidthOverall = INT(name='vehicleWidthOverall', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'Int1')))
    VehicleDimensions._cont = ASN1Dict([
        ('vehicleLengthOverall', _VehicleDimensions_vehicleLengthOverall),
        ('vehicleHeigthOverall', _VehicleDimensions_vehicleHeigthOverall),
        ('vehicleWidthOverall', _VehicleDimensions_vehicleWidthOverall),
        ])
    VehicleDimensions._ext = None
    
    #-----< VehicleWeightLimits >-----#
    VehicleWeightLimits = SEQ(name='VehicleWeightLimits', mode=MODE_TYPE)
    _VehicleWeightLimits_vehicleMaxLadenWeight = INT(name='vehicleMaxLadenWeight', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'Int2')))
    _VehicleWeightLimits_vehicleTrainMaximumWeight = INT(name='vehicleTrainMaximumWeight', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'Int2')))
    _VehicleWeightLimits_vehicleWeightUnladen = INT(name='vehicleWeightUnladen', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'Int2')))
    VehicleWeightLimits._cont = ASN1Dict([
        ('vehicleMaxLadenWeight', _VehicleWeightLimits_vehicleMaxLadenWeight),
        ('vehicleTrainMaximumWeight', _VehicleWeightLimits_vehicleTrainMaximumWeight),
        ('vehicleWeightUnladen', _VehicleWeightLimits_vehicleWeightUnladen),
        ])
    VehicleWeightLimits._ext = None
    
    _all_ = [
        _AxleWeightLimits_maxLadenweightOnAxle1,
        _AxleWeightLimits_maxLadenweightOnAxle2,
        _AxleWeightLimits_maxLadenweightOnAxle3,
        _AxleWeightLimits_maxLadenweightOnAxle4,
        _AxleWeightLimits_maxLadenweightOnAxle5,
        AxleWeightLimits,
        __DieselEmissionValues_particulate_unitType,
        __DieselEmissionValues_particulate_value,
        _DieselEmissionValues_particulate,
        _DieselEmissionValues_absorptionCoeff,
        DieselEmissionValues,
        _EnvironmentalCharacteristics_euroValue,
        _EnvironmentalCharacteristics_copValue,
        EnvironmentalCharacteristics,
        EuroValue,
        CopValue,
        EngineCharacteristics,
        _ExhaustEmissionValues_unitType,
        _ExhaustEmissionValues_emissionCO,
        _ExhaustEmissionValues_emissionHC,
        _ExhaustEmissionValues_emissionNOX,
        _ExhaustEmissionValues_emissionHCNOX,
        ExhaustEmissionValues,
        Int1,
        Int2,
        _PassengerCapacity_numberOfSeats,
        _PassengerCapacity_numberOfStandingPlaces,
        PassengerCapacity,
        _Provider_countryCode,
        _Provider_providerIdentifier,
        Provider,
        _SoundLevel_soundstationary,
        _SoundLevel_sounddriveby,
        SoundLevel,
        UnitType,
        _VehicleDimensions_vehicleLengthOverall,
        _VehicleDimensions_vehicleHeigthOverall,
        _VehicleDimensions_vehicleWidthOverall,
        VehicleDimensions,
        _VehicleWeightLimits_vehicleMaxLadenWeight,
        _VehicleWeightLimits_vehicleTrainMaximumWeight,
        _VehicleWeightLimits_vehicleWeightUnladen,
        VehicleWeightLimits,
    ]

class EfcDsrcGeneric:

    _name_  = 'EfcDsrcGeneric'
    _oid_   = [1, 0, 14906, 1, 5]
    
    _obj_ = [
        'AttributeIdList',
        'AttributeList',
        'Attributes',
        ]
    _type_ = [
        'AttributeIdList',
        'AttributeList',
        'Attributes',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        'AttributeList',
        'Attributes',
        ]
    
    #-----< AttributeIdList >-----#
    AttributeIdList = SEQ_OF(name='AttributeIdList', mode=MODE_TYPE)
    _AttributeIdList__item_ = INT(name='_item_', mode=MODE_TYPE)
    _AttributeIdList__item_._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    AttributeIdList._cont = _AttributeIdList__item_
    AttributeIdList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=[], er=[])
    
    #-----< AttributeList >-----#
    AttributeList = SEQ_OF(name='AttributeList', mode=MODE_TYPE, param=True)
    
    #-----< Attributes >-----#
    Attributes = SEQ(name='Attributes', mode=MODE_TYPE, param=True)
    
    _all_ = [
        _AttributeIdList__item_,
        AttributeIdList,
    ]

class AddGrpC:

    _name_  = 'AddGrpC'
    _oid_   = [1, 0, 19091, 2, 0, 1]
    
    _obj_ = [
        'ConnectionManeuverAssist-addGrpC',
        'ConnectionTrajectory-addGrpC',
        'Control-addGrpC',
        'IntersectionState-addGrpC',
        'MapData-addGrpC',
        'Position3D-addGrpC',
        'PrioritizationResponseList',
        'PrioritizationResponse',
        'RestrictionUserType-addGrpC',
        'SignalHeadLocationList',
        'SignalHeadLocation',
        'SignalStatusPackage-addGrpC',
        'ItsStationPositionList',
        'ItsStationPosition',
        'EmissionType',
        'PtvRequestType',
        'TimeReference',
        ]
    _type_ = [
        'ConnectionManeuverAssist-addGrpC',
        'ConnectionTrajectory-addGrpC',
        'Control-addGrpC',
        'IntersectionState-addGrpC',
        'MapData-addGrpC',
        'Position3D-addGrpC',
        'PrioritizationResponseList',
        'PrioritizationResponse',
        'RestrictionUserType-addGrpC',
        'SignalHeadLocationList',
        'SignalHeadLocation',
        'SignalStatusPackage-addGrpC',
        'ItsStationPositionList',
        'ItsStationPosition',
        'EmissionType',
        'PtvRequestType',
        'TimeReference',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< ConnectionManeuverAssist-addGrpC >-----#
    ConnectionManeuverAssist_addGrpC = SEQ(name='ConnectionManeuverAssist-addGrpC', mode=MODE_TYPE)
    _ConnectionManeuverAssist_addGrpC_itsStationPositions = SEQ_OF(name='itsStationPositions', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpC', 'ItsStationPositionList')), opt=True)
    _ConnectionManeuverAssist_addGrpC_rsuGNSSOffset = CHOICE(name='rsuGNSSOffset', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('DSRC', 'NodeOffsetPointXY')), opt=True)
    ConnectionManeuverAssist_addGrpC._cont = ASN1Dict([
        ('itsStationPositions', _ConnectionManeuverAssist_addGrpC_itsStationPositions),
        ('rsuGNSSOffset', _ConnectionManeuverAssist_addGrpC_rsuGNSSOffset),
        ])
    ConnectionManeuverAssist_addGrpC._ext = []
    
    #-----< ConnectionTrajectory-addGrpC >-----#
    ConnectionTrajectory_addGrpC = SEQ(name='ConnectionTrajectory-addGrpC', mode=MODE_TYPE)
    _ConnectionTrajectory_addGrpC_nodes = SEQ_OF(name='nodes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'NodeSetXY')))
    ConnectionTrajectory_addGrpC._cont = ASN1Dict([
        ('nodes', _ConnectionTrajectory_addGrpC_nodes),
        ])
    ConnectionTrajectory_addGrpC._ext = []
    
    #-----< Control-addGrpC >-----#
    Control_addGrpC = SEQ(name='Control-addGrpC', mode=MODE_TYPE)
    _Control_addGrpC_ptvRequest = ENUM(name='ptvRequest', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpC', 'PtvRequestType')))
    Control_addGrpC._cont = ASN1Dict([
        ('ptvRequest', _Control_addGrpC_ptvRequest),
        ])
    Control_addGrpC._ext = []
    
    #-----< IntersectionState-addGrpC >-----#
    IntersectionState_addGrpC = SEQ(name='IntersectionState-addGrpC', mode=MODE_TYPE)
    _IntersectionState_addGrpC_activePrioritizations = SEQ_OF(name='activePrioritizations', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpC', 'PrioritizationResponseList')), opt=True)
    IntersectionState_addGrpC._cont = ASN1Dict([
        ('activePrioritizations', _IntersectionState_addGrpC_activePrioritizations),
        ])
    IntersectionState_addGrpC._ext = []
    
    #-----< MapData-addGrpC >-----#
    MapData_addGrpC = SEQ(name='MapData-addGrpC', mode=MODE_TYPE)
    _MapData_addGrpC_signalHeadLocations = SEQ_OF(name='signalHeadLocations', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpC', 'SignalHeadLocationList')), opt=True)
    MapData_addGrpC._cont = ASN1Dict([
        ('signalHeadLocations', _MapData_addGrpC_signalHeadLocations),
        ])
    MapData_addGrpC._ext = []
    
    #-----< Position3D-addGrpC >-----#
    Position3D_addGrpC = SEQ(name='Position3D-addGrpC', mode=MODE_TYPE)
    _Position3D_addGrpC_altitude = SEQ(name='altitude', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Altitude')))
    Position3D_addGrpC._cont = ASN1Dict([
        ('altitude', _Position3D_addGrpC_altitude),
        ])
    Position3D_addGrpC._ext = []
    
    #-----< PrioritizationResponseList >-----#
    PrioritizationResponseList = SEQ_OF(name='PrioritizationResponseList', mode=MODE_TYPE)
    _PrioritizationResponseList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'PrioritizationResponse')))
    PrioritizationResponseList._cont = _PrioritizationResponseList__item_
    PrioritizationResponseList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=10)], ev=None, er=[])
    
    #-----< PrioritizationResponse >-----#
    PrioritizationResponse = SEQ(name='PrioritizationResponse', mode=MODE_TYPE)
    _PrioritizationResponse_stationID = INT(name='stationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'StationID')))
    _PrioritizationResponse_priorState = ENUM(name='priorState', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'PrioritizationResponseStatus')))
    _PrioritizationResponse_signalGroup = INT(name='signalGroup', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'SignalGroupID')))
    PrioritizationResponse._cont = ASN1Dict([
        ('stationID', _PrioritizationResponse_stationID),
        ('priorState', _PrioritizationResponse_priorState),
        ('signalGroup', _PrioritizationResponse_signalGroup),
        ])
    PrioritizationResponse._ext = []
    
    #-----< RestrictionUserType-addGrpC >-----#
    RestrictionUserType_addGrpC = SEQ(name='RestrictionUserType-addGrpC', mode=MODE_TYPE)
    _RestrictionUserType_addGrpC_emission = ENUM(name='emission', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpC', 'EmissionType')), opt=True)
    RestrictionUserType_addGrpC._cont = ASN1Dict([
        ('emission', _RestrictionUserType_addGrpC_emission),
        ])
    RestrictionUserType_addGrpC._ext = []
    
    #-----< SignalHeadLocationList >-----#
    SignalHeadLocationList = SEQ_OF(name='SignalHeadLocationList', mode=MODE_TYPE)
    _SignalHeadLocationList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'SignalHeadLocation')))
    SignalHeadLocationList._cont = _SignalHeadLocationList__item_
    SignalHeadLocationList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    
    #-----< SignalHeadLocation >-----#
    SignalHeadLocation = SEQ(name='SignalHeadLocation', mode=MODE_TYPE)
    _SignalHeadLocation_nodeXY = CHOICE(name='nodeXY', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('DSRC', 'NodeOffsetPointXY')))
    _SignalHeadLocation_nodeZ = INT(name='nodeZ', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'DeltaAltitude')))
    _SignalHeadLocation_signalGroupID = INT(name='signalGroupID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'SignalGroupID')))
    SignalHeadLocation._cont = ASN1Dict([
        ('nodeXY', _SignalHeadLocation_nodeXY),
        ('nodeZ', _SignalHeadLocation_nodeZ),
        ('signalGroupID', _SignalHeadLocation_signalGroupID),
        ])
    SignalHeadLocation._ext = []
    
    #-----< SignalStatusPackage-addGrpC >-----#
    SignalStatusPackage_addGrpC = SEQ(name='SignalStatusPackage-addGrpC', mode=MODE_TYPE)
    _SignalStatusPackage_addGrpC_synchToSchedule = INT(name='synchToSchedule', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DeltaTime')), opt=True)
    SignalStatusPackage_addGrpC._cont = ASN1Dict([
        ('synchToSchedule', _SignalStatusPackage_addGrpC_synchToSchedule),
        ])
    SignalStatusPackage_addGrpC._ext = []
    
    #-----< ItsStationPositionList >-----#
    ItsStationPositionList = SEQ_OF(name='ItsStationPositionList', mode=MODE_TYPE)
    _ItsStationPositionList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'ItsStationPosition')))
    ItsStationPositionList._cont = _ItsStationPositionList__item_
    ItsStationPositionList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=5)], ev=None, er=[])
    
    #-----< ItsStationPosition >-----#
    ItsStationPosition = SEQ(name='ItsStationPosition', mode=MODE_TYPE)
    _ItsStationPosition_stationID = INT(name='stationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'StationID')))
    _ItsStationPosition_laneID = INT(name='laneID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneID')), opt=True)
    _ItsStationPosition_nodeXY = CHOICE(name='nodeXY', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('DSRC', 'NodeOffsetPointXY')), opt=True)
    _ItsStationPosition_timeReference = INT(name='timeReference', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('AddGrpC', 'TimeReference')), opt=True)
    ItsStationPosition._cont = ASN1Dict([
        ('stationID', _ItsStationPosition_stationID),
        ('laneID', _ItsStationPosition_laneID),
        ('nodeXY', _ItsStationPosition_nodeXY),
        ('timeReference', _ItsStationPosition_timeReference),
        ])
    ItsStationPosition._ext = []
    
    #-----< EmissionType >-----#
    EmissionType = ENUM(name='EmissionType', mode=MODE_TYPE)
    EmissionType._cont = ASN1Dict([('euro1', 0), ('euro2', 1), ('euro3', 2), ('euro4', 3), ('euro5', 4), ('euro6', 5)])
    EmissionType._ext = []
    
    #-----< PtvRequestType >-----#
    PtvRequestType = ENUM(name='PtvRequestType', mode=MODE_TYPE)
    PtvRequestType._cont = ASN1Dict([('preRequest', 0), ('mainRequest', 1), ('doorCloseRequest', 2), ('cancelRequest', 3), ('emergencyRequest', 4)])
    PtvRequestType._ext = []
    
    #-----< TimeReference >-----#
    TimeReference = INT(name='TimeReference', mode=MODE_TYPE)
    TimeReference._cont = ASN1Dict([('oneMilliSec', 1)])
    TimeReference._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    _all_ = [
        _ConnectionManeuverAssist_addGrpC_itsStationPositions,
        _ConnectionManeuverAssist_addGrpC_rsuGNSSOffset,
        ConnectionManeuverAssist_addGrpC,
        _ConnectionTrajectory_addGrpC_nodes,
        ConnectionTrajectory_addGrpC,
        _Control_addGrpC_ptvRequest,
        Control_addGrpC,
        _IntersectionState_addGrpC_activePrioritizations,
        IntersectionState_addGrpC,
        _MapData_addGrpC_signalHeadLocations,
        MapData_addGrpC,
        _Position3D_addGrpC_altitude,
        Position3D_addGrpC,
        _PrioritizationResponseList__item_,
        PrioritizationResponseList,
        _PrioritizationResponse_stationID,
        _PrioritizationResponse_priorState,
        _PrioritizationResponse_signalGroup,
        PrioritizationResponse,
        _RestrictionUserType_addGrpC_emission,
        RestrictionUserType_addGrpC,
        _SignalHeadLocationList__item_,
        SignalHeadLocationList,
        _SignalHeadLocation_nodeXY,
        _SignalHeadLocation_nodeZ,
        _SignalHeadLocation_signalGroupID,
        SignalHeadLocation,
        _SignalStatusPackage_addGrpC_synchToSchedule,
        SignalStatusPackage_addGrpC,
        _ItsStationPositionList__item_,
        ItsStationPositionList,
        _ItsStationPosition_stationID,
        _ItsStationPosition_laneID,
        _ItsStationPosition_nodeXY,
        _ItsStationPosition_timeReference,
        ItsStationPosition,
        EmissionType,
        PtvRequestType,
        TimeReference,
    ]

class REGION:

    _name_  = 'REGION'
    _oid_   = [1, 0, 19091, 2, 1, 1]
    
    _obj_ = [
        'Reg-AdvisorySpeed',
        'Reg-ComputedLane',
        'Reg-ConnectionManeuverAssist',
        'Reg-GenericLane',
        'Reg-IntersectionGeometry',
        'Reg-IntersectionState',
        'Reg-LaneAttributes',
        'Reg-LaneDataAttribute',
        'Reg-MapData',
        'Reg-MovementEvent',
        'Reg-MovementState',
        'Reg-NodeAttributeSetLL',
        'Reg-NodeAttributeSetXY',
        'Reg-NodeOffsetPointLL',
        'Reg-NodeOffsetPointXY',
        'Reg-Position3D',
        'Reg-RequestorDescription',
        'Reg-RequestorType',
        'Reg-RestrictionUserType',
        'Reg-RoadSegment',
        'Reg-SignalControlZone',
        'Reg-SignalRequest',
        'Reg-SignalRequestMessage',
        'Reg-SignalRequestPackage',
        'Reg-SignalStatus',
        'Reg-SignalStatusMessage',
        'Reg-SignalStatusPackage',
        'Reg-SPAT',
        ]
    _type_ = [
        ]
    _set_ = [
        'Reg-AdvisorySpeed',
        'Reg-ComputedLane',
        'Reg-ConnectionManeuverAssist',
        'Reg-GenericLane',
        'Reg-IntersectionGeometry',
        'Reg-IntersectionState',
        'Reg-LaneAttributes',
        'Reg-LaneDataAttribute',
        'Reg-MapData',
        'Reg-MovementEvent',
        'Reg-MovementState',
        'Reg-NodeAttributeSetLL',
        'Reg-NodeAttributeSetXY',
        'Reg-NodeOffsetPointLL',
        'Reg-NodeOffsetPointXY',
        'Reg-Position3D',
        'Reg-RequestorDescription',
        'Reg-RequestorType',
        'Reg-RestrictionUserType',
        'Reg-RoadSegment',
        'Reg-SignalControlZone',
        'Reg-SignalRequest',
        'Reg-SignalRequestMessage',
        'Reg-SignalRequestPackage',
        'Reg-SignalStatus',
        'Reg-SignalStatusMessage',
        'Reg-SignalStatusPackage',
        'Reg-SPAT',
        ]
    _val_ = [
        ]
    _class_ = [
        'Reg-AdvisorySpeed',
        'Reg-ComputedLane',
        'Reg-ConnectionManeuverAssist',
        'Reg-GenericLane',
        'Reg-IntersectionGeometry',
        'Reg-IntersectionState',
        'Reg-LaneAttributes',
        'Reg-LaneDataAttribute',
        'Reg-MapData',
        'Reg-MovementEvent',
        'Reg-MovementState',
        'Reg-NodeAttributeSetLL',
        'Reg-NodeAttributeSetXY',
        'Reg-NodeOffsetPointLL',
        'Reg-NodeOffsetPointXY',
        'Reg-Position3D',
        'Reg-RequestorDescription',
        'Reg-RequestorType',
        'Reg-RestrictionUserType',
        'Reg-RoadSegment',
        'Reg-SignalControlZone',
        'Reg-SignalRequest',
        'Reg-SignalRequestMessage',
        'Reg-SignalRequestPackage',
        'Reg-SignalStatus',
        'Reg-SignalStatusMessage',
        'Reg-SignalStatusPackage',
        'Reg-SPAT',
        ]
    _param_ = [
        ]
    
    #-----< Reg-AdvisorySpeed >-----#
    Reg_AdvisorySpeed = CLASS(name='Reg-AdvisorySpeed', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    Reg_AdvisorySpeed._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-ComputedLane >-----#
    Reg_ComputedLane = CLASS(name='Reg-ComputedLane', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    Reg_ComputedLane._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-ConnectionManeuverAssist >-----#
    Reg_ConnectionManeuverAssist = CLASS(name='Reg-ConnectionManeuverAssist', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    _Reg_ConnectionManeuverAssist_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'ConnectionManeuverAssist-addGrpC')))
    Reg_ConnectionManeuverAssist._val = ASN1Set(rv=[dict([('Type', _Reg_ConnectionManeuverAssist_val_Type_0), ('id', 3)])], rr=[], ev=[], er=[])
    
    #-----< Reg-GenericLane >-----#
    Reg_GenericLane = CLASS(name='Reg-GenericLane', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    _Reg_GenericLane_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'ConnectionTrajectory-addGrpC')))
    Reg_GenericLane._val = ASN1Set(rv=[dict([('Type', _Reg_GenericLane_val_Type_0), ('id', 3)])], rr=[], ev=[], er=[])
    
    #-----< Reg-IntersectionGeometry >-----#
    Reg_IntersectionGeometry = CLASS(name='Reg-IntersectionGeometry', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    Reg_IntersectionGeometry._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-IntersectionState >-----#
    Reg_IntersectionState = CLASS(name='Reg-IntersectionState', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    _Reg_IntersectionState_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'IntersectionState-addGrpC')))
    Reg_IntersectionState._val = ASN1Set(rv=[dict([('Type', _Reg_IntersectionState_val_Type_0), ('id', 3)])], rr=[], ev=[], er=[])
    
    #-----< Reg-LaneAttributes >-----#
    Reg_LaneAttributes = CLASS(name='Reg-LaneAttributes', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    Reg_LaneAttributes._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-LaneDataAttribute >-----#
    Reg_LaneDataAttribute = CLASS(name='Reg-LaneDataAttribute', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    Reg_LaneDataAttribute._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-MapData >-----#
    Reg_MapData = CLASS(name='Reg-MapData', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    _Reg_MapData_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'MapData-addGrpC')))
    Reg_MapData._val = ASN1Set(rv=[dict([('Type', _Reg_MapData_val_Type_0), ('id', 3)])], rr=[], ev=[], er=[])
    
    #-----< Reg-MovementEvent >-----#
    Reg_MovementEvent = CLASS(name='Reg-MovementEvent', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    Reg_MovementEvent._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-MovementState >-----#
    Reg_MovementState = CLASS(name='Reg-MovementState', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    Reg_MovementState._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-NodeAttributeSetLL >-----#
    Reg_NodeAttributeSetLL = CLASS(name='Reg-NodeAttributeSetLL', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    Reg_NodeAttributeSetLL._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-NodeAttributeSetXY >-----#
    Reg_NodeAttributeSetXY = CLASS(name='Reg-NodeAttributeSetXY', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    _Reg_NodeAttributeSetXY_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'Control-addGrpC')))
    Reg_NodeAttributeSetXY._val = ASN1Set(rv=[dict([('Type', _Reg_NodeAttributeSetXY_val_Type_0), ('id', 3)])], rr=[], ev=[], er=[])
    
    #-----< Reg-NodeOffsetPointLL >-----#
    Reg_NodeOffsetPointLL = CLASS(name='Reg-NodeOffsetPointLL', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    Reg_NodeOffsetPointLL._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-NodeOffsetPointXY >-----#
    Reg_NodeOffsetPointXY = CLASS(name='Reg-NodeOffsetPointXY', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    Reg_NodeOffsetPointXY._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-Position3D >-----#
    Reg_Position3D = CLASS(name='Reg-Position3D', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    _Reg_Position3D_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'Position3D-addGrpC')))
    Reg_Position3D._val = ASN1Set(rv=[dict([('Type', _Reg_Position3D_val_Type_0), ('id', 3)])], rr=[], ev=[], er=[])
    
    #-----< Reg-RequestorDescription >-----#
    Reg_RequestorDescription = CLASS(name='Reg-RequestorDescription', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    Reg_RequestorDescription._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-RequestorType >-----#
    Reg_RequestorType = CLASS(name='Reg-RequestorType', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    Reg_RequestorType._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-RestrictionUserType >-----#
    Reg_RestrictionUserType = CLASS(name='Reg-RestrictionUserType', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    _Reg_RestrictionUserType_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'RestrictionUserType-addGrpC')))
    Reg_RestrictionUserType._val = ASN1Set(rv=[dict([('Type', _Reg_RestrictionUserType_val_Type_0), ('id', 3)])], rr=[], ev=[], er=[])
    
    #-----< Reg-RoadSegment >-----#
    Reg_RoadSegment = CLASS(name='Reg-RoadSegment', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    Reg_RoadSegment._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-SignalControlZone >-----#
    Reg_SignalControlZone = CLASS(name='Reg-SignalControlZone', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    Reg_SignalControlZone._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-SignalRequest >-----#
    Reg_SignalRequest = CLASS(name='Reg-SignalRequest', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    Reg_SignalRequest._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-SignalRequestMessage >-----#
    Reg_SignalRequestMessage = CLASS(name='Reg-SignalRequestMessage', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    Reg_SignalRequestMessage._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-SignalRequestPackage >-----#
    Reg_SignalRequestPackage = CLASS(name='Reg-SignalRequestPackage', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    Reg_SignalRequestPackage._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-SignalStatus >-----#
    Reg_SignalStatus = CLASS(name='Reg-SignalStatus', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    Reg_SignalStatus._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-SignalStatusMessage >-----#
    Reg_SignalStatusMessage = CLASS(name='Reg-SignalStatusMessage', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    Reg_SignalStatusMessage._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    #-----< Reg-SignalStatusPackage >-----#
    Reg_SignalStatusPackage = CLASS(name='Reg-SignalStatusPackage', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    _Reg_SignalStatusPackage_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'SignalStatusPackage-addGrpC')))
    Reg_SignalStatusPackage._val = ASN1Set(rv=[dict([('Type', _Reg_SignalStatusPackage_val_Type_0), ('id', 3)])], rr=[], ev=[], er=[])
    
    #-----< Reg-SPAT >-----#
    Reg_SPAT = CLASS(name='Reg-SPAT', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    Reg_SPAT._val = ASN1Set(rv=[], rr=[], ev=[], er=[])
    
    _all_ = [
        Reg_AdvisorySpeed,
        Reg_ComputedLane,
        Reg_ConnectionManeuverAssist,
        _Reg_ConnectionManeuverAssist_val_Type_0,
        Reg_GenericLane,
        _Reg_GenericLane_val_Type_0,
        Reg_IntersectionGeometry,
        Reg_IntersectionState,
        _Reg_IntersectionState_val_Type_0,
        Reg_LaneAttributes,
        Reg_LaneDataAttribute,
        Reg_MapData,
        _Reg_MapData_val_Type_0,
        Reg_MovementEvent,
        Reg_MovementState,
        Reg_NodeAttributeSetLL,
        Reg_NodeAttributeSetXY,
        _Reg_NodeAttributeSetXY_val_Type_0,
        Reg_NodeOffsetPointLL,
        Reg_NodeOffsetPointXY,
        Reg_Position3D,
        _Reg_Position3D_val_Type_0,
        Reg_RequestorDescription,
        Reg_RequestorType,
        Reg_RestrictionUserType,
        _Reg_RestrictionUserType_val_Type_0,
        Reg_RoadSegment,
        Reg_SignalControlZone,
        Reg_SignalRequest,
        Reg_SignalRequestMessage,
        Reg_SignalRequestPackage,
        Reg_SignalStatus,
        Reg_SignalStatusMessage,
        Reg_SignalStatusPackage,
        _Reg_SignalStatusPackage_val_Type_0,
        Reg_SPAT,
    ]

class DSRC:

    _name_  = 'DSRC'
    _oid_   = [1, 0, 19091, 2, 2, 1]
    
    _obj_ = [
        'MessageFrame',
        'MESSAGE-ID-AND-TYPE',
        'MessageTypes',
        'REG-EXT-ID-AND-TYPE',
        'RegionalExtension',
        'SPAT',
        'SignalRequestMessage',
        'SignalStatusMessage',
        'MapData',
        'AdvisorySpeed',
        'AdvisorySpeedList',
        'ComputedLane',
        'ConnectsToList',
        'ConnectingLane',
        'Connection',
        'ConnectionManeuverAssist',
        'DataParameters',
        'EnabledLaneList',
        'GenericLane',
        'IntersectionAccessPoint',
        'IntersectionGeometry',
        'IntersectionGeometryList',
        'IntersectionReferenceID',
        'IntersectionState',
        'IntersectionStateList',
        'LaneAttributes',
        'LaneDataAttribute',
        'LaneDataAttributeList',
        'LaneList',
        'LaneSharing',
        'LaneTypeAttributes',
        'ManeuverAssistList',
        'MovementEventList',
        'MovementEvent',
        'MovementList',
        'MovementState',
        'NodeAttributeSetXY',
        'NodeAttributeXYList',
        'NodeAttributeXY',
        'Node-LLmD-64b',
        'Node-XY-20b',
        'Node-XY-22b',
        'Node-XY-24b',
        'Node-XY-26b',
        'Node-XY-28b',
        'Node-XY-32b',
        'NodeListXY',
        'NodeOffsetPointXY',
        'NodeSetXY',
        'NodeXY',
        'OverlayLaneList',
        'Position3D',
        'PreemptPriorityList',
        'RegulatorySpeedLimit',
        'RequestorDescription',
        'RequestorPositionVector',
        'RequestorType',
        'RestrictionClassAssignment',
        'RestrictionClassList',
        'RestrictionUserTypeList',
        'RestrictionUserType',
        'RoadLaneSetList',
        'RoadSegmentReferenceID',
        'RoadSegment',
        'RoadSegmentList',
        'SegmentAttributeXYList',
        'SignalControlZone',
        'SignalRequesterInfo',
        'SignalRequestList',
        'SignalRequestPackage',
        'SignalRequest',
        'SignalStatusList',
        'SignalStatusPackageList',
        'SignalStatusPackage',
        'SignalStatus',
        'SpeedLimitList',
        'SpeedLimitType',
        'TimeChangeDetails',
        'TimeMark',
        'TransmissionAndSpeed',
        'VehicleID',
        'AdvisorySpeedType',
        'AllowedManeuvers',
        'Angle',
        'ApproachID',
        'BasicVehicleRole',
        'DeltaAngle',
        'DeltaTime',
        'DescriptiveName',
        'DrivenLineOffsetLg',
        'DrivenLineOffsetSm',
        'DSecond',
        'DSRCmsgID',
        'mapData',
        'signalPhaseAndTimingMessage',
        'signalRequestMessage',
        'signalStatusMessage',
        'Elevation',
        'IntersectionID',
        'IntersectionStatusObject',
        'LaneAttributes-Barrier',
        'LaneAttributes-Bike',
        'LaneAttributes-Crosswalk',
        'LaneAttributes-Parking',
        'LaneAttributes-Sidewalk',
        'LaneAttributes-Striping',
        'LaneAttributes-TrackedVehicle',
        'LaneAttributes-Vehicle',
        'LaneConnectionID',
        'LaneDirection',
        'LaneID',
        'LayerID',
        'LayerType',
        'LaneWidth',
        'MergeDivergeNodeAngle',
        'MinuteOfTheYear',
        'MovementPhaseState',
        'MsgCount',
        'Offset-B10',
        'Offset-B11',
        'Offset-B12',
        'Offset-B13',
        'Offset-B14',
        'Offset-B16',
        'PedestrianBicycleDetect',
        'PrioritizationResponseStatus',
        'PriorityRequestType',
        'RegionId',
        'noRegion',
        'addGrpA',
        'addGrpB',
        'addGrpC',
        'RequestID',
        'RequestImportanceLevel',
        'RequestSubRole',
        'RestrictionAppliesTo',
        'RestrictionClassID',
        'RoadRegulatorID',
        'RoadSegmentID',
        'RoadwayCrownAngle',
        'Scale-B12',
        'SignalGroupID',
        'SegmentAttributeXY',
        'SpeedAdvice',
        'TemporaryID',
        'TimeIntervalConfidence',
        'TransitVehicleOccupancy',
        'TransitVehicleStatus',
        'TransmissionState',
        'VehicleType',
        'Velocity',
        'WaitOnStopline',
        'ZoneLength',
        ]
    _type_ = [
        'MessageFrame',
        'MESSAGE-ID-AND-TYPE',
        'REG-EXT-ID-AND-TYPE',
        'RegionalExtension',
        'SPAT',
        'SignalRequestMessage',
        'SignalStatusMessage',
        'MapData',
        'AdvisorySpeed',
        'AdvisorySpeedList',
        'ComputedLane',
        'ConnectsToList',
        'ConnectingLane',
        'Connection',
        'ConnectionManeuverAssist',
        'DataParameters',
        'EnabledLaneList',
        'GenericLane',
        'IntersectionAccessPoint',
        'IntersectionGeometry',
        'IntersectionGeometryList',
        'IntersectionReferenceID',
        'IntersectionState',
        'IntersectionStateList',
        'LaneAttributes',
        'LaneDataAttribute',
        'LaneDataAttributeList',
        'LaneList',
        'LaneSharing',
        'LaneTypeAttributes',
        'ManeuverAssistList',
        'MovementEventList',
        'MovementEvent',
        'MovementList',
        'MovementState',
        'NodeAttributeSetXY',
        'NodeAttributeXYList',
        'NodeAttributeXY',
        'Node-LLmD-64b',
        'Node-XY-20b',
        'Node-XY-22b',
        'Node-XY-24b',
        'Node-XY-26b',
        'Node-XY-28b',
        'Node-XY-32b',
        'NodeListXY',
        'NodeOffsetPointXY',
        'NodeSetXY',
        'NodeXY',
        'OverlayLaneList',
        'Position3D',
        'PreemptPriorityList',
        'RegulatorySpeedLimit',
        'RequestorDescription',
        'RequestorPositionVector',
        'RequestorType',
        'RestrictionClassAssignment',
        'RestrictionClassList',
        'RestrictionUserTypeList',
        'RestrictionUserType',
        'RoadLaneSetList',
        'RoadSegmentReferenceID',
        'RoadSegment',
        'RoadSegmentList',
        'SegmentAttributeXYList',
        'SignalControlZone',
        'SignalRequesterInfo',
        'SignalRequestList',
        'SignalRequestPackage',
        'SignalRequest',
        'SignalStatusList',
        'SignalStatusPackageList',
        'SignalStatusPackage',
        'SignalStatus',
        'SpeedLimitList',
        'SpeedLimitType',
        'TimeChangeDetails',
        'TimeMark',
        'TransmissionAndSpeed',
        'VehicleID',
        'AdvisorySpeedType',
        'AllowedManeuvers',
        'Angle',
        'ApproachID',
        'BasicVehicleRole',
        'DeltaAngle',
        'DeltaTime',
        'DescriptiveName',
        'DrivenLineOffsetLg',
        'DrivenLineOffsetSm',
        'DSecond',
        'DSRCmsgID',
        'Elevation',
        'IntersectionID',
        'IntersectionStatusObject',
        'LaneAttributes-Barrier',
        'LaneAttributes-Bike',
        'LaneAttributes-Crosswalk',
        'LaneAttributes-Parking',
        'LaneAttributes-Sidewalk',
        'LaneAttributes-Striping',
        'LaneAttributes-TrackedVehicle',
        'LaneAttributes-Vehicle',
        'LaneConnectionID',
        'LaneDirection',
        'LaneID',
        'LayerID',
        'LayerType',
        'LaneWidth',
        'MergeDivergeNodeAngle',
        'MinuteOfTheYear',
        'MovementPhaseState',
        'MsgCount',
        'Offset-B10',
        'Offset-B11',
        'Offset-B12',
        'Offset-B13',
        'Offset-B14',
        'Offset-B16',
        'PedestrianBicycleDetect',
        'PrioritizationResponseStatus',
        'PriorityRequestType',
        'RegionId',
        'RequestID',
        'RequestImportanceLevel',
        'RequestSubRole',
        'RestrictionAppliesTo',
        'RestrictionClassID',
        'RoadRegulatorID',
        'RoadSegmentID',
        'RoadwayCrownAngle',
        'Scale-B12',
        'SignalGroupID',
        'SegmentAttributeXY',
        'SpeedAdvice',
        'TemporaryID',
        'TimeIntervalConfidence',
        'TransitVehicleOccupancy',
        'TransitVehicleStatus',
        'TransmissionState',
        'VehicleType',
        'Velocity',
        'WaitOnStopline',
        'ZoneLength',
        ]
    _set_ = [
        'MessageTypes',
        ]
    _val_ = [
        'mapData',
        'signalPhaseAndTimingMessage',
        'signalRequestMessage',
        'signalStatusMessage',
        'noRegion',
        'addGrpA',
        'addGrpB',
        'addGrpC',
        ]
    _class_ = [
        'MESSAGE-ID-AND-TYPE',
        'MessageTypes',
        'REG-EXT-ID-AND-TYPE',
        ]
    _param_ = [
        'RegionalExtension',
        ]
    
    #-----< MessageFrame >-----#
    MessageFrame = SEQ(name='MessageFrame', mode=MODE_TYPE)
    _MessageFrame_messageId = INT(name='messageId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'MESSAGE-ID-AND-TYPE'), ['id']))
    __MessageFrame_messageId_tab = CLASS(name='_tab_MESSAGE-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'MESSAGE-ID-AND-TYPE')))
    ___MessageFrame_messageId_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'MapData')))
    ___MessageFrame_messageId_tab_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'SPAT')))
    ___MessageFrame_messageId_tab_val_Type_2 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'SignalRequestMessage')))
    ___MessageFrame_messageId_tab_val_Type_3 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'SignalStatusMessage')))
    __MessageFrame_messageId_tab._val = ASN1Set(rv=[dict([('Type', ___MessageFrame_messageId_tab_val_Type_0), ('id', 18)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_1), ('id', 19)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_2), ('id', 29)]), dict([('Type', ___MessageFrame_messageId_tab_val_Type_3), ('id', 30)])], rr=[], ev=None, er=[])
    _MessageFrame_messageId._const_tab = __MessageFrame_messageId_tab
    _MessageFrame_messageId._const_tab_at = None
    _MessageFrame_messageId._const_tab_id = 'id'
    _MessageFrame_value = OPEN(name='value', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'MESSAGE-ID-AND-TYPE'), ['Type']))
    _MessageFrame_value._const_tab = __MessageFrame_messageId_tab
    _MessageFrame_value._const_tab_at = ('..', 'messageId')
    _MessageFrame_value._const_tab_id = 'Type'
    MessageFrame._cont = ASN1Dict([
        ('messageId', _MessageFrame_messageId),
        ('value', _MessageFrame_value),
        ])
    MessageFrame._ext = []
    
    #-----< MESSAGE-ID-AND-TYPE >-----#
    MESSAGE_ID_AND_TYPE = CLASS(name='MESSAGE-ID-AND-TYPE', mode=MODE_TYPE)
    _MESSAGE_ID_AND_TYPE_id = INT(name='id', mode=MODE_VALUE, typeref=ASN1RefType(('DSRC', 'DSRCmsgID')), uniq=True)
    _MESSAGE_ID_AND_TYPE_Type = OPEN(name='Type', mode=MODE_TYPE)
    MESSAGE_ID_AND_TYPE._cont = ASN1Dict([
        ('id', _MESSAGE_ID_AND_TYPE_id),
        ('Type', _MESSAGE_ID_AND_TYPE_Type),
        ])
    
    #-----< MessageTypes >-----#
    MessageTypes = CLASS(name='MessageTypes', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'MESSAGE-ID-AND-TYPE')))
    _MessageTypes_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'MapData')))
    _MessageTypes_val_Type_1 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'SPAT')))
    _MessageTypes_val_Type_2 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'SignalRequestMessage')))
    _MessageTypes_val_Type_3 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'SignalStatusMessage')))
    MessageTypes._val = ASN1Set(rv=[dict([('Type', _MessageTypes_val_Type_0), ('id', 18)]), dict([('Type', _MessageTypes_val_Type_1), ('id', 19)]), dict([('Type', _MessageTypes_val_Type_2), ('id', 29)]), dict([('Type', _MessageTypes_val_Type_3), ('id', 30)])], rr=[], ev=[], er=[])
    
    #-----< REG-EXT-ID-AND-TYPE >-----#
    REG_EXT_ID_AND_TYPE = CLASS(name='REG-EXT-ID-AND-TYPE', mode=MODE_TYPE)
    _REG_EXT_ID_AND_TYPE_id = INT(name='id', mode=MODE_VALUE, typeref=ASN1RefType(('DSRC', 'RegionId')), uniq=True)
    _REG_EXT_ID_AND_TYPE_Type = OPEN(name='Type', mode=MODE_TYPE)
    REG_EXT_ID_AND_TYPE._cont = ASN1Dict([
        ('id', _REG_EXT_ID_AND_TYPE_id),
        ('Type', _REG_EXT_ID_AND_TYPE_Type),
        ])
    
    #-----< RegionalExtension >-----#
    RegionalExtension = SEQ(name='RegionalExtension', mode=MODE_TYPE, param=True)
    
    #-----< SPAT >-----#
    SPAT = SEQ(name='SPAT', mode=MODE_TYPE)
    _SPAT_timeStamp = INT(name='timeStamp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'MinuteOfTheYear')), opt=True)
    _SPAT_name = STR_IA5(name='name', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DescriptiveName')), opt=True)
    _SPAT_intersections = SEQ_OF(name='intersections', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'IntersectionStateList')))
    _SPAT_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SPAT_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    ___SPAT_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____SPAT_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____SPAT_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SPAT_regional__item__regionId._const_tab = ____SPAT_regional__item__regionId_tab
    ___SPAT_regional__item__regionId._const_tab_at = None
    ___SPAT_regional__item__regionId._const_tab_id = 'id'
    ___SPAT_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____SPAT_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____SPAT_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SPAT_regional__item__regExtValue._const_tab = ____SPAT_regional__item__regExtValue_tab
    ___SPAT_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___SPAT_regional__item__regExtValue._const_tab_id = 'Type'
    __SPAT_regional__item_._cont = ASN1Dict([
        ('regionId', ___SPAT_regional__item__regionId),
        ('regExtValue', ___SPAT_regional__item__regExtValue),
        ])
    __SPAT_regional__item_._ext = None
    _SPAT_regional._cont = __SPAT_regional__item_
    _SPAT_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    SPAT._cont = ASN1Dict([
        ('timeStamp', _SPAT_timeStamp),
        ('name', _SPAT_name),
        ('intersections', _SPAT_intersections),
        ('regional', _SPAT_regional),
        ])
    SPAT._ext = []
    
    #-----< SignalRequestMessage >-----#
    SignalRequestMessage = SEQ(name='SignalRequestMessage', mode=MODE_TYPE)
    _SignalRequestMessage_timeStamp = INT(name='timeStamp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'MinuteOfTheYear')), opt=True)
    _SignalRequestMessage_second = INT(name='second', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DSecond')))
    _SignalRequestMessage_sequenceNumber = INT(name='sequenceNumber', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'MsgCount')), opt=True)
    _SignalRequestMessage_requests = SEQ_OF(name='requests', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'SignalRequestList')), opt=True)
    _SignalRequestMessage_requestor = SEQ(name='requestor', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RequestorDescription')))
    _SignalRequestMessage_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SignalRequestMessage_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    ___SignalRequestMessage_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____SignalRequestMessage_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____SignalRequestMessage_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SignalRequestMessage_regional__item__regionId._const_tab = ____SignalRequestMessage_regional__item__regionId_tab
    ___SignalRequestMessage_regional__item__regionId._const_tab_at = None
    ___SignalRequestMessage_regional__item__regionId._const_tab_id = 'id'
    ___SignalRequestMessage_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____SignalRequestMessage_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____SignalRequestMessage_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SignalRequestMessage_regional__item__regExtValue._const_tab = ____SignalRequestMessage_regional__item__regExtValue_tab
    ___SignalRequestMessage_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___SignalRequestMessage_regional__item__regExtValue._const_tab_id = 'Type'
    __SignalRequestMessage_regional__item_._cont = ASN1Dict([
        ('regionId', ___SignalRequestMessage_regional__item__regionId),
        ('regExtValue', ___SignalRequestMessage_regional__item__regExtValue),
        ])
    __SignalRequestMessage_regional__item_._ext = None
    _SignalRequestMessage_regional._cont = __SignalRequestMessage_regional__item_
    _SignalRequestMessage_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    SignalRequestMessage._cont = ASN1Dict([
        ('timeStamp', _SignalRequestMessage_timeStamp),
        ('second', _SignalRequestMessage_second),
        ('sequenceNumber', _SignalRequestMessage_sequenceNumber),
        ('requests', _SignalRequestMessage_requests),
        ('requestor', _SignalRequestMessage_requestor),
        ('regional', _SignalRequestMessage_regional),
        ])
    SignalRequestMessage._ext = []
    
    #-----< SignalStatusMessage >-----#
    SignalStatusMessage = SEQ(name='SignalStatusMessage', mode=MODE_TYPE)
    _SignalStatusMessage_timeStamp = INT(name='timeStamp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'MinuteOfTheYear')), opt=True)
    _SignalStatusMessage_second = INT(name='second', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DSecond')))
    _SignalStatusMessage_sequenceNumber = INT(name='sequenceNumber', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'MsgCount')), opt=True)
    _SignalStatusMessage_status = SEQ_OF(name='status', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'SignalStatusList')))
    _SignalStatusMessage_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SignalStatusMessage_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    ___SignalStatusMessage_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____SignalStatusMessage_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____SignalStatusMessage_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SignalStatusMessage_regional__item__regionId._const_tab = ____SignalStatusMessage_regional__item__regionId_tab
    ___SignalStatusMessage_regional__item__regionId._const_tab_at = None
    ___SignalStatusMessage_regional__item__regionId._const_tab_id = 'id'
    ___SignalStatusMessage_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____SignalStatusMessage_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____SignalStatusMessage_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SignalStatusMessage_regional__item__regExtValue._const_tab = ____SignalStatusMessage_regional__item__regExtValue_tab
    ___SignalStatusMessage_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___SignalStatusMessage_regional__item__regExtValue._const_tab_id = 'Type'
    __SignalStatusMessage_regional__item_._cont = ASN1Dict([
        ('regionId', ___SignalStatusMessage_regional__item__regionId),
        ('regExtValue', ___SignalStatusMessage_regional__item__regExtValue),
        ])
    __SignalStatusMessage_regional__item_._ext = None
    _SignalStatusMessage_regional._cont = __SignalStatusMessage_regional__item_
    _SignalStatusMessage_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    SignalStatusMessage._cont = ASN1Dict([
        ('timeStamp', _SignalStatusMessage_timeStamp),
        ('second', _SignalStatusMessage_second),
        ('sequenceNumber', _SignalStatusMessage_sequenceNumber),
        ('status', _SignalStatusMessage_status),
        ('regional', _SignalStatusMessage_regional),
        ])
    SignalStatusMessage._ext = []
    
    #-----< MapData >-----#
    MapData = SEQ(name='MapData', mode=MODE_TYPE)
    _MapData_timeStamp = INT(name='timeStamp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'MinuteOfTheYear')), opt=True)
    _MapData_msgIssueRevision = INT(name='msgIssueRevision', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'MsgCount')))
    _MapData_layerType = ENUM(name='layerType', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LayerType')), opt=True)
    _MapData_layerID = INT(name='layerID', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LayerID')), opt=True)
    _MapData_intersections = SEQ_OF(name='intersections', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'IntersectionGeometryList')), opt=True)
    _MapData_roadSegments = SEQ_OF(name='roadSegments', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RoadSegmentList')), opt=True)
    _MapData_dataParameters = SEQ(name='dataParameters', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DataParameters')), opt=True)
    _MapData_restrictionList = SEQ_OF(name='restrictionList', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RestrictionClassList')), opt=True)
    _MapData_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __MapData_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    ___MapData_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____MapData_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    _____MapData_regional__item__regionId_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'MapData-addGrpC')))
    ____MapData_regional__item__regionId_tab._val = ASN1Set(rv=[dict([('Type', _____MapData_regional__item__regionId_tab_val_Type_0), ('id', 3)])], rr=[], ev=None, er=[])
    ___MapData_regional__item__regionId._const_tab = ____MapData_regional__item__regionId_tab
    ___MapData_regional__item__regionId._const_tab_at = None
    ___MapData_regional__item__regionId._const_tab_id = 'id'
    ___MapData_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___MapData_regional__item__regExtValue._const_tab = ____MapData_regional__item__regionId_tab
    ___MapData_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___MapData_regional__item__regExtValue._const_tab_id = 'Type'
    __MapData_regional__item_._cont = ASN1Dict([
        ('regionId', ___MapData_regional__item__regionId),
        ('regExtValue', ___MapData_regional__item__regExtValue),
        ])
    __MapData_regional__item_._ext = None
    _MapData_regional._cont = __MapData_regional__item_
    _MapData_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    MapData._cont = ASN1Dict([
        ('timeStamp', _MapData_timeStamp),
        ('msgIssueRevision', _MapData_msgIssueRevision),
        ('layerType', _MapData_layerType),
        ('layerID', _MapData_layerID),
        ('intersections', _MapData_intersections),
        ('roadSegments', _MapData_roadSegments),
        ('dataParameters', _MapData_dataParameters),
        ('restrictionList', _MapData_restrictionList),
        ('regional', _MapData_regional),
        ])
    MapData._ext = []
    
    #-----< AdvisorySpeed >-----#
    AdvisorySpeed = SEQ(name='AdvisorySpeed', mode=MODE_TYPE)
    _AdvisorySpeed_type = ENUM(name='type', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'AdvisorySpeedType')))
    _AdvisorySpeed_speed = INT(name='speed', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'SpeedAdvice')), opt=True)
    _AdvisorySpeed_confidence = INT(name='confidence', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'SpeedConfidence')), opt=True)
    _AdvisorySpeed_distance = INT(name='distance', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'ZoneLength')), opt=True)
    _AdvisorySpeed_class_ = INT(name='class', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RestrictionClassID')), opt=True)
    _AdvisorySpeed_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __AdvisorySpeed_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    ___AdvisorySpeed_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____AdvisorySpeed_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____AdvisorySpeed_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___AdvisorySpeed_regional__item__regionId._const_tab = ____AdvisorySpeed_regional__item__regionId_tab
    ___AdvisorySpeed_regional__item__regionId._const_tab_at = None
    ___AdvisorySpeed_regional__item__regionId._const_tab_id = 'id'
    ___AdvisorySpeed_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____AdvisorySpeed_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____AdvisorySpeed_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___AdvisorySpeed_regional__item__regExtValue._const_tab = ____AdvisorySpeed_regional__item__regExtValue_tab
    ___AdvisorySpeed_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___AdvisorySpeed_regional__item__regExtValue._const_tab_id = 'Type'
    __AdvisorySpeed_regional__item_._cont = ASN1Dict([
        ('regionId', ___AdvisorySpeed_regional__item__regionId),
        ('regExtValue', ___AdvisorySpeed_regional__item__regExtValue),
        ])
    __AdvisorySpeed_regional__item_._ext = None
    _AdvisorySpeed_regional._cont = __AdvisorySpeed_regional__item_
    _AdvisorySpeed_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    AdvisorySpeed._cont = ASN1Dict([
        ('type', _AdvisorySpeed_type),
        ('speed', _AdvisorySpeed_speed),
        ('confidence', _AdvisorySpeed_confidence),
        ('distance', _AdvisorySpeed_distance),
        ('class', _AdvisorySpeed_class_),
        ('regional', _AdvisorySpeed_regional),
        ])
    AdvisorySpeed._ext = []
    
    #-----< AdvisorySpeedList >-----#
    AdvisorySpeedList = SEQ_OF(name='AdvisorySpeedList', mode=MODE_TYPE)
    _AdvisorySpeedList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'AdvisorySpeed')))
    AdvisorySpeedList._cont = _AdvisorySpeedList__item_
    AdvisorySpeedList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< ComputedLane >-----#
    ComputedLane = SEQ(name='ComputedLane', mode=MODE_TYPE)
    _ComputedLane_referenceLaneId = INT(name='referenceLaneId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneID')))
    _ComputedLane_offsetXaxis = CHOICE(name='offsetXaxis', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __ComputedLane_offsetXaxis_small = INT(name='small', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DrivenLineOffsetSm')))
    __ComputedLane_offsetXaxis_large = INT(name='large', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DrivenLineOffsetLg')))
    _ComputedLane_offsetXaxis._cont = ASN1Dict([
        ('small', __ComputedLane_offsetXaxis_small),
        ('large', __ComputedLane_offsetXaxis_large),
        ])
    _ComputedLane_offsetXaxis._ext = None
    _ComputedLane_offsetYaxis = CHOICE(name='offsetYaxis', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __ComputedLane_offsetYaxis_small = INT(name='small', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DrivenLineOffsetSm')))
    __ComputedLane_offsetYaxis_large = INT(name='large', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DrivenLineOffsetLg')))
    _ComputedLane_offsetYaxis._cont = ASN1Dict([
        ('small', __ComputedLane_offsetYaxis_small),
        ('large', __ComputedLane_offsetYaxis_large),
        ])
    _ComputedLane_offsetYaxis._ext = None
    _ComputedLane_rotateXY = INT(name='rotateXY', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Angle')), opt=True)
    _ComputedLane_scaleXaxis = INT(name='scaleXaxis', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Scale-B12')), opt=True)
    _ComputedLane_scaleYaxis = INT(name='scaleYaxis', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Scale-B12')), opt=True)
    _ComputedLane_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ComputedLane_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    ___ComputedLane_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____ComputedLane_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____ComputedLane_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___ComputedLane_regional__item__regionId._const_tab = ____ComputedLane_regional__item__regionId_tab
    ___ComputedLane_regional__item__regionId._const_tab_at = None
    ___ComputedLane_regional__item__regionId._const_tab_id = 'id'
    ___ComputedLane_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____ComputedLane_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____ComputedLane_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___ComputedLane_regional__item__regExtValue._const_tab = ____ComputedLane_regional__item__regExtValue_tab
    ___ComputedLane_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___ComputedLane_regional__item__regExtValue._const_tab_id = 'Type'
    __ComputedLane_regional__item_._cont = ASN1Dict([
        ('regionId', ___ComputedLane_regional__item__regionId),
        ('regExtValue', ___ComputedLane_regional__item__regExtValue),
        ])
    __ComputedLane_regional__item_._ext = None
    _ComputedLane_regional._cont = __ComputedLane_regional__item_
    _ComputedLane_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    ComputedLane._cont = ASN1Dict([
        ('referenceLaneId', _ComputedLane_referenceLaneId),
        ('offsetXaxis', _ComputedLane_offsetXaxis),
        ('offsetYaxis', _ComputedLane_offsetYaxis),
        ('rotateXY', _ComputedLane_rotateXY),
        ('scaleXaxis', _ComputedLane_scaleXaxis),
        ('scaleYaxis', _ComputedLane_scaleYaxis),
        ('regional', _ComputedLane_regional),
        ])
    ComputedLane._ext = []
    
    #-----< ConnectsToList >-----#
    ConnectsToList = SEQ_OF(name='ConnectsToList', mode=MODE_TYPE)
    _ConnectsToList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'Connection')))
    ConnectsToList._cont = _ConnectsToList__item_
    ConnectsToList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< ConnectingLane >-----#
    ConnectingLane = SEQ(name='ConnectingLane', mode=MODE_TYPE)
    _ConnectingLane_lane = INT(name='lane', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneID')))
    _ConnectingLane_maneuver = BIT_STR(name='maneuver', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'AllowedManeuvers')), opt=True)
    ConnectingLane._cont = ASN1Dict([
        ('lane', _ConnectingLane_lane),
        ('maneuver', _ConnectingLane_maneuver),
        ])
    ConnectingLane._ext = None
    
    #-----< Connection >-----#
    Connection = SEQ(name='Connection', mode=MODE_TYPE)
    _Connection_connectingLane = SEQ(name='connectingLane', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'ConnectingLane')))
    _Connection_remoteIntersection = SEQ(name='remoteIntersection', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'IntersectionReferenceID')), opt=True)
    _Connection_signalGroup = INT(name='signalGroup', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'SignalGroupID')), opt=True)
    _Connection_userClass = INT(name='userClass', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RestrictionClassID')), opt=True)
    _Connection_connectionID = INT(name='connectionID', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneConnectionID')), opt=True)
    Connection._cont = ASN1Dict([
        ('connectingLane', _Connection_connectingLane),
        ('remoteIntersection', _Connection_remoteIntersection),
        ('signalGroup', _Connection_signalGroup),
        ('userClass', _Connection_userClass),
        ('connectionID', _Connection_connectionID),
        ])
    Connection._ext = None
    
    #-----< ConnectionManeuverAssist >-----#
    ConnectionManeuverAssist = SEQ(name='ConnectionManeuverAssist', mode=MODE_TYPE)
    _ConnectionManeuverAssist_connectionID = INT(name='connectionID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneConnectionID')))
    _ConnectionManeuverAssist_queueLength = INT(name='queueLength', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'ZoneLength')), opt=True)
    _ConnectionManeuverAssist_availableStorageLength = INT(name='availableStorageLength', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'ZoneLength')), opt=True)
    _ConnectionManeuverAssist_waitOnStop = BOOL(name='waitOnStop', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'WaitOnStopline')), opt=True)
    _ConnectionManeuverAssist_pedBicycleDetect = BOOL(name='pedBicycleDetect', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'PedestrianBicycleDetect')), opt=True)
    _ConnectionManeuverAssist_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ConnectionManeuverAssist_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    ___ConnectionManeuverAssist_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____ConnectionManeuverAssist_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    _____ConnectionManeuverAssist_regional__item__regionId_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'ConnectionManeuverAssist-addGrpC')))
    ____ConnectionManeuverAssist_regional__item__regionId_tab._val = ASN1Set(rv=[dict([('Type', _____ConnectionManeuverAssist_regional__item__regionId_tab_val_Type_0), ('id', 3)])], rr=[], ev=None, er=[])
    ___ConnectionManeuverAssist_regional__item__regionId._const_tab = ____ConnectionManeuverAssist_regional__item__regionId_tab
    ___ConnectionManeuverAssist_regional__item__regionId._const_tab_at = None
    ___ConnectionManeuverAssist_regional__item__regionId._const_tab_id = 'id'
    ___ConnectionManeuverAssist_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___ConnectionManeuverAssist_regional__item__regExtValue._const_tab = ____ConnectionManeuverAssist_regional__item__regionId_tab
    ___ConnectionManeuverAssist_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___ConnectionManeuverAssist_regional__item__regExtValue._const_tab_id = 'Type'
    __ConnectionManeuverAssist_regional__item_._cont = ASN1Dict([
        ('regionId', ___ConnectionManeuverAssist_regional__item__regionId),
        ('regExtValue', ___ConnectionManeuverAssist_regional__item__regExtValue),
        ])
    __ConnectionManeuverAssist_regional__item_._ext = None
    _ConnectionManeuverAssist_regional._cont = __ConnectionManeuverAssist_regional__item_
    _ConnectionManeuverAssist_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    ConnectionManeuverAssist._cont = ASN1Dict([
        ('connectionID', _ConnectionManeuverAssist_connectionID),
        ('queueLength', _ConnectionManeuverAssist_queueLength),
        ('availableStorageLength', _ConnectionManeuverAssist_availableStorageLength),
        ('waitOnStop', _ConnectionManeuverAssist_waitOnStop),
        ('pedBicycleDetect', _ConnectionManeuverAssist_pedBicycleDetect),
        ('regional', _ConnectionManeuverAssist_regional),
        ])
    ConnectionManeuverAssist._ext = []
    
    #-----< DataParameters >-----#
    DataParameters = SEQ(name='DataParameters', mode=MODE_TYPE)
    _DataParameters_processMethod = STR_IA5(name='processMethod', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DataParameters_processMethod._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    _DataParameters_processAgency = STR_IA5(name='processAgency', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DataParameters_processAgency._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    _DataParameters_lastCheckedDate = STR_IA5(name='lastCheckedDate', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DataParameters_lastCheckedDate._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    _DataParameters_geoidUsed = STR_IA5(name='geoidUsed', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DataParameters_geoidUsed._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    DataParameters._cont = ASN1Dict([
        ('processMethod', _DataParameters_processMethod),
        ('processAgency', _DataParameters_processAgency),
        ('lastCheckedDate', _DataParameters_lastCheckedDate),
        ('geoidUsed', _DataParameters_geoidUsed),
        ])
    DataParameters._ext = []
    
    #-----< EnabledLaneList >-----#
    EnabledLaneList = SEQ_OF(name='EnabledLaneList', mode=MODE_TYPE)
    _EnabledLaneList__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'LaneID')))
    EnabledLaneList._cont = _EnabledLaneList__item_
    EnabledLaneList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< GenericLane >-----#
    GenericLane = SEQ(name='GenericLane', mode=MODE_TYPE)
    _GenericLane_laneID = INT(name='laneID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneID')))
    _GenericLane_name = STR_IA5(name='name', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DescriptiveName')), opt=True)
    _GenericLane_ingressApproach = INT(name='ingressApproach', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'ApproachID')), opt=True)
    _GenericLane_egressApproach = INT(name='egressApproach', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'ApproachID')), opt=True)
    _GenericLane_laneAttributes = SEQ(name='laneAttributes', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneAttributes')))
    _GenericLane_maneuvers = BIT_STR(name='maneuvers', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'AllowedManeuvers')), opt=True)
    _GenericLane_nodeList = CHOICE(name='nodeList', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('DSRC', 'NodeListXY')))
    _GenericLane_connectsTo = SEQ_OF(name='connectsTo', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'ConnectsToList')), opt=True)
    _GenericLane_overlays = SEQ_OF(name='overlays', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'OverlayLaneList')), opt=True)
    _GenericLane_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __GenericLane_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    ___GenericLane_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____GenericLane_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    _____GenericLane_regional__item__regionId_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'ConnectionTrajectory-addGrpC')))
    ____GenericLane_regional__item__regionId_tab._val = ASN1Set(rv=[dict([('Type', _____GenericLane_regional__item__regionId_tab_val_Type_0), ('id', 3)])], rr=[], ev=None, er=[])
    ___GenericLane_regional__item__regionId._const_tab = ____GenericLane_regional__item__regionId_tab
    ___GenericLane_regional__item__regionId._const_tab_at = None
    ___GenericLane_regional__item__regionId._const_tab_id = 'id'
    ___GenericLane_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___GenericLane_regional__item__regExtValue._const_tab = ____GenericLane_regional__item__regionId_tab
    ___GenericLane_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___GenericLane_regional__item__regExtValue._const_tab_id = 'Type'
    __GenericLane_regional__item_._cont = ASN1Dict([
        ('regionId', ___GenericLane_regional__item__regionId),
        ('regExtValue', ___GenericLane_regional__item__regExtValue),
        ])
    __GenericLane_regional__item_._ext = None
    _GenericLane_regional._cont = __GenericLane_regional__item_
    _GenericLane_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    GenericLane._cont = ASN1Dict([
        ('laneID', _GenericLane_laneID),
        ('name', _GenericLane_name),
        ('ingressApproach', _GenericLane_ingressApproach),
        ('egressApproach', _GenericLane_egressApproach),
        ('laneAttributes', _GenericLane_laneAttributes),
        ('maneuvers', _GenericLane_maneuvers),
        ('nodeList', _GenericLane_nodeList),
        ('connectsTo', _GenericLane_connectsTo),
        ('overlays', _GenericLane_overlays),
        ('regional', _GenericLane_regional),
        ])
    GenericLane._ext = []
    
    #-----< IntersectionAccessPoint >-----#
    IntersectionAccessPoint = CHOICE(name='IntersectionAccessPoint', mode=MODE_TYPE)
    _IntersectionAccessPoint_lane = INT(name='lane', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneID')))
    _IntersectionAccessPoint_approach = INT(name='approach', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'ApproachID')))
    _IntersectionAccessPoint_connection = INT(name='connection', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneConnectionID')))
    IntersectionAccessPoint._cont = ASN1Dict([
        ('lane', _IntersectionAccessPoint_lane),
        ('approach', _IntersectionAccessPoint_approach),
        ('connection', _IntersectionAccessPoint_connection),
        ])
    IntersectionAccessPoint._ext = []
    
    #-----< IntersectionGeometry >-----#
    IntersectionGeometry = SEQ(name='IntersectionGeometry', mode=MODE_TYPE)
    _IntersectionGeometry_name = STR_IA5(name='name', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DescriptiveName')), opt=True)
    _IntersectionGeometry_id = SEQ(name='id', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'IntersectionReferenceID')))
    _IntersectionGeometry_revision = INT(name='revision', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'MsgCount')))
    _IntersectionGeometry_refPoint = SEQ(name='refPoint', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Position3D')))
    _IntersectionGeometry_laneWidth = INT(name='laneWidth', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneWidth')), opt=True)
    _IntersectionGeometry_speedLimits = SEQ_OF(name='speedLimits', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'SpeedLimitList')), opt=True)
    _IntersectionGeometry_laneSet = SEQ_OF(name='laneSet', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneList')))
    _IntersectionGeometry_preemptPriorityData = SEQ_OF(name='preemptPriorityData', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'PreemptPriorityList')), opt=True)
    _IntersectionGeometry_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __IntersectionGeometry_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    ___IntersectionGeometry_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____IntersectionGeometry_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____IntersectionGeometry_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___IntersectionGeometry_regional__item__regionId._const_tab = ____IntersectionGeometry_regional__item__regionId_tab
    ___IntersectionGeometry_regional__item__regionId._const_tab_at = None
    ___IntersectionGeometry_regional__item__regionId._const_tab_id = 'id'
    ___IntersectionGeometry_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____IntersectionGeometry_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____IntersectionGeometry_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___IntersectionGeometry_regional__item__regExtValue._const_tab = ____IntersectionGeometry_regional__item__regExtValue_tab
    ___IntersectionGeometry_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___IntersectionGeometry_regional__item__regExtValue._const_tab_id = 'Type'
    __IntersectionGeometry_regional__item_._cont = ASN1Dict([
        ('regionId', ___IntersectionGeometry_regional__item__regionId),
        ('regExtValue', ___IntersectionGeometry_regional__item__regExtValue),
        ])
    __IntersectionGeometry_regional__item_._ext = None
    _IntersectionGeometry_regional._cont = __IntersectionGeometry_regional__item_
    _IntersectionGeometry_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    IntersectionGeometry._cont = ASN1Dict([
        ('name', _IntersectionGeometry_name),
        ('id', _IntersectionGeometry_id),
        ('revision', _IntersectionGeometry_revision),
        ('refPoint', _IntersectionGeometry_refPoint),
        ('laneWidth', _IntersectionGeometry_laneWidth),
        ('speedLimits', _IntersectionGeometry_speedLimits),
        ('laneSet', _IntersectionGeometry_laneSet),
        ('preemptPriorityData', _IntersectionGeometry_preemptPriorityData),
        ('regional', _IntersectionGeometry_regional),
        ])
    IntersectionGeometry._ext = []
    
    #-----< IntersectionGeometryList >-----#
    IntersectionGeometryList = SEQ_OF(name='IntersectionGeometryList', mode=MODE_TYPE)
    _IntersectionGeometryList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'IntersectionGeometry')))
    IntersectionGeometryList._cont = _IntersectionGeometryList__item_
    IntersectionGeometryList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< IntersectionReferenceID >-----#
    IntersectionReferenceID = SEQ(name='IntersectionReferenceID', mode=MODE_TYPE)
    _IntersectionReferenceID_region = INT(name='region', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RoadRegulatorID')), opt=True)
    _IntersectionReferenceID_id = INT(name='id', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'IntersectionID')))
    IntersectionReferenceID._cont = ASN1Dict([
        ('region', _IntersectionReferenceID_region),
        ('id', _IntersectionReferenceID_id),
        ])
    IntersectionReferenceID._ext = None
    
    #-----< IntersectionState >-----#
    IntersectionState = SEQ(name='IntersectionState', mode=MODE_TYPE)
    _IntersectionState_name = STR_IA5(name='name', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DescriptiveName')), opt=True)
    _IntersectionState_id = SEQ(name='id', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'IntersectionReferenceID')))
    _IntersectionState_revision = INT(name='revision', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'MsgCount')))
    _IntersectionState_status = BIT_STR(name='status', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'IntersectionStatusObject')))
    _IntersectionState_moy = INT(name='moy', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'MinuteOfTheYear')), opt=True)
    _IntersectionState_timeStamp = INT(name='timeStamp', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DSecond')), opt=True)
    _IntersectionState_enabledLanes = SEQ_OF(name='enabledLanes', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'EnabledLaneList')), opt=True)
    _IntersectionState_states = SEQ_OF(name='states', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'MovementList')))
    _IntersectionState_maneuverAssistList = SEQ_OF(name='maneuverAssistList', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'ManeuverAssistList')), opt=True)
    _IntersectionState_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __IntersectionState_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    ___IntersectionState_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____IntersectionState_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    _____IntersectionState_regional__item__regionId_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'IntersectionState-addGrpC')))
    ____IntersectionState_regional__item__regionId_tab._val = ASN1Set(rv=[dict([('Type', _____IntersectionState_regional__item__regionId_tab_val_Type_0), ('id', 3)])], rr=[], ev=None, er=[])
    ___IntersectionState_regional__item__regionId._const_tab = ____IntersectionState_regional__item__regionId_tab
    ___IntersectionState_regional__item__regionId._const_tab_at = None
    ___IntersectionState_regional__item__regionId._const_tab_id = 'id'
    ___IntersectionState_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___IntersectionState_regional__item__regExtValue._const_tab = ____IntersectionState_regional__item__regionId_tab
    ___IntersectionState_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___IntersectionState_regional__item__regExtValue._const_tab_id = 'Type'
    __IntersectionState_regional__item_._cont = ASN1Dict([
        ('regionId', ___IntersectionState_regional__item__regionId),
        ('regExtValue', ___IntersectionState_regional__item__regExtValue),
        ])
    __IntersectionState_regional__item_._ext = None
    _IntersectionState_regional._cont = __IntersectionState_regional__item_
    _IntersectionState_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    IntersectionState._cont = ASN1Dict([
        ('name', _IntersectionState_name),
        ('id', _IntersectionState_id),
        ('revision', _IntersectionState_revision),
        ('status', _IntersectionState_status),
        ('moy', _IntersectionState_moy),
        ('timeStamp', _IntersectionState_timeStamp),
        ('enabledLanes', _IntersectionState_enabledLanes),
        ('states', _IntersectionState_states),
        ('maneuverAssistList', _IntersectionState_maneuverAssistList),
        ('regional', _IntersectionState_regional),
        ])
    IntersectionState._ext = []
    
    #-----< IntersectionStateList >-----#
    IntersectionStateList = SEQ_OF(name='IntersectionStateList', mode=MODE_TYPE)
    _IntersectionStateList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'IntersectionState')))
    IntersectionStateList._cont = _IntersectionStateList__item_
    IntersectionStateList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< LaneAttributes >-----#
    LaneAttributes = SEQ(name='LaneAttributes', mode=MODE_TYPE)
    _LaneAttributes_directionalUse = BIT_STR(name='directionalUse', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneDirection')))
    _LaneAttributes_sharedWith = BIT_STR(name='sharedWith', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneSharing')))
    _LaneAttributes_laneType = CHOICE(name='laneType', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('DSRC', 'LaneTypeAttributes')))
    _LaneAttributes_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RegionalExtension')), opt=True)
    __LaneAttributes_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___LaneAttributes_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ___LaneAttributes_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __LaneAttributes_regional_regionId._const_tab = ___LaneAttributes_regional_regionId_tab
    __LaneAttributes_regional_regionId._const_tab_at = None
    __LaneAttributes_regional_regionId._const_tab_id = 'id'
    __LaneAttributes_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___LaneAttributes_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ___LaneAttributes_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __LaneAttributes_regional_regExtValue._const_tab = ___LaneAttributes_regional_regExtValue_tab
    __LaneAttributes_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __LaneAttributes_regional_regExtValue._const_tab_id = 'Type'
    _LaneAttributes_regional._cont = ASN1Dict([
        ('regionId', __LaneAttributes_regional_regionId),
        ('regExtValue', __LaneAttributes_regional_regExtValue),
        ])
    _LaneAttributes_regional._ext = None
    LaneAttributes._cont = ASN1Dict([
        ('directionalUse', _LaneAttributes_directionalUse),
        ('sharedWith', _LaneAttributes_sharedWith),
        ('laneType', _LaneAttributes_laneType),
        ('regional', _LaneAttributes_regional),
        ])
    LaneAttributes._ext = None
    
    #-----< LaneDataAttribute >-----#
    LaneDataAttribute = CHOICE(name='LaneDataAttribute', mode=MODE_TYPE)
    _LaneDataAttribute_pathEndPointAngle = INT(name='pathEndPointAngle', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DeltaAngle')))
    _LaneDataAttribute_laneCrownPointCenter = INT(name='laneCrownPointCenter', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RoadwayCrownAngle')))
    _LaneDataAttribute_laneCrownPointLeft = INT(name='laneCrownPointLeft', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RoadwayCrownAngle')))
    _LaneDataAttribute_laneCrownPointRight = INT(name='laneCrownPointRight', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RoadwayCrownAngle')))
    _LaneDataAttribute_laneAngle = INT(name='laneAngle', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'MergeDivergeNodeAngle')))
    _LaneDataAttribute_speedLimits = SEQ_OF(name='speedLimits', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'SpeedLimitList')))
    _LaneDataAttribute_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __LaneDataAttribute_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    ___LaneDataAttribute_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____LaneDataAttribute_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____LaneDataAttribute_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___LaneDataAttribute_regional__item__regionId._const_tab = ____LaneDataAttribute_regional__item__regionId_tab
    ___LaneDataAttribute_regional__item__regionId._const_tab_at = None
    ___LaneDataAttribute_regional__item__regionId._const_tab_id = 'id'
    ___LaneDataAttribute_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____LaneDataAttribute_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____LaneDataAttribute_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___LaneDataAttribute_regional__item__regExtValue._const_tab = ____LaneDataAttribute_regional__item__regExtValue_tab
    ___LaneDataAttribute_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___LaneDataAttribute_regional__item__regExtValue._const_tab_id = 'Type'
    __LaneDataAttribute_regional__item_._cont = ASN1Dict([
        ('regionId', ___LaneDataAttribute_regional__item__regionId),
        ('regExtValue', ___LaneDataAttribute_regional__item__regExtValue),
        ])
    __LaneDataAttribute_regional__item_._ext = None
    _LaneDataAttribute_regional._cont = __LaneDataAttribute_regional__item_
    _LaneDataAttribute_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    LaneDataAttribute._cont = ASN1Dict([
        ('pathEndPointAngle', _LaneDataAttribute_pathEndPointAngle),
        ('laneCrownPointCenter', _LaneDataAttribute_laneCrownPointCenter),
        ('laneCrownPointLeft', _LaneDataAttribute_laneCrownPointLeft),
        ('laneCrownPointRight', _LaneDataAttribute_laneCrownPointRight),
        ('laneAngle', _LaneDataAttribute_laneAngle),
        ('speedLimits', _LaneDataAttribute_speedLimits),
        ('regional', _LaneDataAttribute_regional),
        ])
    LaneDataAttribute._ext = []
    
    #-----< LaneDataAttributeList >-----#
    LaneDataAttributeList = SEQ_OF(name='LaneDataAttributeList', mode=MODE_TYPE)
    _LaneDataAttributeList__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'LaneDataAttribute')))
    LaneDataAttributeList._cont = _LaneDataAttributeList__item_
    LaneDataAttributeList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    
    #-----< LaneList >-----#
    LaneList = SEQ_OF(name='LaneList', mode=MODE_TYPE)
    _LaneList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'GenericLane')))
    LaneList._cont = _LaneList__item_
    LaneList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    
    #-----< LaneSharing >-----#
    LaneSharing = BIT_STR(name='LaneSharing', mode=MODE_TYPE)
    LaneSharing._cont = ASN1Dict([('overlappingLaneDescriptionProvided', 0), ('multipleLanesTreatedAsOneLane', 1), ('otherNonMotorizedTrafficTypes', 2), ('individualMotorizedVehicleTraffic', 3), ('busVehicleTraffic', 4), ('taxiVehicleTraffic', 5), ('pedestriansTraffic', 6), ('cyclistVehicleTraffic', 7), ('trackedVehicleTraffic', 8), ('pedestrianTraffic', 9)])
    LaneSharing._const_sz = ASN1Set(rv=[10], rr=[], ev=None, er=[])
    
    #-----< LaneTypeAttributes >-----#
    LaneTypeAttributes = CHOICE(name='LaneTypeAttributes', mode=MODE_TYPE)
    _LaneTypeAttributes_vehicle = BIT_STR(name='vehicle', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneAttributes-Vehicle')))
    _LaneTypeAttributes_crosswalk = BIT_STR(name='crosswalk', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneAttributes-Crosswalk')))
    _LaneTypeAttributes_bikeLane = BIT_STR(name='bikeLane', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneAttributes-Bike')))
    _LaneTypeAttributes_sidewalk = BIT_STR(name='sidewalk', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneAttributes-Sidewalk')))
    _LaneTypeAttributes_median = BIT_STR(name='median', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneAttributes-Barrier')))
    _LaneTypeAttributes_striping = BIT_STR(name='striping', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneAttributes-Striping')))
    _LaneTypeAttributes_trackedVehicle = BIT_STR(name='trackedVehicle', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneAttributes-TrackedVehicle')))
    _LaneTypeAttributes_parking = BIT_STR(name='parking', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneAttributes-Parking')))
    LaneTypeAttributes._cont = ASN1Dict([
        ('vehicle', _LaneTypeAttributes_vehicle),
        ('crosswalk', _LaneTypeAttributes_crosswalk),
        ('bikeLane', _LaneTypeAttributes_bikeLane),
        ('sidewalk', _LaneTypeAttributes_sidewalk),
        ('median', _LaneTypeAttributes_median),
        ('striping', _LaneTypeAttributes_striping),
        ('trackedVehicle', _LaneTypeAttributes_trackedVehicle),
        ('parking', _LaneTypeAttributes_parking),
        ])
    LaneTypeAttributes._ext = []
    
    #-----< ManeuverAssistList >-----#
    ManeuverAssistList = SEQ_OF(name='ManeuverAssistList', mode=MODE_TYPE)
    _ManeuverAssistList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'ConnectionManeuverAssist')))
    ManeuverAssistList._cont = _ManeuverAssistList__item_
    ManeuverAssistList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< MovementEventList >-----#
    MovementEventList = SEQ_OF(name='MovementEventList', mode=MODE_TYPE)
    _MovementEventList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'MovementEvent')))
    MovementEventList._cont = _MovementEventList__item_
    MovementEventList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< MovementEvent >-----#
    MovementEvent = SEQ(name='MovementEvent', mode=MODE_TYPE)
    _MovementEvent_eventState = ENUM(name='eventState', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'MovementPhaseState')))
    _MovementEvent_timing = SEQ(name='timing', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'TimeChangeDetails')), opt=True)
    _MovementEvent_speeds = SEQ_OF(name='speeds', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'AdvisorySpeedList')), opt=True)
    _MovementEvent_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __MovementEvent_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    ___MovementEvent_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____MovementEvent_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____MovementEvent_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___MovementEvent_regional__item__regionId._const_tab = ____MovementEvent_regional__item__regionId_tab
    ___MovementEvent_regional__item__regionId._const_tab_at = None
    ___MovementEvent_regional__item__regionId._const_tab_id = 'id'
    ___MovementEvent_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____MovementEvent_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____MovementEvent_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___MovementEvent_regional__item__regExtValue._const_tab = ____MovementEvent_regional__item__regExtValue_tab
    ___MovementEvent_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___MovementEvent_regional__item__regExtValue._const_tab_id = 'Type'
    __MovementEvent_regional__item_._cont = ASN1Dict([
        ('regionId', ___MovementEvent_regional__item__regionId),
        ('regExtValue', ___MovementEvent_regional__item__regExtValue),
        ])
    __MovementEvent_regional__item_._ext = None
    _MovementEvent_regional._cont = __MovementEvent_regional__item_
    _MovementEvent_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    MovementEvent._cont = ASN1Dict([
        ('eventState', _MovementEvent_eventState),
        ('timing', _MovementEvent_timing),
        ('speeds', _MovementEvent_speeds),
        ('regional', _MovementEvent_regional),
        ])
    MovementEvent._ext = []
    
    #-----< MovementList >-----#
    MovementList = SEQ_OF(name='MovementList', mode=MODE_TYPE)
    _MovementList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'MovementState')))
    MovementList._cont = _MovementList__item_
    MovementList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    
    #-----< MovementState >-----#
    MovementState = SEQ(name='MovementState', mode=MODE_TYPE)
    _MovementState_movementName = STR_IA5(name='movementName', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DescriptiveName')), opt=True)
    _MovementState_signalGroup = INT(name='signalGroup', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'SignalGroupID')))
    _MovementState_state_time_speed = SEQ_OF(name='state-time-speed', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'MovementEventList')))
    _MovementState_maneuverAssistList = SEQ_OF(name='maneuverAssistList', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'ManeuverAssistList')), opt=True)
    _MovementState_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __MovementState_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    ___MovementState_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____MovementState_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____MovementState_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___MovementState_regional__item__regionId._const_tab = ____MovementState_regional__item__regionId_tab
    ___MovementState_regional__item__regionId._const_tab_at = None
    ___MovementState_regional__item__regionId._const_tab_id = 'id'
    ___MovementState_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____MovementState_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____MovementState_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___MovementState_regional__item__regExtValue._const_tab = ____MovementState_regional__item__regExtValue_tab
    ___MovementState_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___MovementState_regional__item__regExtValue._const_tab_id = 'Type'
    __MovementState_regional__item_._cont = ASN1Dict([
        ('regionId', ___MovementState_regional__item__regionId),
        ('regExtValue', ___MovementState_regional__item__regExtValue),
        ])
    __MovementState_regional__item_._ext = None
    _MovementState_regional._cont = __MovementState_regional__item_
    _MovementState_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    MovementState._cont = ASN1Dict([
        ('movementName', _MovementState_movementName),
        ('signalGroup', _MovementState_signalGroup),
        ('state-time-speed', _MovementState_state_time_speed),
        ('maneuverAssistList', _MovementState_maneuverAssistList),
        ('regional', _MovementState_regional),
        ])
    MovementState._ext = []
    
    #-----< NodeAttributeSetXY >-----#
    NodeAttributeSetXY = SEQ(name='NodeAttributeSetXY', mode=MODE_TYPE)
    _NodeAttributeSetXY_localNode = SEQ_OF(name='localNode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'NodeAttributeXYList')), opt=True)
    _NodeAttributeSetXY_disabled = SEQ_OF(name='disabled', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'SegmentAttributeXYList')), opt=True)
    _NodeAttributeSetXY_enabled = SEQ_OF(name='enabled', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'SegmentAttributeXYList')), opt=True)
    _NodeAttributeSetXY_data = SEQ_OF(name='data', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneDataAttributeList')), opt=True)
    _NodeAttributeSetXY_dWidth = INT(name='dWidth', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Offset-B10')), opt=True)
    _NodeAttributeSetXY_dElevation = INT(name='dElevation', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Offset-B10')), opt=True)
    _NodeAttributeSetXY_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __NodeAttributeSetXY_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    ___NodeAttributeSetXY_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____NodeAttributeSetXY_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    _____NodeAttributeSetXY_regional__item__regionId_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'Control-addGrpC')))
    ____NodeAttributeSetXY_regional__item__regionId_tab._val = ASN1Set(rv=[dict([('Type', _____NodeAttributeSetXY_regional__item__regionId_tab_val_Type_0), ('id', 3)])], rr=[], ev=None, er=[])
    ___NodeAttributeSetXY_regional__item__regionId._const_tab = ____NodeAttributeSetXY_regional__item__regionId_tab
    ___NodeAttributeSetXY_regional__item__regionId._const_tab_at = None
    ___NodeAttributeSetXY_regional__item__regionId._const_tab_id = 'id'
    ___NodeAttributeSetXY_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___NodeAttributeSetXY_regional__item__regExtValue._const_tab = ____NodeAttributeSetXY_regional__item__regionId_tab
    ___NodeAttributeSetXY_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___NodeAttributeSetXY_regional__item__regExtValue._const_tab_id = 'Type'
    __NodeAttributeSetXY_regional__item_._cont = ASN1Dict([
        ('regionId', ___NodeAttributeSetXY_regional__item__regionId),
        ('regExtValue', ___NodeAttributeSetXY_regional__item__regExtValue),
        ])
    __NodeAttributeSetXY_regional__item_._ext = None
    _NodeAttributeSetXY_regional._cont = __NodeAttributeSetXY_regional__item_
    _NodeAttributeSetXY_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    NodeAttributeSetXY._cont = ASN1Dict([
        ('localNode', _NodeAttributeSetXY_localNode),
        ('disabled', _NodeAttributeSetXY_disabled),
        ('enabled', _NodeAttributeSetXY_enabled),
        ('data', _NodeAttributeSetXY_data),
        ('dWidth', _NodeAttributeSetXY_dWidth),
        ('dElevation', _NodeAttributeSetXY_dElevation),
        ('regional', _NodeAttributeSetXY_regional),
        ])
    NodeAttributeSetXY._ext = []
    
    #-----< NodeAttributeXYList >-----#
    NodeAttributeXYList = SEQ_OF(name='NodeAttributeXYList', mode=MODE_TYPE)
    _NodeAttributeXYList__item_ = ENUM(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'NodeAttributeXY')))
    NodeAttributeXYList._cont = _NodeAttributeXYList__item_
    NodeAttributeXYList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    
    #-----< NodeAttributeXY >-----#
    NodeAttributeXY = ENUM(name='NodeAttributeXY', mode=MODE_TYPE)
    NodeAttributeXY._cont = ASN1Dict([('reserved', 0), ('stopLine', 1), ('roundedCapStyleA', 2), ('roundedCapStyleB', 3), ('mergePoint', 4), ('divergePoint', 5), ('downstreamStopLine', 6), ('downstreamStartNode', 7), ('closedToTraffic', 8), ('safeIsland', 9), ('curbPresentAtStepOff', 10), ('hydrantPresent', 11)])
    NodeAttributeXY._ext = []
    
    #-----< Node-LLmD-64b >-----#
    Node_LLmD_64b = SEQ(name='Node-LLmD-64b', mode=MODE_TYPE)
    _Node_LLmD_64b_lon = INT(name='lon', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Longitude')))
    _Node_LLmD_64b_lat = INT(name='lat', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Latitude')))
    Node_LLmD_64b._cont = ASN1Dict([
        ('lon', _Node_LLmD_64b_lon),
        ('lat', _Node_LLmD_64b_lat),
        ])
    Node_LLmD_64b._ext = None
    
    #-----< Node-XY-20b >-----#
    Node_XY_20b = SEQ(name='Node-XY-20b', mode=MODE_TYPE)
    _Node_XY_20b_x = INT(name='x', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Offset-B10')))
    _Node_XY_20b_y = INT(name='y', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Offset-B10')))
    Node_XY_20b._cont = ASN1Dict([
        ('x', _Node_XY_20b_x),
        ('y', _Node_XY_20b_y),
        ])
    Node_XY_20b._ext = None
    
    #-----< Node-XY-22b >-----#
    Node_XY_22b = SEQ(name='Node-XY-22b', mode=MODE_TYPE)
    _Node_XY_22b_x = INT(name='x', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Offset-B11')))
    _Node_XY_22b_y = INT(name='y', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Offset-B11')))
    Node_XY_22b._cont = ASN1Dict([
        ('x', _Node_XY_22b_x),
        ('y', _Node_XY_22b_y),
        ])
    Node_XY_22b._ext = None
    
    #-----< Node-XY-24b >-----#
    Node_XY_24b = SEQ(name='Node-XY-24b', mode=MODE_TYPE)
    _Node_XY_24b_x = INT(name='x', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Offset-B12')))
    _Node_XY_24b_y = INT(name='y', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Offset-B12')))
    Node_XY_24b._cont = ASN1Dict([
        ('x', _Node_XY_24b_x),
        ('y', _Node_XY_24b_y),
        ])
    Node_XY_24b._ext = None
    
    #-----< Node-XY-26b >-----#
    Node_XY_26b = SEQ(name='Node-XY-26b', mode=MODE_TYPE)
    _Node_XY_26b_x = INT(name='x', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Offset-B13')))
    _Node_XY_26b_y = INT(name='y', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Offset-B13')))
    Node_XY_26b._cont = ASN1Dict([
        ('x', _Node_XY_26b_x),
        ('y', _Node_XY_26b_y),
        ])
    Node_XY_26b._ext = None
    
    #-----< Node-XY-28b >-----#
    Node_XY_28b = SEQ(name='Node-XY-28b', mode=MODE_TYPE)
    _Node_XY_28b_x = INT(name='x', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Offset-B14')))
    _Node_XY_28b_y = INT(name='y', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Offset-B14')))
    Node_XY_28b._cont = ASN1Dict([
        ('x', _Node_XY_28b_x),
        ('y', _Node_XY_28b_y),
        ])
    Node_XY_28b._ext = None
    
    #-----< Node-XY-32b >-----#
    Node_XY_32b = SEQ(name='Node-XY-32b', mode=MODE_TYPE)
    _Node_XY_32b_x = INT(name='x', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Offset-B16')))
    _Node_XY_32b_y = INT(name='y', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Offset-B16')))
    Node_XY_32b._cont = ASN1Dict([
        ('x', _Node_XY_32b_x),
        ('y', _Node_XY_32b_y),
        ])
    Node_XY_32b._ext = None
    
    #-----< NodeListXY >-----#
    NodeListXY = CHOICE(name='NodeListXY', mode=MODE_TYPE)
    _NodeListXY_nodes = SEQ_OF(name='nodes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'NodeSetXY')))
    _NodeListXY_computed = SEQ(name='computed', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'ComputedLane')))
    NodeListXY._cont = ASN1Dict([
        ('nodes', _NodeListXY_nodes),
        ('computed', _NodeListXY_computed),
        ])
    NodeListXY._ext = []
    
    #-----< NodeOffsetPointXY >-----#
    NodeOffsetPointXY = CHOICE(name='NodeOffsetPointXY', mode=MODE_TYPE)
    _NodeOffsetPointXY_node_XY1 = SEQ(name='node-XY1', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Node-XY-20b')))
    _NodeOffsetPointXY_node_XY2 = SEQ(name='node-XY2', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Node-XY-22b')))
    _NodeOffsetPointXY_node_XY3 = SEQ(name='node-XY3', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Node-XY-24b')))
    _NodeOffsetPointXY_node_XY4 = SEQ(name='node-XY4', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Node-XY-26b')))
    _NodeOffsetPointXY_node_XY5 = SEQ(name='node-XY5', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Node-XY-28b')))
    _NodeOffsetPointXY_node_XY6 = SEQ(name='node-XY6', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Node-XY-32b')))
    _NodeOffsetPointXY_node_LatLon = SEQ(name='node-LatLon', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Node-LLmD-64b')))
    _NodeOffsetPointXY_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    __NodeOffsetPointXY_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___NodeOffsetPointXY_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ___NodeOffsetPointXY_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __NodeOffsetPointXY_regional_regionId._const_tab = ___NodeOffsetPointXY_regional_regionId_tab
    __NodeOffsetPointXY_regional_regionId._const_tab_at = None
    __NodeOffsetPointXY_regional_regionId._const_tab_id = 'id'
    __NodeOffsetPointXY_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___NodeOffsetPointXY_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ___NodeOffsetPointXY_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __NodeOffsetPointXY_regional_regExtValue._const_tab = ___NodeOffsetPointXY_regional_regExtValue_tab
    __NodeOffsetPointXY_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __NodeOffsetPointXY_regional_regExtValue._const_tab_id = 'Type'
    _NodeOffsetPointXY_regional._cont = ASN1Dict([
        ('regionId', __NodeOffsetPointXY_regional_regionId),
        ('regExtValue', __NodeOffsetPointXY_regional_regExtValue),
        ])
    _NodeOffsetPointXY_regional._ext = None
    NodeOffsetPointXY._cont = ASN1Dict([
        ('node-XY1', _NodeOffsetPointXY_node_XY1),
        ('node-XY2', _NodeOffsetPointXY_node_XY2),
        ('node-XY3', _NodeOffsetPointXY_node_XY3),
        ('node-XY4', _NodeOffsetPointXY_node_XY4),
        ('node-XY5', _NodeOffsetPointXY_node_XY5),
        ('node-XY6', _NodeOffsetPointXY_node_XY6),
        ('node-LatLon', _NodeOffsetPointXY_node_LatLon),
        ('regional', _NodeOffsetPointXY_regional),
        ])
    NodeOffsetPointXY._ext = None
    
    #-----< NodeSetXY >-----#
    NodeSetXY = SEQ_OF(name='NodeSetXY', mode=MODE_TYPE)
    _NodeSetXY__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'NodeXY')))
    NodeSetXY._cont = _NodeSetXY__item_
    NodeSetXY._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=2, ub=63)], ev=None, er=[])
    
    #-----< NodeXY >-----#
    NodeXY = SEQ(name='NodeXY', mode=MODE_TYPE)
    _NodeXY_delta = CHOICE(name='delta', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('DSRC', 'NodeOffsetPointXY')))
    _NodeXY_attributes = SEQ(name='attributes', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'NodeAttributeSetXY')), opt=True)
    NodeXY._cont = ASN1Dict([
        ('delta', _NodeXY_delta),
        ('attributes', _NodeXY_attributes),
        ])
    NodeXY._ext = []
    
    #-----< OverlayLaneList >-----#
    OverlayLaneList = SEQ_OF(name='OverlayLaneList', mode=MODE_TYPE)
    _OverlayLaneList__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'LaneID')))
    OverlayLaneList._cont = _OverlayLaneList__item_
    OverlayLaneList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=5)], ev=None, er=[])
    
    #-----< Position3D >-----#
    Position3D = SEQ(name='Position3D', mode=MODE_TYPE)
    _Position3D_lat = INT(name='lat', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Latitude')))
    _Position3D_long = INT(name='long', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Longitude')))
    _Position3D_elevation = INT(name='elevation', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Elevation')), opt=True)
    _Position3D_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __Position3D_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    ___Position3D_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____Position3D_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    _____Position3D_regional__item__regionId_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'Position3D-addGrpC')))
    ____Position3D_regional__item__regionId_tab._val = ASN1Set(rv=[dict([('Type', _____Position3D_regional__item__regionId_tab_val_Type_0), ('id', 3)])], rr=[], ev=None, er=[])
    ___Position3D_regional__item__regionId._const_tab = ____Position3D_regional__item__regionId_tab
    ___Position3D_regional__item__regionId._const_tab_at = None
    ___Position3D_regional__item__regionId._const_tab_id = 'id'
    ___Position3D_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___Position3D_regional__item__regExtValue._const_tab = ____Position3D_regional__item__regionId_tab
    ___Position3D_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___Position3D_regional__item__regExtValue._const_tab_id = 'Type'
    __Position3D_regional__item_._cont = ASN1Dict([
        ('regionId', ___Position3D_regional__item__regionId),
        ('regExtValue', ___Position3D_regional__item__regExtValue),
        ])
    __Position3D_regional__item_._ext = None
    _Position3D_regional._cont = __Position3D_regional__item_
    _Position3D_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    Position3D._cont = ASN1Dict([
        ('lat', _Position3D_lat),
        ('long', _Position3D_long),
        ('elevation', _Position3D_elevation),
        ('regional', _Position3D_regional),
        ])
    Position3D._ext = []
    
    #-----< PreemptPriorityList >-----#
    PreemptPriorityList = SEQ_OF(name='PreemptPriorityList', mode=MODE_TYPE)
    _PreemptPriorityList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'SignalControlZone')))
    PreemptPriorityList._cont = _PreemptPriorityList__item_
    PreemptPriorityList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< RegulatorySpeedLimit >-----#
    RegulatorySpeedLimit = SEQ(name='RegulatorySpeedLimit', mode=MODE_TYPE)
    _RegulatorySpeedLimit_type = ENUM(name='type', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'SpeedLimitType')))
    _RegulatorySpeedLimit_speed = INT(name='speed', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Velocity')))
    RegulatorySpeedLimit._cont = ASN1Dict([
        ('type', _RegulatorySpeedLimit_type),
        ('speed', _RegulatorySpeedLimit_speed),
        ])
    RegulatorySpeedLimit._ext = None
    
    #-----< RequestorDescription >-----#
    RequestorDescription = SEQ(name='RequestorDescription', mode=MODE_TYPE)
    _RequestorDescription_id = CHOICE(name='id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('DSRC', 'VehicleID')))
    _RequestorDescription_type = SEQ(name='type', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RequestorType')), opt=True)
    _RequestorDescription_position = SEQ(name='position', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RequestorPositionVector')), opt=True)
    _RequestorDescription_name = STR_IA5(name='name', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DescriptiveName')), opt=True)
    _RequestorDescription_routeName = STR_IA5(name='routeName', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DescriptiveName')), opt=True)
    _RequestorDescription_transitStatus = BIT_STR(name='transitStatus', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'TransitVehicleStatus')), opt=True)
    _RequestorDescription_transitOccupancy = ENUM(name='transitOccupancy', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'TransitVehicleOccupancy')), opt=True)
    _RequestorDescription_transitSchedule = INT(name='transitSchedule', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DeltaTime')), opt=True)
    _RequestorDescription_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __RequestorDescription_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    ___RequestorDescription_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____RequestorDescription_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____RequestorDescription_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___RequestorDescription_regional__item__regionId._const_tab = ____RequestorDescription_regional__item__regionId_tab
    ___RequestorDescription_regional__item__regionId._const_tab_at = None
    ___RequestorDescription_regional__item__regionId._const_tab_id = 'id'
    ___RequestorDescription_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____RequestorDescription_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____RequestorDescription_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___RequestorDescription_regional__item__regExtValue._const_tab = ____RequestorDescription_regional__item__regExtValue_tab
    ___RequestorDescription_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___RequestorDescription_regional__item__regExtValue._const_tab_id = 'Type'
    __RequestorDescription_regional__item_._cont = ASN1Dict([
        ('regionId', ___RequestorDescription_regional__item__regionId),
        ('regExtValue', ___RequestorDescription_regional__item__regExtValue),
        ])
    __RequestorDescription_regional__item_._ext = None
    _RequestorDescription_regional._cont = __RequestorDescription_regional__item_
    _RequestorDescription_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    RequestorDescription._cont = ASN1Dict([
        ('id', _RequestorDescription_id),
        ('type', _RequestorDescription_type),
        ('position', _RequestorDescription_position),
        ('name', _RequestorDescription_name),
        ('routeName', _RequestorDescription_routeName),
        ('transitStatus', _RequestorDescription_transitStatus),
        ('transitOccupancy', _RequestorDescription_transitOccupancy),
        ('transitSchedule', _RequestorDescription_transitSchedule),
        ('regional', _RequestorDescription_regional),
        ])
    RequestorDescription._ext = []
    
    #-----< RequestorPositionVector >-----#
    RequestorPositionVector = SEQ(name='RequestorPositionVector', mode=MODE_TYPE)
    _RequestorPositionVector_position = SEQ(name='position', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Position3D')))
    _RequestorPositionVector_heading = INT(name='heading', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Angle')), opt=True)
    _RequestorPositionVector_speed = SEQ(name='speed', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'TransmissionAndSpeed')), opt=True)
    RequestorPositionVector._cont = ASN1Dict([
        ('position', _RequestorPositionVector_position),
        ('heading', _RequestorPositionVector_heading),
        ('speed', _RequestorPositionVector_speed),
        ])
    RequestorPositionVector._ext = []
    
    #-----< RequestorType >-----#
    RequestorType = SEQ(name='RequestorType', mode=MODE_TYPE)
    _RequestorType_role = ENUM(name='role', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'BasicVehicleRole')))
    _RequestorType_subrole = ENUM(name='subrole', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RequestSubRole')), opt=True)
    _RequestorType_request = ENUM(name='request', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RequestImportanceLevel')), opt=True)
    _RequestorType_iso3883 = INT(name='iso3883', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ElectronicRegistrationIdentificationVehicleDataModule', 'Iso3833VehicleType')), opt=True)
    _RequestorType_hpmsType = ENUM(name='hpmsType', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'VehicleType')), opt=True)
    _RequestorType_regional = SEQ(name='regional', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RegionalExtension')), opt=True)
    __RequestorType_regional_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___RequestorType_regional_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ___RequestorType_regional_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __RequestorType_regional_regionId._const_tab = ___RequestorType_regional_regionId_tab
    __RequestorType_regional_regionId._const_tab_at = None
    __RequestorType_regional_regionId._const_tab_id = 'id'
    __RequestorType_regional_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___RequestorType_regional_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ___RequestorType_regional_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __RequestorType_regional_regExtValue._const_tab = ___RequestorType_regional_regExtValue_tab
    __RequestorType_regional_regExtValue._const_tab_at = ('..', 'regionId')
    __RequestorType_regional_regExtValue._const_tab_id = 'Type'
    _RequestorType_regional._cont = ASN1Dict([
        ('regionId', __RequestorType_regional_regionId),
        ('regExtValue', __RequestorType_regional_regExtValue),
        ])
    _RequestorType_regional._ext = None
    RequestorType._cont = ASN1Dict([
        ('role', _RequestorType_role),
        ('subrole', _RequestorType_subrole),
        ('request', _RequestorType_request),
        ('iso3883', _RequestorType_iso3883),
        ('hpmsType', _RequestorType_hpmsType),
        ('regional', _RequestorType_regional),
        ])
    RequestorType._ext = []
    
    #-----< RestrictionClassAssignment >-----#
    RestrictionClassAssignment = SEQ(name='RestrictionClassAssignment', mode=MODE_TYPE)
    _RestrictionClassAssignment_id = INT(name='id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RestrictionClassID')))
    _RestrictionClassAssignment_users = SEQ_OF(name='users', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RestrictionUserTypeList')))
    RestrictionClassAssignment._cont = ASN1Dict([
        ('id', _RestrictionClassAssignment_id),
        ('users', _RestrictionClassAssignment_users),
        ])
    RestrictionClassAssignment._ext = None
    
    #-----< RestrictionClassList >-----#
    RestrictionClassList = SEQ_OF(name='RestrictionClassList', mode=MODE_TYPE)
    _RestrictionClassList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RestrictionClassAssignment')))
    RestrictionClassList._cont = _RestrictionClassList__item_
    RestrictionClassList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=254)], ev=None, er=[])
    
    #-----< RestrictionUserTypeList >-----#
    RestrictionUserTypeList = SEQ_OF(name='RestrictionUserTypeList', mode=MODE_TYPE)
    _RestrictionUserTypeList__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RestrictionUserType')))
    RestrictionUserTypeList._cont = _RestrictionUserTypeList__item_
    RestrictionUserTypeList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< RestrictionUserType >-----#
    RestrictionUserType = CHOICE(name='RestrictionUserType', mode=MODE_TYPE)
    _RestrictionUserType_basicType = ENUM(name='basicType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RestrictionAppliesTo')))
    _RestrictionUserType_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __RestrictionUserType_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    ___RestrictionUserType_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____RestrictionUserType_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    _____RestrictionUserType_regional__item__regionId_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'RestrictionUserType-addGrpC')))
    ____RestrictionUserType_regional__item__regionId_tab._val = ASN1Set(rv=[dict([('Type', _____RestrictionUserType_regional__item__regionId_tab_val_Type_0), ('id', 3)])], rr=[], ev=None, er=[])
    ___RestrictionUserType_regional__item__regionId._const_tab = ____RestrictionUserType_regional__item__regionId_tab
    ___RestrictionUserType_regional__item__regionId._const_tab_at = None
    ___RestrictionUserType_regional__item__regionId._const_tab_id = 'id'
    ___RestrictionUserType_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___RestrictionUserType_regional__item__regExtValue._const_tab = ____RestrictionUserType_regional__item__regionId_tab
    ___RestrictionUserType_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___RestrictionUserType_regional__item__regExtValue._const_tab_id = 'Type'
    __RestrictionUserType_regional__item_._cont = ASN1Dict([
        ('regionId', ___RestrictionUserType_regional__item__regionId),
        ('regExtValue', ___RestrictionUserType_regional__item__regExtValue),
        ])
    __RestrictionUserType_regional__item_._ext = None
    _RestrictionUserType_regional._cont = __RestrictionUserType_regional__item_
    _RestrictionUserType_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    RestrictionUserType._cont = ASN1Dict([
        ('basicType', _RestrictionUserType_basicType),
        ('regional', _RestrictionUserType_regional),
        ])
    RestrictionUserType._ext = []
    
    #-----< RoadLaneSetList >-----#
    RoadLaneSetList = SEQ_OF(name='RoadLaneSetList', mode=MODE_TYPE)
    _RoadLaneSetList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'GenericLane')))
    RoadLaneSetList._cont = _RoadLaneSetList__item_
    RoadLaneSetList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    
    #-----< RoadSegmentReferenceID >-----#
    RoadSegmentReferenceID = SEQ(name='RoadSegmentReferenceID', mode=MODE_TYPE)
    _RoadSegmentReferenceID_region = INT(name='region', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RoadRegulatorID')), opt=True)
    _RoadSegmentReferenceID_id = INT(name='id', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RoadSegmentID')))
    RoadSegmentReferenceID._cont = ASN1Dict([
        ('region', _RoadSegmentReferenceID_region),
        ('id', _RoadSegmentReferenceID_id),
        ])
    RoadSegmentReferenceID._ext = None
    
    #-----< RoadSegment >-----#
    RoadSegment = SEQ(name='RoadSegment', mode=MODE_TYPE)
    _RoadSegment_name = STR_IA5(name='name', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DescriptiveName')), opt=True)
    _RoadSegment_id = SEQ(name='id', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RoadSegmentReferenceID')))
    _RoadSegment_revision = INT(name='revision', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'MsgCount')))
    _RoadSegment_refPoint = SEQ(name='refPoint', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Position3D')))
    _RoadSegment_laneWidth = INT(name='laneWidth', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'LaneWidth')), opt=True)
    _RoadSegment_speedLimits = SEQ_OF(name='speedLimits', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'SpeedLimitList')), opt=True)
    _RoadSegment_roadLaneSet = SEQ_OF(name='roadLaneSet', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RoadLaneSetList')))
    _RoadSegment_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __RoadSegment_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    ___RoadSegment_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____RoadSegment_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____RoadSegment_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___RoadSegment_regional__item__regionId._const_tab = ____RoadSegment_regional__item__regionId_tab
    ___RoadSegment_regional__item__regionId._const_tab_at = None
    ___RoadSegment_regional__item__regionId._const_tab_id = 'id'
    ___RoadSegment_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____RoadSegment_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____RoadSegment_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___RoadSegment_regional__item__regExtValue._const_tab = ____RoadSegment_regional__item__regExtValue_tab
    ___RoadSegment_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___RoadSegment_regional__item__regExtValue._const_tab_id = 'Type'
    __RoadSegment_regional__item_._cont = ASN1Dict([
        ('regionId', ___RoadSegment_regional__item__regionId),
        ('regExtValue', ___RoadSegment_regional__item__regExtValue),
        ])
    __RoadSegment_regional__item_._ext = None
    _RoadSegment_regional._cont = __RoadSegment_regional__item_
    _RoadSegment_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    RoadSegment._cont = ASN1Dict([
        ('name', _RoadSegment_name),
        ('id', _RoadSegment_id),
        ('revision', _RoadSegment_revision),
        ('refPoint', _RoadSegment_refPoint),
        ('laneWidth', _RoadSegment_laneWidth),
        ('speedLimits', _RoadSegment_speedLimits),
        ('roadLaneSet', _RoadSegment_roadLaneSet),
        ('regional', _RoadSegment_regional),
        ])
    RoadSegment._ext = []
    
    #-----< RoadSegmentList >-----#
    RoadSegmentList = SEQ_OF(name='RoadSegmentList', mode=MODE_TYPE)
    _RoadSegmentList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RoadSegment')))
    RoadSegmentList._cont = _RoadSegmentList__item_
    RoadSegmentList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< SegmentAttributeXYList >-----#
    SegmentAttributeXYList = SEQ_OF(name='SegmentAttributeXYList', mode=MODE_TYPE)
    _SegmentAttributeXYList__item_ = ENUM(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'SegmentAttributeXY')))
    SegmentAttributeXYList._cont = _SegmentAttributeXYList__item_
    SegmentAttributeXYList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    
    #-----< SignalControlZone >-----#
    SignalControlZone = SEQ(name='SignalControlZone', mode=MODE_TYPE)
    _SignalControlZone_zone = SEQ(name='zone', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    __SignalControlZone_zone_regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ___SignalControlZone_zone_regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ___SignalControlZone_zone_regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __SignalControlZone_zone_regionId._const_tab = ___SignalControlZone_zone_regionId_tab
    __SignalControlZone_zone_regionId._const_tab_at = None
    __SignalControlZone_zone_regionId._const_tab_id = 'id'
    __SignalControlZone_zone_regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___SignalControlZone_zone_regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ___SignalControlZone_zone_regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    __SignalControlZone_zone_regExtValue._const_tab = ___SignalControlZone_zone_regExtValue_tab
    __SignalControlZone_zone_regExtValue._const_tab_at = ('..', 'regionId')
    __SignalControlZone_zone_regExtValue._const_tab_id = 'Type'
    _SignalControlZone_zone._cont = ASN1Dict([
        ('regionId', __SignalControlZone_zone_regionId),
        ('regExtValue', __SignalControlZone_zone_regExtValue),
        ])
    _SignalControlZone_zone._ext = None
    SignalControlZone._cont = ASN1Dict([
        ('zone', _SignalControlZone_zone),
        ])
    SignalControlZone._ext = []
    
    #-----< SignalRequesterInfo >-----#
    SignalRequesterInfo = SEQ(name='SignalRequesterInfo', mode=MODE_TYPE)
    _SignalRequesterInfo_id = CHOICE(name='id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('DSRC', 'VehicleID')))
    _SignalRequesterInfo_request = INT(name='request', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RequestID')))
    _SignalRequesterInfo_sequenceNumber = INT(name='sequenceNumber', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'MsgCount')))
    _SignalRequesterInfo_role = ENUM(name='role', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'BasicVehicleRole')), opt=True)
    _SignalRequesterInfo_typeData = SEQ(name='typeData', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RequestorType')), opt=True)
    SignalRequesterInfo._cont = ASN1Dict([
        ('id', _SignalRequesterInfo_id),
        ('request', _SignalRequesterInfo_request),
        ('sequenceNumber', _SignalRequesterInfo_sequenceNumber),
        ('role', _SignalRequesterInfo_role),
        ('typeData', _SignalRequesterInfo_typeData),
        ])
    SignalRequesterInfo._ext = []
    
    #-----< SignalRequestList >-----#
    SignalRequestList = SEQ_OF(name='SignalRequestList', mode=MODE_TYPE)
    _SignalRequestList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'SignalRequestPackage')))
    SignalRequestList._cont = _SignalRequestList__item_
    SignalRequestList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< SignalRequestPackage >-----#
    SignalRequestPackage = SEQ(name='SignalRequestPackage', mode=MODE_TYPE)
    _SignalRequestPackage_request = SEQ(name='request', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'SignalRequest')))
    _SignalRequestPackage_minute = INT(name='minute', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'MinuteOfTheYear')), opt=True)
    _SignalRequestPackage_second = INT(name='second', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DSecond')), opt=True)
    _SignalRequestPackage_duration = INT(name='duration', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DSecond')), opt=True)
    _SignalRequestPackage_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SignalRequestPackage_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    ___SignalRequestPackage_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____SignalRequestPackage_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____SignalRequestPackage_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SignalRequestPackage_regional__item__regionId._const_tab = ____SignalRequestPackage_regional__item__regionId_tab
    ___SignalRequestPackage_regional__item__regionId._const_tab_at = None
    ___SignalRequestPackage_regional__item__regionId._const_tab_id = 'id'
    ___SignalRequestPackage_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____SignalRequestPackage_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____SignalRequestPackage_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SignalRequestPackage_regional__item__regExtValue._const_tab = ____SignalRequestPackage_regional__item__regExtValue_tab
    ___SignalRequestPackage_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___SignalRequestPackage_regional__item__regExtValue._const_tab_id = 'Type'
    __SignalRequestPackage_regional__item_._cont = ASN1Dict([
        ('regionId', ___SignalRequestPackage_regional__item__regionId),
        ('regExtValue', ___SignalRequestPackage_regional__item__regExtValue),
        ])
    __SignalRequestPackage_regional__item_._ext = None
    _SignalRequestPackage_regional._cont = __SignalRequestPackage_regional__item_
    _SignalRequestPackage_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    SignalRequestPackage._cont = ASN1Dict([
        ('request', _SignalRequestPackage_request),
        ('minute', _SignalRequestPackage_minute),
        ('second', _SignalRequestPackage_second),
        ('duration', _SignalRequestPackage_duration),
        ('regional', _SignalRequestPackage_regional),
        ])
    SignalRequestPackage._ext = []
    
    #-----< SignalRequest >-----#
    SignalRequest = SEQ(name='SignalRequest', mode=MODE_TYPE)
    _SignalRequest_id = SEQ(name='id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'IntersectionReferenceID')))
    _SignalRequest_requestID = INT(name='requestID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'RequestID')))
    _SignalRequest_requestType = ENUM(name='requestType', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'PriorityRequestType')))
    _SignalRequest_inBoundLane = CHOICE(name='inBoundLane', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('DSRC', 'IntersectionAccessPoint')))
    _SignalRequest_outBoundLane = CHOICE(name='outBoundLane', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('DSRC', 'IntersectionAccessPoint')), opt=True)
    _SignalRequest_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SignalRequest_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    ___SignalRequest_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____SignalRequest_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____SignalRequest_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SignalRequest_regional__item__regionId._const_tab = ____SignalRequest_regional__item__regionId_tab
    ___SignalRequest_regional__item__regionId._const_tab_at = None
    ___SignalRequest_regional__item__regionId._const_tab_id = 'id'
    ___SignalRequest_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____SignalRequest_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____SignalRequest_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SignalRequest_regional__item__regExtValue._const_tab = ____SignalRequest_regional__item__regExtValue_tab
    ___SignalRequest_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___SignalRequest_regional__item__regExtValue._const_tab_id = 'Type'
    __SignalRequest_regional__item_._cont = ASN1Dict([
        ('regionId', ___SignalRequest_regional__item__regionId),
        ('regExtValue', ___SignalRequest_regional__item__regExtValue),
        ])
    __SignalRequest_regional__item_._ext = None
    _SignalRequest_regional._cont = __SignalRequest_regional__item_
    _SignalRequest_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    SignalRequest._cont = ASN1Dict([
        ('id', _SignalRequest_id),
        ('requestID', _SignalRequest_requestID),
        ('requestType', _SignalRequest_requestType),
        ('inBoundLane', _SignalRequest_inBoundLane),
        ('outBoundLane', _SignalRequest_outBoundLane),
        ('regional', _SignalRequest_regional),
        ])
    SignalRequest._ext = []
    
    #-----< SignalStatusList >-----#
    SignalStatusList = SEQ_OF(name='SignalStatusList', mode=MODE_TYPE)
    _SignalStatusList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'SignalStatus')))
    SignalStatusList._cont = _SignalStatusList__item_
    SignalStatusList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< SignalStatusPackageList >-----#
    SignalStatusPackageList = SEQ_OF(name='SignalStatusPackageList', mode=MODE_TYPE)
    _SignalStatusPackageList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'SignalStatusPackage')))
    SignalStatusPackageList._cont = _SignalStatusPackageList__item_
    SignalStatusPackageList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< SignalStatusPackage >-----#
    SignalStatusPackage = SEQ(name='SignalStatusPackage', mode=MODE_TYPE)
    _SignalStatusPackage_requester = SEQ(name='requester', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'SignalRequesterInfo')), opt=True)
    _SignalStatusPackage_inboundOn = CHOICE(name='inboundOn', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('DSRC', 'IntersectionAccessPoint')))
    _SignalStatusPackage_outboundOn = CHOICE(name='outboundOn', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('DSRC', 'IntersectionAccessPoint')), opt=True)
    _SignalStatusPackage_minute = INT(name='minute', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'MinuteOfTheYear')), opt=True)
    _SignalStatusPackage_second = INT(name='second', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DSecond')), opt=True)
    _SignalStatusPackage_duration = INT(name='duration', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'DSecond')), opt=True)
    _SignalStatusPackage_status = ENUM(name='status', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'PrioritizationResponseStatus')))
    _SignalStatusPackage_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SignalStatusPackage_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    ___SignalStatusPackage_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____SignalStatusPackage_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    _____SignalStatusPackage_regional__item__regionId_tab_val_Type_0 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('AddGrpC', 'SignalStatusPackage-addGrpC')))
    ____SignalStatusPackage_regional__item__regionId_tab._val = ASN1Set(rv=[dict([('Type', _____SignalStatusPackage_regional__item__regionId_tab_val_Type_0), ('id', 3)])], rr=[], ev=None, er=[])
    ___SignalStatusPackage_regional__item__regionId._const_tab = ____SignalStatusPackage_regional__item__regionId_tab
    ___SignalStatusPackage_regional__item__regionId._const_tab_at = None
    ___SignalStatusPackage_regional__item__regionId._const_tab_id = 'id'
    ___SignalStatusPackage_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ___SignalStatusPackage_regional__item__regExtValue._const_tab = ____SignalStatusPackage_regional__item__regionId_tab
    ___SignalStatusPackage_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___SignalStatusPackage_regional__item__regExtValue._const_tab_id = 'Type'
    __SignalStatusPackage_regional__item_._cont = ASN1Dict([
        ('regionId', ___SignalStatusPackage_regional__item__regionId),
        ('regExtValue', ___SignalStatusPackage_regional__item__regExtValue),
        ])
    __SignalStatusPackage_regional__item_._ext = None
    _SignalStatusPackage_regional._cont = __SignalStatusPackage_regional__item_
    _SignalStatusPackage_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    SignalStatusPackage._cont = ASN1Dict([
        ('requester', _SignalStatusPackage_requester),
        ('inboundOn', _SignalStatusPackage_inboundOn),
        ('outboundOn', _SignalStatusPackage_outboundOn),
        ('minute', _SignalStatusPackage_minute),
        ('second', _SignalStatusPackage_second),
        ('duration', _SignalStatusPackage_duration),
        ('status', _SignalStatusPackage_status),
        ('regional', _SignalStatusPackage_regional),
        ])
    SignalStatusPackage._ext = []
    
    #-----< SignalStatus >-----#
    SignalStatus = SEQ(name='SignalStatus', mode=MODE_TYPE)
    _SignalStatus_sequenceNumber = INT(name='sequenceNumber', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'MsgCount')))
    _SignalStatus_id = SEQ(name='id', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'IntersectionReferenceID')))
    _SignalStatus_sigStatus = SEQ_OF(name='sigStatus', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'SignalStatusPackageList')))
    _SignalStatus_regional = SEQ_OF(name='regional', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SignalStatus_regional__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegionalExtension')))
    ___SignalStatus_regional__item__regionId = INT(name='regionId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['id']))
    ____SignalStatus_regional__item__regionId_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____SignalStatus_regional__item__regionId_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SignalStatus_regional__item__regionId._const_tab = ____SignalStatus_regional__item__regionId_tab
    ___SignalStatus_regional__item__regionId._const_tab_at = None
    ___SignalStatus_regional__item__regionId._const_tab_id = 'id'
    ___SignalStatus_regional__item__regExtValue = OPEN(name='regExtValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('DSRC', 'REG-EXT-ID-AND-TYPE'), ['Type']))
    ____SignalStatus_regional__item__regExtValue_tab = CLASS(name='_tab_REG-EXT-ID-AND-TYPE', mode=MODE_SET, typeref=ASN1RefType(('DSRC', 'REG-EXT-ID-AND-TYPE')))
    ____SignalStatus_regional__item__regExtValue_tab._val = ASN1Set(rv=[], rr=[], ev=None, er=[])
    ___SignalStatus_regional__item__regExtValue._const_tab = ____SignalStatus_regional__item__regExtValue_tab
    ___SignalStatus_regional__item__regExtValue._const_tab_at = ('..', 'regionId')
    ___SignalStatus_regional__item__regExtValue._const_tab_id = 'Type'
    __SignalStatus_regional__item_._cont = ASN1Dict([
        ('regionId', ___SignalStatus_regional__item__regionId),
        ('regExtValue', ___SignalStatus_regional__item__regExtValue),
        ])
    __SignalStatus_regional__item_._ext = None
    _SignalStatus_regional._cont = __SignalStatus_regional__item_
    _SignalStatus_regional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=None, er=[])
    SignalStatus._cont = ASN1Dict([
        ('sequenceNumber', _SignalStatus_sequenceNumber),
        ('id', _SignalStatus_id),
        ('sigStatus', _SignalStatus_sigStatus),
        ('regional', _SignalStatus_regional),
        ])
    SignalStatus._ext = []
    
    #-----< SpeedLimitList >-----#
    SpeedLimitList = SEQ_OF(name='SpeedLimitList', mode=MODE_TYPE)
    _SpeedLimitList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('DSRC', 'RegulatorySpeedLimit')))
    SpeedLimitList._cont = _SpeedLimitList__item_
    SpeedLimitList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=9)], ev=None, er=[])
    
    #-----< SpeedLimitType >-----#
    SpeedLimitType = ENUM(name='SpeedLimitType', mode=MODE_TYPE)
    SpeedLimitType._cont = ASN1Dict([('unknown', 0), ('maxSpeedInSchoolZone', 1), ('maxSpeedInSchoolZoneWhenChildrenArePresent', 2), ('maxSpeedInConstructionZone', 3), ('vehicleMinSpeed', 4), ('vehicleMaxSpeed', 5), ('vehicleNightMaxSpeed', 6), ('truckMinSpeed', 7), ('truckMaxSpeed', 8), ('truckNightMaxSpeed', 9), ('vehiclesWithTrailersMinSpeed', 10), ('vehiclesWithTrailersMaxSpeed', 11), ('vehiclesWithTrailersNightMaxSpeed', 12)])
    SpeedLimitType._ext = []
    
    #-----< TimeChangeDetails >-----#
    TimeChangeDetails = SEQ(name='TimeChangeDetails', mode=MODE_TYPE)
    _TimeChangeDetails_startTime = INT(name='startTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'TimeMark')), opt=True)
    _TimeChangeDetails_minEndTime = INT(name='minEndTime', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'TimeMark')))
    _TimeChangeDetails_maxEndTime = INT(name='maxEndTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'TimeMark')), opt=True)
    _TimeChangeDetails_likelyTime = INT(name='likelyTime', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'TimeMark')), opt=True)
    _TimeChangeDetails_confidence = INT(name='confidence', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'TimeIntervalConfidence')), opt=True)
    _TimeChangeDetails_nextTime = INT(name='nextTime', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'TimeMark')), opt=True)
    TimeChangeDetails._cont = ASN1Dict([
        ('startTime', _TimeChangeDetails_startTime),
        ('minEndTime', _TimeChangeDetails_minEndTime),
        ('maxEndTime', _TimeChangeDetails_maxEndTime),
        ('likelyTime', _TimeChangeDetails_likelyTime),
        ('confidence', _TimeChangeDetails_confidence),
        ('nextTime', _TimeChangeDetails_nextTime),
        ])
    TimeChangeDetails._ext = None
    
    #-----< TimeMark >-----#
    TimeMark = INT(name='TimeMark', mode=MODE_TYPE)
    TimeMark._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=36001)], ev=None, er=[])
    
    #-----< TransmissionAndSpeed >-----#
    TransmissionAndSpeed = SEQ(name='TransmissionAndSpeed', mode=MODE_TYPE)
    _TransmissionAndSpeed_transmisson = ENUM(name='transmisson', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'TransmissionState')))
    _TransmissionAndSpeed_speed = INT(name='speed', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'Velocity')))
    TransmissionAndSpeed._cont = ASN1Dict([
        ('transmisson', _TransmissionAndSpeed_transmisson),
        ('speed', _TransmissionAndSpeed_speed),
        ])
    TransmissionAndSpeed._ext = None
    
    #-----< VehicleID >-----#
    VehicleID = CHOICE(name='VehicleID', mode=MODE_TYPE)
    _VehicleID_entityID = OCT_STR(name='entityID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('DSRC', 'TemporaryID')))
    _VehicleID_stationID = INT(name='stationID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'StationID')))
    VehicleID._cont = ASN1Dict([
        ('entityID', _VehicleID_entityID),
        ('stationID', _VehicleID_stationID),
        ])
    VehicleID._ext = None
    
    #-----< AdvisorySpeedType >-----#
    AdvisorySpeedType = ENUM(name='AdvisorySpeedType', mode=MODE_TYPE)
    AdvisorySpeedType._cont = ASN1Dict([('none', 0), ('greenwave', 1), ('ecoDrive', 2), ('transit', 3)])
    AdvisorySpeedType._ext = []
    
    #-----< AllowedManeuvers >-----#
    AllowedManeuvers = BIT_STR(name='AllowedManeuvers', mode=MODE_TYPE)
    AllowedManeuvers._cont = ASN1Dict([('maneuverStraightAllowed', 0), ('maneuverLeftAllowed', 1), ('maneuverRightAllowed', 2), ('maneuverUTurnAllowed', 3), ('maneuverLeftTurnOnRedAllowed', 4), ('maneuverRightTurnOnRedAllowed', 5), ('maneuverLaneChangeAllowed', 6), ('maneuverNoStoppingAllowed', 7), ('yieldAllwaysRequired', 8), ('goWithHalt', 9), ('caution', 10), ('reserved1', 11)])
    AllowedManeuvers._const_sz = ASN1Set(rv=[12], rr=[], ev=None, er=[])
    
    #-----< Angle >-----#
    Angle = INT(name='Angle', mode=MODE_TYPE)
    Angle._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=28800)], ev=None, er=[])
    
    #-----< ApproachID >-----#
    ApproachID = INT(name='ApproachID', mode=MODE_TYPE)
    ApproachID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< BasicVehicleRole >-----#
    BasicVehicleRole = ENUM(name='BasicVehicleRole', mode=MODE_TYPE)
    BasicVehicleRole._cont = ASN1Dict([('basicVehicle', 0), ('publicTransport', 1), ('specialTransport', 2), ('dangerousGoods', 3), ('roadWork', 4), ('roadRescue', 5), ('emergency', 6), ('safetyCar', 7), ('none-unknown', 8), ('truck', 9), ('motorcycle', 10), ('roadSideSource', 11), ('police', 12), ('fire', 13), ('ambulance', 14), ('dot', 15), ('transit', 16), ('slowMoving', 17), ('stopNgo', 18), ('cyclist', 19), ('pedestrian', 20), ('nonMotorized', 21), ('military', 22)])
    BasicVehicleRole._ext = []
    
    #-----< DeltaAngle >-----#
    DeltaAngle = INT(name='DeltaAngle', mode=MODE_TYPE)
    DeltaAngle._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-150, ub=150)], ev=None, er=[])
    
    #-----< DeltaTime >-----#
    DeltaTime = INT(name='DeltaTime', mode=MODE_TYPE)
    DeltaTime._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-122, ub=121)], ev=None, er=[])
    
    #-----< DescriptiveName >-----#
    DescriptiveName = STR_IA5(name='DescriptiveName', mode=MODE_TYPE)
    DescriptiveName._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=63)], ev=None, er=[])
    
    #-----< DrivenLineOffsetLg >-----#
    DrivenLineOffsetLg = INT(name='DrivenLineOffsetLg', mode=MODE_TYPE)
    DrivenLineOffsetLg._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-32767, ub=32767)], ev=None, er=[])
    
    #-----< DrivenLineOffsetSm >-----#
    DrivenLineOffsetSm = INT(name='DrivenLineOffsetSm', mode=MODE_TYPE)
    DrivenLineOffsetSm._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-2047, ub=2047)], ev=None, er=[])
    
    #-----< DSecond >-----#
    DSecond = INT(name='DSecond', mode=MODE_TYPE)
    DSecond._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< DSRCmsgID >-----#
    DSRCmsgID = INT(name='DSRCmsgID', mode=MODE_TYPE)
    DSRCmsgID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=32767)], ev=None, er=[])
    
    #-----< mapData >-----#
    mapData = INT(name='mapData', mode=MODE_VALUE, typeref=ASN1RefType(('DSRC', 'DSRCmsgID')))
    mapData._val = 18
    
    #-----< signalPhaseAndTimingMessage >-----#
    signalPhaseAndTimingMessage = INT(name='signalPhaseAndTimingMessage', mode=MODE_VALUE, typeref=ASN1RefType(('DSRC', 'DSRCmsgID')))
    signalPhaseAndTimingMessage._val = 19
    
    #-----< signalRequestMessage >-----#
    signalRequestMessage = INT(name='signalRequestMessage', mode=MODE_VALUE, typeref=ASN1RefType(('DSRC', 'DSRCmsgID')))
    signalRequestMessage._val = 29
    
    #-----< signalStatusMessage >-----#
    signalStatusMessage = INT(name='signalStatusMessage', mode=MODE_VALUE, typeref=ASN1RefType(('DSRC', 'DSRCmsgID')))
    signalStatusMessage._val = 30
    
    #-----< Elevation >-----#
    Elevation = INT(name='Elevation', mode=MODE_TYPE)
    Elevation._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-4096, ub=61439)], ev=None, er=[])
    
    #-----< IntersectionID >-----#
    IntersectionID = INT(name='IntersectionID', mode=MODE_TYPE)
    IntersectionID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< IntersectionStatusObject >-----#
    IntersectionStatusObject = BIT_STR(name='IntersectionStatusObject', mode=MODE_TYPE)
    IntersectionStatusObject._cont = ASN1Dict([('manualControlIsEnabled', 0), ('stopTimeIsActivated', 1), ('failureFlash', 2), ('preemptIsActive', 3), ('signalPriorityIsActive', 4), ('fixedTimeOperation', 5), ('trafficDependentOperation', 6), ('standbyOperation', 7), ('failureMode', 8), ('off', 9), ('recentMAPmessageUpdate', 10), ('recentChangeInMAPassignedLanesIDsUsed', 11), ('noValidMAPisAvailableAtThisTime', 12), ('noValidSPATisAvailableAtThisTime', 13)])
    IntersectionStatusObject._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    #-----< LaneAttributes-Barrier >-----#
    LaneAttributes_Barrier = BIT_STR(name='LaneAttributes-Barrier', mode=MODE_TYPE)
    LaneAttributes_Barrier._cont = ASN1Dict([('median-RevocableLane', 0), ('median', 1), ('whiteLineHashing', 2), ('stripedLines', 3), ('doubleStripedLines', 4), ('trafficCones', 5), ('constructionBarrier', 6), ('trafficChannels', 7), ('lowCurbs', 8), ('highCurbs', 9)])
    LaneAttributes_Barrier._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    #-----< LaneAttributes-Bike >-----#
    LaneAttributes_Bike = BIT_STR(name='LaneAttributes-Bike', mode=MODE_TYPE)
    LaneAttributes_Bike._cont = ASN1Dict([('bikeRevocableLane', 0), ('pedestrianUseAllowed', 1), ('isBikeFlyOverLane', 2), ('fixedCycleTime', 3), ('biDirectionalCycleTimes', 4), ('isolatedByBarrier', 5), ('unsignalizedSegmentsPresent', 6)])
    LaneAttributes_Bike._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    #-----< LaneAttributes-Crosswalk >-----#
    LaneAttributes_Crosswalk = BIT_STR(name='LaneAttributes-Crosswalk', mode=MODE_TYPE)
    LaneAttributes_Crosswalk._cont = ASN1Dict([('crosswalkRevocableLane', 0), ('bicyleUseAllowed', 1), ('isXwalkFlyOverLane', 2), ('fixedCycleTime', 3), ('biDirectionalCycleTimes', 4), ('hasPushToWalkButton', 5), ('audioSupport', 6), ('rfSignalRequestPresent', 7), ('unsignalizedSegmentsPresent', 8)])
    LaneAttributes_Crosswalk._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    #-----< LaneAttributes-Parking >-----#
    LaneAttributes_Parking = BIT_STR(name='LaneAttributes-Parking', mode=MODE_TYPE)
    LaneAttributes_Parking._cont = ASN1Dict([('parkingRevocableLane', 0), ('parallelParkingInUse', 1), ('headInParkingInUse', 2), ('doNotParkZone', 3), ('parkingForBusUse', 4), ('parkingForTaxiUse', 5), ('noPublicParkingUse', 6)])
    LaneAttributes_Parking._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    #-----< LaneAttributes-Sidewalk >-----#
    LaneAttributes_Sidewalk = BIT_STR(name='LaneAttributes-Sidewalk', mode=MODE_TYPE)
    LaneAttributes_Sidewalk._cont = ASN1Dict([('sidewalk-RevocableLane', 0), ('bicyleUseAllowed', 1), ('isSidewalkFlyOverLane', 2), ('walkBikes', 3)])
    LaneAttributes_Sidewalk._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    #-----< LaneAttributes-Striping >-----#
    LaneAttributes_Striping = BIT_STR(name='LaneAttributes-Striping', mode=MODE_TYPE)
    LaneAttributes_Striping._cont = ASN1Dict([('stripeToConnectingLanesRevocableLane', 0), ('stripeDrawOnLeft', 1), ('stripeDrawOnRight', 2), ('stripeToConnectingLanesLeft', 3), ('stripeToConnectingLanesRight', 4), ('stripeToConnectingLanesAhead', 5)])
    LaneAttributes_Striping._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    #-----< LaneAttributes-TrackedVehicle >-----#
    LaneAttributes_TrackedVehicle = BIT_STR(name='LaneAttributes-TrackedVehicle', mode=MODE_TYPE)
    LaneAttributes_TrackedVehicle._cont = ASN1Dict([('spec-RevocableLane', 0), ('spec-commuterRailRoadTrack', 1), ('spec-lightRailRoadTrack', 2), ('spec-heavyRailRoadTrack', 3), ('spec-otherRailType', 4)])
    LaneAttributes_TrackedVehicle._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    #-----< LaneAttributes-Vehicle >-----#
    LaneAttributes_Vehicle = BIT_STR(name='LaneAttributes-Vehicle', mode=MODE_TYPE)
    LaneAttributes_Vehicle._cont = ASN1Dict([('isVehicleRevocableLane', 0), ('isVehicleFlyOverLane', 1), ('hovLaneUseOnly', 2), ('restrictedToBusUse', 3), ('restrictedToTaxiUse', 4), ('restrictedFromPublicUse', 5), ('hasIRbeaconCoverage', 6), ('permissionOnRequest', 7)])
    LaneAttributes_Vehicle._const_sz = ASN1Set(rv=[8], rr=[], ev=[], er=[])
    
    #-----< LaneConnectionID >-----#
    LaneConnectionID = INT(name='LaneConnectionID', mode=MODE_TYPE)
    LaneConnectionID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< LaneDirection >-----#
    LaneDirection = BIT_STR(name='LaneDirection', mode=MODE_TYPE)
    LaneDirection._cont = ASN1Dict([('ingressPath', 0), ('egressPath', 1)])
    LaneDirection._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    
    #-----< LaneID >-----#
    LaneID = INT(name='LaneID', mode=MODE_TYPE)
    LaneID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< LayerID >-----#
    LayerID = INT(name='LayerID', mode=MODE_TYPE)
    LayerID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=100)], ev=None, er=[])
    
    #-----< LayerType >-----#
    LayerType = ENUM(name='LayerType', mode=MODE_TYPE)
    LayerType._cont = ASN1Dict([('none', 0), ('mixedContent', 1), ('generalMapData', 2), ('intersectionData', 3), ('curveData', 4), ('roadwaySectionData', 5), ('parkingAreaData', 6), ('sharedLaneData', 7)])
    LayerType._ext = []
    
    #-----< LaneWidth >-----#
    LaneWidth = INT(name='LaneWidth', mode=MODE_TYPE)
    LaneWidth._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=32767)], ev=None, er=[])
    
    #-----< MergeDivergeNodeAngle >-----#
    MergeDivergeNodeAngle = INT(name='MergeDivergeNodeAngle', mode=MODE_TYPE)
    MergeDivergeNodeAngle._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-180, ub=180)], ev=None, er=[])
    
    #-----< MinuteOfTheYear >-----#
    MinuteOfTheYear = INT(name='MinuteOfTheYear', mode=MODE_TYPE)
    MinuteOfTheYear._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=527040)], ev=None, er=[])
    
    #-----< MovementPhaseState >-----#
    MovementPhaseState = ENUM(name='MovementPhaseState', mode=MODE_TYPE)
    MovementPhaseState._cont = ASN1Dict([('unavailable', 0), ('dark', 1), ('stop-Then-Proceed', 2), ('stop-And-Remain', 3), ('pre-Movement', 4), ('permissive-Movement-Allowed', 5), ('protected-Movement-Allowed', 6), ('permissive-clearance', 7), ('protected-clearance', 8), ('caution-Conflicting-Traffic', 9)])
    MovementPhaseState._ext = None
    
    #-----< MsgCount >-----#
    MsgCount = INT(name='MsgCount', mode=MODE_TYPE)
    MsgCount._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=None, er=[])
    
    #-----< Offset-B10 >-----#
    Offset_B10 = INT(name='Offset-B10', mode=MODE_TYPE)
    Offset_B10._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-512, ub=511)], ev=None, er=[])
    
    #-----< Offset-B11 >-----#
    Offset_B11 = INT(name='Offset-B11', mode=MODE_TYPE)
    Offset_B11._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-1024, ub=1023)], ev=None, er=[])
    
    #-----< Offset-B12 >-----#
    Offset_B12 = INT(name='Offset-B12', mode=MODE_TYPE)
    Offset_B12._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-2048, ub=2047)], ev=None, er=[])
    
    #-----< Offset-B13 >-----#
    Offset_B13 = INT(name='Offset-B13', mode=MODE_TYPE)
    Offset_B13._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-4096, ub=4095)], ev=None, er=[])
    
    #-----< Offset-B14 >-----#
    Offset_B14 = INT(name='Offset-B14', mode=MODE_TYPE)
    Offset_B14._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-8192, ub=8191)], ev=None, er=[])
    
    #-----< Offset-B16 >-----#
    Offset_B16 = INT(name='Offset-B16', mode=MODE_TYPE)
    Offset_B16._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-32768, ub=32767)], ev=None, er=[])
    
    #-----< PedestrianBicycleDetect >-----#
    PedestrianBicycleDetect = BOOL(name='PedestrianBicycleDetect', mode=MODE_TYPE)
    
    #-----< PrioritizationResponseStatus >-----#
    PrioritizationResponseStatus = ENUM(name='PrioritizationResponseStatus', mode=MODE_TYPE)
    PrioritizationResponseStatus._cont = ASN1Dict([('unknown', 0), ('requested', 1), ('processing', 2), ('watchOtherTraffic', 3), ('granted', 4), ('rejected', 5), ('maxPresence', 6), ('reserviceLocked', 7)])
    PrioritizationResponseStatus._ext = []
    
    #-----< PriorityRequestType >-----#
    PriorityRequestType = ENUM(name='PriorityRequestType', mode=MODE_TYPE)
    PriorityRequestType._cont = ASN1Dict([('priorityRequestTypeReserved', 0), ('priorityRequest', 1), ('priorityRequestUpdate', 2), ('priorityCancellation', 3)])
    PriorityRequestType._ext = []
    
    #-----< RegionId >-----#
    RegionId = INT(name='RegionId', mode=MODE_TYPE)
    RegionId._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< noRegion >-----#
    noRegion = INT(name='noRegion', mode=MODE_VALUE, typeref=ASN1RefType(('DSRC', 'RegionId')))
    noRegion._val = 0
    
    #-----< addGrpA >-----#
    addGrpA = INT(name='addGrpA', mode=MODE_VALUE, typeref=ASN1RefType(('DSRC', 'RegionId')))
    addGrpA._val = 1
    
    #-----< addGrpB >-----#
    addGrpB = INT(name='addGrpB', mode=MODE_VALUE, typeref=ASN1RefType(('DSRC', 'RegionId')))
    addGrpB._val = 2
    
    #-----< addGrpC >-----#
    addGrpC = INT(name='addGrpC', mode=MODE_VALUE, typeref=ASN1RefType(('DSRC', 'RegionId')))
    addGrpC._val = 3
    
    #-----< RequestID >-----#
    RequestID = INT(name='RequestID', mode=MODE_TYPE)
    RequestID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< RequestImportanceLevel >-----#
    RequestImportanceLevel = ENUM(name='RequestImportanceLevel', mode=MODE_TYPE)
    RequestImportanceLevel._cont = ASN1Dict([('requestImportanceLevelUnKnown', 0), ('requestImportanceLevel1', 1), ('requestImportanceLevel2', 2), ('requestImportanceLevel3', 3), ('requestImportanceLevel4', 4), ('requestImportanceLevel5', 5), ('requestImportanceLevel6', 6), ('requestImportanceLevel7', 7), ('requestImportanceLevel8', 8), ('requestImportanceLevel9', 9), ('requestImportanceLevel10', 10), ('requestImportanceLevel11', 11), ('requestImportanceLevel12', 12), ('requestImportanceLevel13', 13), ('requestImportanceLevel14', 14), ('requestImportanceReserved', 15)])
    RequestImportanceLevel._ext = None
    
    #-----< RequestSubRole >-----#
    RequestSubRole = ENUM(name='RequestSubRole', mode=MODE_TYPE)
    RequestSubRole._cont = ASN1Dict([('requestSubRoleUnKnown', 0), ('requestSubRole1', 1), ('requestSubRole2', 2), ('requestSubRole3', 3), ('requestSubRole4', 4), ('requestSubRole5', 5), ('requestSubRole6', 6), ('requestSubRole7', 7), ('requestSubRole8', 8), ('requestSubRole9', 9), ('requestSubRole10', 10), ('requestSubRole11', 11), ('requestSubRole12', 12), ('requestSubRole13', 13), ('requestSubRole14', 14), ('requestSubRoleReserved', 15)])
    RequestSubRole._ext = None
    
    #-----< RestrictionAppliesTo >-----#
    RestrictionAppliesTo = ENUM(name='RestrictionAppliesTo', mode=MODE_TYPE)
    RestrictionAppliesTo._cont = ASN1Dict([('none', 0), ('equippedTransit', 1), ('equippedTaxis', 2), ('equippedOther', 3), ('emissionCompliant', 4), ('equippedBicycle', 5), ('weightCompliant', 6), ('heightCompliant', 7), ('pedestrians', 8), ('slowMovingPersons', 9), ('wheelchairUsers', 10), ('visualDisabilities', 11), ('audioDisabilities', 12), ('otherUnknownDisabilities', 13)])
    RestrictionAppliesTo._ext = []
    
    #-----< RestrictionClassID >-----#
    RestrictionClassID = INT(name='RestrictionClassID', mode=MODE_TYPE)
    RestrictionClassID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< RoadRegulatorID >-----#
    RoadRegulatorID = INT(name='RoadRegulatorID', mode=MODE_TYPE)
    RoadRegulatorID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< RoadSegmentID >-----#
    RoadSegmentID = INT(name='RoadSegmentID', mode=MODE_TYPE)
    RoadSegmentID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< RoadwayCrownAngle >-----#
    RoadwayCrownAngle = INT(name='RoadwayCrownAngle', mode=MODE_TYPE)
    RoadwayCrownAngle._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-128, ub=127)], ev=None, er=[])
    
    #-----< Scale-B12 >-----#
    Scale_B12 = INT(name='Scale-B12', mode=MODE_TYPE)
    Scale_B12._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-2048, ub=2047)], ev=None, er=[])
    
    #-----< SignalGroupID >-----#
    SignalGroupID = INT(name='SignalGroupID', mode=MODE_TYPE)
    SignalGroupID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< SegmentAttributeXY >-----#
    SegmentAttributeXY = ENUM(name='SegmentAttributeXY', mode=MODE_TYPE)
    SegmentAttributeXY._cont = ASN1Dict([('reserved', 0), ('doNotBlock', 1), ('whiteLine', 2), ('mergingLaneLeft', 3), ('mergingLaneRight', 4), ('curbOnLeft', 5), ('curbOnRight', 6), ('loadingzoneOnLeft', 7), ('loadingzoneOnRight', 8), ('turnOutPointOnLeft', 9), ('turnOutPointOnRight', 10), ('adjacentParkingOnLeft', 11), ('adjacentParkingOnRight', 12), ('adjacentBikeLaneOnLeft', 13), ('adjacentBikeLaneOnRight', 14), ('sharedBikeLane', 15), ('bikeBoxInFront', 16), ('transitStopOnLeft', 17), ('transitStopOnRight', 18), ('transitStopInLane', 19), ('sharedWithTrackedVehicle', 20), ('safeIsland', 21), ('lowCurbsPresent', 22), ('rumbleStripPresent', 23), ('audibleSignalingPresent', 24), ('adaptiveTimingPresent', 25), ('rfSignalRequestPresent', 26), ('partialCurbIntrusion', 27), ('taperToLeft', 28), ('taperToRight', 29), ('taperToCenterLine', 30), ('parallelParking', 31), ('headInParking', 32), ('freeParking', 33), ('timeRestrictionsOnParking', 34), ('costToPark', 35), ('midBlockCurbPresent', 36), ('unEvenPavementPresent', 37)])
    SegmentAttributeXY._ext = []
    
    #-----< SpeedAdvice >-----#
    SpeedAdvice = INT(name='SpeedAdvice', mode=MODE_TYPE)
    SpeedAdvice._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=500)], ev=None, er=[])
    
    #-----< TemporaryID >-----#
    TemporaryID = OCT_STR(name='TemporaryID', mode=MODE_TYPE)
    TemporaryID._const_sz = ASN1Set(rv=[4], rr=[], ev=None, er=[])
    
    #-----< TimeIntervalConfidence >-----#
    TimeIntervalConfidence = INT(name='TimeIntervalConfidence', mode=MODE_TYPE)
    TimeIntervalConfidence._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< TransitVehicleOccupancy >-----#
    TransitVehicleOccupancy = ENUM(name='TransitVehicleOccupancy', mode=MODE_TYPE)
    TransitVehicleOccupancy._cont = ASN1Dict([('occupancyUnknown', 0), ('occupancyEmpty', 1), ('occupancyVeryLow', 2), ('occupancyLow', 3), ('occupancyMed', 4), ('occupancyHigh', 5), ('occupancyNearlyFull', 6), ('occupancyFull', 7)])
    TransitVehicleOccupancy._ext = None
    
    #-----< TransitVehicleStatus >-----#
    TransitVehicleStatus = BIT_STR(name='TransitVehicleStatus', mode=MODE_TYPE)
    TransitVehicleStatus._cont = ASN1Dict([('loading', 0), ('anADAuse', 1), ('aBikeLoad', 2), ('doorOpen', 3), ('charging', 4), ('atStopLine', 5)])
    TransitVehicleStatus._const_sz = ASN1Set(rv=[8], rr=[], ev=None, er=[])
    
    #-----< TransmissionState >-----#
    TransmissionState = ENUM(name='TransmissionState', mode=MODE_TYPE)
    TransmissionState._cont = ASN1Dict([('neutral', 0), ('park', 1), ('forwardGears', 2), ('reverseGears', 3), ('reserved1', 4), ('reserved2', 5), ('reserved3', 6), ('unavailable', 7)])
    TransmissionState._ext = None
    
    #-----< VehicleType >-----#
    VehicleType = ENUM(name='VehicleType', mode=MODE_TYPE)
    VehicleType._cont = ASN1Dict([('none', 0), ('unknown', 1), ('special', 2), ('moto', 3), ('car', 4), ('carOther', 5), ('bus', 6), ('axleCnt2', 7), ('axleCnt3', 8), ('axleCnt4', 9), ('axleCnt4Trailer', 10), ('axleCnt5Trailer', 11), ('axleCnt6Trailer', 12), ('axleCnt5MultiTrailer', 13), ('axleCnt6MultiTrailer', 14), ('axleCnt7MultiTrailer', 15)])
    VehicleType._ext = []
    
    #-----< Velocity >-----#
    Velocity = INT(name='Velocity', mode=MODE_TYPE)
    Velocity._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=8191)], ev=None, er=[])
    
    #-----< WaitOnStopline >-----#
    WaitOnStopline = BOOL(name='WaitOnStopline', mode=MODE_TYPE)
    
    #-----< ZoneLength >-----#
    ZoneLength = INT(name='ZoneLength', mode=MODE_TYPE)
    ZoneLength._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=10000)], ev=None, er=[])
    
    _all_ = [
        __MessageFrame_messageId_tab,
        ___MessageFrame_messageId_tab_val_Type_0,
        ___MessageFrame_messageId_tab_val_Type_1,
        ___MessageFrame_messageId_tab_val_Type_2,
        ___MessageFrame_messageId_tab_val_Type_3,
        _MessageFrame_messageId,
        _MessageFrame_value,
        MessageFrame,
        _MESSAGE_ID_AND_TYPE_id,
        _MESSAGE_ID_AND_TYPE_Type,
        MESSAGE_ID_AND_TYPE,
        MessageTypes,
        _MessageTypes_val_Type_0,
        _MessageTypes_val_Type_1,
        _MessageTypes_val_Type_2,
        _MessageTypes_val_Type_3,
        _REG_EXT_ID_AND_TYPE_id,
        _REG_EXT_ID_AND_TYPE_Type,
        REG_EXT_ID_AND_TYPE,
        _SPAT_timeStamp,
        _SPAT_name,
        _SPAT_intersections,
        ____SPAT_regional__item__regionId_tab,
        ___SPAT_regional__item__regionId,
        ____SPAT_regional__item__regExtValue_tab,
        ___SPAT_regional__item__regExtValue,
        __SPAT_regional__item_,
        _SPAT_regional,
        SPAT,
        _SignalRequestMessage_timeStamp,
        _SignalRequestMessage_second,
        _SignalRequestMessage_sequenceNumber,
        _SignalRequestMessage_requests,
        _SignalRequestMessage_requestor,
        ____SignalRequestMessage_regional__item__regionId_tab,
        ___SignalRequestMessage_regional__item__regionId,
        ____SignalRequestMessage_regional__item__regExtValue_tab,
        ___SignalRequestMessage_regional__item__regExtValue,
        __SignalRequestMessage_regional__item_,
        _SignalRequestMessage_regional,
        SignalRequestMessage,
        _SignalStatusMessage_timeStamp,
        _SignalStatusMessage_second,
        _SignalStatusMessage_sequenceNumber,
        _SignalStatusMessage_status,
        ____SignalStatusMessage_regional__item__regionId_tab,
        ___SignalStatusMessage_regional__item__regionId,
        ____SignalStatusMessage_regional__item__regExtValue_tab,
        ___SignalStatusMessage_regional__item__regExtValue,
        __SignalStatusMessage_regional__item_,
        _SignalStatusMessage_regional,
        SignalStatusMessage,
        _MapData_timeStamp,
        _MapData_msgIssueRevision,
        _MapData_layerType,
        _MapData_layerID,
        _MapData_intersections,
        _MapData_roadSegments,
        _MapData_dataParameters,
        _MapData_restrictionList,
        ____MapData_regional__item__regionId_tab,
        _____MapData_regional__item__regionId_tab_val_Type_0,
        ___MapData_regional__item__regionId,
        ___MapData_regional__item__regExtValue,
        __MapData_regional__item_,
        _MapData_regional,
        MapData,
        _AdvisorySpeed_type,
        _AdvisorySpeed_speed,
        _AdvisorySpeed_confidence,
        _AdvisorySpeed_distance,
        _AdvisorySpeed_class_,
        ____AdvisorySpeed_regional__item__regionId_tab,
        ___AdvisorySpeed_regional__item__regionId,
        ____AdvisorySpeed_regional__item__regExtValue_tab,
        ___AdvisorySpeed_regional__item__regExtValue,
        __AdvisorySpeed_regional__item_,
        _AdvisorySpeed_regional,
        AdvisorySpeed,
        _AdvisorySpeedList__item_,
        AdvisorySpeedList,
        _ComputedLane_referenceLaneId,
        __ComputedLane_offsetXaxis_small,
        __ComputedLane_offsetXaxis_large,
        _ComputedLane_offsetXaxis,
        __ComputedLane_offsetYaxis_small,
        __ComputedLane_offsetYaxis_large,
        _ComputedLane_offsetYaxis,
        _ComputedLane_rotateXY,
        _ComputedLane_scaleXaxis,
        _ComputedLane_scaleYaxis,
        ____ComputedLane_regional__item__regionId_tab,
        ___ComputedLane_regional__item__regionId,
        ____ComputedLane_regional__item__regExtValue_tab,
        ___ComputedLane_regional__item__regExtValue,
        __ComputedLane_regional__item_,
        _ComputedLane_regional,
        ComputedLane,
        _ConnectsToList__item_,
        ConnectsToList,
        _ConnectingLane_lane,
        _ConnectingLane_maneuver,
        ConnectingLane,
        _Connection_connectingLane,
        _Connection_remoteIntersection,
        _Connection_signalGroup,
        _Connection_userClass,
        _Connection_connectionID,
        Connection,
        _ConnectionManeuverAssist_connectionID,
        _ConnectionManeuverAssist_queueLength,
        _ConnectionManeuverAssist_availableStorageLength,
        _ConnectionManeuverAssist_waitOnStop,
        _ConnectionManeuverAssist_pedBicycleDetect,
        ____ConnectionManeuverAssist_regional__item__regionId_tab,
        _____ConnectionManeuverAssist_regional__item__regionId_tab_val_Type_0,
        ___ConnectionManeuverAssist_regional__item__regionId,
        ___ConnectionManeuverAssist_regional__item__regExtValue,
        __ConnectionManeuverAssist_regional__item_,
        _ConnectionManeuverAssist_regional,
        ConnectionManeuverAssist,
        _DataParameters_processMethod,
        _DataParameters_processAgency,
        _DataParameters_lastCheckedDate,
        _DataParameters_geoidUsed,
        DataParameters,
        _EnabledLaneList__item_,
        EnabledLaneList,
        _GenericLane_laneID,
        _GenericLane_name,
        _GenericLane_ingressApproach,
        _GenericLane_egressApproach,
        _GenericLane_laneAttributes,
        _GenericLane_maneuvers,
        _GenericLane_nodeList,
        _GenericLane_connectsTo,
        _GenericLane_overlays,
        ____GenericLane_regional__item__regionId_tab,
        _____GenericLane_regional__item__regionId_tab_val_Type_0,
        ___GenericLane_regional__item__regionId,
        ___GenericLane_regional__item__regExtValue,
        __GenericLane_regional__item_,
        _GenericLane_regional,
        GenericLane,
        _IntersectionAccessPoint_lane,
        _IntersectionAccessPoint_approach,
        _IntersectionAccessPoint_connection,
        IntersectionAccessPoint,
        _IntersectionGeometry_name,
        _IntersectionGeometry_id,
        _IntersectionGeometry_revision,
        _IntersectionGeometry_refPoint,
        _IntersectionGeometry_laneWidth,
        _IntersectionGeometry_speedLimits,
        _IntersectionGeometry_laneSet,
        _IntersectionGeometry_preemptPriorityData,
        ____IntersectionGeometry_regional__item__regionId_tab,
        ___IntersectionGeometry_regional__item__regionId,
        ____IntersectionGeometry_regional__item__regExtValue_tab,
        ___IntersectionGeometry_regional__item__regExtValue,
        __IntersectionGeometry_regional__item_,
        _IntersectionGeometry_regional,
        IntersectionGeometry,
        _IntersectionGeometryList__item_,
        IntersectionGeometryList,
        _IntersectionReferenceID_region,
        _IntersectionReferenceID_id,
        IntersectionReferenceID,
        _IntersectionState_name,
        _IntersectionState_id,
        _IntersectionState_revision,
        _IntersectionState_status,
        _IntersectionState_moy,
        _IntersectionState_timeStamp,
        _IntersectionState_enabledLanes,
        _IntersectionState_states,
        _IntersectionState_maneuverAssistList,
        ____IntersectionState_regional__item__regionId_tab,
        _____IntersectionState_regional__item__regionId_tab_val_Type_0,
        ___IntersectionState_regional__item__regionId,
        ___IntersectionState_regional__item__regExtValue,
        __IntersectionState_regional__item_,
        _IntersectionState_regional,
        IntersectionState,
        _IntersectionStateList__item_,
        IntersectionStateList,
        _LaneAttributes_directionalUse,
        _LaneAttributes_sharedWith,
        _LaneAttributes_laneType,
        ___LaneAttributes_regional_regionId_tab,
        __LaneAttributes_regional_regionId,
        ___LaneAttributes_regional_regExtValue_tab,
        __LaneAttributes_regional_regExtValue,
        _LaneAttributes_regional,
        LaneAttributes,
        _LaneDataAttribute_pathEndPointAngle,
        _LaneDataAttribute_laneCrownPointCenter,
        _LaneDataAttribute_laneCrownPointLeft,
        _LaneDataAttribute_laneCrownPointRight,
        _LaneDataAttribute_laneAngle,
        _LaneDataAttribute_speedLimits,
        ____LaneDataAttribute_regional__item__regionId_tab,
        ___LaneDataAttribute_regional__item__regionId,
        ____LaneDataAttribute_regional__item__regExtValue_tab,
        ___LaneDataAttribute_regional__item__regExtValue,
        __LaneDataAttribute_regional__item_,
        _LaneDataAttribute_regional,
        LaneDataAttribute,
        _LaneDataAttributeList__item_,
        LaneDataAttributeList,
        _LaneList__item_,
        LaneList,
        LaneSharing,
        _LaneTypeAttributes_vehicle,
        _LaneTypeAttributes_crosswalk,
        _LaneTypeAttributes_bikeLane,
        _LaneTypeAttributes_sidewalk,
        _LaneTypeAttributes_median,
        _LaneTypeAttributes_striping,
        _LaneTypeAttributes_trackedVehicle,
        _LaneTypeAttributes_parking,
        LaneTypeAttributes,
        _ManeuverAssistList__item_,
        ManeuverAssistList,
        _MovementEventList__item_,
        MovementEventList,
        _MovementEvent_eventState,
        _MovementEvent_timing,
        _MovementEvent_speeds,
        ____MovementEvent_regional__item__regionId_tab,
        ___MovementEvent_regional__item__regionId,
        ____MovementEvent_regional__item__regExtValue_tab,
        ___MovementEvent_regional__item__regExtValue,
        __MovementEvent_regional__item_,
        _MovementEvent_regional,
        MovementEvent,
        _MovementList__item_,
        MovementList,
        _MovementState_movementName,
        _MovementState_signalGroup,
        _MovementState_state_time_speed,
        _MovementState_maneuverAssistList,
        ____MovementState_regional__item__regionId_tab,
        ___MovementState_regional__item__regionId,
        ____MovementState_regional__item__regExtValue_tab,
        ___MovementState_regional__item__regExtValue,
        __MovementState_regional__item_,
        _MovementState_regional,
        MovementState,
        _NodeAttributeSetXY_localNode,
        _NodeAttributeSetXY_disabled,
        _NodeAttributeSetXY_enabled,
        _NodeAttributeSetXY_data,
        _NodeAttributeSetXY_dWidth,
        _NodeAttributeSetXY_dElevation,
        ____NodeAttributeSetXY_regional__item__regionId_tab,
        _____NodeAttributeSetXY_regional__item__regionId_tab_val_Type_0,
        ___NodeAttributeSetXY_regional__item__regionId,
        ___NodeAttributeSetXY_regional__item__regExtValue,
        __NodeAttributeSetXY_regional__item_,
        _NodeAttributeSetXY_regional,
        NodeAttributeSetXY,
        _NodeAttributeXYList__item_,
        NodeAttributeXYList,
        NodeAttributeXY,
        _Node_LLmD_64b_lon,
        _Node_LLmD_64b_lat,
        Node_LLmD_64b,
        _Node_XY_20b_x,
        _Node_XY_20b_y,
        Node_XY_20b,
        _Node_XY_22b_x,
        _Node_XY_22b_y,
        Node_XY_22b,
        _Node_XY_24b_x,
        _Node_XY_24b_y,
        Node_XY_24b,
        _Node_XY_26b_x,
        _Node_XY_26b_y,
        Node_XY_26b,
        _Node_XY_28b_x,
        _Node_XY_28b_y,
        Node_XY_28b,
        _Node_XY_32b_x,
        _Node_XY_32b_y,
        Node_XY_32b,
        _NodeListXY_nodes,
        _NodeListXY_computed,
        NodeListXY,
        _NodeOffsetPointXY_node_XY1,
        _NodeOffsetPointXY_node_XY2,
        _NodeOffsetPointXY_node_XY3,
        _NodeOffsetPointXY_node_XY4,
        _NodeOffsetPointXY_node_XY5,
        _NodeOffsetPointXY_node_XY6,
        _NodeOffsetPointXY_node_LatLon,
        ___NodeOffsetPointXY_regional_regionId_tab,
        __NodeOffsetPointXY_regional_regionId,
        ___NodeOffsetPointXY_regional_regExtValue_tab,
        __NodeOffsetPointXY_regional_regExtValue,
        _NodeOffsetPointXY_regional,
        NodeOffsetPointXY,
        _NodeSetXY__item_,
        NodeSetXY,
        _NodeXY_delta,
        _NodeXY_attributes,
        NodeXY,
        _OverlayLaneList__item_,
        OverlayLaneList,
        _Position3D_lat,
        _Position3D_long,
        _Position3D_elevation,
        ____Position3D_regional__item__regionId_tab,
        _____Position3D_regional__item__regionId_tab_val_Type_0,
        ___Position3D_regional__item__regionId,
        ___Position3D_regional__item__regExtValue,
        __Position3D_regional__item_,
        _Position3D_regional,
        Position3D,
        _PreemptPriorityList__item_,
        PreemptPriorityList,
        _RegulatorySpeedLimit_type,
        _RegulatorySpeedLimit_speed,
        RegulatorySpeedLimit,
        _RequestorDescription_id,
        _RequestorDescription_type,
        _RequestorDescription_position,
        _RequestorDescription_name,
        _RequestorDescription_routeName,
        _RequestorDescription_transitStatus,
        _RequestorDescription_transitOccupancy,
        _RequestorDescription_transitSchedule,
        ____RequestorDescription_regional__item__regionId_tab,
        ___RequestorDescription_regional__item__regionId,
        ____RequestorDescription_regional__item__regExtValue_tab,
        ___RequestorDescription_regional__item__regExtValue,
        __RequestorDescription_regional__item_,
        _RequestorDescription_regional,
        RequestorDescription,
        _RequestorPositionVector_position,
        _RequestorPositionVector_heading,
        _RequestorPositionVector_speed,
        RequestorPositionVector,
        _RequestorType_role,
        _RequestorType_subrole,
        _RequestorType_request,
        _RequestorType_iso3883,
        _RequestorType_hpmsType,
        ___RequestorType_regional_regionId_tab,
        __RequestorType_regional_regionId,
        ___RequestorType_regional_regExtValue_tab,
        __RequestorType_regional_regExtValue,
        _RequestorType_regional,
        RequestorType,
        _RestrictionClassAssignment_id,
        _RestrictionClassAssignment_users,
        RestrictionClassAssignment,
        _RestrictionClassList__item_,
        RestrictionClassList,
        _RestrictionUserTypeList__item_,
        RestrictionUserTypeList,
        _RestrictionUserType_basicType,
        ____RestrictionUserType_regional__item__regionId_tab,
        _____RestrictionUserType_regional__item__regionId_tab_val_Type_0,
        ___RestrictionUserType_regional__item__regionId,
        ___RestrictionUserType_regional__item__regExtValue,
        __RestrictionUserType_regional__item_,
        _RestrictionUserType_regional,
        RestrictionUserType,
        _RoadLaneSetList__item_,
        RoadLaneSetList,
        _RoadSegmentReferenceID_region,
        _RoadSegmentReferenceID_id,
        RoadSegmentReferenceID,
        _RoadSegment_name,
        _RoadSegment_id,
        _RoadSegment_revision,
        _RoadSegment_refPoint,
        _RoadSegment_laneWidth,
        _RoadSegment_speedLimits,
        _RoadSegment_roadLaneSet,
        ____RoadSegment_regional__item__regionId_tab,
        ___RoadSegment_regional__item__regionId,
        ____RoadSegment_regional__item__regExtValue_tab,
        ___RoadSegment_regional__item__regExtValue,
        __RoadSegment_regional__item_,
        _RoadSegment_regional,
        RoadSegment,
        _RoadSegmentList__item_,
        RoadSegmentList,
        _SegmentAttributeXYList__item_,
        SegmentAttributeXYList,
        ___SignalControlZone_zone_regionId_tab,
        __SignalControlZone_zone_regionId,
        ___SignalControlZone_zone_regExtValue_tab,
        __SignalControlZone_zone_regExtValue,
        _SignalControlZone_zone,
        SignalControlZone,
        _SignalRequesterInfo_id,
        _SignalRequesterInfo_request,
        _SignalRequesterInfo_sequenceNumber,
        _SignalRequesterInfo_role,
        _SignalRequesterInfo_typeData,
        SignalRequesterInfo,
        _SignalRequestList__item_,
        SignalRequestList,
        _SignalRequestPackage_request,
        _SignalRequestPackage_minute,
        _SignalRequestPackage_second,
        _SignalRequestPackage_duration,
        ____SignalRequestPackage_regional__item__regionId_tab,
        ___SignalRequestPackage_regional__item__regionId,
        ____SignalRequestPackage_regional__item__regExtValue_tab,
        ___SignalRequestPackage_regional__item__regExtValue,
        __SignalRequestPackage_regional__item_,
        _SignalRequestPackage_regional,
        SignalRequestPackage,
        _SignalRequest_id,
        _SignalRequest_requestID,
        _SignalRequest_requestType,
        _SignalRequest_inBoundLane,
        _SignalRequest_outBoundLane,
        ____SignalRequest_regional__item__regionId_tab,
        ___SignalRequest_regional__item__regionId,
        ____SignalRequest_regional__item__regExtValue_tab,
        ___SignalRequest_regional__item__regExtValue,
        __SignalRequest_regional__item_,
        _SignalRequest_regional,
        SignalRequest,
        _SignalStatusList__item_,
        SignalStatusList,
        _SignalStatusPackageList__item_,
        SignalStatusPackageList,
        _SignalStatusPackage_requester,
        _SignalStatusPackage_inboundOn,
        _SignalStatusPackage_outboundOn,
        _SignalStatusPackage_minute,
        _SignalStatusPackage_second,
        _SignalStatusPackage_duration,
        _SignalStatusPackage_status,
        ____SignalStatusPackage_regional__item__regionId_tab,
        _____SignalStatusPackage_regional__item__regionId_tab_val_Type_0,
        ___SignalStatusPackage_regional__item__regionId,
        ___SignalStatusPackage_regional__item__regExtValue,
        __SignalStatusPackage_regional__item_,
        _SignalStatusPackage_regional,
        SignalStatusPackage,
        _SignalStatus_sequenceNumber,
        _SignalStatus_id,
        _SignalStatus_sigStatus,
        ____SignalStatus_regional__item__regionId_tab,
        ___SignalStatus_regional__item__regionId,
        ____SignalStatus_regional__item__regExtValue_tab,
        ___SignalStatus_regional__item__regExtValue,
        __SignalStatus_regional__item_,
        _SignalStatus_regional,
        SignalStatus,
        _SpeedLimitList__item_,
        SpeedLimitList,
        SpeedLimitType,
        _TimeChangeDetails_startTime,
        _TimeChangeDetails_minEndTime,
        _TimeChangeDetails_maxEndTime,
        _TimeChangeDetails_likelyTime,
        _TimeChangeDetails_confidence,
        _TimeChangeDetails_nextTime,
        TimeChangeDetails,
        TimeMark,
        _TransmissionAndSpeed_transmisson,
        _TransmissionAndSpeed_speed,
        TransmissionAndSpeed,
        _VehicleID_entityID,
        _VehicleID_stationID,
        VehicleID,
        AdvisorySpeedType,
        AllowedManeuvers,
        Angle,
        ApproachID,
        BasicVehicleRole,
        DeltaAngle,
        DeltaTime,
        DescriptiveName,
        DrivenLineOffsetLg,
        DrivenLineOffsetSm,
        DSecond,
        DSRCmsgID,
        mapData,
        signalPhaseAndTimingMessage,
        signalRequestMessage,
        signalStatusMessage,
        Elevation,
        IntersectionID,
        IntersectionStatusObject,
        LaneAttributes_Barrier,
        LaneAttributes_Bike,
        LaneAttributes_Crosswalk,
        LaneAttributes_Parking,
        LaneAttributes_Sidewalk,
        LaneAttributes_Striping,
        LaneAttributes_TrackedVehicle,
        LaneAttributes_Vehicle,
        LaneConnectionID,
        LaneDirection,
        LaneID,
        LayerID,
        LayerType,
        LaneWidth,
        MergeDivergeNodeAngle,
        MinuteOfTheYear,
        MovementPhaseState,
        MsgCount,
        Offset_B10,
        Offset_B11,
        Offset_B12,
        Offset_B13,
        Offset_B14,
        Offset_B16,
        PedestrianBicycleDetect,
        PrioritizationResponseStatus,
        PriorityRequestType,
        RegionId,
        noRegion,
        addGrpA,
        addGrpB,
        addGrpC,
        RequestID,
        RequestImportanceLevel,
        RequestSubRole,
        RestrictionAppliesTo,
        RestrictionClassID,
        RoadRegulatorID,
        RoadSegmentID,
        RoadwayCrownAngle,
        Scale_B12,
        SignalGroupID,
        SegmentAttributeXY,
        SpeedAdvice,
        TemporaryID,
        TimeIntervalConfidence,
        TransitVehicleOccupancy,
        TransitVehicleStatus,
        TransmissionState,
        VehicleType,
        Velocity,
        WaitOnStopline,
        ZoneLength,
    ]

class IVI:

    _name_  = 'IVI'
    _oid_   = [1, 0, 19321, 1]
    
    _obj_ = [
        'IVI',
        'IviStructure',
        'IviContainer',
        'IVIManagementContainer',
        'GeographicLocationContainer',
        'GlcPart',
        'GeneralIviContainer',
        'GicPart',
        'RoadConfigurationContainer',
        'RccPart',
        'TextContainer',
        'TcPart',
        'LayoutContainer',
        'AbsolutePosition',
        'AbsolutePositionWAltitude',
        'AnyCatalogue',
        'ComparisonOperator',
        'CompleteVehicleCharacteristics',
        'ComputedSegment',
        'DeltaPosition',
        'Direction',
        'Distance',
        'DistanceOrDuration',
        'DriverCharacteristics',
        'GoodsType',
        'ISO14823Attributes',
        'ISO14823Code',
        'IviIdentificationNumber',
        'IviPurpose',
        'IviStatus',
        'IviType',
        'LaneInformation',
        'LaneStatus',
        'LaneType',
        'IVILaneWidth',
        'LayoutComponent',
        'LoadType',
        'PolygonalLine',
        'RSCode',
        'RSCUnit',
        'Segment',
        'Text',
        'TractorCharacteristics',
        'TrailerCharacteristics',
        'TrainCharacteristics',
        'VcClass',
        'VcCode',
        'VcOption',
        'VehicleCharacteristicsFixValues',
        'VehicleCharacteristicsRanges',
        'Weight',
        'Zid',
        'Zone',
        'DTM',
        'MonthDay',
        'PMD',
        'HoursMinutes',
        'DayOfWeek',
        'EDT',
        'DFL',
        'VED',
        'SPE',
        'ROI',
        'DBV',
        'DDD',
        'DDD-IO',
        'DestinationPlace',
        'DestinationRoad',
        'DDD-DER',
        'DDD-DEP',
        ]
    _type_ = [
        'IVI',
        'IviStructure',
        'IviContainer',
        'IVIManagementContainer',
        'GeographicLocationContainer',
        'GlcPart',
        'GeneralIviContainer',
        'GicPart',
        'RoadConfigurationContainer',
        'RccPart',
        'TextContainer',
        'TcPart',
        'LayoutContainer',
        'AbsolutePosition',
        'AbsolutePositionWAltitude',
        'AnyCatalogue',
        'ComparisonOperator',
        'CompleteVehicleCharacteristics',
        'ComputedSegment',
        'DeltaPosition',
        'Direction',
        'Distance',
        'DistanceOrDuration',
        'DriverCharacteristics',
        'GoodsType',
        'ISO14823Attributes',
        'ISO14823Code',
        'IviIdentificationNumber',
        'IviPurpose',
        'IviStatus',
        'IviType',
        'LaneInformation',
        'LaneStatus',
        'LaneType',
        'IVILaneWidth',
        'LayoutComponent',
        'LoadType',
        'PolygonalLine',
        'RSCode',
        'RSCUnit',
        'Segment',
        'Text',
        'TractorCharacteristics',
        'TrailerCharacteristics',
        'TrainCharacteristics',
        'VcClass',
        'VcCode',
        'VcOption',
        'VehicleCharacteristicsFixValues',
        'VehicleCharacteristicsRanges',
        'Weight',
        'Zid',
        'Zone',
        'DTM',
        'MonthDay',
        'PMD',
        'HoursMinutes',
        'DayOfWeek',
        'EDT',
        'DFL',
        'VED',
        'SPE',
        'ROI',
        'DBV',
        'DDD',
        'DDD-IO',
        'DestinationPlace',
        'DestinationRoad',
        'DDD-DER',
        'DDD-DEP',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< IVI >-----#
    IVI = SEQ(name='IVI', mode=MODE_TYPE)
    _IVI_header = SEQ(name='header', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ItsPduHeader')))
    _IVI_ivi = SEQ(name='ivi', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'IviStructure')))
    IVI._cont = ASN1Dict([
        ('header', _IVI_header),
        ('ivi', _IVI_ivi),
        ])
    IVI._ext = None
    
    #-----< IviStructure >-----#
    IviStructure = SEQ(name='IviStructure', mode=MODE_TYPE)
    _IviStructure_mandatory = SEQ(name='mandatory', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'IVIManagementContainer')))
    _IviStructure_optional = SEQ_OF(name='optional', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __IviStructure_optional__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'IviContainer')))
    _IviStructure_optional._cont = __IviStructure_optional__item_
    _IviStructure_optional._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=[], er=[])
    IviStructure._cont = ASN1Dict([
        ('mandatory', _IviStructure_mandatory),
        ('optional', _IviStructure_optional),
        ])
    IviStructure._ext = None
    
    #-----< IviContainer >-----#
    IviContainer = CHOICE(name='IviContainer', mode=MODE_TYPE)
    _IviContainer_glc = SEQ(name='glc', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'GeographicLocationContainer')))
    _IviContainer_giv = SEQ_OF(name='giv', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'GeneralIviContainer')))
    _IviContainer_rcc = SEQ_OF(name='rcc', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'RoadConfigurationContainer')))
    _IviContainer_tc = SEQ_OF(name='tc', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'TextContainer')))
    _IviContainer_lac = SEQ(name='lac', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'LayoutContainer')))
    IviContainer._cont = ASN1Dict([
        ('glc', _IviContainer_glc),
        ('giv', _IviContainer_giv),
        ('rcc', _IviContainer_rcc),
        ('tc', _IviContainer_tc),
        ('lac', _IviContainer_lac),
        ])
    IviContainer._ext = []
    
    #-----< IVIManagementContainer >-----#
    IVIManagementContainer = SEQ(name='IVIManagementContainer', mode=MODE_TYPE)
    _IVIManagementContainer_serviceProviderId = SEQ(name='serviceProviderId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'Provider')))
    _IVIManagementContainer_iviIdentificationNumber = INT(name='iviIdentificationNumber', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'IviIdentificationNumber')))
    _IVIManagementContainer_timeStamp = INT(name='timeStamp', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'TimestampIts')), opt=True)
    _IVIManagementContainer_validFrom = INT(name='validFrom', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'TimestampIts')), opt=True)
    _IVIManagementContainer_validTo = INT(name='validTo', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'TimestampIts')), opt=True)
    _IVIManagementContainer_connectedIviStructures = SEQ_OF(name='connectedIviStructures', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __IVIManagementContainer_connectedIviStructures__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'IviIdentificationNumber')))
    _IVIManagementContainer_connectedIviStructures._cont = __IVIManagementContainer_connectedIviStructures__item_
    _IVIManagementContainer_connectedIviStructures._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    _IVIManagementContainer_iviStatus = INT(name='iviStatus', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'IviStatus')))
    IVIManagementContainer._cont = ASN1Dict([
        ('serviceProviderId', _IVIManagementContainer_serviceProviderId),
        ('iviIdentificationNumber', _IVIManagementContainer_iviIdentificationNumber),
        ('timeStamp', _IVIManagementContainer_timeStamp),
        ('validFrom', _IVIManagementContainer_validFrom),
        ('validTo', _IVIManagementContainer_validTo),
        ('connectedIviStructures', _IVIManagementContainer_connectedIviStructures),
        ('iviStatus', _IVIManagementContainer_iviStatus),
        ])
    IVIManagementContainer._ext = []
    
    #-----< GeographicLocationContainer >-----#
    GeographicLocationContainer = SEQ(name='GeographicLocationContainer', mode=MODE_TYPE)
    _GeographicLocationContainer_referencePosition = SEQ(name='referencePosition', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ReferencePosition')))
    _GeographicLocationContainer_referencePositionTime = INT(name='referencePositionTime', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'TimestampIts')), opt=True)
    _GeographicLocationContainer_referencePositionHeading = SEQ(name='referencePositionHeading', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Heading')), opt=True)
    _GeographicLocationContainer_referencePositionSpeed = SEQ(name='referencePositionSpeed', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Speed')), opt=True)
    _GeographicLocationContainer_parts = SEQ_OF(name='parts', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GeographicLocationContainer_parts__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'GlcPart')))
    _GeographicLocationContainer_parts._cont = __GeographicLocationContainer_parts__item_
    _GeographicLocationContainer_parts._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=[], er=[])
    GeographicLocationContainer._cont = ASN1Dict([
        ('referencePosition', _GeographicLocationContainer_referencePosition),
        ('referencePositionTime', _GeographicLocationContainer_referencePositionTime),
        ('referencePositionHeading', _GeographicLocationContainer_referencePositionHeading),
        ('referencePositionSpeed', _GeographicLocationContainer_referencePositionSpeed),
        ('parts', _GeographicLocationContainer_parts),
        ])
    GeographicLocationContainer._ext = []
    
    #-----< GlcPart >-----#
    GlcPart = SEQ(name='GlcPart', mode=MODE_TYPE)
    _GlcPart_zoneId = INT(name='zoneId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'Zid')))
    _GlcPart_laneNumber = INT(name='laneNumber', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'LanePosition')), opt=True)
    _GlcPart_zoneExtension = INT(name='zoneExtension', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _GlcPart_zoneExtension._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _GlcPart_zoneHeading = INT(name='zoneHeading', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'HeadingValue')), opt=True)
    _GlcPart_zone = CHOICE(name='zone', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('IVI', 'Zone')), opt=True)
    GlcPart._cont = ASN1Dict([
        ('zoneId', _GlcPart_zoneId),
        ('laneNumber', _GlcPart_laneNumber),
        ('zoneExtension', _GlcPart_zoneExtension),
        ('zoneHeading', _GlcPart_zoneHeading),
        ('zone', _GlcPart_zone),
        ])
    GlcPart._ext = []
    
    #-----< GeneralIviContainer >-----#
    GeneralIviContainer = SEQ_OF(name='GeneralIviContainer', mode=MODE_TYPE)
    _GeneralIviContainer__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'GicPart')))
    GeneralIviContainer._cont = _GeneralIviContainer__item_
    GeneralIviContainer._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=[], er=[])
    
    #-----< GicPart >-----#
    GicPart = SEQ(name='GicPart', mode=MODE_TYPE)
    _GicPart_detectionZoneIds = SEQ_OF(name='detectionZoneIds', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __GicPart_detectionZoneIds__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'Zid')))
    _GicPart_detectionZoneIds._cont = __GicPart_detectionZoneIds__item_
    _GicPart_detectionZoneIds._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=[], er=[])
    _GicPart_its_Rrid = CHOICE(name='its-Rrid', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('CITSapplMgmtIDs', 'VarLengthNumber')), opt=True)
    _GicPart_relevanceZoneIds = SEQ_OF(name='relevanceZoneIds', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __GicPart_relevanceZoneIds__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'Zid')))
    _GicPart_relevanceZoneIds._cont = __GicPart_relevanceZoneIds__item_
    _GicPart_relevanceZoneIds._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=[], er=[])
    _GicPart_direction = INT(name='direction', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'Direction')), opt=True)
    _GicPart_driverAwarenessZoneIds = SEQ_OF(name='driverAwarenessZoneIds', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __GicPart_driverAwarenessZoneIds__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'Zid')))
    _GicPart_driverAwarenessZoneIds._cont = __GicPart_driverAwarenessZoneIds__item_
    _GicPart_driverAwarenessZoneIds._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=[], er=[])
    _GicPart_minimumAwarenessTime = INT(name='minimumAwarenessTime', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _GicPart_minimumAwarenessTime._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _GicPart_applicableLanes = SEQ_OF(name='applicableLanes', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __GicPart_applicableLanes__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ITS-Container', 'LanePosition')))
    _GicPart_applicableLanes._cont = __GicPart_applicableLanes__item_
    _GicPart_applicableLanes._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=[], er=[])
    _GicPart_iviType = INT(name='iviType', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'IviType')))
    _GicPart_iviPurpose = INT(name='iviPurpose', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'IviPurpose')), opt=True)
    _GicPart_laneStatus = INT(name='laneStatus', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'LaneStatus')), opt=True)
    _GicPart_vehicleCharacteristics = SEQ_OF(name='vehicleCharacteristics', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __GicPart_vehicleCharacteristics__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'CompleteVehicleCharacteristics')))
    _GicPart_vehicleCharacteristics._cont = __GicPart_vehicleCharacteristics__item_
    _GicPart_vehicleCharacteristics._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=[], er=[])
    _GicPart_driverCharacteristics = INT(name='driverCharacteristics', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'DriverCharacteristics')), opt=True)
    _GicPart_layoutId = INT(name='layoutId', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _GicPart_layoutId._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=[], er=[])
    _GicPart_preStoredlayoutId = INT(name='preStoredlayoutId', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _GicPart_preStoredlayoutId._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=[], er=[])
    _GicPart_roadSignCodes = SEQ_OF(name='roadSignCodes', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GicPart_roadSignCodes__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'RSCode')))
    _GicPart_roadSignCodes._cont = __GicPart_roadSignCodes__item_
    _GicPart_roadSignCodes._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=[], er=[])
    _GicPart_extraText = SEQ_OF(name='extraText', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __GicPart_extraText__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'Text')))
    _GicPart_extraText._cont = __GicPart_extraText__item_
    _GicPart_extraText._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=[], er=[])
    GicPart._cont = ASN1Dict([
        ('detectionZoneIds', _GicPart_detectionZoneIds),
        ('its-Rrid', _GicPart_its_Rrid),
        ('relevanceZoneIds', _GicPart_relevanceZoneIds),
        ('direction', _GicPart_direction),
        ('driverAwarenessZoneIds', _GicPart_driverAwarenessZoneIds),
        ('minimumAwarenessTime', _GicPart_minimumAwarenessTime),
        ('applicableLanes', _GicPart_applicableLanes),
        ('iviType', _GicPart_iviType),
        ('iviPurpose', _GicPart_iviPurpose),
        ('laneStatus', _GicPart_laneStatus),
        ('vehicleCharacteristics', _GicPart_vehicleCharacteristics),
        ('driverCharacteristics', _GicPart_driverCharacteristics),
        ('layoutId', _GicPart_layoutId),
        ('preStoredlayoutId', _GicPart_preStoredlayoutId),
        ('roadSignCodes', _GicPart_roadSignCodes),
        ('extraText', _GicPart_extraText),
        ])
    GicPart._ext = []
    
    #-----< RoadConfigurationContainer >-----#
    RoadConfigurationContainer = SEQ_OF(name='RoadConfigurationContainer', mode=MODE_TYPE)
    _RoadConfigurationContainer__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'RccPart')))
    RoadConfigurationContainer._cont = _RoadConfigurationContainer__item_
    RoadConfigurationContainer._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=[], er=[])
    
    #-----< RccPart >-----#
    RccPart = SEQ(name='RccPart', mode=MODE_TYPE)
    _RccPart_zoneIds = SEQ_OF(name='zoneIds', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __RccPart_zoneIds__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'Zid')))
    _RccPart_zoneIds._cont = __RccPart_zoneIds__item_
    _RccPart_zoneIds._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=[], er=[])
    _RccPart_roadType = ENUM(name='roadType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'RoadType')))
    _RccPart_laneConfiguration = SEQ_OF(name='laneConfiguration', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __RccPart_laneConfiguration__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'LaneInformation')))
    _RccPart_laneConfiguration._cont = __RccPart_laneConfiguration__item_
    _RccPart_laneConfiguration._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=[], er=[])
    RccPart._cont = ASN1Dict([
        ('zoneIds', _RccPart_zoneIds),
        ('roadType', _RccPart_roadType),
        ('laneConfiguration', _RccPart_laneConfiguration),
        ])
    RccPart._ext = []
    
    #-----< TextContainer >-----#
    TextContainer = SEQ_OF(name='TextContainer', mode=MODE_TYPE)
    _TextContainer__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'TcPart')))
    TextContainer._cont = _TextContainer__item_
    TextContainer._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=[], er=[])
    
    #-----< TcPart >-----#
    TcPart = SEQ(name='TcPart', mode=MODE_TYPE)
    _TcPart_detectionZoneIds = SEQ_OF(name='detectionZoneIds', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __TcPart_detectionZoneIds__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'Zid')))
    _TcPart_detectionZoneIds._cont = __TcPart_detectionZoneIds__item_
    _TcPart_detectionZoneIds._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=[], er=[])
    _TcPart_relevanceZoneIds = SEQ_OF(name='relevanceZoneIds', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __TcPart_relevanceZoneIds__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'Zid')))
    _TcPart_relevanceZoneIds._cont = __TcPart_relevanceZoneIds__item_
    _TcPart_relevanceZoneIds._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=[], er=[])
    _TcPart_direction = INT(name='direction', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'Direction')), opt=True)
    _TcPart_driverAwarenessZoneIds = SEQ_OF(name='driverAwarenessZoneIds', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __TcPart_driverAwarenessZoneIds__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'Zid')))
    _TcPart_driverAwarenessZoneIds._cont = __TcPart_driverAwarenessZoneIds__item_
    _TcPart_driverAwarenessZoneIds._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=[], er=[])
    _TcPart_minimumAwarenessTime = INT(name='minimumAwarenessTime', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _TcPart_minimumAwarenessTime._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _TcPart_applicableLanes = SEQ_OF(name='applicableLanes', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __TcPart_applicableLanes__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ITS-Container', 'LanePosition')))
    _TcPart_applicableLanes._cont = __TcPart_applicableLanes__item_
    _TcPart_applicableLanes._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=[], er=[])
    _TcPart_layoutId = INT(name='layoutId', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _TcPart_layoutId._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=[], er=[])
    _TcPart_preStoredlayoutId = INT(name='preStoredlayoutId', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _TcPart_preStoredlayoutId._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=[], er=[])
    _TcPart_text = SEQ_OF(name='text', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __TcPart_text__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'Text')))
    _TcPart_text._cont = __TcPart_text__item_
    _TcPart_text._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=[], er=[])
    _TcPart_data = OCT_STR(name='data', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    TcPart._cont = ASN1Dict([
        ('detectionZoneIds', _TcPart_detectionZoneIds),
        ('relevanceZoneIds', _TcPart_relevanceZoneIds),
        ('direction', _TcPart_direction),
        ('driverAwarenessZoneIds', _TcPart_driverAwarenessZoneIds),
        ('minimumAwarenessTime', _TcPart_minimumAwarenessTime),
        ('applicableLanes', _TcPart_applicableLanes),
        ('layoutId', _TcPart_layoutId),
        ('preStoredlayoutId', _TcPart_preStoredlayoutId),
        ('text', _TcPart_text),
        ('data', _TcPart_data),
        ])
    TcPart._ext = []
    
    #-----< LayoutContainer >-----#
    LayoutContainer = SEQ(name='LayoutContainer', mode=MODE_TYPE)
    _LayoutContainer_layoutId = INT(name='layoutId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LayoutContainer_layoutId._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=[], er=[])
    _LayoutContainer_height = INT(name='height', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _LayoutContainer_height._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=10, ub=73)], ev=None, er=[])
    _LayoutContainer_width = INT(name='width', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _LayoutContainer_width._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=10, ub=265)], ev=None, er=[])
    _LayoutContainer_layoutComponents = SEQ_OF(name='layoutComponents', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __LayoutContainer_layoutComponents__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'LayoutComponent')))
    _LayoutContainer_layoutComponents._cont = __LayoutContainer_layoutComponents__item_
    _LayoutContainer_layoutComponents._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=[], er=[])
    LayoutContainer._cont = ASN1Dict([
        ('layoutId', _LayoutContainer_layoutId),
        ('height', _LayoutContainer_height),
        ('width', _LayoutContainer_width),
        ('layoutComponents', _LayoutContainer_layoutComponents),
        ])
    LayoutContainer._ext = []
    
    #-----< AbsolutePosition >-----#
    AbsolutePosition = SEQ(name='AbsolutePosition', mode=MODE_TYPE)
    _AbsolutePosition_latitude = INT(name='latitude', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Latitude')))
    _AbsolutePosition_longitude = INT(name='longitude', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Longitude')))
    AbsolutePosition._cont = ASN1Dict([
        ('latitude', _AbsolutePosition_latitude),
        ('longitude', _AbsolutePosition_longitude),
        ])
    AbsolutePosition._ext = None
    
    #-----< AbsolutePositionWAltitude >-----#
    AbsolutePositionWAltitude = SEQ(name='AbsolutePositionWAltitude', mode=MODE_TYPE)
    _AbsolutePositionWAltitude_latitude = INT(name='latitude', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Latitude')))
    _AbsolutePositionWAltitude_longitude = INT(name='longitude', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Longitude')))
    _AbsolutePositionWAltitude_altitude = SEQ(name='altitude', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Altitude')))
    AbsolutePositionWAltitude._cont = ASN1Dict([
        ('latitude', _AbsolutePositionWAltitude_latitude),
        ('longitude', _AbsolutePositionWAltitude_longitude),
        ('altitude', _AbsolutePositionWAltitude_altitude),
        ])
    AbsolutePositionWAltitude._ext = None
    
    #-----< AnyCatalogue >-----#
    AnyCatalogue = SEQ(name='AnyCatalogue', mode=MODE_TYPE)
    _AnyCatalogue_owner = SEQ(name='owner', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'Provider')))
    _AnyCatalogue_version = INT(name='version', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _AnyCatalogue_version._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _AnyCatalogue_pictogramCode = INT(name='pictogramCode', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _AnyCatalogue_pictogramCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _AnyCatalogue_value = INT(name='value', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _AnyCatalogue_value._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _AnyCatalogue_unit = INT(name='unit', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'RSCUnit')), opt=True)
    _AnyCatalogue_attributes = SEQ_OF(name='attributes', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'ISO14823Attributes')), opt=True)
    AnyCatalogue._cont = ASN1Dict([
        ('owner', _AnyCatalogue_owner),
        ('version', _AnyCatalogue_version),
        ('pictogramCode', _AnyCatalogue_pictogramCode),
        ('value', _AnyCatalogue_value),
        ('unit', _AnyCatalogue_unit),
        ('attributes', _AnyCatalogue_attributes),
        ])
    AnyCatalogue._ext = None
    
    #-----< ComparisonOperator >-----#
    ComparisonOperator = INT(name='ComparisonOperator', mode=MODE_TYPE)
    ComparisonOperator._cont = ASN1Dict([('greaterThan', 0), ('greaterThanOrEqualTo', 1), ('lessThan', 2), ('lessThanOrEqualTo', 3)])
    ComparisonOperator._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=3)], ev=None, er=[])
    
    #-----< CompleteVehicleCharacteristics >-----#
    CompleteVehicleCharacteristics = SEQ(name='CompleteVehicleCharacteristics', mode=MODE_TYPE)
    _CompleteVehicleCharacteristics_tractor = SEQ(name='tractor', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'TractorCharacteristics')), opt=True)
    _CompleteVehicleCharacteristics_trailer = SEQ_OF(name='trailer', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __CompleteVehicleCharacteristics_trailer__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'TrailerCharacteristics')))
    _CompleteVehicleCharacteristics_trailer._cont = __CompleteVehicleCharacteristics_trailer__item_
    _CompleteVehicleCharacteristics_trailer._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=3)], ev=None, er=[])
    _CompleteVehicleCharacteristics_train = SEQ(name='train', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'TrainCharacteristics')), opt=True)
    CompleteVehicleCharacteristics._cont = ASN1Dict([
        ('tractor', _CompleteVehicleCharacteristics_tractor),
        ('trailer', _CompleteVehicleCharacteristics_trailer),
        ('train', _CompleteVehicleCharacteristics_train),
        ])
    CompleteVehicleCharacteristics._ext = None
    
    #-----< ComputedSegment >-----#
    ComputedSegment = SEQ(name='ComputedSegment', mode=MODE_TYPE)
    _ComputedSegment_zoneId = INT(name='zoneId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'Zid')))
    _ComputedSegment_laneNumber = INT(name='laneNumber', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'LanePosition')))
    _ComputedSegment_laneWidth = INT(name='laneWidth', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'IVILaneWidth')))
    _ComputedSegment_offsetDistance = INT(name='offsetDistance', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ComputedSegment_offsetDistance._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-32768, ub=32767)], ev=None, er=[])
    _ComputedSegment_offsetPosition = SEQ(name='offsetPosition', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'DeltaReferencePosition')), opt=True)
    ComputedSegment._cont = ASN1Dict([
        ('zoneId', _ComputedSegment_zoneId),
        ('laneNumber', _ComputedSegment_laneNumber),
        ('laneWidth', _ComputedSegment_laneWidth),
        ('offsetDistance', _ComputedSegment_offsetDistance),
        ('offsetPosition', _ComputedSegment_offsetPosition),
        ])
    ComputedSegment._ext = None
    
    #-----< DeltaPosition >-----#
    DeltaPosition = SEQ(name='DeltaPosition', mode=MODE_TYPE)
    _DeltaPosition_deltaLatitude = INT(name='deltaLatitude', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'DeltaLatitude')))
    _DeltaPosition_deltaLongitude = INT(name='deltaLongitude', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'DeltaLongitude')))
    DeltaPosition._cont = ASN1Dict([
        ('deltaLatitude', _DeltaPosition_deltaLatitude),
        ('deltaLongitude', _DeltaPosition_deltaLongitude),
        ])
    DeltaPosition._ext = None
    
    #-----< Direction >-----#
    Direction = INT(name='Direction', mode=MODE_TYPE)
    Direction._cont = ASN1Dict([('sameDirection', 0), ('oppositeDirection', 1), ('bothDirections', 2), ('valueNotUsed', 3)])
    Direction._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=3)], ev=None, er=[])
    
    #-----< Distance >-----#
    Distance = SEQ(name='Distance', mode=MODE_TYPE)
    _Distance_value = INT(name='value', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Distance_value._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16384)], ev=None, er=[])
    _Distance_unit = INT(name='unit', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'RSCUnit')))
    _Distance_unit._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=2, ub=4), ASN1RangeInt(lb=6, ub=8)], ev=None, er=[])
    Distance._cont = ASN1Dict([
        ('value', _Distance_value),
        ('unit', _Distance_unit),
        ])
    Distance._ext = None
    
    #-----< DistanceOrDuration >-----#
    DistanceOrDuration = SEQ(name='DistanceOrDuration', mode=MODE_TYPE)
    _DistanceOrDuration_value = INT(name='value', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DistanceOrDuration_value._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16384)], ev=None, er=[])
    _DistanceOrDuration_unit = INT(name='unit', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'RSCUnit')))
    _DistanceOrDuration_unit._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=2, ub=9)], ev=None, er=[])
    DistanceOrDuration._cont = ASN1Dict([
        ('value', _DistanceOrDuration_value),
        ('unit', _DistanceOrDuration_unit),
        ])
    DistanceOrDuration._ext = None
    
    #-----< DriverCharacteristics >-----#
    DriverCharacteristics = INT(name='DriverCharacteristics', mode=MODE_TYPE)
    DriverCharacteristics._cont = ASN1Dict([('unexperiencedDrivers', 0), ('experiencedDrivers', 1), ('rfu1', 2), ('rfu2', 3)])
    DriverCharacteristics._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=3)], ev=None, er=[])
    
    #-----< GoodsType >-----#
    GoodsType = INT(name='GoodsType', mode=MODE_TYPE)
    GoodsType._cont = ASN1Dict([('ammunition', 0), ('chemicals', 1), ('empty', 2), ('fuel', 3), ('glass', 4), ('dangerous', 5), ('liquid', 6), ('liveStock', 7), ('dangerousForPeople', 8), ('dangerousForTheEnvironment', 9), ('dangerousForWater', 10), ('perishableProducts', 11), ('pharmaceutical', 12), ('vehicles', 13)])
    GoodsType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=[], er=[])
    
    #-----< ISO14823Attributes >-----#
    ISO14823Attributes = SEQ_OF(name='ISO14823Attributes', mode=MODE_TYPE)
    _ISO14823Attributes__item_ = CHOICE(name='_item_', mode=MODE_TYPE)
    __ISO14823Attributes__item__dtm = SEQ(name='dtm', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'DTM')))
    __ISO14823Attributes__item__edt = SEQ(name='edt', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'EDT')))
    __ISO14823Attributes__item__dfl = INT(name='dfl', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'DFL')))
    __ISO14823Attributes__item__ved = SEQ(name='ved', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'VED')))
    __ISO14823Attributes__item__spe = SEQ(name='spe', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'SPE')))
    __ISO14823Attributes__item__roi = INT(name='roi', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'ROI')))
    __ISO14823Attributes__item__dbv = SEQ(name='dbv', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'DBV')))
    __ISO14823Attributes__item__ddd = SEQ(name='ddd', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'DDD')))
    _ISO14823Attributes__item_._cont = ASN1Dict([
        ('dtm', __ISO14823Attributes__item__dtm),
        ('edt', __ISO14823Attributes__item__edt),
        ('dfl', __ISO14823Attributes__item__dfl),
        ('ved', __ISO14823Attributes__item__ved),
        ('spe', __ISO14823Attributes__item__spe),
        ('roi', __ISO14823Attributes__item__roi),
        ('dbv', __ISO14823Attributes__item__dbv),
        ('ddd', __ISO14823Attributes__item__ddd),
        ])
    _ISO14823Attributes__item_._ext = None
    ISO14823Attributes._cont = _ISO14823Attributes__item_
    ISO14823Attributes._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=[], er=[])
    
    #-----< ISO14823Code >-----#
    ISO14823Code = SEQ(name='ISO14823Code', mode=MODE_TYPE)
    _ISO14823Code_pictogramCode = SEQ(name='pictogramCode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __ISO14823Code_pictogramCode_countryCode = OCT_STR(name='countryCode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ISO14823Code_pictogramCode_countryCode._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    __ISO14823Code_pictogramCode_serviceCategoryCode = CHOICE(name='serviceCategoryCode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___ISO14823Code_pictogramCode_serviceCategoryCode_trafficSignPictogram = ENUM(name='trafficSignPictogram', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___ISO14823Code_pictogramCode_serviceCategoryCode_trafficSignPictogram._cont = ASN1Dict([('dangerWarning', 0), ('regulatory', 1), ('informative', 2)])
    ___ISO14823Code_pictogramCode_serviceCategoryCode_trafficSignPictogram._ext = []
    ___ISO14823Code_pictogramCode_serviceCategoryCode_publicFacilitiesPictogram = ENUM(name='publicFacilitiesPictogram', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___ISO14823Code_pictogramCode_serviceCategoryCode_publicFacilitiesPictogram._cont = ASN1Dict([('publicFacilities', 0)])
    ___ISO14823Code_pictogramCode_serviceCategoryCode_publicFacilitiesPictogram._ext = []
    ___ISO14823Code_pictogramCode_serviceCategoryCode_ambientOrRoadConditionPictogram = ENUM(name='ambientOrRoadConditionPictogram', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___ISO14823Code_pictogramCode_serviceCategoryCode_ambientOrRoadConditionPictogram._cont = ASN1Dict([('ambientCondition', 0), ('roadCondition', 1)])
    ___ISO14823Code_pictogramCode_serviceCategoryCode_ambientOrRoadConditionPictogram._ext = []
    __ISO14823Code_pictogramCode_serviceCategoryCode._cont = ASN1Dict([
        ('trafficSignPictogram', ___ISO14823Code_pictogramCode_serviceCategoryCode_trafficSignPictogram),
        ('publicFacilitiesPictogram', ___ISO14823Code_pictogramCode_serviceCategoryCode_publicFacilitiesPictogram),
        ('ambientOrRoadConditionPictogram', ___ISO14823Code_pictogramCode_serviceCategoryCode_ambientOrRoadConditionPictogram),
        ])
    __ISO14823Code_pictogramCode_serviceCategoryCode._ext = []
    __ISO14823Code_pictogramCode_pictogramCategoryCode = SEQ(name='pictogramCategoryCode', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___ISO14823Code_pictogramCode_pictogramCategoryCode_nature = INT(name='nature', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___ISO14823Code_pictogramCode_pictogramCategoryCode_nature._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=9)], ev=None, er=[])
    ___ISO14823Code_pictogramCode_pictogramCategoryCode_serialNumber = INT(name='serialNumber', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___ISO14823Code_pictogramCode_pictogramCategoryCode_serialNumber._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=99)], ev=None, er=[])
    __ISO14823Code_pictogramCode_pictogramCategoryCode._cont = ASN1Dict([
        ('nature', ___ISO14823Code_pictogramCode_pictogramCategoryCode_nature),
        ('serialNumber', ___ISO14823Code_pictogramCode_pictogramCategoryCode_serialNumber),
        ])
    __ISO14823Code_pictogramCode_pictogramCategoryCode._ext = None
    _ISO14823Code_pictogramCode._cont = ASN1Dict([
        ('countryCode', __ISO14823Code_pictogramCode_countryCode),
        ('serviceCategoryCode', __ISO14823Code_pictogramCode_serviceCategoryCode),
        ('pictogramCategoryCode', __ISO14823Code_pictogramCode_pictogramCategoryCode),
        ])
    _ISO14823Code_pictogramCode._ext = None
    _ISO14823Code_attributes = SEQ_OF(name='attributes', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'ISO14823Attributes')), opt=True)
    ISO14823Code._cont = ASN1Dict([
        ('pictogramCode', _ISO14823Code_pictogramCode),
        ('attributes', _ISO14823Code_attributes),
        ])
    ISO14823Code._ext = None
    
    #-----< IviIdentificationNumber >-----#
    IviIdentificationNumber = INT(name='IviIdentificationNumber', mode=MODE_TYPE)
    IviIdentificationNumber._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32767)], ev=[], er=[])
    
    #-----< IviPurpose >-----#
    IviPurpose = INT(name='IviPurpose', mode=MODE_TYPE)
    IviPurpose._cont = ASN1Dict([('safety', 0), ('environmental', 1), ('trafficOptimisation', 2)])
    IviPurpose._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=3)], ev=None, er=[])
    
    #-----< IviStatus >-----#
    IviStatus = INT(name='IviStatus', mode=MODE_TYPE)
    IviStatus._cont = ASN1Dict([('new', 0), ('update', 1), ('cancellation', 2), ('negation', 3)])
    IviStatus._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=7)], ev=None, er=[])
    
    #-----< IviType >-----#
    IviType = INT(name='IviType', mode=MODE_TYPE)
    IviType._cont = ASN1Dict([('immediateDangerWarningMessages', 0), ('regulatoryMessages', 1), ('trafficRelatedInformationMessages', 2), ('pollutionMessages', 3), ('notTrafficRelatedInformationMessages', 4)])
    IviType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=7)], ev=None, er=[])
    
    #-----< LaneInformation >-----#
    LaneInformation = SEQ(name='LaneInformation', mode=MODE_TYPE)
    _LaneInformation_laneNumber = INT(name='laneNumber', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'LanePosition')))
    _LaneInformation_direction = INT(name='direction', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'Direction')))
    _LaneInformation_validity = SEQ(name='validity', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'DTM')), opt=True)
    _LaneInformation_laneType = INT(name='laneType', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'LaneType')))
    _LaneInformation_laneTypeQualifier = SEQ(name='laneTypeQualifier', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'CompleteVehicleCharacteristics')), opt=True)
    _LaneInformation_laneStatus = INT(name='laneStatus', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'LaneStatus')))
    _LaneInformation_laneWidth = INT(name='laneWidth', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'IVILaneWidth')), opt=True)
    LaneInformation._cont = ASN1Dict([
        ('laneNumber', _LaneInformation_laneNumber),
        ('direction', _LaneInformation_direction),
        ('validity', _LaneInformation_validity),
        ('laneType', _LaneInformation_laneType),
        ('laneTypeQualifier', _LaneInformation_laneTypeQualifier),
        ('laneStatus', _LaneInformation_laneStatus),
        ('laneWidth', _LaneInformation_laneWidth),
        ])
    LaneInformation._ext = []
    
    #-----< LaneStatus >-----#
    LaneStatus = INT(name='LaneStatus', mode=MODE_TYPE)
    LaneStatus._cont = ASN1Dict([('open', 0), ('closed', 1), ('mergeR', 2), ('mergeL', 3), ('mergeLR', 4), ('provisionallyOpen', 5), ('diverging', 6)])
    LaneStatus._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=7)], ev=[], er=[])
    
    #-----< LaneType >-----#
    LaneType = INT(name='LaneType', mode=MODE_TYPE)
    LaneType._cont = ASN1Dict([('traffic', 0), ('through', 1), ('reversible', 2), ('acceleration', 3), ('deceleration', 4), ('leftHandTurning', 5), ('rightHandTurning', 6), ('dedicatedVehicle', 7), ('bus', 8), ('taxi', 9), ('hov', 10), ('hot', 11), ('pedestrian', 12), ('bikeLane', 13), ('median', 14), ('striping', 15), ('trackedVehicle', 16), ('parking', 17), ('emergency', 18), ('verge', 19)])
    LaneType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=31)], ev=None, er=[])
    
    #-----< IVILaneWidth >-----#
    IVILaneWidth = INT(name='IVILaneWidth', mode=MODE_TYPE)
    IVILaneWidth._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1023)], ev=None, er=[])
    
    #-----< LayoutComponent >-----#
    LayoutComponent = SEQ(name='LayoutComponent', mode=MODE_TYPE)
    _LayoutComponent_layoutComponentId = INT(name='layoutComponentId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LayoutComponent_layoutComponentId._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=[], er=[])
    _LayoutComponent_height = INT(name='height', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LayoutComponent_height._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=10, ub=73)], ev=None, er=[])
    _LayoutComponent_width = INT(name='width', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LayoutComponent_width._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=10, ub=265)], ev=None, er=[])
    _LayoutComponent_x = INT(name='x', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LayoutComponent_x._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=10, ub=265)], ev=None, er=[])
    _LayoutComponent_y = INT(name='y', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LayoutComponent_y._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=10, ub=73)], ev=None, er=[])
    _LayoutComponent_textScripting = INT(name='textScripting', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LayoutComponent_textScripting._cont = ASN1Dict([('horizontal', 0), ('vertical', 1)])
    _LayoutComponent_textScripting._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1)], ev=None, er=[])
    LayoutComponent._cont = ASN1Dict([
        ('layoutComponentId', _LayoutComponent_layoutComponentId),
        ('height', _LayoutComponent_height),
        ('width', _LayoutComponent_width),
        ('x', _LayoutComponent_x),
        ('y', _LayoutComponent_y),
        ('textScripting', _LayoutComponent_textScripting),
        ])
    LayoutComponent._ext = None
    
    #-----< LoadType >-----#
    LoadType = SEQ(name='LoadType', mode=MODE_TYPE)
    _LoadType_goodsType = INT(name='goodsType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'GoodsType')))
    _LoadType_dangerousGoodsType = ENUM(name='dangerousGoodsType', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'DangerousGoodsBasic')))
    _LoadType_specialTransportType = BIT_STR(name='specialTransportType', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'SpecialTransportType')))
    LoadType._cont = ASN1Dict([
        ('goodsType', _LoadType_goodsType),
        ('dangerousGoodsType', _LoadType_dangerousGoodsType),
        ('specialTransportType', _LoadType_specialTransportType),
        ])
    LoadType._ext = None
    
    #-----< PolygonalLine >-----#
    PolygonalLine = CHOICE(name='PolygonalLine', mode=MODE_TYPE)
    _PolygonalLine_deltaPositions = SEQ_OF(name='deltaPositions', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __PolygonalLine_deltaPositions__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'DeltaPosition')))
    _PolygonalLine_deltaPositions._cont = __PolygonalLine_deltaPositions__item_
    _PolygonalLine_deltaPositions._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=[], er=[])
    _PolygonalLine_deltaPositionsWithAltitude = SEQ_OF(name='deltaPositionsWithAltitude', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __PolygonalLine_deltaPositionsWithAltitude__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ITS-Container', 'DeltaReferencePosition')))
    _PolygonalLine_deltaPositionsWithAltitude._cont = __PolygonalLine_deltaPositionsWithAltitude__item_
    _PolygonalLine_deltaPositionsWithAltitude._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=[], er=[])
    _PolygonalLine_absolutePositions = SEQ_OF(name='absolutePositions', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __PolygonalLine_absolutePositions__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'AbsolutePosition')))
    _PolygonalLine_absolutePositions._cont = __PolygonalLine_absolutePositions__item_
    _PolygonalLine_absolutePositions._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=[], er=[])
    _PolygonalLine_absolutePositionsWithAltitude = SEQ_OF(name='absolutePositionsWithAltitude', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __PolygonalLine_absolutePositionsWithAltitude__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'AbsolutePositionWAltitude')))
    _PolygonalLine_absolutePositionsWithAltitude._cont = __PolygonalLine_absolutePositionsWithAltitude__item_
    _PolygonalLine_absolutePositionsWithAltitude._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=[], er=[])
    PolygonalLine._cont = ASN1Dict([
        ('deltaPositions', _PolygonalLine_deltaPositions),
        ('deltaPositionsWithAltitude', _PolygonalLine_deltaPositionsWithAltitude),
        ('absolutePositions', _PolygonalLine_absolutePositions),
        ('absolutePositionsWithAltitude', _PolygonalLine_absolutePositionsWithAltitude),
        ])
    PolygonalLine._ext = []
    
    #-----< RSCode >-----#
    RSCode = SEQ(name='RSCode', mode=MODE_TYPE)
    _RSCode_layoutComponentId = INT(name='layoutComponentId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RSCode_layoutComponentId._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=[], er=[])
    _RSCode_code = CHOICE(name='code', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __RSCode_code_viennaConvention = SEQ(name='viennaConvention', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'VcCode')))
    __RSCode_code_iso14823 = SEQ(name='iso14823', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'ISO14823Code')))
    __RSCode_code_itisCodes = INT(name='itisCodes', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __RSCode_code_itisCodes._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    __RSCode_code_anyCatalogue = SEQ(name='anyCatalogue', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'AnyCatalogue')))
    _RSCode_code._cont = ASN1Dict([
        ('viennaConvention', __RSCode_code_viennaConvention),
        ('iso14823', __RSCode_code_iso14823),
        ('itisCodes', __RSCode_code_itisCodes),
        ('anyCatalogue', __RSCode_code_anyCatalogue),
        ])
    _RSCode_code._ext = []
    RSCode._cont = ASN1Dict([
        ('layoutComponentId', _RSCode_layoutComponentId),
        ('code', _RSCode_code),
        ])
    RSCode._ext = None
    
    #-----< RSCUnit >-----#
    RSCUnit = INT(name='RSCUnit', mode=MODE_TYPE)
    RSCUnit._cont = ASN1Dict([('kmperh', 0), ('milesperh', 1), ('kilometer', 2), ('meter', 3), ('decimeter', 4), ('centimeter', 5), ('mile', 6), ('yard', 7), ('foot', 8), ('minutesOfTime', 9), ('tonnes', 10), ('hundredkg', 11), ('pound', 12), ('rateOfIncline', 13)])
    RSCUnit._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=None, er=[])
    
    #-----< Segment >-----#
    Segment = SEQ(name='Segment', mode=MODE_TYPE)
    _Segment_line = CHOICE(name='line', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('IVI', 'PolygonalLine')))
    _Segment_laneWidth = INT(name='laneWidth', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'IVILaneWidth')), opt=True)
    Segment._cont = ASN1Dict([
        ('line', _Segment_line),
        ('laneWidth', _Segment_laneWidth),
        ])
    Segment._ext = None
    
    #-----< Text >-----#
    Text = SEQ(name='Text', mode=MODE_TYPE)
    _Text_layoutComponentId = INT(name='layoutComponentId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Text_layoutComponentId._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=[], er=[])
    _Text_language = BIT_STR(name='language', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Text_language._const_sz = ASN1Set(rv=[10], rr=[], ev=None, er=[])
    _Text_textContent = STR_UTF8(name='textContent', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    Text._cont = ASN1Dict([
        ('layoutComponentId', _Text_layoutComponentId),
        ('language', _Text_language),
        ('textContent', _Text_textContent),
        ])
    Text._ext = None
    
    #-----< TractorCharacteristics >-----#
    TractorCharacteristics = SEQ(name='TractorCharacteristics', mode=MODE_TYPE)
    _TractorCharacteristics_equalTo = SEQ_OF(name='equalTo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __TractorCharacteristics_equalTo__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'VehicleCharacteristicsFixValues')))
    _TractorCharacteristics_equalTo._cont = __TractorCharacteristics_equalTo__item_
    _TractorCharacteristics_equalTo._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=[], er=[])
    _TractorCharacteristics_notEqualTo = SEQ_OF(name='notEqualTo', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __TractorCharacteristics_notEqualTo__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'VehicleCharacteristicsFixValues')))
    _TractorCharacteristics_notEqualTo._cont = __TractorCharacteristics_notEqualTo__item_
    _TractorCharacteristics_notEqualTo._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=[], er=[])
    _TractorCharacteristics_ranges = SEQ_OF(name='ranges', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __TractorCharacteristics_ranges__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'VehicleCharacteristicsRanges')))
    _TractorCharacteristics_ranges._cont = __TractorCharacteristics_ranges__item_
    _TractorCharacteristics_ranges._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=[], er=[])
    TractorCharacteristics._cont = ASN1Dict([
        ('equalTo', _TractorCharacteristics_equalTo),
        ('notEqualTo', _TractorCharacteristics_notEqualTo),
        ('ranges', _TractorCharacteristics_ranges),
        ])
    TractorCharacteristics._ext = None
    
    #-----< TrailerCharacteristics >-----#
    TrailerCharacteristics = SEQ(name='TrailerCharacteristics', mode=MODE_TYPE)
    _TrailerCharacteristics_equalTo = SEQ_OF(name='equalTo', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __TrailerCharacteristics_equalTo__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'VehicleCharacteristicsFixValues')))
    _TrailerCharacteristics_equalTo._cont = __TrailerCharacteristics_equalTo__item_
    _TrailerCharacteristics_equalTo._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=[], er=[])
    _TrailerCharacteristics_notEqualTo = SEQ_OF(name='notEqualTo', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __TrailerCharacteristics_notEqualTo__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'VehicleCharacteristicsFixValues')))
    _TrailerCharacteristics_notEqualTo._cont = __TrailerCharacteristics_notEqualTo__item_
    _TrailerCharacteristics_notEqualTo._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=[], er=[])
    _TrailerCharacteristics_ranges = SEQ_OF(name='ranges', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __TrailerCharacteristics_ranges__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'VehicleCharacteristicsRanges')))
    _TrailerCharacteristics_ranges._cont = __TrailerCharacteristics_ranges__item_
    _TrailerCharacteristics_ranges._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=[], er=[])
    TrailerCharacteristics._cont = ASN1Dict([
        ('equalTo', _TrailerCharacteristics_equalTo),
        ('notEqualTo', _TrailerCharacteristics_notEqualTo),
        ('ranges', _TrailerCharacteristics_ranges),
        ])
    TrailerCharacteristics._ext = None
    
    #-----< TrainCharacteristics >-----#
    TrainCharacteristics = SEQ(name='TrainCharacteristics', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'TractorCharacteristics')))
    
    #-----< VcClass >-----#
    VcClass = INT(name='VcClass', mode=MODE_TYPE)
    VcClass._cont = ASN1Dict([('classA', 0), ('classB', 1), ('classC', 2), ('classD', 3), ('classE', 4), ('classF', 5), ('classG', 6), ('classH', 7)])
    VcClass._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=7)], ev=None, er=[])
    
    #-----< VcCode >-----#
    VcCode = SEQ(name='VcCode', mode=MODE_TYPE)
    _VcCode_roadSignClass = INT(name='roadSignClass', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'VcClass')))
    _VcCode_roadSignCode = INT(name='roadSignCode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _VcCode_roadSignCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=64)], ev=None, er=[])
    _VcCode_vcOption = INT(name='vcOption', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'VcOption')))
    _VcCode_validity = SEQ_OF(name='validity', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __VcCode_validity__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'DTM')))
    _VcCode_validity._cont = __VcCode_validity__item_
    _VcCode_validity._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=[], er=[])
    _VcCode_value = INT(name='value', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _VcCode_value._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _VcCode_unit = INT(name='unit', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'RSCUnit')), opt=True)
    VcCode._cont = ASN1Dict([
        ('roadSignClass', _VcCode_roadSignClass),
        ('roadSignCode', _VcCode_roadSignCode),
        ('vcOption', _VcCode_vcOption),
        ('validity', _VcCode_validity),
        ('value', _VcCode_value),
        ('unit', _VcCode_unit),
        ])
    VcCode._ext = None
    
    #-----< VcOption >-----#
    VcOption = INT(name='VcOption', mode=MODE_TYPE)
    VcOption._cont = ASN1Dict([('none', 0), ('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7)])
    VcOption._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=7)], ev=None, er=[])
    
    #-----< VehicleCharacteristicsFixValues >-----#
    VehicleCharacteristicsFixValues = CHOICE(name='VehicleCharacteristicsFixValues', mode=MODE_TYPE)
    _VehicleCharacteristicsFixValues_simpleVehicleType = INT(name='simpleVehicleType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'StationType')))
    _VehicleCharacteristicsFixValues_euVehicleCategoryCode = CHOICE(name='euVehicleCategoryCode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('ElectronicRegistrationIdentificationVehicleDataModule', 'EuVehicleCategoryCode')))
    _VehicleCharacteristicsFixValues_iso3833VehicleType = INT(name='iso3833VehicleType', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ElectronicRegistrationIdentificationVehicleDataModule', 'Iso3833VehicleType')))
    _VehicleCharacteristicsFixValues_euroAndCo2value = SEQ(name='euroAndCo2value', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'EnvironmentalCharacteristics')))
    _VehicleCharacteristicsFixValues_engineCharacteristics = INT(name='engineCharacteristics', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'EngineCharacteristics')))
    _VehicleCharacteristicsFixValues_loadType = SEQ(name='loadType', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'LoadType')))
    _VehicleCharacteristicsFixValues_usage = ENUM(name='usage', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'VehicleRole')))
    VehicleCharacteristicsFixValues._cont = ASN1Dict([
        ('simpleVehicleType', _VehicleCharacteristicsFixValues_simpleVehicleType),
        ('euVehicleCategoryCode', _VehicleCharacteristicsFixValues_euVehicleCategoryCode),
        ('iso3833VehicleType', _VehicleCharacteristicsFixValues_iso3833VehicleType),
        ('euroAndCo2value', _VehicleCharacteristicsFixValues_euroAndCo2value),
        ('engineCharacteristics', _VehicleCharacteristicsFixValues_engineCharacteristics),
        ('loadType', _VehicleCharacteristicsFixValues_loadType),
        ('usage', _VehicleCharacteristicsFixValues_usage),
        ])
    VehicleCharacteristicsFixValues._ext = []
    
    #-----< VehicleCharacteristicsRanges >-----#
    VehicleCharacteristicsRanges = SEQ(name='VehicleCharacteristicsRanges', mode=MODE_TYPE)
    _VehicleCharacteristicsRanges_comparisonOperator = INT(name='comparisonOperator', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'ComparisonOperator')))
    _VehicleCharacteristicsRanges_limits = CHOICE(name='limits', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __VehicleCharacteristicsRanges_limits_numberOfAxles = INT(name='numberOfAxles', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __VehicleCharacteristicsRanges_limits_numberOfAxles._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=7)], ev=None, er=[])
    __VehicleCharacteristicsRanges_limits_vehicleDimensions = SEQ(name='vehicleDimensions', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'VehicleDimensions')))
    __VehicleCharacteristicsRanges_limits_vehicleWeightLimits = SEQ(name='vehicleWeightLimits', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'VehicleWeightLimits')))
    __VehicleCharacteristicsRanges_limits_axleWeightLimits = SEQ(name='axleWeightLimits', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'AxleWeightLimits')))
    __VehicleCharacteristicsRanges_limits_passengerCapacity = SEQ(name='passengerCapacity', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'PassengerCapacity')))
    __VehicleCharacteristicsRanges_limits_exhaustEmissionValues = SEQ(name='exhaustEmissionValues', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'ExhaustEmissionValues')))
    __VehicleCharacteristicsRanges_limits_dieselEmissionValues = SEQ(name='dieselEmissionValues', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'DieselEmissionValues')))
    __VehicleCharacteristicsRanges_limits_soundLevel = SEQ(name='soundLevel', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EfcDsrcApplication', 'SoundLevel')))
    _VehicleCharacteristicsRanges_limits._cont = ASN1Dict([
        ('numberOfAxles', __VehicleCharacteristicsRanges_limits_numberOfAxles),
        ('vehicleDimensions', __VehicleCharacteristicsRanges_limits_vehicleDimensions),
        ('vehicleWeightLimits', __VehicleCharacteristicsRanges_limits_vehicleWeightLimits),
        ('axleWeightLimits', __VehicleCharacteristicsRanges_limits_axleWeightLimits),
        ('passengerCapacity', __VehicleCharacteristicsRanges_limits_passengerCapacity),
        ('exhaustEmissionValues', __VehicleCharacteristicsRanges_limits_exhaustEmissionValues),
        ('dieselEmissionValues', __VehicleCharacteristicsRanges_limits_dieselEmissionValues),
        ('soundLevel', __VehicleCharacteristicsRanges_limits_soundLevel),
        ])
    _VehicleCharacteristicsRanges_limits._ext = []
    VehicleCharacteristicsRanges._cont = ASN1Dict([
        ('comparisonOperator', _VehicleCharacteristicsRanges_comparisonOperator),
        ('limits', _VehicleCharacteristicsRanges_limits),
        ])
    VehicleCharacteristicsRanges._ext = None
    
    #-----< Weight >-----#
    Weight = SEQ(name='Weight', mode=MODE_TYPE)
    _Weight_value = INT(name='value', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Weight_value._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16384)], ev=None, er=[])
    _Weight_unit = INT(name='unit', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'RSCUnit')))
    _Weight_unit._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=10, ub=12)], ev=None, er=[])
    Weight._cont = ASN1Dict([
        ('value', _Weight_value),
        ('unit', _Weight_unit),
        ])
    Weight._ext = None
    
    #-----< Zid >-----#
    Zid = INT(name='Zid', mode=MODE_TYPE)
    Zid._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=[], er=[])
    
    #-----< Zone >-----#
    Zone = CHOICE(name='Zone', mode=MODE_TYPE)
    _Zone_segment = SEQ(name='segment', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'Segment')))
    _Zone_area = CHOICE(name='area', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('IVI', 'PolygonalLine')))
    _Zone_computedSegment = SEQ(name='computedSegment', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'ComputedSegment')))
    Zone._cont = ASN1Dict([
        ('segment', _Zone_segment),
        ('area', _Zone_area),
        ('computedSegment', _Zone_computedSegment),
        ])
    Zone._ext = []
    
    #-----< DTM >-----#
    DTM = SEQ(name='DTM', mode=MODE_TYPE)
    _DTM_year = SEQ(name='year', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __DTM_year_syr = INT(name='syr', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __DTM_year_syr._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=2000, ub=2127)], ev=[], er=[])
    __DTM_year_eyr = INT(name='eyr', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __DTM_year_eyr._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=2000, ub=2127)], ev=[], er=[])
    _DTM_year._cont = ASN1Dict([
        ('syr', __DTM_year_syr),
        ('eyr', __DTM_year_eyr),
        ])
    _DTM_year._ext = None
    _DTM_month_day = SEQ(name='month-day', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __DTM_month_day_smd = SEQ(name='smd', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'MonthDay')))
    __DTM_month_day_emd = SEQ(name='emd', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'MonthDay')))
    _DTM_month_day._cont = ASN1Dict([
        ('smd', __DTM_month_day_smd),
        ('emd', __DTM_month_day_emd),
        ])
    _DTM_month_day._ext = None
    _DTM_pmd = BIT_STR(name='pmd', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'PMD')), opt=True)
    _DTM_hourMinutes = SEQ(name='hourMinutes', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __DTM_hourMinutes_shm = SEQ(name='shm', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'HoursMinutes')))
    __DTM_hourMinutes_ehm = SEQ(name='ehm', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'HoursMinutes')))
    _DTM_hourMinutes._cont = ASN1Dict([
        ('shm', __DTM_hourMinutes_shm),
        ('ehm', __DTM_hourMinutes_ehm),
        ])
    _DTM_hourMinutes._ext = None
    _DTM_dayOfWeek = BIT_STR(name='dayOfWeek', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'DayOfWeek')), opt=True)
    _DTM_period = SEQ(name='period', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'HoursMinutes')), opt=True)
    DTM._cont = ASN1Dict([
        ('year', _DTM_year),
        ('month-day', _DTM_month_day),
        ('pmd', _DTM_pmd),
        ('hourMinutes', _DTM_hourMinutes),
        ('dayOfWeek', _DTM_dayOfWeek),
        ('period', _DTM_period),
        ])
    DTM._ext = None
    
    #-----< MonthDay >-----#
    MonthDay = SEQ(name='MonthDay', mode=MODE_TYPE)
    _MonthDay_month = INT(name='month', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _MonthDay_month._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=12)], ev=None, er=[])
    _MonthDay_day = INT(name='day', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _MonthDay_day._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=31)], ev=None, er=[])
    MonthDay._cont = ASN1Dict([
        ('month', _MonthDay_month),
        ('day', _MonthDay_day),
        ])
    MonthDay._ext = None
    
    #-----< PMD >-----#
    PMD = BIT_STR(name='PMD', mode=MODE_TYPE)
    PMD._cont = ASN1Dict([('national-holiday', 0), ('even-days', 1), ('odd-days', 2), ('market-day', 3)])
    PMD._const_sz = ASN1Set(rv=[4], rr=[], ev=None, er=[])
    
    #-----< HoursMinutes >-----#
    HoursMinutes = SEQ(name='HoursMinutes', mode=MODE_TYPE)
    _HoursMinutes_hours = INT(name='hours', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _HoursMinutes_hours._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=23)], ev=None, er=[])
    _HoursMinutes_mins = INT(name='mins', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _HoursMinutes_mins._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=59)], ev=None, er=[])
    HoursMinutes._cont = ASN1Dict([
        ('hours', _HoursMinutes_hours),
        ('mins', _HoursMinutes_mins),
        ])
    HoursMinutes._ext = None
    
    #-----< DayOfWeek >-----#
    DayOfWeek = BIT_STR(name='DayOfWeek', mode=MODE_TYPE)
    DayOfWeek._cont = ASN1Dict([('unused', 0), ('monday', 1), ('tuesday', 2), ('wednesday', 3), ('thursday', 4), ('friday', 5), ('saturday', 6), ('sunday', 7)])
    DayOfWeek._const_sz = ASN1Set(rv=[8], rr=[], ev=None, er=[])
    
    #-----< EDT >-----#
    EDT = SEQ(name='EDT', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'DTM')))
    
    #-----< DFL >-----#
    DFL = INT(name='DFL', mode=MODE_TYPE)
    DFL._cont = ASN1Dict([('sDL', 1), ('sLT', 2), ('sRT', 3), ('lTO', 4), ('rTO', 5), ('cLL', 6), ('cRI', 7), ('oVL', 8)])
    DFL._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    
    #-----< VED >-----#
    VED = SEQ(name='VED', mode=MODE_TYPE)
    _VED_hei = SEQ(name='hei', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'Distance')), opt=True)
    _VED_wid = SEQ(name='wid', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'Distance')), opt=True)
    _VED_vln = SEQ(name='vln', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'Distance')), opt=True)
    _VED_wei = SEQ(name='wei', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'Weight')), opt=True)
    VED._cont = ASN1Dict([
        ('hei', _VED_hei),
        ('wid', _VED_wid),
        ('vln', _VED_vln),
        ('wei', _VED_wei),
        ])
    VED._ext = None
    
    #-----< SPE >-----#
    SPE = SEQ(name='SPE', mode=MODE_TYPE)
    _SPE_spm = INT(name='spm', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _SPE_spm._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=250)], ev=None, er=[])
    _SPE_mns = INT(name='mns', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _SPE_mns._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=250)], ev=None, er=[])
    _SPE_unit = INT(name='unit', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'RSCUnit')))
    _SPE_unit._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1)], ev=None, er=[])
    SPE._cont = ASN1Dict([
        ('spm', _SPE_spm),
        ('mns', _SPE_mns),
        ('unit', _SPE_unit),
        ])
    SPE._ext = None
    
    #-----< ROI >-----#
    ROI = INT(name='ROI', mode=MODE_TYPE)
    ROI._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=None, er=[])
    
    #-----< DBV >-----#
    DBV = SEQ(name='DBV', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'Distance')))
    
    #-----< DDD >-----#
    DDD = SEQ(name='DDD', mode=MODE_TYPE)
    _DDD_dcj = INT(name='dcj', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DDD_dcj._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _DDD_dcr = INT(name='dcr', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DDD_dcr._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _DDD_tpl = INT(name='tpl', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DDD_tpl._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _DDD_ioList = SEQ_OF(name='ioList', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __DDD_ioList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'DDD-IO')))
    _DDD_ioList._cont = __DDD_ioList__item_
    _DDD_ioList._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=[], er=[])
    DDD._cont = ASN1Dict([
        ('dcj', _DDD_dcj),
        ('dcr', _DDD_dcr),
        ('tpl', _DDD_tpl),
        ('ioList', _DDD_ioList),
        ])
    DDD._ext = None
    
    #-----< DDD-IO >-----#
    DDD_IO = SEQ(name='DDD-IO', mode=MODE_TYPE)
    _DDD_IO_drn = INT(name='drn', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DDD_IO_drn._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=7)], ev=None, er=[])
    _DDD_IO_dp = SEQ_OF(name='dp', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __DDD_IO_dp__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'DestinationPlace')))
    _DDD_IO_dp._cont = __DDD_IO_dp__item_
    _DDD_IO_dp._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=[], er=[])
    _DDD_IO_dr = SEQ_OF(name='dr', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __DDD_IO_dr__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('IVI', 'DestinationRoad')))
    _DDD_IO_dr._cont = __DDD_IO_dr__item_
    _DDD_IO_dr._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=4)], ev=[], er=[])
    _DDD_IO_rne = INT(name='rne', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DDD_IO_rne._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=999)], ev=None, er=[])
    _DDD_IO_stnId = INT(name='stnId', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DDD_IO_stnId._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=999)], ev=None, er=[])
    _DDD_IO_stnText = STR_UTF8(name='stnText', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DDD_IO_dcp = SEQ(name='dcp', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'DistanceOrDuration')), opt=True)
    _DDD_IO_ddp = SEQ(name='ddp', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'DistanceOrDuration')), opt=True)
    DDD_IO._cont = ASN1Dict([
        ('drn', _DDD_IO_drn),
        ('dp', _DDD_IO_dp),
        ('dr', _DDD_IO_dr),
        ('rne', _DDD_IO_rne),
        ('stnId', _DDD_IO_stnId),
        ('stnText', _DDD_IO_stnText),
        ('dcp', _DDD_IO_dcp),
        ('ddp', _DDD_IO_ddp),
        ])
    DDD_IO._ext = None
    
    #-----< DestinationPlace >-----#
    DestinationPlace = SEQ(name='DestinationPlace', mode=MODE_TYPE)
    _DestinationPlace_depType = INT(name='depType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'DDD-DEP')))
    _DestinationPlace_depRSCode = SEQ(name='depRSCode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'ISO14823Code')), opt=True)
    _DestinationPlace_depBlob = OCT_STR(name='depBlob', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DestinationPlace_plnId = INT(name='plnId', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DestinationPlace_plnId._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=999)], ev=None, er=[])
    _DestinationPlace_plnText = STR_UTF8(name='plnText', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    DestinationPlace._cont = ASN1Dict([
        ('depType', _DestinationPlace_depType),
        ('depRSCode', _DestinationPlace_depRSCode),
        ('depBlob', _DestinationPlace_depBlob),
        ('plnId', _DestinationPlace_plnId),
        ('plnText', _DestinationPlace_plnText),
        ])
    DestinationPlace._ext = None
    
    #-----< DestinationRoad >-----#
    DestinationRoad = SEQ(name='DestinationRoad', mode=MODE_TYPE)
    _DestinationRoad_derType = INT(name='derType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('IVI', 'DDD-DER')))
    _DestinationRoad_ronId = INT(name='ronId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DestinationRoad_ronId._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=999)], ev=None, er=[])
    _DestinationRoad_ronText = STR_UTF8(name='ronText', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    DestinationRoad._cont = ASN1Dict([
        ('derType', _DestinationRoad_derType),
        ('ronId', _DestinationRoad_ronId),
        ('ronText', _DestinationRoad_ronText),
        ])
    DestinationRoad._ext = None
    
    #-----< DDD-DER >-----#
    DDD_DER = INT(name='DDD-DER', mode=MODE_TYPE)
    DDD_DER._cont = ASN1Dict([('none', 0), ('nationalHighway', 1), ('localHighway', 2), ('tollExpresswayMotorway', 3), ('internationalHighway', 4), ('highway', 5), ('expressway', 6), ('nationalRoad', 7), ('regionalProvincialRoad', 8), ('localRoad', 9), ('motorwayJunction', 10), ('diversion', 11), ('rfu1', 12), ('rfu2', 13), ('rfu3', 14), ('rfu4', 15)])
    DDD_DER._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=[], er=[])
    
    #-----< DDD-DEP >-----#
    DDD_DEP = INT(name='DDD-DEP', mode=MODE_TYPE)
    DDD_DEP._cont = ASN1Dict([('none', 0), ('importantArea', 1), ('principalArea', 2), ('generalArea', 3), ('wellKnownPoint', 4), ('country', 5), ('city', 6), ('street', 7), ('industrialArea', 8), ('historicArea', 9), ('touristicArea', 10), ('culturalArea', 11), ('touristicRoute', 12), ('recommendedRoute', 13), ('touristicAttraction', 14), ('geographicArea', 15)])
    DDD_DEP._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=15)], ev=[], er=[])
    
    _all_ = [
        _IVI_header,
        _IVI_ivi,
        IVI,
        _IviStructure_mandatory,
        __IviStructure_optional__item_,
        _IviStructure_optional,
        IviStructure,
        _IviContainer_glc,
        _IviContainer_giv,
        _IviContainer_rcc,
        _IviContainer_tc,
        _IviContainer_lac,
        IviContainer,
        _IVIManagementContainer_serviceProviderId,
        _IVIManagementContainer_iviIdentificationNumber,
        _IVIManagementContainer_timeStamp,
        _IVIManagementContainer_validFrom,
        _IVIManagementContainer_validTo,
        __IVIManagementContainer_connectedIviStructures__item_,
        _IVIManagementContainer_connectedIviStructures,
        _IVIManagementContainer_iviStatus,
        IVIManagementContainer,
        _GeographicLocationContainer_referencePosition,
        _GeographicLocationContainer_referencePositionTime,
        _GeographicLocationContainer_referencePositionHeading,
        _GeographicLocationContainer_referencePositionSpeed,
        __GeographicLocationContainer_parts__item_,
        _GeographicLocationContainer_parts,
        GeographicLocationContainer,
        _GlcPart_zoneId,
        _GlcPart_laneNumber,
        _GlcPart_zoneExtension,
        _GlcPart_zoneHeading,
        _GlcPart_zone,
        GlcPart,
        _GeneralIviContainer__item_,
        GeneralIviContainer,
        __GicPart_detectionZoneIds__item_,
        _GicPart_detectionZoneIds,
        _GicPart_its_Rrid,
        __GicPart_relevanceZoneIds__item_,
        _GicPart_relevanceZoneIds,
        _GicPart_direction,
        __GicPart_driverAwarenessZoneIds__item_,
        _GicPart_driverAwarenessZoneIds,
        _GicPart_minimumAwarenessTime,
        __GicPart_applicableLanes__item_,
        _GicPart_applicableLanes,
        _GicPart_iviType,
        _GicPart_iviPurpose,
        _GicPart_laneStatus,
        __GicPart_vehicleCharacteristics__item_,
        _GicPart_vehicleCharacteristics,
        _GicPart_driverCharacteristics,
        _GicPart_layoutId,
        _GicPart_preStoredlayoutId,
        __GicPart_roadSignCodes__item_,
        _GicPart_roadSignCodes,
        __GicPart_extraText__item_,
        _GicPart_extraText,
        GicPart,
        _RoadConfigurationContainer__item_,
        RoadConfigurationContainer,
        __RccPart_zoneIds__item_,
        _RccPart_zoneIds,
        _RccPart_roadType,
        __RccPart_laneConfiguration__item_,
        _RccPart_laneConfiguration,
        RccPart,
        _TextContainer__item_,
        TextContainer,
        __TcPart_detectionZoneIds__item_,
        _TcPart_detectionZoneIds,
        __TcPart_relevanceZoneIds__item_,
        _TcPart_relevanceZoneIds,
        _TcPart_direction,
        __TcPart_driverAwarenessZoneIds__item_,
        _TcPart_driverAwarenessZoneIds,
        _TcPart_minimumAwarenessTime,
        __TcPart_applicableLanes__item_,
        _TcPart_applicableLanes,
        _TcPart_layoutId,
        _TcPart_preStoredlayoutId,
        __TcPart_text__item_,
        _TcPart_text,
        _TcPart_data,
        TcPart,
        _LayoutContainer_layoutId,
        _LayoutContainer_height,
        _LayoutContainer_width,
        __LayoutContainer_layoutComponents__item_,
        _LayoutContainer_layoutComponents,
        LayoutContainer,
        _AbsolutePosition_latitude,
        _AbsolutePosition_longitude,
        AbsolutePosition,
        _AbsolutePositionWAltitude_latitude,
        _AbsolutePositionWAltitude_longitude,
        _AbsolutePositionWAltitude_altitude,
        AbsolutePositionWAltitude,
        _AnyCatalogue_owner,
        _AnyCatalogue_version,
        _AnyCatalogue_pictogramCode,
        _AnyCatalogue_value,
        _AnyCatalogue_unit,
        _AnyCatalogue_attributes,
        AnyCatalogue,
        ComparisonOperator,
        _CompleteVehicleCharacteristics_tractor,
        __CompleteVehicleCharacteristics_trailer__item_,
        _CompleteVehicleCharacteristics_trailer,
        _CompleteVehicleCharacteristics_train,
        CompleteVehicleCharacteristics,
        _ComputedSegment_zoneId,
        _ComputedSegment_laneNumber,
        _ComputedSegment_laneWidth,
        _ComputedSegment_offsetDistance,
        _ComputedSegment_offsetPosition,
        ComputedSegment,
        _DeltaPosition_deltaLatitude,
        _DeltaPosition_deltaLongitude,
        DeltaPosition,
        Direction,
        _Distance_value,
        _Distance_unit,
        Distance,
        _DistanceOrDuration_value,
        _DistanceOrDuration_unit,
        DistanceOrDuration,
        DriverCharacteristics,
        GoodsType,
        __ISO14823Attributes__item__dtm,
        __ISO14823Attributes__item__edt,
        __ISO14823Attributes__item__dfl,
        __ISO14823Attributes__item__ved,
        __ISO14823Attributes__item__spe,
        __ISO14823Attributes__item__roi,
        __ISO14823Attributes__item__dbv,
        __ISO14823Attributes__item__ddd,
        _ISO14823Attributes__item_,
        ISO14823Attributes,
        __ISO14823Code_pictogramCode_countryCode,
        ___ISO14823Code_pictogramCode_serviceCategoryCode_trafficSignPictogram,
        ___ISO14823Code_pictogramCode_serviceCategoryCode_publicFacilitiesPictogram,
        ___ISO14823Code_pictogramCode_serviceCategoryCode_ambientOrRoadConditionPictogram,
        __ISO14823Code_pictogramCode_serviceCategoryCode,
        ___ISO14823Code_pictogramCode_pictogramCategoryCode_nature,
        ___ISO14823Code_pictogramCode_pictogramCategoryCode_serialNumber,
        __ISO14823Code_pictogramCode_pictogramCategoryCode,
        _ISO14823Code_pictogramCode,
        _ISO14823Code_attributes,
        ISO14823Code,
        IviIdentificationNumber,
        IviPurpose,
        IviStatus,
        IviType,
        _LaneInformation_laneNumber,
        _LaneInformation_direction,
        _LaneInformation_validity,
        _LaneInformation_laneType,
        _LaneInformation_laneTypeQualifier,
        _LaneInformation_laneStatus,
        _LaneInformation_laneWidth,
        LaneInformation,
        LaneStatus,
        LaneType,
        IVILaneWidth,
        _LayoutComponent_layoutComponentId,
        _LayoutComponent_height,
        _LayoutComponent_width,
        _LayoutComponent_x,
        _LayoutComponent_y,
        _LayoutComponent_textScripting,
        LayoutComponent,
        _LoadType_goodsType,
        _LoadType_dangerousGoodsType,
        _LoadType_specialTransportType,
        LoadType,
        __PolygonalLine_deltaPositions__item_,
        _PolygonalLine_deltaPositions,
        __PolygonalLine_deltaPositionsWithAltitude__item_,
        _PolygonalLine_deltaPositionsWithAltitude,
        __PolygonalLine_absolutePositions__item_,
        _PolygonalLine_absolutePositions,
        __PolygonalLine_absolutePositionsWithAltitude__item_,
        _PolygonalLine_absolutePositionsWithAltitude,
        PolygonalLine,
        _RSCode_layoutComponentId,
        __RSCode_code_viennaConvention,
        __RSCode_code_iso14823,
        __RSCode_code_itisCodes,
        __RSCode_code_anyCatalogue,
        _RSCode_code,
        RSCode,
        RSCUnit,
        _Segment_line,
        _Segment_laneWidth,
        Segment,
        _Text_layoutComponentId,
        _Text_language,
        _Text_textContent,
        Text,
        __TractorCharacteristics_equalTo__item_,
        _TractorCharacteristics_equalTo,
        __TractorCharacteristics_notEqualTo__item_,
        _TractorCharacteristics_notEqualTo,
        __TractorCharacteristics_ranges__item_,
        _TractorCharacteristics_ranges,
        TractorCharacteristics,
        __TrailerCharacteristics_equalTo__item_,
        _TrailerCharacteristics_equalTo,
        __TrailerCharacteristics_notEqualTo__item_,
        _TrailerCharacteristics_notEqualTo,
        __TrailerCharacteristics_ranges__item_,
        _TrailerCharacteristics_ranges,
        TrailerCharacteristics,
        TrainCharacteristics,
        VcClass,
        _VcCode_roadSignClass,
        _VcCode_roadSignCode,
        _VcCode_vcOption,
        __VcCode_validity__item_,
        _VcCode_validity,
        _VcCode_value,
        _VcCode_unit,
        VcCode,
        VcOption,
        _VehicleCharacteristicsFixValues_simpleVehicleType,
        _VehicleCharacteristicsFixValues_euVehicleCategoryCode,
        _VehicleCharacteristicsFixValues_iso3833VehicleType,
        _VehicleCharacteristicsFixValues_euroAndCo2value,
        _VehicleCharacteristicsFixValues_engineCharacteristics,
        _VehicleCharacteristicsFixValues_loadType,
        _VehicleCharacteristicsFixValues_usage,
        VehicleCharacteristicsFixValues,
        _VehicleCharacteristicsRanges_comparisonOperator,
        __VehicleCharacteristicsRanges_limits_numberOfAxles,
        __VehicleCharacteristicsRanges_limits_vehicleDimensions,
        __VehicleCharacteristicsRanges_limits_vehicleWeightLimits,
        __VehicleCharacteristicsRanges_limits_axleWeightLimits,
        __VehicleCharacteristicsRanges_limits_passengerCapacity,
        __VehicleCharacteristicsRanges_limits_exhaustEmissionValues,
        __VehicleCharacteristicsRanges_limits_dieselEmissionValues,
        __VehicleCharacteristicsRanges_limits_soundLevel,
        _VehicleCharacteristicsRanges_limits,
        VehicleCharacteristicsRanges,
        _Weight_value,
        _Weight_unit,
        Weight,
        Zid,
        _Zone_segment,
        _Zone_area,
        _Zone_computedSegment,
        Zone,
        __DTM_year_syr,
        __DTM_year_eyr,
        _DTM_year,
        __DTM_month_day_smd,
        __DTM_month_day_emd,
        _DTM_month_day,
        _DTM_pmd,
        __DTM_hourMinutes_shm,
        __DTM_hourMinutes_ehm,
        _DTM_hourMinutes,
        _DTM_dayOfWeek,
        _DTM_period,
        DTM,
        _MonthDay_month,
        _MonthDay_day,
        MonthDay,
        PMD,
        _HoursMinutes_hours,
        _HoursMinutes_mins,
        HoursMinutes,
        DayOfWeek,
        EDT,
        DFL,
        _VED_hei,
        _VED_wid,
        _VED_vln,
        _VED_wei,
        VED,
        _SPE_spm,
        _SPE_mns,
        _SPE_unit,
        SPE,
        ROI,
        DBV,
        _DDD_dcj,
        _DDD_dcr,
        _DDD_tpl,
        __DDD_ioList__item_,
        _DDD_ioList,
        DDD,
        _DDD_IO_drn,
        __DDD_IO_dp__item_,
        _DDD_IO_dp,
        __DDD_IO_dr__item_,
        _DDD_IO_dr,
        _DDD_IO_rne,
        _DDD_IO_stnId,
        _DDD_IO_stnText,
        _DDD_IO_dcp,
        _DDD_IO_ddp,
        DDD_IO,
        _DestinationPlace_depType,
        _DestinationPlace_depRSCode,
        _DestinationPlace_depBlob,
        _DestinationPlace_plnId,
        _DestinationPlace_plnText,
        DestinationPlace,
        _DestinationRoad_derType,
        _DestinationRoad_ronId,
        _DestinationRoad_ronText,
        DestinationRoad,
        DDD_DER,
        DDD_DEP,
    ]

class ElectronicRegistrationIdentificationVehicleDataModule:

    _name_  = 'ElectronicRegistrationIdentificationVehicleDataModule'
    _oid_   = [1, 0, 24534, 1, 1]
    
    _obj_ = [
        'EuVehicleCategoryCode',
        'EuVehicleCategoryL',
        'EuVehicleCategoryM',
        'EuVehicleCategoryN',
        'EuVehicleCategoryO',
        'Iso3833VehicleType',
        ]
    _type_ = [
        'EuVehicleCategoryCode',
        'EuVehicleCategoryL',
        'EuVehicleCategoryM',
        'EuVehicleCategoryN',
        'EuVehicleCategoryO',
        'Iso3833VehicleType',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< EuVehicleCategoryCode >-----#
    EuVehicleCategoryCode = CHOICE(name='EuVehicleCategoryCode', mode=MODE_TYPE)
    _EuVehicleCategoryCode_euVehicleCategoryL = ENUM(name='euVehicleCategoryL', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ElectronicRegistrationIdentificationVehicleDataModule', 'EuVehicleCategoryL')))
    _EuVehicleCategoryCode_euVehicleCategoryM = ENUM(name='euVehicleCategoryM', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ElectronicRegistrationIdentificationVehicleDataModule', 'EuVehicleCategoryM')))
    _EuVehicleCategoryCode_euVehicleCategoryN = ENUM(name='euVehicleCategoryN', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ElectronicRegistrationIdentificationVehicleDataModule', 'EuVehicleCategoryN')))
    _EuVehicleCategoryCode_euVehicleCategoryO = ENUM(name='euVehicleCategoryO', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ElectronicRegistrationIdentificationVehicleDataModule', 'EuVehicleCategoryO')))
    _EuVehicleCategoryCode_euVehilcleCategoryT = NULL(name='euVehilcleCategoryT', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EuVehicleCategoryCode_euVehilcleCategoryG = NULL(name='euVehilcleCategoryG', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    EuVehicleCategoryCode._cont = ASN1Dict([
        ('euVehicleCategoryL', _EuVehicleCategoryCode_euVehicleCategoryL),
        ('euVehicleCategoryM', _EuVehicleCategoryCode_euVehicleCategoryM),
        ('euVehicleCategoryN', _EuVehicleCategoryCode_euVehicleCategoryN),
        ('euVehicleCategoryO', _EuVehicleCategoryCode_euVehicleCategoryO),
        ('euVehilcleCategoryT', _EuVehicleCategoryCode_euVehilcleCategoryT),
        ('euVehilcleCategoryG', _EuVehicleCategoryCode_euVehilcleCategoryG),
        ])
    EuVehicleCategoryCode._ext = None
    
    #-----< EuVehicleCategoryL >-----#
    EuVehicleCategoryL = ENUM(name='EuVehicleCategoryL', mode=MODE_TYPE)
    EuVehicleCategoryL._cont = ASN1Dict([('l1', 0), ('l2', 1), ('l3', 2), ('l4', 3), ('l5', 4), ('l6', 5), ('l7', 6)])
    EuVehicleCategoryL._ext = None
    
    #-----< EuVehicleCategoryM >-----#
    EuVehicleCategoryM = ENUM(name='EuVehicleCategoryM', mode=MODE_TYPE)
    EuVehicleCategoryM._cont = ASN1Dict([('m1', 0), ('m2', 1), ('m3', 2)])
    EuVehicleCategoryM._ext = None
    
    #-----< EuVehicleCategoryN >-----#
    EuVehicleCategoryN = ENUM(name='EuVehicleCategoryN', mode=MODE_TYPE)
    EuVehicleCategoryN._cont = ASN1Dict([('n1', 0), ('n2', 1), ('n3', 2)])
    EuVehicleCategoryN._ext = None
    
    #-----< EuVehicleCategoryO >-----#
    EuVehicleCategoryO = ENUM(name='EuVehicleCategoryO', mode=MODE_TYPE)
    EuVehicleCategoryO._cont = ASN1Dict([('o1', 0), ('o2', 1), ('o3', 2), ('o4', 3)])
    EuVehicleCategoryO._ext = None
    
    #-----< Iso3833VehicleType >-----#
    Iso3833VehicleType = INT(name='Iso3833VehicleType', mode=MODE_TYPE)
    Iso3833VehicleType._cont = ASN1Dict([('passengerCar', 0), ('saloon', 1), ('convertibleSaloon', 2), ('pullmanSaloon', 3), ('stationWagon', 4), ('truckStationWagon', 5), ('coupe', 6), ('convertible', 7), ('multipurposePassengerCar', 8), ('forwardControlPassengerCar', 9), ('specialPassengerCar', 10), ('bus', 11), ('minibus', 12), ('urbanBus', 13), ('interurbanCoach', 14), ('longDistanceCoach', 15), ('articulatedBus', 16), ('trolleyBus', 17), ('specialBus', 18), ('commercialVehicle', 19), ('specialCommercialVehicle', 20), ('specialVehicle', 21), ('trailingTowingVehicle', 22), ('semiTrailerTowingVehicle', 23), ('trailer', 24), ('busTrailer', 25), ('generalPurposeTrailer', 26), ('caravan', 27), ('specialTrailer', 28), ('semiTrailer', 29), ('busSemiTrailer', 30), ('generalPurposeSemiTrailer', 31), ('specialSemiTrailer', 32), ('roadTrain', 33), ('passengerRoadTrain', 34), ('articulatedRoadTrain', 35), ('doubleRoadTrain', 36), ('compositeRoadTrain', 37), ('specialRoadTrain', 38), ('moped', 39), ('motorCycle', 40)])
    Iso3833VehicleType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    _all_ = [
        _EuVehicleCategoryCode_euVehicleCategoryL,
        _EuVehicleCategoryCode_euVehicleCategoryM,
        _EuVehicleCategoryCode_euVehicleCategoryN,
        _EuVehicleCategoryCode_euVehicleCategoryO,
        _EuVehicleCategoryCode_euVehilcleCategoryT,
        _EuVehicleCategoryCode_euVehilcleCategoryG,
        EuVehicleCategoryCode,
        EuVehicleCategoryL,
        EuVehicleCategoryM,
        EuVehicleCategoryN,
        EuVehicleCategoryO,
        Iso3833VehicleType,
    ]

class ITS_Container:

    _name_  = 'ITS-Container'
    _oid_   = [0, 4, 0, 5, 1, 102894, 2, 1]
    
    _obj_ = [
        'ItsPduHeader',
        'StationID',
        'ReferencePosition',
        'DeltaReferencePosition',
        'Longitude',
        'Latitude',
        'Altitude',
        'AltitudeValue',
        'AltitudeConfidence',
        'DeltaLongitude',
        'DeltaLatitude',
        'DeltaAltitude',
        'PosConfidenceEllipse',
        'PathPoint',
        'PathDeltaTime',
        'PtActivation',
        'PtActivationType',
        'PtActivationData',
        'AccelerationControl',
        'SemiAxisLength',
        'CauseCode',
        'CauseCodeType',
        'SubCauseCodeType',
        'TrafficConditionSubCauseCode',
        'AccidentSubCauseCode',
        'RoadworksSubCauseCode',
        'HumanPresenceOnTheRoadSubCauseCode',
        'WrongWayDrivingSubCauseCode',
        'AdverseWeatherCondition-ExtremeWeatherConditionSubCauseCode',
        'AdverseWeatherCondition-AdhesionSubCauseCode',
        'AdverseWeatherCondition-VisibilitySubCauseCode',
        'AdverseWeatherCondition-PrecipitationSubCauseCode',
        'SlowVehicleSubCauseCode',
        'StationaryVehicleSubCauseCode',
        'HumanProblemSubCauseCode',
        'EmergencyVehicleApproachingSubCauseCode',
        'HazardousLocation-DangerousCurveSubCauseCode',
        'HazardousLocation-SurfaceConditionSubCauseCode',
        'HazardousLocation-ObstacleOnTheRoadSubCauseCode',
        'HazardousLocation-AnimalOnTheRoadSubCauseCode',
        'CollisionRiskSubCauseCode',
        'SignalViolationSubCauseCode',
        'RescueAndRecoveryWorkInProgressSubCauseCode',
        'DangerousEndOfQueueSubCauseCode',
        'DangerousSituationSubCauseCode',
        'VehicleBreakdownSubCauseCode',
        'PostCrashSubCauseCode',
        'Curvature',
        'CurvatureValue',
        'CurvatureConfidence',
        'CurvatureCalculationMode',
        'Heading',
        'HeadingValue',
        'HeadingConfidence',
        'LanePosition',
        'ClosedLanes',
        'HardShoulderStatus',
        'DrivingLaneStatus',
        'PerformanceClass',
        'SpeedValue',
        'SpeedConfidence',
        'VehicleMass',
        'Speed',
        'DriveDirection',
        'EmbarkationStatus',
        'LongitudinalAcceleration',
        'LongitudinalAccelerationValue',
        'AccelerationConfidence',
        'LateralAcceleration',
        'LateralAccelerationValue',
        'VerticalAcceleration',
        'VerticalAccelerationValue',
        'StationType',
        'ExteriorLights',
        'DangerousGoodsBasic',
        'DangerousGoodsExtended',
        'SpecialTransportType',
        'LightBarSirenInUse',
        'HeightLonCarr',
        'PosLonCarr',
        'PosPillar',
        'PosCentMass',
        'RequestResponseIndication',
        'SpeedLimit',
        'StationarySince',
        'Temperature',
        'TrafficRule',
        'WheelBaseVehicle',
        'TurningRadius',
        'PosFrontAx',
        'PositionOfOccupants',
        'PositioningSolutionType',
        'VehicleIdentification',
        'WMInumber',
        'VDS',
        'EnergyStorageType',
        'VehicleLength',
        'VehicleLengthValue',
        'VehicleLengthConfidenceIndication',
        'VehicleWidth',
        'PathHistory',
        'EmergencyPriority',
        'InformationQuality',
        'RoadType',
        'SteeringWheelAngle',
        'SteeringWheelAngleValue',
        'SteeringWheelAngleConfidence',
        'TimestampIts',
        'VehicleRole',
        'YawRate',
        'YawRateValue',
        'YawRateConfidence',
        'ProtectedZoneType',
        'RelevanceDistance',
        'RelevanceTrafficDirection',
        'TransmissionInterval',
        'ValidityDuration',
        'ActionID',
        'ItineraryPath',
        'ProtectedCommunicationZone',
        'Traces',
        'NumberOfOccupants',
        'SequenceNumber',
        'PositionOfPillars',
        'RestrictedTypes',
        'EventHistory',
        'EventPoint',
        'ProtectedCommunicationZonesRSU',
        'CenDsrcTollingZone',
        'ProtectedZoneRadius',
        'ProtectedZoneID',
        'CenDsrcTollingZoneID',
        ]
    _type_ = [
        'ItsPduHeader',
        'StationID',
        'ReferencePosition',
        'DeltaReferencePosition',
        'Longitude',
        'Latitude',
        'Altitude',
        'AltitudeValue',
        'AltitudeConfidence',
        'DeltaLongitude',
        'DeltaLatitude',
        'DeltaAltitude',
        'PosConfidenceEllipse',
        'PathPoint',
        'PathDeltaTime',
        'PtActivation',
        'PtActivationType',
        'PtActivationData',
        'AccelerationControl',
        'SemiAxisLength',
        'CauseCode',
        'CauseCodeType',
        'SubCauseCodeType',
        'TrafficConditionSubCauseCode',
        'AccidentSubCauseCode',
        'RoadworksSubCauseCode',
        'HumanPresenceOnTheRoadSubCauseCode',
        'WrongWayDrivingSubCauseCode',
        'AdverseWeatherCondition-ExtremeWeatherConditionSubCauseCode',
        'AdverseWeatherCondition-AdhesionSubCauseCode',
        'AdverseWeatherCondition-VisibilitySubCauseCode',
        'AdverseWeatherCondition-PrecipitationSubCauseCode',
        'SlowVehicleSubCauseCode',
        'StationaryVehicleSubCauseCode',
        'HumanProblemSubCauseCode',
        'EmergencyVehicleApproachingSubCauseCode',
        'HazardousLocation-DangerousCurveSubCauseCode',
        'HazardousLocation-SurfaceConditionSubCauseCode',
        'HazardousLocation-ObstacleOnTheRoadSubCauseCode',
        'HazardousLocation-AnimalOnTheRoadSubCauseCode',
        'CollisionRiskSubCauseCode',
        'SignalViolationSubCauseCode',
        'RescueAndRecoveryWorkInProgressSubCauseCode',
        'DangerousEndOfQueueSubCauseCode',
        'DangerousSituationSubCauseCode',
        'VehicleBreakdownSubCauseCode',
        'PostCrashSubCauseCode',
        'Curvature',
        'CurvatureValue',
        'CurvatureConfidence',
        'CurvatureCalculationMode',
        'Heading',
        'HeadingValue',
        'HeadingConfidence',
        'LanePosition',
        'ClosedLanes',
        'HardShoulderStatus',
        'DrivingLaneStatus',
        'PerformanceClass',
        'SpeedValue',
        'SpeedConfidence',
        'VehicleMass',
        'Speed',
        'DriveDirection',
        'EmbarkationStatus',
        'LongitudinalAcceleration',
        'LongitudinalAccelerationValue',
        'AccelerationConfidence',
        'LateralAcceleration',
        'LateralAccelerationValue',
        'VerticalAcceleration',
        'VerticalAccelerationValue',
        'StationType',
        'ExteriorLights',
        'DangerousGoodsBasic',
        'DangerousGoodsExtended',
        'SpecialTransportType',
        'LightBarSirenInUse',
        'HeightLonCarr',
        'PosLonCarr',
        'PosPillar',
        'PosCentMass',
        'RequestResponseIndication',
        'SpeedLimit',
        'StationarySince',
        'Temperature',
        'TrafficRule',
        'WheelBaseVehicle',
        'TurningRadius',
        'PosFrontAx',
        'PositionOfOccupants',
        'PositioningSolutionType',
        'VehicleIdentification',
        'WMInumber',
        'VDS',
        'EnergyStorageType',
        'VehicleLength',
        'VehicleLengthValue',
        'VehicleLengthConfidenceIndication',
        'VehicleWidth',
        'PathHistory',
        'EmergencyPriority',
        'InformationQuality',
        'RoadType',
        'SteeringWheelAngle',
        'SteeringWheelAngleValue',
        'SteeringWheelAngleConfidence',
        'TimestampIts',
        'VehicleRole',
        'YawRate',
        'YawRateValue',
        'YawRateConfidence',
        'ProtectedZoneType',
        'RelevanceDistance',
        'RelevanceTrafficDirection',
        'TransmissionInterval',
        'ValidityDuration',
        'ActionID',
        'ItineraryPath',
        'ProtectedCommunicationZone',
        'Traces',
        'NumberOfOccupants',
        'SequenceNumber',
        'PositionOfPillars',
        'RestrictedTypes',
        'EventHistory',
        'EventPoint',
        'ProtectedCommunicationZonesRSU',
        'CenDsrcTollingZone',
        'ProtectedZoneRadius',
        'ProtectedZoneID',
        'CenDsrcTollingZoneID',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< ItsPduHeader >-----#
    ItsPduHeader = SEQ(name='ItsPduHeader', mode=MODE_TYPE)
    _ItsPduHeader_protocolVersion = INT(name='protocolVersion', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ItsPduHeader_protocolVersion._cont = ASN1Dict([('currentVersion', 1)])
    _ItsPduHeader_protocolVersion._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _ItsPduHeader_messageID = INT(name='messageID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ItsPduHeader_messageID._cont = ASN1Dict([('denm', 1), ('cam', 2), ('poi', 3), ('spatem', 4), ('mapem', 5), ('ivim', 6), ('ev-rsr', 7), ('tistpgtransaction', 8), ('srem', 9), ('ssem', 10), ('evcsn', 11)])
    _ItsPduHeader_messageID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    _ItsPduHeader_stationID = INT(name='stationID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'StationID')))
    ItsPduHeader._cont = ASN1Dict([
        ('protocolVersion', _ItsPduHeader_protocolVersion),
        ('messageID', _ItsPduHeader_messageID),
        ('stationID', _ItsPduHeader_stationID),
        ])
    ItsPduHeader._ext = None
    
    #-----< StationID >-----#
    StationID = INT(name='StationID', mode=MODE_TYPE)
    StationID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=4294967295)], ev=None, er=[])
    
    #-----< ReferencePosition >-----#
    ReferencePosition = SEQ(name='ReferencePosition', mode=MODE_TYPE)
    _ReferencePosition_latitude = INT(name='latitude', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Latitude')))
    _ReferencePosition_longitude = INT(name='longitude', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Longitude')))
    _ReferencePosition_positionConfidenceEllipse = SEQ(name='positionConfidenceEllipse', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'PosConfidenceEllipse')))
    _ReferencePosition_altitude = SEQ(name='altitude', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Altitude')))
    ReferencePosition._cont = ASN1Dict([
        ('latitude', _ReferencePosition_latitude),
        ('longitude', _ReferencePosition_longitude),
        ('positionConfidenceEllipse', _ReferencePosition_positionConfidenceEllipse),
        ('altitude', _ReferencePosition_altitude),
        ])
    ReferencePosition._ext = None
    
    #-----< DeltaReferencePosition >-----#
    DeltaReferencePosition = SEQ(name='DeltaReferencePosition', mode=MODE_TYPE)
    _DeltaReferencePosition_deltaLatitude = INT(name='deltaLatitude', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'DeltaLatitude')))
    _DeltaReferencePosition_deltaLongitude = INT(name='deltaLongitude', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'DeltaLongitude')))
    _DeltaReferencePosition_deltaAltitude = INT(name='deltaAltitude', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'DeltaAltitude')))
    DeltaReferencePosition._cont = ASN1Dict([
        ('deltaLatitude', _DeltaReferencePosition_deltaLatitude),
        ('deltaLongitude', _DeltaReferencePosition_deltaLongitude),
        ('deltaAltitude', _DeltaReferencePosition_deltaAltitude),
        ])
    DeltaReferencePosition._ext = None
    
    #-----< Longitude >-----#
    Longitude = INT(name='Longitude', mode=MODE_TYPE)
    Longitude._cont = ASN1Dict([('oneMicrodegreeEast', 10), ('oneMicrodegreeWest', -10), ('unavailable', 1800000001)])
    Longitude._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-1800000000, ub=1800000001)], ev=None, er=[])
    
    #-----< Latitude >-----#
    Latitude = INT(name='Latitude', mode=MODE_TYPE)
    Latitude._cont = ASN1Dict([('oneMicrodegreeNorth', 10), ('oneMicrodegreeSouth', -10), ('unavailable', 900000001)])
    Latitude._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-900000000, ub=900000001)], ev=None, er=[])
    
    #-----< Altitude >-----#
    Altitude = SEQ(name='Altitude', mode=MODE_TYPE)
    _Altitude_altitudeValue = INT(name='altitudeValue', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'AltitudeValue')))
    _Altitude_altitudeConfidence = ENUM(name='altitudeConfidence', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'AltitudeConfidence')))
    Altitude._cont = ASN1Dict([
        ('altitudeValue', _Altitude_altitudeValue),
        ('altitudeConfidence', _Altitude_altitudeConfidence),
        ])
    Altitude._ext = None
    
    #-----< AltitudeValue >-----#
    AltitudeValue = INT(name='AltitudeValue', mode=MODE_TYPE)
    AltitudeValue._cont = ASN1Dict([('referenceEllipsoidSurface', 0), ('oneCentimeter', 1), ('unavailable', 800001)])
    AltitudeValue._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-100000, ub=800001)], ev=None, er=[])
    
    #-----< AltitudeConfidence >-----#
    AltitudeConfidence = ENUM(name='AltitudeConfidence', mode=MODE_TYPE)
    AltitudeConfidence._cont = ASN1Dict([('alt-000-01', 0), ('alt-000-02', 1), ('alt-000-05', 2), ('alt-000-10', 3), ('alt-000-20', 4), ('alt-000-50', 5), ('alt-001-00', 6), ('alt-002-00', 7), ('alt-005-00', 8), ('alt-010-00', 9), ('alt-020-00', 10), ('alt-050-00', 11), ('alt-100-00', 12), ('alt-200-00', 13), ('outOfRange', 14), ('unavailable', 15)])
    AltitudeConfidence._ext = None
    
    #-----< DeltaLongitude >-----#
    DeltaLongitude = INT(name='DeltaLongitude', mode=MODE_TYPE)
    DeltaLongitude._cont = ASN1Dict([('oneMicrodegreeEast', 10), ('oneMicrodegreeWest', -10), ('unavailable', 131072)])
    DeltaLongitude._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-131071, ub=131072)], ev=None, er=[])
    
    #-----< DeltaLatitude >-----#
    DeltaLatitude = INT(name='DeltaLatitude', mode=MODE_TYPE)
    DeltaLatitude._cont = ASN1Dict([('oneMicrodegreeNorth', 10), ('oneMicrodegreeSouth', -10), ('unavailable', 131072)])
    DeltaLatitude._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-131071, ub=131072)], ev=None, er=[])
    
    #-----< DeltaAltitude >-----#
    DeltaAltitude = INT(name='DeltaAltitude', mode=MODE_TYPE)
    DeltaAltitude._cont = ASN1Dict([('oneCentimeterUp', 1), ('oneCentimeterDown', -1), ('unavailable', 12800)])
    DeltaAltitude._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-12700, ub=12800)], ev=None, er=[])
    
    #-----< PosConfidenceEllipse >-----#
    PosConfidenceEllipse = SEQ(name='PosConfidenceEllipse', mode=MODE_TYPE)
    _PosConfidenceEllipse_semiMajorConfidence = INT(name='semiMajorConfidence', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'SemiAxisLength')))
    _PosConfidenceEllipse_semiMinorConfidence = INT(name='semiMinorConfidence', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'SemiAxisLength')))
    _PosConfidenceEllipse_semiMajorOrientation = INT(name='semiMajorOrientation', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'HeadingValue')))
    PosConfidenceEllipse._cont = ASN1Dict([
        ('semiMajorConfidence', _PosConfidenceEllipse_semiMajorConfidence),
        ('semiMinorConfidence', _PosConfidenceEllipse_semiMinorConfidence),
        ('semiMajorOrientation', _PosConfidenceEllipse_semiMajorOrientation),
        ])
    PosConfidenceEllipse._ext = None
    
    #-----< PathPoint >-----#
    PathPoint = SEQ(name='PathPoint', mode=MODE_TYPE)
    _PathPoint_pathPosition = SEQ(name='pathPosition', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'DeltaReferencePosition')))
    _PathPoint_pathDeltaTime = INT(name='pathDeltaTime', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'PathDeltaTime')), opt=True)
    PathPoint._cont = ASN1Dict([
        ('pathPosition', _PathPoint_pathPosition),
        ('pathDeltaTime', _PathPoint_pathDeltaTime),
        ])
    PathPoint._ext = None
    
    #-----< PathDeltaTime >-----#
    PathDeltaTime = INT(name='PathDeltaTime', mode=MODE_TYPE)
    PathDeltaTime._cont = ASN1Dict([('tenMilliSecondsInPast', 1)])
    PathDeltaTime._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=65535)], ev=[], er=[])
    
    #-----< PtActivation >-----#
    PtActivation = SEQ(name='PtActivation', mode=MODE_TYPE)
    _PtActivation_ptActivationType = INT(name='ptActivationType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'PtActivationType')))
    _PtActivation_ptActivationData = OCT_STR(name='ptActivationData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'PtActivationData')))
    PtActivation._cont = ASN1Dict([
        ('ptActivationType', _PtActivation_ptActivationType),
        ('ptActivationData', _PtActivation_ptActivationData),
        ])
    PtActivation._ext = None
    
    #-----< PtActivationType >-----#
    PtActivationType = INT(name='PtActivationType', mode=MODE_TYPE)
    PtActivationType._cont = ASN1Dict([('undefinedCodingType', 0), ('r09-16CodingType', 1), ('vdv-50149CodingType', 2)])
    PtActivationType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< PtActivationData >-----#
    PtActivationData = OCT_STR(name='PtActivationData', mode=MODE_TYPE)
    PtActivationData._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=20)], ev=None, er=[])
    
    #-----< AccelerationControl >-----#
    AccelerationControl = BIT_STR(name='AccelerationControl', mode=MODE_TYPE)
    AccelerationControl._cont = ASN1Dict([('brakePedalEngaged', 0), ('gasPedalEngaged', 1), ('emergencyBrakeEngaged', 2), ('collisionWarningEngaged', 3), ('accEngaged', 4), ('cruiseControlEngaged', 5), ('speedLimiterEngaged', 6)])
    AccelerationControl._const_sz = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    
    #-----< SemiAxisLength >-----#
    SemiAxisLength = INT(name='SemiAxisLength', mode=MODE_TYPE)
    SemiAxisLength._cont = ASN1Dict([('oneCentimeter', 1), ('outOfRange', 4094), ('unavailable', 4095)])
    SemiAxisLength._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=4095)], ev=None, er=[])
    
    #-----< CauseCode >-----#
    CauseCode = SEQ(name='CauseCode', mode=MODE_TYPE)
    _CauseCode_causeCode = INT(name='causeCode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'CauseCodeType')))
    _CauseCode_subCauseCode = INT(name='subCauseCode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'SubCauseCodeType')))
    CauseCode._cont = ASN1Dict([
        ('causeCode', _CauseCode_causeCode),
        ('subCauseCode', _CauseCode_subCauseCode),
        ])
    CauseCode._ext = None
    
    #-----< CauseCodeType >-----#
    CauseCodeType = INT(name='CauseCodeType', mode=MODE_TYPE)
    CauseCodeType._cont = ASN1Dict([('reserved', 0), ('trafficCondition', 1), ('accident', 2), ('roadworks', 3), ('adverseWeatherCondition-Adhesion', 6), ('hazardousLocation-SurfaceCondition', 9), ('hazardousLocation-ObstacleOnTheRoad', 10), ('hazardousLocation-AnimalOnTheRoad', 11), ('humanPresenceOnTheRoad', 12), ('wrongWayDriving', 14), ('rescueAndRecoveryWorkInProgress', 15), ('adverseWeatherCondition-ExtremeWeatherCondition', 17), ('adverseWeatherCondition-Visibility', 18), ('adverseWeatherCondition-Precipitation', 19), ('slowVehicle', 26), ('dangerousEndOfQueue', 27), ('vehicleBreakdown', 91), ('postCrash', 92), ('humanProblem', 93), ('stationaryVehicle', 94), ('emergencyVehicleApproaching', 95), ('hazardousLocation-DangerousCurve', 96), ('collisionRisk', 97), ('signalViolation', 98), ('dangerousSituation', 99)])
    CauseCodeType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< SubCauseCodeType >-----#
    SubCauseCodeType = INT(name='SubCauseCodeType', mode=MODE_TYPE)
    SubCauseCodeType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< TrafficConditionSubCauseCode >-----#
    TrafficConditionSubCauseCode = INT(name='TrafficConditionSubCauseCode', mode=MODE_TYPE)
    TrafficConditionSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('increasedVolumeOfTraffic', 1), ('trafficJamSlowlyIncreasing', 2), ('trafficJamIncreasing', 3), ('trafficJamStronglyIncreasing', 4), ('trafficStationary', 5), ('trafficJamSlightlyDecreasing', 6), ('trafficJamDecreasing', 7), ('trafficJamStronglyDecreasing', 8)])
    TrafficConditionSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< AccidentSubCauseCode >-----#
    AccidentSubCauseCode = INT(name='AccidentSubCauseCode', mode=MODE_TYPE)
    AccidentSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('multiVehicleAccident', 1), ('heavyAccident', 2), ('accidentInvolvingLorry', 3), ('accidentInvolvingBus', 4), ('accidentInvolvingHazardousMaterials', 5), ('accidentOnOppositeLane', 6), ('unsecuredAccident', 7), ('assistanceRequested', 8)])
    AccidentSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< RoadworksSubCauseCode >-----#
    RoadworksSubCauseCode = INT(name='RoadworksSubCauseCode', mode=MODE_TYPE)
    RoadworksSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('majorRoadworks', 1), ('roadMarkingWork', 2), ('slowMovingRoadMaintenance', 3), ('shortTermStationaryRoadworks', 4), ('streetCleaning', 5), ('winterService', 6)])
    RoadworksSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< HumanPresenceOnTheRoadSubCauseCode >-----#
    HumanPresenceOnTheRoadSubCauseCode = INT(name='HumanPresenceOnTheRoadSubCauseCode', mode=MODE_TYPE)
    HumanPresenceOnTheRoadSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('childrenOnRoadway', 1), ('cyclistOnRoadway', 2), ('motorcyclistOnRoadway', 3)])
    HumanPresenceOnTheRoadSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< WrongWayDrivingSubCauseCode >-----#
    WrongWayDrivingSubCauseCode = INT(name='WrongWayDrivingSubCauseCode', mode=MODE_TYPE)
    WrongWayDrivingSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('wrongLane', 1), ('wrongDirection', 2)])
    WrongWayDrivingSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< AdverseWeatherCondition-ExtremeWeatherConditionSubCauseCode >-----#
    AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCode = INT(name='AdverseWeatherCondition-ExtremeWeatherConditionSubCauseCode', mode=MODE_TYPE)
    AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('strongWinds', 1), ('damagingHail', 2), ('hurricane', 3), ('thunderstorm', 4), ('tornado', 5), ('blizzard', 6)])
    AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< AdverseWeatherCondition-AdhesionSubCauseCode >-----#
    AdverseWeatherCondition_AdhesionSubCauseCode = INT(name='AdverseWeatherCondition-AdhesionSubCauseCode', mode=MODE_TYPE)
    AdverseWeatherCondition_AdhesionSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('heavyFrostOnRoad', 1), ('fuelOnRoad', 2), ('mudOnRoad', 3), ('snowOnRoad', 4), ('iceOnRoad', 5), ('blackIceOnRoad', 6), ('oilOnRoad', 7), ('looseChippings', 8), ('instantBlackIce', 9), ('roadsSalted', 10)])
    AdverseWeatherCondition_AdhesionSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< AdverseWeatherCondition-VisibilitySubCauseCode >-----#
    AdverseWeatherCondition_VisibilitySubCauseCode = INT(name='AdverseWeatherCondition-VisibilitySubCauseCode', mode=MODE_TYPE)
    AdverseWeatherCondition_VisibilitySubCauseCode._cont = ASN1Dict([('unavailable', 0), ('fog', 1), ('smoke', 2), ('heavySnowfall', 3), ('heavyRain', 4), ('heavyHail', 5), ('lowSunGlare', 6), ('sandstorms', 7), ('swarmsOfInsects', 8)])
    AdverseWeatherCondition_VisibilitySubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< AdverseWeatherCondition-PrecipitationSubCauseCode >-----#
    AdverseWeatherCondition_PrecipitationSubCauseCode = INT(name='AdverseWeatherCondition-PrecipitationSubCauseCode', mode=MODE_TYPE)
    AdverseWeatherCondition_PrecipitationSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('heavyRain', 1), ('heavySnowfall', 2), ('softHail', 3)])
    AdverseWeatherCondition_PrecipitationSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< SlowVehicleSubCauseCode >-----#
    SlowVehicleSubCauseCode = INT(name='SlowVehicleSubCauseCode', mode=MODE_TYPE)
    SlowVehicleSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('maintenanceVehicle', 1), ('vehiclesSlowingToLookAtAccident', 2), ('abnormalLoad', 3), ('abnormalWideLoad', 4), ('convoy', 5), ('snowplough', 6), ('deicing', 7), ('saltingVehicles', 8)])
    SlowVehicleSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< StationaryVehicleSubCauseCode >-----#
    StationaryVehicleSubCauseCode = INT(name='StationaryVehicleSubCauseCode', mode=MODE_TYPE)
    StationaryVehicleSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('humanProblem', 1), ('vehicleBreakdown', 2), ('postCrash', 3), ('publicTransportStop', 4), ('carryingDangerousGoods', 5)])
    StationaryVehicleSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< HumanProblemSubCauseCode >-----#
    HumanProblemSubCauseCode = INT(name='HumanProblemSubCauseCode', mode=MODE_TYPE)
    HumanProblemSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('glycemiaProblem', 1), ('heartProblem', 2)])
    HumanProblemSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< EmergencyVehicleApproachingSubCauseCode >-----#
    EmergencyVehicleApproachingSubCauseCode = INT(name='EmergencyVehicleApproachingSubCauseCode', mode=MODE_TYPE)
    EmergencyVehicleApproachingSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('emergencyVehicleApproaching', 1), ('prioritizedVehicleApproaching', 2)])
    EmergencyVehicleApproachingSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< HazardousLocation-DangerousCurveSubCauseCode >-----#
    HazardousLocation_DangerousCurveSubCauseCode = INT(name='HazardousLocation-DangerousCurveSubCauseCode', mode=MODE_TYPE)
    HazardousLocation_DangerousCurveSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('dangerousLeftTurnCurve', 1), ('dangerousRightTurnCurve', 2), ('multipleCurvesStartingWithUnknownTurningDirection', 3), ('multipleCurvesStartingWithLeftTurn', 4), ('multipleCurvesStartingWithRightTurn', 5)])
    HazardousLocation_DangerousCurveSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< HazardousLocation-SurfaceConditionSubCauseCode >-----#
    HazardousLocation_SurfaceConditionSubCauseCode = INT(name='HazardousLocation-SurfaceConditionSubCauseCode', mode=MODE_TYPE)
    HazardousLocation_SurfaceConditionSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('rockfalls', 1), ('earthquakeDamage', 2), ('sewerCollapse', 3), ('subsidence', 4), ('snowDrifts', 5), ('stormDamage', 6), ('burstPipe', 7), ('volcanoEruption', 8), ('fallingIce', 9)])
    HazardousLocation_SurfaceConditionSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< HazardousLocation-ObstacleOnTheRoadSubCauseCode >-----#
    HazardousLocation_ObstacleOnTheRoadSubCauseCode = INT(name='HazardousLocation-ObstacleOnTheRoadSubCauseCode', mode=MODE_TYPE)
    HazardousLocation_ObstacleOnTheRoadSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('shedLoad', 1), ('partsOfVehicles', 2), ('partsOfTyres', 3), ('bigObjects', 4), ('fallenTrees', 5), ('hubCaps', 6), ('waitingVehicles', 7)])
    HazardousLocation_ObstacleOnTheRoadSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< HazardousLocation-AnimalOnTheRoadSubCauseCode >-----#
    HazardousLocation_AnimalOnTheRoadSubCauseCode = INT(name='HazardousLocation-AnimalOnTheRoadSubCauseCode', mode=MODE_TYPE)
    HazardousLocation_AnimalOnTheRoadSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('wildAnimals', 1), ('herdOfAnimals', 2), ('smallAnimals', 3), ('largeAnimals', 4)])
    HazardousLocation_AnimalOnTheRoadSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< CollisionRiskSubCauseCode >-----#
    CollisionRiskSubCauseCode = INT(name='CollisionRiskSubCauseCode', mode=MODE_TYPE)
    CollisionRiskSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('longitudinalCollisionRisk', 1), ('crossingCollisionRisk', 2), ('lateralCollisionRisk', 3), ('vulnerableRoadUser', 4)])
    CollisionRiskSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< SignalViolationSubCauseCode >-----#
    SignalViolationSubCauseCode = INT(name='SignalViolationSubCauseCode', mode=MODE_TYPE)
    SignalViolationSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('stopSignViolation', 1), ('trafficLightViolation', 2), ('turningRegulationViolation', 3)])
    SignalViolationSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< RescueAndRecoveryWorkInProgressSubCauseCode >-----#
    RescueAndRecoveryWorkInProgressSubCauseCode = INT(name='RescueAndRecoveryWorkInProgressSubCauseCode', mode=MODE_TYPE)
    RescueAndRecoveryWorkInProgressSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('emergencyVehicles', 1), ('rescueHelicopterLanding', 2), ('policeActivityOngoing', 3), ('medicalEmergencyOngoing', 4), ('childAbductionInProgress', 5)])
    RescueAndRecoveryWorkInProgressSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< DangerousEndOfQueueSubCauseCode >-----#
    DangerousEndOfQueueSubCauseCode = INT(name='DangerousEndOfQueueSubCauseCode', mode=MODE_TYPE)
    DangerousEndOfQueueSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('suddenEndOfQueue', 1), ('queueOverHill', 2), ('queueAroundBend', 3), ('queueInTunnel', 4)])
    DangerousEndOfQueueSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< DangerousSituationSubCauseCode >-----#
    DangerousSituationSubCauseCode = INT(name='DangerousSituationSubCauseCode', mode=MODE_TYPE)
    DangerousSituationSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('emergencyElectronicBrakeEngaged', 1), ('preCrashSystemEngaged', 2), ('espEngaged', 3), ('absEngaged', 4), ('aebEngaged', 5), ('brakeWarningEngaged', 6), ('collisionRiskWarningEngaged', 7)])
    DangerousSituationSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< VehicleBreakdownSubCauseCode >-----#
    VehicleBreakdownSubCauseCode = INT(name='VehicleBreakdownSubCauseCode', mode=MODE_TYPE)
    VehicleBreakdownSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('lackOfFuel', 1), ('lackOfBatteryPower', 2), ('engineProblem', 3), ('transmissionProblem', 4), ('engineCoolingProblem', 5), ('brakingSystemProblem', 6), ('steeringProblem', 7), ('tyrePuncture', 8)])
    VehicleBreakdownSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< PostCrashSubCauseCode >-----#
    PostCrashSubCauseCode = INT(name='PostCrashSubCauseCode', mode=MODE_TYPE)
    PostCrashSubCauseCode._cont = ASN1Dict([('unavailable', 0), ('accidentWithoutECallTriggered', 1), ('accidentWithECallManuallyTriggered', 2), ('accidentWithECallAutomaticallyTriggered', 3), ('accidentWithECallTriggeredWithoutAccessToCellularNetwork', 4)])
    PostCrashSubCauseCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< Curvature >-----#
    Curvature = SEQ(name='Curvature', mode=MODE_TYPE)
    _Curvature_curvatureValue = INT(name='curvatureValue', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'CurvatureValue')))
    _Curvature_curvatureConfidence = ENUM(name='curvatureConfidence', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'CurvatureConfidence')))
    Curvature._cont = ASN1Dict([
        ('curvatureValue', _Curvature_curvatureValue),
        ('curvatureConfidence', _Curvature_curvatureConfidence),
        ])
    Curvature._ext = None
    
    #-----< CurvatureValue >-----#
    CurvatureValue = INT(name='CurvatureValue', mode=MODE_TYPE)
    CurvatureValue._cont = ASN1Dict([('straight', 0), ('reciprocalOf1MeterRadiusToRight', -30000), ('reciprocalOf1MeterRadiusToLeft', 30000), ('unavailable', 30001)])
    CurvatureValue._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-30000, ub=30001)], ev=None, er=[])
    
    #-----< CurvatureConfidence >-----#
    CurvatureConfidence = ENUM(name='CurvatureConfidence', mode=MODE_TYPE)
    CurvatureConfidence._cont = ASN1Dict([('onePerMeter-0-00002', 0), ('onePerMeter-0-0001', 1), ('onePerMeter-0-0005', 2), ('onePerMeter-0-002', 3), ('onePerMeter-0-01', 4), ('onePerMeter-0-1', 5), ('outOfRange', 6), ('unavailable', 7)])
    CurvatureConfidence._ext = None
    
    #-----< CurvatureCalculationMode >-----#
    CurvatureCalculationMode = ENUM(name='CurvatureCalculationMode', mode=MODE_TYPE)
    CurvatureCalculationMode._cont = ASN1Dict([('yawRateUsed', 0), ('yawRateNotUsed', 1), ('unavailable', 2)])
    CurvatureCalculationMode._ext = []
    
    #-----< Heading >-----#
    Heading = SEQ(name='Heading', mode=MODE_TYPE)
    _Heading_headingValue = INT(name='headingValue', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'HeadingValue')))
    _Heading_headingConfidence = INT(name='headingConfidence', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'HeadingConfidence')))
    Heading._cont = ASN1Dict([
        ('headingValue', _Heading_headingValue),
        ('headingConfidence', _Heading_headingConfidence),
        ])
    Heading._ext = None
    
    #-----< HeadingValue >-----#
    HeadingValue = INT(name='HeadingValue', mode=MODE_TYPE)
    HeadingValue._cont = ASN1Dict([('wgs84North', 0), ('wgs84East', 900), ('wgs84South', 1800), ('wgs84West', 2700), ('unavailable', 3601)])
    HeadingValue._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=3601)], ev=None, er=[])
    
    #-----< HeadingConfidence >-----#
    HeadingConfidence = INT(name='HeadingConfidence', mode=MODE_TYPE)
    HeadingConfidence._cont = ASN1Dict([('equalOrWithinZeroPointOneDegree', 1), ('equalOrWithinOneDegree', 10), ('outOfRange', 126), ('unavailable', 127)])
    HeadingConfidence._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=127)], ev=None, er=[])
    
    #-----< LanePosition >-----#
    LanePosition = INT(name='LanePosition', mode=MODE_TYPE)
    LanePosition._cont = ASN1Dict([('offTheRoad', -1), ('hardShoulder', 0), ('outermostDrivingLane', 1), ('secondLaneFromOutside', 2)])
    LanePosition._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-1, ub=14)], ev=None, er=[])
    
    #-----< ClosedLanes >-----#
    ClosedLanes = SEQ(name='ClosedLanes', mode=MODE_TYPE)
    _ClosedLanes_hardShoulderStatus = ENUM(name='hardShoulderStatus', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'HardShoulderStatus')), opt=True)
    _ClosedLanes_drivingLaneStatus = BIT_STR(name='drivingLaneStatus', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'DrivingLaneStatus')))
    ClosedLanes._cont = ASN1Dict([
        ('hardShoulderStatus', _ClosedLanes_hardShoulderStatus),
        ('drivingLaneStatus', _ClosedLanes_drivingLaneStatus),
        ])
    ClosedLanes._ext = []
    
    #-----< HardShoulderStatus >-----#
    HardShoulderStatus = ENUM(name='HardShoulderStatus', mode=MODE_TYPE)
    HardShoulderStatus._cont = ASN1Dict([('availableForStopping', 0), ('closed', 1), ('availableForDriving', 2)])
    HardShoulderStatus._ext = None
    
    #-----< DrivingLaneStatus >-----#
    DrivingLaneStatus = BIT_STR(name='DrivingLaneStatus', mode=MODE_TYPE)
    DrivingLaneStatus._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=14)], ev=None, er=[])
    
    #-----< PerformanceClass >-----#
    PerformanceClass = INT(name='PerformanceClass', mode=MODE_TYPE)
    PerformanceClass._cont = ASN1Dict([('unavailable', 0), ('performanceClassA', 1), ('performanceClassB', 2)])
    PerformanceClass._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=7)], ev=None, er=[])
    
    #-----< SpeedValue >-----#
    SpeedValue = INT(name='SpeedValue', mode=MODE_TYPE)
    SpeedValue._cont = ASN1Dict([('standstill', 0), ('oneCentimeterPerSec', 1), ('unavailable', 16383)])
    SpeedValue._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=16383)], ev=None, er=[])
    
    #-----< SpeedConfidence >-----#
    SpeedConfidence = INT(name='SpeedConfidence', mode=MODE_TYPE)
    SpeedConfidence._cont = ASN1Dict([('equalOrWithinOneCentimeterPerSec', 1), ('equalOrWithinOneMeterPerSec', 100), ('outOfRange', 126), ('unavailable', 127)])
    SpeedConfidence._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=127)], ev=None, er=[])
    
    #-----< VehicleMass >-----#
    VehicleMass = INT(name='VehicleMass', mode=MODE_TYPE)
    VehicleMass._cont = ASN1Dict([('hundredKg', 1), ('unavailable', 1024)])
    VehicleMass._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=1024)], ev=None, er=[])
    
    #-----< Speed >-----#
    Speed = SEQ(name='Speed', mode=MODE_TYPE)
    _Speed_speedValue = INT(name='speedValue', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'SpeedValue')))
    _Speed_speedConfidence = INT(name='speedConfidence', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'SpeedConfidence')))
    Speed._cont = ASN1Dict([
        ('speedValue', _Speed_speedValue),
        ('speedConfidence', _Speed_speedConfidence),
        ])
    Speed._ext = None
    
    #-----< DriveDirection >-----#
    DriveDirection = ENUM(name='DriveDirection', mode=MODE_TYPE)
    DriveDirection._cont = ASN1Dict([('forward', 0), ('backward', 1), ('unavailable', 2)])
    DriveDirection._ext = None
    
    #-----< EmbarkationStatus >-----#
    EmbarkationStatus = BOOL(name='EmbarkationStatus', mode=MODE_TYPE)
    
    #-----< LongitudinalAcceleration >-----#
    LongitudinalAcceleration = SEQ(name='LongitudinalAcceleration', mode=MODE_TYPE)
    _LongitudinalAcceleration_longitudinalAccelerationValue = INT(name='longitudinalAccelerationValue', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'LongitudinalAccelerationValue')))
    _LongitudinalAcceleration_longitudinalAccelerationConfidence = INT(name='longitudinalAccelerationConfidence', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'AccelerationConfidence')))
    LongitudinalAcceleration._cont = ASN1Dict([
        ('longitudinalAccelerationValue', _LongitudinalAcceleration_longitudinalAccelerationValue),
        ('longitudinalAccelerationConfidence', _LongitudinalAcceleration_longitudinalAccelerationConfidence),
        ])
    LongitudinalAcceleration._ext = None
    
    #-----< LongitudinalAccelerationValue >-----#
    LongitudinalAccelerationValue = INT(name='LongitudinalAccelerationValue', mode=MODE_TYPE)
    LongitudinalAccelerationValue._cont = ASN1Dict([('pointOneMeterPerSecSquaredForward', 1), ('pointOneMeterPerSecSquaredBackward', -1), ('unavailable', 161)])
    LongitudinalAccelerationValue._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-160, ub=161)], ev=None, er=[])
    
    #-----< AccelerationConfidence >-----#
    AccelerationConfidence = INT(name='AccelerationConfidence', mode=MODE_TYPE)
    AccelerationConfidence._cont = ASN1Dict([('pointOneMeterPerSecSquared', 1), ('outOfRange', 101), ('unavailable', 102)])
    AccelerationConfidence._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=102)], ev=None, er=[])
    
    #-----< LateralAcceleration >-----#
    LateralAcceleration = SEQ(name='LateralAcceleration', mode=MODE_TYPE)
    _LateralAcceleration_lateralAccelerationValue = INT(name='lateralAccelerationValue', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'LateralAccelerationValue')))
    _LateralAcceleration_lateralAccelerationConfidence = INT(name='lateralAccelerationConfidence', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'AccelerationConfidence')))
    LateralAcceleration._cont = ASN1Dict([
        ('lateralAccelerationValue', _LateralAcceleration_lateralAccelerationValue),
        ('lateralAccelerationConfidence', _LateralAcceleration_lateralAccelerationConfidence),
        ])
    LateralAcceleration._ext = None
    
    #-----< LateralAccelerationValue >-----#
    LateralAccelerationValue = INT(name='LateralAccelerationValue', mode=MODE_TYPE)
    LateralAccelerationValue._cont = ASN1Dict([('pointOneMeterPerSecSquaredToRight', -1), ('pointOneMeterPerSecSquaredToLeft', 1), ('unavailable', 161)])
    LateralAccelerationValue._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-160, ub=161)], ev=None, er=[])
    
    #-----< VerticalAcceleration >-----#
    VerticalAcceleration = SEQ(name='VerticalAcceleration', mode=MODE_TYPE)
    _VerticalAcceleration_verticalAccelerationValue = INT(name='verticalAccelerationValue', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'VerticalAccelerationValue')))
    _VerticalAcceleration_verticalAccelerationConfidence = INT(name='verticalAccelerationConfidence', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'AccelerationConfidence')))
    VerticalAcceleration._cont = ASN1Dict([
        ('verticalAccelerationValue', _VerticalAcceleration_verticalAccelerationValue),
        ('verticalAccelerationConfidence', _VerticalAcceleration_verticalAccelerationConfidence),
        ])
    VerticalAcceleration._ext = None
    
    #-----< VerticalAccelerationValue >-----#
    VerticalAccelerationValue = INT(name='VerticalAccelerationValue', mode=MODE_TYPE)
    VerticalAccelerationValue._cont = ASN1Dict([('pointOneMeterPerSecSquaredUp', 1), ('pointOneMeterPerSecSquaredDown', -1), ('unavailable', 161)])
    VerticalAccelerationValue._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-160, ub=161)], ev=None, er=[])
    
    #-----< StationType >-----#
    StationType = INT(name='StationType', mode=MODE_TYPE)
    StationType._cont = ASN1Dict([('unknown', 0), ('pedestrian', 1), ('cyclist', 2), ('moped', 3), ('motorcycle', 4), ('passengerCar', 5), ('bus', 6), ('lightTruck', 7), ('heavyTruck', 8), ('trailer', 9), ('specialVehicles', 10), ('tram', 11), ('roadSideUnit', 15)])
    StationType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=255)], ev=None, er=[])
    
    #-----< ExteriorLights >-----#
    ExteriorLights = BIT_STR(name='ExteriorLights', mode=MODE_TYPE)
    ExteriorLights._cont = ASN1Dict([('lowBeamHeadlightsOn', 0), ('highBeamHeadlightsOn', 1), ('leftTurnSignalOn', 2), ('rightTurnSignalOn', 3), ('daytimeRunningLightsOn', 4), ('reverseLightOn', 5), ('fogLightOn', 6), ('parkingLightsOn', 7)])
    ExteriorLights._const_sz = ASN1Set(rv=[8], rr=[], ev=None, er=[])
    
    #-----< DangerousGoodsBasic >-----#
    DangerousGoodsBasic = ENUM(name='DangerousGoodsBasic', mode=MODE_TYPE)
    DangerousGoodsBasic._cont = ASN1Dict([('explosives1', 0), ('explosives2', 1), ('explosives3', 2), ('explosives4', 3), ('explosives5', 4), ('explosives6', 5), ('flammableGases', 6), ('nonFlammableGases', 7), ('toxicGases', 8), ('flammableLiquids', 9), ('flammableSolids', 10), ('substancesLiableToSpontaneousCombustion', 11), ('substancesEmittingFlammableGasesUponContactWithWater', 12), ('oxidizingSubstances', 13), ('organicPeroxides', 14), ('toxicSubstances', 15), ('infectiousSubstances', 16), ('radioactiveMaterial', 17), ('corrosiveSubstances', 18), ('miscellaneousDangerousSubstances', 19)])
    DangerousGoodsBasic._ext = None
    
    #-----< DangerousGoodsExtended >-----#
    DangerousGoodsExtended = SEQ(name='DangerousGoodsExtended', mode=MODE_TYPE)
    _DangerousGoodsExtended_dangerousGoodsType = ENUM(name='dangerousGoodsType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'DangerousGoodsBasic')))
    _DangerousGoodsExtended_unNumber = INT(name='unNumber', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DangerousGoodsExtended_unNumber._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=9999)], ev=None, er=[])
    _DangerousGoodsExtended_elevatedTemperature = BOOL(name='elevatedTemperature', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DangerousGoodsExtended_tunnelsRestricted = BOOL(name='tunnelsRestricted', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DangerousGoodsExtended_limitedQuantity = BOOL(name='limitedQuantity', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DangerousGoodsExtended_emergencyActionCode = STR_IA5(name='emergencyActionCode', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DangerousGoodsExtended_emergencyActionCode._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=24)], ev=None, er=[])
    _DangerousGoodsExtended_phoneNumber = STR_IA5(name='phoneNumber', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DangerousGoodsExtended_phoneNumber._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=24)], ev=None, er=[])
    _DangerousGoodsExtended_companyName = STR_UTF8(name='companyName', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DangerousGoodsExtended_companyName._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=24)], ev=None, er=[])
    DangerousGoodsExtended._cont = ASN1Dict([
        ('dangerousGoodsType', _DangerousGoodsExtended_dangerousGoodsType),
        ('unNumber', _DangerousGoodsExtended_unNumber),
        ('elevatedTemperature', _DangerousGoodsExtended_elevatedTemperature),
        ('tunnelsRestricted', _DangerousGoodsExtended_tunnelsRestricted),
        ('limitedQuantity', _DangerousGoodsExtended_limitedQuantity),
        ('emergencyActionCode', _DangerousGoodsExtended_emergencyActionCode),
        ('phoneNumber', _DangerousGoodsExtended_phoneNumber),
        ('companyName', _DangerousGoodsExtended_companyName),
        ])
    DangerousGoodsExtended._ext = None
    
    #-----< SpecialTransportType >-----#
    SpecialTransportType = BIT_STR(name='SpecialTransportType', mode=MODE_TYPE)
    SpecialTransportType._cont = ASN1Dict([('heavyLoad', 0), ('excessWidth', 1), ('excessLength', 2), ('excessHeight', 3)])
    SpecialTransportType._const_sz = ASN1Set(rv=[4], rr=[], ev=None, er=[])
    
    #-----< LightBarSirenInUse >-----#
    LightBarSirenInUse = BIT_STR(name='LightBarSirenInUse', mode=MODE_TYPE)
    LightBarSirenInUse._cont = ASN1Dict([('lightBarActivated', 0), ('sirenActivated', 1)])
    LightBarSirenInUse._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    
    #-----< HeightLonCarr >-----#
    HeightLonCarr = INT(name='HeightLonCarr', mode=MODE_TYPE)
    HeightLonCarr._cont = ASN1Dict([('oneCentimeter', 1), ('unavailable', 100)])
    HeightLonCarr._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=100)], ev=None, er=[])
    
    #-----< PosLonCarr >-----#
    PosLonCarr = INT(name='PosLonCarr', mode=MODE_TYPE)
    PosLonCarr._cont = ASN1Dict([('oneCentimeter', 1), ('unavailable', 127)])
    PosLonCarr._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=127)], ev=None, er=[])
    
    #-----< PosPillar >-----#
    PosPillar = INT(name='PosPillar', mode=MODE_TYPE)
    PosPillar._cont = ASN1Dict([('tenCentimeters', 1), ('unavailable', 30)])
    PosPillar._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=30)], ev=None, er=[])
    
    #-----< PosCentMass >-----#
    PosCentMass = INT(name='PosCentMass', mode=MODE_TYPE)
    PosCentMass._cont = ASN1Dict([('tenCentimeters', 1), ('unavailable', 63)])
    PosCentMass._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=63)], ev=None, er=[])
    
    #-----< RequestResponseIndication >-----#
    RequestResponseIndication = ENUM(name='RequestResponseIndication', mode=MODE_TYPE)
    RequestResponseIndication._cont = ASN1Dict([('request', 0), ('response', 1)])
    RequestResponseIndication._ext = None
    
    #-----< SpeedLimit >-----#
    SpeedLimit = INT(name='SpeedLimit', mode=MODE_TYPE)
    SpeedLimit._cont = ASN1Dict([('oneKmPerHour', 1)])
    SpeedLimit._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    
    #-----< StationarySince >-----#
    StationarySince = ENUM(name='StationarySince', mode=MODE_TYPE)
    StationarySince._cont = ASN1Dict([('lessThan1Minute', 0), ('lessThan2Minutes', 1), ('lessThan15Minutes', 2), ('equalOrGreater15Minutes', 3)])
    StationarySince._ext = None
    
    #-----< Temperature >-----#
    Temperature = INT(name='Temperature', mode=MODE_TYPE)
    Temperature._cont = ASN1Dict([('equalOrSmallerThanMinus60Deg', -60), ('oneDegreeCelsius', 1), ('equalOrGreaterThan67Deg', 67)])
    Temperature._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-60, ub=67)], ev=None, er=[])
    
    #-----< TrafficRule >-----#
    TrafficRule = ENUM(name='TrafficRule', mode=MODE_TYPE)
    TrafficRule._cont = ASN1Dict([('noPassing', 0), ('noPassingForTrucks', 1), ('passToRight', 2), ('passToLeft', 3)])
    TrafficRule._ext = []
    
    #-----< WheelBaseVehicle >-----#
    WheelBaseVehicle = INT(name='WheelBaseVehicle', mode=MODE_TYPE)
    WheelBaseVehicle._cont = ASN1Dict([('tenCentimeters', 1), ('unavailable', 127)])
    WheelBaseVehicle._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=127)], ev=None, er=[])
    
    #-----< TurningRadius >-----#
    TurningRadius = INT(name='TurningRadius', mode=MODE_TYPE)
    TurningRadius._cont = ASN1Dict([('point4Meters', 1), ('unavailable', 255)])
    TurningRadius._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=None, er=[])
    
    #-----< PosFrontAx >-----#
    PosFrontAx = INT(name='PosFrontAx', mode=MODE_TYPE)
    PosFrontAx._cont = ASN1Dict([('tenCentimeters', 1), ('unavailable', 20)])
    PosFrontAx._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=20)], ev=None, er=[])
    
    #-----< PositionOfOccupants >-----#
    PositionOfOccupants = BIT_STR(name='PositionOfOccupants', mode=MODE_TYPE)
    PositionOfOccupants._cont = ASN1Dict([('row1LeftOccupied', 0), ('row1RightOccupied', 1), ('row1MidOccupied', 2), ('row1NotDetectable', 3), ('row1NotPresent', 4), ('row2LeftOccupied', 5), ('row2RightOccupied', 6), ('row2MidOccupied', 7), ('row2NotDetectable', 8), ('row2NotPresent', 9), ('row3LeftOccupied', 10), ('row3RightOccupied', 11), ('row3MidOccupied', 12), ('row3NotDetectable', 13), ('row3NotPresent', 14), ('row4LeftOccupied', 15), ('row4RightOccupied', 16), ('row4MidOccupied', 17), ('row4NotDetectable', 18), ('row4NotPresent', 19)])
    PositionOfOccupants._const_sz = ASN1Set(rv=[20], rr=[], ev=None, er=[])
    
    #-----< PositioningSolutionType >-----#
    PositioningSolutionType = ENUM(name='PositioningSolutionType', mode=MODE_TYPE)
    PositioningSolutionType._cont = ASN1Dict([('noPositioningSolution', 0), ('sGNSS', 1), ('dGNSS', 2), ('sGNSSplusDR', 3), ('dGNSSplusDR', 4), ('dR', 5)])
    PositioningSolutionType._ext = []
    
    #-----< VehicleIdentification >-----#
    VehicleIdentification = SEQ(name='VehicleIdentification', mode=MODE_TYPE)
    _VehicleIdentification_wMInumber = STR_IA5(name='wMInumber', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'WMInumber')), opt=True)
    _VehicleIdentification_vDS = STR_IA5(name='vDS', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'VDS')), opt=True)
    VehicleIdentification._cont = ASN1Dict([
        ('wMInumber', _VehicleIdentification_wMInumber),
        ('vDS', _VehicleIdentification_vDS),
        ])
    VehicleIdentification._ext = []
    
    #-----< WMInumber >-----#
    WMInumber = STR_IA5(name='WMInumber', mode=MODE_TYPE)
    WMInumber._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=3)], ev=None, er=[])
    
    #-----< VDS >-----#
    VDS = STR_IA5(name='VDS', mode=MODE_TYPE)
    VDS._const_sz = ASN1Set(rv=[6], rr=[], ev=None, er=[])
    
    #-----< EnergyStorageType >-----#
    EnergyStorageType = BIT_STR(name='EnergyStorageType', mode=MODE_TYPE)
    EnergyStorageType._cont = ASN1Dict([('hydrogenStorage', 0), ('electricEnergyStorage', 1), ('liquidPropaneGas', 2), ('compressedNaturalGas', 3), ('diesel', 4), ('gasoline', 5), ('ammonia', 6)])
    EnergyStorageType._const_sz = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    
    #-----< VehicleLength >-----#
    VehicleLength = SEQ(name='VehicleLength', mode=MODE_TYPE)
    _VehicleLength_vehicleLengthValue = INT(name='vehicleLengthValue', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'VehicleLengthValue')))
    _VehicleLength_vehicleLengthConfidenceIndication = ENUM(name='vehicleLengthConfidenceIndication', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'VehicleLengthConfidenceIndication')))
    VehicleLength._cont = ASN1Dict([
        ('vehicleLengthValue', _VehicleLength_vehicleLengthValue),
        ('vehicleLengthConfidenceIndication', _VehicleLength_vehicleLengthConfidenceIndication),
        ])
    VehicleLength._ext = None
    
    #-----< VehicleLengthValue >-----#
    VehicleLengthValue = INT(name='VehicleLengthValue', mode=MODE_TYPE)
    VehicleLengthValue._cont = ASN1Dict([('tenCentimeters', 1), ('outOfRange', 1022), ('unavailable', 1023)])
    VehicleLengthValue._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=1023)], ev=None, er=[])
    
    #-----< VehicleLengthConfidenceIndication >-----#
    VehicleLengthConfidenceIndication = ENUM(name='VehicleLengthConfidenceIndication', mode=MODE_TYPE)
    VehicleLengthConfidenceIndication._cont = ASN1Dict([('noTrailerPresent', 0), ('trailerPresentWithKnownLength', 1), ('trailerPresentWithUnknownLength', 2), ('trailerPresenceIsUnknown', 3), ('unavailable', 4)])
    VehicleLengthConfidenceIndication._ext = None
    
    #-----< VehicleWidth >-----#
    VehicleWidth = INT(name='VehicleWidth', mode=MODE_TYPE)
    VehicleWidth._cont = ASN1Dict([('tenCentimeters', 1), ('outOfRange', 61), ('unavailable', 62)])
    VehicleWidth._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=62)], ev=None, er=[])
    
    #-----< PathHistory >-----#
    PathHistory = SEQ_OF(name='PathHistory', mode=MODE_TYPE)
    _PathHistory__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ITS-Container', 'PathPoint')))
    PathHistory._cont = _PathHistory__item_
    PathHistory._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=40)], ev=None, er=[])
    
    #-----< EmergencyPriority >-----#
    EmergencyPriority = BIT_STR(name='EmergencyPriority', mode=MODE_TYPE)
    EmergencyPriority._cont = ASN1Dict([('requestForRightOfWay', 0), ('requestForFreeCrossingAtATrafficLight', 1)])
    EmergencyPriority._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    
    #-----< InformationQuality >-----#
    InformationQuality = INT(name='InformationQuality', mode=MODE_TYPE)
    InformationQuality._cont = ASN1Dict([('unavailable', 0), ('lowest', 1), ('highest', 7)])
    InformationQuality._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=7)], ev=None, er=[])
    
    #-----< RoadType >-----#
    RoadType = ENUM(name='RoadType', mode=MODE_TYPE)
    RoadType._cont = ASN1Dict([('urban-NoStructuralSeparationToOppositeLanes', 0), ('urban-WithStructuralSeparationToOppositeLanes', 1), ('nonUrban-NoStructuralSeparationToOppositeLanes', 2), ('nonUrban-WithStructuralSeparationToOppositeLanes', 3)])
    RoadType._ext = None
    
    #-----< SteeringWheelAngle >-----#
    SteeringWheelAngle = SEQ(name='SteeringWheelAngle', mode=MODE_TYPE)
    _SteeringWheelAngle_steeringWheelAngleValue = INT(name='steeringWheelAngleValue', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'SteeringWheelAngleValue')))
    _SteeringWheelAngle_steeringWheelAngleConfidence = INT(name='steeringWheelAngleConfidence', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'SteeringWheelAngleConfidence')))
    SteeringWheelAngle._cont = ASN1Dict([
        ('steeringWheelAngleValue', _SteeringWheelAngle_steeringWheelAngleValue),
        ('steeringWheelAngleConfidence', _SteeringWheelAngle_steeringWheelAngleConfidence),
        ])
    SteeringWheelAngle._ext = None
    
    #-----< SteeringWheelAngleValue >-----#
    SteeringWheelAngleValue = INT(name='SteeringWheelAngleValue', mode=MODE_TYPE)
    SteeringWheelAngleValue._cont = ASN1Dict([('straight', 0), ('onePointFiveDegreesToRight', -1), ('onePointFiveDegreesToLeft', 1), ('unavailable', 512)])
    SteeringWheelAngleValue._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-511, ub=512)], ev=None, er=[])
    
    #-----< SteeringWheelAngleConfidence >-----#
    SteeringWheelAngleConfidence = INT(name='SteeringWheelAngleConfidence', mode=MODE_TYPE)
    SteeringWheelAngleConfidence._cont = ASN1Dict([('equalOrWithinOnePointFiveDegree', 1), ('outOfRange', 126), ('unavailable', 127)])
    SteeringWheelAngleConfidence._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=127)], ev=None, er=[])
    
    #-----< TimestampIts >-----#
    TimestampIts = INT(name='TimestampIts', mode=MODE_TYPE)
    TimestampIts._cont = ASN1Dict([('utcStartOf2004', 0), ('oneMillisecAfterUTCStartOf2004', 1)])
    TimestampIts._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=4398046511103)], ev=None, er=[])
    
    #-----< VehicleRole >-----#
    VehicleRole = ENUM(name='VehicleRole', mode=MODE_TYPE)
    VehicleRole._cont = ASN1Dict([('default', 0), ('publicTransport', 1), ('specialTransport', 2), ('dangerousGoods', 3), ('roadWork', 4), ('rescue', 5), ('emergency', 6), ('safetyCar', 7), ('agriculture', 8), ('commercial', 9), ('military', 10), ('roadOperator', 11), ('taxi', 12), ('reserved1', 13), ('reserved2', 14), ('reserved3', 15)])
    VehicleRole._ext = None
    
    #-----< YawRate >-----#
    YawRate = SEQ(name='YawRate', mode=MODE_TYPE)
    _YawRate_yawRateValue = INT(name='yawRateValue', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'YawRateValue')))
    _YawRate_yawRateConfidence = ENUM(name='yawRateConfidence', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'YawRateConfidence')))
    YawRate._cont = ASN1Dict([
        ('yawRateValue', _YawRate_yawRateValue),
        ('yawRateConfidence', _YawRate_yawRateConfidence),
        ])
    YawRate._ext = None
    
    #-----< YawRateValue >-----#
    YawRateValue = INT(name='YawRateValue', mode=MODE_TYPE)
    YawRateValue._cont = ASN1Dict([('straight', 0), ('degSec-000-01ToRight', -1), ('degSec-000-01ToLeft', 1), ('unavailable', 32767)])
    YawRateValue._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-32766, ub=32767)], ev=None, er=[])
    
    #-----< YawRateConfidence >-----#
    YawRateConfidence = ENUM(name='YawRateConfidence', mode=MODE_TYPE)
    YawRateConfidence._cont = ASN1Dict([('degSec-000-01', 0), ('degSec-000-05', 1), ('degSec-000-10', 2), ('degSec-001-00', 3), ('degSec-005-00', 4), ('degSec-010-00', 5), ('degSec-100-00', 6), ('outOfRange', 7), ('unavailable', 8)])
    YawRateConfidence._ext = None
    
    #-----< ProtectedZoneType >-----#
    ProtectedZoneType = ENUM(name='ProtectedZoneType', mode=MODE_TYPE)
    ProtectedZoneType._cont = ASN1Dict([('cenDsrcTolling', 0)])
    ProtectedZoneType._ext = []
    
    #-----< RelevanceDistance >-----#
    RelevanceDistance = ENUM(name='RelevanceDistance', mode=MODE_TYPE)
    RelevanceDistance._cont = ASN1Dict([('lessThan50m', 0), ('lessThan100m', 1), ('lessThan200m', 2), ('lessThan500m', 3), ('lessThan1000m', 4), ('lessThan5km', 5), ('lessThan10km', 6), ('over10km', 7)])
    RelevanceDistance._ext = None
    
    #-----< RelevanceTrafficDirection >-----#
    RelevanceTrafficDirection = ENUM(name='RelevanceTrafficDirection', mode=MODE_TYPE)
    RelevanceTrafficDirection._cont = ASN1Dict([('allTrafficDirections', 0), ('upstreamTraffic', 1), ('downstreamTraffic', 2), ('oppositeTraffic', 3)])
    RelevanceTrafficDirection._ext = None
    
    #-----< TransmissionInterval >-----#
    TransmissionInterval = INT(name='TransmissionInterval', mode=MODE_TYPE)
    TransmissionInterval._cont = ASN1Dict([('oneMilliSecond', 1), ('tenSeconds', 10000)])
    TransmissionInterval._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=10000)], ev=None, er=[])
    
    #-----< ValidityDuration >-----#
    ValidityDuration = INT(name='ValidityDuration', mode=MODE_TYPE)
    ValidityDuration._cont = ASN1Dict([('timeOfDetection', 0), ('oneSecondAfterDetection', 1)])
    ValidityDuration._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=86400)], ev=None, er=[])
    
    #-----< ActionID >-----#
    ActionID = SEQ(name='ActionID', mode=MODE_TYPE)
    _ActionID_originatingStationID = INT(name='originatingStationID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'StationID')))
    _ActionID_sequenceNumber = INT(name='sequenceNumber', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'SequenceNumber')))
    ActionID._cont = ASN1Dict([
        ('originatingStationID', _ActionID_originatingStationID),
        ('sequenceNumber', _ActionID_sequenceNumber),
        ])
    ActionID._ext = None
    
    #-----< ItineraryPath >-----#
    ItineraryPath = SEQ_OF(name='ItineraryPath', mode=MODE_TYPE)
    _ItineraryPath__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ITS-Container', 'ReferencePosition')))
    ItineraryPath._cont = _ItineraryPath__item_
    ItineraryPath._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=40)], ev=None, er=[])
    
    #-----< ProtectedCommunicationZone >-----#
    ProtectedCommunicationZone = SEQ(name='ProtectedCommunicationZone', mode=MODE_TYPE)
    _ProtectedCommunicationZone_protectedZoneType = ENUM(name='protectedZoneType', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ProtectedZoneType')))
    _ProtectedCommunicationZone_expiryTime = INT(name='expiryTime', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'TimestampIts')), opt=True)
    _ProtectedCommunicationZone_protectedZoneLatitude = INT(name='protectedZoneLatitude', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Latitude')))
    _ProtectedCommunicationZone_protectedZoneLongitude = INT(name='protectedZoneLongitude', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Longitude')))
    _ProtectedCommunicationZone_protectedZoneRadius = INT(name='protectedZoneRadius', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ProtectedZoneRadius')), opt=True)
    _ProtectedCommunicationZone_protectedZoneID = INT(name='protectedZoneID', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'ProtectedZoneID')), opt=True)
    ProtectedCommunicationZone._cont = ASN1Dict([
        ('protectedZoneType', _ProtectedCommunicationZone_protectedZoneType),
        ('expiryTime', _ProtectedCommunicationZone_expiryTime),
        ('protectedZoneLatitude', _ProtectedCommunicationZone_protectedZoneLatitude),
        ('protectedZoneLongitude', _ProtectedCommunicationZone_protectedZoneLongitude),
        ('protectedZoneRadius', _ProtectedCommunicationZone_protectedZoneRadius),
        ('protectedZoneID', _ProtectedCommunicationZone_protectedZoneID),
        ])
    ProtectedCommunicationZone._ext = None
    
    #-----< Traces >-----#
    Traces = SEQ_OF(name='Traces', mode=MODE_TYPE)
    _Traces__item_ = SEQ_OF(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ITS-Container', 'PathHistory')))
    Traces._cont = _Traces__item_
    Traces._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=7)], ev=None, er=[])
    
    #-----< NumberOfOccupants >-----#
    NumberOfOccupants = INT(name='NumberOfOccupants', mode=MODE_TYPE)
    NumberOfOccupants._cont = ASN1Dict([('oneOccupant', 1), ('unavailable', 127)])
    NumberOfOccupants._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=None, er=[])
    
    #-----< SequenceNumber >-----#
    SequenceNumber = INT(name='SequenceNumber', mode=MODE_TYPE)
    SequenceNumber._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< PositionOfPillars >-----#
    PositionOfPillars = SEQ_OF(name='PositionOfPillars', mode=MODE_TYPE)
    _PositionOfPillars__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ITS-Container', 'PosPillar')))
    PositionOfPillars._cont = _PositionOfPillars__item_
    PositionOfPillars._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=3)], ev=[], er=[])
    
    #-----< RestrictedTypes >-----#
    RestrictedTypes = SEQ_OF(name='RestrictedTypes', mode=MODE_TYPE)
    _RestrictedTypes__item_ = INT(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ITS-Container', 'StationType')))
    RestrictedTypes._cont = _RestrictedTypes__item_
    RestrictedTypes._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=3)], ev=[], er=[])
    
    #-----< EventHistory >-----#
    EventHistory = SEQ_OF(name='EventHistory', mode=MODE_TYPE)
    _EventHistory__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ITS-Container', 'EventPoint')))
    EventHistory._cont = _EventHistory__item_
    EventHistory._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=23)], ev=None, er=[])
    
    #-----< EventPoint >-----#
    EventPoint = SEQ(name='EventPoint', mode=MODE_TYPE)
    _EventPoint_eventPosition = SEQ(name='eventPosition', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'DeltaReferencePosition')))
    _EventPoint_eventDeltaTime = INT(name='eventDeltaTime', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'PathDeltaTime')), opt=True)
    _EventPoint_informationQuality = INT(name='informationQuality', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'InformationQuality')))
    EventPoint._cont = ASN1Dict([
        ('eventPosition', _EventPoint_eventPosition),
        ('eventDeltaTime', _EventPoint_eventDeltaTime),
        ('informationQuality', _EventPoint_informationQuality),
        ])
    EventPoint._ext = None
    
    #-----< ProtectedCommunicationZonesRSU >-----#
    ProtectedCommunicationZonesRSU = SEQ_OF(name='ProtectedCommunicationZonesRSU', mode=MODE_TYPE)
    _ProtectedCommunicationZonesRSU__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('ITS-Container', 'ProtectedCommunicationZone')))
    ProtectedCommunicationZonesRSU._cont = _ProtectedCommunicationZonesRSU__item_
    ProtectedCommunicationZonesRSU._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=16)], ev=None, er=[])
    
    #-----< CenDsrcTollingZone >-----#
    CenDsrcTollingZone = SEQ(name='CenDsrcTollingZone', mode=MODE_TYPE)
    _CenDsrcTollingZone_protectedZoneLatitude = INT(name='protectedZoneLatitude', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Latitude')))
    _CenDsrcTollingZone_protectedZoneLongitude = INT(name='protectedZoneLongitude', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'Longitude')))
    _CenDsrcTollingZone_cenDsrcTollingZoneID = INT(name='cenDsrcTollingZoneID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ITS-Container', 'CenDsrcTollingZoneID')), opt=True)
    CenDsrcTollingZone._cont = ASN1Dict([
        ('protectedZoneLatitude', _CenDsrcTollingZone_protectedZoneLatitude),
        ('protectedZoneLongitude', _CenDsrcTollingZone_protectedZoneLongitude),
        ('cenDsrcTollingZoneID', _CenDsrcTollingZone_cenDsrcTollingZoneID),
        ])
    CenDsrcTollingZone._ext = None
    
    #-----< ProtectedZoneRadius >-----#
    ProtectedZoneRadius = INT(name='ProtectedZoneRadius', mode=MODE_TYPE)
    ProtectedZoneRadius._cont = ASN1Dict([('oneMeter', 1)])
    ProtectedZoneRadius._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=255)], ev=[], er=[])
    
    #-----< ProtectedZoneID >-----#
    ProtectedZoneID = INT(name='ProtectedZoneID', mode=MODE_TYPE)
    ProtectedZoneID._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=134217727)], ev=None, er=[])
    
    #-----< CenDsrcTollingZoneID >-----#
    CenDsrcTollingZoneID = INT(name='CenDsrcTollingZoneID', mode=MODE_TYPE, typeref=ASN1RefType(('ITS-Container', 'ProtectedZoneID')))
    
    _all_ = [
        _ItsPduHeader_protocolVersion,
        _ItsPduHeader_messageID,
        _ItsPduHeader_stationID,
        ItsPduHeader,
        StationID,
        _ReferencePosition_latitude,
        _ReferencePosition_longitude,
        _ReferencePosition_positionConfidenceEllipse,
        _ReferencePosition_altitude,
        ReferencePosition,
        _DeltaReferencePosition_deltaLatitude,
        _DeltaReferencePosition_deltaLongitude,
        _DeltaReferencePosition_deltaAltitude,
        DeltaReferencePosition,
        Longitude,
        Latitude,
        _Altitude_altitudeValue,
        _Altitude_altitudeConfidence,
        Altitude,
        AltitudeValue,
        AltitudeConfidence,
        DeltaLongitude,
        DeltaLatitude,
        DeltaAltitude,
        _PosConfidenceEllipse_semiMajorConfidence,
        _PosConfidenceEllipse_semiMinorConfidence,
        _PosConfidenceEllipse_semiMajorOrientation,
        PosConfidenceEllipse,
        _PathPoint_pathPosition,
        _PathPoint_pathDeltaTime,
        PathPoint,
        PathDeltaTime,
        _PtActivation_ptActivationType,
        _PtActivation_ptActivationData,
        PtActivation,
        PtActivationType,
        PtActivationData,
        AccelerationControl,
        SemiAxisLength,
        _CauseCode_causeCode,
        _CauseCode_subCauseCode,
        CauseCode,
        CauseCodeType,
        SubCauseCodeType,
        TrafficConditionSubCauseCode,
        AccidentSubCauseCode,
        RoadworksSubCauseCode,
        HumanPresenceOnTheRoadSubCauseCode,
        WrongWayDrivingSubCauseCode,
        AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCode,
        AdverseWeatherCondition_AdhesionSubCauseCode,
        AdverseWeatherCondition_VisibilitySubCauseCode,
        AdverseWeatherCondition_PrecipitationSubCauseCode,
        SlowVehicleSubCauseCode,
        StationaryVehicleSubCauseCode,
        HumanProblemSubCauseCode,
        EmergencyVehicleApproachingSubCauseCode,
        HazardousLocation_DangerousCurveSubCauseCode,
        HazardousLocation_SurfaceConditionSubCauseCode,
        HazardousLocation_ObstacleOnTheRoadSubCauseCode,
        HazardousLocation_AnimalOnTheRoadSubCauseCode,
        CollisionRiskSubCauseCode,
        SignalViolationSubCauseCode,
        RescueAndRecoveryWorkInProgressSubCauseCode,
        DangerousEndOfQueueSubCauseCode,
        DangerousSituationSubCauseCode,
        VehicleBreakdownSubCauseCode,
        PostCrashSubCauseCode,
        _Curvature_curvatureValue,
        _Curvature_curvatureConfidence,
        Curvature,
        CurvatureValue,
        CurvatureConfidence,
        CurvatureCalculationMode,
        _Heading_headingValue,
        _Heading_headingConfidence,
        Heading,
        HeadingValue,
        HeadingConfidence,
        LanePosition,
        _ClosedLanes_hardShoulderStatus,
        _ClosedLanes_drivingLaneStatus,
        ClosedLanes,
        HardShoulderStatus,
        DrivingLaneStatus,
        PerformanceClass,
        SpeedValue,
        SpeedConfidence,
        VehicleMass,
        _Speed_speedValue,
        _Speed_speedConfidence,
        Speed,
        DriveDirection,
        EmbarkationStatus,
        _LongitudinalAcceleration_longitudinalAccelerationValue,
        _LongitudinalAcceleration_longitudinalAccelerationConfidence,
        LongitudinalAcceleration,
        LongitudinalAccelerationValue,
        AccelerationConfidence,
        _LateralAcceleration_lateralAccelerationValue,
        _LateralAcceleration_lateralAccelerationConfidence,
        LateralAcceleration,
        LateralAccelerationValue,
        _VerticalAcceleration_verticalAccelerationValue,
        _VerticalAcceleration_verticalAccelerationConfidence,
        VerticalAcceleration,
        VerticalAccelerationValue,
        StationType,
        ExteriorLights,
        DangerousGoodsBasic,
        _DangerousGoodsExtended_dangerousGoodsType,
        _DangerousGoodsExtended_unNumber,
        _DangerousGoodsExtended_elevatedTemperature,
        _DangerousGoodsExtended_tunnelsRestricted,
        _DangerousGoodsExtended_limitedQuantity,
        _DangerousGoodsExtended_emergencyActionCode,
        _DangerousGoodsExtended_phoneNumber,
        _DangerousGoodsExtended_companyName,
        DangerousGoodsExtended,
        SpecialTransportType,
        LightBarSirenInUse,
        HeightLonCarr,
        PosLonCarr,
        PosPillar,
        PosCentMass,
        RequestResponseIndication,
        SpeedLimit,
        StationarySince,
        Temperature,
        TrafficRule,
        WheelBaseVehicle,
        TurningRadius,
        PosFrontAx,
        PositionOfOccupants,
        PositioningSolutionType,
        _VehicleIdentification_wMInumber,
        _VehicleIdentification_vDS,
        VehicleIdentification,
        WMInumber,
        VDS,
        EnergyStorageType,
        _VehicleLength_vehicleLengthValue,
        _VehicleLength_vehicleLengthConfidenceIndication,
        VehicleLength,
        VehicleLengthValue,
        VehicleLengthConfidenceIndication,
        VehicleWidth,
        _PathHistory__item_,
        PathHistory,
        EmergencyPriority,
        InformationQuality,
        RoadType,
        _SteeringWheelAngle_steeringWheelAngleValue,
        _SteeringWheelAngle_steeringWheelAngleConfidence,
        SteeringWheelAngle,
        SteeringWheelAngleValue,
        SteeringWheelAngleConfidence,
        TimestampIts,
        VehicleRole,
        _YawRate_yawRateValue,
        _YawRate_yawRateConfidence,
        YawRate,
        YawRateValue,
        YawRateConfidence,
        ProtectedZoneType,
        RelevanceDistance,
        RelevanceTrafficDirection,
        TransmissionInterval,
        ValidityDuration,
        _ActionID_originatingStationID,
        _ActionID_sequenceNumber,
        ActionID,
        _ItineraryPath__item_,
        ItineraryPath,
        _ProtectedCommunicationZone_protectedZoneType,
        _ProtectedCommunicationZone_expiryTime,
        _ProtectedCommunicationZone_protectedZoneLatitude,
        _ProtectedCommunicationZone_protectedZoneLongitude,
        _ProtectedCommunicationZone_protectedZoneRadius,
        _ProtectedCommunicationZone_protectedZoneID,
        ProtectedCommunicationZone,
        _Traces__item_,
        Traces,
        NumberOfOccupants,
        SequenceNumber,
        _PositionOfPillars__item_,
        PositionOfPillars,
        _RestrictedTypes__item_,
        RestrictedTypes,
        _EventHistory__item_,
        EventHistory,
        _EventPoint_eventPosition,
        _EventPoint_eventDeltaTime,
        _EventPoint_informationQuality,
        EventPoint,
        _ProtectedCommunicationZonesRSU__item_,
        ProtectedCommunicationZonesRSU,
        _CenDsrcTollingZone_protectedZoneLatitude,
        _CenDsrcTollingZone_protectedZoneLongitude,
        _CenDsrcTollingZone_cenDsrcTollingZoneID,
        CenDsrcTollingZone,
        ProtectedZoneRadius,
        ProtectedZoneID,
        CenDsrcTollingZoneID,
    ]

class ProtocolManagementInformation:

    _name_  = 'ProtocolManagementInformation'
    _oid_   = [1, 0, 15662, 1]
    
    _obj_ = [
        'ProtocolManagementInformation',
        'SelectionOfCommunicationSystem',
        'ApplicationIdentifiers',
        'Address',
        'Priority',
        'Security',
        'ApplicationExecution',
        'Responsiveness',
        'Directionality',
        'UsageEnvironment',
        'ServiceArea',
        'ServiceTime',
        'Bandwidth',
        'ConnectionCost',
        'ValidTime',
        'TargetArea',
        ]
    _type_ = [
        'ProtocolManagementInformation',
        'SelectionOfCommunicationSystem',
        'ApplicationIdentifiers',
        'Address',
        'Priority',
        'Security',
        'ApplicationExecution',
        'Responsiveness',
        'Directionality',
        'UsageEnvironment',
        'ServiceArea',
        'ServiceTime',
        'Bandwidth',
        'ConnectionCost',
        'ValidTime',
        'TargetArea',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< ProtocolManagementInformation >-----#
    ProtocolManagementInformation = SEQ(name='ProtocolManagementInformation', mode=MODE_TYPE)
    _ProtocolManagementInformation_selectionOfCommunicationSysyem = SEQ(name='selectionOfCommunicationSysyem', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProtocolManagementInformation', 'SelectionOfCommunicationSystem')), opt=True)
    _ProtocolManagementInformation_applicationIdentifiers = SEQ(name='applicationIdentifiers', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProtocolManagementInformation', 'ApplicationIdentifiers')), opt=True)
    _ProtocolManagementInformation_address = SEQ(name='address', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProtocolManagementInformation', 'Address')), opt=True)
    _ProtocolManagementInformation_priority = SEQ(name='priority', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProtocolManagementInformation', 'Priority')), opt=True)
    _ProtocolManagementInformation_security = BIT_STR(name='security', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProtocolManagementInformation', 'Security')), opt=True)
    _ProtocolManagementInformation_applicationExecution = SEQ(name='applicationExecution', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProtocolManagementInformation', 'ApplicationExecution')), opt=True)
    ProtocolManagementInformation._cont = ASN1Dict([
        ('selectionOfCommunicationSysyem', _ProtocolManagementInformation_selectionOfCommunicationSysyem),
        ('applicationIdentifiers', _ProtocolManagementInformation_applicationIdentifiers),
        ('address', _ProtocolManagementInformation_address),
        ('priority', _ProtocolManagementInformation_priority),
        ('security', _ProtocolManagementInformation_security),
        ('applicationExecution', _ProtocolManagementInformation_applicationExecution),
        ])
    ProtocolManagementInformation._ext = None
    
    #-----< SelectionOfCommunicationSystem >-----#
    SelectionOfCommunicationSystem = SEQ(name='SelectionOfCommunicationSystem', mode=MODE_TYPE)
    _SelectionOfCommunicationSystem_responsiveness = SEQ(name='responsiveness', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProtocolManagementInformation', 'Responsiveness')), opt=True)
    _SelectionOfCommunicationSystem_directionality = INT(name='directionality', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProtocolManagementInformation', 'Directionality')), opt=True)
    _SelectionOfCommunicationSystem_usageEnvironment = SEQ(name='usageEnvironment', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProtocolManagementInformation', 'UsageEnvironment')), opt=True)
    _SelectionOfCommunicationSystem_serviceArea = SEQ(name='serviceArea', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProtocolManagementInformation', 'ServiceArea')), opt=True)
    _SelectionOfCommunicationSystem_serviceTime = SEQ(name='serviceTime', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProtocolManagementInformation', 'ServiceTime')), opt=True)
    _SelectionOfCommunicationSystem_bandwidth = SEQ(name='bandwidth', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProtocolManagementInformation', 'Bandwidth')), opt=True)
    _SelectionOfCommunicationSystem_connectionCost = SEQ(name='connectionCost', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProtocolManagementInformation', 'ConnectionCost')), opt=True)
    SelectionOfCommunicationSystem._cont = ASN1Dict([
        ('responsiveness', _SelectionOfCommunicationSystem_responsiveness),
        ('directionality', _SelectionOfCommunicationSystem_directionality),
        ('usageEnvironment', _SelectionOfCommunicationSystem_usageEnvironment),
        ('serviceArea', _SelectionOfCommunicationSystem_serviceArea),
        ('serviceTime', _SelectionOfCommunicationSystem_serviceTime),
        ('bandwidth', _SelectionOfCommunicationSystem_bandwidth),
        ('connectionCost', _SelectionOfCommunicationSystem_connectionCost),
        ])
    SelectionOfCommunicationSystem._ext = None
    
    #-----< ApplicationIdentifiers >-----#
    ApplicationIdentifiers = SEQ(name='ApplicationIdentifiers', mode=MODE_TYPE)
    _ApplicationIdentifiers_messageIdentifier = EXT(name='messageIdentifier', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('_IMPL_', 'EXTERNAL')), opt=True)
    _ApplicationIdentifiers_messageNumber = INT(name='messageNumber', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ApplicationIdentifiers_timeOfMessageTransmission = TIME_GEN(name='timeOfMessageTransmission', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    ApplicationIdentifiers._cont = ASN1Dict([
        ('messageIdentifier', _ApplicationIdentifiers_messageIdentifier),
        ('messageNumber', _ApplicationIdentifiers_messageNumber),
        ('timeOfMessageTransmission', _ApplicationIdentifiers_timeOfMessageTransmission),
        ])
    ApplicationIdentifiers._ext = None
    
    #-----< Address >-----#
    Address = SEQ(name='Address', mode=MODE_TYPE)
    _Address_addressOfOrigin = EXT(name='addressOfOrigin', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('_IMPL_', 'EXTERNAL')), opt=True)
    _Address_addressOfDestination = EXT(name='addressOfDestination', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('_IMPL_', 'EXTERNAL')), opt=True)
    Address._cont = ASN1Dict([
        ('addressOfOrigin', _Address_addressOfOrigin),
        ('addressOfDestination', _Address_addressOfDestination),
        ])
    Address._ext = None
    
    #-----< Priority >-----#
    Priority = SEQ(name='Priority', mode=MODE_TYPE)
    _Priority_interruptHandling = INT(name='interruptHandling', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Priority_interruptHandling._cont = ASN1Dict([('undefined', 0), ('lowPriority', 1), ('middlePriority', 2), ('highPriority', 3)])
    _Priority_interruptHandlingLevel = INT(name='interruptHandlingLevel', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Priority_queueControl = INT(name='queueControl', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Priority_queueControl._cont = ASN1Dict([('undefined-FIFO', 0), ('lIFO', 1), ('random', 2), ('re-try', 3), ('errorNotification', 4)])
    Priority._cont = ASN1Dict([
        ('interruptHandling', _Priority_interruptHandling),
        ('interruptHandlingLevel', _Priority_interruptHandlingLevel),
        ('queueControl', _Priority_queueControl),
        ])
    Priority._ext = None
    
    #-----< Security >-----#
    Security = BIT_STR(name='Security', mode=MODE_TYPE)
    Security._cont = ASN1Dict([('userAuthentication', 0), ('terminalAuthentication', 1), ('dataAuthentication', 2), ('consealment', 3)])
    
    #-----< ApplicationExecution >-----#
    ApplicationExecution = SEQ(name='ApplicationExecution', mode=MODE_TYPE)
    _ApplicationExecution_validTime = SEQ(name='validTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProtocolManagementInformation', 'ValidTime')))
    _ApplicationExecution_timeStamp = TIME_GEN(name='timeStamp', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ApplicationExecution_targetArea = SEQ(name='targetArea', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('ProtocolManagementInformation', 'TargetArea')))
    ApplicationExecution._cont = ASN1Dict([
        ('validTime', _ApplicationExecution_validTime),
        ('timeStamp', _ApplicationExecution_timeStamp),
        ('targetArea', _ApplicationExecution_targetArea),
        ])
    ApplicationExecution._ext = None
    
    #-----< Responsiveness >-----#
    Responsiveness = SEQ(name='Responsiveness', mode=MODE_TYPE)
    _Responsiveness_responsivenessCode = INT(name='responsivenessCode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Responsiveness_responsivenessCode._cont = ASN1Dict([('undefined', 0), ('within1Sec', 1), ('within30Sec', 2), ('oneMinute', 3), ('fifteenMinute', 4), ('other', 5), ('error', 6)])
    _Responsiveness_responsivenessValue = TIME_UTC(name='responsivenessValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    Responsiveness._cont = ASN1Dict([
        ('responsivenessCode', _Responsiveness_responsivenessCode),
        ('responsivenessValue', _Responsiveness_responsivenessValue),
        ])
    Responsiveness._ext = None
    
    #-----< Directionality >-----#
    Directionality = INT(name='Directionality', mode=MODE_TYPE)
    Directionality._cont = ASN1Dict([('undefined', 0), ('unidirectional', 1), ('bidirectional-Symmetric', 2), ('bidirectional-UpLarger', 3), ('bidirectional-DownLarger', 4)])
    
    #-----< UsageEnvironment >-----#
    UsageEnvironment = SEQ(name='UsageEnvironment', mode=MODE_TYPE)
    _UsageEnvironment_meansOfTransportation = BIT_STR(name='meansOfTransportation', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _UsageEnvironment_meansOfTransportation._cont = ASN1Dict([('undefined', 0), ('vehicle', 1), ('publicTransport', 2), ('foot', 3), ('bicycle', 4), ('motorCycle', 5), ('moped', 6), ('car', 7), ('truck', 8), ('emergencyVehicle', 9), ('buss', 10), ('tram', 11), ('train', 12), ('ferry', 13), ('taxi', 14), ('other', 15)])
    _UsageEnvironment_speed = INT(name='speed', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _UsageEnvironment_speed._cont = ASN1Dict([('undefined', 0), ('fast', 1), ('middle', 2), ('slow', 3), ('stopped', 4), ('other', 5)])
    _UsageEnvironment_speedValue = EXT(name='speedValue', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('_IMPL_', 'EXTERNAL')), opt=True)
    UsageEnvironment._cont = ASN1Dict([
        ('meansOfTransportation', _UsageEnvironment_meansOfTransportation),
        ('speed', _UsageEnvironment_speed),
        ('speedValue', _UsageEnvironment_speedValue),
        ])
    UsageEnvironment._ext = None
    
    #-----< ServiceArea >-----#
    ServiceArea = SEQ(name='ServiceArea', mode=MODE_TYPE)
    _ServiceArea_serviceAreaCode = INT(name='serviceAreaCode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ServiceArea_serviceAreaCode._cont = ASN1Dict([('undefined', 0), ('continuous', 1), ('non-continuous', 2)])
    _ServiceArea_serviceAreaValue = EXT(name='serviceAreaValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('_IMPL_', 'EXTERNAL')), opt=True)
    ServiceArea._cont = ASN1Dict([
        ('serviceAreaCode', _ServiceArea_serviceAreaCode),
        ('serviceAreaValue', _ServiceArea_serviceAreaValue),
        ])
    ServiceArea._ext = None
    
    #-----< ServiceTime >-----#
    ServiceTime = SEQ(name='ServiceTime', mode=MODE_TYPE)
    _ServiceTime_serviceTimeCode = INT(name='serviceTimeCode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ServiceTime_serviceTimeCode._cont = ASN1Dict([('undefined', 0), ('start-StopTime', 1), ('startTime', 2), ('stopTime', 3), ('continuous', 4)])
    _ServiceTime_serviceTimeValue = EXT(name='serviceTimeValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('_IMPL_', 'EXTERNAL')), opt=True)
    ServiceTime._cont = ASN1Dict([
        ('serviceTimeCode', _ServiceTime_serviceTimeCode),
        ('serviceTimeValue', _ServiceTime_serviceTimeValue),
        ])
    ServiceTime._ext = None
    
    #-----< Bandwidth >-----#
    Bandwidth = SEQ(name='Bandwidth', mode=MODE_TYPE)
    _Bandwidth_capacityOfTransmissionValue = INT(name='capacityOfTransmissionValue', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Bandwidth_dataExpressionCode = BIT_STR(name='dataExpressionCode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Bandwidth_dataExpressionCode._cont = ASN1Dict([('undefined', 0), ('text', 1), ('audio', 2), ('simpleGraphic', 3), ('stillImage', 4), ('video', 5), ('other', 6)])
    Bandwidth._cont = ASN1Dict([
        ('capacityOfTransmissionValue', _Bandwidth_capacityOfTransmissionValue),
        ('dataExpressionCode', _Bandwidth_dataExpressionCode),
        ])
    Bandwidth._ext = None
    
    #-----< ConnectionCost >-----#
    ConnectionCost = SEQ(name='ConnectionCost', mode=MODE_TYPE)
    _ConnectionCost_maximumCostRequirement = INT(name='maximumCostRequirement', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ConnectionCost_maximumCostRequirement._cont = ASN1Dict([('undefined', 0), ('totalCost', 1), ('timeUnitPrice', 2), ('bitUnitPrice', 3), ('other', 4)])
    _ConnectionCost_maximumCostValue = EXT(name='maximumCostValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('_IMPL_', 'EXTERNAL')), opt=True)
    ConnectionCost._cont = ASN1Dict([
        ('maximumCostRequirement', _ConnectionCost_maximumCostRequirement),
        ('maximumCostValue', _ConnectionCost_maximumCostValue),
        ])
    ConnectionCost._ext = None
    
    #-----< ValidTime >-----#
    ValidTime = SEQ(name='ValidTime', mode=MODE_TYPE)
    _ValidTime_validTimeCode = INT(name='validTimeCode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ValidTime_validTimeCode._cont = ASN1Dict([('undefined', 0), ('duringReceptionOnly', 1), ('timeDesignated', 2), ('untilUpdated', 3), ('other', 4)])
    _ValidTime_validTimeValue = EXT(name='validTimeValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('_IMPL_', 'EXTERNAL')), opt=True)
    ValidTime._cont = ASN1Dict([
        ('validTimeCode', _ValidTime_validTimeCode),
        ('validTimeValue', _ValidTime_validTimeValue),
        ])
    ValidTime._ext = None
    
    #-----< TargetArea >-----#
    TargetArea = SEQ(name='TargetArea', mode=MODE_TYPE)
    _TargetArea_targetAreaCode = INT(name='targetAreaCode', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TargetArea_targetAreaCode._cont = ASN1Dict([('undefined', 0), ('spot', 1), ('zone', 2), ('interval', 3), ('region', 4), ('wideArea', 5), ('other', 6)])
    _TargetArea_targetAreaValue = EXT(name='targetAreaValue', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('_IMPL_', 'EXTERNAL')), opt=True)
    TargetArea._cont = ASN1Dict([
        ('targetAreaCode', _TargetArea_targetAreaCode),
        ('targetAreaValue', _TargetArea_targetAreaValue),
        ])
    TargetArea._ext = None
    
    _all_ = [
        _ProtocolManagementInformation_selectionOfCommunicationSysyem,
        _ProtocolManagementInformation_applicationIdentifiers,
        _ProtocolManagementInformation_address,
        _ProtocolManagementInformation_priority,
        _ProtocolManagementInformation_security,
        _ProtocolManagementInformation_applicationExecution,
        ProtocolManagementInformation,
        _SelectionOfCommunicationSystem_responsiveness,
        _SelectionOfCommunicationSystem_directionality,
        _SelectionOfCommunicationSystem_usageEnvironment,
        _SelectionOfCommunicationSystem_serviceArea,
        _SelectionOfCommunicationSystem_serviceTime,
        _SelectionOfCommunicationSystem_bandwidth,
        _SelectionOfCommunicationSystem_connectionCost,
        SelectionOfCommunicationSystem,
        _ApplicationIdentifiers_messageIdentifier,
        _ApplicationIdentifiers_messageNumber,
        _ApplicationIdentifiers_timeOfMessageTransmission,
        ApplicationIdentifiers,
        _Address_addressOfOrigin,
        _Address_addressOfDestination,
        Address,
        _Priority_interruptHandling,
        _Priority_interruptHandlingLevel,
        _Priority_queueControl,
        Priority,
        Security,
        _ApplicationExecution_validTime,
        _ApplicationExecution_timeStamp,
        _ApplicationExecution_targetArea,
        ApplicationExecution,
        _Responsiveness_responsivenessCode,
        _Responsiveness_responsivenessValue,
        Responsiveness,
        Directionality,
        _UsageEnvironment_meansOfTransportation,
        _UsageEnvironment_speed,
        _UsageEnvironment_speedValue,
        UsageEnvironment,
        _ServiceArea_serviceAreaCode,
        _ServiceArea_serviceAreaValue,
        ServiceArea,
        _ServiceTime_serviceTimeCode,
        _ServiceTime_serviceTimeValue,
        ServiceTime,
        _Bandwidth_capacityOfTransmissionValue,
        _Bandwidth_dataExpressionCode,
        Bandwidth,
        _ConnectionCost_maximumCostRequirement,
        _ConnectionCost_maximumCostValue,
        ConnectionCost,
        _ValidTime_validTimeCode,
        _ValidTime_validTimeValue,
        ValidTime,
        _TargetArea_targetAreaCode,
        _TargetArea_targetAreaValue,
        TargetArea,
    ]

class TRANSPORT_ADDRESS_MIB:

    _name_  = 'TRANSPORT-ADDRESS-MIB'
    _oid_   = []
    
    _obj_ = [
        'TransportAddressType',
        'TransportAddress',
        ]
    _type_ = [
        'TransportAddressType',
        'TransportAddress',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TransportAddressType >-----#
    TransportAddressType = OCT_STR(name='TransportAddressType', mode=MODE_TYPE)
    TransportAddressType._const_sz = ASN1Set(rv=[6], rr=[], ev=None, er=[])
    
    #-----< TransportAddress >-----#
    TransportAddress = OCT_STR(name='TransportAddress', mode=MODE_TYPE)
    TransportAddress._const_sz = ASN1Set(rv=[6], rr=[], ev=None, er=[])
    
    _all_ = [
        TransportAddressType,
        TransportAddress,
    ]

class _IMPL_:

    _name_ = '_IMPL_'
    _oid_  = []
    _obj_  = ['REAL', 'EXTERNAL', 'EMBEDDED PDV', 'CHARACTER STRING', 'TYPE-IDENTIFIER', 'ABSTRACT-SYNTAX']
    
    #-----< REAL >-----#
    REAL = SEQ(name='REAL', mode=MODE_TYPE)
    _REAL_mantissa = INT(name='mantissa', mode=MODE_TYPE)
    _REAL_base = INT(name='base', mode=MODE_TYPE)
    _REAL_base._const_val = ASN1Set(rv=[2, 10], rr=[], ev=None, er=[])
    _REAL_exponent = INT(name='exponent', mode=MODE_TYPE)
    REAL._cont = ASN1Dict([
        ('mantissa', _REAL_mantissa),
        ('base', _REAL_base),
        ('exponent', _REAL_exponent),
        ])
    REAL._ext = None
    
    #-----< EXTERNAL >-----#
    EXTERNAL = SEQ(name='EXTERNAL', mode=MODE_TYPE)
    _EXTERNAL_identification = CHOICE(name='identification', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_syntaxes = SEQ(name='syntaxes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EXTERNAL_identification_syntaxes_abstract = OID(name='abstract', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EXTERNAL_identification_syntaxes_transfer = OID(name='transfer', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_syntaxes._cont = ASN1Dict([
        ('abstract', ___EXTERNAL_identification_syntaxes_abstract),
        ('transfer', ___EXTERNAL_identification_syntaxes_transfer),
        ])
    __EXTERNAL_identification_syntaxes._ext = None
    __EXTERNAL_identification_syntax = OID(name='syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_context_negotiation = SEQ(name='context-negotiation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EXTERNAL_identification_context_negotiation_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EXTERNAL_identification_context_negotiation_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_context_negotiation._cont = ASN1Dict([
        ('presentation-context-id', ___EXTERNAL_identification_context_negotiation_presentation_context_id),
        ('transfer-syntax', ___EXTERNAL_identification_context_negotiation_transfer_syntax),
        ])
    __EXTERNAL_identification_context_negotiation._ext = None
    __EXTERNAL_identification_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_fixed = NULL(name='fixed', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    _EXTERNAL_identification._cont = ASN1Dict([
        ('syntaxes', __EXTERNAL_identification_syntaxes),
        ('syntax', __EXTERNAL_identification_syntax),
        ('presentation-context-id', __EXTERNAL_identification_presentation_context_id),
        ('context-negotiation', __EXTERNAL_identification_context_negotiation),
        ('transfer-syntax', __EXTERNAL_identification_transfer_syntax),
        ('fixed', __EXTERNAL_identification_fixed),
        ])
    _EXTERNAL_identification._ext = None
    _EXTERNAL_data_value_descriptor = OBJ_DESC(name='data-value-descriptor', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), opt=True)
    _EXTERNAL_data_value = OCT_STR(name='data-value', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    EXTERNAL._cont = ASN1Dict([
        ('identification', _EXTERNAL_identification),
        ('data-value-descriptor', _EXTERNAL_data_value_descriptor),
        ('data-value', _EXTERNAL_data_value),
        ])
    EXTERNAL._ext = None
    
    #-----< EMBEDDED PDV >-----#
    EMBEDDED_PDV = SEQ(name='EMBEDDED PDV', mode=MODE_TYPE)
    _EMBEDDED_PDV_identification = CHOICE(name='identification', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_syntaxes = SEQ(name='syntaxes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EMBEDDED_PDV_identification_syntaxes_abstract = OID(name='abstract', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EMBEDDED_PDV_identification_syntaxes_transfer = OID(name='transfer', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_syntaxes._cont = ASN1Dict([
        ('abstract', ___EMBEDDED_PDV_identification_syntaxes_abstract),
        ('transfer', ___EMBEDDED_PDV_identification_syntaxes_transfer),
        ])
    __EMBEDDED_PDV_identification_syntaxes._ext = None
    __EMBEDDED_PDV_identification_syntax = OID(name='syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_context_negotiation = SEQ(name='context-negotiation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EMBEDDED_PDV_identification_context_negotiation_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EMBEDDED_PDV_identification_context_negotiation_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_context_negotiation._cont = ASN1Dict([
        ('presentation-context-id', ___EMBEDDED_PDV_identification_context_negotiation_presentation_context_id),
        ('transfer-syntax', ___EMBEDDED_PDV_identification_context_negotiation_transfer_syntax),
        ])
    __EMBEDDED_PDV_identification_context_negotiation._ext = None
    __EMBEDDED_PDV_identification_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_fixed = NULL(name='fixed', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    _EMBEDDED_PDV_identification._cont = ASN1Dict([
        ('syntaxes', __EMBEDDED_PDV_identification_syntaxes),
        ('syntax', __EMBEDDED_PDV_identification_syntax),
        ('presentation-context-id', __EMBEDDED_PDV_identification_presentation_context_id),
        ('context-negotiation', __EMBEDDED_PDV_identification_context_negotiation),
        ('transfer-syntax', __EMBEDDED_PDV_identification_transfer_syntax),
        ('fixed', __EMBEDDED_PDV_identification_fixed),
        ])
    _EMBEDDED_PDV_identification._ext = None
    _EMBEDDED_PDV_data_value_descriptor = OBJ_DESC(name='data-value-descriptor', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), opt=True)
    _EMBEDDED_PDV_data_value = OCT_STR(name='data-value', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    EMBEDDED_PDV._cont = ASN1Dict([
        ('identification', _EMBEDDED_PDV_identification),
        ('data-value-descriptor', _EMBEDDED_PDV_data_value_descriptor),
        ('data-value', _EMBEDDED_PDV_data_value),
        ])
    EMBEDDED_PDV._ext = None
    
    #-----< CHARACTER STRING >-----#
    CHARACTER_STRING = SEQ(name='CHARACTER STRING', mode=MODE_TYPE)
    _CHARACTER_STRING_identification = CHOICE(name='identification', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_syntaxes = SEQ(name='syntaxes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___CHARACTER_STRING_identification_syntaxes_abstract = OID(name='abstract', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___CHARACTER_STRING_identification_syntaxes_transfer = OID(name='transfer', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_syntaxes._cont = ASN1Dict([
        ('abstract', ___CHARACTER_STRING_identification_syntaxes_abstract),
        ('transfer', ___CHARACTER_STRING_identification_syntaxes_transfer),
        ])
    __CHARACTER_STRING_identification_syntaxes._ext = None
    __CHARACTER_STRING_identification_syntax = OID(name='syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_context_negotiation = SEQ(name='context-negotiation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___CHARACTER_STRING_identification_context_negotiation_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___CHARACTER_STRING_identification_context_negotiation_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_context_negotiation._cont = ASN1Dict([
        ('presentation-context-id', ___CHARACTER_STRING_identification_context_negotiation_presentation_context_id),
        ('transfer-syntax', ___CHARACTER_STRING_identification_context_negotiation_transfer_syntax),
        ])
    __CHARACTER_STRING_identification_context_negotiation._ext = None
    __CHARACTER_STRING_identification_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_fixed = NULL(name='fixed', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    _CHARACTER_STRING_identification._cont = ASN1Dict([
        ('syntaxes', __CHARACTER_STRING_identification_syntaxes),
        ('syntax', __CHARACTER_STRING_identification_syntax),
        ('presentation-context-id', __CHARACTER_STRING_identification_presentation_context_id),
        ('context-negotiation', __CHARACTER_STRING_identification_context_negotiation),
        ('transfer-syntax', __CHARACTER_STRING_identification_transfer_syntax),
        ('fixed', __CHARACTER_STRING_identification_fixed),
        ])
    _CHARACTER_STRING_identification._ext = None
    _CHARACTER_STRING_data_value_descriptor = OBJ_DESC(name='data-value-descriptor', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), opt=True)
    _CHARACTER_STRING_string_value = OCT_STR(name='string-value', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    CHARACTER_STRING._cont = ASN1Dict([
        ('identification', _CHARACTER_STRING_identification),
        ('data-value-descriptor', _CHARACTER_STRING_data_value_descriptor),
        ('string-value', _CHARACTER_STRING_string_value),
        ])
    CHARACTER_STRING._ext = None
    
    #-----< TYPE-IDENTIFIER >-----#
    TYPE_IDENTIFIER = CLASS(name='TYPE-IDENTIFIER', mode=MODE_TYPE)
    _TYPE_IDENTIFIER_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    _TYPE_IDENTIFIER_Type = OPEN(name='Type', mode=MODE_TYPE)
    TYPE_IDENTIFIER._cont = ASN1Dict([
        ('id', _TYPE_IDENTIFIER_id),
        ('Type', _TYPE_IDENTIFIER_Type),
        ])
    
    #-----< ABSTRACT-SYNTAX >-----#
    ABSTRACT_SYNTAX = CLASS(name='ABSTRACT-SYNTAX', mode=MODE_TYPE)
    _ABSTRACT_SYNTAX_id = OID(name='id', mode=MODE_VALUE)
    _ABSTRACT_SYNTAX_Type = OPEN(name='Type', mode=MODE_TYPE)
    _ABSTRACT_SYNTAX_property = BIT_STR(name='property', mode=MODE_VALUE, default=(0, 0))
    _ABSTRACT_SYNTAX_property._cont = ASN1Dict([('handles-invalid-encodings', 0)])
    ABSTRACT_SYNTAX._cont = ASN1Dict([
        ('id', _ABSTRACT_SYNTAX_id),
        ('Type', _ABSTRACT_SYNTAX_Type),
        ('property', _ABSTRACT_SYNTAX_property),
        ])
    
    _all_ = [
        _REAL_mantissa,
        _REAL_base,
        _REAL_exponent,
        REAL,
        ___EXTERNAL_identification_syntaxes_abstract,
        ___EXTERNAL_identification_syntaxes_transfer,
        __EXTERNAL_identification_syntaxes,
        __EXTERNAL_identification_syntax,
        __EXTERNAL_identification_presentation_context_id,
        ___EXTERNAL_identification_context_negotiation_presentation_context_id,
        ___EXTERNAL_identification_context_negotiation_transfer_syntax,
        __EXTERNAL_identification_context_negotiation,
        __EXTERNAL_identification_transfer_syntax,
        __EXTERNAL_identification_fixed,
        _EXTERNAL_identification,
        _EXTERNAL_data_value_descriptor,
        _EXTERNAL_data_value,
        EXTERNAL,
        ___EMBEDDED_PDV_identification_syntaxes_abstract,
        ___EMBEDDED_PDV_identification_syntaxes_transfer,
        __EMBEDDED_PDV_identification_syntaxes,
        __EMBEDDED_PDV_identification_syntax,
        __EMBEDDED_PDV_identification_presentation_context_id,
        ___EMBEDDED_PDV_identification_context_negotiation_presentation_context_id,
        ___EMBEDDED_PDV_identification_context_negotiation_transfer_syntax,
        __EMBEDDED_PDV_identification_context_negotiation,
        __EMBEDDED_PDV_identification_transfer_syntax,
        __EMBEDDED_PDV_identification_fixed,
        _EMBEDDED_PDV_identification,
        _EMBEDDED_PDV_data_value_descriptor,
        _EMBEDDED_PDV_data_value,
        EMBEDDED_PDV,
        ___CHARACTER_STRING_identification_syntaxes_abstract,
        ___CHARACTER_STRING_identification_syntaxes_transfer,
        __CHARACTER_STRING_identification_syntaxes,
        __CHARACTER_STRING_identification_syntax,
        __CHARACTER_STRING_identification_presentation_context_id,
        ___CHARACTER_STRING_identification_context_negotiation_presentation_context_id,
        ___CHARACTER_STRING_identification_context_negotiation_transfer_syntax,
        __CHARACTER_STRING_identification_context_negotiation,
        __CHARACTER_STRING_identification_transfer_syntax,
        __CHARACTER_STRING_identification_fixed,
        _CHARACTER_STRING_identification,
        _CHARACTER_STRING_data_value_descriptor,
        _CHARACTER_STRING_string_value,
        CHARACTER_STRING,
        _TYPE_IDENTIFIER_id,
        _TYPE_IDENTIFIER_Type,
        TYPE_IDENTIFIER,
        _ABSTRACT_SYNTAX_id,
        _ABSTRACT_SYNTAX_Type,
        _ABSTRACT_SYNTAX_property,
        ABSTRACT_SYNTAX,
    ]

init_modules(CALMfntp, CALMfsap, CALMiitsscu, CALMipv6, CALMlegacySupport, CALMllsap, CALMmanagement, CALMmsap, CAM_PDU_Descriptions, CITSapplMgmtApplReg, CITSapplMgmtComm, CITSapplMgmtIDs, CITSapplReq, DENM_PDU_Descriptions, DSRCData, SPATEM_PDU_Descriptions, MAPEM_PDU_Descriptions, IVIM_PDU_Descriptions, SREM_PDU_Descriptions, SSEM_PDU_Descriptions, EVCSN_PDU_Descriptions, EV_RechargingSpotReservation_PDU_Descriptions, AVIAEINumberingAndDataStructures, EfcDsrcApplication, EfcDsrcGeneric, AddGrpC, REGION, DSRC, IVI, ElectronicRegistrationIdentificationVehicleDataModule, ITS_Container, ProtocolManagementInformation, TRANSPORT_ADDRESS_MIB, _IMPL_)
