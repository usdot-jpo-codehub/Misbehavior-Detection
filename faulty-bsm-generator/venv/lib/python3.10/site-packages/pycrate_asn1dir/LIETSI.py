# -*- coding: UTF-8 -*-
# Code automatically generated by pycrate_asn1c

from pycrate_asn1rt.utils            import *
from pycrate_asn1rt.err              import *
from pycrate_asn1rt.glob             import make_GLOBAL, GLOBAL
from pycrate_asn1rt.dictobj          import ASN1Dict
from pycrate_asn1rt.refobj           import *
from pycrate_asn1rt.setobj           import *
from pycrate_asn1rt.asnobj_basic     import *
from pycrate_asn1rt.asnobj_str       import *
from pycrate_asn1rt.asnobj_construct import *
from pycrate_asn1rt.asnobj_class     import *
from pycrate_asn1rt.asnobj_ext       import *
from pycrate_asn1rt.init             import init_modules

class EN301040:

    _name_  = 'EN301040'
    _oid_   = [0, 4, 0, 1040, 0]
    
    _obj_ = [
        'LIACTIVATEreq',
        'LIACTIVATEconf',
        'LIMODIFYreq',
        'LIMODIFYconf',
        'LISTATUSind',
        'TARGETACTIVITYMONITORind',
        'TARGETCOMMSMONITORind',
        'TTRAFFICind',
        'CTTRAFFICind',
        'ActivityClassType',
        'ActivityType',
        'AddressType',
        'TETRAAddressType',
        'CellIdType',
        'LocationAreaType',
        'LocationType',
        'MCCType',
        'MNCType',
        'SSIType',
        'CircuitIdType',
        'SSType',
        'StatusType',
        'TETRACGIType',
        'TLIIdType',
        'TSIType',
        'TEIType',
        ]
    _type_ = [
        'LIACTIVATEreq',
        'LIACTIVATEconf',
        'LIMODIFYreq',
        'LIMODIFYconf',
        'LISTATUSind',
        'TARGETACTIVITYMONITORind',
        'TARGETCOMMSMONITORind',
        'TTRAFFICind',
        'CTTRAFFICind',
        'ActivityClassType',
        'ActivityType',
        'AddressType',
        'TETRAAddressType',
        'CellIdType',
        'LocationAreaType',
        'LocationType',
        'MCCType',
        'MNCType',
        'SSIType',
        'CircuitIdType',
        'SSType',
        'StatusType',
        'TETRACGIType',
        'TLIIdType',
        'TSIType',
        'TEIType',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< LIACTIVATEreq >-----#
    LIACTIVATEreq = SEQ(name='LIACTIVATEreq', mode=MODE_TYPE)
    _LIACTIVATEreq_timeStamp = TIME_UTC(name='timeStamp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LIACTIVATEreq_invokeId = INT(name='invokeId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LIACTIVATEreq_targetAddress = SEQ(name='targetAddress', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'AddressType')))
    _LIACTIVATEreq_expiryDateTime = TIME_UTC(name='expiryDateTime', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LIACTIVATEreq_targetname = STR_VIS(name='targetname', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _LIACTIVATEreq_additionaltargetdata = STR_VIS(name='additionaltargetdata', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _LIACTIVATEreq_monitorServiceList = SEQ_OF(name='monitorServiceList', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __LIACTIVATEreq_monitorServiceList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EN301040', 'ActivityType')))
    _LIACTIVATEreq_monitorServiceList._cont = __LIACTIVATEreq_monitorServiceList__item_
    LIACTIVATEreq._cont = ASN1Dict([
        ('timeStamp', _LIACTIVATEreq_timeStamp),
        ('invokeId', _LIACTIVATEreq_invokeId),
        ('targetAddress', _LIACTIVATEreq_targetAddress),
        ('expiryDateTime', _LIACTIVATEreq_expiryDateTime),
        ('targetname', _LIACTIVATEreq_targetname),
        ('additionaltargetdata', _LIACTIVATEreq_additionaltargetdata),
        ('monitorServiceList', _LIACTIVATEreq_monitorServiceList),
        ])
    LIACTIVATEreq._ext = None
    
    #-----< LIACTIVATEconf >-----#
    LIACTIVATEconf = SEQ(name='LIACTIVATEconf', mode=MODE_TYPE)
    _LIACTIVATEconf_timeStamp = TIME_UTC(name='timeStamp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LIACTIVATEconf_invokeId = INT(name='invokeId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LIACTIVATEconf_result = BOOL(name='result', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LIACTIVATEconf_tLIInstanceid = BIT_STR(name='tLIInstanceid', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'TLIIdType')), opt=True)
    LIACTIVATEconf._cont = ASN1Dict([
        ('timeStamp', _LIACTIVATEconf_timeStamp),
        ('invokeId', _LIACTIVATEconf_invokeId),
        ('result', _LIACTIVATEconf_result),
        ('tLIInstanceid', _LIACTIVATEconf_tLIInstanceid),
        ])
    LIACTIVATEconf._ext = None
    
    #-----< LIMODIFYreq >-----#
    LIMODIFYreq = SEQ(name='LIMODIFYreq', mode=MODE_TYPE)
    _LIMODIFYreq_tLIInstanceid = BIT_STR(name='tLIInstanceid', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'TLIIdType')))
    _LIMODIFYreq_timestamp = TIME_UTC(name='timestamp', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LIMODIFYreq_modificationNumber = INT(name='modificationNumber', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LIMODIFYreq_modificationType = CHOICE(name='modificationType', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __LIMODIFYreq_modificationType_halt = BOOL(name='halt', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __LIMODIFYreq_modificationType_reset = BOOL(name='reset', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __LIMODIFYreq_modificationType_expiryDateTime = TIME_UTC(name='expiryDateTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __LIMODIFYreq_modificationType_targetname = STR_VIS(name='targetname', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __LIMODIFYreq_modificationType_additionaltargetdata = STR_VIS(name='additionaltargetdata', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __LIMODIFYreq_modificationType_monitorServiceList = SEQ_OF(name='monitorServiceList', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___LIMODIFYreq_modificationType_monitorServiceList__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EN301040', 'ActivityType')))
    __LIMODIFYreq_modificationType_monitorServiceList._cont = ___LIMODIFYreq_modificationType_monitorServiceList__item_
    _LIMODIFYreq_modificationType._cont = ASN1Dict([
        ('halt', __LIMODIFYreq_modificationType_halt),
        ('reset', __LIMODIFYreq_modificationType_reset),
        ('expiryDateTime', __LIMODIFYreq_modificationType_expiryDateTime),
        ('targetname', __LIMODIFYreq_modificationType_targetname),
        ('additionaltargetdata', __LIMODIFYreq_modificationType_additionaltargetdata),
        ('monitorServiceList', __LIMODIFYreq_modificationType_monitorServiceList),
        ])
    _LIMODIFYreq_modificationType._ext = None
    LIMODIFYreq._cont = ASN1Dict([
        ('tLIInstanceid', _LIMODIFYreq_tLIInstanceid),
        ('timestamp', _LIMODIFYreq_timestamp),
        ('modificationNumber', _LIMODIFYreq_modificationNumber),
        ('modificationType', _LIMODIFYreq_modificationType),
        ])
    LIMODIFYreq._ext = None
    
    #-----< LIMODIFYconf >-----#
    LIMODIFYconf = SEQ(name='LIMODIFYconf', mode=MODE_TYPE)
    _LIMODIFYconf_tLIInstanceid = BIT_STR(name='tLIInstanceid', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'TLIIdType')))
    _LIMODIFYconf_timestamp = TIME_UTC(name='timestamp', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LIMODIFYconf_modificationNumber = INT(name='modificationNumber', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LIMODIFYconf_result = BOOL(name='result', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    LIMODIFYconf._cont = ASN1Dict([
        ('tLIInstanceid', _LIMODIFYconf_tLIInstanceid),
        ('timestamp', _LIMODIFYconf_timestamp),
        ('modificationNumber', _LIMODIFYconf_modificationNumber),
        ('result', _LIMODIFYconf_result),
        ])
    LIMODIFYconf._ext = None
    
    #-----< LISTATUSind >-----#
    LISTATUSind = SEQ(name='LISTATUSind', mode=MODE_TYPE)
    _LISTATUSind_tLIInstanceid = BIT_STR(name='tLIInstanceid', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'TLIIdType')))
    _LISTATUSind_timestamp = TIME_UTC(name='timestamp', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LISTATUSind_tETRASysStatus = ENUM(name='tETRASysStatus', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'StatusType')))
    LISTATUSind._cont = ASN1Dict([
        ('tLIInstanceid', _LISTATUSind_tLIInstanceid),
        ('timestamp', _LISTATUSind_timestamp),
        ('tETRASysStatus', _LISTATUSind_tETRASysStatus),
        ])
    LISTATUSind._ext = None
    
    #-----< TARGETACTIVITYMONITORind >-----#
    TARGETACTIVITYMONITORind = SEQ(name='TARGETACTIVITYMONITORind', mode=MODE_TYPE)
    _TARGETACTIVITYMONITORind_tLIInstanceid = BIT_STR(name='tLIInstanceid', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'TLIIdType')))
    _TARGETACTIVITYMONITORind_timestamp = TIME_UTC(name='timestamp', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TARGETACTIVITYMONITORind_targetLocation = CHOICE(name='targetLocation', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('EN301040', 'LocationType')))
    _TARGETACTIVITYMONITORind_targetAction = SEQ(name='targetAction', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'ActivityType')))
    _TARGETACTIVITYMONITORind_supplementaryTargetaddress = SEQ(name='supplementaryTargetaddress', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'AddressType')), opt=True)
    _TARGETACTIVITYMONITORind_cotargetaddress = SEQ_OF(name='cotargetaddress', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __TARGETACTIVITYMONITORind_cotargetaddress__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EN301040', 'AddressType')))
    _TARGETACTIVITYMONITORind_cotargetaddress._cont = __TARGETACTIVITYMONITORind_cotargetaddress__item_
    _TARGETACTIVITYMONITORind_cotargetlocation = SEQ_OF(name='cotargetlocation', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __TARGETACTIVITYMONITORind_cotargetlocation__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EN301040', 'LocationType')))
    _TARGETACTIVITYMONITORind_cotargetlocation._cont = __TARGETACTIVITYMONITORind_cotargetlocation__item_
    TARGETACTIVITYMONITORind._cont = ASN1Dict([
        ('tLIInstanceid', _TARGETACTIVITYMONITORind_tLIInstanceid),
        ('timestamp', _TARGETACTIVITYMONITORind_timestamp),
        ('targetLocation', _TARGETACTIVITYMONITORind_targetLocation),
        ('targetAction', _TARGETACTIVITYMONITORind_targetAction),
        ('supplementaryTargetaddress', _TARGETACTIVITYMONITORind_supplementaryTargetaddress),
        ('cotargetaddress', _TARGETACTIVITYMONITORind_cotargetaddress),
        ('cotargetlocation', _TARGETACTIVITYMONITORind_cotargetlocation),
        ])
    TARGETACTIVITYMONITORind._ext = None
    
    #-----< TARGETCOMMSMONITORind >-----#
    TARGETCOMMSMONITORind = SEQ(name='TARGETCOMMSMONITORind', mode=MODE_TYPE)
    _TARGETCOMMSMONITORind_tLIInstanceid = BIT_STR(name='tLIInstanceid', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'TLIIdType')))
    _TARGETCOMMSMONITORind_timestamp = TIME_UTC(name='timestamp', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TARGETCOMMSMONITORind_targetlocation = CHOICE(name='targetlocation', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('EN301040', 'LocationType')))
    _TARGETCOMMSMONITORind_supplementaryTargetaddress = SEQ(name='supplementaryTargetaddress', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'AddressType')), opt=True)
    _TARGETCOMMSMONITORind_targetcommsid = STR_NUM(name='targetcommsid', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'CircuitIdType')))
    _TARGETCOMMSMONITORind_cotargetaddress = SEQ_OF(name='cotargetaddress', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __TARGETCOMMSMONITORind_cotargetaddress__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EN301040', 'AddressType')))
    _TARGETCOMMSMONITORind_cotargetaddress._cont = __TARGETCOMMSMONITORind_cotargetaddress__item_
    _TARGETCOMMSMONITORind_cotargetcommsid = SEQ_OF(name='cotargetcommsid', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __TARGETCOMMSMONITORind_cotargetcommsid__item_ = STR_NUM(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EN301040', 'CircuitIdType')))
    _TARGETCOMMSMONITORind_cotargetcommsid._cont = __TARGETCOMMSMONITORind_cotargetcommsid__item_
    TARGETCOMMSMONITORind._cont = ASN1Dict([
        ('tLIInstanceid', _TARGETCOMMSMONITORind_tLIInstanceid),
        ('timestamp', _TARGETCOMMSMONITORind_timestamp),
        ('targetlocation', _TARGETCOMMSMONITORind_targetlocation),
        ('supplementaryTargetaddress', _TARGETCOMMSMONITORind_supplementaryTargetaddress),
        ('targetcommsid', _TARGETCOMMSMONITORind_targetcommsid),
        ('cotargetaddress', _TARGETCOMMSMONITORind_cotargetaddress),
        ('cotargetcommsid', _TARGETCOMMSMONITORind_cotargetcommsid),
        ])
    TARGETCOMMSMONITORind._ext = None
    
    #-----< TTRAFFICind >-----#
    TTRAFFICind = SEQ(name='TTRAFFICind', mode=MODE_TYPE)
    _TTRAFFICind_tLIInstanceid = BIT_STR(name='tLIInstanceid', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'TLIIdType')))
    _TTRAFFICind_trafficPacket = BIT_STR(name='trafficPacket', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    TTRAFFICind._cont = ASN1Dict([
        ('tLIInstanceid', _TTRAFFICind_tLIInstanceid),
        ('trafficPacket', _TTRAFFICind_trafficPacket),
        ])
    TTRAFFICind._ext = None
    
    #-----< CTTRAFFICind >-----#
    CTTRAFFICind = SEQ(name='CTTRAFFICind', mode=MODE_TYPE)
    _CTTRAFFICind_tLIInstanceid = BIT_STR(name='tLIInstanceid', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'TLIIdType')))
    _CTTRAFFICind_trafficPacket = BIT_STR(name='trafficPacket', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    CTTRAFFICind._cont = ASN1Dict([
        ('tLIInstanceid', _CTTRAFFICind_tLIInstanceid),
        ('trafficPacket', _CTTRAFFICind_trafficPacket),
        ])
    CTTRAFFICind._ext = None
    
    #-----< ActivityClassType >-----#
    ActivityClassType = ENUM(name='ActivityClassType', mode=MODE_TYPE)
    ActivityClassType._cont = ASN1Dict([('allServices', 0), ('tETRASpeech', 1), ('singleSlotData24', 2), ('singleSlotData48', 3), ('singleSlotData72', 4), ('multiSlotData224', 5), ('multiSlotData248', 6), ('multiSlotData272', 7), ('multiSlotData324', 8), ('multiSlotData348', 9), ('multiSlotData372', 10), ('multiSlotData424', 11), ('multiSlotData448', 12), ('multiSlotData472', 13), ('sDSType1', 14), ('sDSType2', 15), ('sDSType3', 16), ('sDSType4', 17), ('status', 18), ('sDSACKType1', 19), ('sDSACKType2', 20), ('sDSACKType3', 21), ('sDSACKType4', 22), ('statusack', 23), ('sDSAcknowledgementsuccess', 24), ('sDSAcknowledgementfail', 25), ('sCLNSPacketData', 26), ('cONSPacketData', 27), ('internetProtocol', 28), ('swMIauthenticationsuccess', 29), ('swMIauthenticationfail', 30), ('iTSIauthenticationsuccess', 31), ('iTSIauthenticationfail', 32), ('oTARSCKsuccess', 33), ('oTARSCKfail', 34), ('oTARGCKsuccess', 35), ('oTARGCKfail', 36), ('oTARCCKsuccess', 37), ('oTARCCKfail', 38), ('tARGETSUSCRIPTIONDISABLEDT', 39), ('tARGETEQUIPMENTDISABLEDT', 40), ('tARGETSUSCRIPTIONDISABLEDP', 41), ('tARGETEQUIPEMENTDISABLEDP', 42), ('tARGETSUBSCRIPTIONENABLED', 43), ('tARGETEQUIPMENTENABLED', 44), ('sessionregistration', 45), ('sessionderegistration', 46), ('mIGRATION', 47), ('rOAMING', 48), ('supplementaryService', 49)])
    ActivityClassType._ext = None
    
    #-----< ActivityType >-----#
    ActivityType = SEQ(name='ActivityType', mode=MODE_TYPE)
    _ActivityType_cctivity = ENUM(name='cctivity', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'ActivityClassType')))
    _ActivityType_callRelation = ENUM(name='callRelation', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ActivityType_callRelation._cont = ASN1Dict([('begin', 0), ('end', 1), ('continue', 2), ('report', 3)])
    _ActivityType_callRelation._ext = None
    _ActivityType_direction = ENUM(name='direction', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ActivityType_direction._cont = ASN1Dict([('toTarget', 0), ('fromTarget', 1)])
    _ActivityType_direction._ext = None
    _ActivityType_scope = ENUM(name='scope', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ActivityType_scope._cont = ASN1Dict([('point2Point', 0), ('point2MultiPoint', 1), ('broadcast', 2)])
    _ActivityType_scope._ext = None
    _ActivityType_cPlaneData = BIT_STR(name='cPlaneData', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ActivityType_sStype = ENUM(name='sStype', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'SSType')), opt=True)
    ActivityType._cont = ASN1Dict([
        ('cctivity', _ActivityType_cctivity),
        ('callRelation', _ActivityType_callRelation),
        ('direction', _ActivityType_direction),
        ('scope', _ActivityType_scope),
        ('cPlaneData', _ActivityType_cPlaneData),
        ('sStype', _ActivityType_sStype),
        ])
    ActivityType._ext = None
    
    #-----< AddressType >-----#
    AddressType = SEQ(name='AddressType', mode=MODE_TYPE)
    _AddressType_tSI = SEQ(name='tSI', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'TSIType')))
    _AddressType_supplementaryAddress = SEQ_OF(name='supplementaryAddress', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __AddressType_supplementaryAddress__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('EN301040', 'TETRAAddressType')))
    _AddressType_supplementaryAddress._cont = __AddressType_supplementaryAddress__item_
    AddressType._cont = ASN1Dict([
        ('tSI', _AddressType_tSI),
        ('supplementaryAddress', _AddressType_supplementaryAddress),
        ])
    AddressType._ext = None
    
    #-----< TETRAAddressType >-----#
    TETRAAddressType = CHOICE(name='TETRAAddressType', mode=MODE_TYPE)
    _TETRAAddressType_tETRAaddress = SEQ(name='tETRAaddress', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'TSIType')))
    _TETRAAddressType_pISNaddress = STR_NUM(name='pISNaddress', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TETRAAddressType_pISNaddress._const_sz = ASN1Set(rv=[20], rr=[], ev=None, er=[])
    _TETRAAddressType_iP4address = BIT_STR(name='iP4address', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TETRAAddressType_iP4address._const_sz = ASN1Set(rv=[32], rr=[], ev=None, er=[])
    _TETRAAddressType_iP6address = BIT_STR(name='iP6address', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TETRAAddressType_iP6address._const_sz = ASN1Set(rv=[128], rr=[], ev=None, er=[])
    _TETRAAddressType_e164address = STR_NUM(name='e164address', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TETRAAddressType_e164address._const_sz = ASN1Set(rv=[20], rr=[], ev=None, er=[])
    _TETRAAddressType_tEI = BIT_STR(name='tEI', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'TEIType')))
    TETRAAddressType._cont = ASN1Dict([
        ('tETRAaddress', _TETRAAddressType_tETRAaddress),
        ('pISNaddress', _TETRAAddressType_pISNaddress),
        ('iP4address', _TETRAAddressType_iP4address),
        ('iP6address', _TETRAAddressType_iP6address),
        ('e164address', _TETRAAddressType_e164address),
        ('tEI', _TETRAAddressType_tEI),
        ])
    TETRAAddressType._ext = None
    
    #-----< CellIdType >-----#
    CellIdType = BIT_STR(name='CellIdType', mode=MODE_TYPE)
    CellIdType._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    #-----< LocationAreaType >-----#
    LocationAreaType = BIT_STR(name='LocationAreaType', mode=MODE_TYPE)
    LocationAreaType._const_sz = ASN1Set(rv=[14], rr=[], ev=None, er=[])
    
    #-----< LocationType >-----#
    LocationType = CHOICE(name='LocationType', mode=MODE_TYPE)
    _LocationType_mSLoc = SEQ(name='mSLoc', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'TETRACGIType')))
    _LocationType_lSLoc = CHOICE(name='lSLoc', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('EN301040', 'TETRAAddressType')))
    LocationType._cont = ASN1Dict([
        ('mSLoc', _LocationType_mSLoc),
        ('lSLoc', _LocationType_lSLoc),
        ])
    LocationType._ext = None
    
    #-----< MCCType >-----#
    MCCType = BIT_STR(name='MCCType', mode=MODE_TYPE)
    MCCType._const_sz = ASN1Set(rv=[10], rr=[], ev=None, er=[])
    
    #-----< MNCType >-----#
    MNCType = BIT_STR(name='MNCType', mode=MODE_TYPE)
    MNCType._const_sz = ASN1Set(rv=[14], rr=[], ev=None, er=[])
    
    #-----< SSIType >-----#
    SSIType = BIT_STR(name='SSIType', mode=MODE_TYPE)
    SSIType._const_sz = ASN1Set(rv=[24], rr=[], ev=None, er=[])
    
    #-----< CircuitIdType >-----#
    CircuitIdType = STR_NUM(name='CircuitIdType', mode=MODE_TYPE)
    CircuitIdType._const_sz = ASN1Set(rv=[20], rr=[], ev=None, er=[])
    
    #-----< SSType >-----#
    SSType = ENUM(name='SSType', mode=MODE_TYPE)
    SSType._cont = ASN1Dict([('ambienceListening', 0), ('adviceofCharge', 1), ('accessPriority', 2), ('areaSelection', 3), ('barringofIncomingCalls', 4), ('barringofOutgoingCalls', 5), ('callAuthorizedbyDispatcher', 6), ('callCompletiontoBusySubscriber', 7), ('callCompletiononNoReply', 8), ('callForwardingonBusy', 9), ('callForwardingonNoReply', 10), ('callForwardingonNotReachable', 11), ('callForwardingUnconditional', 12), ('callingLineIdentificationPresentation', 13), ('callingConnectedLineIdentificationRestriction', 14), ('connectedLineIdentificationPresentation', 15), ('callReport', 16), ('callRetention', 17), ('callWaiting', 18), ('dynamicGroupNumberAssignment', 19), ('discreetListening', 20), ('callHold', 21), ('includeCall', 22), ('lateEntry', 23), ('listSearchCall', 24), ('priorityCall', 25), ('preemptivePriorityCall', 26), ('shortNumberAddressing', 27), ('transferofControl', 28), ('talkingPartyIdentification', 29)])
    SSType._ext = None
    
    #-----< StatusType >-----#
    StatusType = ENUM(name='StatusType', mode=MODE_TYPE)
    StatusType._cont = ASN1Dict([('networkFullyAvailable', 0), ('networkErrorsAffectingIntercept', 1), ('reconfigurationInProgress', 2), ('sessionExpired', 3), ('gatewayServicesUnavailable', 4)])
    StatusType._ext = None
    
    #-----< TETRACGIType >-----#
    TETRACGIType = SEQ(name='TETRACGIType', mode=MODE_TYPE)
    _TETRACGIType_mcc = BIT_STR(name='mcc', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'MCCType')))
    _TETRACGIType_mnc = BIT_STR(name='mnc', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'MNCType')))
    _TETRACGIType_lai = BIT_STR(name='lai', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'LocationAreaType')))
    _TETRACGIType_cI = BIT_STR(name='cI', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'CellIdType')), opt=True)
    TETRACGIType._cont = ASN1Dict([
        ('mcc', _TETRACGIType_mcc),
        ('mnc', _TETRACGIType_mnc),
        ('lai', _TETRACGIType_lai),
        ('cI', _TETRACGIType_cI),
        ])
    TETRACGIType._ext = None
    
    #-----< TLIIdType >-----#
    TLIIdType = BIT_STR(name='TLIIdType', mode=MODE_TYPE)
    TLIIdType._const_sz = ASN1Set(rv=[16], rr=[], ev=None, er=[])
    
    #-----< TSIType >-----#
    TSIType = SEQ(name='TSIType', mode=MODE_TYPE)
    _TSIType_mcc = BIT_STR(name='mcc', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'MCCType')))
    _TSIType_mnc = BIT_STR(name='mnc', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'MNCType')))
    _TSIType_ssi = BIT_STR(name='ssi', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'SSIType')))
    TSIType._cont = ASN1Dict([
        ('mcc', _TSIType_mcc),
        ('mnc', _TSIType_mnc),
        ('ssi', _TSIType_ssi),
        ])
    TSIType._ext = None
    
    #-----< TEIType >-----#
    TEIType = BIT_STR(name='TEIType', mode=MODE_TYPE)
    TEIType._const_sz = ASN1Set(rv=[60], rr=[], ev=None, er=[])
    
    _all_ = [
        _LIACTIVATEreq_timeStamp,
        _LIACTIVATEreq_invokeId,
        _LIACTIVATEreq_targetAddress,
        _LIACTIVATEreq_expiryDateTime,
        _LIACTIVATEreq_targetname,
        _LIACTIVATEreq_additionaltargetdata,
        __LIACTIVATEreq_monitorServiceList__item_,
        _LIACTIVATEreq_monitorServiceList,
        LIACTIVATEreq,
        _LIACTIVATEconf_timeStamp,
        _LIACTIVATEconf_invokeId,
        _LIACTIVATEconf_result,
        _LIACTIVATEconf_tLIInstanceid,
        LIACTIVATEconf,
        _LIMODIFYreq_tLIInstanceid,
        _LIMODIFYreq_timestamp,
        _LIMODIFYreq_modificationNumber,
        __LIMODIFYreq_modificationType_halt,
        __LIMODIFYreq_modificationType_reset,
        __LIMODIFYreq_modificationType_expiryDateTime,
        __LIMODIFYreq_modificationType_targetname,
        __LIMODIFYreq_modificationType_additionaltargetdata,
        ___LIMODIFYreq_modificationType_monitorServiceList__item_,
        __LIMODIFYreq_modificationType_monitorServiceList,
        _LIMODIFYreq_modificationType,
        LIMODIFYreq,
        _LIMODIFYconf_tLIInstanceid,
        _LIMODIFYconf_timestamp,
        _LIMODIFYconf_modificationNumber,
        _LIMODIFYconf_result,
        LIMODIFYconf,
        _LISTATUSind_tLIInstanceid,
        _LISTATUSind_timestamp,
        _LISTATUSind_tETRASysStatus,
        LISTATUSind,
        _TARGETACTIVITYMONITORind_tLIInstanceid,
        _TARGETACTIVITYMONITORind_timestamp,
        _TARGETACTIVITYMONITORind_targetLocation,
        _TARGETACTIVITYMONITORind_targetAction,
        _TARGETACTIVITYMONITORind_supplementaryTargetaddress,
        __TARGETACTIVITYMONITORind_cotargetaddress__item_,
        _TARGETACTIVITYMONITORind_cotargetaddress,
        __TARGETACTIVITYMONITORind_cotargetlocation__item_,
        _TARGETACTIVITYMONITORind_cotargetlocation,
        TARGETACTIVITYMONITORind,
        _TARGETCOMMSMONITORind_tLIInstanceid,
        _TARGETCOMMSMONITORind_timestamp,
        _TARGETCOMMSMONITORind_targetlocation,
        _TARGETCOMMSMONITORind_supplementaryTargetaddress,
        _TARGETCOMMSMONITORind_targetcommsid,
        __TARGETCOMMSMONITORind_cotargetaddress__item_,
        _TARGETCOMMSMONITORind_cotargetaddress,
        __TARGETCOMMSMONITORind_cotargetcommsid__item_,
        _TARGETCOMMSMONITORind_cotargetcommsid,
        TARGETCOMMSMONITORind,
        _TTRAFFICind_tLIInstanceid,
        _TTRAFFICind_trafficPacket,
        TTRAFFICind,
        _CTTRAFFICind_tLIInstanceid,
        _CTTRAFFICind_trafficPacket,
        CTTRAFFICind,
        ActivityClassType,
        _ActivityType_cctivity,
        _ActivityType_callRelation,
        _ActivityType_direction,
        _ActivityType_scope,
        _ActivityType_cPlaneData,
        _ActivityType_sStype,
        ActivityType,
        _AddressType_tSI,
        __AddressType_supplementaryAddress__item_,
        _AddressType_supplementaryAddress,
        AddressType,
        _TETRAAddressType_tETRAaddress,
        _TETRAAddressType_pISNaddress,
        _TETRAAddressType_iP4address,
        _TETRAAddressType_iP6address,
        _TETRAAddressType_e164address,
        _TETRAAddressType_tEI,
        TETRAAddressType,
        CellIdType,
        LocationAreaType,
        _LocationType_mSLoc,
        _LocationType_lSLoc,
        LocationType,
        MCCType,
        MNCType,
        SSIType,
        CircuitIdType,
        SSType,
        StatusType,
        _TETRACGIType_mcc,
        _TETRACGIType_mnc,
        _TETRACGIType_lai,
        _TETRACGIType_cI,
        TETRACGIType,
        TLIIdType,
        _TSIType_mcc,
        _TSIType_mnc,
        _TSIType_ssi,
        TSIType,
        TEIType,
    ]

class Gprs_HI3_PS:

    _name_  = 'Gprs-HI3-PS'
    _oid_   = [0, 4, 0, 2, 2, 2, 3, 3]
    
    _obj_ = [
        'lawfulInterceptDomainId',
        'hi3GPRSLIId',
        'hi3GPRSLIIdOperationId',
        'ETSI-CC-PDU',
        ]
    _type_ = [
        'ETSI-CC-PDU',
        ]
    _set_ = [
        ]
    _val_ = [
        'lawfulInterceptDomainId',
        'hi3GPRSLIId',
        'hi3GPRSLIIdOperationId',
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< lawfulInterceptDomainId >-----#
    lawfulInterceptDomainId = OID(name='lawfulInterceptDomainId', mode=MODE_VALUE)
    lawfulInterceptDomainId._val = (0, 4, 0, 2, 2)
    
    #-----< hi3GPRSLIId >-----#
    hi3GPRSLIId = OID(name='hi3GPRSLIId', mode=MODE_VALUE)
    hi3GPRSLIId._val = (0, 4, 0, 2, 2, 2, 3)
    
    #-----< hi3GPRSLIIdOperationId >-----#
    hi3GPRSLIIdOperationId = OID(name='hi3GPRSLIIdOperationId', mode=MODE_VALUE)
    hi3GPRSLIIdOperationId._val = (0, 4, 0, 2, 2, 2, 3, 3)
    
    #-----< ETSI-CC-PDU >-----#
    ETSI_CC_PDU = SEQ(name='ETSI-CC-PDU', mode=MODE_TYPE)
    _ETSI_CC_PDU_domainID = OID(name='domainID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ETSI_CC_PDU_domainID._const_val = ASN1Set(rv=[(0, 4, 0, 2, 2, 2, 3, 3)], rr=[], ev=None, er=[])
    _ETSI_CC_PDU_eTSI_CC_PDU = SEQ(name='eTSI-CC-PDU', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Umts-HI3-PS', 'CC-PDU')))
    ETSI_CC_PDU._cont = ASN1Dict([
        ('domainID', _ETSI_CC_PDU_domainID),
        ('eTSI-CC-PDU', _ETSI_CC_PDU_eTSI_CC_PDU),
        ])
    ETSI_CC_PDU._ext = []
    
    _all_ = [
        lawfulInterceptDomainId,
        hi3GPRSLIId,
        hi3GPRSLIIdOperationId,
        _ETSI_CC_PDU_domainID,
        _ETSI_CC_PDU_eTSI_CC_PDU,
        ETSI_CC_PDU,
    ]

class HI1NotificationOperations:

    _name_  = 'HI1NotificationOperations'
    _oid_   = [0, 4, 0, 2, 2, 0, 1, 7]
    
    _obj_ = [
        'lawfulInterceptDomainId',
        'hi1NotificationOperationsId',
        'hi1OperationId',
        'sending-of-HI1-Notification',
        'other-failure-causes',
        'missing-parameter',
        'unknown-parameter',
        'erroneous-parameter',
        'ErrorHI1Notifications',
        'HI1-Operation',
        'Notification',
        'Alarm-Indicator',
        'National-HI1-ASN1parameters',
        ]
    _type_ = [
        'HI1-Operation',
        'Notification',
        'Alarm-Indicator',
        'National-HI1-ASN1parameters',
        ]
    _set_ = [
        'ErrorHI1Notifications',
        ]
    _val_ = [
        'lawfulInterceptDomainId',
        'hi1NotificationOperationsId',
        'hi1OperationId',
        'sending-of-HI1-Notification',
        'other-failure-causes',
        'missing-parameter',
        'unknown-parameter',
        'erroneous-parameter',
        ]
    _class_ = [
        'sending-of-HI1-Notification',
        'other-failure-causes',
        'missing-parameter',
        'unknown-parameter',
        'erroneous-parameter',
        'ErrorHI1Notifications',
        ]
    _param_ = [
        ]
    
    #-----< lawfulInterceptDomainId >-----#
    lawfulInterceptDomainId = OID(name='lawfulInterceptDomainId', mode=MODE_VALUE)
    lawfulInterceptDomainId._val = (0, 4, 0, 2, 2)
    
    #-----< hi1NotificationOperationsId >-----#
    hi1NotificationOperationsId = OID(name='hi1NotificationOperationsId', mode=MODE_VALUE)
    hi1NotificationOperationsId._val = (0, 4, 0, 2, 2, 0, 1)
    
    #-----< hi1OperationId >-----#
    hi1OperationId = OID(name='hi1OperationId', mode=MODE_VALUE)
    hi1OperationId._val = (0, 4, 0, 2, 2, 0, 1, 6)
    
    #-----< sending-of-HI1-Notification >-----#
    sending_of_HI1_Notification = CLASS(name='sending-of-HI1-Notification', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')))
    _sending_of_HI1_Notification_val_ArgumentType = CHOICE(name='ArgumentType', mode=MODE_TYPE, typeref=ASN1RefType(('HI1NotificationOperations', 'HI1-Operation')))
    sending_of_HI1_Notification._val = dict([('ArgumentType', _sending_of_HI1_Notification_val_ArgumentType), ('Errors', ASN1Set(rv=[dict([('errorCode', ('local', 0))]), dict([('errorCode', ('local', 1))]), dict([('errorCode', ('local', 2))]), dict([('errorCode', ('local', 3))])], rr=[], ev=None, er=[])), ('operationCode', ('global', (0, 4, 0, 2, 2, 0, 1, 1)))])
    
    #-----< other-failure-causes >-----#
    other_failure_causes = CLASS(name='other-failure-causes', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    other_failure_causes._val = dict([('errorCode', ('local', 0))])
    
    #-----< missing-parameter >-----#
    missing_parameter = CLASS(name='missing-parameter', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    missing_parameter._val = dict([('errorCode', ('local', 1))])
    
    #-----< unknown-parameter >-----#
    unknown_parameter = CLASS(name='unknown-parameter', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    unknown_parameter._val = dict([('errorCode', ('local', 2))])
    
    #-----< erroneous-parameter >-----#
    erroneous_parameter = CLASS(name='erroneous-parameter', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    erroneous_parameter._val = dict([('errorCode', ('local', 3))])
    
    #-----< ErrorHI1Notifications >-----#
    ErrorHI1Notifications = CLASS(name='ErrorHI1Notifications', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    ErrorHI1Notifications._val = ASN1Set(rv=[dict([('errorCode', ('local', 0))]), dict([('errorCode', ('local', 1))]), dict([('errorCode', ('local', 2))]), dict([('errorCode', ('local', 3))])], rr=[], ev=None, er=[])
    
    #-----< HI1-Operation >-----#
    HI1_Operation = CHOICE(name='HI1-Operation', mode=MODE_TYPE)
    _HI1_Operation_liActivated = SEQ(name='liActivated', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI1NotificationOperations', 'Notification')))
    _HI1_Operation_liDeactivated = SEQ(name='liDeactivated', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI1NotificationOperations', 'Notification')))
    _HI1_Operation_liModified = SEQ(name='liModified', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI1NotificationOperations', 'Notification')))
    _HI1_Operation_alarms_indicator = SEQ(name='alarms-indicator', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI1NotificationOperations', 'Alarm-Indicator')))
    _HI1_Operation_national_HI1_ASN1parameters = SEQ(name='national-HI1-ASN1parameters', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI1NotificationOperations', 'National-HI1-ASN1parameters')))
    HI1_Operation._cont = ASN1Dict([
        ('liActivated', _HI1_Operation_liActivated),
        ('liDeactivated', _HI1_Operation_liDeactivated),
        ('liModified', _HI1_Operation_liModified),
        ('alarms-indicator', _HI1_Operation_alarms_indicator),
        ('national-HI1-ASN1parameters', _HI1_Operation_national_HI1_ASN1parameters),
        ])
    HI1_Operation._ext = ['national-HI1-ASN1parameters']
    
    #-----< Notification >-----#
    Notification = SEQ(name='Notification', mode=MODE_TYPE)
    _Notification_domainID = OID(name='domainID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Notification_domainID._const_val = ASN1Set(rv=[(0, 4, 0, 2, 2, 0, 1, 6)], rr=[], ev=None, er=[])
    _Notification_lawfulInterceptionIdentifier = OCT_STR(name='lawfulInterceptionIdentifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'LawfulInterceptionIdentifier')))
    _Notification_communicationIdentifier = SEQ(name='communicationIdentifier', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'CommunicationIdentifier')), opt=True)
    _Notification_timeStamp = CHOICE(name='timeStamp', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'TimeStamp')))
    _Notification_national_HI1_ASN1parameters = SEQ(name='national-HI1-ASN1parameters', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI1NotificationOperations', 'National-HI1-ASN1parameters')), opt=True)
    _Notification_target_Information = OCT_STR(name='target-Information', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Notification_target_Information._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    Notification._cont = ASN1Dict([
        ('domainID', _Notification_domainID),
        ('lawfulInterceptionIdentifier', _Notification_lawfulInterceptionIdentifier),
        ('communicationIdentifier', _Notification_communicationIdentifier),
        ('timeStamp', _Notification_timeStamp),
        ('national-HI1-ASN1parameters', _Notification_national_HI1_ASN1parameters),
        ('target-Information', _Notification_target_Information),
        ])
    Notification._ext = ['national-HI1-ASN1parameters', 'target-Information']
    
    #-----< Alarm-Indicator >-----#
    Alarm_Indicator = SEQ(name='Alarm-Indicator', mode=MODE_TYPE)
    _Alarm_Indicator_domainID = OID(name='domainID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Alarm_Indicator_domainID._const_val = ASN1Set(rv=[(0, 4, 0, 2, 2, 0, 1, 6)], rr=[], ev=None, er=[])
    _Alarm_Indicator_communicationIdentifier = SEQ(name='communicationIdentifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'CommunicationIdentifier')), opt=True)
    _Alarm_Indicator_timeStamp = CHOICE(name='timeStamp', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'TimeStamp')))
    _Alarm_Indicator_alarm_information = OCT_STR(name='alarm-information', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Alarm_Indicator_alarm_information._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    _Alarm_Indicator_lawfulInterceptionIdentifier = OCT_STR(name='lawfulInterceptionIdentifier', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'LawfulInterceptionIdentifier')), opt=True)
    _Alarm_Indicator_national_HI1_ASN1parameters = SEQ(name='national-HI1-ASN1parameters', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI1NotificationOperations', 'National-HI1-ASN1parameters')), opt=True)
    Alarm_Indicator._cont = ASN1Dict([
        ('domainID', _Alarm_Indicator_domainID),
        ('communicationIdentifier', _Alarm_Indicator_communicationIdentifier),
        ('timeStamp', _Alarm_Indicator_timeStamp),
        ('alarm-information', _Alarm_Indicator_alarm_information),
        ('lawfulInterceptionIdentifier', _Alarm_Indicator_lawfulInterceptionIdentifier),
        ('national-HI1-ASN1parameters', _Alarm_Indicator_national_HI1_ASN1parameters),
        ])
    Alarm_Indicator._ext = ['lawfulInterceptionIdentifier', 'national-HI1-ASN1parameters']
    
    #-----< National-HI1-ASN1parameters >-----#
    National_HI1_ASN1parameters = SEQ(name='National-HI1-ASN1parameters', mode=MODE_TYPE)
    _National_HI1_ASN1parameters_domainID = OID(name='domainID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _National_HI1_ASN1parameters_domainID._const_val = ASN1Set(rv=[(0, 4, 0, 2, 2, 0, 1, 6)], rr=[], ev=None, er=[])
    _National_HI1_ASN1parameters_countryCode = STR_PRINT(name='countryCode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _National_HI1_ASN1parameters_countryCode._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    National_HI1_ASN1parameters._cont = ASN1Dict([
        ('domainID', _National_HI1_ASN1parameters_domainID),
        ('countryCode', _National_HI1_ASN1parameters_countryCode),
        ])
    National_HI1_ASN1parameters._ext = []
    
    _all_ = [
        lawfulInterceptDomainId,
        hi1NotificationOperationsId,
        hi1OperationId,
        sending_of_HI1_Notification,
        _sending_of_HI1_Notification_val_ArgumentType,
        other_failure_causes,
        missing_parameter,
        unknown_parameter,
        erroneous_parameter,
        ErrorHI1Notifications,
        _HI1_Operation_liActivated,
        _HI1_Operation_liDeactivated,
        _HI1_Operation_liModified,
        _HI1_Operation_alarms_indicator,
        _HI1_Operation_national_HI1_ASN1parameters,
        HI1_Operation,
        _Notification_domainID,
        _Notification_lawfulInterceptionIdentifier,
        _Notification_communicationIdentifier,
        _Notification_timeStamp,
        _Notification_national_HI1_ASN1parameters,
        _Notification_target_Information,
        Notification,
        _Alarm_Indicator_domainID,
        _Alarm_Indicator_communicationIdentifier,
        _Alarm_Indicator_timeStamp,
        _Alarm_Indicator_alarm_information,
        _Alarm_Indicator_lawfulInterceptionIdentifier,
        _Alarm_Indicator_national_HI1_ASN1parameters,
        Alarm_Indicator,
        _National_HI1_ASN1parameters_domainID,
        _National_HI1_ASN1parameters_countryCode,
        National_HI1_ASN1parameters,
    ]

class HI2Operations:

    _name_  = 'HI2Operations'
    _oid_   = [0, 4, 0, 2, 2, 1, 18]
    
    _obj_ = [
        'lawfulInterceptDomainId',
        'hi2DomainId',
        'hi2OperationId',
        'sending-of-IRI',
        'IRIsContent',
        'IRISequence',
        'IRIContent',
        'unknown-version',
        'missing-parameter',
        'unknown-parameter-value',
        'unknown-parameter',
        'OperationErrors',
        'IRI-Parameters',
        'CommunicationIdentifier',
        'Network-Identifier',
        'Network-Element-Identifier',
        'CC-Link-Identifier',
        'TimeStamp',
        'LocalTimeStamp',
        'PartyInformation',
        'CallingPartyNumber',
        'CalledPartyNumber',
        'Location',
        'TetraLocation',
        'GSMLocation',
        'MapDatum',
        'UMTSLocation',
        'GeographicalCoordinates',
        'GA-Point',
        'GA-PointWithUnCertainty',
        'maxNrOfPoints',
        'GA-Polygon',
        'CallContentLinkCharacteristics',
        'CCLink-State',
        'Intercepted-Call-State',
        'Services-Information',
        'ISUP-parameters',
        'DSS1-parameters-codeset-0',
        'MAP-parameters',
        'Supplementary-Services',
        'Standard-Supplementary-Services',
        'Non-Standard-Supplementary-Services',
        'Other-Services',
        'ISUP-SS-parameters',
        'DSS1-SS-parameters-codeset-0',
        'DSS1-SS-parameters-codeset-4',
        'DSS1-SS-parameters-codeset-5',
        'DSS1-SS-parameters-codeset-6',
        'DSS1-SS-parameters-codeset-7',
        'DSS1-SS-Invoke-Components',
        'MAP-SS-Invoke-Components',
        'MAP-SS-Parameters',
        'SimpleIndication',
        'SciDataMode',
        'SMS-report',
        'LawfulInterceptionIdentifier',
        'National-Parameters',
        'GPRSCorrelationNumber',
        'GPRSEvent',
        'Services-Data-Information',
        'GPRS-parameters',
        'GPRSOperationErrorCode',
        'DataNodeAddress',
        'IPAddress',
        'IP-value',
        'X25Address',
        'National-HI2-ASN1parameters',
        ]
    _type_ = [
        'IRIsContent',
        'IRISequence',
        'IRIContent',
        'IRI-Parameters',
        'CommunicationIdentifier',
        'Network-Identifier',
        'Network-Element-Identifier',
        'CC-Link-Identifier',
        'TimeStamp',
        'LocalTimeStamp',
        'PartyInformation',
        'CallingPartyNumber',
        'CalledPartyNumber',
        'Location',
        'TetraLocation',
        'GSMLocation',
        'MapDatum',
        'UMTSLocation',
        'GeographicalCoordinates',
        'GA-Point',
        'GA-PointWithUnCertainty',
        'GA-Polygon',
        'CallContentLinkCharacteristics',
        'CCLink-State',
        'Intercepted-Call-State',
        'Services-Information',
        'ISUP-parameters',
        'DSS1-parameters-codeset-0',
        'MAP-parameters',
        'Supplementary-Services',
        'Standard-Supplementary-Services',
        'Non-Standard-Supplementary-Services',
        'Other-Services',
        'ISUP-SS-parameters',
        'DSS1-SS-parameters-codeset-0',
        'DSS1-SS-parameters-codeset-4',
        'DSS1-SS-parameters-codeset-5',
        'DSS1-SS-parameters-codeset-6',
        'DSS1-SS-parameters-codeset-7',
        'DSS1-SS-Invoke-Components',
        'MAP-SS-Invoke-Components',
        'MAP-SS-Parameters',
        'SimpleIndication',
        'SciDataMode',
        'SMS-report',
        'LawfulInterceptionIdentifier',
        'National-Parameters',
        'GPRSCorrelationNumber',
        'GPRSEvent',
        'Services-Data-Information',
        'GPRS-parameters',
        'GPRSOperationErrorCode',
        'DataNodeAddress',
        'IPAddress',
        'IP-value',
        'X25Address',
        'National-HI2-ASN1parameters',
        ]
    _set_ = [
        'OperationErrors',
        ]
    _val_ = [
        'lawfulInterceptDomainId',
        'hi2DomainId',
        'hi2OperationId',
        'sending-of-IRI',
        'unknown-version',
        'missing-parameter',
        'unknown-parameter-value',
        'unknown-parameter',
        'maxNrOfPoints',
        ]
    _class_ = [
        'sending-of-IRI',
        'unknown-version',
        'missing-parameter',
        'unknown-parameter-value',
        'unknown-parameter',
        'OperationErrors',
        ]
    _param_ = [
        ]
    
    #-----< lawfulInterceptDomainId >-----#
    lawfulInterceptDomainId = OID(name='lawfulInterceptDomainId', mode=MODE_VALUE)
    lawfulInterceptDomainId._val = (0, 4, 0, 2, 2)
    
    #-----< hi2DomainId >-----#
    hi2DomainId = OID(name='hi2DomainId', mode=MODE_VALUE)
    hi2DomainId._val = (0, 4, 0, 2, 2, 1)
    
    #-----< hi2OperationId >-----#
    hi2OperationId = OID(name='hi2OperationId', mode=MODE_VALUE)
    hi2OperationId._val = (0, 4, 0, 2, 2, 1, 18)
    
    #-----< sending-of-IRI >-----#
    sending_of_IRI = CLASS(name='sending-of-IRI', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')))
    _sending_of_IRI_val_ArgumentType = CHOICE(name='ArgumentType', mode=MODE_TYPE, typeref=ASN1RefType(('HI2Operations', 'IRIsContent')))
    sending_of_IRI._val = dict([('ArgumentType', _sending_of_IRI_val_ArgumentType), ('Errors', ASN1Set(rv=[dict([('errorCode', ('local', 0))]), dict([('errorCode', ('local', 1))]), dict([('errorCode', ('local', 2))]), dict([('errorCode', ('local', 3))])], rr=[], ev=None, er=[])), ('operationCode', ('global', (0, 4, 0, 2, 2, 1, 1, 1)))])
    
    #-----< IRIsContent >-----#
    IRIsContent = CHOICE(name='IRIsContent', mode=MODE_TYPE)
    _IRIsContent_iRIContent = CHOICE(name='iRIContent', mode=MODE_TYPE, typeref=ASN1RefType(('HI2Operations', 'IRIContent')))
    _IRIsContent_iRISequence = SEQ_OF(name='iRISequence', mode=MODE_TYPE, typeref=ASN1RefType(('HI2Operations', 'IRISequence')))
    IRIsContent._cont = ASN1Dict([
        ('iRIContent', _IRIsContent_iRIContent),
        ('iRISequence', _IRIsContent_iRISequence),
        ])
    IRIsContent._ext = None
    
    #-----< IRISequence >-----#
    IRISequence = SEQ_OF(name='IRISequence', mode=MODE_TYPE)
    _IRISequence__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('HI2Operations', 'IRIContent')))
    IRISequence._cont = _IRISequence__item_
    
    #-----< IRIContent >-----#
    IRIContent = CHOICE(name='IRIContent', mode=MODE_TYPE)
    _IRIContent_iRI_Begin_record = SEQ(name='iRI-Begin-record', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'IRI-Parameters')))
    _IRIContent_iRI_End_record = SEQ(name='iRI-End-record', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'IRI-Parameters')))
    _IRIContent_iRI_Continue_record = SEQ(name='iRI-Continue-record', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'IRI-Parameters')))
    _IRIContent_iRI_Report_record = SEQ(name='iRI-Report-record', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'IRI-Parameters')))
    IRIContent._cont = ASN1Dict([
        ('iRI-Begin-record', _IRIContent_iRI_Begin_record),
        ('iRI-End-record', _IRIContent_iRI_End_record),
        ('iRI-Continue-record', _IRIContent_iRI_Continue_record),
        ('iRI-Report-record', _IRIContent_iRI_Report_record),
        ])
    IRIContent._ext = []
    
    #-----< unknown-version >-----#
    unknown_version = CLASS(name='unknown-version', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    unknown_version._val = dict([('errorCode', ('local', 0))])
    
    #-----< missing-parameter >-----#
    missing_parameter = CLASS(name='missing-parameter', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    missing_parameter._val = dict([('errorCode', ('local', 1))])
    
    #-----< unknown-parameter-value >-----#
    unknown_parameter_value = CLASS(name='unknown-parameter-value', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    unknown_parameter_value._val = dict([('errorCode', ('local', 2))])
    
    #-----< unknown-parameter >-----#
    unknown_parameter = CLASS(name='unknown-parameter', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    unknown_parameter._val = dict([('errorCode', ('local', 3))])
    
    #-----< OperationErrors >-----#
    OperationErrors = CLASS(name='OperationErrors', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    OperationErrors._val = ASN1Set(rv=[dict([('errorCode', ('local', 0))]), dict([('errorCode', ('local', 1))]), dict([('errorCode', ('local', 2))]), dict([('errorCode', ('local', 3))])], rr=[], ev=None, er=[])
    
    #-----< IRI-Parameters >-----#
    IRI_Parameters = SEQ(name='IRI-Parameters', mode=MODE_TYPE)
    _IRI_Parameters_domainID = OID(name='domainID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_domainID._const_val = ASN1Set(rv=[(0, 4, 0, 2, 2, 1, 18)], rr=[], ev=None, er=[])
    _IRI_Parameters_iRIversion = ENUM(name='iRIversion', mode=MODE_TYPE, tag=(23, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_iRIversion._cont = ASN1Dict([('version2', 2), ('version3', 3), ('version4', 4), ('version5', 5), ('version6', 6), ('version7', 7), ('lastVersion', 8)])
    _IRI_Parameters_iRIversion._ext = ['version3', 'version4', 'version5', 'version6', 'version7', 'lastVersion']
    _IRI_Parameters_lawfulInterceptionIdentifier = OCT_STR(name='lawfulInterceptionIdentifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'LawfulInterceptionIdentifier')))
    _IRI_Parameters_communicationIdentifier = SEQ(name='communicationIdentifier', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'CommunicationIdentifier')))
    _IRI_Parameters_timeStamp = CHOICE(name='timeStamp', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'TimeStamp')))
    _IRI_Parameters_intercepted_Call_Direct = ENUM(name='intercepted-Call-Direct', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_intercepted_Call_Direct._cont = ASN1Dict([('not-Available', 0), ('originating-Target', 1), ('terminating-Target', 2)])
    _IRI_Parameters_intercepted_Call_Direct._ext = []
    _IRI_Parameters_intercepted_Call_State = ENUM(name='intercepted-Call-State', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'Intercepted-Call-State')), opt=True)
    _IRI_Parameters_ringingDuration = OCT_STR(name='ringingDuration', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_ringingDuration._const_sz = ASN1Set(rv=[3], rr=[], ev=None, er=[])
    _IRI_Parameters_conversationDuration = OCT_STR(name='conversationDuration', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_conversationDuration._const_sz = ASN1Set(rv=[3], rr=[], ev=None, er=[])
    _IRI_Parameters_locationOfTheTarget = SEQ(name='locationOfTheTarget', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'Location')), opt=True)
    _IRI_Parameters_partyInformation = SET_OF(name='partyInformation', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __IRI_Parameters_partyInformation__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('HI2Operations', 'PartyInformation')))
    _IRI_Parameters_partyInformation._cont = __IRI_Parameters_partyInformation__item_
    _IRI_Parameters_partyInformation._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=10)], ev=None, er=[])
    _IRI_Parameters_callContentLinkInformation = SEQ(name='callContentLinkInformation', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __IRI_Parameters_callContentLinkInformation_cCLink1Characteristics = SEQ(name='cCLink1Characteristics', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'CallContentLinkCharacteristics')), opt=True)
    __IRI_Parameters_callContentLinkInformation_cCLink2Characteristics = SEQ(name='cCLink2Characteristics', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'CallContentLinkCharacteristics')), opt=True)
    _IRI_Parameters_callContentLinkInformation._cont = ASN1Dict([
        ('cCLink1Characteristics', __IRI_Parameters_callContentLinkInformation_cCLink1Characteristics),
        ('cCLink2Characteristics', __IRI_Parameters_callContentLinkInformation_cCLink2Characteristics),
        ])
    _IRI_Parameters_callContentLinkInformation._ext = []
    _IRI_Parameters_release_Reason_Of_Intercepted_Call = OCT_STR(name='release-Reason-Of-Intercepted-Call', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_release_Reason_Of_Intercepted_Call._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _IRI_Parameters_nature_Of_The_intercepted_call = ENUM(name='nature-Of-The-intercepted-call', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_nature_Of_The_intercepted_call._cont = ASN1Dict([('gSM-ISDN-PSTN-circuit-call', 0), ('gSM-SMS-Message', 1), ('uUS4-Messages', 2), ('tETRA-circuit-call', 3), ('teTRA-Packet-Data', 4), ('gPRS-Packet-Data', 5), ('uMTS-circuit-call', 6), ('lTE-SMS-Message', 7), ('lTE-circuit-call', 8)])
    _IRI_Parameters_nature_Of_The_intercepted_call._ext = ['uMTS-circuit-call', 'lTE-SMS-Message', 'lTE-circuit-call']
    _IRI_Parameters_serverCenterAddress = SEQ(name='serverCenterAddress', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'PartyInformation')), opt=True)
    _IRI_Parameters_sMS = SEQ(name='sMS', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'SMS-report')), opt=True)
    _IRI_Parameters_cC_Link_Identifier = OCT_STR(name='cC-Link-Identifier', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'CC-Link-Identifier')), opt=True)
    _IRI_Parameters_national_Parameters = SET_OF(name='national-Parameters', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'National-Parameters')), opt=True)
    _IRI_Parameters_gPRSCorrelationNumber = OCT_STR(name='gPRSCorrelationNumber', mode=MODE_TYPE, tag=(18, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'GPRSCorrelationNumber')), opt=True)
    _IRI_Parameters_gPRSevent = ENUM(name='gPRSevent', mode=MODE_TYPE, tag=(20, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'GPRSEvent')), opt=True)
    _IRI_Parameters_sgsnAddress = CHOICE(name='sgsnAddress', mode=MODE_TYPE, tag=(21, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'DataNodeAddress')), opt=True)
    _IRI_Parameters_gPRSOperationErrorCode = OCT_STR(name='gPRSOperationErrorCode', mode=MODE_TYPE, tag=(22, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'GPRSOperationErrorCode')), opt=True)
    _IRI_Parameters_ggsnAddress = CHOICE(name='ggsnAddress', mode=MODE_TYPE, tag=(24, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'DataNodeAddress')), opt=True)
    _IRI_Parameters_qOS = CHOICE(name='qOS', mode=MODE_TYPE, tag=(25, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'UmtsQos')), opt=True)
    _IRI_Parameters_networkIdentifier = SEQ(name='networkIdentifier', mode=MODE_TYPE, tag=(26, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'Network-Identifier')), opt=True)
    _IRI_Parameters_sMSOriginatingAddress = CHOICE(name='sMSOriginatingAddress', mode=MODE_TYPE, tag=(27, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'DataNodeAddress')), opt=True)
    _IRI_Parameters_sMSTerminatingAddress = CHOICE(name='sMSTerminatingAddress', mode=MODE_TYPE, tag=(28, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'DataNodeAddress')), opt=True)
    _IRI_Parameters_iMSevent = ENUM(name='iMSevent', mode=MODE_TYPE, tag=(29, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'IMSevent')), opt=True)
    _IRI_Parameters_sIPMessage = OCT_STR(name='sIPMessage', mode=MODE_TYPE, tag=(30, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_servingSGSN_number = OCT_STR(name='servingSGSN-number', mode=MODE_TYPE, tag=(31, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_servingSGSN_number._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=20)], ev=None, er=[])
    _IRI_Parameters_servingSGSN_address = OCT_STR(name='servingSGSN-address', mode=MODE_TYPE, tag=(32, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_servingSGSN_address._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=5, ub=17)], ev=None, er=[])
    _IRI_Parameters_tARGETACTIVITYMONITOR = SEQ(name='tARGETACTIVITYMONITOR', mode=MODE_TYPE, tag=(33, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TS101909201', 'TARGETACTIVITYMONITOR-1')), opt=True)
    _IRI_Parameters_ldiEvent = ENUM(name='ldiEvent', mode=MODE_TYPE, tag=(34, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'LDIevent')), opt=True)
    _IRI_Parameters_correlation = CHOICE(name='correlation', mode=MODE_TYPE, tag=(35, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'CorrelationValues')), opt=True)
    _IRI_Parameters_tARGETACTIVITYMONITORind = SEQ(name='tARGETACTIVITYMONITORind', mode=MODE_TYPE, tag=(36, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'TARGETACTIVITYMONITORind')), opt=True)
    _IRI_Parameters_tARGETCOMMSMONITORind = SEQ(name='tARGETCOMMSMONITORind', mode=MODE_TYPE, tag=(37, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'TARGETCOMMSMONITORind')), opt=True)
    _IRI_Parameters_tTRAFFICind = SEQ(name='tTRAFFICind', mode=MODE_TYPE, tag=(38, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'TTRAFFICind')), opt=True)
    _IRI_Parameters_cTTRAFFICind = SEQ(name='cTTRAFFICind', mode=MODE_TYPE, tag=(39, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'CTTRAFFICind')), opt=True)
    _IRI_Parameters_servingSystem = CHOICE(name='servingSystem', mode=MODE_TYPE, tag=(40, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'Network-Element-Identifier')), opt=True)
    _IRI_Parameters_national_HI2_ASN1parameters = SEQ(name='national-HI2-ASN1parameters', mode=MODE_TYPE, tag=(255, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'National-HI2-ASN1parameters')), opt=True)
    IRI_Parameters._cont = ASN1Dict([
        ('domainID', _IRI_Parameters_domainID),
        ('iRIversion', _IRI_Parameters_iRIversion),
        ('lawfulInterceptionIdentifier', _IRI_Parameters_lawfulInterceptionIdentifier),
        ('communicationIdentifier', _IRI_Parameters_communicationIdentifier),
        ('timeStamp', _IRI_Parameters_timeStamp),
        ('intercepted-Call-Direct', _IRI_Parameters_intercepted_Call_Direct),
        ('intercepted-Call-State', _IRI_Parameters_intercepted_Call_State),
        ('ringingDuration', _IRI_Parameters_ringingDuration),
        ('conversationDuration', _IRI_Parameters_conversationDuration),
        ('locationOfTheTarget', _IRI_Parameters_locationOfTheTarget),
        ('partyInformation', _IRI_Parameters_partyInformation),
        ('callContentLinkInformation', _IRI_Parameters_callContentLinkInformation),
        ('release-Reason-Of-Intercepted-Call', _IRI_Parameters_release_Reason_Of_Intercepted_Call),
        ('nature-Of-The-intercepted-call', _IRI_Parameters_nature_Of_The_intercepted_call),
        ('serverCenterAddress', _IRI_Parameters_serverCenterAddress),
        ('sMS', _IRI_Parameters_sMS),
        ('cC-Link-Identifier', _IRI_Parameters_cC_Link_Identifier),
        ('national-Parameters', _IRI_Parameters_national_Parameters),
        ('gPRSCorrelationNumber', _IRI_Parameters_gPRSCorrelationNumber),
        ('gPRSevent', _IRI_Parameters_gPRSevent),
        ('sgsnAddress', _IRI_Parameters_sgsnAddress),
        ('gPRSOperationErrorCode', _IRI_Parameters_gPRSOperationErrorCode),
        ('ggsnAddress', _IRI_Parameters_ggsnAddress),
        ('qOS', _IRI_Parameters_qOS),
        ('networkIdentifier', _IRI_Parameters_networkIdentifier),
        ('sMSOriginatingAddress', _IRI_Parameters_sMSOriginatingAddress),
        ('sMSTerminatingAddress', _IRI_Parameters_sMSTerminatingAddress),
        ('iMSevent', _IRI_Parameters_iMSevent),
        ('sIPMessage', _IRI_Parameters_sIPMessage),
        ('servingSGSN-number', _IRI_Parameters_servingSGSN_number),
        ('servingSGSN-address', _IRI_Parameters_servingSGSN_address),
        ('tARGETACTIVITYMONITOR', _IRI_Parameters_tARGETACTIVITYMONITOR),
        ('ldiEvent', _IRI_Parameters_ldiEvent),
        ('correlation', _IRI_Parameters_correlation),
        ('tARGETACTIVITYMONITORind', _IRI_Parameters_tARGETACTIVITYMONITORind),
        ('tARGETCOMMSMONITORind', _IRI_Parameters_tARGETCOMMSMONITORind),
        ('tTRAFFICind', _IRI_Parameters_tTRAFFICind),
        ('cTTRAFFICind', _IRI_Parameters_cTTRAFFICind),
        ('servingSystem', _IRI_Parameters_servingSystem),
        ('national-HI2-ASN1parameters', _IRI_Parameters_national_HI2_ASN1parameters),
        ])
    IRI_Parameters._ext = ['ggsnAddress', 'qOS', 'networkIdentifier', 'sMSOriginatingAddress', 'sMSTerminatingAddress', 'iMSevent', 'sIPMessage', 'servingSGSN-number', 'servingSGSN-address', 'tARGETACTIVITYMONITOR', 'ldiEvent', 'correlation', 'tARGETACTIVITYMONITORind', 'tARGETCOMMSMONITORind', 'tTRAFFICind', 'cTTRAFFICind', 'servingSystem', 'national-HI2-ASN1parameters']
    
    #-----< CommunicationIdentifier >-----#
    CommunicationIdentifier = SEQ(name='CommunicationIdentifier', mode=MODE_TYPE)
    _CommunicationIdentifier_communication_Identity_Number = OCT_STR(name='communication-Identity-Number', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CommunicationIdentifier_communication_Identity_Number._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    _CommunicationIdentifier_network_Identifier = SEQ(name='network-Identifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'Network-Identifier')))
    CommunicationIdentifier._cont = ASN1Dict([
        ('communication-Identity-Number', _CommunicationIdentifier_communication_Identity_Number),
        ('network-Identifier', _CommunicationIdentifier_network_Identifier),
        ])
    CommunicationIdentifier._ext = []
    
    #-----< Network-Identifier >-----#
    Network_Identifier = SEQ(name='Network-Identifier', mode=MODE_TYPE)
    _Network_Identifier_operator_Identifier = OCT_STR(name='operator-Identifier', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Network_Identifier_operator_Identifier._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=5)], ev=None, er=[])
    _Network_Identifier_network_Element_Identifier = CHOICE(name='network-Element-Identifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'Network-Element-Identifier')), opt=True)
    Network_Identifier._cont = ASN1Dict([
        ('operator-Identifier', _Network_Identifier_operator_Identifier),
        ('network-Element-Identifier', _Network_Identifier_network_Element_Identifier),
        ])
    Network_Identifier._ext = []
    
    #-----< Network-Element-Identifier >-----#
    Network_Element_Identifier = CHOICE(name='Network-Element-Identifier', mode=MODE_TYPE)
    _Network_Element_Identifier_e164_Format = OCT_STR(name='e164-Format', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Network_Element_Identifier_e164_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    _Network_Element_Identifier_x25_Format = OCT_STR(name='x25-Format', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Network_Element_Identifier_x25_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    _Network_Element_Identifier_iP_Format = OCT_STR(name='iP-Format', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Network_Element_Identifier_iP_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    _Network_Element_Identifier_dNS_Format = OCT_STR(name='dNS-Format', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Network_Element_Identifier_dNS_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    _Network_Element_Identifier_iP_Address = SEQ(name='iP-Address', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'IPAddress')))
    Network_Element_Identifier._cont = ASN1Dict([
        ('e164-Format', _Network_Element_Identifier_e164_Format),
        ('x25-Format', _Network_Element_Identifier_x25_Format),
        ('iP-Format', _Network_Element_Identifier_iP_Format),
        ('dNS-Format', _Network_Element_Identifier_dNS_Format),
        ('iP-Address', _Network_Element_Identifier_iP_Address),
        ])
    Network_Element_Identifier._ext = ['iP-Address']
    
    #-----< CC-Link-Identifier >-----#
    CC_Link_Identifier = OCT_STR(name='CC-Link-Identifier', mode=MODE_TYPE)
    CC_Link_Identifier._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    
    #-----< TimeStamp >-----#
    TimeStamp = CHOICE(name='TimeStamp', mode=MODE_TYPE)
    _TimeStamp_localTime = SEQ(name='localTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'LocalTimeStamp')))
    _TimeStamp_utcTime = TIME_UTC(name='utcTime', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    TimeStamp._cont = ASN1Dict([
        ('localTime', _TimeStamp_localTime),
        ('utcTime', _TimeStamp_utcTime),
        ])
    TimeStamp._ext = None
    
    #-----< LocalTimeStamp >-----#
    LocalTimeStamp = SEQ(name='LocalTimeStamp', mode=MODE_TYPE)
    _LocalTimeStamp_generalizedTime = TIME_GEN(name='generalizedTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LocalTimeStamp_winterSummerIndication = ENUM(name='winterSummerIndication', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LocalTimeStamp_winterSummerIndication._cont = ASN1Dict([('notProvided', 0), ('winterTime', 1), ('summerTime', 2)])
    _LocalTimeStamp_winterSummerIndication._ext = []
    LocalTimeStamp._cont = ASN1Dict([
        ('generalizedTime', _LocalTimeStamp_generalizedTime),
        ('winterSummerIndication', _LocalTimeStamp_winterSummerIndication),
        ])
    LocalTimeStamp._ext = None
    
    #-----< PartyInformation >-----#
    PartyInformation = SEQ(name='PartyInformation', mode=MODE_TYPE)
    _PartyInformation_party_Qualifier = ENUM(name='party-Qualifier', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PartyInformation_party_Qualifier._cont = ASN1Dict([('originating-Party', 0), ('terminating-Party', 1), ('forwarded-to-Party', 2), ('gPRS-Target', 3)])
    _PartyInformation_party_Qualifier._ext = []
    _PartyInformation_partyIdentity = SEQ(name='partyIdentity', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __PartyInformation_partyIdentity_imei = OCT_STR(name='imei', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PartyInformation_partyIdentity_imei._const_sz = ASN1Set(rv=[8], rr=[], ev=None, er=[])
    __PartyInformation_partyIdentity_tei = OCT_STR(name='tei', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PartyInformation_partyIdentity_tei._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=15)], ev=None, er=[])
    __PartyInformation_partyIdentity_imsi = OCT_STR(name='imsi', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PartyInformation_partyIdentity_imsi._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=3, ub=8)], ev=None, er=[])
    __PartyInformation_partyIdentity_callingPartyNumber = CHOICE(name='callingPartyNumber', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'CallingPartyNumber')), opt=True)
    __PartyInformation_partyIdentity_calledPartyNumber = CHOICE(name='calledPartyNumber', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'CalledPartyNumber')), opt=True)
    __PartyInformation_partyIdentity_msISDN = OCT_STR(name='msISDN', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PartyInformation_partyIdentity_msISDN._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=9)], ev=None, er=[])
    __PartyInformation_partyIdentity_e164_Format = OCT_STR(name='e164-Format', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PartyInformation_partyIdentity_e164_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    __PartyInformation_partyIdentity_sip_uri = OCT_STR(name='sip-uri', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PartyInformation_partyIdentity_tel_url = OCT_STR(name='tel-url', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PartyInformation_partyIdentity_party_Validity = ENUM(name='party-Validity', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PartyInformation_partyIdentity_party_Validity._cont = ASN1Dict([('trusted', 0), ('untrusted', 1), ('operator-added', 2)])
    __PartyInformation_partyIdentity_party_Validity._ext = []
    __PartyInformation_partyIdentity_alphanumeric = STR_UTF8(name='alphanumeric', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PartyInformation_partyIdentity._cont = ASN1Dict([
        ('imei', __PartyInformation_partyIdentity_imei),
        ('tei', __PartyInformation_partyIdentity_tei),
        ('imsi', __PartyInformation_partyIdentity_imsi),
        ('callingPartyNumber', __PartyInformation_partyIdentity_callingPartyNumber),
        ('calledPartyNumber', __PartyInformation_partyIdentity_calledPartyNumber),
        ('msISDN', __PartyInformation_partyIdentity_msISDN),
        ('e164-Format', __PartyInformation_partyIdentity_e164_Format),
        ('sip-uri', __PartyInformation_partyIdentity_sip_uri),
        ('tel-url', __PartyInformation_partyIdentity_tel_url),
        ('party-Validity', __PartyInformation_partyIdentity_party_Validity),
        ('alphanumeric', __PartyInformation_partyIdentity_alphanumeric),
        ])
    _PartyInformation_partyIdentity._ext = ['e164-Format', 'sip-uri', 'tel-url', 'party-Validity', 'alphanumeric']
    _PartyInformation_services_Information = SEQ(name='services-Information', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'Services-Information')), opt=True)
    _PartyInformation_supplementary_Services_Information = SEQ(name='supplementary-Services-Information', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'Supplementary-Services')), opt=True)
    _PartyInformation_services_Data_Information = SEQ(name='services-Data-Information', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'Services-Data-Information')), opt=True)
    PartyInformation._cont = ASN1Dict([
        ('party-Qualifier', _PartyInformation_party_Qualifier),
        ('partyIdentity', _PartyInformation_partyIdentity),
        ('services-Information', _PartyInformation_services_Information),
        ('supplementary-Services-Information', _PartyInformation_supplementary_Services_Information),
        ('services-Data-Information', _PartyInformation_services_Data_Information),
        ])
    PartyInformation._ext = []
    
    #-----< CallingPartyNumber >-----#
    CallingPartyNumber = CHOICE(name='CallingPartyNumber', mode=MODE_TYPE)
    _CallingPartyNumber_iSUP_Format = OCT_STR(name='iSUP-Format', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CallingPartyNumber_iSUP_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    _CallingPartyNumber_dSS1_Format = OCT_STR(name='dSS1-Format', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CallingPartyNumber_dSS1_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    _CallingPartyNumber_mAP_Format = OCT_STR(name='mAP-Format', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CallingPartyNumber_mAP_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    CallingPartyNumber._cont = ASN1Dict([
        ('iSUP-Format', _CallingPartyNumber_iSUP_Format),
        ('dSS1-Format', _CallingPartyNumber_dSS1_Format),
        ('mAP-Format', _CallingPartyNumber_mAP_Format),
        ])
    CallingPartyNumber._ext = ['mAP-Format']
    
    #-----< CalledPartyNumber >-----#
    CalledPartyNumber = CHOICE(name='CalledPartyNumber', mode=MODE_TYPE)
    _CalledPartyNumber_iSUP_Format = OCT_STR(name='iSUP-Format', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CalledPartyNumber_iSUP_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    _CalledPartyNumber_mAP_Format = OCT_STR(name='mAP-Format', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CalledPartyNumber_mAP_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    _CalledPartyNumber_dSS1_Format = OCT_STR(name='dSS1-Format', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CalledPartyNumber_dSS1_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    CalledPartyNumber._cont = ASN1Dict([
        ('iSUP-Format', _CalledPartyNumber_iSUP_Format),
        ('mAP-Format', _CalledPartyNumber_mAP_Format),
        ('dSS1-Format', _CalledPartyNumber_dSS1_Format),
        ])
    CalledPartyNumber._ext = []
    
    #-----< Location >-----#
    Location = SEQ(name='Location', mode=MODE_TYPE)
    _Location_e164_Number = OCT_STR(name='e164-Number', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Location_e164_Number._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    _Location_globalCellID = OCT_STR(name='globalCellID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Location_globalCellID._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=5, ub=7)], ev=None, er=[])
    _Location_tetraLocation = CHOICE(name='tetraLocation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'TetraLocation')), opt=True)
    _Location_rAI = OCT_STR(name='rAI', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Location_rAI._const_sz = ASN1Set(rv=[6], rr=[], ev=None, er=[])
    _Location_gsmLocation = CHOICE(name='gsmLocation', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'GSMLocation')), opt=True)
    _Location_umtsLocation = CHOICE(name='umtsLocation', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'UMTSLocation')), opt=True)
    _Location_sAI = OCT_STR(name='sAI', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Location_sAI._const_sz = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    _Location_oldRAI = OCT_STR(name='oldRAI', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Location_oldRAI._const_sz = ASN1Set(rv=[6], rr=[], ev=None, er=[])
    _Location_tAI = OCT_STR(name='tAI', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Location_tAI._const_sz = ASN1Set(rv=[6], rr=[], ev=None, er=[])
    _Location_eCGI = OCT_STR(name='eCGI', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Location_eCGI._const_sz = ASN1Set(rv=[8], rr=[], ev=None, er=[])
    Location._cont = ASN1Dict([
        ('e164-Number', _Location_e164_Number),
        ('globalCellID', _Location_globalCellID),
        ('tetraLocation', _Location_tetraLocation),
        ('rAI', _Location_rAI),
        ('gsmLocation', _Location_gsmLocation),
        ('umtsLocation', _Location_umtsLocation),
        ('sAI', _Location_sAI),
        ('oldRAI', _Location_oldRAI),
        ('tAI', _Location_tAI),
        ('eCGI', _Location_eCGI),
        ])
    Location._ext = ['oldRAI', 'tAI', 'eCGI']
    
    #-----< TetraLocation >-----#
    TetraLocation = CHOICE(name='TetraLocation', mode=MODE_TYPE)
    _TetraLocation_ms_Loc = SEQ(name='ms-Loc', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __TetraLocation_ms_Loc_mcc = INT(name='mcc', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __TetraLocation_ms_Loc_mcc._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1023)], ev=None, er=[])
    __TetraLocation_ms_Loc_mnc = INT(name='mnc', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __TetraLocation_ms_Loc_mnc._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=16383)], ev=None, er=[])
    __TetraLocation_ms_Loc_lai = INT(name='lai', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __TetraLocation_ms_Loc_lai._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    __TetraLocation_ms_Loc_ci = INT(name='ci', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _TetraLocation_ms_Loc._cont = ASN1Dict([
        ('mcc', __TetraLocation_ms_Loc_mcc),
        ('mnc', __TetraLocation_ms_Loc_mnc),
        ('lai', __TetraLocation_ms_Loc_lai),
        ('ci', __TetraLocation_ms_Loc_ci),
        ])
    _TetraLocation_ms_Loc._ext = None
    _TetraLocation_ls_Loc = INT(name='ls-Loc', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    TetraLocation._cont = ASN1Dict([
        ('ms-Loc', _TetraLocation_ms_Loc),
        ('ls-Loc', _TetraLocation_ls_Loc),
        ])
    TetraLocation._ext = None
    
    #-----< GSMLocation >-----#
    GSMLocation = CHOICE(name='GSMLocation', mode=MODE_TYPE)
    _GSMLocation_geoCoordinates = SEQ(name='geoCoordinates', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GSMLocation_geoCoordinates_latitude = STR_PRINT(name='latitude', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GSMLocation_geoCoordinates_latitude._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=7, ub=10)], ev=None, er=[])
    __GSMLocation_geoCoordinates_longitude = STR_PRINT(name='longitude', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GSMLocation_geoCoordinates_longitude._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=8, ub=11)], ev=None, er=[])
    __GSMLocation_geoCoordinates_mapDatum = ENUM(name='mapDatum', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'MapDatum')), default='wGS84')
    __GSMLocation_geoCoordinates_azimuth = INT(name='azimuth', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __GSMLocation_geoCoordinates_azimuth._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=359)], ev=None, er=[])
    _GSMLocation_geoCoordinates._cont = ASN1Dict([
        ('latitude', __GSMLocation_geoCoordinates_latitude),
        ('longitude', __GSMLocation_geoCoordinates_longitude),
        ('mapDatum', __GSMLocation_geoCoordinates_mapDatum),
        ('azimuth', __GSMLocation_geoCoordinates_azimuth),
        ])
    _GSMLocation_geoCoordinates._ext = ['azimuth']
    _GSMLocation_utmCoordinates = SEQ(name='utmCoordinates', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GSMLocation_utmCoordinates_utm_East = STR_PRINT(name='utm-East', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GSMLocation_utmCoordinates_utm_East._const_sz = ASN1Set(rv=[10], rr=[], ev=None, er=[])
    __GSMLocation_utmCoordinates_utm_North = STR_PRINT(name='utm-North', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GSMLocation_utmCoordinates_utm_North._const_sz = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    __GSMLocation_utmCoordinates_mapDatum = ENUM(name='mapDatum', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'MapDatum')), default='wGS84')
    __GSMLocation_utmCoordinates_azimuth = INT(name='azimuth', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __GSMLocation_utmCoordinates_azimuth._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=359)], ev=None, er=[])
    _GSMLocation_utmCoordinates._cont = ASN1Dict([
        ('utm-East', __GSMLocation_utmCoordinates_utm_East),
        ('utm-North', __GSMLocation_utmCoordinates_utm_North),
        ('mapDatum', __GSMLocation_utmCoordinates_mapDatum),
        ('azimuth', __GSMLocation_utmCoordinates_azimuth),
        ])
    _GSMLocation_utmCoordinates._ext = ['azimuth']
    _GSMLocation_utmRefCoordinates = SEQ(name='utmRefCoordinates', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GSMLocation_utmRefCoordinates_utmref_string = STR_PRINT(name='utmref-string', mode=MODE_TYPE)
    __GSMLocation_utmRefCoordinates_utmref_string._const_sz = ASN1Set(rv=[13], rr=[], ev=None, er=[])
    __GSMLocation_utmRefCoordinates_mapDatum = ENUM(name='mapDatum', mode=MODE_TYPE, typeref=ASN1RefType(('HI2Operations', 'MapDatum')), default='wGS84')
    _GSMLocation_utmRefCoordinates._cont = ASN1Dict([
        ('utmref-string', __GSMLocation_utmRefCoordinates_utmref_string),
        ('mapDatum', __GSMLocation_utmRefCoordinates_mapDatum),
        ])
    _GSMLocation_utmRefCoordinates._ext = []
    _GSMLocation_wGS84Coordinates = OCT_STR(name='wGS84Coordinates', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    GSMLocation._cont = ASN1Dict([
        ('geoCoordinates', _GSMLocation_geoCoordinates),
        ('utmCoordinates', _GSMLocation_utmCoordinates),
        ('utmRefCoordinates', _GSMLocation_utmRefCoordinates),
        ('wGS84Coordinates', _GSMLocation_wGS84Coordinates),
        ])
    GSMLocation._ext = None
    
    #-----< MapDatum >-----#
    MapDatum = ENUM(name='MapDatum', mode=MODE_TYPE)
    MapDatum._cont = ASN1Dict([('wGS84', 0), ('wGS72', 1), ('eD50', 2)])
    MapDatum._ext = []
    
    #-----< UMTSLocation >-----#
    UMTSLocation = CHOICE(name='UMTSLocation', mode=MODE_TYPE)
    _UMTSLocation_point = SEQ(name='point', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'GA-Point')))
    _UMTSLocation_pointWithUnCertainty = SEQ(name='pointWithUnCertainty', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'GA-PointWithUnCertainty')))
    _UMTSLocation_polygon = SEQ_OF(name='polygon', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'GA-Polygon')))
    UMTSLocation._cont = ASN1Dict([
        ('point', _UMTSLocation_point),
        ('pointWithUnCertainty', _UMTSLocation_pointWithUnCertainty),
        ('polygon', _UMTSLocation_polygon),
        ])
    UMTSLocation._ext = []
    
    #-----< GeographicalCoordinates >-----#
    GeographicalCoordinates = SEQ(name='GeographicalCoordinates', mode=MODE_TYPE)
    _GeographicalCoordinates_latitudeSign = ENUM(name='latitudeSign', mode=MODE_TYPE)
    _GeographicalCoordinates_latitudeSign._cont = ASN1Dict([('north', 0), ('south', 1)])
    _GeographicalCoordinates_latitudeSign._ext = None
    _GeographicalCoordinates_latitude = INT(name='latitude', mode=MODE_TYPE)
    _GeographicalCoordinates_latitude._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=8388607)], ev=None, er=[])
    _GeographicalCoordinates_longitude = INT(name='longitude', mode=MODE_TYPE)
    _GeographicalCoordinates_longitude._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-8388608, ub=8388607)], ev=None, er=[])
    GeographicalCoordinates._cont = ASN1Dict([
        ('latitudeSign', _GeographicalCoordinates_latitudeSign),
        ('latitude', _GeographicalCoordinates_latitude),
        ('longitude', _GeographicalCoordinates_longitude),
        ])
    GeographicalCoordinates._ext = []
    
    #-----< GA-Point >-----#
    GA_Point = SEQ(name='GA-Point', mode=MODE_TYPE)
    _GA_Point_geographicalCoordinates = SEQ(name='geographicalCoordinates', mode=MODE_TYPE, typeref=ASN1RefType(('HI2Operations', 'GeographicalCoordinates')))
    GA_Point._cont = ASN1Dict([
        ('geographicalCoordinates', _GA_Point_geographicalCoordinates),
        ])
    GA_Point._ext = []
    
    #-----< GA-PointWithUnCertainty >-----#
    GA_PointWithUnCertainty = SEQ(name='GA-PointWithUnCertainty', mode=MODE_TYPE)
    _GA_PointWithUnCertainty_geographicalCoordinates = SEQ(name='geographicalCoordinates', mode=MODE_TYPE, typeref=ASN1RefType(('HI2Operations', 'GeographicalCoordinates')))
    _GA_PointWithUnCertainty_uncertaintyCode = INT(name='uncertaintyCode', mode=MODE_TYPE)
    _GA_PointWithUnCertainty_uncertaintyCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=None, er=[])
    GA_PointWithUnCertainty._cont = ASN1Dict([
        ('geographicalCoordinates', _GA_PointWithUnCertainty_geographicalCoordinates),
        ('uncertaintyCode', _GA_PointWithUnCertainty_uncertaintyCode),
        ])
    GA_PointWithUnCertainty._ext = None
    
    #-----< maxNrOfPoints >-----#
    maxNrOfPoints = INT(name='maxNrOfPoints', mode=MODE_VALUE)
    maxNrOfPoints._val = 15
    
    #-----< GA-Polygon >-----#
    GA_Polygon = SEQ_OF(name='GA-Polygon', mode=MODE_TYPE)
    _GA_Polygon__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    __GA_Polygon__item__geographicalCoordinates = SEQ(name='geographicalCoordinates', mode=MODE_TYPE, typeref=ASN1RefType(('HI2Operations', 'GeographicalCoordinates')))
    _GA_Polygon__item_._cont = ASN1Dict([
        ('geographicalCoordinates', __GA_Polygon__item__geographicalCoordinates),
        ])
    _GA_Polygon__item_._ext = []
    GA_Polygon._cont = _GA_Polygon__item_
    GA_Polygon._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=15)], ev=None, er=[])
    
    #-----< CallContentLinkCharacteristics >-----#
    CallContentLinkCharacteristics = SEQ(name='CallContentLinkCharacteristics', mode=MODE_TYPE)
    _CallContentLinkCharacteristics_cCLink_State = ENUM(name='cCLink-State', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'CCLink-State')), opt=True)
    _CallContentLinkCharacteristics_release_Time = CHOICE(name='release-Time', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'TimeStamp')), opt=True)
    _CallContentLinkCharacteristics_release_Reason = OCT_STR(name='release-Reason', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CallContentLinkCharacteristics_release_Reason._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _CallContentLinkCharacteristics_lEMF_Address = CHOICE(name='lEMF-Address', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'CalledPartyNumber')), opt=True)
    CallContentLinkCharacteristics._cont = ASN1Dict([
        ('cCLink-State', _CallContentLinkCharacteristics_cCLink_State),
        ('release-Time', _CallContentLinkCharacteristics_release_Time),
        ('release-Reason', _CallContentLinkCharacteristics_release_Reason),
        ('lEMF-Address', _CallContentLinkCharacteristics_lEMF_Address),
        ])
    CallContentLinkCharacteristics._ext = []
    
    #-----< CCLink-State >-----#
    CCLink_State = ENUM(name='CCLink-State', mode=MODE_TYPE)
    CCLink_State._cont = ASN1Dict([('setUpInProcess', 1), ('callActive', 2), ('callReleased', 3), ('lack-of-resource', 4)])
    CCLink_State._ext = []
    
    #-----< Intercepted-Call-State >-----#
    Intercepted_Call_State = ENUM(name='Intercepted-Call-State', mode=MODE_TYPE)
    Intercepted_Call_State._cont = ASN1Dict([('idle', 1), ('setUpInProcess', 2), ('connected', 3)])
    Intercepted_Call_State._ext = []
    
    #-----< Services-Information >-----#
    Services_Information = SEQ(name='Services-Information', mode=MODE_TYPE)
    _Services_Information_iSUP_parameters = SET_OF(name='iSUP-parameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'ISUP-parameters')), opt=True)
    _Services_Information_dSS1_parameters_codeset_0 = SET_OF(name='dSS1-parameters-codeset-0', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'DSS1-parameters-codeset-0')), opt=True)
    _Services_Information_mAP_parameters = SET_OF(name='mAP-parameters', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'MAP-parameters')), opt=True)
    Services_Information._cont = ASN1Dict([
        ('iSUP-parameters', _Services_Information_iSUP_parameters),
        ('dSS1-parameters-codeset-0', _Services_Information_dSS1_parameters_codeset_0),
        ('mAP-parameters', _Services_Information_mAP_parameters),
        ])
    Services_Information._ext = ['mAP-parameters']
    
    #-----< ISUP-parameters >-----#
    ISUP_parameters = SET_OF(name='ISUP-parameters', mode=MODE_TYPE)
    _ISUP_parameters__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _ISUP_parameters__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    ISUP_parameters._cont = _ISUP_parameters__item_
    ISUP_parameters._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< DSS1-parameters-codeset-0 >-----#
    DSS1_parameters_codeset_0 = SET_OF(name='DSS1-parameters-codeset-0', mode=MODE_TYPE)
    _DSS1_parameters_codeset_0__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _DSS1_parameters_codeset_0__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    DSS1_parameters_codeset_0._cont = _DSS1_parameters_codeset_0__item_
    DSS1_parameters_codeset_0._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< MAP-parameters >-----#
    MAP_parameters = SET_OF(name='MAP-parameters', mode=MODE_TYPE)
    _MAP_parameters__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _MAP_parameters__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    MAP_parameters._cont = _MAP_parameters__item_
    MAP_parameters._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< Supplementary-Services >-----#
    Supplementary_Services = SEQ(name='Supplementary-Services', mode=MODE_TYPE)
    _Supplementary_Services_standard_Supplementary_Services = SEQ(name='standard-Supplementary-Services', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'Standard-Supplementary-Services')), opt=True)
    _Supplementary_Services_non_Standard_Supplementary_Services = SET_OF(name='non-Standard-Supplementary-Services', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'Non-Standard-Supplementary-Services')), opt=True)
    _Supplementary_Services_other_Services = SET_OF(name='other-Services', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'Other-Services')), opt=True)
    Supplementary_Services._cont = ASN1Dict([
        ('standard-Supplementary-Services', _Supplementary_Services_standard_Supplementary_Services),
        ('non-Standard-Supplementary-Services', _Supplementary_Services_non_Standard_Supplementary_Services),
        ('other-Services', _Supplementary_Services_other_Services),
        ])
    Supplementary_Services._ext = []
    
    #-----< Standard-Supplementary-Services >-----#
    Standard_Supplementary_Services = SEQ(name='Standard-Supplementary-Services', mode=MODE_TYPE)
    _Standard_Supplementary_Services_iSUP_SS_parameters = SET_OF(name='iSUP-SS-parameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'ISUP-SS-parameters')), opt=True)
    _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_0 = SET_OF(name='dSS1-SS-parameters-codeset-0', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'DSS1-SS-parameters-codeset-0')), opt=True)
    _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_4 = SET_OF(name='dSS1-SS-parameters-codeset-4', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'DSS1-SS-parameters-codeset-4')), opt=True)
    _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_5 = SET_OF(name='dSS1-SS-parameters-codeset-5', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'DSS1-SS-parameters-codeset-5')), opt=True)
    _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_6 = SET_OF(name='dSS1-SS-parameters-codeset-6', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'DSS1-SS-parameters-codeset-6')), opt=True)
    _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_7 = SET_OF(name='dSS1-SS-parameters-codeset-7', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'DSS1-SS-parameters-codeset-7')), opt=True)
    _Standard_Supplementary_Services_dSS1_SS_Invoke_components = SET_OF(name='dSS1-SS-Invoke-components', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'DSS1-SS-Invoke-Components')), opt=True)
    _Standard_Supplementary_Services_mAP_SS_Parameters = SET_OF(name='mAP-SS-Parameters', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'MAP-SS-Parameters')), opt=True)
    _Standard_Supplementary_Services_mAP_SS_Invoke_Components = SET_OF(name='mAP-SS-Invoke-Components', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'MAP-SS-Invoke-Components')), opt=True)
    Standard_Supplementary_Services._cont = ASN1Dict([
        ('iSUP-SS-parameters', _Standard_Supplementary_Services_iSUP_SS_parameters),
        ('dSS1-SS-parameters-codeset-0', _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_0),
        ('dSS1-SS-parameters-codeset-4', _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_4),
        ('dSS1-SS-parameters-codeset-5', _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_5),
        ('dSS1-SS-parameters-codeset-6', _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_6),
        ('dSS1-SS-parameters-codeset-7', _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_7),
        ('dSS1-SS-Invoke-components', _Standard_Supplementary_Services_dSS1_SS_Invoke_components),
        ('mAP-SS-Parameters', _Standard_Supplementary_Services_mAP_SS_Parameters),
        ('mAP-SS-Invoke-Components', _Standard_Supplementary_Services_mAP_SS_Invoke_Components),
        ])
    Standard_Supplementary_Services._ext = []
    
    #-----< Non-Standard-Supplementary-Services >-----#
    Non_Standard_Supplementary_Services = SET_OF(name='Non-Standard-Supplementary-Services', mode=MODE_TYPE)
    _Non_Standard_Supplementary_Services__item_ = CHOICE(name='_item_', mode=MODE_TYPE)
    __Non_Standard_Supplementary_Services__item__simpleIndication = ENUM(name='simpleIndication', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'SimpleIndication')))
    __Non_Standard_Supplementary_Services__item__sciData = OCT_STR(name='sciData', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'SciDataMode')))
    _Non_Standard_Supplementary_Services__item_._cont = ASN1Dict([
        ('simpleIndication', __Non_Standard_Supplementary_Services__item__simpleIndication),
        ('sciData', __Non_Standard_Supplementary_Services__item__sciData),
        ])
    _Non_Standard_Supplementary_Services__item_._ext = []
    Non_Standard_Supplementary_Services._cont = _Non_Standard_Supplementary_Services__item_
    Non_Standard_Supplementary_Services._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=20)], ev=None, er=[])
    
    #-----< Other-Services >-----#
    Other_Services = SET_OF(name='Other-Services', mode=MODE_TYPE)
    _Other_Services__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _Other_Services__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    Other_Services._cont = _Other_Services__item_
    Other_Services._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=50)], ev=None, er=[])
    
    #-----< ISUP-SS-parameters >-----#
    ISUP_SS_parameters = SET_OF(name='ISUP-SS-parameters', mode=MODE_TYPE)
    _ISUP_SS_parameters__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _ISUP_SS_parameters__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    ISUP_SS_parameters._cont = _ISUP_SS_parameters__item_
    ISUP_SS_parameters._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< DSS1-SS-parameters-codeset-0 >-----#
    DSS1_SS_parameters_codeset_0 = SET_OF(name='DSS1-SS-parameters-codeset-0', mode=MODE_TYPE)
    _DSS1_SS_parameters_codeset_0__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _DSS1_SS_parameters_codeset_0__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    DSS1_SS_parameters_codeset_0._cont = _DSS1_SS_parameters_codeset_0__item_
    DSS1_SS_parameters_codeset_0._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< DSS1-SS-parameters-codeset-4 >-----#
    DSS1_SS_parameters_codeset_4 = SET_OF(name='DSS1-SS-parameters-codeset-4', mode=MODE_TYPE)
    _DSS1_SS_parameters_codeset_4__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _DSS1_SS_parameters_codeset_4__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    DSS1_SS_parameters_codeset_4._cont = _DSS1_SS_parameters_codeset_4__item_
    DSS1_SS_parameters_codeset_4._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< DSS1-SS-parameters-codeset-5 >-----#
    DSS1_SS_parameters_codeset_5 = SET_OF(name='DSS1-SS-parameters-codeset-5', mode=MODE_TYPE)
    _DSS1_SS_parameters_codeset_5__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _DSS1_SS_parameters_codeset_5__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    DSS1_SS_parameters_codeset_5._cont = _DSS1_SS_parameters_codeset_5__item_
    DSS1_SS_parameters_codeset_5._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< DSS1-SS-parameters-codeset-6 >-----#
    DSS1_SS_parameters_codeset_6 = SET_OF(name='DSS1-SS-parameters-codeset-6', mode=MODE_TYPE)
    _DSS1_SS_parameters_codeset_6__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _DSS1_SS_parameters_codeset_6__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    DSS1_SS_parameters_codeset_6._cont = _DSS1_SS_parameters_codeset_6__item_
    DSS1_SS_parameters_codeset_6._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< DSS1-SS-parameters-codeset-7 >-----#
    DSS1_SS_parameters_codeset_7 = SET_OF(name='DSS1-SS-parameters-codeset-7', mode=MODE_TYPE)
    _DSS1_SS_parameters_codeset_7__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _DSS1_SS_parameters_codeset_7__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    DSS1_SS_parameters_codeset_7._cont = _DSS1_SS_parameters_codeset_7__item_
    DSS1_SS_parameters_codeset_7._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< DSS1-SS-Invoke-Components >-----#
    DSS1_SS_Invoke_Components = SET_OF(name='DSS1-SS-Invoke-Components', mode=MODE_TYPE)
    _DSS1_SS_Invoke_Components__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _DSS1_SS_Invoke_Components__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    DSS1_SS_Invoke_Components._cont = _DSS1_SS_Invoke_Components__item_
    DSS1_SS_Invoke_Components._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< MAP-SS-Invoke-Components >-----#
    MAP_SS_Invoke_Components = SET_OF(name='MAP-SS-Invoke-Components', mode=MODE_TYPE)
    _MAP_SS_Invoke_Components__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _MAP_SS_Invoke_Components__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    MAP_SS_Invoke_Components._cont = _MAP_SS_Invoke_Components__item_
    MAP_SS_Invoke_Components._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< MAP-SS-Parameters >-----#
    MAP_SS_Parameters = SET_OF(name='MAP-SS-Parameters', mode=MODE_TYPE)
    _MAP_SS_Parameters__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _MAP_SS_Parameters__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    MAP_SS_Parameters._cont = _MAP_SS_Parameters__item_
    MAP_SS_Parameters._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< SimpleIndication >-----#
    SimpleIndication = ENUM(name='SimpleIndication', mode=MODE_TYPE)
    SimpleIndication._cont = ASN1Dict([('call-Waiting-Indication', 0), ('add-conf-Indication', 1), ('call-on-hold-Indication', 2), ('retrieve-Indication', 3), ('suspend-Indication', 4), ('resume-Indication', 5), ('answer-Indication', 6)])
    SimpleIndication._ext = []
    
    #-----< SciDataMode >-----#
    SciDataMode = OCT_STR(name='SciDataMode', mode=MODE_TYPE)
    SciDataMode._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< SMS-report >-----#
    SMS_report = SEQ(name='SMS-report', mode=MODE_TYPE)
    _SMS_report_communicationIdentifier = SEQ(name='communicationIdentifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'CommunicationIdentifier')))
    _SMS_report_timeStamp = CHOICE(name='timeStamp', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'TimeStamp')))
    _SMS_report_sMS_Contents = SEQ(name='sMS-Contents', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __SMS_report_sMS_Contents_initiator = ENUM(name='initiator', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __SMS_report_sMS_Contents_initiator._cont = ASN1Dict([('target', 0), ('server', 1), ('undefined-party', 2)])
    __SMS_report_sMS_Contents_initiator._ext = []
    __SMS_report_sMS_Contents_transfer_status = ENUM(name='transfer-status', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SMS_report_sMS_Contents_transfer_status._cont = ASN1Dict([('succeed-transfer', 0), ('not-succeed-transfer', 1), ('undefined', 2)])
    __SMS_report_sMS_Contents_transfer_status._ext = []
    __SMS_report_sMS_Contents_other_message = ENUM(name='other-message', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SMS_report_sMS_Contents_other_message._cont = ASN1Dict([('yes', 0), ('no', 1), ('undefined', 2)])
    __SMS_report_sMS_Contents_other_message._ext = []
    __SMS_report_sMS_Contents_content = OCT_STR(name='content', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SMS_report_sMS_Contents_content._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=270)], ev=None, er=[])
    __SMS_report_sMS_Contents_enhancedContent = SEQ(name='enhancedContent', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    ___SMS_report_sMS_Contents_enhancedContent_content = OCT_STR(name='content', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___SMS_report_sMS_Contents_enhancedContent_character_encoding = ENUM(name='character-encoding', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___SMS_report_sMS_Contents_enhancedContent_character_encoding._cont = ASN1Dict([('gsm-7-bit-ascii', 0), ('eight-bit-ascii', 1), ('eight-bit-binary', 2), ('ucs-2', 3), ('utf-8', 4), ('utf-16', 5), ('other', 6)])
    ___SMS_report_sMS_Contents_enhancedContent_character_encoding._ext = []
    __SMS_report_sMS_Contents_enhancedContent._cont = ASN1Dict([
        ('content', ___SMS_report_sMS_Contents_enhancedContent_content),
        ('character-encoding', ___SMS_report_sMS_Contents_enhancedContent_character_encoding),
        ])
    __SMS_report_sMS_Contents_enhancedContent._ext = None
    _SMS_report_sMS_Contents._cont = ASN1Dict([
        ('initiator', __SMS_report_sMS_Contents_initiator),
        ('transfer-status', __SMS_report_sMS_Contents_transfer_status),
        ('other-message', __SMS_report_sMS_Contents_other_message),
        ('content', __SMS_report_sMS_Contents_content),
        ('enhancedContent', __SMS_report_sMS_Contents_enhancedContent),
        ])
    _SMS_report_sMS_Contents._ext = ['enhancedContent']
    SMS_report._cont = ASN1Dict([
        ('communicationIdentifier', _SMS_report_communicationIdentifier),
        ('timeStamp', _SMS_report_timeStamp),
        ('sMS-Contents', _SMS_report_sMS_Contents),
        ])
    SMS_report._ext = None
    
    #-----< LawfulInterceptionIdentifier >-----#
    LawfulInterceptionIdentifier = OCT_STR(name='LawfulInterceptionIdentifier', mode=MODE_TYPE)
    LawfulInterceptionIdentifier._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    
    #-----< National-Parameters >-----#
    National_Parameters = SET_OF(name='National-Parameters', mode=MODE_TYPE)
    _National_Parameters__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _National_Parameters__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    National_Parameters._cont = _National_Parameters__item_
    National_Parameters._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=40)], ev=None, er=[])
    
    #-----< GPRSCorrelationNumber >-----#
    GPRSCorrelationNumber = OCT_STR(name='GPRSCorrelationNumber', mode=MODE_TYPE)
    GPRSCorrelationNumber._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=8, ub=20)], ev=None, er=[])
    
    #-----< GPRSEvent >-----#
    GPRSEvent = ENUM(name='GPRSEvent', mode=MODE_TYPE)
    GPRSEvent._cont = ASN1Dict([('pDPContextActivation', 1), ('startOfInterceptionWithPDPContextActive', 2), ('pDPContextDeactivation', 4), ('gPRSAttach', 5), ('gPRSDetach', 6), ('cellOrRAUpdate', 10), ('sMS', 11), ('pDPContextModification', 13), ('endOfInterceptionWithPDPContextActive', 14)])
    GPRSEvent._ext = ['pDPContextModification', 'endOfInterceptionWithPDPContextActive']
    
    #-----< Services-Data-Information >-----#
    Services_Data_Information = SEQ(name='Services-Data-Information', mode=MODE_TYPE)
    _Services_Data_Information_gPRS_parameters = SEQ(name='gPRS-parameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'GPRS-parameters')), opt=True)
    Services_Data_Information._cont = ASN1Dict([
        ('gPRS-parameters', _Services_Data_Information_gPRS_parameters),
        ])
    Services_Data_Information._ext = []
    
    #-----< GPRS-parameters >-----#
    GPRS_parameters = SEQ(name='GPRS-parameters', mode=MODE_TYPE)
    _GPRS_parameters_pDP_address_allocated_to_the_target = CHOICE(name='pDP-address-allocated-to-the-target', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'DataNodeAddress')), opt=True)
    _GPRS_parameters_aPN = OCT_STR(name='aPN', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _GPRS_parameters_aPN._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=100)], ev=None, er=[])
    _GPRS_parameters_pDP_type = OCT_STR(name='pDP-type', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _GPRS_parameters_pDP_type._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _GPRS_parameters_nSAPI = OCT_STR(name='nSAPI', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _GPRS_parameters_nSAPI._const_sz = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    _GPRS_parameters_additionalIPaddress = CHOICE(name='additionalIPaddress', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'DataNodeAddress')), opt=True)
    GPRS_parameters._cont = ASN1Dict([
        ('pDP-address-allocated-to-the-target', _GPRS_parameters_pDP_address_allocated_to_the_target),
        ('aPN', _GPRS_parameters_aPN),
        ('pDP-type', _GPRS_parameters_pDP_type),
        ('nSAPI', _GPRS_parameters_nSAPI),
        ('additionalIPaddress', _GPRS_parameters_additionalIPaddress),
        ])
    GPRS_parameters._ext = ['nSAPI', 'additionalIPaddress']
    
    #-----< GPRSOperationErrorCode >-----#
    GPRSOperationErrorCode = OCT_STR(name='GPRSOperationErrorCode', mode=MODE_TYPE)
    GPRSOperationErrorCode._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    
    #-----< DataNodeAddress >-----#
    DataNodeAddress = CHOICE(name='DataNodeAddress', mode=MODE_TYPE)
    _DataNodeAddress_ipAddress = SEQ(name='ipAddress', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'IPAddress')))
    _DataNodeAddress_x25Address = OCT_STR(name='x25Address', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'X25Address')))
    DataNodeAddress._cont = ASN1Dict([
        ('ipAddress', _DataNodeAddress_ipAddress),
        ('x25Address', _DataNodeAddress_x25Address),
        ])
    DataNodeAddress._ext = []
    
    #-----< IPAddress >-----#
    IPAddress = SEQ(name='IPAddress', mode=MODE_TYPE)
    _IPAddress_iP_type = ENUM(name='iP-type', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _IPAddress_iP_type._cont = ASN1Dict([('iPV4', 0), ('iPV6', 1)])
    _IPAddress_iP_type._ext = []
    _IPAddress_iP_value = CHOICE(name='iP-value', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'IP-value')))
    _IPAddress_iP_assignment = ENUM(name='iP-assignment', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IPAddress_iP_assignment._cont = ASN1Dict([('static', 1), ('dynamic', 2), ('notKnown', 3)])
    _IPAddress_iP_assignment._ext = []
    _IPAddress_iPv6PrefixLength = INT(name='iPv6PrefixLength', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IPAddress_iPv6PrefixLength._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    _IPAddress_iPv4SubnetMask = OCT_STR(name='iPv4SubnetMask', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IPAddress_iPv4SubnetMask._const_sz = ASN1Set(rv=[4], rr=[], ev=None, er=[])
    IPAddress._cont = ASN1Dict([
        ('iP-type', _IPAddress_iP_type),
        ('iP-value', _IPAddress_iP_value),
        ('iP-assignment', _IPAddress_iP_assignment),
        ('iPv6PrefixLength', _IPAddress_iPv6PrefixLength),
        ('iPv4SubnetMask', _IPAddress_iPv4SubnetMask),
        ])
    IPAddress._ext = ['iPv6PrefixLength', 'iPv4SubnetMask']
    
    #-----< IP-value >-----#
    IP_value = CHOICE(name='IP-value', mode=MODE_TYPE)
    _IP_value_iPBinaryAddress = OCT_STR(name='iPBinaryAddress', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _IP_value_iPBinaryAddress._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=4, ub=16)], ev=None, er=[])
    _IP_value_iPTextAddress = STR_IA5(name='iPTextAddress', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _IP_value_iPTextAddress._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=7, ub=45)], ev=None, er=[])
    IP_value._cont = ASN1Dict([
        ('iPBinaryAddress', _IP_value_iPBinaryAddress),
        ('iPTextAddress', _IP_value_iPTextAddress),
        ])
    IP_value._ext = []
    
    #-----< X25Address >-----#
    X25Address = OCT_STR(name='X25Address', mode=MODE_TYPE)
    X25Address._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    
    #-----< National-HI2-ASN1parameters >-----#
    National_HI2_ASN1parameters = SEQ(name='National-HI2-ASN1parameters', mode=MODE_TYPE)
    _National_HI2_ASN1parameters_countryCode = STR_PRINT(name='countryCode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _National_HI2_ASN1parameters_countryCode._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    National_HI2_ASN1parameters._cont = ASN1Dict([
        ('countryCode', _National_HI2_ASN1parameters_countryCode),
        ])
    National_HI2_ASN1parameters._ext = []
    
    _all_ = [
        lawfulInterceptDomainId,
        hi2DomainId,
        hi2OperationId,
        sending_of_IRI,
        _sending_of_IRI_val_ArgumentType,
        _IRIsContent_iRIContent,
        _IRIsContent_iRISequence,
        IRIsContent,
        _IRISequence__item_,
        IRISequence,
        _IRIContent_iRI_Begin_record,
        _IRIContent_iRI_End_record,
        _IRIContent_iRI_Continue_record,
        _IRIContent_iRI_Report_record,
        IRIContent,
        unknown_version,
        missing_parameter,
        unknown_parameter_value,
        unknown_parameter,
        OperationErrors,
        _IRI_Parameters_domainID,
        _IRI_Parameters_iRIversion,
        _IRI_Parameters_lawfulInterceptionIdentifier,
        _IRI_Parameters_communicationIdentifier,
        _IRI_Parameters_timeStamp,
        _IRI_Parameters_intercepted_Call_Direct,
        _IRI_Parameters_intercepted_Call_State,
        _IRI_Parameters_ringingDuration,
        _IRI_Parameters_conversationDuration,
        _IRI_Parameters_locationOfTheTarget,
        __IRI_Parameters_partyInformation__item_,
        _IRI_Parameters_partyInformation,
        __IRI_Parameters_callContentLinkInformation_cCLink1Characteristics,
        __IRI_Parameters_callContentLinkInformation_cCLink2Characteristics,
        _IRI_Parameters_callContentLinkInformation,
        _IRI_Parameters_release_Reason_Of_Intercepted_Call,
        _IRI_Parameters_nature_Of_The_intercepted_call,
        _IRI_Parameters_serverCenterAddress,
        _IRI_Parameters_sMS,
        _IRI_Parameters_cC_Link_Identifier,
        _IRI_Parameters_national_Parameters,
        _IRI_Parameters_gPRSCorrelationNumber,
        _IRI_Parameters_gPRSevent,
        _IRI_Parameters_sgsnAddress,
        _IRI_Parameters_gPRSOperationErrorCode,
        _IRI_Parameters_ggsnAddress,
        _IRI_Parameters_qOS,
        _IRI_Parameters_networkIdentifier,
        _IRI_Parameters_sMSOriginatingAddress,
        _IRI_Parameters_sMSTerminatingAddress,
        _IRI_Parameters_iMSevent,
        _IRI_Parameters_sIPMessage,
        _IRI_Parameters_servingSGSN_number,
        _IRI_Parameters_servingSGSN_address,
        _IRI_Parameters_tARGETACTIVITYMONITOR,
        _IRI_Parameters_ldiEvent,
        _IRI_Parameters_correlation,
        _IRI_Parameters_tARGETACTIVITYMONITORind,
        _IRI_Parameters_tARGETCOMMSMONITORind,
        _IRI_Parameters_tTRAFFICind,
        _IRI_Parameters_cTTRAFFICind,
        _IRI_Parameters_servingSystem,
        _IRI_Parameters_national_HI2_ASN1parameters,
        IRI_Parameters,
        _CommunicationIdentifier_communication_Identity_Number,
        _CommunicationIdentifier_network_Identifier,
        CommunicationIdentifier,
        _Network_Identifier_operator_Identifier,
        _Network_Identifier_network_Element_Identifier,
        Network_Identifier,
        _Network_Element_Identifier_e164_Format,
        _Network_Element_Identifier_x25_Format,
        _Network_Element_Identifier_iP_Format,
        _Network_Element_Identifier_dNS_Format,
        _Network_Element_Identifier_iP_Address,
        Network_Element_Identifier,
        CC_Link_Identifier,
        _TimeStamp_localTime,
        _TimeStamp_utcTime,
        TimeStamp,
        _LocalTimeStamp_generalizedTime,
        _LocalTimeStamp_winterSummerIndication,
        LocalTimeStamp,
        _PartyInformation_party_Qualifier,
        __PartyInformation_partyIdentity_imei,
        __PartyInformation_partyIdentity_tei,
        __PartyInformation_partyIdentity_imsi,
        __PartyInformation_partyIdentity_callingPartyNumber,
        __PartyInformation_partyIdentity_calledPartyNumber,
        __PartyInformation_partyIdentity_msISDN,
        __PartyInformation_partyIdentity_e164_Format,
        __PartyInformation_partyIdentity_sip_uri,
        __PartyInformation_partyIdentity_tel_url,
        __PartyInformation_partyIdentity_party_Validity,
        __PartyInformation_partyIdentity_alphanumeric,
        _PartyInformation_partyIdentity,
        _PartyInformation_services_Information,
        _PartyInformation_supplementary_Services_Information,
        _PartyInformation_services_Data_Information,
        PartyInformation,
        _CallingPartyNumber_iSUP_Format,
        _CallingPartyNumber_dSS1_Format,
        _CallingPartyNumber_mAP_Format,
        CallingPartyNumber,
        _CalledPartyNumber_iSUP_Format,
        _CalledPartyNumber_mAP_Format,
        _CalledPartyNumber_dSS1_Format,
        CalledPartyNumber,
        _Location_e164_Number,
        _Location_globalCellID,
        _Location_tetraLocation,
        _Location_rAI,
        _Location_gsmLocation,
        _Location_umtsLocation,
        _Location_sAI,
        _Location_oldRAI,
        _Location_tAI,
        _Location_eCGI,
        Location,
        __TetraLocation_ms_Loc_mcc,
        __TetraLocation_ms_Loc_mnc,
        __TetraLocation_ms_Loc_lai,
        __TetraLocation_ms_Loc_ci,
        _TetraLocation_ms_Loc,
        _TetraLocation_ls_Loc,
        TetraLocation,
        __GSMLocation_geoCoordinates_latitude,
        __GSMLocation_geoCoordinates_longitude,
        __GSMLocation_geoCoordinates_mapDatum,
        __GSMLocation_geoCoordinates_azimuth,
        _GSMLocation_geoCoordinates,
        __GSMLocation_utmCoordinates_utm_East,
        __GSMLocation_utmCoordinates_utm_North,
        __GSMLocation_utmCoordinates_mapDatum,
        __GSMLocation_utmCoordinates_azimuth,
        _GSMLocation_utmCoordinates,
        __GSMLocation_utmRefCoordinates_utmref_string,
        __GSMLocation_utmRefCoordinates_mapDatum,
        _GSMLocation_utmRefCoordinates,
        _GSMLocation_wGS84Coordinates,
        GSMLocation,
        MapDatum,
        _UMTSLocation_point,
        _UMTSLocation_pointWithUnCertainty,
        _UMTSLocation_polygon,
        UMTSLocation,
        _GeographicalCoordinates_latitudeSign,
        _GeographicalCoordinates_latitude,
        _GeographicalCoordinates_longitude,
        GeographicalCoordinates,
        _GA_Point_geographicalCoordinates,
        GA_Point,
        _GA_PointWithUnCertainty_geographicalCoordinates,
        _GA_PointWithUnCertainty_uncertaintyCode,
        GA_PointWithUnCertainty,
        maxNrOfPoints,
        __GA_Polygon__item__geographicalCoordinates,
        _GA_Polygon__item_,
        GA_Polygon,
        _CallContentLinkCharacteristics_cCLink_State,
        _CallContentLinkCharacteristics_release_Time,
        _CallContentLinkCharacteristics_release_Reason,
        _CallContentLinkCharacteristics_lEMF_Address,
        CallContentLinkCharacteristics,
        CCLink_State,
        Intercepted_Call_State,
        _Services_Information_iSUP_parameters,
        _Services_Information_dSS1_parameters_codeset_0,
        _Services_Information_mAP_parameters,
        Services_Information,
        _ISUP_parameters__item_,
        ISUP_parameters,
        _DSS1_parameters_codeset_0__item_,
        DSS1_parameters_codeset_0,
        _MAP_parameters__item_,
        MAP_parameters,
        _Supplementary_Services_standard_Supplementary_Services,
        _Supplementary_Services_non_Standard_Supplementary_Services,
        _Supplementary_Services_other_Services,
        Supplementary_Services,
        _Standard_Supplementary_Services_iSUP_SS_parameters,
        _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_0,
        _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_4,
        _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_5,
        _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_6,
        _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_7,
        _Standard_Supplementary_Services_dSS1_SS_Invoke_components,
        _Standard_Supplementary_Services_mAP_SS_Parameters,
        _Standard_Supplementary_Services_mAP_SS_Invoke_Components,
        Standard_Supplementary_Services,
        __Non_Standard_Supplementary_Services__item__simpleIndication,
        __Non_Standard_Supplementary_Services__item__sciData,
        _Non_Standard_Supplementary_Services__item_,
        Non_Standard_Supplementary_Services,
        _Other_Services__item_,
        Other_Services,
        _ISUP_SS_parameters__item_,
        ISUP_SS_parameters,
        _DSS1_SS_parameters_codeset_0__item_,
        DSS1_SS_parameters_codeset_0,
        _DSS1_SS_parameters_codeset_4__item_,
        DSS1_SS_parameters_codeset_4,
        _DSS1_SS_parameters_codeset_5__item_,
        DSS1_SS_parameters_codeset_5,
        _DSS1_SS_parameters_codeset_6__item_,
        DSS1_SS_parameters_codeset_6,
        _DSS1_SS_parameters_codeset_7__item_,
        DSS1_SS_parameters_codeset_7,
        _DSS1_SS_Invoke_Components__item_,
        DSS1_SS_Invoke_Components,
        _MAP_SS_Invoke_Components__item_,
        MAP_SS_Invoke_Components,
        _MAP_SS_Parameters__item_,
        MAP_SS_Parameters,
        SimpleIndication,
        SciDataMode,
        _SMS_report_communicationIdentifier,
        _SMS_report_timeStamp,
        __SMS_report_sMS_Contents_initiator,
        __SMS_report_sMS_Contents_transfer_status,
        __SMS_report_sMS_Contents_other_message,
        __SMS_report_sMS_Contents_content,
        ___SMS_report_sMS_Contents_enhancedContent_content,
        ___SMS_report_sMS_Contents_enhancedContent_character_encoding,
        __SMS_report_sMS_Contents_enhancedContent,
        _SMS_report_sMS_Contents,
        SMS_report,
        LawfulInterceptionIdentifier,
        _National_Parameters__item_,
        National_Parameters,
        GPRSCorrelationNumber,
        GPRSEvent,
        _Services_Data_Information_gPRS_parameters,
        Services_Data_Information,
        _GPRS_parameters_pDP_address_allocated_to_the_target,
        _GPRS_parameters_aPN,
        _GPRS_parameters_pDP_type,
        _GPRS_parameters_nSAPI,
        _GPRS_parameters_additionalIPaddress,
        GPRS_parameters,
        GPRSOperationErrorCode,
        _DataNodeAddress_ipAddress,
        _DataNodeAddress_x25Address,
        DataNodeAddress,
        _IPAddress_iP_type,
        _IPAddress_iP_value,
        _IPAddress_iP_assignment,
        _IPAddress_iPv6PrefixLength,
        _IPAddress_iPv4SubnetMask,
        IPAddress,
        _IP_value_iPBinaryAddress,
        _IP_value_iPTextAddress,
        IP_value,
        X25Address,
        _National_HI2_ASN1parameters_countryCode,
        National_HI2_ASN1parameters,
    ]

class HI3CCLinkData:

    _name_  = 'HI3CCLinkData'
    _oid_   = [0, 4, 0, 2, 2, 2, 4, 4]
    
    _obj_ = [
        'lawfulInterceptDomainId',
        'hi3CCLinkId',
        'hi3CCLinkIdOperationId',
        'UUS1-Content',
        'Direction-Indication',
        'Service-Information',
        ]
    _type_ = [
        'UUS1-Content',
        'Direction-Indication',
        'Service-Information',
        ]
    _set_ = [
        ]
    _val_ = [
        'lawfulInterceptDomainId',
        'hi3CCLinkId',
        'hi3CCLinkIdOperationId',
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< lawfulInterceptDomainId >-----#
    lawfulInterceptDomainId = OID(name='lawfulInterceptDomainId', mode=MODE_VALUE)
    lawfulInterceptDomainId._val = (0, 4, 0, 2, 2)
    
    #-----< hi3CCLinkId >-----#
    hi3CCLinkId = OID(name='hi3CCLinkId', mode=MODE_VALUE)
    hi3CCLinkId._val = (0, 4, 0, 2, 2, 2, 4)
    
    #-----< hi3CCLinkIdOperationId >-----#
    hi3CCLinkIdOperationId = OID(name='hi3CCLinkIdOperationId', mode=MODE_VALUE)
    hi3CCLinkIdOperationId._val = (0, 4, 0, 2, 2, 2, 4, 4)
    
    #-----< UUS1-Content >-----#
    UUS1_Content = SEQ(name='UUS1-Content', mode=MODE_TYPE)
    _UUS1_Content_domainID = OID(name='domainID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _UUS1_Content_domainID._const_val = ASN1Set(rv=[(0, 4, 0, 2, 2, 2, 4, 4)], rr=[], ev=None, er=[])
    _UUS1_Content_lawfullInterceptionIdentifier = OCT_STR(name='lawfullInterceptionIdentifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'LawfulInterceptionIdentifier')))
    _UUS1_Content_communicationIdentifier = SEQ(name='communicationIdentifier', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'CommunicationIdentifier')))
    _UUS1_Content_cC_Link_Identifier = OCT_STR(name='cC-Link-Identifier', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'CC-Link-Identifier')), opt=True)
    _UUS1_Content_direction_Indication = ENUM(name='direction-Indication', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI3CCLinkData', 'Direction-Indication')))
    _UUS1_Content_bearer_capability = OCT_STR(name='bearer-capability', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _UUS1_Content_bearer_capability._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=12)], ev=None, er=[])
    _UUS1_Content_service_Information = SET(name='service-Information', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI3CCLinkData', 'Service-Information')), opt=True)
    UUS1_Content._cont = ASN1Dict([
        ('domainID', _UUS1_Content_domainID),
        ('lawfullInterceptionIdentifier', _UUS1_Content_lawfullInterceptionIdentifier),
        ('communicationIdentifier', _UUS1_Content_communicationIdentifier),
        ('cC-Link-Identifier', _UUS1_Content_cC_Link_Identifier),
        ('direction-Indication', _UUS1_Content_direction_Indication),
        ('bearer-capability', _UUS1_Content_bearer_capability),
        ('service-Information', _UUS1_Content_service_Information),
        ])
    UUS1_Content._ext = []
    
    #-----< Direction-Indication >-----#
    Direction_Indication = ENUM(name='Direction-Indication', mode=MODE_TYPE)
    Direction_Indication._cont = ASN1Dict([('mono-mode', 0), ('cc-from-target', 1), ('cc-from-other-party', 2), ('direction-unknown', 3)])
    Direction_Indication._ext = ['direction-unknown']
    
    #-----< Service-Information >-----#
    Service_Information = SET(name='Service-Information', mode=MODE_TYPE)
    _Service_Information_high_layer_capability = OCT_STR(name='high-layer-capability', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Service_Information_high_layer_capability._const_sz = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    _Service_Information_tMR = OCT_STR(name='tMR', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Service_Information_tMR._const_sz = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    _Service_Information_bearerServiceCode = OCT_STR(name='bearerServiceCode', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Service_Information_bearerServiceCode._const_sz = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    _Service_Information_teleServiceCode = OCT_STR(name='teleServiceCode', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Service_Information_teleServiceCode._const_sz = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    Service_Information._cont = ASN1Dict([
        ('high-layer-capability', _Service_Information_high_layer_capability),
        ('tMR', _Service_Information_tMR),
        ('bearerServiceCode', _Service_Information_bearerServiceCode),
        ('teleServiceCode', _Service_Information_teleServiceCode),
        ])
    Service_Information._ext = None
    
    _all_ = [
        lawfulInterceptDomainId,
        hi3CCLinkId,
        hi3CCLinkIdOperationId,
        _UUS1_Content_domainID,
        _UUS1_Content_lawfullInterceptionIdentifier,
        _UUS1_Content_communicationIdentifier,
        _UUS1_Content_cC_Link_Identifier,
        _UUS1_Content_direction_Indication,
        _UUS1_Content_bearer_capability,
        _UUS1_Content_service_Information,
        UUS1_Content,
        Direction_Indication,
        _Service_Information_high_layer_capability,
        _Service_Information_tMR,
        _Service_Information_bearerServiceCode,
        _Service_Information_teleServiceCode,
        Service_Information,
    ]

class HI3CircuitDataOperations:

    _name_  = 'HI3CircuitDataOperations'
    _oid_   = [0, 4, 0, 2, 2, 2, 1, 4]
    
    _obj_ = [
        'lawfulInterceptDomainId',
        'hi3CircuitLIId',
        'hi3CircuitLIOperationId',
        'circuit-Call-related-Services',
        'no-Circuit-Call-related-Services',
        'Content-Report',
        ]
    _type_ = [
        'Content-Report',
        ]
    _set_ = [
        ]
    _val_ = [
        'lawfulInterceptDomainId',
        'hi3CircuitLIId',
        'hi3CircuitLIOperationId',
        'circuit-Call-related-Services',
        'no-Circuit-Call-related-Services',
        ]
    _class_ = [
        'circuit-Call-related-Services',
        'no-Circuit-Call-related-Services',
        ]
    _param_ = [
        ]
    
    #-----< lawfulInterceptDomainId >-----#
    lawfulInterceptDomainId = OID(name='lawfulInterceptDomainId', mode=MODE_VALUE)
    lawfulInterceptDomainId._val = (0, 4, 0, 2, 2)
    
    #-----< hi3CircuitLIId >-----#
    hi3CircuitLIId = OID(name='hi3CircuitLIId', mode=MODE_VALUE)
    hi3CircuitLIId._val = (0, 4, 0, 2, 2, 2, 1)
    
    #-----< hi3CircuitLIOperationId >-----#
    hi3CircuitLIOperationId = OID(name='hi3CircuitLIOperationId', mode=MODE_VALUE)
    hi3CircuitLIOperationId._val = (0, 4, 0, 2, 2, 2, 1, 3)
    
    #-----< circuit-Call-related-Services >-----#
    circuit_Call_related_Services = CLASS(name='circuit-Call-related-Services', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')))
    _circuit_Call_related_Services_val_ArgumentType = SEQ(name='ArgumentType', mode=MODE_TYPE, typeref=ASN1RefType(('HI3CircuitDataOperations', 'Content-Report')))
    circuit_Call_related_Services._val = dict([('ArgumentType', _circuit_Call_related_Services_val_ArgumentType), ('Errors', ASN1Set(rv=[dict([('errorCode', ('local', 0))]), dict([('errorCode', ('local', 1))]), dict([('errorCode', ('local', 2))]), dict([('errorCode', ('local', 3))])], rr=[], ev=None, er=[])), ('operationCode', ('global', (0, 4, 0, 2, 2, 2, 1, 1, 1)))])
    
    #-----< no-Circuit-Call-related-Services >-----#
    no_Circuit_Call_related_Services = CLASS(name='no-Circuit-Call-related-Services', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')))
    _no_Circuit_Call_related_Services_val_ArgumentType = SEQ(name='ArgumentType', mode=MODE_TYPE, typeref=ASN1RefType(('HI3CircuitDataOperations', 'Content-Report')))
    no_Circuit_Call_related_Services._val = dict([('ArgumentType', _no_Circuit_Call_related_Services_val_ArgumentType), ('Errors', ASN1Set(rv=[dict([('errorCode', ('local', 0))]), dict([('errorCode', ('local', 1))]), dict([('errorCode', ('local', 2))]), dict([('errorCode', ('local', 3))])], rr=[], ev=None, er=[])), ('operationCode', ('global', (0, 4, 0, 2, 2, 2, 1, 2, 1)))])
    
    #-----< Content-Report >-----#
    Content_Report = SEQ(name='Content-Report', mode=MODE_TYPE)
    _Content_Report_domainID = OID(name='domainID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Content_Report_domainID._const_val = ASN1Set(rv=[(0, 4, 0, 2, 2, 2, 1, 3)], rr=[], ev=None, er=[])
    _Content_Report_lawfulInterceptionIdentifier = OCT_STR(name='lawfulInterceptionIdentifier', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'LawfulInterceptionIdentifier')), opt=True)
    _Content_Report_communicationIdentifier = SEQ(name='communicationIdentifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'CommunicationIdentifier')))
    _Content_Report_timeStamp = CHOICE(name='timeStamp', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'TimeStamp')))
    _Content_Report_initiator = ENUM(name='initiator', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Content_Report_initiator._cont = ASN1Dict([('originating-party', 0), ('terminating-party', 1), ('forwarded-to-party', 2), ('undefined-party', 3)])
    _Content_Report_initiator._ext = []
    _Content_Report_content = SEQ(name='content', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'Supplementary-Services')), opt=True)
    _Content_Report_sMS_report = SEQ(name='sMS-report', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'SMS-report')), opt=True)
    Content_Report._cont = ASN1Dict([
        ('domainID', _Content_Report_domainID),
        ('lawfulInterceptionIdentifier', _Content_Report_lawfulInterceptionIdentifier),
        ('communicationIdentifier', _Content_Report_communicationIdentifier),
        ('timeStamp', _Content_Report_timeStamp),
        ('initiator', _Content_Report_initiator),
        ('content', _Content_Report_content),
        ('sMS-report', _Content_Report_sMS_report),
        ])
    Content_Report._ext = []
    
    _all_ = [
        lawfulInterceptDomainId,
        hi3CircuitLIId,
        hi3CircuitLIOperationId,
        circuit_Call_related_Services,
        _circuit_Call_related_Services_val_ArgumentType,
        no_Circuit_Call_related_Services,
        _no_Circuit_Call_related_Services_val_ArgumentType,
        _Content_Report_domainID,
        _Content_Report_lawfulInterceptionIdentifier,
        _Content_Report_communicationIdentifier,
        _Content_Report_timeStamp,
        _Content_Report_initiator,
        _Content_Report_content,
        _Content_Report_sMS_report,
        Content_Report,
    ]

class HIManagementOperations:

    _name_  = 'HIManagementOperations'
    _oid_   = [0, 4, 0, 2, 2, 3, 3]
    
    _obj_ = [
        'lawfulInterceptDomainId',
        'himDomainId',
        'himOperationId',
        'sending-of-Password',
        'data-Link-Test',
        'end-Of-Connection',
        'other-failure-causes',
        'missing-parameter',
        'unknown-parameter',
        'erroneous-parameter',
        'ErrorsHim',
        'Password-Name',
        ]
    _type_ = [
        'Password-Name',
        ]
    _set_ = [
        'ErrorsHim',
        ]
    _val_ = [
        'lawfulInterceptDomainId',
        'himDomainId',
        'himOperationId',
        'sending-of-Password',
        'data-Link-Test',
        'end-Of-Connection',
        'other-failure-causes',
        'missing-parameter',
        'unknown-parameter',
        'erroneous-parameter',
        ]
    _class_ = [
        'sending-of-Password',
        'data-Link-Test',
        'end-Of-Connection',
        'other-failure-causes',
        'missing-parameter',
        'unknown-parameter',
        'erroneous-parameter',
        'ErrorsHim',
        ]
    _param_ = [
        ]
    
    #-----< lawfulInterceptDomainId >-----#
    lawfulInterceptDomainId = OID(name='lawfulInterceptDomainId', mode=MODE_VALUE)
    lawfulInterceptDomainId._val = (0, 4, 0, 2, 2)
    
    #-----< himDomainId >-----#
    himDomainId = OID(name='himDomainId', mode=MODE_VALUE)
    himDomainId._val = (0, 4, 0, 2, 2, 3)
    
    #-----< himOperationId >-----#
    himOperationId = OID(name='himOperationId', mode=MODE_VALUE)
    himOperationId._val = (0, 4, 0, 2, 2, 3, 3)
    
    #-----< sending-of-Password >-----#
    sending_of_Password = CLASS(name='sending-of-Password', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')))
    _sending_of_Password_val_ArgumentType = SEQ(name='ArgumentType', mode=MODE_TYPE, typeref=ASN1RefType(('HIManagementOperations', 'Password-Name')))
    sending_of_Password._val = dict([('ArgumentType', _sending_of_Password_val_ArgumentType), ('Errors', ASN1Set(rv=[dict([('errorCode', ('local', 0))]), dict([('errorCode', ('local', 1))]), dict([('errorCode', ('local', 2))]), dict([('errorCode', ('local', 3))])], rr=[], ev=None, er=[])), ('operationCode', ('global', (0, 4, 0, 2, 2, 3, 1, 1)))])
    
    #-----< data-Link-Test >-----#
    data_Link_Test = CLASS(name='data-Link-Test', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')))
    data_Link_Test._val = dict([('Errors', ASN1Set(rv=[dict([('errorCode', ('local', 0))])], rr=[], ev=None, er=[])), ('operationCode', ('global', (0, 4, 0, 2, 2, 3, 2, 1)))])
    
    #-----< end-Of-Connection >-----#
    end_Of_Connection = CLASS(name='end-Of-Connection', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')))
    end_Of_Connection._val = dict([('Errors', ASN1Set(rv=[dict([('errorCode', ('local', 0))])], rr=[], ev=None, er=[])), ('operationCode', ('global', (0, 4, 0, 2, 2, 3, 3, 1)))])
    
    #-----< other-failure-causes >-----#
    other_failure_causes = CLASS(name='other-failure-causes', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    other_failure_causes._val = dict([('errorCode', ('local', 0))])
    
    #-----< missing-parameter >-----#
    missing_parameter = CLASS(name='missing-parameter', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    missing_parameter._val = dict([('errorCode', ('local', 1))])
    
    #-----< unknown-parameter >-----#
    unknown_parameter = CLASS(name='unknown-parameter', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    unknown_parameter._val = dict([('errorCode', ('local', 2))])
    
    #-----< erroneous-parameter >-----#
    erroneous_parameter = CLASS(name='erroneous-parameter', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    erroneous_parameter._val = dict([('errorCode', ('local', 3))])
    
    #-----< ErrorsHim >-----#
    ErrorsHim = CLASS(name='ErrorsHim', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    ErrorsHim._val = ASN1Set(rv=[dict([('errorCode', ('local', 0))]), dict([('errorCode', ('local', 1))]), dict([('errorCode', ('local', 2))]), dict([('errorCode', ('local', 3))])], rr=[], ev=None, er=[])
    
    #-----< Password-Name >-----#
    Password_Name = SEQ(name='Password-Name', mode=MODE_TYPE)
    _Password_Name_domainID = OID(name='domainID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Password_Name_domainID._const_val = ASN1Set(rv=[(0, 4, 0, 2, 2, 3, 3)], rr=[], ev=None, er=[])
    _Password_Name_password = OCT_STR(name='password', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Password_Name_password._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    _Password_Name_name = OCT_STR(name='name', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Password_Name_name._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    Password_Name._cont = ASN1Dict([
        ('domainID', _Password_Name_domainID),
        ('password', _Password_Name_password),
        ('name', _Password_Name_name),
        ])
    Password_Name._ext = []
    
    _all_ = [
        lawfulInterceptDomainId,
        himDomainId,
        himOperationId,
        sending_of_Password,
        _sending_of_Password_val_ArgumentType,
        data_Link_Test,
        end_Of_Connection,
        other_failure_causes,
        missing_parameter,
        unknown_parameter,
        erroneous_parameter,
        ErrorsHim,
        _Password_Name_domainID,
        _Password_Name_password,
        _Password_Name_name,
        Password_Name,
    ]

class Remote_Operations_Information_Objects:

    _name_  = 'Remote-Operations-Information-Objects'
    _oid_   = [2, 4, 5, 0]
    
    _obj_ = [
        'OPERATION',
        'ERROR',
        'OPERATION-PACKAGE',
        'CONNECTION-PACKAGE',
        'CONTRACT',
        'ROS-OBJECT-CLASS',
        'Code',
        'Priority',
        'refuse',
        'emptyBind',
        'emptyUnbind',
        ]
    _type_ = [
        'OPERATION',
        'ERROR',
        'OPERATION-PACKAGE',
        'CONNECTION-PACKAGE',
        'CONTRACT',
        'ROS-OBJECT-CLASS',
        'Code',
        'Priority',
        ]
    _set_ = [
        ]
    _val_ = [
        'refuse',
        'emptyBind',
        'emptyUnbind',
        ]
    _class_ = [
        'OPERATION',
        'ERROR',
        'OPERATION-PACKAGE',
        'CONNECTION-PACKAGE',
        'CONTRACT',
        'ROS-OBJECT-CLASS',
        'refuse',
        'emptyBind',
        'emptyUnbind',
        ]
    _param_ = [
        ]
    
    #-----< OPERATION >-----#
    OPERATION = CLASS(name='OPERATION', mode=MODE_TYPE)
    _OPERATION_ArgumentType = OPEN(name='ArgumentType', mode=MODE_TYPE, opt=True)
    _OPERATION_argumentTypeOptional = BOOL(name='argumentTypeOptional', mode=MODE_VALUE, opt=True)
    _OPERATION_returnResult = BOOL(name='returnResult', mode=MODE_VALUE, default=True)
    _OPERATION_ResultType = OPEN(name='ResultType', mode=MODE_TYPE, opt=True)
    _OPERATION_resultTypeOptional = BOOL(name='resultTypeOptional', mode=MODE_VALUE, opt=True)
    _OPERATION_Errors = CLASS(name='Errors', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')), opt=True)
    _OPERATION_Linked = CLASS(name='Linked', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')), opt=True)
    _OPERATION_synchronous = BOOL(name='synchronous', mode=MODE_VALUE, default=False)
    _OPERATION_alwaysReturns = BOOL(name='alwaysReturns', mode=MODE_VALUE, default=True)
    _OPERATION_InvokePriority = INT(name='InvokePriority', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'Priority')), opt=True)
    _OPERATION_ResultPriority = INT(name='ResultPriority', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'Priority')), opt=True)
    _OPERATION_operationCode = CHOICE(name='operationCode', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'Code')), opt=True, uniq=True)
    OPERATION._cont = ASN1Dict([
        ('ArgumentType', _OPERATION_ArgumentType),
        ('argumentTypeOptional', _OPERATION_argumentTypeOptional),
        ('returnResult', _OPERATION_returnResult),
        ('ResultType', _OPERATION_ResultType),
        ('resultTypeOptional', _OPERATION_resultTypeOptional),
        ('Errors', _OPERATION_Errors),
        ('Linked', _OPERATION_Linked),
        ('synchronous', _OPERATION_synchronous),
        ('alwaysReturns', _OPERATION_alwaysReturns),
        ('InvokePriority', _OPERATION_InvokePriority),
        ('ResultPriority', _OPERATION_ResultPriority),
        ('operationCode', _OPERATION_operationCode),
        ])
    
    #-----< ERROR >-----#
    ERROR = CLASS(name='ERROR', mode=MODE_TYPE)
    _ERROR_ParameterType = OPEN(name='ParameterType', mode=MODE_TYPE, opt=True)
    _ERROR_parameterTypeOptional = BOOL(name='parameterTypeOptional', mode=MODE_VALUE, opt=True)
    _ERROR_ErrorPriority = INT(name='ErrorPriority', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'Priority')), opt=True)
    _ERROR_errorCode = CHOICE(name='errorCode', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'Code')), opt=True, uniq=True)
    ERROR._cont = ASN1Dict([
        ('ParameterType', _ERROR_ParameterType),
        ('parameterTypeOptional', _ERROR_parameterTypeOptional),
        ('ErrorPriority', _ERROR_ErrorPriority),
        ('errorCode', _ERROR_errorCode),
        ])
    
    #-----< OPERATION-PACKAGE >-----#
    OPERATION_PACKAGE = CLASS(name='OPERATION-PACKAGE', mode=MODE_TYPE)
    _OPERATION_PACKAGE_Both = CLASS(name='Both', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')), opt=True)
    _OPERATION_PACKAGE_Consumer = CLASS(name='Consumer', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')), opt=True)
    _OPERATION_PACKAGE_Supplier = CLASS(name='Supplier', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')), opt=True)
    _OPERATION_PACKAGE_id = OID(name='id', mode=MODE_VALUE, opt=True, uniq=True)
    OPERATION_PACKAGE._cont = ASN1Dict([
        ('Both', _OPERATION_PACKAGE_Both),
        ('Consumer', _OPERATION_PACKAGE_Consumer),
        ('Supplier', _OPERATION_PACKAGE_Supplier),
        ('id', _OPERATION_PACKAGE_id),
        ])
    
    #-----< CONNECTION-PACKAGE >-----#
    CONNECTION_PACKAGE = CLASS(name='CONNECTION-PACKAGE', mode=MODE_TYPE)
    _CONNECTION_PACKAGE_bind = CLASS(name='bind', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')), default=dict([('Errors', ASN1Set(rv=[dict([('errorCode', ('local', -1))])], rr=[], ev=None, er=[])), ('synchronous', True)]))
    _CONNECTION_PACKAGE_unbind = CLASS(name='unbind', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')), default=dict([('synchronous', True)]))
    _CONNECTION_PACKAGE_responderCanUnbind = BOOL(name='responderCanUnbind', mode=MODE_VALUE, default=False)
    _CONNECTION_PACKAGE_unbindCanFail = BOOL(name='unbindCanFail', mode=MODE_VALUE, default=False)
    _CONNECTION_PACKAGE_id = OID(name='id', mode=MODE_VALUE, opt=True, uniq=True)
    CONNECTION_PACKAGE._cont = ASN1Dict([
        ('bind', _CONNECTION_PACKAGE_bind),
        ('unbind', _CONNECTION_PACKAGE_unbind),
        ('responderCanUnbind', _CONNECTION_PACKAGE_responderCanUnbind),
        ('unbindCanFail', _CONNECTION_PACKAGE_unbindCanFail),
        ('id', _CONNECTION_PACKAGE_id),
        ])
    
    #-----< CONTRACT >-----#
    CONTRACT = CLASS(name='CONTRACT', mode=MODE_TYPE)
    _CONTRACT_connection = CLASS(name='connection', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'CONNECTION-PACKAGE')), opt=True)
    _CONTRACT_OperationsOf = CLASS(name='OperationsOf', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION-PACKAGE')), opt=True)
    _CONTRACT_InitiatorConsumerOf = CLASS(name='InitiatorConsumerOf', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION-PACKAGE')), opt=True)
    _CONTRACT_InitiatorSupplierOf = CLASS(name='InitiatorSupplierOf', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION-PACKAGE')), opt=True)
    _CONTRACT_id = OID(name='id', mode=MODE_VALUE, opt=True, uniq=True)
    CONTRACT._cont = ASN1Dict([
        ('connection', _CONTRACT_connection),
        ('OperationsOf', _CONTRACT_OperationsOf),
        ('InitiatorConsumerOf', _CONTRACT_InitiatorConsumerOf),
        ('InitiatorSupplierOf', _CONTRACT_InitiatorSupplierOf),
        ('id', _CONTRACT_id),
        ])
    
    #-----< ROS-OBJECT-CLASS >-----#
    ROS_OBJECT_CLASS = CLASS(name='ROS-OBJECT-CLASS', mode=MODE_TYPE)
    _ROS_OBJECT_CLASS_Is = CLASS(name='Is', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ROS-OBJECT-CLASS')), opt=True)
    _ROS_OBJECT_CLASS_Initiates = CLASS(name='Initiates', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'CONTRACT')), opt=True)
    _ROS_OBJECT_CLASS_Responds = CLASS(name='Responds', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'CONTRACT')), opt=True)
    _ROS_OBJECT_CLASS_InitiatesAndResponds = CLASS(name='InitiatesAndResponds', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'CONTRACT')), opt=True)
    _ROS_OBJECT_CLASS_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    ROS_OBJECT_CLASS._cont = ASN1Dict([
        ('Is', _ROS_OBJECT_CLASS_Is),
        ('Initiates', _ROS_OBJECT_CLASS_Initiates),
        ('Responds', _ROS_OBJECT_CLASS_Responds),
        ('InitiatesAndResponds', _ROS_OBJECT_CLASS_InitiatesAndResponds),
        ('id', _ROS_OBJECT_CLASS_id),
        ])
    
    #-----< Code >-----#
    Code = CHOICE(name='Code', mode=MODE_TYPE)
    _Code_local = INT(name='local', mode=MODE_TYPE)
    _Code_global_ = OID(name='global', mode=MODE_TYPE)
    Code._cont = ASN1Dict([
        ('local', _Code_local),
        ('global', _Code_global_),
        ])
    Code._ext = None
    
    #-----< Priority >-----#
    Priority = INT(name='Priority', mode=MODE_TYPE)
    Priority._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    
    #-----< refuse >-----#
    refuse = CLASS(name='refuse', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    refuse._val = dict([('errorCode', ('local', -1))])
    
    #-----< emptyBind >-----#
    emptyBind = CLASS(name='emptyBind', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')))
    emptyBind._val = dict([('Errors', ASN1Set(rv=[dict([('errorCode', ('local', -1))])], rr=[], ev=None, er=[])), ('synchronous', True)])
    
    #-----< emptyUnbind >-----#
    emptyUnbind = CLASS(name='emptyUnbind', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')))
    emptyUnbind._val = dict([('synchronous', True)])
    
    _all_ = [
        _OPERATION_ArgumentType,
        _OPERATION_argumentTypeOptional,
        _OPERATION_returnResult,
        _OPERATION_ResultType,
        _OPERATION_resultTypeOptional,
        _OPERATION_Errors,
        _OPERATION_Linked,
        _OPERATION_synchronous,
        _OPERATION_alwaysReturns,
        _OPERATION_InvokePriority,
        _OPERATION_ResultPriority,
        _OPERATION_operationCode,
        OPERATION,
        _ERROR_ParameterType,
        _ERROR_parameterTypeOptional,
        _ERROR_ErrorPriority,
        _ERROR_errorCode,
        ERROR,
        _OPERATION_PACKAGE_Both,
        _OPERATION_PACKAGE_Consumer,
        _OPERATION_PACKAGE_Supplier,
        _OPERATION_PACKAGE_id,
        OPERATION_PACKAGE,
        _CONNECTION_PACKAGE_bind,
        _CONNECTION_PACKAGE_unbind,
        _CONNECTION_PACKAGE_responderCanUnbind,
        _CONNECTION_PACKAGE_unbindCanFail,
        _CONNECTION_PACKAGE_id,
        CONNECTION_PACKAGE,
        _CONTRACT_connection,
        _CONTRACT_OperationsOf,
        _CONTRACT_InitiatorConsumerOf,
        _CONTRACT_InitiatorSupplierOf,
        _CONTRACT_id,
        CONTRACT,
        _ROS_OBJECT_CLASS_Is,
        _ROS_OBJECT_CLASS_Initiates,
        _ROS_OBJECT_CLASS_Responds,
        _ROS_OBJECT_CLASS_InitiatesAndResponds,
        _ROS_OBJECT_CLASS_id,
        ROS_OBJECT_CLASS,
        _Code_local,
        _Code_global_,
        Code,
        Priority,
        refuse,
        emptyBind,
        emptyUnbind,
    ]

class TETRA_HI1NotificationOperations:

    _name_  = 'TETRA-HI1NotificationOperations'
    _oid_   = [0, 4, 0, 2, 2, 6, 1, 1, 0]
    
    _obj_ = [
        'lawfulInterceptDomainId',
        'tETRADomainId',
        'hi1OperationId',
        'sending-of-HI1-Notification',
        'other-failure-causes',
        'missing-parameter',
        'unknown-parameter',
        'erroneous-parameter',
        'ErrorHI1Notifications',
        'HI1-Operation',
        'Notification',
        'Alarm-Indicator',
        'National-HI1-ASN1parameters',
        ]
    _type_ = [
        'HI1-Operation',
        'Notification',
        'Alarm-Indicator',
        'National-HI1-ASN1parameters',
        ]
    _set_ = [
        'ErrorHI1Notifications',
        ]
    _val_ = [
        'lawfulInterceptDomainId',
        'tETRADomainId',
        'hi1OperationId',
        'sending-of-HI1-Notification',
        'other-failure-causes',
        'missing-parameter',
        'unknown-parameter',
        'erroneous-parameter',
        ]
    _class_ = [
        'sending-of-HI1-Notification',
        'other-failure-causes',
        'missing-parameter',
        'unknown-parameter',
        'erroneous-parameter',
        'ErrorHI1Notifications',
        ]
    _param_ = [
        ]
    
    #-----< lawfulInterceptDomainId >-----#
    lawfulInterceptDomainId = OID(name='lawfulInterceptDomainId', mode=MODE_VALUE)
    lawfulInterceptDomainId._val = (0, 4, 0, 2, 2)
    
    #-----< tETRADomainId >-----#
    tETRADomainId = OID(name='tETRADomainId', mode=MODE_VALUE)
    tETRADomainId._val = (0, 4, 0, 2, 2, 6)
    
    #-----< hi1OperationId >-----#
    hi1OperationId = OID(name='hi1OperationId', mode=MODE_VALUE)
    hi1OperationId._val = (0, 4, 0, 2, 2, 6, 1, 1, 0)
    
    #-----< sending-of-HI1-Notification >-----#
    sending_of_HI1_Notification = CLASS(name='sending-of-HI1-Notification', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')))
    _sending_of_HI1_Notification_val_ArgumentType = CHOICE(name='ArgumentType', mode=MODE_TYPE, typeref=ASN1RefType(('TETRA-HI1NotificationOperations', 'HI1-Operation')))
    sending_of_HI1_Notification._val = dict([('ArgumentType', _sending_of_HI1_Notification_val_ArgumentType), ('Errors', ASN1Set(rv=[dict([('errorCode', ('local', 0))]), dict([('errorCode', ('local', 1))]), dict([('errorCode', ('local', 2))]), dict([('errorCode', ('local', 3))])], rr=[], ev=None, er=[])), ('operationCode', ('global', (0, 4, 0, 2, 2, 6, 1)))])
    
    #-----< other-failure-causes >-----#
    other_failure_causes = CLASS(name='other-failure-causes', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    other_failure_causes._val = dict([('errorCode', ('local', 0))])
    
    #-----< missing-parameter >-----#
    missing_parameter = CLASS(name='missing-parameter', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    missing_parameter._val = dict([('errorCode', ('local', 1))])
    
    #-----< unknown-parameter >-----#
    unknown_parameter = CLASS(name='unknown-parameter', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    unknown_parameter._val = dict([('errorCode', ('local', 2))])
    
    #-----< erroneous-parameter >-----#
    erroneous_parameter = CLASS(name='erroneous-parameter', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    erroneous_parameter._val = dict([('errorCode', ('local', 3))])
    
    #-----< ErrorHI1Notifications >-----#
    ErrorHI1Notifications = CLASS(name='ErrorHI1Notifications', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    ErrorHI1Notifications._val = ASN1Set(rv=[dict([('errorCode', ('local', 0))]), dict([('errorCode', ('local', 1))]), dict([('errorCode', ('local', 2))]), dict([('errorCode', ('local', 3))])], rr=[], ev=None, er=[])
    
    #-----< HI1-Operation >-----#
    HI1_Operation = CHOICE(name='HI1-Operation', mode=MODE_TYPE)
    _HI1_Operation_liActivated = SEQ(name='liActivated', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI1NotificationOperations', 'Notification')))
    _HI1_Operation_liDeactivated = SEQ(name='liDeactivated', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI1NotificationOperations', 'Notification')))
    _HI1_Operation_liModified = SEQ(name='liModified', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI1NotificationOperations', 'Notification')))
    _HI1_Operation_alarms_indicator = SEQ(name='alarms-indicator', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI1NotificationOperations', 'Alarm-Indicator')))
    _HI1_Operation_national_HI1_ASN1parameters = SEQ(name='national-HI1-ASN1parameters', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI1NotificationOperations', 'National-HI1-ASN1parameters')))
    HI1_Operation._cont = ASN1Dict([
        ('liActivated', _HI1_Operation_liActivated),
        ('liDeactivated', _HI1_Operation_liDeactivated),
        ('liModified', _HI1_Operation_liModified),
        ('alarms-indicator', _HI1_Operation_alarms_indicator),
        ('national-HI1-ASN1parameters', _HI1_Operation_national_HI1_ASN1parameters),
        ])
    HI1_Operation._ext = ['national-HI1-ASN1parameters']
    
    #-----< Notification >-----#
    Notification = SEQ(name='Notification', mode=MODE_TYPE)
    _Notification_domainID = OID(name='domainID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Notification_domainID._const_val = ASN1Set(rv=[(0, 4, 0, 2, 2, 6, 1, 1, 0)], rr=[], ev=None, er=[])
    _Notification_lawfulInterceptionIdentifier = OCT_STR(name='lawfulInterceptionIdentifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'LawfulInterceptionIdentifier')))
    _Notification_communicationIdentifier = SEQ(name='communicationIdentifier', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'CommunicationIdentifier')), opt=True)
    _Notification_timeStamp = CHOICE(name='timeStamp', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'TimeStamp')))
    _Notification_location = SEQ(name='location', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'TETRACGIType')), opt=True)
    _Notification_national_HI1_ASN1parameters = SEQ(name='national-HI1-ASN1parameters', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI1NotificationOperations', 'National-HI1-ASN1parameters')), opt=True)
    Notification._cont = ASN1Dict([
        ('domainID', _Notification_domainID),
        ('lawfulInterceptionIdentifier', _Notification_lawfulInterceptionIdentifier),
        ('communicationIdentifier', _Notification_communicationIdentifier),
        ('timeStamp', _Notification_timeStamp),
        ('location', _Notification_location),
        ('national-HI1-ASN1parameters', _Notification_national_HI1_ASN1parameters),
        ])
    Notification._ext = ['national-HI1-ASN1parameters']
    
    #-----< Alarm-Indicator >-----#
    Alarm_Indicator = SEQ(name='Alarm-Indicator', mode=MODE_TYPE)
    _Alarm_Indicator_domainID = OID(name='domainID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Alarm_Indicator_domainID._const_val = ASN1Set(rv=[(0, 4, 0, 2, 2, 6, 1, 1, 0)], rr=[], ev=None, er=[])
    _Alarm_Indicator_communicationIdentifier = SEQ(name='communicationIdentifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'CommunicationIdentifier')), opt=True)
    _Alarm_Indicator_timeStamp = CHOICE(name='timeStamp', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'TimeStamp')))
    _Alarm_Indicator_alarm_information = OCT_STR(name='alarm-information', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Alarm_Indicator_alarm_information._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    _Alarm_Indicator_lawfulInterceptionIdentifier = OCT_STR(name='lawfulInterceptionIdentifier', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'LawfulInterceptionIdentifier')), opt=True)
    _Alarm_Indicator_national_HI1_ASN1parameters = SEQ(name='national-HI1-ASN1parameters', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI1NotificationOperations', 'National-HI1-ASN1parameters')), opt=True)
    Alarm_Indicator._cont = ASN1Dict([
        ('domainID', _Alarm_Indicator_domainID),
        ('communicationIdentifier', _Alarm_Indicator_communicationIdentifier),
        ('timeStamp', _Alarm_Indicator_timeStamp),
        ('alarm-information', _Alarm_Indicator_alarm_information),
        ('lawfulInterceptionIdentifier', _Alarm_Indicator_lawfulInterceptionIdentifier),
        ('national-HI1-ASN1parameters', _Alarm_Indicator_national_HI1_ASN1parameters),
        ])
    Alarm_Indicator._ext = ['lawfulInterceptionIdentifier', 'national-HI1-ASN1parameters']
    
    #-----< National-HI1-ASN1parameters >-----#
    National_HI1_ASN1parameters = SEQ(name='National-HI1-ASN1parameters', mode=MODE_TYPE)
    _National_HI1_ASN1parameters_domainID = OID(name='domainID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _National_HI1_ASN1parameters_domainID._const_val = ASN1Set(rv=[(0, 4, 0, 2, 2, 6, 1, 1, 0)], rr=[], ev=None, er=[])
    _National_HI1_ASN1parameters_countryCode = STR_PRINT(name='countryCode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _National_HI1_ASN1parameters_countryCode._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    National_HI1_ASN1parameters._cont = ASN1Dict([
        ('domainID', _National_HI1_ASN1parameters_domainID),
        ('countryCode', _National_HI1_ASN1parameters_countryCode),
        ])
    National_HI1_ASN1parameters._ext = []
    
    _all_ = [
        lawfulInterceptDomainId,
        tETRADomainId,
        hi1OperationId,
        sending_of_HI1_Notification,
        _sending_of_HI1_Notification_val_ArgumentType,
        other_failure_causes,
        missing_parameter,
        unknown_parameter,
        erroneous_parameter,
        ErrorHI1Notifications,
        _HI1_Operation_liActivated,
        _HI1_Operation_liDeactivated,
        _HI1_Operation_liModified,
        _HI1_Operation_alarms_indicator,
        _HI1_Operation_national_HI1_ASN1parameters,
        HI1_Operation,
        _Notification_domainID,
        _Notification_lawfulInterceptionIdentifier,
        _Notification_communicationIdentifier,
        _Notification_timeStamp,
        _Notification_location,
        _Notification_national_HI1_ASN1parameters,
        Notification,
        _Alarm_Indicator_domainID,
        _Alarm_Indicator_communicationIdentifier,
        _Alarm_Indicator_timeStamp,
        _Alarm_Indicator_alarm_information,
        _Alarm_Indicator_lawfulInterceptionIdentifier,
        _Alarm_Indicator_national_HI1_ASN1parameters,
        Alarm_Indicator,
        _National_HI1_ASN1parameters_domainID,
        _National_HI1_ASN1parameters_countryCode,
        National_HI1_ASN1parameters,
    ]

class TETRA_HI2Operations:

    _name_  = 'TETRA-HI2Operations'
    _oid_   = [0, 4, 0, 2, 2, 6, 2, 3]
    
    _obj_ = [
        'tetra-sending-of-IRI',
        'TETRAIRIsContent',
        'TetraIRISequence',
        'lawfulInterceptDomainId',
        'tETRADomainId',
        'hi2OperationId',
        'TetraIRIContent',
        'unknown-version',
        'missing-parameter',
        'unknown-parameter-value',
        'unknown-parameter',
        'OperationErrors',
        'Tetra-IRI-Parameters',
        'TETRA-LI-Event',
        'DMO-Indicator',
        'TxGrantedStatus',
        'GroupStatus',
        'CommunicationIdentifier',
        'Network-Identifier',
        'Network-Element-Identifier',
        'CC-Link-Identifier',
        'TimeStamp',
        'LocalTimeStamp',
        'PartyInformation',
        'CallingPartyNumber',
        'CalledPartyNumber',
        'Location',
        'TetraLocation',
        'GSMLocation',
        'MapDatum',
        'UMTSLocation',
        'GeographicalCoordinates',
        'GA-Point',
        'GA-PointWithUnCertainty',
        'maxNrOfPoints',
        'GA-Polygon',
        'CallContentLinkCharacteristics',
        'CCLink-State',
        'Intercepted-Call-State',
        'Services-Information',
        'ISUP-parameters',
        'DSS1-parameters-codeset-0',
        'MAP-parameters',
        'Supplementary-Services',
        'Standard-Supplementary-Services',
        'Non-Standard-Supplementary-Services',
        'Other-Services',
        'ISUP-SS-parameters',
        'DSS1-SS-parameters-codeset-0',
        'DSS1-SS-parameters-codeset-4',
        'DSS1-SS-parameters-codeset-5',
        'DSS1-SS-parameters-codeset-6',
        'DSS1-SS-parameters-codeset-7',
        'DSS1-SS-Invoke-Components',
        'MAP-SS-Invoke-Components',
        'MAP-SS-Parameters',
        'SimpleIndication',
        'SciDataMode',
        'SMS-report',
        'LawfulInterceptionIdentifier',
        'National-Parameters',
        'GPRSCorrelationNumber',
        'GPRSEvent',
        'Services-Data-Information',
        'GPRS-parameters',
        'GPRSOperationErrorCode',
        'DataNodeAddress',
        'IPAddress',
        'IP-value',
        'X25Address',
        'National-HI2-ASN1parameters',
        ]
    _type_ = [
        'TETRAIRIsContent',
        'TetraIRISequence',
        'TetraIRIContent',
        'Tetra-IRI-Parameters',
        'TETRA-LI-Event',
        'DMO-Indicator',
        'TxGrantedStatus',
        'GroupStatus',
        'CommunicationIdentifier',
        'Network-Identifier',
        'Network-Element-Identifier',
        'CC-Link-Identifier',
        'TimeStamp',
        'LocalTimeStamp',
        'PartyInformation',
        'CallingPartyNumber',
        'CalledPartyNumber',
        'Location',
        'TetraLocation',
        'GSMLocation',
        'MapDatum',
        'UMTSLocation',
        'GeographicalCoordinates',
        'GA-Point',
        'GA-PointWithUnCertainty',
        'GA-Polygon',
        'CallContentLinkCharacteristics',
        'CCLink-State',
        'Intercepted-Call-State',
        'Services-Information',
        'ISUP-parameters',
        'DSS1-parameters-codeset-0',
        'MAP-parameters',
        'Supplementary-Services',
        'Standard-Supplementary-Services',
        'Non-Standard-Supplementary-Services',
        'Other-Services',
        'ISUP-SS-parameters',
        'DSS1-SS-parameters-codeset-0',
        'DSS1-SS-parameters-codeset-4',
        'DSS1-SS-parameters-codeset-5',
        'DSS1-SS-parameters-codeset-6',
        'DSS1-SS-parameters-codeset-7',
        'DSS1-SS-Invoke-Components',
        'MAP-SS-Invoke-Components',
        'MAP-SS-Parameters',
        'SimpleIndication',
        'SciDataMode',
        'SMS-report',
        'LawfulInterceptionIdentifier',
        'National-Parameters',
        'GPRSCorrelationNumber',
        'GPRSEvent',
        'Services-Data-Information',
        'GPRS-parameters',
        'GPRSOperationErrorCode',
        'DataNodeAddress',
        'IPAddress',
        'IP-value',
        'X25Address',
        'National-HI2-ASN1parameters',
        ]
    _set_ = [
        'OperationErrors',
        ]
    _val_ = [
        'tetra-sending-of-IRI',
        'lawfulInterceptDomainId',
        'tETRADomainId',
        'hi2OperationId',
        'unknown-version',
        'missing-parameter',
        'unknown-parameter-value',
        'unknown-parameter',
        'maxNrOfPoints',
        ]
    _class_ = [
        'tetra-sending-of-IRI',
        'unknown-version',
        'missing-parameter',
        'unknown-parameter-value',
        'unknown-parameter',
        'OperationErrors',
        ]
    _param_ = [
        ]
    
    #-----< tetra-sending-of-IRI >-----#
    tetra_sending_of_IRI = CLASS(name='tetra-sending-of-IRI', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')))
    _tetra_sending_of_IRI_val_ArgumentType = CHOICE(name='ArgumentType', mode=MODE_TYPE, typeref=ASN1RefType(('TETRA-HI2Operations', 'TETRAIRIsContent')))
    tetra_sending_of_IRI._val = dict([('ArgumentType', _tetra_sending_of_IRI_val_ArgumentType), ('Errors', ASN1Set(rv=[dict([('errorCode', ('local', 0))]), dict([('errorCode', ('local', 1))]), dict([('errorCode', ('local', 2))]), dict([('errorCode', ('local', 3))])], rr=[], ev=None, er=[])), ('operationCode', ('global', (0, 4, 0, 2, 2, 6, 1, 1)))])
    
    #-----< TETRAIRIsContent >-----#
    TETRAIRIsContent = CHOICE(name='TETRAIRIsContent', mode=MODE_TYPE)
    _TETRAIRIsContent_tetraiRIContent = CHOICE(name='tetraiRIContent', mode=MODE_TYPE, typeref=ASN1RefType(('TETRA-HI2Operations', 'TetraIRIContent')))
    _TETRAIRIsContent_tetraIRISequence = SEQ_OF(name='tetraIRISequence', mode=MODE_TYPE, typeref=ASN1RefType(('TETRA-HI2Operations', 'TetraIRISequence')))
    TETRAIRIsContent._cont = ASN1Dict([
        ('tetraiRIContent', _TETRAIRIsContent_tetraiRIContent),
        ('tetraIRISequence', _TETRAIRIsContent_tetraIRISequence),
        ])
    TETRAIRIsContent._ext = None
    
    #-----< TetraIRISequence >-----#
    TetraIRISequence = SEQ_OF(name='TetraIRISequence', mode=MODE_TYPE)
    _TetraIRISequence__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('TETRA-HI2Operations', 'TetraIRIContent')))
    TetraIRISequence._cont = _TetraIRISequence__item_
    
    #-----< lawfulInterceptDomainId >-----#
    lawfulInterceptDomainId = OID(name='lawfulInterceptDomainId', mode=MODE_VALUE)
    lawfulInterceptDomainId._val = (0, 4, 0, 2, 2)
    
    #-----< tETRADomainId >-----#
    tETRADomainId = OID(name='tETRADomainId', mode=MODE_VALUE)
    tETRADomainId._val = (0, 4, 0, 2, 2, 6)
    
    #-----< hi2OperationId >-----#
    hi2OperationId = OID(name='hi2OperationId', mode=MODE_VALUE)
    hi2OperationId._val = (0, 4, 0, 2, 2, 6, 2, 3)
    
    #-----< TetraIRIContent >-----#
    TetraIRIContent = CHOICE(name='TetraIRIContent', mode=MODE_TYPE)
    _TetraIRIContent_iRI_Begin_record = SEQ(name='iRI-Begin-record', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'Tetra-IRI-Parameters')))
    _TetraIRIContent_iRI_End_record = SEQ(name='iRI-End-record', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'Tetra-IRI-Parameters')))
    _TetraIRIContent_iRI_Continue_record = SEQ(name='iRI-Continue-record', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'Tetra-IRI-Parameters')))
    _TetraIRIContent_iRI_Report_record = SEQ(name='iRI-Report-record', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'Tetra-IRI-Parameters')))
    TetraIRIContent._cont = ASN1Dict([
        ('iRI-Begin-record', _TetraIRIContent_iRI_Begin_record),
        ('iRI-End-record', _TetraIRIContent_iRI_End_record),
        ('iRI-Continue-record', _TetraIRIContent_iRI_Continue_record),
        ('iRI-Report-record', _TetraIRIContent_iRI_Report_record),
        ])
    TetraIRIContent._ext = None
    
    #-----< unknown-version >-----#
    unknown_version = CLASS(name='unknown-version', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    unknown_version._val = dict([('errorCode', ('local', 0))])
    
    #-----< missing-parameter >-----#
    missing_parameter = CLASS(name='missing-parameter', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    missing_parameter._val = dict([('errorCode', ('local', 1))])
    
    #-----< unknown-parameter-value >-----#
    unknown_parameter_value = CLASS(name='unknown-parameter-value', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    unknown_parameter_value._val = dict([('errorCode', ('local', 2))])
    
    #-----< unknown-parameter >-----#
    unknown_parameter = CLASS(name='unknown-parameter', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    unknown_parameter._val = dict([('errorCode', ('local', 3))])
    
    #-----< OperationErrors >-----#
    OperationErrors = CLASS(name='OperationErrors', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    OperationErrors._val = ASN1Set(rv=[dict([('errorCode', ('local', 0))]), dict([('errorCode', ('local', 1))]), dict([('errorCode', ('local', 2))]), dict([('errorCode', ('local', 3))])], rr=[], ev=None, er=[])
    
    #-----< Tetra-IRI-Parameters >-----#
    Tetra_IRI_Parameters = SEQ(name='Tetra-IRI-Parameters', mode=MODE_TYPE)
    _Tetra_IRI_Parameters_domainID = OID(name='domainID', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Tetra_IRI_Parameters_domainID._const_val = ASN1Set(rv=[(0, 4, 0, 2, 2, 6, 2, 3)], rr=[], ev=None, er=[])
    _Tetra_IRI_Parameters_iRIversion = ENUM(name='iRIversion', mode=MODE_TYPE, tag=(23, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Tetra_IRI_Parameters_iRIversion._cont = ASN1Dict([('version0', 0)])
    _Tetra_IRI_Parameters_iRIversion._ext = []
    _Tetra_IRI_Parameters_lawfulInterceptionIdentifier = OCT_STR(name='lawfulInterceptionIdentifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'LawfulInterceptionIdentifier')))
    _Tetra_IRI_Parameters_communicationIdentifier = SEQ(name='communicationIdentifier', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'CommunicationIdentifier')))
    _Tetra_IRI_Parameters_timeStamp = CHOICE(name='timeStamp', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'TimeStamp')))
    _Tetra_IRI_Parameters_intercepted_Call_Direct = ENUM(name='intercepted-Call-Direct', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Tetra_IRI_Parameters_intercepted_Call_Direct._cont = ASN1Dict([('not-Available', 0), ('originating-Target', 1), ('terminating-Target', 2)])
    _Tetra_IRI_Parameters_intercepted_Call_Direct._ext = []
    _Tetra_IRI_Parameters_intercepted_Call_State = ENUM(name='intercepted-Call-State', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'Intercepted-Call-State')), opt=True)
    _Tetra_IRI_Parameters_ringingDuration = OCT_STR(name='ringingDuration', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Tetra_IRI_Parameters_ringingDuration._const_sz = ASN1Set(rv=[3], rr=[], ev=None, er=[])
    _Tetra_IRI_Parameters_conversationDuration = OCT_STR(name='conversationDuration', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Tetra_IRI_Parameters_conversationDuration._const_sz = ASN1Set(rv=[3], rr=[], ev=None, er=[])
    _Tetra_IRI_Parameters_locationOfTheTarget = SEQ(name='locationOfTheTarget', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'Location')), opt=True)
    _Tetra_IRI_Parameters_partyInformation = SET_OF(name='partyInformation', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __Tetra_IRI_Parameters_partyInformation__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('TETRA-HI2Operations', 'PartyInformation')))
    _Tetra_IRI_Parameters_partyInformation._cont = __Tetra_IRI_Parameters_partyInformation__item_
    _Tetra_IRI_Parameters_partyInformation._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=10)], ev=None, er=[])
    _Tetra_IRI_Parameters_callContentLinkInformation = SEQ(name='callContentLinkInformation', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __Tetra_IRI_Parameters_callContentLinkInformation_cCLink1Characteristics = SEQ(name='cCLink1Characteristics', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'CallContentLinkCharacteristics')), opt=True)
    __Tetra_IRI_Parameters_callContentLinkInformation_cCLink2Characteristics = SEQ(name='cCLink2Characteristics', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'CallContentLinkCharacteristics')), opt=True)
    _Tetra_IRI_Parameters_callContentLinkInformation._cont = ASN1Dict([
        ('cCLink1Characteristics', __Tetra_IRI_Parameters_callContentLinkInformation_cCLink1Characteristics),
        ('cCLink2Characteristics', __Tetra_IRI_Parameters_callContentLinkInformation_cCLink2Characteristics),
        ])
    _Tetra_IRI_Parameters_callContentLinkInformation._ext = []
    _Tetra_IRI_Parameters_release_Reason_Of_Intercepted_Call = OCT_STR(name='release-Reason-Of-Intercepted-Call', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Tetra_IRI_Parameters_release_Reason_Of_Intercepted_Call._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _Tetra_IRI_Parameters_nature_Of_The_intercepted_call = ENUM(name='nature-Of-The-intercepted-call', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Tetra_IRI_Parameters_nature_Of_The_intercepted_call._cont = ASN1Dict([('gSM-ISDN-PSTN-circuit-call', 0), ('gSM-SMS-Message', 1), ('uUS4-Messages', 2), ('tETRA-circuit-call', 3), ('teTRA-Packet-Data', 4), ('gPRS-Packet-Data', 5), ('uMTS-circuit-call', 6), ('lTE-SMS-Message', 7), ('lTE-circuit-call', 8)])
    _Tetra_IRI_Parameters_nature_Of_The_intercepted_call._ext = ['uMTS-circuit-call', 'lTE-SMS-Message', 'lTE-circuit-call']
    _Tetra_IRI_Parameters_serverCenterAddress = SEQ(name='serverCenterAddress', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'PartyInformation')), opt=True)
    _Tetra_IRI_Parameters_sMS = SEQ(name='sMS', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'SMS-report')), opt=True)
    _Tetra_IRI_Parameters_cC_Link_Identifier = OCT_STR(name='cC-Link-Identifier', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'CC-Link-Identifier')), opt=True)
    _Tetra_IRI_Parameters_national_Parameters = SET_OF(name='national-Parameters', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'National-Parameters')), opt=True)
    _Tetra_IRI_Parameters_gPRSCorrelationNumber = OCT_STR(name='gPRSCorrelationNumber', mode=MODE_TYPE, tag=(18, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'GPRSCorrelationNumber')), opt=True)
    _Tetra_IRI_Parameters_gPRSevent = ENUM(name='gPRSevent', mode=MODE_TYPE, tag=(20, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'GPRSEvent')), opt=True)
    _Tetra_IRI_Parameters_sgsnAddress = CHOICE(name='sgsnAddress', mode=MODE_TYPE, tag=(21, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'DataNodeAddress')), opt=True)
    _Tetra_IRI_Parameters_gPRSOperationErrorCode = OCT_STR(name='gPRSOperationErrorCode', mode=MODE_TYPE, tag=(22, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'GPRSOperationErrorCode')), opt=True)
    _Tetra_IRI_Parameters_ggsnAddress = CHOICE(name='ggsnAddress', mode=MODE_TYPE, tag=(24, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'DataNodeAddress')), opt=True)
    _Tetra_IRI_Parameters_qOS = CHOICE(name='qOS', mode=MODE_TYPE, tag=(25, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'UmtsQos')), opt=True)
    _Tetra_IRI_Parameters_networkIdentifier = SEQ(name='networkIdentifier', mode=MODE_TYPE, tag=(26, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'Network-Identifier')), opt=True)
    _Tetra_IRI_Parameters_sMSOriginatingAddress = CHOICE(name='sMSOriginatingAddress', mode=MODE_TYPE, tag=(27, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'DataNodeAddress')), opt=True)
    _Tetra_IRI_Parameters_sMSTerminatingAddress = CHOICE(name='sMSTerminatingAddress', mode=MODE_TYPE, tag=(28, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'DataNodeAddress')), opt=True)
    _Tetra_IRI_Parameters_iMSevent = ENUM(name='iMSevent', mode=MODE_TYPE, tag=(29, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'IMSevent')), opt=True)
    _Tetra_IRI_Parameters_sIPMessage = OCT_STR(name='sIPMessage', mode=MODE_TYPE, tag=(30, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Tetra_IRI_Parameters_servingSGSN_number = OCT_STR(name='servingSGSN-number', mode=MODE_TYPE, tag=(31, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Tetra_IRI_Parameters_servingSGSN_number._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=20)], ev=None, er=[])
    _Tetra_IRI_Parameters_servingSGSN_address = OCT_STR(name='servingSGSN-address', mode=MODE_TYPE, tag=(32, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Tetra_IRI_Parameters_servingSGSN_address._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=5, ub=17)], ev=None, er=[])
    _Tetra_IRI_Parameters_tARGETACTIVITYMONITOR = SEQ(name='tARGETACTIVITYMONITOR', mode=MODE_TYPE, tag=(33, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TS101909201', 'TARGETACTIVITYMONITOR-1')), opt=True)
    _Tetra_IRI_Parameters_ldiEvent = ENUM(name='ldiEvent', mode=MODE_TYPE, tag=(34, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'LDIevent')), opt=True)
    _Tetra_IRI_Parameters_correlation = CHOICE(name='correlation', mode=MODE_TYPE, tag=(35, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'CorrelationValues')), opt=True)
    _Tetra_IRI_Parameters_tARGETACTIVITYMONITORind = SEQ(name='tARGETACTIVITYMONITORind', mode=MODE_TYPE, tag=(36, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'TARGETACTIVITYMONITORind')), opt=True)
    _Tetra_IRI_Parameters_tARGETCOMMSMONITORind = SEQ(name='tARGETCOMMSMONITORind', mode=MODE_TYPE, tag=(37, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'TARGETCOMMSMONITORind')), opt=True)
    _Tetra_IRI_Parameters_tTRAFFICind = SEQ(name='tTRAFFICind', mode=MODE_TYPE, tag=(38, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'TTRAFFICind')), opt=True)
    _Tetra_IRI_Parameters_cTTRAFFICind = SEQ(name='cTTRAFFICind', mode=MODE_TYPE, tag=(39, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'CTTRAFFICind')), opt=True)
    _Tetra_IRI_Parameters_tETRA_LI_Event = ENUM(name='tETRA-LI-Event', mode=MODE_TYPE, tag=(40, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'TETRA-LI-Event')), opt=True)
    _Tetra_IRI_Parameters_dMO_Indicator = ENUM(name='dMO-Indicator', mode=MODE_TYPE, tag=(41, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'DMO-Indicator')), opt=True)
    _Tetra_IRI_Parameters_tETRA_PartyInformation = CHOICE(name='tETRA-PartyInformation', mode=MODE_TYPE, tag=(42, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'TETRAAddressType')), opt=True)
    _Tetra_IRI_Parameters_tETRA_Other_PartyInformation = CHOICE(name='tETRA-Other-PartyInformation', mode=MODE_TYPE, tag=(43, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('EN301040', 'TETRAAddressType')), opt=True)
    _Tetra_IRI_Parameters_txGrantedStatus = BOOL(name='txGrantedStatus', mode=MODE_TYPE, tag=(44, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'TxGrantedStatus')), opt=True)
    _Tetra_IRI_Parameters_groupStatus = BOOL(name='groupStatus', mode=MODE_TYPE, tag=(45, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'GroupStatus')), opt=True)
    _Tetra_IRI_Parameters_national_HI2_ASN1parameters = SEQ(name='national-HI2-ASN1parameters', mode=MODE_TYPE, tag=(255, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'National-HI2-ASN1parameters')), opt=True)
    Tetra_IRI_Parameters._cont = ASN1Dict([
        ('domainID', _Tetra_IRI_Parameters_domainID),
        ('iRIversion', _Tetra_IRI_Parameters_iRIversion),
        ('lawfulInterceptionIdentifier', _Tetra_IRI_Parameters_lawfulInterceptionIdentifier),
        ('communicationIdentifier', _Tetra_IRI_Parameters_communicationIdentifier),
        ('timeStamp', _Tetra_IRI_Parameters_timeStamp),
        ('intercepted-Call-Direct', _Tetra_IRI_Parameters_intercepted_Call_Direct),
        ('intercepted-Call-State', _Tetra_IRI_Parameters_intercepted_Call_State),
        ('ringingDuration', _Tetra_IRI_Parameters_ringingDuration),
        ('conversationDuration', _Tetra_IRI_Parameters_conversationDuration),
        ('locationOfTheTarget', _Tetra_IRI_Parameters_locationOfTheTarget),
        ('partyInformation', _Tetra_IRI_Parameters_partyInformation),
        ('callContentLinkInformation', _Tetra_IRI_Parameters_callContentLinkInformation),
        ('release-Reason-Of-Intercepted-Call', _Tetra_IRI_Parameters_release_Reason_Of_Intercepted_Call),
        ('nature-Of-The-intercepted-call', _Tetra_IRI_Parameters_nature_Of_The_intercepted_call),
        ('serverCenterAddress', _Tetra_IRI_Parameters_serverCenterAddress),
        ('sMS', _Tetra_IRI_Parameters_sMS),
        ('cC-Link-Identifier', _Tetra_IRI_Parameters_cC_Link_Identifier),
        ('national-Parameters', _Tetra_IRI_Parameters_national_Parameters),
        ('gPRSCorrelationNumber', _Tetra_IRI_Parameters_gPRSCorrelationNumber),
        ('gPRSevent', _Tetra_IRI_Parameters_gPRSevent),
        ('sgsnAddress', _Tetra_IRI_Parameters_sgsnAddress),
        ('gPRSOperationErrorCode', _Tetra_IRI_Parameters_gPRSOperationErrorCode),
        ('ggsnAddress', _Tetra_IRI_Parameters_ggsnAddress),
        ('qOS', _Tetra_IRI_Parameters_qOS),
        ('networkIdentifier', _Tetra_IRI_Parameters_networkIdentifier),
        ('sMSOriginatingAddress', _Tetra_IRI_Parameters_sMSOriginatingAddress),
        ('sMSTerminatingAddress', _Tetra_IRI_Parameters_sMSTerminatingAddress),
        ('iMSevent', _Tetra_IRI_Parameters_iMSevent),
        ('sIPMessage', _Tetra_IRI_Parameters_sIPMessage),
        ('servingSGSN-number', _Tetra_IRI_Parameters_servingSGSN_number),
        ('servingSGSN-address', _Tetra_IRI_Parameters_servingSGSN_address),
        ('tARGETACTIVITYMONITOR', _Tetra_IRI_Parameters_tARGETACTIVITYMONITOR),
        ('ldiEvent', _Tetra_IRI_Parameters_ldiEvent),
        ('correlation', _Tetra_IRI_Parameters_correlation),
        ('tARGETACTIVITYMONITORind', _Tetra_IRI_Parameters_tARGETACTIVITYMONITORind),
        ('tARGETCOMMSMONITORind', _Tetra_IRI_Parameters_tARGETCOMMSMONITORind),
        ('tTRAFFICind', _Tetra_IRI_Parameters_tTRAFFICind),
        ('cTTRAFFICind', _Tetra_IRI_Parameters_cTTRAFFICind),
        ('tETRA-LI-Event', _Tetra_IRI_Parameters_tETRA_LI_Event),
        ('dMO-Indicator', _Tetra_IRI_Parameters_dMO_Indicator),
        ('tETRA-PartyInformation', _Tetra_IRI_Parameters_tETRA_PartyInformation),
        ('tETRA-Other-PartyInformation', _Tetra_IRI_Parameters_tETRA_Other_PartyInformation),
        ('txGrantedStatus', _Tetra_IRI_Parameters_txGrantedStatus),
        ('groupStatus', _Tetra_IRI_Parameters_groupStatus),
        ('national-HI2-ASN1parameters', _Tetra_IRI_Parameters_national_HI2_ASN1parameters),
        ])
    Tetra_IRI_Parameters._ext = ['ggsnAddress', 'qOS', 'networkIdentifier', 'sMSOriginatingAddress', 'sMSTerminatingAddress', 'iMSevent', 'sIPMessage', 'servingSGSN-number', 'servingSGSN-address', 'tARGETACTIVITYMONITOR', 'ldiEvent', 'correlation', 'tARGETACTIVITYMONITORind', 'tARGETCOMMSMONITORind', 'tTRAFFICind', 'cTTRAFFICind', 'tETRA-LI-Event', 'dMO-Indicator', 'tETRA-PartyInformation', 'tETRA-Other-PartyInformation', 'txGrantedStatus', 'groupStatus', 'national-HI2-ASN1parameters']
    
    #-----< TETRA-LI-Event >-----#
    TETRA_LI_Event = ENUM(name='TETRA-LI-Event', mode=MODE_TYPE)
    TETRA_LI_Event._cont = ASN1Dict([('callSetupMobileOriginating', 1), ('callSetupMobileTerminating', 2), ('ringing', 3), ('queueing', 4), ('connected', 5), ('handover', 6), ('callRelease', 7), ('locationUpdate', 8), ('sDSMobileOriginating', 9), ('sDSMobileTerminating', 10), ('callForward', 11), ('callHold', 12), ('groupIndication', 13), ('txGranted', 14), ('mobileOn', 15), ('mobileOff', 16), ('dMO', 17)])
    TETRA_LI_Event._ext = []
    
    #-----< DMO-Indicator >-----#
    DMO_Indicator = ENUM(name='DMO-Indicator', mode=MODE_TYPE)
    DMO_Indicator._cont = ASN1Dict([('dMOSTATETUNKNOWNC', 0), ('dMOSTATETTMOC', 1), ('dMOSTATETDMOC', 2), ('dMOSTATETIDLEDUALWATCHC', 3), ('dMOSTATETFULLDUALWATCHC', 4), ('dMOSTATETTXINHIBITC', 5)])
    DMO_Indicator._ext = []
    
    #-----< TxGrantedStatus >-----#
    TxGrantedStatus = BOOL(name='TxGrantedStatus', mode=MODE_TYPE)
    
    #-----< GroupStatus >-----#
    GroupStatus = BOOL(name='GroupStatus', mode=MODE_TYPE)
    
    #-----< CommunicationIdentifier >-----#
    CommunicationIdentifier = SEQ(name='CommunicationIdentifier', mode=MODE_TYPE)
    _CommunicationIdentifier_communication_Identity_Number = OCT_STR(name='communication-Identity-Number', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CommunicationIdentifier_communication_Identity_Number._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    _CommunicationIdentifier_network_Identifier = SEQ(name='network-Identifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'Network-Identifier')))
    CommunicationIdentifier._cont = ASN1Dict([
        ('communication-Identity-Number', _CommunicationIdentifier_communication_Identity_Number),
        ('network-Identifier', _CommunicationIdentifier_network_Identifier),
        ])
    CommunicationIdentifier._ext = []
    
    #-----< Network-Identifier >-----#
    Network_Identifier = SEQ(name='Network-Identifier', mode=MODE_TYPE)
    _Network_Identifier_operator_Identifier = OCT_STR(name='operator-Identifier', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Network_Identifier_operator_Identifier._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=5)], ev=None, er=[])
    _Network_Identifier_network_Element_Identifier = CHOICE(name='network-Element-Identifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'Network-Element-Identifier')), opt=True)
    Network_Identifier._cont = ASN1Dict([
        ('operator-Identifier', _Network_Identifier_operator_Identifier),
        ('network-Element-Identifier', _Network_Identifier_network_Element_Identifier),
        ])
    Network_Identifier._ext = []
    
    #-----< Network-Element-Identifier >-----#
    Network_Element_Identifier = CHOICE(name='Network-Element-Identifier', mode=MODE_TYPE)
    _Network_Element_Identifier_e164_Format = OCT_STR(name='e164-Format', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Network_Element_Identifier_e164_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    _Network_Element_Identifier_x25_Format = OCT_STR(name='x25-Format', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Network_Element_Identifier_x25_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    _Network_Element_Identifier_iP_Format = OCT_STR(name='iP-Format', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Network_Element_Identifier_iP_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    _Network_Element_Identifier_dNS_Format = OCT_STR(name='dNS-Format', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Network_Element_Identifier_dNS_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    _Network_Element_Identifier_iP_Address = SEQ(name='iP-Address', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'IPAddress')))
    Network_Element_Identifier._cont = ASN1Dict([
        ('e164-Format', _Network_Element_Identifier_e164_Format),
        ('x25-Format', _Network_Element_Identifier_x25_Format),
        ('iP-Format', _Network_Element_Identifier_iP_Format),
        ('dNS-Format', _Network_Element_Identifier_dNS_Format),
        ('iP-Address', _Network_Element_Identifier_iP_Address),
        ])
    Network_Element_Identifier._ext = ['iP-Address']
    
    #-----< CC-Link-Identifier >-----#
    CC_Link_Identifier = OCT_STR(name='CC-Link-Identifier', mode=MODE_TYPE)
    CC_Link_Identifier._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=8)], ev=None, er=[])
    
    #-----< TimeStamp >-----#
    TimeStamp = CHOICE(name='TimeStamp', mode=MODE_TYPE)
    _TimeStamp_localTime = SEQ(name='localTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'LocalTimeStamp')))
    _TimeStamp_utcTime = TIME_UTC(name='utcTime', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    TimeStamp._cont = ASN1Dict([
        ('localTime', _TimeStamp_localTime),
        ('utcTime', _TimeStamp_utcTime),
        ])
    TimeStamp._ext = None
    
    #-----< LocalTimeStamp >-----#
    LocalTimeStamp = SEQ(name='LocalTimeStamp', mode=MODE_TYPE)
    _LocalTimeStamp_generalizedTime = TIME_GEN(name='generalizedTime', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LocalTimeStamp_winterSummerIndication = ENUM(name='winterSummerIndication', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LocalTimeStamp_winterSummerIndication._cont = ASN1Dict([('notProvided', 0), ('winterTime', 1), ('summerTime', 2)])
    _LocalTimeStamp_winterSummerIndication._ext = []
    LocalTimeStamp._cont = ASN1Dict([
        ('generalizedTime', _LocalTimeStamp_generalizedTime),
        ('winterSummerIndication', _LocalTimeStamp_winterSummerIndication),
        ])
    LocalTimeStamp._ext = None
    
    #-----< PartyInformation >-----#
    PartyInformation = SEQ(name='PartyInformation', mode=MODE_TYPE)
    _PartyInformation_party_Qualifier = ENUM(name='party-Qualifier', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PartyInformation_party_Qualifier._cont = ASN1Dict([('originating-Party', 0), ('terminating-Party', 1), ('forwarded-to-Party', 2), ('gPRS-Target', 3)])
    _PartyInformation_party_Qualifier._ext = []
    _PartyInformation_partyIdentity = SEQ(name='partyIdentity', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __PartyInformation_partyIdentity_imei = OCT_STR(name='imei', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PartyInformation_partyIdentity_imei._const_sz = ASN1Set(rv=[8], rr=[], ev=None, er=[])
    __PartyInformation_partyIdentity_tei = OCT_STR(name='tei', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PartyInformation_partyIdentity_tei._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=15)], ev=None, er=[])
    __PartyInformation_partyIdentity_imsi = OCT_STR(name='imsi', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PartyInformation_partyIdentity_imsi._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=3, ub=8)], ev=None, er=[])
    __PartyInformation_partyIdentity_callingPartyNumber = CHOICE(name='callingPartyNumber', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'CallingPartyNumber')), opt=True)
    __PartyInformation_partyIdentity_calledPartyNumber = CHOICE(name='calledPartyNumber', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'CalledPartyNumber')), opt=True)
    __PartyInformation_partyIdentity_msISDN = OCT_STR(name='msISDN', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PartyInformation_partyIdentity_msISDN._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=9)], ev=None, er=[])
    __PartyInformation_partyIdentity_e164_Format = OCT_STR(name='e164-Format', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PartyInformation_partyIdentity_e164_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    __PartyInformation_partyIdentity_sip_uri = OCT_STR(name='sip-uri', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PartyInformation_partyIdentity_tel_url = OCT_STR(name='tel-url', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PartyInformation_partyIdentity._cont = ASN1Dict([
        ('imei', __PartyInformation_partyIdentity_imei),
        ('tei', __PartyInformation_partyIdentity_tei),
        ('imsi', __PartyInformation_partyIdentity_imsi),
        ('callingPartyNumber', __PartyInformation_partyIdentity_callingPartyNumber),
        ('calledPartyNumber', __PartyInformation_partyIdentity_calledPartyNumber),
        ('msISDN', __PartyInformation_partyIdentity_msISDN),
        ('e164-Format', __PartyInformation_partyIdentity_e164_Format),
        ('sip-uri', __PartyInformation_partyIdentity_sip_uri),
        ('tel-url', __PartyInformation_partyIdentity_tel_url),
        ])
    _PartyInformation_partyIdentity._ext = ['e164-Format', 'sip-uri', 'tel-url']
    _PartyInformation_services_Information = SEQ(name='services-Information', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'Services-Information')), opt=True)
    _PartyInformation_supplementary_Services_Information = SEQ(name='supplementary-Services-Information', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'Supplementary-Services')), opt=True)
    _PartyInformation_services_Data_Information = SEQ(name='services-Data-Information', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'Services-Data-Information')), opt=True)
    PartyInformation._cont = ASN1Dict([
        ('party-Qualifier', _PartyInformation_party_Qualifier),
        ('partyIdentity', _PartyInformation_partyIdentity),
        ('services-Information', _PartyInformation_services_Information),
        ('supplementary-Services-Information', _PartyInformation_supplementary_Services_Information),
        ('services-Data-Information', _PartyInformation_services_Data_Information),
        ])
    PartyInformation._ext = []
    
    #-----< CallingPartyNumber >-----#
    CallingPartyNumber = CHOICE(name='CallingPartyNumber', mode=MODE_TYPE)
    _CallingPartyNumber_iSUP_Format = OCT_STR(name='iSUP-Format', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CallingPartyNumber_iSUP_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    _CallingPartyNumber_dSS1_Format = OCT_STR(name='dSS1-Format', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CallingPartyNumber_dSS1_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    _CallingPartyNumber_mAP_Format = OCT_STR(name='mAP-Format', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CallingPartyNumber_mAP_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    CallingPartyNumber._cont = ASN1Dict([
        ('iSUP-Format', _CallingPartyNumber_iSUP_Format),
        ('dSS1-Format', _CallingPartyNumber_dSS1_Format),
        ('mAP-Format', _CallingPartyNumber_mAP_Format),
        ])
    CallingPartyNumber._ext = ['mAP-Format']
    
    #-----< CalledPartyNumber >-----#
    CalledPartyNumber = CHOICE(name='CalledPartyNumber', mode=MODE_TYPE)
    _CalledPartyNumber_iSUP_Format = OCT_STR(name='iSUP-Format', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CalledPartyNumber_iSUP_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    _CalledPartyNumber_mAP_Format = OCT_STR(name='mAP-Format', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CalledPartyNumber_mAP_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    _CalledPartyNumber_dSS1_Format = OCT_STR(name='dSS1-Format', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CalledPartyNumber_dSS1_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    CalledPartyNumber._cont = ASN1Dict([
        ('iSUP-Format', _CalledPartyNumber_iSUP_Format),
        ('mAP-Format', _CalledPartyNumber_mAP_Format),
        ('dSS1-Format', _CalledPartyNumber_dSS1_Format),
        ])
    CalledPartyNumber._ext = []
    
    #-----< Location >-----#
    Location = SEQ(name='Location', mode=MODE_TYPE)
    _Location_e164_Number = OCT_STR(name='e164-Number', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Location_e164_Number._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    _Location_globalCellID = OCT_STR(name='globalCellID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Location_globalCellID._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=5, ub=7)], ev=None, er=[])
    _Location_tetraLocation = CHOICE(name='tetraLocation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'TetraLocation')), opt=True)
    _Location_rAI = OCT_STR(name='rAI', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Location_rAI._const_sz = ASN1Set(rv=[6], rr=[], ev=None, er=[])
    _Location_gsmLocation = CHOICE(name='gsmLocation', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'GSMLocation')), opt=True)
    _Location_umtsLocation = CHOICE(name='umtsLocation', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'UMTSLocation')), opt=True)
    _Location_sAI = OCT_STR(name='sAI', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Location_sAI._const_sz = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    _Location_oldRAI = OCT_STR(name='oldRAI', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Location_oldRAI._const_sz = ASN1Set(rv=[6], rr=[], ev=None, er=[])
    Location._cont = ASN1Dict([
        ('e164-Number', _Location_e164_Number),
        ('globalCellID', _Location_globalCellID),
        ('tetraLocation', _Location_tetraLocation),
        ('rAI', _Location_rAI),
        ('gsmLocation', _Location_gsmLocation),
        ('umtsLocation', _Location_umtsLocation),
        ('sAI', _Location_sAI),
        ('oldRAI', _Location_oldRAI),
        ])
    Location._ext = ['oldRAI']
    
    #-----< TetraLocation >-----#
    TetraLocation = CHOICE(name='TetraLocation', mode=MODE_TYPE)
    _TetraLocation_ms_Loc = SEQ(name='ms-Loc', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __TetraLocation_ms_Loc_mcc = INT(name='mcc', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __TetraLocation_ms_Loc_mcc._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1023)], ev=None, er=[])
    __TetraLocation_ms_Loc_mnc = INT(name='mnc', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __TetraLocation_ms_Loc_mnc._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=16383)], ev=None, er=[])
    __TetraLocation_ms_Loc_lai = INT(name='lai', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __TetraLocation_ms_Loc_lai._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    __TetraLocation_ms_Loc_ci = INT(name='ci', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _TetraLocation_ms_Loc._cont = ASN1Dict([
        ('mcc', __TetraLocation_ms_Loc_mcc),
        ('mnc', __TetraLocation_ms_Loc_mnc),
        ('lai', __TetraLocation_ms_Loc_lai),
        ('ci', __TetraLocation_ms_Loc_ci),
        ])
    _TetraLocation_ms_Loc._ext = []
    _TetraLocation_ls_Loc = INT(name='ls-Loc', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    TetraLocation._cont = ASN1Dict([
        ('ms-Loc', _TetraLocation_ms_Loc),
        ('ls-Loc', _TetraLocation_ls_Loc),
        ])
    TetraLocation._ext = None
    
    #-----< GSMLocation >-----#
    GSMLocation = CHOICE(name='GSMLocation', mode=MODE_TYPE)
    _GSMLocation_geoCoordinates = SEQ(name='geoCoordinates', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GSMLocation_geoCoordinates_latitude = STR_PRINT(name='latitude', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GSMLocation_geoCoordinates_latitude._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=7, ub=10)], ev=None, er=[])
    __GSMLocation_geoCoordinates_longitude = STR_PRINT(name='longitude', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GSMLocation_geoCoordinates_longitude._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=8, ub=11)], ev=None, er=[])
    __GSMLocation_geoCoordinates_mapDatum = ENUM(name='mapDatum', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'MapDatum')), opt=True)
    __GSMLocation_geoCoordinates_azimuth = INT(name='azimuth', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __GSMLocation_geoCoordinates_azimuth._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=359)], ev=None, er=[])
    _GSMLocation_geoCoordinates._cont = ASN1Dict([
        ('latitude', __GSMLocation_geoCoordinates_latitude),
        ('longitude', __GSMLocation_geoCoordinates_longitude),
        ('mapDatum', __GSMLocation_geoCoordinates_mapDatum),
        ('azimuth', __GSMLocation_geoCoordinates_azimuth),
        ])
    _GSMLocation_geoCoordinates._ext = ['azimuth']
    _GSMLocation_utmCoordinates = SEQ(name='utmCoordinates', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GSMLocation_utmCoordinates_utm_East = STR_PRINT(name='utm-East', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GSMLocation_utmCoordinates_utm_East._const_sz = ASN1Set(rv=[10], rr=[], ev=None, er=[])
    __GSMLocation_utmCoordinates_utm_North = STR_PRINT(name='utm-North', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GSMLocation_utmCoordinates_utm_North._const_sz = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    __GSMLocation_utmCoordinates_mapDatum = ENUM(name='mapDatum', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'MapDatum')), opt=True)
    __GSMLocation_utmCoordinates_azimuth = INT(name='azimuth', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __GSMLocation_utmCoordinates_azimuth._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=359)], ev=None, er=[])
    _GSMLocation_utmCoordinates._cont = ASN1Dict([
        ('utm-East', __GSMLocation_utmCoordinates_utm_East),
        ('utm-North', __GSMLocation_utmCoordinates_utm_North),
        ('mapDatum', __GSMLocation_utmCoordinates_mapDatum),
        ('azimuth', __GSMLocation_utmCoordinates_azimuth),
        ])
    _GSMLocation_utmCoordinates._ext = ['azimuth']
    _GSMLocation_utmRefCoordinates = SEQ(name='utmRefCoordinates', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GSMLocation_utmRefCoordinates_utmref_string = STR_PRINT(name='utmref-string', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GSMLocation_utmRefCoordinates_utmref_string._const_sz = ASN1Set(rv=[13], rr=[], ev=None, er=[])
    __GSMLocation_utmRefCoordinates_mapDatum = ENUM(name='mapDatum', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'MapDatum')), opt=True)
    _GSMLocation_utmRefCoordinates._cont = ASN1Dict([
        ('utmref-string', __GSMLocation_utmRefCoordinates_utmref_string),
        ('mapDatum', __GSMLocation_utmRefCoordinates_mapDatum),
        ])
    _GSMLocation_utmRefCoordinates._ext = []
    _GSMLocation_wGS84Coordinates = OCT_STR(name='wGS84Coordinates', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    GSMLocation._cont = ASN1Dict([
        ('geoCoordinates', _GSMLocation_geoCoordinates),
        ('utmCoordinates', _GSMLocation_utmCoordinates),
        ('utmRefCoordinates', _GSMLocation_utmRefCoordinates),
        ('wGS84Coordinates', _GSMLocation_wGS84Coordinates),
        ])
    GSMLocation._ext = None
    
    #-----< MapDatum >-----#
    MapDatum = ENUM(name='MapDatum', mode=MODE_TYPE)
    MapDatum._cont = ASN1Dict([('wGS84', 0), ('wGS72', 1), ('eD50', 2)])
    MapDatum._ext = []
    
    #-----< UMTSLocation >-----#
    UMTSLocation = CHOICE(name='UMTSLocation', mode=MODE_TYPE)
    _UMTSLocation_point = SEQ(name='point', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'GA-Point')))
    _UMTSLocation_pointWithUnCertainty = SEQ(name='pointWithUnCertainty', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'GA-PointWithUnCertainty')))
    _UMTSLocation_polygon = SEQ_OF(name='polygon', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'GA-Polygon')))
    UMTSLocation._cont = ASN1Dict([
        ('point', _UMTSLocation_point),
        ('pointWithUnCertainty', _UMTSLocation_pointWithUnCertainty),
        ('polygon', _UMTSLocation_polygon),
        ])
    UMTSLocation._ext = []
    
    #-----< GeographicalCoordinates >-----#
    GeographicalCoordinates = SEQ(name='GeographicalCoordinates', mode=MODE_TYPE)
    _GeographicalCoordinates_latitudeSign = ENUM(name='latitudeSign', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _GeographicalCoordinates_latitudeSign._cont = ASN1Dict([('north', 1), ('south', 2)])
    _GeographicalCoordinates_latitudeSign._ext = None
    _GeographicalCoordinates_latitude = INT(name='latitude', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _GeographicalCoordinates_latitude._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=8388607)], ev=None, er=[])
    _GeographicalCoordinates_longitude = INT(name='longitude', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _GeographicalCoordinates_longitude._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-8388608, ub=8388607)], ev=None, er=[])
    GeographicalCoordinates._cont = ASN1Dict([
        ('latitudeSign', _GeographicalCoordinates_latitudeSign),
        ('latitude', _GeographicalCoordinates_latitude),
        ('longitude', _GeographicalCoordinates_longitude),
        ])
    GeographicalCoordinates._ext = []
    
    #-----< GA-Point >-----#
    GA_Point = SEQ(name='GA-Point', mode=MODE_TYPE)
    _GA_Point_geographicalCoordinates = SEQ(name='geographicalCoordinates', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'GeographicalCoordinates')))
    GA_Point._cont = ASN1Dict([
        ('geographicalCoordinates', _GA_Point_geographicalCoordinates),
        ])
    GA_Point._ext = []
    
    #-----< GA-PointWithUnCertainty >-----#
    GA_PointWithUnCertainty = SEQ(name='GA-PointWithUnCertainty', mode=MODE_TYPE)
    _GA_PointWithUnCertainty_geographicalCoordinates = SEQ(name='geographicalCoordinates', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'GeographicalCoordinates')))
    _GA_PointWithUnCertainty_uncertaintyCode = INT(name='uncertaintyCode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _GA_PointWithUnCertainty_uncertaintyCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=None, er=[])
    GA_PointWithUnCertainty._cont = ASN1Dict([
        ('geographicalCoordinates', _GA_PointWithUnCertainty_geographicalCoordinates),
        ('uncertaintyCode', _GA_PointWithUnCertainty_uncertaintyCode),
        ])
    GA_PointWithUnCertainty._ext = None
    
    #-----< maxNrOfPoints >-----#
    maxNrOfPoints = INT(name='maxNrOfPoints', mode=MODE_VALUE)
    maxNrOfPoints._val = 15
    
    #-----< GA-Polygon >-----#
    GA_Polygon = SEQ_OF(name='GA-Polygon', mode=MODE_TYPE)
    _GA_Polygon__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    __GA_Polygon__item__geographicalCoordinates = SEQ(name='geographicalCoordinates', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'GeographicalCoordinates')))
    _GA_Polygon__item_._cont = ASN1Dict([
        ('geographicalCoordinates', __GA_Polygon__item__geographicalCoordinates),
        ])
    _GA_Polygon__item_._ext = []
    GA_Polygon._cont = _GA_Polygon__item_
    GA_Polygon._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=15)], ev=None, er=[])
    
    #-----< CallContentLinkCharacteristics >-----#
    CallContentLinkCharacteristics = SEQ(name='CallContentLinkCharacteristics', mode=MODE_TYPE)
    _CallContentLinkCharacteristics_cCLink_State = ENUM(name='cCLink-State', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'CCLink-State')), opt=True)
    _CallContentLinkCharacteristics_release_Time = CHOICE(name='release-Time', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'TimeStamp')), opt=True)
    _CallContentLinkCharacteristics_release_Reason = OCT_STR(name='release-Reason', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _CallContentLinkCharacteristics_release_Reason._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _CallContentLinkCharacteristics_lEMF_Address = CHOICE(name='lEMF-Address', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'CalledPartyNumber')), opt=True)
    CallContentLinkCharacteristics._cont = ASN1Dict([
        ('cCLink-State', _CallContentLinkCharacteristics_cCLink_State),
        ('release-Time', _CallContentLinkCharacteristics_release_Time),
        ('release-Reason', _CallContentLinkCharacteristics_release_Reason),
        ('lEMF-Address', _CallContentLinkCharacteristics_lEMF_Address),
        ])
    CallContentLinkCharacteristics._ext = []
    
    #-----< CCLink-State >-----#
    CCLink_State = ENUM(name='CCLink-State', mode=MODE_TYPE)
    CCLink_State._cont = ASN1Dict([('setUpInProcess', 1), ('callActive', 2), ('callReleased', 3), ('lack-of-resource', 4)])
    CCLink_State._ext = []
    
    #-----< Intercepted-Call-State >-----#
    Intercepted_Call_State = ENUM(name='Intercepted-Call-State', mode=MODE_TYPE)
    Intercepted_Call_State._cont = ASN1Dict([('idle', 1), ('setUpInProcess', 2), ('connected', 3)])
    Intercepted_Call_State._ext = []
    
    #-----< Services-Information >-----#
    Services_Information = SEQ(name='Services-Information', mode=MODE_TYPE)
    _Services_Information_iSUP_parameters = SET_OF(name='iSUP-parameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'ISUP-parameters')), opt=True)
    _Services_Information_dSS1_parameters_codeset_0 = SET_OF(name='dSS1-parameters-codeset-0', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'DSS1-parameters-codeset-0')), opt=True)
    _Services_Information_mAP_parameters = SET_OF(name='mAP-parameters', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'MAP-parameters')), opt=True)
    Services_Information._cont = ASN1Dict([
        ('iSUP-parameters', _Services_Information_iSUP_parameters),
        ('dSS1-parameters-codeset-0', _Services_Information_dSS1_parameters_codeset_0),
        ('mAP-parameters', _Services_Information_mAP_parameters),
        ])
    Services_Information._ext = ['mAP-parameters']
    
    #-----< ISUP-parameters >-----#
    ISUP_parameters = SET_OF(name='ISUP-parameters', mode=MODE_TYPE)
    _ISUP_parameters__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _ISUP_parameters__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    ISUP_parameters._cont = _ISUP_parameters__item_
    ISUP_parameters._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< DSS1-parameters-codeset-0 >-----#
    DSS1_parameters_codeset_0 = SET_OF(name='DSS1-parameters-codeset-0', mode=MODE_TYPE)
    _DSS1_parameters_codeset_0__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _DSS1_parameters_codeset_0__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    DSS1_parameters_codeset_0._cont = _DSS1_parameters_codeset_0__item_
    DSS1_parameters_codeset_0._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< MAP-parameters >-----#
    MAP_parameters = SET_OF(name='MAP-parameters', mode=MODE_TYPE)
    _MAP_parameters__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _MAP_parameters__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    MAP_parameters._cont = _MAP_parameters__item_
    MAP_parameters._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< Supplementary-Services >-----#
    Supplementary_Services = SEQ(name='Supplementary-Services', mode=MODE_TYPE)
    _Supplementary_Services_standard_Supplementary_Services = SEQ(name='standard-Supplementary-Services', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'Standard-Supplementary-Services')), opt=True)
    _Supplementary_Services_non_Standard_Supplementary_Services = SET_OF(name='non-Standard-Supplementary-Services', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'Non-Standard-Supplementary-Services')), opt=True)
    _Supplementary_Services_other_Services = SET_OF(name='other-Services', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'Other-Services')), opt=True)
    Supplementary_Services._cont = ASN1Dict([
        ('standard-Supplementary-Services', _Supplementary_Services_standard_Supplementary_Services),
        ('non-Standard-Supplementary-Services', _Supplementary_Services_non_Standard_Supplementary_Services),
        ('other-Services', _Supplementary_Services_other_Services),
        ])
    Supplementary_Services._ext = []
    
    #-----< Standard-Supplementary-Services >-----#
    Standard_Supplementary_Services = SEQ(name='Standard-Supplementary-Services', mode=MODE_TYPE)
    _Standard_Supplementary_Services_iSUP_SS_parameters = SET_OF(name='iSUP-SS-parameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'ISUP-SS-parameters')), opt=True)
    _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_0 = SET_OF(name='dSS1-SS-parameters-codeset-0', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'DSS1-SS-parameters-codeset-0')), opt=True)
    _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_4 = SET_OF(name='dSS1-SS-parameters-codeset-4', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'DSS1-SS-parameters-codeset-4')), opt=True)
    _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_5 = SET_OF(name='dSS1-SS-parameters-codeset-5', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'DSS1-SS-parameters-codeset-5')), opt=True)
    _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_6 = SET_OF(name='dSS1-SS-parameters-codeset-6', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'DSS1-SS-parameters-codeset-6')), opt=True)
    _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_7 = SET_OF(name='dSS1-SS-parameters-codeset-7', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'DSS1-SS-parameters-codeset-7')), opt=True)
    _Standard_Supplementary_Services_dSS1_SS_Invoke_components = SET_OF(name='dSS1-SS-Invoke-components', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'DSS1-SS-Invoke-Components')), opt=True)
    _Standard_Supplementary_Services_mAP_SS_Parameters = SET_OF(name='mAP-SS-Parameters', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'MAP-SS-Parameters')), opt=True)
    _Standard_Supplementary_Services_mAP_SS_Invoke_Components = SET_OF(name='mAP-SS-Invoke-Components', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'MAP-SS-Invoke-Components')), opt=True)
    Standard_Supplementary_Services._cont = ASN1Dict([
        ('iSUP-SS-parameters', _Standard_Supplementary_Services_iSUP_SS_parameters),
        ('dSS1-SS-parameters-codeset-0', _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_0),
        ('dSS1-SS-parameters-codeset-4', _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_4),
        ('dSS1-SS-parameters-codeset-5', _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_5),
        ('dSS1-SS-parameters-codeset-6', _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_6),
        ('dSS1-SS-parameters-codeset-7', _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_7),
        ('dSS1-SS-Invoke-components', _Standard_Supplementary_Services_dSS1_SS_Invoke_components),
        ('mAP-SS-Parameters', _Standard_Supplementary_Services_mAP_SS_Parameters),
        ('mAP-SS-Invoke-Components', _Standard_Supplementary_Services_mAP_SS_Invoke_Components),
        ])
    Standard_Supplementary_Services._ext = []
    
    #-----< Non-Standard-Supplementary-Services >-----#
    Non_Standard_Supplementary_Services = SET_OF(name='Non-Standard-Supplementary-Services', mode=MODE_TYPE)
    _Non_Standard_Supplementary_Services__item_ = CHOICE(name='_item_', mode=MODE_TYPE)
    __Non_Standard_Supplementary_Services__item__simpleIndication = ENUM(name='simpleIndication', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'SimpleIndication')))
    __Non_Standard_Supplementary_Services__item__sciData = OCT_STR(name='sciData', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'SciDataMode')))
    _Non_Standard_Supplementary_Services__item_._cont = ASN1Dict([
        ('simpleIndication', __Non_Standard_Supplementary_Services__item__simpleIndication),
        ('sciData', __Non_Standard_Supplementary_Services__item__sciData),
        ])
    _Non_Standard_Supplementary_Services__item_._ext = []
    Non_Standard_Supplementary_Services._cont = _Non_Standard_Supplementary_Services__item_
    Non_Standard_Supplementary_Services._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=20)], ev=None, er=[])
    
    #-----< Other-Services >-----#
    Other_Services = SET_OF(name='Other-Services', mode=MODE_TYPE)
    _Other_Services__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _Other_Services__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    Other_Services._cont = _Other_Services__item_
    Other_Services._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=50)], ev=None, er=[])
    
    #-----< ISUP-SS-parameters >-----#
    ISUP_SS_parameters = SET_OF(name='ISUP-SS-parameters', mode=MODE_TYPE)
    _ISUP_SS_parameters__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _ISUP_SS_parameters__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    ISUP_SS_parameters._cont = _ISUP_SS_parameters__item_
    ISUP_SS_parameters._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< DSS1-SS-parameters-codeset-0 >-----#
    DSS1_SS_parameters_codeset_0 = SET_OF(name='DSS1-SS-parameters-codeset-0', mode=MODE_TYPE)
    _DSS1_SS_parameters_codeset_0__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _DSS1_SS_parameters_codeset_0__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    DSS1_SS_parameters_codeset_0._cont = _DSS1_SS_parameters_codeset_0__item_
    DSS1_SS_parameters_codeset_0._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< DSS1-SS-parameters-codeset-4 >-----#
    DSS1_SS_parameters_codeset_4 = SET_OF(name='DSS1-SS-parameters-codeset-4', mode=MODE_TYPE)
    _DSS1_SS_parameters_codeset_4__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _DSS1_SS_parameters_codeset_4__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    DSS1_SS_parameters_codeset_4._cont = _DSS1_SS_parameters_codeset_4__item_
    DSS1_SS_parameters_codeset_4._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< DSS1-SS-parameters-codeset-5 >-----#
    DSS1_SS_parameters_codeset_5 = SET_OF(name='DSS1-SS-parameters-codeset-5', mode=MODE_TYPE)
    _DSS1_SS_parameters_codeset_5__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _DSS1_SS_parameters_codeset_5__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    DSS1_SS_parameters_codeset_5._cont = _DSS1_SS_parameters_codeset_5__item_
    DSS1_SS_parameters_codeset_5._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< DSS1-SS-parameters-codeset-6 >-----#
    DSS1_SS_parameters_codeset_6 = SET_OF(name='DSS1-SS-parameters-codeset-6', mode=MODE_TYPE)
    _DSS1_SS_parameters_codeset_6__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _DSS1_SS_parameters_codeset_6__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    DSS1_SS_parameters_codeset_6._cont = _DSS1_SS_parameters_codeset_6__item_
    DSS1_SS_parameters_codeset_6._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< DSS1-SS-parameters-codeset-7 >-----#
    DSS1_SS_parameters_codeset_7 = SET_OF(name='DSS1-SS-parameters-codeset-7', mode=MODE_TYPE)
    _DSS1_SS_parameters_codeset_7__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _DSS1_SS_parameters_codeset_7__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    DSS1_SS_parameters_codeset_7._cont = _DSS1_SS_parameters_codeset_7__item_
    DSS1_SS_parameters_codeset_7._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< DSS1-SS-Invoke-Components >-----#
    DSS1_SS_Invoke_Components = SET_OF(name='DSS1-SS-Invoke-Components', mode=MODE_TYPE)
    _DSS1_SS_Invoke_Components__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _DSS1_SS_Invoke_Components__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    DSS1_SS_Invoke_Components._cont = _DSS1_SS_Invoke_Components__item_
    DSS1_SS_Invoke_Components._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< MAP-SS-Invoke-Components >-----#
    MAP_SS_Invoke_Components = SET_OF(name='MAP-SS-Invoke-Components', mode=MODE_TYPE)
    _MAP_SS_Invoke_Components__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _MAP_SS_Invoke_Components__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    MAP_SS_Invoke_Components._cont = _MAP_SS_Invoke_Components__item_
    MAP_SS_Invoke_Components._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< MAP-SS-Parameters >-----#
    MAP_SS_Parameters = SET_OF(name='MAP-SS-Parameters', mode=MODE_TYPE)
    _MAP_SS_Parameters__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _MAP_SS_Parameters__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    MAP_SS_Parameters._cont = _MAP_SS_Parameters__item_
    MAP_SS_Parameters._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< SimpleIndication >-----#
    SimpleIndication = ENUM(name='SimpleIndication', mode=MODE_TYPE)
    SimpleIndication._cont = ASN1Dict([('call-Waiting-Indication', 0), ('add-conf-Indication', 1), ('call-on-hold-Indication', 2), ('retrieve-Indication', 3), ('suspend-Indication', 4), ('resume-Indication', 5), ('answer-Indication', 6)])
    SimpleIndication._ext = []
    
    #-----< SciDataMode >-----#
    SciDataMode = OCT_STR(name='SciDataMode', mode=MODE_TYPE)
    SciDataMode._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    
    #-----< SMS-report >-----#
    SMS_report = SEQ(name='SMS-report', mode=MODE_TYPE)
    _SMS_report_communicationIdentifier = SEQ(name='communicationIdentifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'CommunicationIdentifier')))
    _SMS_report_timeStamp = CHOICE(name='timeStamp', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'TimeStamp')))
    _SMS_report_sMS_Contents = SEQ(name='sMS-Contents', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __SMS_report_sMS_Contents_initiator = ENUM(name='initiator', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __SMS_report_sMS_Contents_initiator._cont = ASN1Dict([('target', 0), ('server', 1), ('undefined-party', 2)])
    __SMS_report_sMS_Contents_initiator._ext = []
    __SMS_report_sMS_Contents_transfer_status = ENUM(name='transfer-status', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SMS_report_sMS_Contents_transfer_status._cont = ASN1Dict([('succeed-transfer', 0), ('not-succeed-transfer', 1), ('undefined', 2)])
    __SMS_report_sMS_Contents_transfer_status._ext = []
    __SMS_report_sMS_Contents_other_message = ENUM(name='other-message', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SMS_report_sMS_Contents_other_message._cont = ASN1Dict([('yes', 0), ('no', 1), ('undefined', 2)])
    __SMS_report_sMS_Contents_other_message._ext = []
    __SMS_report_sMS_Contents_content = OCT_STR(name='content', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SMS_report_sMS_Contents_content._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=270)], ev=None, er=[])
    _SMS_report_sMS_Contents._cont = ASN1Dict([
        ('initiator', __SMS_report_sMS_Contents_initiator),
        ('transfer-status', __SMS_report_sMS_Contents_transfer_status),
        ('other-message', __SMS_report_sMS_Contents_other_message),
        ('content', __SMS_report_sMS_Contents_content),
        ])
    _SMS_report_sMS_Contents._ext = []
    SMS_report._cont = ASN1Dict([
        ('communicationIdentifier', _SMS_report_communicationIdentifier),
        ('timeStamp', _SMS_report_timeStamp),
        ('sMS-Contents', _SMS_report_sMS_Contents),
        ])
    SMS_report._ext = None
    
    #-----< LawfulInterceptionIdentifier >-----#
    LawfulInterceptionIdentifier = OCT_STR(name='LawfulInterceptionIdentifier', mode=MODE_TYPE)
    LawfulInterceptionIdentifier._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    
    #-----< National-Parameters >-----#
    National_Parameters = SET_OF(name='National-Parameters', mode=MODE_TYPE)
    _National_Parameters__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _National_Parameters__item_._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=256)], ev=None, er=[])
    National_Parameters._cont = _National_Parameters__item_
    National_Parameters._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=40)], ev=None, er=[])
    
    #-----< GPRSCorrelationNumber >-----#
    GPRSCorrelationNumber = OCT_STR(name='GPRSCorrelationNumber', mode=MODE_TYPE)
    GPRSCorrelationNumber._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=8, ub=20)], ev=None, er=[])
    
    #-----< GPRSEvent >-----#
    GPRSEvent = ENUM(name='GPRSEvent', mode=MODE_TYPE)
    GPRSEvent._cont = ASN1Dict([('pDPContextActivation', 1), ('startOfInterceptionWithPDPContextActive', 2), ('pDPContextDeactivation', 4), ('gPRSAttach', 5), ('gPRSDetach', 6), ('cellOrRAUpdate', 10), ('sMS', 11), ('pDPContextModification', 13)])
    GPRSEvent._ext = ['pDPContextModification']
    
    #-----< Services-Data-Information >-----#
    Services_Data_Information = SEQ(name='Services-Data-Information', mode=MODE_TYPE)
    _Services_Data_Information_gPRS_parameters = SEQ(name='gPRS-parameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'GPRS-parameters')), opt=True)
    Services_Data_Information._cont = ASN1Dict([
        ('gPRS-parameters', _Services_Data_Information_gPRS_parameters),
        ])
    Services_Data_Information._ext = []
    
    #-----< GPRS-parameters >-----#
    GPRS_parameters = SEQ(name='GPRS-parameters', mode=MODE_TYPE)
    _GPRS_parameters_pDP_address_allocated_to_the_target = CHOICE(name='pDP-address-allocated-to-the-target', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'DataNodeAddress')), opt=True)
    _GPRS_parameters_aPN = OCT_STR(name='aPN', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _GPRS_parameters_aPN._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=100)], ev=None, er=[])
    _GPRS_parameters_pDP_type = OCT_STR(name='pDP-type', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _GPRS_parameters_pDP_type._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _GPRS_parameters_nSAPI = OCT_STR(name='nSAPI', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _GPRS_parameters_nSAPI._const_sz = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    _GPRS_parameters_additionalIPaddress = CHOICE(name='additionalIPaddress', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'DataNodeAddress')), opt=True)
    GPRS_parameters._cont = ASN1Dict([
        ('pDP-address-allocated-to-the-target', _GPRS_parameters_pDP_address_allocated_to_the_target),
        ('aPN', _GPRS_parameters_aPN),
        ('pDP-type', _GPRS_parameters_pDP_type),
        ('nSAPI', _GPRS_parameters_nSAPI),
        ('additionalIPaddress', _GPRS_parameters_additionalIPaddress),
        ])
    GPRS_parameters._ext = ['nSAPI', 'additionalIPaddress']
    
    #-----< GPRSOperationErrorCode >-----#
    GPRSOperationErrorCode = OCT_STR(name='GPRSOperationErrorCode', mode=MODE_TYPE)
    GPRSOperationErrorCode._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    
    #-----< DataNodeAddress >-----#
    DataNodeAddress = CHOICE(name='DataNodeAddress', mode=MODE_TYPE)
    _DataNodeAddress_ipAddress = SEQ(name='ipAddress', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'IPAddress')))
    _DataNodeAddress_x25Address = OCT_STR(name='x25Address', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'X25Address')))
    DataNodeAddress._cont = ASN1Dict([
        ('ipAddress', _DataNodeAddress_ipAddress),
        ('x25Address', _DataNodeAddress_x25Address),
        ])
    DataNodeAddress._ext = []
    
    #-----< IPAddress >-----#
    IPAddress = SEQ(name='IPAddress', mode=MODE_TYPE)
    _IPAddress_iP_type = ENUM(name='iP-type', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _IPAddress_iP_type._cont = ASN1Dict([('iPV4', 0), ('iPV6', 1)])
    _IPAddress_iP_type._ext = []
    _IPAddress_iP_value = CHOICE(name='iP-value', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TETRA-HI2Operations', 'IP-value')))
    _IPAddress_iP_assignment = ENUM(name='iP-assignment', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IPAddress_iP_assignment._cont = ASN1Dict([('static', 1), ('dynamic', 2), ('notKnown', 3)])
    _IPAddress_iP_assignment._ext = []
    _IPAddress_iPv6PrefixLength = INT(name='iPv6PrefixLength', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IPAddress_iPv6PrefixLength._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=None, er=[])
    IPAddress._cont = ASN1Dict([
        ('iP-type', _IPAddress_iP_type),
        ('iP-value', _IPAddress_iP_value),
        ('iP-assignment', _IPAddress_iP_assignment),
        ('iPv6PrefixLength', _IPAddress_iPv6PrefixLength),
        ])
    IPAddress._ext = ['iPv6PrefixLength']
    
    #-----< IP-value >-----#
    IP_value = CHOICE(name='IP-value', mode=MODE_TYPE)
    _IP_value_iPBinaryAddress = OCT_STR(name='iPBinaryAddress', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _IP_value_iPBinaryAddress._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=4, ub=16)], ev=None, er=[])
    _IP_value_iPTextAddress = STR_IA5(name='iPTextAddress', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _IP_value_iPTextAddress._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=7, ub=45)], ev=None, er=[])
    IP_value._cont = ASN1Dict([
        ('iPBinaryAddress', _IP_value_iPBinaryAddress),
        ('iPTextAddress', _IP_value_iPTextAddress),
        ])
    IP_value._ext = []
    
    #-----< X25Address >-----#
    X25Address = OCT_STR(name='X25Address', mode=MODE_TYPE)
    X25Address._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    
    #-----< National-HI2-ASN1parameters >-----#
    National_HI2_ASN1parameters = SEQ(name='National-HI2-ASN1parameters', mode=MODE_TYPE)
    _National_HI2_ASN1parameters_countryCode = STR_PRINT(name='countryCode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _National_HI2_ASN1parameters_countryCode._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    National_HI2_ASN1parameters._cont = ASN1Dict([
        ('countryCode', _National_HI2_ASN1parameters_countryCode),
        ])
    National_HI2_ASN1parameters._ext = []
    
    _all_ = [
        tetra_sending_of_IRI,
        _tetra_sending_of_IRI_val_ArgumentType,
        _TETRAIRIsContent_tetraiRIContent,
        _TETRAIRIsContent_tetraIRISequence,
        TETRAIRIsContent,
        _TetraIRISequence__item_,
        TetraIRISequence,
        lawfulInterceptDomainId,
        tETRADomainId,
        hi2OperationId,
        _TetraIRIContent_iRI_Begin_record,
        _TetraIRIContent_iRI_End_record,
        _TetraIRIContent_iRI_Continue_record,
        _TetraIRIContent_iRI_Report_record,
        TetraIRIContent,
        unknown_version,
        missing_parameter,
        unknown_parameter_value,
        unknown_parameter,
        OperationErrors,
        _Tetra_IRI_Parameters_domainID,
        _Tetra_IRI_Parameters_iRIversion,
        _Tetra_IRI_Parameters_lawfulInterceptionIdentifier,
        _Tetra_IRI_Parameters_communicationIdentifier,
        _Tetra_IRI_Parameters_timeStamp,
        _Tetra_IRI_Parameters_intercepted_Call_Direct,
        _Tetra_IRI_Parameters_intercepted_Call_State,
        _Tetra_IRI_Parameters_ringingDuration,
        _Tetra_IRI_Parameters_conversationDuration,
        _Tetra_IRI_Parameters_locationOfTheTarget,
        __Tetra_IRI_Parameters_partyInformation__item_,
        _Tetra_IRI_Parameters_partyInformation,
        __Tetra_IRI_Parameters_callContentLinkInformation_cCLink1Characteristics,
        __Tetra_IRI_Parameters_callContentLinkInformation_cCLink2Characteristics,
        _Tetra_IRI_Parameters_callContentLinkInformation,
        _Tetra_IRI_Parameters_release_Reason_Of_Intercepted_Call,
        _Tetra_IRI_Parameters_nature_Of_The_intercepted_call,
        _Tetra_IRI_Parameters_serverCenterAddress,
        _Tetra_IRI_Parameters_sMS,
        _Tetra_IRI_Parameters_cC_Link_Identifier,
        _Tetra_IRI_Parameters_national_Parameters,
        _Tetra_IRI_Parameters_gPRSCorrelationNumber,
        _Tetra_IRI_Parameters_gPRSevent,
        _Tetra_IRI_Parameters_sgsnAddress,
        _Tetra_IRI_Parameters_gPRSOperationErrorCode,
        _Tetra_IRI_Parameters_ggsnAddress,
        _Tetra_IRI_Parameters_qOS,
        _Tetra_IRI_Parameters_networkIdentifier,
        _Tetra_IRI_Parameters_sMSOriginatingAddress,
        _Tetra_IRI_Parameters_sMSTerminatingAddress,
        _Tetra_IRI_Parameters_iMSevent,
        _Tetra_IRI_Parameters_sIPMessage,
        _Tetra_IRI_Parameters_servingSGSN_number,
        _Tetra_IRI_Parameters_servingSGSN_address,
        _Tetra_IRI_Parameters_tARGETACTIVITYMONITOR,
        _Tetra_IRI_Parameters_ldiEvent,
        _Tetra_IRI_Parameters_correlation,
        _Tetra_IRI_Parameters_tARGETACTIVITYMONITORind,
        _Tetra_IRI_Parameters_tARGETCOMMSMONITORind,
        _Tetra_IRI_Parameters_tTRAFFICind,
        _Tetra_IRI_Parameters_cTTRAFFICind,
        _Tetra_IRI_Parameters_tETRA_LI_Event,
        _Tetra_IRI_Parameters_dMO_Indicator,
        _Tetra_IRI_Parameters_tETRA_PartyInformation,
        _Tetra_IRI_Parameters_tETRA_Other_PartyInformation,
        _Tetra_IRI_Parameters_txGrantedStatus,
        _Tetra_IRI_Parameters_groupStatus,
        _Tetra_IRI_Parameters_national_HI2_ASN1parameters,
        Tetra_IRI_Parameters,
        TETRA_LI_Event,
        DMO_Indicator,
        TxGrantedStatus,
        GroupStatus,
        _CommunicationIdentifier_communication_Identity_Number,
        _CommunicationIdentifier_network_Identifier,
        CommunicationIdentifier,
        _Network_Identifier_operator_Identifier,
        _Network_Identifier_network_Element_Identifier,
        Network_Identifier,
        _Network_Element_Identifier_e164_Format,
        _Network_Element_Identifier_x25_Format,
        _Network_Element_Identifier_iP_Format,
        _Network_Element_Identifier_dNS_Format,
        _Network_Element_Identifier_iP_Address,
        Network_Element_Identifier,
        CC_Link_Identifier,
        _TimeStamp_localTime,
        _TimeStamp_utcTime,
        TimeStamp,
        _LocalTimeStamp_generalizedTime,
        _LocalTimeStamp_winterSummerIndication,
        LocalTimeStamp,
        _PartyInformation_party_Qualifier,
        __PartyInformation_partyIdentity_imei,
        __PartyInformation_partyIdentity_tei,
        __PartyInformation_partyIdentity_imsi,
        __PartyInformation_partyIdentity_callingPartyNumber,
        __PartyInformation_partyIdentity_calledPartyNumber,
        __PartyInformation_partyIdentity_msISDN,
        __PartyInformation_partyIdentity_e164_Format,
        __PartyInformation_partyIdentity_sip_uri,
        __PartyInformation_partyIdentity_tel_url,
        _PartyInformation_partyIdentity,
        _PartyInformation_services_Information,
        _PartyInformation_supplementary_Services_Information,
        _PartyInformation_services_Data_Information,
        PartyInformation,
        _CallingPartyNumber_iSUP_Format,
        _CallingPartyNumber_dSS1_Format,
        _CallingPartyNumber_mAP_Format,
        CallingPartyNumber,
        _CalledPartyNumber_iSUP_Format,
        _CalledPartyNumber_mAP_Format,
        _CalledPartyNumber_dSS1_Format,
        CalledPartyNumber,
        _Location_e164_Number,
        _Location_globalCellID,
        _Location_tetraLocation,
        _Location_rAI,
        _Location_gsmLocation,
        _Location_umtsLocation,
        _Location_sAI,
        _Location_oldRAI,
        Location,
        __TetraLocation_ms_Loc_mcc,
        __TetraLocation_ms_Loc_mnc,
        __TetraLocation_ms_Loc_lai,
        __TetraLocation_ms_Loc_ci,
        _TetraLocation_ms_Loc,
        _TetraLocation_ls_Loc,
        TetraLocation,
        __GSMLocation_geoCoordinates_latitude,
        __GSMLocation_geoCoordinates_longitude,
        __GSMLocation_geoCoordinates_mapDatum,
        __GSMLocation_geoCoordinates_azimuth,
        _GSMLocation_geoCoordinates,
        __GSMLocation_utmCoordinates_utm_East,
        __GSMLocation_utmCoordinates_utm_North,
        __GSMLocation_utmCoordinates_mapDatum,
        __GSMLocation_utmCoordinates_azimuth,
        _GSMLocation_utmCoordinates,
        __GSMLocation_utmRefCoordinates_utmref_string,
        __GSMLocation_utmRefCoordinates_mapDatum,
        _GSMLocation_utmRefCoordinates,
        _GSMLocation_wGS84Coordinates,
        GSMLocation,
        MapDatum,
        _UMTSLocation_point,
        _UMTSLocation_pointWithUnCertainty,
        _UMTSLocation_polygon,
        UMTSLocation,
        _GeographicalCoordinates_latitudeSign,
        _GeographicalCoordinates_latitude,
        _GeographicalCoordinates_longitude,
        GeographicalCoordinates,
        _GA_Point_geographicalCoordinates,
        GA_Point,
        _GA_PointWithUnCertainty_geographicalCoordinates,
        _GA_PointWithUnCertainty_uncertaintyCode,
        GA_PointWithUnCertainty,
        maxNrOfPoints,
        __GA_Polygon__item__geographicalCoordinates,
        _GA_Polygon__item_,
        GA_Polygon,
        _CallContentLinkCharacteristics_cCLink_State,
        _CallContentLinkCharacteristics_release_Time,
        _CallContentLinkCharacteristics_release_Reason,
        _CallContentLinkCharacteristics_lEMF_Address,
        CallContentLinkCharacteristics,
        CCLink_State,
        Intercepted_Call_State,
        _Services_Information_iSUP_parameters,
        _Services_Information_dSS1_parameters_codeset_0,
        _Services_Information_mAP_parameters,
        Services_Information,
        _ISUP_parameters__item_,
        ISUP_parameters,
        _DSS1_parameters_codeset_0__item_,
        DSS1_parameters_codeset_0,
        _MAP_parameters__item_,
        MAP_parameters,
        _Supplementary_Services_standard_Supplementary_Services,
        _Supplementary_Services_non_Standard_Supplementary_Services,
        _Supplementary_Services_other_Services,
        Supplementary_Services,
        _Standard_Supplementary_Services_iSUP_SS_parameters,
        _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_0,
        _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_4,
        _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_5,
        _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_6,
        _Standard_Supplementary_Services_dSS1_SS_parameters_codeset_7,
        _Standard_Supplementary_Services_dSS1_SS_Invoke_components,
        _Standard_Supplementary_Services_mAP_SS_Parameters,
        _Standard_Supplementary_Services_mAP_SS_Invoke_Components,
        Standard_Supplementary_Services,
        __Non_Standard_Supplementary_Services__item__simpleIndication,
        __Non_Standard_Supplementary_Services__item__sciData,
        _Non_Standard_Supplementary_Services__item_,
        Non_Standard_Supplementary_Services,
        _Other_Services__item_,
        Other_Services,
        _ISUP_SS_parameters__item_,
        ISUP_SS_parameters,
        _DSS1_SS_parameters_codeset_0__item_,
        DSS1_SS_parameters_codeset_0,
        _DSS1_SS_parameters_codeset_4__item_,
        DSS1_SS_parameters_codeset_4,
        _DSS1_SS_parameters_codeset_5__item_,
        DSS1_SS_parameters_codeset_5,
        _DSS1_SS_parameters_codeset_6__item_,
        DSS1_SS_parameters_codeset_6,
        _DSS1_SS_parameters_codeset_7__item_,
        DSS1_SS_parameters_codeset_7,
        _DSS1_SS_Invoke_Components__item_,
        DSS1_SS_Invoke_Components,
        _MAP_SS_Invoke_Components__item_,
        MAP_SS_Invoke_Components,
        _MAP_SS_Parameters__item_,
        MAP_SS_Parameters,
        SimpleIndication,
        SciDataMode,
        _SMS_report_communicationIdentifier,
        _SMS_report_timeStamp,
        __SMS_report_sMS_Contents_initiator,
        __SMS_report_sMS_Contents_transfer_status,
        __SMS_report_sMS_Contents_other_message,
        __SMS_report_sMS_Contents_content,
        _SMS_report_sMS_Contents,
        SMS_report,
        LawfulInterceptionIdentifier,
        _National_Parameters__item_,
        National_Parameters,
        GPRSCorrelationNumber,
        GPRSEvent,
        _Services_Data_Information_gPRS_parameters,
        Services_Data_Information,
        _GPRS_parameters_pDP_address_allocated_to_the_target,
        _GPRS_parameters_aPN,
        _GPRS_parameters_pDP_type,
        _GPRS_parameters_nSAPI,
        _GPRS_parameters_additionalIPaddress,
        GPRS_parameters,
        GPRSOperationErrorCode,
        _DataNodeAddress_ipAddress,
        _DataNodeAddress_x25Address,
        DataNodeAddress,
        _IPAddress_iP_type,
        _IPAddress_iP_value,
        _IPAddress_iP_assignment,
        _IPAddress_iPv6PrefixLength,
        IPAddress,
        _IP_value_iPBinaryAddress,
        _IP_value_iPTextAddress,
        IP_value,
        X25Address,
        _National_HI2_ASN1parameters_countryCode,
        National_HI2_ASN1parameters,
    ]

class TETRA_HIManagementOperations:

    _name_  = 'TETRA-HIManagementOperations'
    _oid_   = [0, 4, 0, 2, 2, 6, 3, 0]
    
    _obj_ = [
        'tETRA-sending-of-Password',
        'tETRA-data-Link-Test',
        'tETRA-end-Of-Connection',
        'other-failure-causes',
        'missing-parameter',
        'unknown-parameter',
        'erroneous-parameter',
        'ErrorsHim',
        'lawfulInterceptDomainId',
        'tETRADomainId',
        'himDomainId',
        'TETRA-Password-Name',
        ]
    _type_ = [
        'TETRA-Password-Name',
        ]
    _set_ = [
        'ErrorsHim',
        ]
    _val_ = [
        'tETRA-sending-of-Password',
        'tETRA-data-Link-Test',
        'tETRA-end-Of-Connection',
        'other-failure-causes',
        'missing-parameter',
        'unknown-parameter',
        'erroneous-parameter',
        'lawfulInterceptDomainId',
        'tETRADomainId',
        'himDomainId',
        ]
    _class_ = [
        'tETRA-sending-of-Password',
        'tETRA-data-Link-Test',
        'tETRA-end-Of-Connection',
        'other-failure-causes',
        'missing-parameter',
        'unknown-parameter',
        'erroneous-parameter',
        'ErrorsHim',
        ]
    _param_ = [
        ]
    
    #-----< tETRA-sending-of-Password >-----#
    tETRA_sending_of_Password = CLASS(name='tETRA-sending-of-Password', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')))
    _tETRA_sending_of_Password_val_ArgumentType = SEQ(name='ArgumentType', mode=MODE_TYPE, typeref=ASN1RefType(('TETRA-HIManagementOperations', 'TETRA-Password-Name')))
    tETRA_sending_of_Password._val = dict([('ArgumentType', _tETRA_sending_of_Password_val_ArgumentType), ('Errors', ASN1Set(rv=[dict([('errorCode', ('local', 0))]), dict([('errorCode', ('local', 1))]), dict([('errorCode', ('local', 2))]), dict([('errorCode', ('local', 3))])], rr=[], ev=None, er=[])), ('operationCode', ('global', (0, 4, 0, 2, 2, 6, 3, 0, 1, 1)))])
    
    #-----< tETRA-data-Link-Test >-----#
    tETRA_data_Link_Test = CLASS(name='tETRA-data-Link-Test', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')))
    tETRA_data_Link_Test._val = dict([('Errors', ASN1Set(rv=[dict([('errorCode', ('local', 0))])], rr=[], ev=None, er=[])), ('operationCode', ('global', (0, 4, 0, 2, 2, 6, 3, 0, 2, 1)))])
    
    #-----< tETRA-end-Of-Connection >-----#
    tETRA_end_Of_Connection = CLASS(name='tETRA-end-Of-Connection', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'OPERATION')))
    tETRA_end_Of_Connection._val = dict([('Errors', ASN1Set(rv=[dict([('errorCode', ('local', 0))])], rr=[], ev=None, er=[])), ('operationCode', ('global', (0, 4, 0, 2, 2, 6, 3, 0, 3, 1)))])
    
    #-----< other-failure-causes >-----#
    other_failure_causes = CLASS(name='other-failure-causes', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    other_failure_causes._val = dict([('errorCode', ('local', 0))])
    
    #-----< missing-parameter >-----#
    missing_parameter = CLASS(name='missing-parameter', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    missing_parameter._val = dict([('errorCode', ('local', 1))])
    
    #-----< unknown-parameter >-----#
    unknown_parameter = CLASS(name='unknown-parameter', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    unknown_parameter._val = dict([('errorCode', ('local', 2))])
    
    #-----< erroneous-parameter >-----#
    erroneous_parameter = CLASS(name='erroneous-parameter', mode=MODE_VALUE, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    erroneous_parameter._val = dict([('errorCode', ('local', 3))])
    
    #-----< ErrorsHim >-----#
    ErrorsHim = CLASS(name='ErrorsHim', mode=MODE_SET, typeref=ASN1RefType(('Remote-Operations-Information-Objects', 'ERROR')))
    ErrorsHim._val = ASN1Set(rv=[dict([('errorCode', ('local', 0))]), dict([('errorCode', ('local', 1))]), dict([('errorCode', ('local', 2))]), dict([('errorCode', ('local', 3))])], rr=[], ev=None, er=[])
    
    #-----< lawfulInterceptDomainId >-----#
    lawfulInterceptDomainId = OID(name='lawfulInterceptDomainId', mode=MODE_VALUE)
    lawfulInterceptDomainId._val = (0, 4, 0, 2, 2)
    
    #-----< tETRADomainId >-----#
    tETRADomainId = OID(name='tETRADomainId', mode=MODE_VALUE)
    tETRADomainId._val = (0, 4, 0, 2, 2, 6)
    
    #-----< himDomainId >-----#
    himDomainId = OID(name='himDomainId', mode=MODE_VALUE)
    himDomainId._val = (0, 4, 0, 2, 2, 6, 3, 0)
    
    #-----< TETRA-Password-Name >-----#
    TETRA_Password_Name = SEQ(name='TETRA-Password-Name', mode=MODE_TYPE)
    _TETRA_Password_Name_password = OCT_STR(name='password', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TETRA_Password_Name_password._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    _TETRA_Password_Name_name = OCT_STR(name='name', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TETRA_Password_Name_name._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    TETRA_Password_Name._cont = ASN1Dict([
        ('password', _TETRA_Password_Name_password),
        ('name', _TETRA_Password_Name_name),
        ])
    TETRA_Password_Name._ext = []
    
    _all_ = [
        tETRA_sending_of_Password,
        _tETRA_sending_of_Password_val_ArgumentType,
        tETRA_data_Link_Test,
        tETRA_end_Of_Connection,
        other_failure_causes,
        missing_parameter,
        unknown_parameter,
        erroneous_parameter,
        ErrorsHim,
        lawfulInterceptDomainId,
        tETRADomainId,
        himDomainId,
        _TETRA_Password_Name_password,
        _TETRA_Password_Name_name,
        TETRA_Password_Name,
    ]

class PCESP:

    _name_  = 'PCESP'
    _oid_   = [1, 3, 6, 1, 4, 1, 4491, 2, 2, 5, 1, 4]
    
    _obj_ = [
        'ProtocolVersion',
        'CdcPdu',
        'Message',
        'Answer',
        'CCChange',
        'CCClose',
        'CCOpen',
        'ConferencePartyChange',
        'DialedDigitExtraction',
        'MediaReport',
        'NetworkSignal',
        'Origination',
        'Redirection',
        'Release',
        'ServiceInstance',
        'SubjectSignal',
        'TerminationAttempt',
        'AccessingElementId',
        'AlertingSignal',
        'AudibleSignal',
        'CallId',
        'CaseId',
        'CCCId',
        'EventTime',
        'FlowDirection',
        'PartyId',
        'RedirectedFromInfo',
        'ResourceState',
        'SDP',
        'TerminalDisplayInfo',
        'TransitCarrierId',
        ]
    _type_ = [
        'ProtocolVersion',
        'CdcPdu',
        'Message',
        'Answer',
        'CCChange',
        'CCClose',
        'CCOpen',
        'ConferencePartyChange',
        'DialedDigitExtraction',
        'MediaReport',
        'NetworkSignal',
        'Origination',
        'Redirection',
        'Release',
        'ServiceInstance',
        'SubjectSignal',
        'TerminationAttempt',
        'AccessingElementId',
        'AlertingSignal',
        'AudibleSignal',
        'CallId',
        'CaseId',
        'CCCId',
        'EventTime',
        'FlowDirection',
        'PartyId',
        'RedirectedFromInfo',
        'ResourceState',
        'SDP',
        'TerminalDisplayInfo',
        'TransitCarrierId',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< ProtocolVersion >-----#
    ProtocolVersion = ENUM(name='ProtocolVersion', mode=MODE_TYPE)
    ProtocolVersion._cont = ASN1Dict([('v3', 3), ('v4', 4)])
    ProtocolVersion._ext = []
    
    #-----< CdcPdu >-----#
    CdcPdu = SEQ(name='CdcPdu', mode=MODE_TYPE)
    _CdcPdu_protocolVersion = ENUM(name='protocolVersion', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'ProtocolVersion')))
    _CdcPdu_message = CHOICE(name='message', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'Message')))
    CdcPdu._cont = ASN1Dict([
        ('protocolVersion', _CdcPdu_protocolVersion),
        ('message', _CdcPdu_message),
        ])
    CdcPdu._ext = []
    
    #-----< Message >-----#
    Message = CHOICE(name='Message', mode=MODE_TYPE)
    _Message_answer = SEQ(name='answer', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'Answer')))
    _Message_ccclose = SEQ(name='ccclose', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CCClose')))
    _Message_ccopen = SEQ(name='ccopen', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CCOpen')))
    _Message_reserved0 = NULL(name='reserved0', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Message_origination = SEQ(name='origination', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'Origination')))
    _Message_reserved1 = NULL(name='reserved1', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Message_redirection = SEQ(name='redirection', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'Redirection')))
    _Message_release = SEQ(name='release', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'Release')))
    _Message_reserved2 = NULL(name='reserved2', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Message_terminationattempt = SEQ(name='terminationattempt', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'TerminationAttempt')))
    _Message_reserved = NULL(name='reserved', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Message_ccchange = SEQ(name='ccchange', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CCChange')))
    _Message_reserved3 = NULL(name='reserved3', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Message_reserved4 = NULL(name='reserved4', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Message_dialeddigitextraction = SEQ(name='dialeddigitextraction', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'DialedDigitExtraction')))
    _Message_networksignal = SEQ(name='networksignal', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'NetworkSignal')))
    _Message_subjectsignal = SEQ(name='subjectsignal', mode=MODE_TYPE, tag=(17, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'SubjectSignal')))
    _Message_mediareport = SEQ(name='mediareport', mode=MODE_TYPE, tag=(18, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'MediaReport')))
    _Message_serviceinstance = SEQ(name='serviceinstance', mode=MODE_TYPE, tag=(19, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'ServiceInstance')))
    _Message_confpartychange = SEQ(name='confpartychange', mode=MODE_TYPE, tag=(20, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'ConferencePartyChange')))
    Message._cont = ASN1Dict([
        ('answer', _Message_answer),
        ('ccclose', _Message_ccclose),
        ('ccopen', _Message_ccopen),
        ('reserved0', _Message_reserved0),
        ('origination', _Message_origination),
        ('reserved1', _Message_reserved1),
        ('redirection', _Message_redirection),
        ('release', _Message_release),
        ('reserved2', _Message_reserved2),
        ('terminationattempt', _Message_terminationattempt),
        ('reserved', _Message_reserved),
        ('ccchange', _Message_ccchange),
        ('reserved3', _Message_reserved3),
        ('reserved4', _Message_reserved4),
        ('dialeddigitextraction', _Message_dialeddigitextraction),
        ('networksignal', _Message_networksignal),
        ('subjectsignal', _Message_subjectsignal),
        ('mediareport', _Message_mediareport),
        ('serviceinstance', _Message_serviceinstance),
        ('confpartychange', _Message_confpartychange),
        ])
    Message._ext = []
    
    #-----< Answer >-----#
    Answer = SEQ(name='Answer', mode=MODE_TYPE)
    _Answer_caseId = STR_VIS(name='caseId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CaseId')))
    _Answer_accessingElementId = STR_VIS(name='accessingElementId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'AccessingElementId')))
    _Answer_eventTime = TIME_GEN(name='eventTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'EventTime')))
    _Answer_callId = SEQ(name='callId', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CallId')))
    _Answer_answering = SEQ(name='answering', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'PartyId')), opt=True)
    Answer._cont = ASN1Dict([
        ('caseId', _Answer_caseId),
        ('accessingElementId', _Answer_accessingElementId),
        ('eventTime', _Answer_eventTime),
        ('callId', _Answer_callId),
        ('answering', _Answer_answering),
        ])
    Answer._ext = []
    
    #-----< CCChange >-----#
    CCChange = SEQ(name='CCChange', mode=MODE_TYPE)
    _CCChange_caseId = STR_VIS(name='caseId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CaseId')))
    _CCChange_accessingElementId = STR_VIS(name='accessingElementId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'AccessingElementId')))
    _CCChange_eventTime = TIME_GEN(name='eventTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'EventTime')))
    _CCChange_callId = SEQ(name='callId', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CallId')))
    _CCChange_cCCId = CHOICE(name='cCCId', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('PCESP', 'CCCId')))
    _CCChange_subject = STR_UTF8(name='subject', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'SDP')), opt=True)
    _CCChange_associate = STR_UTF8(name='associate', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'SDP')), opt=True)
    _CCChange_flowDirection = ENUM(name='flowDirection', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'FlowDirection')))
    _CCChange_resourceState = ENUM(name='resourceState', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'ResourceState')), opt=True)
    CCChange._cont = ASN1Dict([
        ('caseId', _CCChange_caseId),
        ('accessingElementId', _CCChange_accessingElementId),
        ('eventTime', _CCChange_eventTime),
        ('callId', _CCChange_callId),
        ('cCCId', _CCChange_cCCId),
        ('subject', _CCChange_subject),
        ('associate', _CCChange_associate),
        ('flowDirection', _CCChange_flowDirection),
        ('resourceState', _CCChange_resourceState),
        ])
    CCChange._ext = []
    
    #-----< CCClose >-----#
    CCClose = SEQ(name='CCClose', mode=MODE_TYPE)
    _CCClose_caseId = STR_VIS(name='caseId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CaseId')))
    _CCClose_accessingElementId = STR_VIS(name='accessingElementId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'AccessingElementId')))
    _CCClose_eventTime = TIME_GEN(name='eventTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'EventTime')))
    _CCClose_cCCId = CHOICE(name='cCCId', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('PCESP', 'CCCId')))
    _CCClose_flowDirection = ENUM(name='flowDirection', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'FlowDirection')))
    CCClose._cont = ASN1Dict([
        ('caseId', _CCClose_caseId),
        ('accessingElementId', _CCClose_accessingElementId),
        ('eventTime', _CCClose_eventTime),
        ('cCCId', _CCClose_cCCId),
        ('flowDirection', _CCClose_flowDirection),
        ])
    CCClose._ext = []
    
    #-----< CCOpen >-----#
    CCOpen = SEQ(name='CCOpen', mode=MODE_TYPE)
    _CCOpen_caseId = STR_VIS(name='caseId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CaseId')))
    _CCOpen_accessingElementId = STR_VIS(name='accessingElementId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'AccessingElementId')))
    _CCOpen_eventTime = TIME_GEN(name='eventTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'EventTime')))
    _CCOpen_ccOpenOption = CHOICE(name='ccOpenOption', mode=MODE_TYPE)
    __CCOpen_ccOpenOption_ccOpenTime = SEQ_OF(name='ccOpenTime', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    ___CCOpen_ccOpenOption_ccOpenTime__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PCESP', 'CallId')))
    __CCOpen_ccOpenOption_ccOpenTime._cont = ___CCOpen_ccOpenOption_ccOpenTime__item_
    __CCOpen_ccOpenOption_reserved0 = NULL(name='reserved0', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CCOpen_ccOpenOption._cont = ASN1Dict([
        ('ccOpenTime', __CCOpen_ccOpenOption_ccOpenTime),
        ('reserved0', __CCOpen_ccOpenOption_reserved0),
        ])
    _CCOpen_ccOpenOption._ext = []
    _CCOpen_cCCId = CHOICE(name='cCCId', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('PCESP', 'CCCId')))
    _CCOpen_subject = STR_UTF8(name='subject', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'SDP')), opt=True)
    _CCOpen_associate = STR_UTF8(name='associate', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'SDP')), opt=True)
    _CCOpen_flowDirection = ENUM(name='flowDirection', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'FlowDirection')))
    CCOpen._cont = ASN1Dict([
        ('caseId', _CCOpen_caseId),
        ('accessingElementId', _CCOpen_accessingElementId),
        ('eventTime', _CCOpen_eventTime),
        ('ccOpenOption', _CCOpen_ccOpenOption),
        ('cCCId', _CCOpen_cCCId),
        ('subject', _CCOpen_subject),
        ('associate', _CCOpen_associate),
        ('flowDirection', _CCOpen_flowDirection),
        ])
    CCOpen._ext = []
    
    #-----< ConferencePartyChange >-----#
    ConferencePartyChange = SEQ(name='ConferencePartyChange', mode=MODE_TYPE)
    _ConferencePartyChange_caseId = STR_VIS(name='caseId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CaseId')))
    _ConferencePartyChange_accessingElementId = STR_VIS(name='accessingElementId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'AccessingElementId')))
    _ConferencePartyChange_eventTime = TIME_GEN(name='eventTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'EventTime')))
    _ConferencePartyChange_callId = SEQ(name='callId', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CallId')))
    _ConferencePartyChange_communicating = SEQ_OF(name='communicating', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ConferencePartyChange_communicating__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    ___ConferencePartyChange_communicating__item__partyId = SEQ_OF(name='partyId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    ____ConferencePartyChange_communicating__item__partyId__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PCESP', 'PartyId')))
    ___ConferencePartyChange_communicating__item__partyId._cont = ____ConferencePartyChange_communicating__item__partyId__item_
    ___ConferencePartyChange_communicating__item__cCCId = CHOICE(name='cCCId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('PCESP', 'CCCId')), opt=True)
    __ConferencePartyChange_communicating__item_._cont = ASN1Dict([
        ('partyId', ___ConferencePartyChange_communicating__item__partyId),
        ('cCCId', ___ConferencePartyChange_communicating__item__cCCId),
        ])
    __ConferencePartyChange_communicating__item_._ext = []
    _ConferencePartyChange_communicating._cont = __ConferencePartyChange_communicating__item_
    _ConferencePartyChange_removed = SEQ_OF(name='removed', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ConferencePartyChange_removed__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    ___ConferencePartyChange_removed__item__partyId = SEQ_OF(name='partyId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    ____ConferencePartyChange_removed__item__partyId__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PCESP', 'PartyId')))
    ___ConferencePartyChange_removed__item__partyId._cont = ____ConferencePartyChange_removed__item__partyId__item_
    ___ConferencePartyChange_removed__item__cCCId = CHOICE(name='cCCId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('PCESP', 'CCCId')), opt=True)
    __ConferencePartyChange_removed__item_._cont = ASN1Dict([
        ('partyId', ___ConferencePartyChange_removed__item__partyId),
        ('cCCId', ___ConferencePartyChange_removed__item__cCCId),
        ])
    __ConferencePartyChange_removed__item_._ext = []
    _ConferencePartyChange_removed._cont = __ConferencePartyChange_removed__item_
    _ConferencePartyChange_joined = SEQ_OF(name='joined', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ConferencePartyChange_joined__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    ___ConferencePartyChange_joined__item__partyId = SEQ_OF(name='partyId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    ____ConferencePartyChange_joined__item__partyId__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('PCESP', 'PartyId')))
    ___ConferencePartyChange_joined__item__partyId._cont = ____ConferencePartyChange_joined__item__partyId__item_
    ___ConferencePartyChange_joined__item__cCCId = CHOICE(name='cCCId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('PCESP', 'CCCId')), opt=True)
    __ConferencePartyChange_joined__item_._cont = ASN1Dict([
        ('partyId', ___ConferencePartyChange_joined__item__partyId),
        ('cCCId', ___ConferencePartyChange_joined__item__cCCId),
        ])
    __ConferencePartyChange_joined__item_._ext = []
    _ConferencePartyChange_joined._cont = __ConferencePartyChange_joined__item_
    ConferencePartyChange._cont = ASN1Dict([
        ('caseId', _ConferencePartyChange_caseId),
        ('accessingElementId', _ConferencePartyChange_accessingElementId),
        ('eventTime', _ConferencePartyChange_eventTime),
        ('callId', _ConferencePartyChange_callId),
        ('communicating', _ConferencePartyChange_communicating),
        ('removed', _ConferencePartyChange_removed),
        ('joined', _ConferencePartyChange_joined),
        ])
    ConferencePartyChange._ext = []
    
    #-----< DialedDigitExtraction >-----#
    DialedDigitExtraction = SEQ(name='DialedDigitExtraction', mode=MODE_TYPE)
    _DialedDigitExtraction_caseId = STR_VIS(name='caseId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CaseId')))
    _DialedDigitExtraction_accessingElementId = STR_VIS(name='accessingElementId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'AccessingElementId')))
    _DialedDigitExtraction_eventTime = TIME_GEN(name='eventTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'EventTime')))
    _DialedDigitExtraction_callId = SEQ(name='callId', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CallId')))
    _DialedDigitExtraction_digits = STR_VIS(name='digits', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DialedDigitExtraction_digits._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=[], er=[])
    DialedDigitExtraction._cont = ASN1Dict([
        ('caseId', _DialedDigitExtraction_caseId),
        ('accessingElementId', _DialedDigitExtraction_accessingElementId),
        ('eventTime', _DialedDigitExtraction_eventTime),
        ('callId', _DialedDigitExtraction_callId),
        ('digits', _DialedDigitExtraction_digits),
        ])
    DialedDigitExtraction._ext = []
    
    #-----< MediaReport >-----#
    MediaReport = SEQ(name='MediaReport', mode=MODE_TYPE)
    _MediaReport_caseId = STR_VIS(name='caseId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CaseId')))
    _MediaReport_accessingElementId = STR_VIS(name='accessingElementId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'AccessingElementId')))
    _MediaReport_eventTime = TIME_GEN(name='eventTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'EventTime')))
    _MediaReport_callId = SEQ(name='callId', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CallId')))
    _MediaReport_subject = STR_UTF8(name='subject', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'SDP')), opt=True)
    _MediaReport_associate = STR_UTF8(name='associate', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'SDP')), opt=True)
    MediaReport._cont = ASN1Dict([
        ('caseId', _MediaReport_caseId),
        ('accessingElementId', _MediaReport_accessingElementId),
        ('eventTime', _MediaReport_eventTime),
        ('callId', _MediaReport_callId),
        ('subject', _MediaReport_subject),
        ('associate', _MediaReport_associate),
        ])
    MediaReport._ext = []
    
    #-----< NetworkSignal >-----#
    NetworkSignal = SEQ(name='NetworkSignal', mode=MODE_TYPE)
    _NetworkSignal_caseId = STR_VIS(name='caseId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CaseId')))
    _NetworkSignal_accessingElementId = STR_VIS(name='accessingElementId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'AccessingElementId')))
    _NetworkSignal_eventTime = TIME_GEN(name='eventTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'EventTime')))
    _NetworkSignal_callId = SEQ(name='callId', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CallId')))
    _NetworkSignal_alertingSignal = ENUM(name='alertingSignal', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'AlertingSignal')), opt=True)
    _NetworkSignal_subjectAudibleSignal = ENUM(name='subjectAudibleSignal', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'AudibleSignal')), opt=True)
    _NetworkSignal_terminalDisplayInfo = SEQ(name='terminalDisplayInfo', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'TerminalDisplayInfo')), opt=True)
    _NetworkSignal_other = STR_VIS(name='other', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _NetworkSignal_other._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=[], er=[])
    _NetworkSignal_signaledToPartyId = SEQ(name='signaledToPartyId', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'PartyId')))
    NetworkSignal._cont = ASN1Dict([
        ('caseId', _NetworkSignal_caseId),
        ('accessingElementId', _NetworkSignal_accessingElementId),
        ('eventTime', _NetworkSignal_eventTime),
        ('callId', _NetworkSignal_callId),
        ('alertingSignal', _NetworkSignal_alertingSignal),
        ('subjectAudibleSignal', _NetworkSignal_subjectAudibleSignal),
        ('terminalDisplayInfo', _NetworkSignal_terminalDisplayInfo),
        ('other', _NetworkSignal_other),
        ('signaledToPartyId', _NetworkSignal_signaledToPartyId),
        ])
    NetworkSignal._ext = []
    
    #-----< Origination >-----#
    Origination = SEQ(name='Origination', mode=MODE_TYPE)
    _Origination_caseId = STR_VIS(name='caseId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CaseId')))
    _Origination_accessingElementId = STR_VIS(name='accessingElementId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'AccessingElementId')))
    _Origination_eventTime = TIME_GEN(name='eventTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'EventTime')))
    _Origination_callId = SEQ(name='callId', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CallId')))
    _Origination_calling = SEQ(name='calling', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'PartyId')))
    _Origination_called = SEQ(name='called', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'PartyId')), opt=True)
    _Origination_input = CHOICE(name='input', mode=MODE_TYPE)
    __Origination_input_userinput = STR_VIS(name='userinput', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Origination_input_userinput._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=[], er=[])
    __Origination_input_translationinput = STR_VIS(name='translationinput', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Origination_input_translationinput._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=[], er=[])
    _Origination_input._cont = ASN1Dict([
        ('userinput', __Origination_input_userinput),
        ('translationinput', __Origination_input_translationinput),
        ])
    _Origination_input._ext = []
    _Origination_reserved0 = NULL(name='reserved0', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Origination_transitCarrierId = STR_VIS(name='transitCarrierId', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'TransitCarrierId')), opt=True)
    Origination._cont = ASN1Dict([
        ('caseId', _Origination_caseId),
        ('accessingElementId', _Origination_accessingElementId),
        ('eventTime', _Origination_eventTime),
        ('callId', _Origination_callId),
        ('calling', _Origination_calling),
        ('called', _Origination_called),
        ('input', _Origination_input),
        ('reserved0', _Origination_reserved0),
        ('transitCarrierId', _Origination_transitCarrierId),
        ])
    Origination._ext = []
    
    #-----< Redirection >-----#
    Redirection = SEQ(name='Redirection', mode=MODE_TYPE)
    _Redirection_caseId = STR_VIS(name='caseId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CaseId')))
    _Redirection_accessingElementId = STR_VIS(name='accessingElementId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'AccessingElementId')))
    _Redirection_eventTime = TIME_GEN(name='eventTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'EventTime')))
    _Redirection_old = SEQ(name='old', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CallId')))
    _Redirection_redirectedto = SEQ(name='redirectedto', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'PartyId')))
    _Redirection_transitCarrierId = STR_VIS(name='transitCarrierId', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'TransitCarrierId')), opt=True)
    _Redirection_reserved0 = NULL(name='reserved0', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Redirection_reserved1 = NULL(name='reserved1', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Redirection_new = SEQ(name='new', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CallId')), opt=True)
    _Redirection_redirectedfrom = SEQ(name='redirectedfrom', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'PartyId')), opt=True)
    Redirection._cont = ASN1Dict([
        ('caseId', _Redirection_caseId),
        ('accessingElementId', _Redirection_accessingElementId),
        ('eventTime', _Redirection_eventTime),
        ('old', _Redirection_old),
        ('redirectedto', _Redirection_redirectedto),
        ('transitCarrierId', _Redirection_transitCarrierId),
        ('reserved0', _Redirection_reserved0),
        ('reserved1', _Redirection_reserved1),
        ('new', _Redirection_new),
        ('redirectedfrom', _Redirection_redirectedfrom),
        ])
    Redirection._ext = []
    
    #-----< Release >-----#
    Release = SEQ(name='Release', mode=MODE_TYPE)
    _Release_caseId = STR_VIS(name='caseId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CaseId')))
    _Release_accessingElementId = STR_VIS(name='accessingElementId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'AccessingElementId')))
    _Release_eventTime = TIME_GEN(name='eventTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'EventTime')))
    _Release_callId = SEQ(name='callId', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CallId')))
    Release._cont = ASN1Dict([
        ('caseId', _Release_caseId),
        ('accessingElementId', _Release_accessingElementId),
        ('eventTime', _Release_eventTime),
        ('callId', _Release_callId),
        ])
    Release._ext = []
    
    #-----< ServiceInstance >-----#
    ServiceInstance = SEQ(name='ServiceInstance', mode=MODE_TYPE)
    _ServiceInstance_caseId = STR_VIS(name='caseId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CaseId')))
    _ServiceInstance_accessingElementId = STR_VIS(name='accessingElementId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'AccessingElementId')))
    _ServiceInstance_eventTime = TIME_GEN(name='eventTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'EventTime')))
    _ServiceInstance_callId = SEQ(name='callId', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CallId')))
    _ServiceInstance_relatedCallId = SEQ(name='relatedCallId', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CallId')), opt=True)
    _ServiceInstance_serviceName = STR_VIS(name='serviceName', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ServiceInstance_serviceName._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=[], er=[])
    _ServiceInstance_firstCallCalling = SEQ(name='firstCallCalling', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'PartyId')), opt=True)
    _ServiceInstance_secondCallCalling = SEQ(name='secondCallCalling', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'PartyId')), opt=True)
    _ServiceInstance_called = SEQ(name='called', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'PartyId')), opt=True)
    _ServiceInstance_calling = SEQ(name='calling', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'PartyId')), opt=True)
    ServiceInstance._cont = ASN1Dict([
        ('caseId', _ServiceInstance_caseId),
        ('accessingElementId', _ServiceInstance_accessingElementId),
        ('eventTime', _ServiceInstance_eventTime),
        ('callId', _ServiceInstance_callId),
        ('relatedCallId', _ServiceInstance_relatedCallId),
        ('serviceName', _ServiceInstance_serviceName),
        ('firstCallCalling', _ServiceInstance_firstCallCalling),
        ('secondCallCalling', _ServiceInstance_secondCallCalling),
        ('called', _ServiceInstance_called),
        ('calling', _ServiceInstance_calling),
        ])
    ServiceInstance._ext = []
    
    #-----< SubjectSignal >-----#
    SubjectSignal = SEQ(name='SubjectSignal', mode=MODE_TYPE)
    _SubjectSignal_caseId = STR_VIS(name='caseId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CaseId')))
    _SubjectSignal_accessingElementId = STR_VIS(name='accessingElementId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'AccessingElementId')))
    _SubjectSignal_eventTime = TIME_GEN(name='eventTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'EventTime')))
    _SubjectSignal_callId = SEQ(name='callId', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CallId')), opt=True)
    _SubjectSignal_signal = SEQ(name='signal', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __SubjectSignal_signal_switchhookFlash = STR_VIS(name='switchhookFlash', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SubjectSignal_signal_switchhookFlash._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=[], er=[])
    __SubjectSignal_signal_dialedDigits = STR_VIS(name='dialedDigits', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SubjectSignal_signal_dialedDigits._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=[], er=[])
    __SubjectSignal_signal_featureKey = STR_VIS(name='featureKey', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SubjectSignal_signal_featureKey._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=[], er=[])
    __SubjectSignal_signal_otherSignalingInformation = STR_VIS(name='otherSignalingInformation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SubjectSignal_signal_otherSignalingInformation._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=128)], ev=[], er=[])
    _SubjectSignal_signal._cont = ASN1Dict([
        ('switchhookFlash', __SubjectSignal_signal_switchhookFlash),
        ('dialedDigits', __SubjectSignal_signal_dialedDigits),
        ('featureKey', __SubjectSignal_signal_featureKey),
        ('otherSignalingInformation', __SubjectSignal_signal_otherSignalingInformation),
        ])
    _SubjectSignal_signal._ext = []
    _SubjectSignal_signaledFromPartyId = SEQ(name='signaledFromPartyId', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'PartyId')))
    SubjectSignal._cont = ASN1Dict([
        ('caseId', _SubjectSignal_caseId),
        ('accessingElementId', _SubjectSignal_accessingElementId),
        ('eventTime', _SubjectSignal_eventTime),
        ('callId', _SubjectSignal_callId),
        ('signal', _SubjectSignal_signal),
        ('signaledFromPartyId', _SubjectSignal_signaledFromPartyId),
        ])
    SubjectSignal._ext = []
    
    #-----< TerminationAttempt >-----#
    TerminationAttempt = SEQ(name='TerminationAttempt', mode=MODE_TYPE)
    _TerminationAttempt_caseId = STR_VIS(name='caseId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CaseId')))
    _TerminationAttempt_accessingElementId = STR_VIS(name='accessingElementId', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'AccessingElementId')))
    _TerminationAttempt_eventTime = TIME_GEN(name='eventTime', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'EventTime')))
    _TerminationAttempt_callId = SEQ(name='callId', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CallId')))
    _TerminationAttempt_calling = SEQ(name='calling', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'PartyId')), opt=True)
    _TerminationAttempt_called = SEQ(name='called', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'PartyId')), opt=True)
    _TerminationAttempt_reserved0 = NULL(name='reserved0', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TerminationAttempt_redirectedFromInfo = SEQ(name='redirectedFromInfo', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'RedirectedFromInfo')), opt=True)
    TerminationAttempt._cont = ASN1Dict([
        ('caseId', _TerminationAttempt_caseId),
        ('accessingElementId', _TerminationAttempt_accessingElementId),
        ('eventTime', _TerminationAttempt_eventTime),
        ('callId', _TerminationAttempt_callId),
        ('calling', _TerminationAttempt_calling),
        ('called', _TerminationAttempt_called),
        ('reserved0', _TerminationAttempt_reserved0),
        ('redirectedFromInfo', _TerminationAttempt_redirectedFromInfo),
        ])
    TerminationAttempt._ext = []
    
    #-----< AccessingElementId >-----#
    AccessingElementId = STR_VIS(name='AccessingElementId', mode=MODE_TYPE)
    AccessingElementId._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=15)], ev=[], er=[])
    
    #-----< AlertingSignal >-----#
    AlertingSignal = ENUM(name='AlertingSignal', mode=MODE_TYPE)
    AlertingSignal._cont = ASN1Dict([('notUsed', 0), ('alertingPattern0', 1), ('alertingPattern1', 2), ('alertingPattern2', 3), ('alertingPattern3', 4), ('alertingPattern4', 5), ('callWaitingPattern1', 6), ('callWaitingPattern2', 7), ('callWaitingPattern3', 8), ('callWaitingPattern4', 9), ('bargeInTone', 10), ('alertingPattern5', 11), ('alertingPattern6', 12), ('alertingPattern7', 13), ('alertingPattern8', 14), ('alertingPattern9', 15)])
    AlertingSignal._ext = []
    
    #-----< AudibleSignal >-----#
    AudibleSignal = ENUM(name='AudibleSignal', mode=MODE_TYPE)
    AudibleSignal._cont = ASN1Dict([('notUsed', 0), ('dialTone', 1), ('recallDialTone', 2), ('ringbackTone', 3), ('reorderTone', 4), ('busyTone', 5), ('confirmationTone', 6), ('expensiveRouteTone', 7), ('messageWaitingTone', 8), ('receiverOffHookTone', 9), ('specialInfoTone', 10), ('denialTone', 11), ('interceptTone', 12), ('answerTone', 13), ('tonesOff', 14), ('pipTone', 15), ('abbreviatedIntercept', 16), ('abbreviatedCongestion', 17), ('warningTone', 18), ('dialToneBurst', 19), ('numberUnObtainableTone', 20), ('authenticationFailureTone', 21)])
    AudibleSignal._ext = []
    
    #-----< CallId >-----#
    CallId = SEQ(name='CallId', mode=MODE_TYPE)
    _CallId_sequencenumber = STR_VIS(name='sequencenumber', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CallId_sequencenumber._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=[], er=[])
    _CallId_systemidentity = STR_VIS(name='systemidentity', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CallId_systemidentity._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=15)], ev=[], er=[])
    CallId._cont = ASN1Dict([
        ('sequencenumber', _CallId_sequencenumber),
        ('systemidentity', _CallId_systemidentity),
        ])
    CallId._ext = []
    
    #-----< CaseId >-----#
    CaseId = STR_VIS(name='CaseId', mode=MODE_TYPE)
    CaseId._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=[], er=[])
    
    #-----< CCCId >-----#
    CCCId = CHOICE(name='CCCId', mode=MODE_TYPE)
    _CCCId_combCCC = STR_VIS(name='combCCC', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CCCId_combCCC._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=20)], ev=[], er=[])
    _CCCId_sepCCCpair = SEQ(name='sepCCCpair', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __CCCId_sepCCCpair_sepXmitCCC = STR_VIS(name='sepXmitCCC', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __CCCId_sepCCCpair_sepXmitCCC._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=20)], ev=[], er=[])
    __CCCId_sepCCCpair_sepRecvCCC = STR_VIS(name='sepRecvCCC', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __CCCId_sepCCCpair_sepRecvCCC._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=20)], ev=[], er=[])
    _CCCId_sepCCCpair._cont = ASN1Dict([
        ('sepXmitCCC', __CCCId_sepCCCpair_sepXmitCCC),
        ('sepRecvCCC', __CCCId_sepCCCpair_sepRecvCCC),
        ])
    _CCCId_sepCCCpair._ext = []
    CCCId._cont = ASN1Dict([
        ('combCCC', _CCCId_combCCC),
        ('sepCCCpair', _CCCId_sepCCCpair),
        ])
    CCCId._ext = []
    
    #-----< EventTime >-----#
    EventTime = TIME_GEN(name='EventTime', mode=MODE_TYPE)
    
    #-----< FlowDirection >-----#
    FlowDirection = ENUM(name='FlowDirection', mode=MODE_TYPE)
    FlowDirection._cont = ASN1Dict([('downstream', 1), ('upstream', 2), ('downstream-and-upstream', 3)])
    FlowDirection._ext = []
    
    #-----< PartyId >-----#
    PartyId = SEQ(name='PartyId', mode=MODE_TYPE)
    _PartyId_reserved0 = NULL(name='reserved0', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PartyId_reserved1 = NULL(name='reserved1', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PartyId_reserved2 = NULL(name='reserved2', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PartyId_reserved3 = NULL(name='reserved3', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PartyId_reserved4 = NULL(name='reserved4', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PartyId_reserved5 = NULL(name='reserved5', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PartyId_dn = STR_VIS(name='dn', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PartyId_dn._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=15)], ev=[], er=[])
    _PartyId_userProvided = STR_VIS(name='userProvided', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PartyId_userProvided._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=15)], ev=[], er=[])
    _PartyId_reserved6 = NULL(name='reserved6', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PartyId_reserved7 = NULL(name='reserved7', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PartyId_ipAddress = STR_VIS(name='ipAddress', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PartyId_ipAddress._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=[], er=[])
    _PartyId_reserved8 = NULL(name='reserved8', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PartyId_trunkId = STR_VIS(name='trunkId', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PartyId_trunkId._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=[], er=[])
    _PartyId_reserved9 = NULL(name='reserved9', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PartyId_genericAddress = STR_VIS(name='genericAddress', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PartyId_genericAddress._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=[], er=[])
    _PartyId_genericDigits = STR_VIS(name='genericDigits', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PartyId_genericDigits._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=[], er=[])
    _PartyId_genericName = STR_VIS(name='genericName', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PartyId_genericName._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=48)], ev=[], er=[])
    _PartyId_port = STR_VIS(name='port', mode=MODE_TYPE, tag=(17, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PartyId_port._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=[], er=[])
    _PartyId_context = STR_VIS(name='context', mode=MODE_TYPE, tag=(18, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PartyId_context._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=32)], ev=[], er=[])
    PartyId._cont = ASN1Dict([
        ('reserved0', _PartyId_reserved0),
        ('reserved1', _PartyId_reserved1),
        ('reserved2', _PartyId_reserved2),
        ('reserved3', _PartyId_reserved3),
        ('reserved4', _PartyId_reserved4),
        ('reserved5', _PartyId_reserved5),
        ('dn', _PartyId_dn),
        ('userProvided', _PartyId_userProvided),
        ('reserved6', _PartyId_reserved6),
        ('reserved7', _PartyId_reserved7),
        ('ipAddress', _PartyId_ipAddress),
        ('reserved8', _PartyId_reserved8),
        ('trunkId', _PartyId_trunkId),
        ('reserved9', _PartyId_reserved9),
        ('genericAddress', _PartyId_genericAddress),
        ('genericDigits', _PartyId_genericDigits),
        ('genericName', _PartyId_genericName),
        ('port', _PartyId_port),
        ('context', _PartyId_context),
        ])
    PartyId._ext = []
    
    #-----< RedirectedFromInfo >-----#
    RedirectedFromInfo = SEQ(name='RedirectedFromInfo', mode=MODE_TYPE)
    _RedirectedFromInfo_lastRedirecting = SEQ(name='lastRedirecting', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'PartyId')), opt=True)
    _RedirectedFromInfo_originalCalled = SEQ(name='originalCalled', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'PartyId')), opt=True)
    _RedirectedFromInfo_numRedirections = INT(name='numRedirections', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _RedirectedFromInfo_numRedirections._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=100)], ev=[], er=[])
    RedirectedFromInfo._cont = ASN1Dict([
        ('lastRedirecting', _RedirectedFromInfo_lastRedirecting),
        ('originalCalled', _RedirectedFromInfo_originalCalled),
        ('numRedirections', _RedirectedFromInfo_numRedirections),
        ])
    RedirectedFromInfo._ext = []
    
    #-----< ResourceState >-----#
    ResourceState = ENUM(name='ResourceState', mode=MODE_TYPE)
    ResourceState._cont = ASN1Dict([('reserved', 1), ('committed', 2)])
    ResourceState._ext = []
    
    #-----< SDP >-----#
    SDP = STR_UTF8(name='SDP', mode=MODE_TYPE)
    
    #-----< TerminalDisplayInfo >-----#
    TerminalDisplayInfo = SEQ(name='TerminalDisplayInfo', mode=MODE_TYPE)
    _TerminalDisplayInfo_generalDisplay = STR_VIS(name='generalDisplay', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _TerminalDisplayInfo_generalDisplay._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=80)], ev=[], er=[])
    _TerminalDisplayInfo_calledNumber = STR_VIS(name='calledNumber', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _TerminalDisplayInfo_calledNumber._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=40)], ev=[], er=[])
    _TerminalDisplayInfo_callingNumber = STR_VIS(name='callingNumber', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _TerminalDisplayInfo_callingNumber._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=40)], ev=[], er=[])
    _TerminalDisplayInfo_callingName = STR_VIS(name='callingName', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _TerminalDisplayInfo_callingName._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=40)], ev=[], er=[])
    _TerminalDisplayInfo_originalCalledNumber = STR_VIS(name='originalCalledNumber', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _TerminalDisplayInfo_originalCalledNumber._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=40)], ev=[], er=[])
    _TerminalDisplayInfo_lastRedirectingNumber = STR_VIS(name='lastRedirectingNumber', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _TerminalDisplayInfo_lastRedirectingNumber._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=40)], ev=[], er=[])
    _TerminalDisplayInfo_redirectingName = STR_VIS(name='redirectingName', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _TerminalDisplayInfo_redirectingName._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=40)], ev=[], er=[])
    _TerminalDisplayInfo_redirectingReason = STR_VIS(name='redirectingReason', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _TerminalDisplayInfo_redirectingReason._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=40)], ev=[], er=[])
    _TerminalDisplayInfo_messageWaitingNotif = STR_VIS(name='messageWaitingNotif', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _TerminalDisplayInfo_messageWaitingNotif._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=40)], ev=[], er=[])
    TerminalDisplayInfo._cont = ASN1Dict([
        ('generalDisplay', _TerminalDisplayInfo_generalDisplay),
        ('calledNumber', _TerminalDisplayInfo_calledNumber),
        ('callingNumber', _TerminalDisplayInfo_callingNumber),
        ('callingName', _TerminalDisplayInfo_callingName),
        ('originalCalledNumber', _TerminalDisplayInfo_originalCalledNumber),
        ('lastRedirectingNumber', _TerminalDisplayInfo_lastRedirectingNumber),
        ('redirectingName', _TerminalDisplayInfo_redirectingName),
        ('redirectingReason', _TerminalDisplayInfo_redirectingReason),
        ('messageWaitingNotif', _TerminalDisplayInfo_messageWaitingNotif),
        ])
    TerminalDisplayInfo._ext = []
    
    #-----< TransitCarrierId >-----#
    TransitCarrierId = STR_VIS(name='TransitCarrierId', mode=MODE_TYPE)
    TransitCarrierId._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=3, ub=7)], ev=[], er=[])
    
    _all_ = [
        ProtocolVersion,
        _CdcPdu_protocolVersion,
        _CdcPdu_message,
        CdcPdu,
        _Message_answer,
        _Message_ccclose,
        _Message_ccopen,
        _Message_reserved0,
        _Message_origination,
        _Message_reserved1,
        _Message_redirection,
        _Message_release,
        _Message_reserved2,
        _Message_terminationattempt,
        _Message_reserved,
        _Message_ccchange,
        _Message_reserved3,
        _Message_reserved4,
        _Message_dialeddigitextraction,
        _Message_networksignal,
        _Message_subjectsignal,
        _Message_mediareport,
        _Message_serviceinstance,
        _Message_confpartychange,
        Message,
        _Answer_caseId,
        _Answer_accessingElementId,
        _Answer_eventTime,
        _Answer_callId,
        _Answer_answering,
        Answer,
        _CCChange_caseId,
        _CCChange_accessingElementId,
        _CCChange_eventTime,
        _CCChange_callId,
        _CCChange_cCCId,
        _CCChange_subject,
        _CCChange_associate,
        _CCChange_flowDirection,
        _CCChange_resourceState,
        CCChange,
        _CCClose_caseId,
        _CCClose_accessingElementId,
        _CCClose_eventTime,
        _CCClose_cCCId,
        _CCClose_flowDirection,
        CCClose,
        _CCOpen_caseId,
        _CCOpen_accessingElementId,
        _CCOpen_eventTime,
        ___CCOpen_ccOpenOption_ccOpenTime__item_,
        __CCOpen_ccOpenOption_ccOpenTime,
        __CCOpen_ccOpenOption_reserved0,
        _CCOpen_ccOpenOption,
        _CCOpen_cCCId,
        _CCOpen_subject,
        _CCOpen_associate,
        _CCOpen_flowDirection,
        CCOpen,
        _ConferencePartyChange_caseId,
        _ConferencePartyChange_accessingElementId,
        _ConferencePartyChange_eventTime,
        _ConferencePartyChange_callId,
        ____ConferencePartyChange_communicating__item__partyId__item_,
        ___ConferencePartyChange_communicating__item__partyId,
        ___ConferencePartyChange_communicating__item__cCCId,
        __ConferencePartyChange_communicating__item_,
        _ConferencePartyChange_communicating,
        ____ConferencePartyChange_removed__item__partyId__item_,
        ___ConferencePartyChange_removed__item__partyId,
        ___ConferencePartyChange_removed__item__cCCId,
        __ConferencePartyChange_removed__item_,
        _ConferencePartyChange_removed,
        ____ConferencePartyChange_joined__item__partyId__item_,
        ___ConferencePartyChange_joined__item__partyId,
        ___ConferencePartyChange_joined__item__cCCId,
        __ConferencePartyChange_joined__item_,
        _ConferencePartyChange_joined,
        ConferencePartyChange,
        _DialedDigitExtraction_caseId,
        _DialedDigitExtraction_accessingElementId,
        _DialedDigitExtraction_eventTime,
        _DialedDigitExtraction_callId,
        _DialedDigitExtraction_digits,
        DialedDigitExtraction,
        _MediaReport_caseId,
        _MediaReport_accessingElementId,
        _MediaReport_eventTime,
        _MediaReport_callId,
        _MediaReport_subject,
        _MediaReport_associate,
        MediaReport,
        _NetworkSignal_caseId,
        _NetworkSignal_accessingElementId,
        _NetworkSignal_eventTime,
        _NetworkSignal_callId,
        _NetworkSignal_alertingSignal,
        _NetworkSignal_subjectAudibleSignal,
        _NetworkSignal_terminalDisplayInfo,
        _NetworkSignal_other,
        _NetworkSignal_signaledToPartyId,
        NetworkSignal,
        _Origination_caseId,
        _Origination_accessingElementId,
        _Origination_eventTime,
        _Origination_callId,
        _Origination_calling,
        _Origination_called,
        __Origination_input_userinput,
        __Origination_input_translationinput,
        _Origination_input,
        _Origination_reserved0,
        _Origination_transitCarrierId,
        Origination,
        _Redirection_caseId,
        _Redirection_accessingElementId,
        _Redirection_eventTime,
        _Redirection_old,
        _Redirection_redirectedto,
        _Redirection_transitCarrierId,
        _Redirection_reserved0,
        _Redirection_reserved1,
        _Redirection_new,
        _Redirection_redirectedfrom,
        Redirection,
        _Release_caseId,
        _Release_accessingElementId,
        _Release_eventTime,
        _Release_callId,
        Release,
        _ServiceInstance_caseId,
        _ServiceInstance_accessingElementId,
        _ServiceInstance_eventTime,
        _ServiceInstance_callId,
        _ServiceInstance_relatedCallId,
        _ServiceInstance_serviceName,
        _ServiceInstance_firstCallCalling,
        _ServiceInstance_secondCallCalling,
        _ServiceInstance_called,
        _ServiceInstance_calling,
        ServiceInstance,
        _SubjectSignal_caseId,
        _SubjectSignal_accessingElementId,
        _SubjectSignal_eventTime,
        _SubjectSignal_callId,
        __SubjectSignal_signal_switchhookFlash,
        __SubjectSignal_signal_dialedDigits,
        __SubjectSignal_signal_featureKey,
        __SubjectSignal_signal_otherSignalingInformation,
        _SubjectSignal_signal,
        _SubjectSignal_signaledFromPartyId,
        SubjectSignal,
        _TerminationAttempt_caseId,
        _TerminationAttempt_accessingElementId,
        _TerminationAttempt_eventTime,
        _TerminationAttempt_callId,
        _TerminationAttempt_calling,
        _TerminationAttempt_called,
        _TerminationAttempt_reserved0,
        _TerminationAttempt_redirectedFromInfo,
        TerminationAttempt,
        AccessingElementId,
        AlertingSignal,
        AudibleSignal,
        _CallId_sequencenumber,
        _CallId_systemidentity,
        CallId,
        CaseId,
        _CCCId_combCCC,
        __CCCId_sepCCCpair_sepXmitCCC,
        __CCCId_sepCCCpair_sepRecvCCC,
        _CCCId_sepCCCpair,
        CCCId,
        EventTime,
        FlowDirection,
        _PartyId_reserved0,
        _PartyId_reserved1,
        _PartyId_reserved2,
        _PartyId_reserved3,
        _PartyId_reserved4,
        _PartyId_reserved5,
        _PartyId_dn,
        _PartyId_userProvided,
        _PartyId_reserved6,
        _PartyId_reserved7,
        _PartyId_ipAddress,
        _PartyId_reserved8,
        _PartyId_trunkId,
        _PartyId_reserved9,
        _PartyId_genericAddress,
        _PartyId_genericDigits,
        _PartyId_genericName,
        _PartyId_port,
        _PartyId_context,
        PartyId,
        _RedirectedFromInfo_lastRedirecting,
        _RedirectedFromInfo_originalCalled,
        _RedirectedFromInfo_numRedirections,
        RedirectedFromInfo,
        ResourceState,
        SDP,
        _TerminalDisplayInfo_generalDisplay,
        _TerminalDisplayInfo_calledNumber,
        _TerminalDisplayInfo_callingNumber,
        _TerminalDisplayInfo_callingName,
        _TerminalDisplayInfo_originalCalledNumber,
        _TerminalDisplayInfo_lastRedirectingNumber,
        _TerminalDisplayInfo_redirectingName,
        _TerminalDisplayInfo_redirectingReason,
        _TerminalDisplayInfo_messageWaitingNotif,
        TerminalDisplayInfo,
        TransitCarrierId,
    ]

class TS101909201:

    _name_  = 'TS101909201'
    _oid_   = [0, 4, 0, 1909, 20, 1, 0]
    
    _obj_ = [
        'TARGETACTIVITYMONITOR-1',
        'TTRAFFIC',
        'CTTRAFFIC',
        'DirectionType',
        'UserSignalType',
        'IRITransactionType',
        'LocationType',
        'LIIDType',
        ]
    _type_ = [
        'TARGETACTIVITYMONITOR-1',
        'TTRAFFIC',
        'CTTRAFFIC',
        'DirectionType',
        'UserSignalType',
        'IRITransactionType',
        'LocationType',
        'LIIDType',
        ]
    _set_ = [
        ]
    _val_ = [
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< TARGETACTIVITYMONITOR-1 >-----#
    TARGETACTIVITYMONITOR_1 = SEQ(name='TARGETACTIVITYMONITOR-1', mode=MODE_TYPE)
    _TARGETACTIVITYMONITOR_1_version = INT(name='version', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=1)
    _TARGETACTIVITYMONITOR_1_lIInstanceid = INT(name='lIInstanceid', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TS101909201', 'LIIDType')))
    _TARGETACTIVITYMONITOR_1_timestamp = TIME_UTC(name='timestamp', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TARGETACTIVITYMONITOR_1_targetLocation = CHOICE(name='targetLocation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('TS101909201', 'LocationType')))
    _TARGETACTIVITYMONITOR_1_direction = ENUM(name='direction', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TS101909201', 'DirectionType')))
    _TARGETACTIVITYMONITOR_1_iRITransaction = ENUM(name='iRITransaction', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TS101909201', 'IRITransactionType')), default='iRIreport')
    _TARGETACTIVITYMONITOR_1_iRITransactionNumber = INT(name='iRITransactionNumber', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TARGETACTIVITYMONITOR_1_userSignal = CHOICE(name='userSignal', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('TS101909201', 'UserSignalType')))
    _TARGETACTIVITYMONITOR_1_cryptoCheckSum = BIT_STR(name='cryptoCheckSum', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    TARGETACTIVITYMONITOR_1._cont = ASN1Dict([
        ('version', _TARGETACTIVITYMONITOR_1_version),
        ('lIInstanceid', _TARGETACTIVITYMONITOR_1_lIInstanceid),
        ('timestamp', _TARGETACTIVITYMONITOR_1_timestamp),
        ('targetLocation', _TARGETACTIVITYMONITOR_1_targetLocation),
        ('direction', _TARGETACTIVITYMONITOR_1_direction),
        ('iRITransaction', _TARGETACTIVITYMONITOR_1_iRITransaction),
        ('iRITransactionNumber', _TARGETACTIVITYMONITOR_1_iRITransactionNumber),
        ('userSignal', _TARGETACTIVITYMONITOR_1_userSignal),
        ('cryptoCheckSum', _TARGETACTIVITYMONITOR_1_cryptoCheckSum),
        ])
    TARGETACTIVITYMONITOR_1._ext = None
    
    #-----< TTRAFFIC >-----#
    TTRAFFIC = SEQ(name='TTRAFFIC', mode=MODE_TYPE)
    _TTRAFFIC_version = INT(name='version', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=1)
    _TTRAFFIC_lIInstanceid = INT(name='lIInstanceid', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TS101909201', 'LIIDType')))
    _TTRAFFIC_iRITransactionNumber = INT(name='iRITransactionNumber', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TTRAFFIC_trafficPacket = BIT_STR(name='trafficPacket', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TTRAFFIC_cryptoChecksum = BIT_STR(name='cryptoChecksum', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    TTRAFFIC._cont = ASN1Dict([
        ('version', _TTRAFFIC_version),
        ('lIInstanceid', _TTRAFFIC_lIInstanceid),
        ('iRITransactionNumber', _TTRAFFIC_iRITransactionNumber),
        ('trafficPacket', _TTRAFFIC_trafficPacket),
        ('cryptoChecksum', _TTRAFFIC_cryptoChecksum),
        ])
    TTRAFFIC._ext = None
    
    #-----< CTTRAFFIC >-----#
    CTTRAFFIC = SEQ(name='CTTRAFFIC', mode=MODE_TYPE)
    _CTTRAFFIC_version = INT(name='version', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=1)
    _CTTRAFFIC_lIInstanceid = INT(name='lIInstanceid', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('TS101909201', 'LIIDType')))
    _CTTRAFFIC_correspondentCount = INT(name='correspondentCount', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CTTRAFFIC_iRITransactionNumber = INT(name='iRITransactionNumber', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CTTRAFFIC_trafficPacket = BIT_STR(name='trafficPacket', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CTTRAFFIC_cryptoChecksum = BIT_STR(name='cryptoChecksum', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    CTTRAFFIC._cont = ASN1Dict([
        ('version', _CTTRAFFIC_version),
        ('lIInstanceid', _CTTRAFFIC_lIInstanceid),
        ('correspondentCount', _CTTRAFFIC_correspondentCount),
        ('iRITransactionNumber', _CTTRAFFIC_iRITransactionNumber),
        ('trafficPacket', _CTTRAFFIC_trafficPacket),
        ('cryptoChecksum', _CTTRAFFIC_cryptoChecksum),
        ])
    CTTRAFFIC._ext = None
    
    #-----< DirectionType >-----#
    DirectionType = ENUM(name='DirectionType', mode=MODE_TYPE)
    DirectionType._cont = ASN1Dict([('toTarget', 0), ('fromTarget', 1), ('unknown', 2)])
    DirectionType._ext = None
    
    #-----< UserSignalType >-----#
    UserSignalType = CHOICE(name='UserSignalType', mode=MODE_TYPE)
    _UserSignalType_copySignal = BIT_STR(name='copySignal', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _UserSignalType_interpretedSignal = INT(name='interpretedSignal', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _UserSignalType_cdcPdu = SEQ(name='cdcPdu', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('PCESP', 'CdcPdu')))
    UserSignalType._cont = ASN1Dict([
        ('copySignal', _UserSignalType_copySignal),
        ('interpretedSignal', _UserSignalType_interpretedSignal),
        ('cdcPdu', _UserSignalType_cdcPdu),
        ])
    UserSignalType._ext = None
    
    #-----< IRITransactionType >-----#
    IRITransactionType = ENUM(name='IRITransactionType', mode=MODE_TYPE)
    IRITransactionType._cont = ASN1Dict([('iRIbegin', 0), ('iRIcontinue', 1), ('iRIend', 2), ('iRIreport', 3)])
    IRITransactionType._ext = None
    
    #-----< LocationType >-----#
    LocationType = CHOICE(name='LocationType', mode=MODE_TYPE)
    _LocationType_geodeticData = BIT_STR(name='geodeticData', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LocationType_nameAddress = STR_PRINT(name='nameAddress', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _LocationType_nameAddress._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=100)], ev=None, er=[])
    LocationType._cont = ASN1Dict([
        ('geodeticData', _LocationType_geodeticData),
        ('nameAddress', _LocationType_nameAddress),
        ])
    LocationType._ext = None
    
    #-----< LIIDType >-----#
    LIIDType = INT(name='LIIDType', mode=MODE_TYPE)
    LIIDType._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    _all_ = [
        _TARGETACTIVITYMONITOR_1_version,
        _TARGETACTIVITYMONITOR_1_lIInstanceid,
        _TARGETACTIVITYMONITOR_1_timestamp,
        _TARGETACTIVITYMONITOR_1_targetLocation,
        _TARGETACTIVITYMONITOR_1_direction,
        _TARGETACTIVITYMONITOR_1_iRITransaction,
        _TARGETACTIVITYMONITOR_1_iRITransactionNumber,
        _TARGETACTIVITYMONITOR_1_userSignal,
        _TARGETACTIVITYMONITOR_1_cryptoCheckSum,
        TARGETACTIVITYMONITOR_1,
        _TTRAFFIC_version,
        _TTRAFFIC_lIInstanceid,
        _TTRAFFIC_iRITransactionNumber,
        _TTRAFFIC_trafficPacket,
        _TTRAFFIC_cryptoChecksum,
        TTRAFFIC,
        _CTTRAFFIC_version,
        _CTTRAFFIC_lIInstanceid,
        _CTTRAFFIC_correspondentCount,
        _CTTRAFFIC_iRITransactionNumber,
        _CTTRAFFIC_trafficPacket,
        _CTTRAFFIC_cryptoChecksum,
        CTTRAFFIC,
        DirectionType,
        _UserSignalType_copySignal,
        _UserSignalType_interpretedSignal,
        _UserSignalType_cdcPdu,
        UserSignalType,
        IRITransactionType,
        _LocationType_geodeticData,
        _LocationType_nameAddress,
        LocationType,
        LIIDType,
    ]

class Umts_HI3_PS:

    _name_  = 'Umts-HI3-PS'
    _oid_   = [0, 4, 0, 2, 2, 4, 2, 7, 0]
    
    _obj_ = [
        'lawfulInterceptDomainId',
        'threeGPPSUBDomainId',
        'hi3DomainId',
        'CC-PDU',
        'ULIC-header',
        'Version',
        'TPDU-direction',
        'National-HI3-ASN1parameters',
        'ICE-type',
        ]
    _type_ = [
        'CC-PDU',
        'ULIC-header',
        'Version',
        'TPDU-direction',
        'National-HI3-ASN1parameters',
        'ICE-type',
        ]
    _set_ = [
        ]
    _val_ = [
        'lawfulInterceptDomainId',
        'threeGPPSUBDomainId',
        'hi3DomainId',
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< lawfulInterceptDomainId >-----#
    lawfulInterceptDomainId = OID(name='lawfulInterceptDomainId', mode=MODE_VALUE)
    lawfulInterceptDomainId._val = (0, 4, 0, 2, 2)
    
    #-----< threeGPPSUBDomainId >-----#
    threeGPPSUBDomainId = OID(name='threeGPPSUBDomainId', mode=MODE_VALUE)
    threeGPPSUBDomainId._val = (0, 4, 0, 2, 2, 4)
    
    #-----< hi3DomainId >-----#
    hi3DomainId = OID(name='hi3DomainId', mode=MODE_VALUE)
    hi3DomainId._val = (0, 4, 0, 2, 2, 4, 2, 7, 0)
    
    #-----< CC-PDU >-----#
    CC_PDU = SEQ(name='CC-PDU', mode=MODE_TYPE)
    _CC_PDU_uLIC_header = SEQ(name='uLIC-header', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Umts-HI3-PS', 'ULIC-header')))
    _CC_PDU_payload = OCT_STR(name='payload', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    CC_PDU._cont = ASN1Dict([
        ('uLIC-header', _CC_PDU_uLIC_header),
        ('payload', _CC_PDU_payload),
        ])
    CC_PDU._ext = None
    
    #-----< ULIC-header >-----#
    ULIC_header = SEQ(name='ULIC-header', mode=MODE_TYPE)
    _ULIC_header_hi3DomainId = OID(name='hi3DomainId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ULIC_header_version = ENUM(name='version', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Umts-HI3-PS', 'Version')))
    _ULIC_header_lIID = OCT_STR(name='lIID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'LawfulInterceptionIdentifier')), opt=True)
    _ULIC_header_correlation_Number = OCT_STR(name='correlation-Number', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'GPRSCorrelationNumber')))
    _ULIC_header_timeStamp = CHOICE(name='timeStamp', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'TimeStamp')), opt=True)
    _ULIC_header_sequence_number = INT(name='sequence-number', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ULIC_header_sequence_number._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _ULIC_header_t_PDU_direction = ENUM(name='t-PDU-direction', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Umts-HI3-PS', 'TPDU-direction')))
    _ULIC_header_national_HI3_ASN1parameters = SEQ(name='national-HI3-ASN1parameters', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Umts-HI3-PS', 'National-HI3-ASN1parameters')), opt=True)
    _ULIC_header_ice_type = ENUM(name='ice-type', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('Umts-HI3-PS', 'ICE-type')), opt=True)
    ULIC_header._cont = ASN1Dict([
        ('hi3DomainId', _ULIC_header_hi3DomainId),
        ('version', _ULIC_header_version),
        ('lIID', _ULIC_header_lIID),
        ('correlation-Number', _ULIC_header_correlation_Number),
        ('timeStamp', _ULIC_header_timeStamp),
        ('sequence-number', _ULIC_header_sequence_number),
        ('t-PDU-direction', _ULIC_header_t_PDU_direction),
        ('national-HI3-ASN1parameters', _ULIC_header_national_HI3_ASN1parameters),
        ('ice-type', _ULIC_header_ice_type),
        ])
    ULIC_header._ext = ['national-HI3-ASN1parameters', 'ice-type']
    
    #-----< Version >-----#
    Version = ENUM(name='Version', mode=MODE_TYPE)
    Version._cont = ASN1Dict([('version1', 1), ('version3', 3), ('lastVersion', 8)])
    Version._ext = ['version3', 'lastVersion']
    
    #-----< TPDU-direction >-----#
    TPDU_direction = ENUM(name='TPDU-direction', mode=MODE_TYPE)
    TPDU_direction._cont = ASN1Dict([('from-target', 1), ('to-target', 2), ('unknown', 3)])
    TPDU_direction._ext = None
    
    #-----< National-HI3-ASN1parameters >-----#
    National_HI3_ASN1parameters = SEQ(name='National-HI3-ASN1parameters', mode=MODE_TYPE)
    _National_HI3_ASN1parameters_countryCode = STR_PRINT(name='countryCode', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _National_HI3_ASN1parameters_countryCode._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    National_HI3_ASN1parameters._cont = ASN1Dict([
        ('countryCode', _National_HI3_ASN1parameters_countryCode),
        ])
    National_HI3_ASN1parameters._ext = []
    
    #-----< ICE-type >-----#
    ICE_type = ENUM(name='ICE-type', mode=MODE_TYPE)
    ICE_type._cont = ASN1Dict([('sgsn', 1), ('ggsn', 2)])
    ICE_type._ext = []
    
    _all_ = [
        lawfulInterceptDomainId,
        threeGPPSUBDomainId,
        hi3DomainId,
        _CC_PDU_uLIC_header,
        _CC_PDU_payload,
        CC_PDU,
        _ULIC_header_hi3DomainId,
        _ULIC_header_version,
        _ULIC_header_lIID,
        _ULIC_header_correlation_Number,
        _ULIC_header_timeStamp,
        _ULIC_header_sequence_number,
        _ULIC_header_t_PDU_direction,
        _ULIC_header_national_HI3_ASN1parameters,
        _ULIC_header_ice_type,
        ULIC_header,
        Version,
        TPDU_direction,
        _National_HI3_ASN1parameters_countryCode,
        National_HI3_ASN1parameters,
        ICE_type,
    ]

class UmtsHI2Operations:

    _name_  = 'UmtsHI2Operations'
    _oid_   = [0, 4, 0, 2, 2, 4, 1, 16, 1]
    
    _obj_ = [
        'lawfulInterceptDomainId',
        'threeGPPSUBDomainId',
        'hi2DomainId',
        'UmtsIRIsContent',
        'UmtsIRISequence',
        'UmtsIRIContent',
        'IRI-Parameters',
        'PANI-Header-Info',
        'PANI-Location',
        'PartyInformation',
        'Location',
        'GlobalCellID',
        'Rai',
        'Sai',
        'GSMLocation',
        'MapDatum',
        'UMTSLocation',
        'GeographicalCoordinates',
        'GA-Point',
        'GA-PointWithUnCertainty',
        'maxNrOfPoints',
        'GA-Polygon',
        'CivicAddress',
        'XmlCivicAddress',
        'DetailedCivicAddress',
        'SMS-report',
        'GPRSCorrelationNumber',
        'CorrelationValues',
        'IMS-VoIP-Correlation',
        'IRI-to-CC-Correlation',
        'IRI-to-IRI-Correlation',
        'GPRSEvent',
        'CSREvent',
        'IMSevent',
        'Current-Previous-Systems',
        'Change-Of-Target-Identity',
        'Requesting-Node-Type',
        'Services-Data-Information',
        'GPRS-parameters',
        'GPRSOperationErrorCode',
        'LDIevent',
        'UmtsQos',
        'MediaDecryption-info',
        'CCKeyInfo',
        'MediaSecFailureIndication',
        'PacketDataHeaderInformation',
        'PacketDataHeaderReport',
        'PacketDataHeaderMapped',
        'TPDU-direction',
        'PacketDataHeaderCopy',
        'PacketDataSummaryReport',
        'PacketFlowSummary',
        'ReportReason',
        'ReportInterval',
        'ExtendedLocParameters',
        'LocationErrorCode',
        'PTCEncryptionInfo',
        'PTC',
        'AccessPolicyType',
        'AlertIndicator',
        'AssociatePresenceStatus',
        'PresenceType',
        'Emergency',
        'EmergencyGroupState',
        'PTCType',
        'FloorActivity',
        'GroupAuthRule',
        'ImminentPerilInd',
        'ImplicitFloorReq',
        'InitiationCause',
        'IPADirection',
        'ListManagementAction',
        'ListManagementType',
        'Priority-Level',
        'PreEstStatus',
        'PTCAddress',
        'RegistrationRequest',
        'RegistrationOutcome',
        'RTPSetting',
        'Port-Number',
        'TalkburstControlSetting',
        'Talk-burst-reason-code',
        ]
    _type_ = [
        'UmtsIRIsContent',
        'UmtsIRISequence',
        'UmtsIRIContent',
        'IRI-Parameters',
        'PANI-Header-Info',
        'PANI-Location',
        'PartyInformation',
        'Location',
        'GlobalCellID',
        'Rai',
        'Sai',
        'GSMLocation',
        'MapDatum',
        'UMTSLocation',
        'GeographicalCoordinates',
        'GA-Point',
        'GA-PointWithUnCertainty',
        'GA-Polygon',
        'CivicAddress',
        'XmlCivicAddress',
        'DetailedCivicAddress',
        'SMS-report',
        'GPRSCorrelationNumber',
        'CorrelationValues',
        'IMS-VoIP-Correlation',
        'IRI-to-CC-Correlation',
        'IRI-to-IRI-Correlation',
        'GPRSEvent',
        'CSREvent',
        'IMSevent',
        'Current-Previous-Systems',
        'Change-Of-Target-Identity',
        'Requesting-Node-Type',
        'Services-Data-Information',
        'GPRS-parameters',
        'GPRSOperationErrorCode',
        'LDIevent',
        'UmtsQos',
        'MediaDecryption-info',
        'CCKeyInfo',
        'MediaSecFailureIndication',
        'PacketDataHeaderInformation',
        'PacketDataHeaderReport',
        'PacketDataHeaderMapped',
        'TPDU-direction',
        'PacketDataHeaderCopy',
        'PacketDataSummaryReport',
        'PacketFlowSummary',
        'ReportReason',
        'ReportInterval',
        'ExtendedLocParameters',
        'LocationErrorCode',
        'PTCEncryptionInfo',
        'PTC',
        'AccessPolicyType',
        'AlertIndicator',
        'AssociatePresenceStatus',
        'PresenceType',
        'Emergency',
        'EmergencyGroupState',
        'PTCType',
        'FloorActivity',
        'GroupAuthRule',
        'ImminentPerilInd',
        'ImplicitFloorReq',
        'InitiationCause',
        'IPADirection',
        'ListManagementAction',
        'ListManagementType',
        'Priority-Level',
        'PreEstStatus',
        'PTCAddress',
        'RegistrationRequest',
        'RegistrationOutcome',
        'RTPSetting',
        'Port-Number',
        'TalkburstControlSetting',
        'Talk-burst-reason-code',
        ]
    _set_ = [
        ]
    _val_ = [
        'lawfulInterceptDomainId',
        'threeGPPSUBDomainId',
        'hi2DomainId',
        'maxNrOfPoints',
        ]
    _class_ = [
        ]
    _param_ = [
        ]
    
    #-----< lawfulInterceptDomainId >-----#
    lawfulInterceptDomainId = OID(name='lawfulInterceptDomainId', mode=MODE_VALUE)
    lawfulInterceptDomainId._val = (0, 4, 0, 2, 2)
    
    #-----< threeGPPSUBDomainId >-----#
    threeGPPSUBDomainId = OID(name='threeGPPSUBDomainId', mode=MODE_VALUE)
    threeGPPSUBDomainId._val = (0, 4, 0, 2, 2, 4)
    
    #-----< hi2DomainId >-----#
    hi2DomainId = OID(name='hi2DomainId', mode=MODE_VALUE)
    hi2DomainId._val = (0, 4, 0, 2, 2, 4, 1, 16, 1)
    
    #-----< UmtsIRIsContent >-----#
    UmtsIRIsContent = CHOICE(name='UmtsIRIsContent', mode=MODE_TYPE)
    _UmtsIRIsContent_umtsiRIContent = CHOICE(name='umtsiRIContent', mode=MODE_TYPE, typeref=ASN1RefType(('UmtsHI2Operations', 'UmtsIRIContent')))
    _UmtsIRIsContent_umtsIRISequence = SEQ_OF(name='umtsIRISequence', mode=MODE_TYPE, typeref=ASN1RefType(('UmtsHI2Operations', 'UmtsIRISequence')))
    UmtsIRIsContent._cont = ASN1Dict([
        ('umtsiRIContent', _UmtsIRIsContent_umtsiRIContent),
        ('umtsIRISequence', _UmtsIRIsContent_umtsIRISequence),
        ])
    UmtsIRIsContent._ext = None
    
    #-----< UmtsIRISequence >-----#
    UmtsIRISequence = SEQ_OF(name='UmtsIRISequence', mode=MODE_TYPE)
    _UmtsIRISequence__item_ = CHOICE(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('UmtsHI2Operations', 'UmtsIRIContent')))
    UmtsIRISequence._cont = _UmtsIRISequence__item_
    
    #-----< UmtsIRIContent >-----#
    UmtsIRIContent = CHOICE(name='UmtsIRIContent', mode=MODE_TYPE)
    _UmtsIRIContent_iRI_Begin_record = SEQ(name='iRI-Begin-record', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'IRI-Parameters')))
    _UmtsIRIContent_iRI_End_record = SEQ(name='iRI-End-record', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'IRI-Parameters')))
    _UmtsIRIContent_iRI_Continue_record = SEQ(name='iRI-Continue-record', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'IRI-Parameters')))
    _UmtsIRIContent_iRI_Report_record = SEQ(name='iRI-Report-record', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'IRI-Parameters')))
    UmtsIRIContent._cont = ASN1Dict([
        ('iRI-Begin-record', _UmtsIRIContent_iRI_Begin_record),
        ('iRI-End-record', _UmtsIRIContent_iRI_End_record),
        ('iRI-Continue-record', _UmtsIRIContent_iRI_Continue_record),
        ('iRI-Report-record', _UmtsIRIContent_iRI_Report_record),
        ])
    UmtsIRIContent._ext = None
    
    #-----< IRI-Parameters >-----#
    IRI_Parameters = SEQ(name='IRI-Parameters', mode=MODE_TYPE)
    _IRI_Parameters_hi2DomainId = OID(name='hi2DomainId', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _IRI_Parameters_iRIversion = ENUM(name='iRIversion', mode=MODE_TYPE, tag=(23, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_iRIversion._cont = ASN1Dict([('version2', 2), ('version3', 3), ('version4', 4), ('version6', 6), ('lastVersion', 8)])
    _IRI_Parameters_iRIversion._ext = ['version3', 'version4', 'version6', 'lastVersion']
    _IRI_Parameters_lawfulInterceptionIdentifier = OCT_STR(name='lawfulInterceptionIdentifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'LawfulInterceptionIdentifier')))
    _IRI_Parameters_timeStamp = CHOICE(name='timeStamp', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'TimeStamp')))
    _IRI_Parameters_initiator = ENUM(name='initiator', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_initiator._cont = ASN1Dict([('not-Available', 0), ('originating-Target', 1), ('terminating-Target', 2)])
    _IRI_Parameters_initiator._ext = []
    _IRI_Parameters_locationOfTheTarget = SEQ(name='locationOfTheTarget', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'Location')), opt=True)
    _IRI_Parameters_partyInformation = SET_OF(name='partyInformation', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __IRI_Parameters_partyInformation__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('UmtsHI2Operations', 'PartyInformation')))
    _IRI_Parameters_partyInformation._cont = __IRI_Parameters_partyInformation__item_
    _IRI_Parameters_partyInformation._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=10)], ev=None, er=[])
    _IRI_Parameters_serviceCenterAddress = SEQ(name='serviceCenterAddress', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PartyInformation')), opt=True)
    _IRI_Parameters_sMS = SEQ(name='sMS', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'SMS-report')), opt=True)
    _IRI_Parameters_national_Parameters = SET_OF(name='national-Parameters', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'National-Parameters')), opt=True)
    _IRI_Parameters_gPRSCorrelationNumber = OCT_STR(name='gPRSCorrelationNumber', mode=MODE_TYPE, tag=(18, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'GPRSCorrelationNumber')), opt=True)
    _IRI_Parameters_gPRSevent = ENUM(name='gPRSevent', mode=MODE_TYPE, tag=(20, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'GPRSEvent')), opt=True)
    _IRI_Parameters_sgsnAddress = CHOICE(name='sgsnAddress', mode=MODE_TYPE, tag=(21, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'DataNodeAddress')), opt=True)
    _IRI_Parameters_gPRSOperationErrorCode = OCT_STR(name='gPRSOperationErrorCode', mode=MODE_TYPE, tag=(22, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'GPRSOperationErrorCode')), opt=True)
    _IRI_Parameters_ggsnAddress = CHOICE(name='ggsnAddress', mode=MODE_TYPE, tag=(24, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'DataNodeAddress')), opt=True)
    _IRI_Parameters_qOS = CHOICE(name='qOS', mode=MODE_TYPE, tag=(25, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'UmtsQos')), opt=True)
    _IRI_Parameters_networkIdentifier = SEQ(name='networkIdentifier', mode=MODE_TYPE, tag=(26, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'Network-Identifier')), opt=True)
    _IRI_Parameters_sMSOriginatingAddress = CHOICE(name='sMSOriginatingAddress', mode=MODE_TYPE, tag=(27, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'DataNodeAddress')), opt=True)
    _IRI_Parameters_sMSTerminatingAddress = CHOICE(name='sMSTerminatingAddress', mode=MODE_TYPE, tag=(28, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'DataNodeAddress')), opt=True)
    _IRI_Parameters_iMSevent = ENUM(name='iMSevent', mode=MODE_TYPE, tag=(29, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'IMSevent')), opt=True)
    _IRI_Parameters_sIPMessage = OCT_STR(name='sIPMessage', mode=MODE_TYPE, tag=(30, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_servingSGSN_number = OCT_STR(name='servingSGSN-number', mode=MODE_TYPE, tag=(31, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_servingSGSN_number._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=20)], ev=None, er=[])
    _IRI_Parameters_servingSGSN_address = OCT_STR(name='servingSGSN-address', mode=MODE_TYPE, tag=(32, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_servingSGSN_address._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=5, ub=17)], ev=None, er=[])
    _IRI_Parameters_ldiEvent = ENUM(name='ldiEvent', mode=MODE_TYPE, tag=(34, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'LDIevent')), opt=True)
    _IRI_Parameters_correlation = CHOICE(name='correlation', mode=MODE_TYPE, tag=(35, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'CorrelationValues')), opt=True)
    _IRI_Parameters_mediaDecryption_info = SEQ_OF(name='mediaDecryption-info', mode=MODE_TYPE, tag=(36, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'MediaDecryption-info')), opt=True)
    _IRI_Parameters_servingS4_SGSN_address = OCT_STR(name='servingS4-SGSN-address', mode=MODE_TYPE, tag=(37, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_sipMessageHeaderOffer = OCT_STR(name='sipMessageHeaderOffer', mode=MODE_TYPE, tag=(38, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_sipMessageHeaderAnswer = OCT_STR(name='sipMessageHeaderAnswer', mode=MODE_TYPE, tag=(39, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_sdpOffer = OCT_STR(name='sdpOffer', mode=MODE_TYPE, tag=(40, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_sdpAnswer = OCT_STR(name='sdpAnswer', mode=MODE_TYPE, tag=(41, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_uLITimestamp = OCT_STR(name='uLITimestamp', mode=MODE_TYPE, tag=(42, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_uLITimestamp._const_sz = ASN1Set(rv=[8], rr=[], ev=None, er=[])
    _IRI_Parameters_packetDataHeaderInformation = CHOICE(name='packetDataHeaderInformation', mode=MODE_TYPE, tag=(43, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PacketDataHeaderInformation')), opt=True)
    _IRI_Parameters_mediaSecFailureIndication = ENUM(name='mediaSecFailureIndication', mode=MODE_TYPE, tag=(44, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'MediaSecFailureIndication')), opt=True)
    _IRI_Parameters_pANI_Header_Info = SEQ_OF(name='pANI-Header-Info', mode=MODE_TYPE, tag=(45, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __IRI_Parameters_pANI_Header_Info__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('UmtsHI2Operations', 'PANI-Header-Info')))
    _IRI_Parameters_pANI_Header_Info._cont = __IRI_Parameters_pANI_Header_Info__item_
    _IRI_Parameters_imsVoIP = SET_OF(name='imsVoIP', mode=MODE_TYPE, tag=(46, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'IMS-VoIP-Correlation')), opt=True)
    _IRI_Parameters_xCAPmessage = OCT_STR(name='xCAPmessage', mode=MODE_TYPE, tag=(47, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_ccUnavailableReason = STR_PRINT(name='ccUnavailableReason', mode=MODE_TYPE, tag=(48, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_carrierSpecificData = OCT_STR(name='carrierSpecificData', mode=MODE_TYPE, tag=(49, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_current_Previous_Systems = SEQ(name='current-Previous-Systems', mode=MODE_TYPE, tag=(50, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'Current-Previous-Systems')), opt=True)
    _IRI_Parameters_change_Of_Target_Identity = SEQ(name='change-Of-Target-Identity', mode=MODE_TYPE, tag=(51, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'Change-Of-Target-Identity')), opt=True)
    _IRI_Parameters_requesting_Network_Identifier = OCT_STR(name='requesting-Network-Identifier', mode=MODE_TYPE, tag=(52, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_requesting_Node_Type = ENUM(name='requesting-Node-Type', mode=MODE_TYPE, tag=(53, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'Requesting-Node-Type')), opt=True)
    _IRI_Parameters_serving_System_Identifier = OCT_STR(name='serving-System-Identifier', mode=MODE_TYPE, tag=(54, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _IRI_Parameters_extendedLocParameters = SEQ(name='extendedLocParameters', mode=MODE_TYPE, tag=(55, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'ExtendedLocParameters')), opt=True)
    _IRI_Parameters_locationErrorCode = INT(name='locationErrorCode', mode=MODE_TYPE, tag=(56, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'LocationErrorCode')), opt=True)
    _IRI_Parameters_cSREvent = ENUM(name='cSREvent', mode=MODE_TYPE, tag=(57, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'CSREvent')), opt=True)
    _IRI_Parameters_ptc = SEQ(name='ptc', mode=MODE_TYPE, tag=(58, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PTC')), opt=True)
    _IRI_Parameters_ptcEncryption = SEQ(name='ptcEncryption', mode=MODE_TYPE, tag=(59, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PTCEncryptionInfo')), opt=True)
    _IRI_Parameters_national_HI2_ASN1parameters = SEQ(name='national-HI2-ASN1parameters', mode=MODE_TYPE, tag=(255, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'National-HI2-ASN1parameters')), opt=True)
    IRI_Parameters._cont = ASN1Dict([
        ('hi2DomainId', _IRI_Parameters_hi2DomainId),
        ('iRIversion', _IRI_Parameters_iRIversion),
        ('lawfulInterceptionIdentifier', _IRI_Parameters_lawfulInterceptionIdentifier),
        ('timeStamp', _IRI_Parameters_timeStamp),
        ('initiator', _IRI_Parameters_initiator),
        ('locationOfTheTarget', _IRI_Parameters_locationOfTheTarget),
        ('partyInformation', _IRI_Parameters_partyInformation),
        ('serviceCenterAddress', _IRI_Parameters_serviceCenterAddress),
        ('sMS', _IRI_Parameters_sMS),
        ('national-Parameters', _IRI_Parameters_national_Parameters),
        ('gPRSCorrelationNumber', _IRI_Parameters_gPRSCorrelationNumber),
        ('gPRSevent', _IRI_Parameters_gPRSevent),
        ('sgsnAddress', _IRI_Parameters_sgsnAddress),
        ('gPRSOperationErrorCode', _IRI_Parameters_gPRSOperationErrorCode),
        ('ggsnAddress', _IRI_Parameters_ggsnAddress),
        ('qOS', _IRI_Parameters_qOS),
        ('networkIdentifier', _IRI_Parameters_networkIdentifier),
        ('sMSOriginatingAddress', _IRI_Parameters_sMSOriginatingAddress),
        ('sMSTerminatingAddress', _IRI_Parameters_sMSTerminatingAddress),
        ('iMSevent', _IRI_Parameters_iMSevent),
        ('sIPMessage', _IRI_Parameters_sIPMessage),
        ('servingSGSN-number', _IRI_Parameters_servingSGSN_number),
        ('servingSGSN-address', _IRI_Parameters_servingSGSN_address),
        ('ldiEvent', _IRI_Parameters_ldiEvent),
        ('correlation', _IRI_Parameters_correlation),
        ('mediaDecryption-info', _IRI_Parameters_mediaDecryption_info),
        ('servingS4-SGSN-address', _IRI_Parameters_servingS4_SGSN_address),
        ('sipMessageHeaderOffer', _IRI_Parameters_sipMessageHeaderOffer),
        ('sipMessageHeaderAnswer', _IRI_Parameters_sipMessageHeaderAnswer),
        ('sdpOffer', _IRI_Parameters_sdpOffer),
        ('sdpAnswer', _IRI_Parameters_sdpAnswer),
        ('uLITimestamp', _IRI_Parameters_uLITimestamp),
        ('packetDataHeaderInformation', _IRI_Parameters_packetDataHeaderInformation),
        ('mediaSecFailureIndication', _IRI_Parameters_mediaSecFailureIndication),
        ('pANI-Header-Info', _IRI_Parameters_pANI_Header_Info),
        ('imsVoIP', _IRI_Parameters_imsVoIP),
        ('xCAPmessage', _IRI_Parameters_xCAPmessage),
        ('ccUnavailableReason', _IRI_Parameters_ccUnavailableReason),
        ('carrierSpecificData', _IRI_Parameters_carrierSpecificData),
        ('current-Previous-Systems', _IRI_Parameters_current_Previous_Systems),
        ('change-Of-Target-Identity', _IRI_Parameters_change_Of_Target_Identity),
        ('requesting-Network-Identifier', _IRI_Parameters_requesting_Network_Identifier),
        ('requesting-Node-Type', _IRI_Parameters_requesting_Node_Type),
        ('serving-System-Identifier', _IRI_Parameters_serving_System_Identifier),
        ('extendedLocParameters', _IRI_Parameters_extendedLocParameters),
        ('locationErrorCode', _IRI_Parameters_locationErrorCode),
        ('cSREvent', _IRI_Parameters_cSREvent),
        ('ptc', _IRI_Parameters_ptc),
        ('ptcEncryption', _IRI_Parameters_ptcEncryption),
        ('national-HI2-ASN1parameters', _IRI_Parameters_national_HI2_ASN1parameters),
        ])
    IRI_Parameters._ext = ['ldiEvent', 'correlation', 'mediaDecryption-info', 'servingS4-SGSN-address', 'sipMessageHeaderOffer', 'sipMessageHeaderAnswer', 'sdpOffer', 'sdpAnswer', 'uLITimestamp', 'packetDataHeaderInformation', 'mediaSecFailureIndication', 'pANI-Header-Info', 'imsVoIP', 'xCAPmessage', 'ccUnavailableReason', 'carrierSpecificData', 'current-Previous-Systems', 'change-Of-Target-Identity', 'requesting-Network-Identifier', 'requesting-Node-Type', 'serving-System-Identifier', 'extendedLocParameters', 'locationErrorCode', 'cSREvent', 'ptc', 'ptcEncryption', 'national-HI2-ASN1parameters']
    
    #-----< PANI-Header-Info >-----#
    PANI_Header_Info = SEQ(name='PANI-Header-Info', mode=MODE_TYPE)
    _PANI_Header_Info_access_Type = OCT_STR(name='access-Type', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PANI_Header_Info_access_Class = OCT_STR(name='access-Class', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PANI_Header_Info_network_Provided = NULL(name='network-Provided', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PANI_Header_Info_pANI_Location = SEQ(name='pANI-Location', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PANI-Location')), opt=True)
    PANI_Header_Info._cont = ASN1Dict([
        ('access-Type', _PANI_Header_Info_access_Type),
        ('access-Class', _PANI_Header_Info_access_Class),
        ('network-Provided', _PANI_Header_Info_network_Provided),
        ('pANI-Location', _PANI_Header_Info_pANI_Location),
        ])
    PANI_Header_Info._ext = []
    
    #-----< PANI-Location >-----#
    PANI_Location = SEQ(name='PANI-Location', mode=MODE_TYPE)
    _PANI_Location_raw_Location = OCT_STR(name='raw-Location', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PANI_Location_location = SEQ(name='location', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'Location')), opt=True)
    PANI_Location._cont = ASN1Dict([
        ('raw-Location', _PANI_Location_raw_Location),
        ('location', _PANI_Location_location),
        ])
    PANI_Location._ext = []
    
    #-----< PartyInformation >-----#
    PartyInformation = SEQ(name='PartyInformation', mode=MODE_TYPE)
    _PartyInformation_party_Qualifier = ENUM(name='party-Qualifier', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PartyInformation_party_Qualifier._cont = ASN1Dict([('gPRS-Target', 3)])
    _PartyInformation_party_Qualifier._ext = []
    _PartyInformation_partyIdentity = SEQ(name='partyIdentity', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __PartyInformation_partyIdentity_imei = OCT_STR(name='imei', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PartyInformation_partyIdentity_imei._const_sz = ASN1Set(rv=[8], rr=[], ev=None, er=[])
    __PartyInformation_partyIdentity_imsi = OCT_STR(name='imsi', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PartyInformation_partyIdentity_imsi._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=3, ub=8)], ev=None, er=[])
    __PartyInformation_partyIdentity_msISDN = OCT_STR(name='msISDN', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PartyInformation_partyIdentity_msISDN._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=9)], ev=None, er=[])
    __PartyInformation_partyIdentity_e164_Format = OCT_STR(name='e164-Format', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PartyInformation_partyIdentity_e164_Format._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    __PartyInformation_partyIdentity_sip_uri = OCT_STR(name='sip-uri', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PartyInformation_partyIdentity_tel_uri = OCT_STR(name='tel-uri', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PartyInformation_partyIdentity_x_3GPP_Asserted_Identity = OCT_STR(name='x-3GPP-Asserted-Identity', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __PartyInformation_partyIdentity_xUI = OCT_STR(name='xUI', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PartyInformation_partyIdentity._cont = ASN1Dict([
        ('imei', __PartyInformation_partyIdentity_imei),
        ('imsi', __PartyInformation_partyIdentity_imsi),
        ('msISDN', __PartyInformation_partyIdentity_msISDN),
        ('e164-Format', __PartyInformation_partyIdentity_e164_Format),
        ('sip-uri', __PartyInformation_partyIdentity_sip_uri),
        ('tel-uri', __PartyInformation_partyIdentity_tel_uri),
        ('x-3GPP-Asserted-Identity', __PartyInformation_partyIdentity_x_3GPP_Asserted_Identity),
        ('xUI', __PartyInformation_partyIdentity_xUI),
        ])
    _PartyInformation_partyIdentity._ext = ['tel-uri', 'x-3GPP-Asserted-Identity', 'xUI']
    _PartyInformation_services_Data_Information = SEQ(name='services-Data-Information', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'Services-Data-Information')), opt=True)
    PartyInformation._cont = ASN1Dict([
        ('party-Qualifier', _PartyInformation_party_Qualifier),
        ('partyIdentity', _PartyInformation_partyIdentity),
        ('services-Data-Information', _PartyInformation_services_Data_Information),
        ])
    PartyInformation._ext = []
    
    #-----< Location >-----#
    Location = SEQ(name='Location', mode=MODE_TYPE)
    _Location_e164_Number = OCT_STR(name='e164-Number', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Location_e164_Number._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=25)], ev=None, er=[])
    _Location_globalCellID = OCT_STR(name='globalCellID', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'GlobalCellID')), opt=True)
    _Location_rAI = OCT_STR(name='rAI', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'Rai')), opt=True)
    _Location_gsmLocation = CHOICE(name='gsmLocation', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'GSMLocation')), opt=True)
    _Location_umtsLocation = CHOICE(name='umtsLocation', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'UMTSLocation')), opt=True)
    _Location_sAI = OCT_STR(name='sAI', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'Sai')), opt=True)
    _Location_oldRAI = OCT_STR(name='oldRAI', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'Rai')), opt=True)
    _Location_tAI = OCT_STR(name='tAI', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Location_tAI._const_sz = ASN1Set(rv=[6], rr=[], ev=None, er=[])
    _Location_eCGI = OCT_STR(name='eCGI', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Location_eCGI._const_sz = ASN1Set(rv=[8], rr=[], ev=None, er=[])
    _Location_civicAddress = CHOICE(name='civicAddress', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'CivicAddress')), opt=True)
    _Location_operatorSpecificInfo = OCT_STR(name='operatorSpecificInfo', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Location_uELocationTimestamp = CHOICE(name='uELocationTimestamp', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __Location_uELocationTimestamp_timestamp = CHOICE(name='timestamp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'TimeStamp')))
    __Location_uELocationTimestamp_timestampUnknown = NULL(name='timestampUnknown', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Location_uELocationTimestamp._cont = ASN1Dict([
        ('timestamp', __Location_uELocationTimestamp_timestamp),
        ('timestampUnknown', __Location_uELocationTimestamp_timestampUnknown),
        ])
    _Location_uELocationTimestamp._ext = []
    Location._cont = ASN1Dict([
        ('e164-Number', _Location_e164_Number),
        ('globalCellID', _Location_globalCellID),
        ('rAI', _Location_rAI),
        ('gsmLocation', _Location_gsmLocation),
        ('umtsLocation', _Location_umtsLocation),
        ('sAI', _Location_sAI),
        ('oldRAI', _Location_oldRAI),
        ('tAI', _Location_tAI),
        ('eCGI', _Location_eCGI),
        ('civicAddress', _Location_civicAddress),
        ('operatorSpecificInfo', _Location_operatorSpecificInfo),
        ('uELocationTimestamp', _Location_uELocationTimestamp),
        ])
    Location._ext = ['oldRAI', 'tAI', 'eCGI', 'civicAddress', 'operatorSpecificInfo', 'uELocationTimestamp']
    
    #-----< GlobalCellID >-----#
    GlobalCellID = OCT_STR(name='GlobalCellID', mode=MODE_TYPE)
    GlobalCellID._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=5, ub=7)], ev=None, er=[])
    
    #-----< Rai >-----#
    Rai = OCT_STR(name='Rai', mode=MODE_TYPE)
    Rai._const_sz = ASN1Set(rv=[6], rr=[], ev=None, er=[])
    
    #-----< Sai >-----#
    Sai = OCT_STR(name='Sai', mode=MODE_TYPE)
    Sai._const_sz = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    
    #-----< GSMLocation >-----#
    GSMLocation = CHOICE(name='GSMLocation', mode=MODE_TYPE)
    _GSMLocation_geoCoordinates = SEQ(name='geoCoordinates', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GSMLocation_geoCoordinates_latitude = STR_PRINT(name='latitude', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GSMLocation_geoCoordinates_latitude._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=7, ub=10)], ev=None, er=[])
    __GSMLocation_geoCoordinates_longitude = STR_PRINT(name='longitude', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GSMLocation_geoCoordinates_longitude._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=8, ub=11)], ev=None, er=[])
    __GSMLocation_geoCoordinates_mapDatum = ENUM(name='mapDatum', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'MapDatum')), default='wGS84')
    __GSMLocation_geoCoordinates_azimuth = INT(name='azimuth', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __GSMLocation_geoCoordinates_azimuth._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=359)], ev=None, er=[])
    _GSMLocation_geoCoordinates._cont = ASN1Dict([
        ('latitude', __GSMLocation_geoCoordinates_latitude),
        ('longitude', __GSMLocation_geoCoordinates_longitude),
        ('mapDatum', __GSMLocation_geoCoordinates_mapDatum),
        ('azimuth', __GSMLocation_geoCoordinates_azimuth),
        ])
    _GSMLocation_geoCoordinates._ext = ['azimuth']
    _GSMLocation_utmCoordinates = SEQ(name='utmCoordinates', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GSMLocation_utmCoordinates_utm_East = STR_PRINT(name='utm-East', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GSMLocation_utmCoordinates_utm_East._const_sz = ASN1Set(rv=[10], rr=[], ev=None, er=[])
    __GSMLocation_utmCoordinates_utm_North = STR_PRINT(name='utm-North', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GSMLocation_utmCoordinates_utm_North._const_sz = ASN1Set(rv=[7], rr=[], ev=None, er=[])
    __GSMLocation_utmCoordinates_mapDatum = ENUM(name='mapDatum', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'MapDatum')), default='wGS84')
    __GSMLocation_utmCoordinates_azimuth = INT(name='azimuth', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __GSMLocation_utmCoordinates_azimuth._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=359)], ev=None, er=[])
    _GSMLocation_utmCoordinates._cont = ASN1Dict([
        ('utm-East', __GSMLocation_utmCoordinates_utm_East),
        ('utm-North', __GSMLocation_utmCoordinates_utm_North),
        ('mapDatum', __GSMLocation_utmCoordinates_mapDatum),
        ('azimuth', __GSMLocation_utmCoordinates_azimuth),
        ])
    _GSMLocation_utmCoordinates._ext = ['azimuth']
    _GSMLocation_utmRefCoordinates = SEQ(name='utmRefCoordinates', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __GSMLocation_utmRefCoordinates_utmref_string = STR_PRINT(name='utmref-string', mode=MODE_TYPE)
    __GSMLocation_utmRefCoordinates_utmref_string._const_sz = ASN1Set(rv=[13], rr=[], ev=None, er=[])
    __GSMLocation_utmRefCoordinates_mapDatum = ENUM(name='mapDatum', mode=MODE_TYPE, typeref=ASN1RefType(('UmtsHI2Operations', 'MapDatum')), default='wGS84')
    _GSMLocation_utmRefCoordinates._cont = ASN1Dict([
        ('utmref-string', __GSMLocation_utmRefCoordinates_utmref_string),
        ('mapDatum', __GSMLocation_utmRefCoordinates_mapDatum),
        ])
    _GSMLocation_utmRefCoordinates._ext = []
    _GSMLocation_wGS84Coordinates = OCT_STR(name='wGS84Coordinates', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    GSMLocation._cont = ASN1Dict([
        ('geoCoordinates', _GSMLocation_geoCoordinates),
        ('utmCoordinates', _GSMLocation_utmCoordinates),
        ('utmRefCoordinates', _GSMLocation_utmRefCoordinates),
        ('wGS84Coordinates', _GSMLocation_wGS84Coordinates),
        ])
    GSMLocation._ext = None
    
    #-----< MapDatum >-----#
    MapDatum = ENUM(name='MapDatum', mode=MODE_TYPE)
    MapDatum._cont = ASN1Dict([('wGS84', 0), ('wGS72', 1), ('eD50', 2)])
    MapDatum._ext = []
    
    #-----< UMTSLocation >-----#
    UMTSLocation = CHOICE(name='UMTSLocation', mode=MODE_TYPE)
    _UMTSLocation_point = SEQ(name='point', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'GA-Point')))
    _UMTSLocation_pointWithUnCertainty = SEQ(name='pointWithUnCertainty', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'GA-PointWithUnCertainty')))
    _UMTSLocation_polygon = SEQ_OF(name='polygon', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'GA-Polygon')))
    UMTSLocation._cont = ASN1Dict([
        ('point', _UMTSLocation_point),
        ('pointWithUnCertainty', _UMTSLocation_pointWithUnCertainty),
        ('polygon', _UMTSLocation_polygon),
        ])
    UMTSLocation._ext = None
    
    #-----< GeographicalCoordinates >-----#
    GeographicalCoordinates = SEQ(name='GeographicalCoordinates', mode=MODE_TYPE)
    _GeographicalCoordinates_latitudeSign = ENUM(name='latitudeSign', mode=MODE_TYPE)
    _GeographicalCoordinates_latitudeSign._cont = ASN1Dict([('north', 0), ('south', 1)])
    _GeographicalCoordinates_latitudeSign._ext = None
    _GeographicalCoordinates_latitude = INT(name='latitude', mode=MODE_TYPE)
    _GeographicalCoordinates_latitude._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=8388607)], ev=None, er=[])
    _GeographicalCoordinates_longitude = INT(name='longitude', mode=MODE_TYPE)
    _GeographicalCoordinates_longitude._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-8388608, ub=8388607)], ev=None, er=[])
    GeographicalCoordinates._cont = ASN1Dict([
        ('latitudeSign', _GeographicalCoordinates_latitudeSign),
        ('latitude', _GeographicalCoordinates_latitude),
        ('longitude', _GeographicalCoordinates_longitude),
        ])
    GeographicalCoordinates._ext = []
    
    #-----< GA-Point >-----#
    GA_Point = SEQ(name='GA-Point', mode=MODE_TYPE)
    _GA_Point_geographicalCoordinates = SEQ(name='geographicalCoordinates', mode=MODE_TYPE, typeref=ASN1RefType(('UmtsHI2Operations', 'GeographicalCoordinates')))
    GA_Point._cont = ASN1Dict([
        ('geographicalCoordinates', _GA_Point_geographicalCoordinates),
        ])
    GA_Point._ext = []
    
    #-----< GA-PointWithUnCertainty >-----#
    GA_PointWithUnCertainty = SEQ(name='GA-PointWithUnCertainty', mode=MODE_TYPE)
    _GA_PointWithUnCertainty_geographicalCoordinates = SEQ(name='geographicalCoordinates', mode=MODE_TYPE, typeref=ASN1RefType(('UmtsHI2Operations', 'GeographicalCoordinates')))
    _GA_PointWithUnCertainty_uncertaintyCode = INT(name='uncertaintyCode', mode=MODE_TYPE)
    _GA_PointWithUnCertainty_uncertaintyCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=127)], ev=None, er=[])
    GA_PointWithUnCertainty._cont = ASN1Dict([
        ('geographicalCoordinates', _GA_PointWithUnCertainty_geographicalCoordinates),
        ('uncertaintyCode', _GA_PointWithUnCertainty_uncertaintyCode),
        ])
    GA_PointWithUnCertainty._ext = None
    
    #-----< maxNrOfPoints >-----#
    maxNrOfPoints = INT(name='maxNrOfPoints', mode=MODE_VALUE)
    maxNrOfPoints._val = 15
    
    #-----< GA-Polygon >-----#
    GA_Polygon = SEQ_OF(name='GA-Polygon', mode=MODE_TYPE)
    _GA_Polygon__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    __GA_Polygon__item__geographicalCoordinates = SEQ(name='geographicalCoordinates', mode=MODE_TYPE, typeref=ASN1RefType(('UmtsHI2Operations', 'GeographicalCoordinates')))
    _GA_Polygon__item_._cont = ASN1Dict([
        ('geographicalCoordinates', __GA_Polygon__item__geographicalCoordinates),
        ])
    _GA_Polygon__item_._ext = []
    GA_Polygon._cont = _GA_Polygon__item_
    GA_Polygon._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=15)], ev=None, er=[])
    
    #-----< CivicAddress >-----#
    CivicAddress = CHOICE(name='CivicAddress', mode=MODE_TYPE)
    _CivicAddress_detailedCivicAddress = SET_OF(name='detailedCivicAddress', mode=MODE_TYPE)
    __CivicAddress_detailedCivicAddress__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('UmtsHI2Operations', 'DetailedCivicAddress')))
    _CivicAddress_detailedCivicAddress._cont = __CivicAddress_detailedCivicAddress__item_
    _CivicAddress_xmlCivicAddress = STR_UTF8(name='xmlCivicAddress', mode=MODE_TYPE, typeref=ASN1RefType(('UmtsHI2Operations', 'XmlCivicAddress')))
    CivicAddress._cont = ASN1Dict([
        ('detailedCivicAddress', _CivicAddress_detailedCivicAddress),
        ('xmlCivicAddress', _CivicAddress_xmlCivicAddress),
        ])
    CivicAddress._ext = []
    
    #-----< XmlCivicAddress >-----#
    XmlCivicAddress = STR_UTF8(name='XmlCivicAddress', mode=MODE_TYPE)
    
    #-----< DetailedCivicAddress >-----#
    DetailedCivicAddress = SEQ(name='DetailedCivicAddress', mode=MODE_TYPE)
    _DetailedCivicAddress_building = STR_UTF8(name='building', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_room = STR_UTF8(name='room', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_placeType = STR_UTF8(name='placeType', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_postalCommunityName = STR_UTF8(name='postalCommunityName', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_additionalCode = STR_UTF8(name='additionalCode', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_seat = STR_UTF8(name='seat', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_primaryRoad = STR_UTF8(name='primaryRoad', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_primaryRoadDirection = STR_UTF8(name='primaryRoadDirection', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_trailingStreetSuffix = STR_UTF8(name='trailingStreetSuffix', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_streetSuffix = STR_UTF8(name='streetSuffix', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_houseNumber = STR_UTF8(name='houseNumber', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_houseNumberSuffix = STR_UTF8(name='houseNumberSuffix', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_landmarkAddress = STR_UTF8(name='landmarkAddress', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_additionalLocation = STR_UTF8(name='additionalLocation', mode=MODE_TYPE, tag=(114, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_name = STR_UTF8(name='name', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_floor = STR_UTF8(name='floor', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_primaryStreet = STR_UTF8(name='primaryStreet', mode=MODE_TYPE, tag=(17, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_primaryStreetDirection = STR_UTF8(name='primaryStreetDirection', mode=MODE_TYPE, tag=(18, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_roadSection = STR_UTF8(name='roadSection', mode=MODE_TYPE, tag=(19, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_roadBranch = STR_UTF8(name='roadBranch', mode=MODE_TYPE, tag=(20, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_roadSubBranch = STR_UTF8(name='roadSubBranch', mode=MODE_TYPE, tag=(21, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_roadPreModifier = STR_UTF8(name='roadPreModifier', mode=MODE_TYPE, tag=(22, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_roadPostModifier = STR_UTF8(name='roadPostModifier', mode=MODE_TYPE, tag=(23, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_postalCode = STR_UTF8(name='postalCode', mode=MODE_TYPE, tag=(24, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_town = STR_UTF8(name='town', mode=MODE_TYPE, tag=(25, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_county = STR_UTF8(name='county', mode=MODE_TYPE, tag=(26, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _DetailedCivicAddress_country = STR_UTF8(name='country', mode=MODE_TYPE, tag=(27, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _DetailedCivicAddress_language = STR_UTF8(name='language', mode=MODE_TYPE, tag=(28, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    DetailedCivicAddress._cont = ASN1Dict([
        ('building', _DetailedCivicAddress_building),
        ('room', _DetailedCivicAddress_room),
        ('placeType', _DetailedCivicAddress_placeType),
        ('postalCommunityName', _DetailedCivicAddress_postalCommunityName),
        ('additionalCode', _DetailedCivicAddress_additionalCode),
        ('seat', _DetailedCivicAddress_seat),
        ('primaryRoad', _DetailedCivicAddress_primaryRoad),
        ('primaryRoadDirection', _DetailedCivicAddress_primaryRoadDirection),
        ('trailingStreetSuffix', _DetailedCivicAddress_trailingStreetSuffix),
        ('streetSuffix', _DetailedCivicAddress_streetSuffix),
        ('houseNumber', _DetailedCivicAddress_houseNumber),
        ('houseNumberSuffix', _DetailedCivicAddress_houseNumberSuffix),
        ('landmarkAddress', _DetailedCivicAddress_landmarkAddress),
        ('additionalLocation', _DetailedCivicAddress_additionalLocation),
        ('name', _DetailedCivicAddress_name),
        ('floor', _DetailedCivicAddress_floor),
        ('primaryStreet', _DetailedCivicAddress_primaryStreet),
        ('primaryStreetDirection', _DetailedCivicAddress_primaryStreetDirection),
        ('roadSection', _DetailedCivicAddress_roadSection),
        ('roadBranch', _DetailedCivicAddress_roadBranch),
        ('roadSubBranch', _DetailedCivicAddress_roadSubBranch),
        ('roadPreModifier', _DetailedCivicAddress_roadPreModifier),
        ('roadPostModifier', _DetailedCivicAddress_roadPostModifier),
        ('postalCode', _DetailedCivicAddress_postalCode),
        ('town', _DetailedCivicAddress_town),
        ('county', _DetailedCivicAddress_county),
        ('country', _DetailedCivicAddress_country),
        ('language', _DetailedCivicAddress_language),
        ])
    DetailedCivicAddress._ext = []
    
    #-----< SMS-report >-----#
    SMS_report = SEQ(name='SMS-report', mode=MODE_TYPE)
    _SMS_report_sMS_Contents = SEQ(name='sMS-Contents', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __SMS_report_sMS_Contents_sms_initiator = ENUM(name='sms-initiator', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __SMS_report_sMS_Contents_sms_initiator._cont = ASN1Dict([('target', 0), ('server', 1), ('undefined-party', 2)])
    __SMS_report_sMS_Contents_sms_initiator._ext = []
    __SMS_report_sMS_Contents_transfer_status = ENUM(name='transfer-status', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SMS_report_sMS_Contents_transfer_status._cont = ASN1Dict([('succeed-transfer', 0), ('not-succeed-transfer', 1), ('undefined', 2)])
    __SMS_report_sMS_Contents_transfer_status._ext = []
    __SMS_report_sMS_Contents_other_message = ENUM(name='other-message', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SMS_report_sMS_Contents_other_message._cont = ASN1Dict([('yes', 0), ('no', 1), ('undefined', 2)])
    __SMS_report_sMS_Contents_other_message._ext = []
    __SMS_report_sMS_Contents_content = OCT_STR(name='content', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __SMS_report_sMS_Contents_content._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=270)], ev=None, er=[])
    _SMS_report_sMS_Contents._cont = ASN1Dict([
        ('sms-initiator', __SMS_report_sMS_Contents_sms_initiator),
        ('transfer-status', __SMS_report_sMS_Contents_transfer_status),
        ('other-message', __SMS_report_sMS_Contents_other_message),
        ('content', __SMS_report_sMS_Contents_content),
        ])
    _SMS_report_sMS_Contents._ext = []
    SMS_report._cont = ASN1Dict([
        ('sMS-Contents', _SMS_report_sMS_Contents),
        ])
    SMS_report._ext = None
    
    #-----< GPRSCorrelationNumber >-----#
    GPRSCorrelationNumber = OCT_STR(name='GPRSCorrelationNumber', mode=MODE_TYPE)
    GPRSCorrelationNumber._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=8, ub=20)], ev=None, er=[])
    
    #-----< CorrelationValues >-----#
    CorrelationValues = CHOICE(name='CorrelationValues', mode=MODE_TYPE)
    _CorrelationValues_iri_to_CC = SEQ(name='iri-to-CC', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'IRI-to-CC-Correlation')))
    _CorrelationValues_iri_to_iri = OCT_STR(name='iri-to-iri', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'IRI-to-IRI-Correlation')))
    _CorrelationValues_both_IRI_CC = SEQ(name='both-IRI-CC', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __CorrelationValues_both_IRI_CC_iri_CC = SEQ(name='iri-CC', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'IRI-to-CC-Correlation')))
    __CorrelationValues_both_IRI_CC_iri_IRI = OCT_STR(name='iri-IRI', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'IRI-to-IRI-Correlation')))
    _CorrelationValues_both_IRI_CC._cont = ASN1Dict([
        ('iri-CC', __CorrelationValues_both_IRI_CC_iri_CC),
        ('iri-IRI', __CorrelationValues_both_IRI_CC_iri_IRI),
        ])
    _CorrelationValues_both_IRI_CC._ext = None
    CorrelationValues._cont = ASN1Dict([
        ('iri-to-CC', _CorrelationValues_iri_to_CC),
        ('iri-to-iri', _CorrelationValues_iri_to_iri),
        ('both-IRI-CC', _CorrelationValues_both_IRI_CC),
        ])
    CorrelationValues._ext = None
    
    #-----< IMS-VoIP-Correlation >-----#
    IMS_VoIP_Correlation = SET_OF(name='IMS-VoIP-Correlation', mode=MODE_TYPE)
    _IMS_VoIP_Correlation__item_ = SEQ(name='_item_', mode=MODE_TYPE)
    __IMS_VoIP_Correlation__item__ims_iri = OCT_STR(name='ims-iri', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'IRI-to-IRI-Correlation')))
    __IMS_VoIP_Correlation__item__ims_cc = SEQ(name='ims-cc', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'IRI-to-CC-Correlation')), opt=True)
    _IMS_VoIP_Correlation__item_._cont = ASN1Dict([
        ('ims-iri', __IMS_VoIP_Correlation__item__ims_iri),
        ('ims-cc', __IMS_VoIP_Correlation__item__ims_cc),
        ])
    _IMS_VoIP_Correlation__item_._ext = None
    IMS_VoIP_Correlation._cont = _IMS_VoIP_Correlation__item_
    
    #-----< IRI-to-CC-Correlation >-----#
    IRI_to_CC_Correlation = SEQ(name='IRI-to-CC-Correlation', mode=MODE_TYPE)
    _IRI_to_CC_Correlation_cc = SET_OF(name='cc', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __IRI_to_CC_Correlation_cc__item_ = OCT_STR(name='_item_', mode=MODE_TYPE)
    _IRI_to_CC_Correlation_cc._cont = __IRI_to_CC_Correlation_cc__item_
    _IRI_to_CC_Correlation_iri = OCT_STR(name='iri', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    IRI_to_CC_Correlation._cont = ASN1Dict([
        ('cc', _IRI_to_CC_Correlation_cc),
        ('iri', _IRI_to_CC_Correlation_iri),
        ])
    IRI_to_CC_Correlation._ext = None
    
    #-----< IRI-to-IRI-Correlation >-----#
    IRI_to_IRI_Correlation = OCT_STR(name='IRI-to-IRI-Correlation', mode=MODE_TYPE)
    
    #-----< GPRSEvent >-----#
    GPRSEvent = ENUM(name='GPRSEvent', mode=MODE_TYPE)
    GPRSEvent._cont = ASN1Dict([('pDPContextActivation', 1), ('startOfInterceptionWithPDPContextActive', 2), ('pDPContextDeactivation', 4), ('gPRSAttach', 5), ('gPRSDetach', 6), ('locationInfoUpdate', 10), ('sMS', 11), ('pDPContextModification', 13), ('servingSystem', 14), ('startOfInterceptionWithMSAttached', 15), ('packetDataHeaderInformation', 16), ('hSS-Subscriber-Record-Change', 17), ('registration-Termination', 18), ('location-Up-Date', 19), ('cancel-Location', 20), ('register-Location', 21), ('location-Information-Request', 22)])
    GPRSEvent._ext = ['startOfInterceptionWithMSAttached', 'packetDataHeaderInformation', 'hSS-Subscriber-Record-Change', 'registration-Termination', 'location-Up-Date', 'cancel-Location', 'register-Location', 'location-Information-Request']
    
    #-----< CSREvent >-----#
    CSREvent = ENUM(name='CSREvent', mode=MODE_TYPE)
    CSREvent._cont = ASN1Dict([('cSREventMessage', 1)])
    CSREvent._ext = []
    
    #-----< IMSevent >-----#
    IMSevent = ENUM(name='IMSevent', mode=MODE_TYPE)
    IMSevent._cont = ASN1Dict([('unfilteredSIPmessage', 1), ('sIPheaderOnly', 2), ('decryptionKeysAvailable', 3), ('startOfInterceptionForIMSEstablishedSession', 4), ('xCAPRequest', 5), ('xCAPResponse', 6), ('ccUnavailable', 7)])
    IMSevent._ext = ['sIPheaderOnly', 'decryptionKeysAvailable', 'startOfInterceptionForIMSEstablishedSession', 'xCAPRequest', 'xCAPResponse', 'ccUnavailable']
    
    #-----< Current-Previous-Systems >-----#
    Current_Previous_Systems = SEQ(name='Current-Previous-Systems', mode=MODE_TYPE)
    _Current_Previous_Systems_serving_System_Identifier = OCT_STR(name='serving-System-Identifier', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Current_Previous_Systems_current_Serving_SGSN_Number = OCT_STR(name='current-Serving-SGSN-Number', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Current_Previous_Systems_current_Serving_SGSN_Address = OCT_STR(name='current-Serving-SGSN-Address', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Current_Previous_Systems_current_Serving_S4_SGSN_Address = OCT_STR(name='current-Serving-S4-SGSN-Address', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Current_Previous_Systems_previous_Serving_System_Identifier = OCT_STR(name='previous-Serving-System-Identifier', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Current_Previous_Systems_previous_Serving_SGSN_Number = OCT_STR(name='previous-Serving-SGSN-Number', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Current_Previous_Systems_previous_Serving_SGSN_Address = OCT_STR(name='previous-Serving-SGSN-Address', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Current_Previous_Systems_previous_Serving_S4_SGSN_Address = OCT_STR(name='previous-Serving-S4-SGSN-Address', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    Current_Previous_Systems._cont = ASN1Dict([
        ('serving-System-Identifier', _Current_Previous_Systems_serving_System_Identifier),
        ('current-Serving-SGSN-Number', _Current_Previous_Systems_current_Serving_SGSN_Number),
        ('current-Serving-SGSN-Address', _Current_Previous_Systems_current_Serving_SGSN_Address),
        ('current-Serving-S4-SGSN-Address', _Current_Previous_Systems_current_Serving_S4_SGSN_Address),
        ('previous-Serving-System-Identifier', _Current_Previous_Systems_previous_Serving_System_Identifier),
        ('previous-Serving-SGSN-Number', _Current_Previous_Systems_previous_Serving_SGSN_Number),
        ('previous-Serving-SGSN-Address', _Current_Previous_Systems_previous_Serving_SGSN_Address),
        ('previous-Serving-S4-SGSN-Address', _Current_Previous_Systems_previous_Serving_S4_SGSN_Address),
        ])
    Current_Previous_Systems._ext = []
    
    #-----< Change-Of-Target-Identity >-----#
    Change_Of_Target_Identity = SEQ(name='Change-Of-Target-Identity', mode=MODE_TYPE)
    _Change_Of_Target_Identity_new_MSISDN = SEQ(name='new-MSISDN', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PartyInformation')), opt=True)
    _Change_Of_Target_Identity_old_MSISDN = SEQ(name='old-MSISDN', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PartyInformation')), opt=True)
    _Change_Of_Target_Identity_new_IMSI = SEQ(name='new-IMSI', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PartyInformation')), opt=True)
    _Change_Of_Target_Identity_old_IMSI = SEQ(name='old-IMSI', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PartyInformation')), opt=True)
    _Change_Of_Target_Identity_new_IMEI = SEQ(name='new-IMEI', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PartyInformation')), opt=True)
    _Change_Of_Target_Identity_old_IMEI = SEQ(name='old-IMEI', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PartyInformation')), opt=True)
    _Change_Of_Target_Identity_new_IMPI = SEQ(name='new-IMPI', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PartyInformation')), opt=True)
    _Change_Of_Target_Identity_old_IMPI = SEQ(name='old-IMPI', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PartyInformation')), opt=True)
    _Change_Of_Target_Identity_new_SIP_URI = SEQ(name='new-SIP-URI', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PartyInformation')), opt=True)
    _Change_Of_Target_Identity_old_SIP_URI = SEQ(name='old-SIP-URI', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PartyInformation')), opt=True)
    _Change_Of_Target_Identity_new_TEL_URI = SEQ(name='new-TEL-URI', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PartyInformation')), opt=True)
    _Change_Of_Target_Identity_old_TEL_URI = SEQ(name='old-TEL-URI', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PartyInformation')), opt=True)
    Change_Of_Target_Identity._cont = ASN1Dict([
        ('new-MSISDN', _Change_Of_Target_Identity_new_MSISDN),
        ('old-MSISDN', _Change_Of_Target_Identity_old_MSISDN),
        ('new-IMSI', _Change_Of_Target_Identity_new_IMSI),
        ('old-IMSI', _Change_Of_Target_Identity_old_IMSI),
        ('new-IMEI', _Change_Of_Target_Identity_new_IMEI),
        ('old-IMEI', _Change_Of_Target_Identity_old_IMEI),
        ('new-IMPI', _Change_Of_Target_Identity_new_IMPI),
        ('old-IMPI', _Change_Of_Target_Identity_old_IMPI),
        ('new-SIP-URI', _Change_Of_Target_Identity_new_SIP_URI),
        ('old-SIP-URI', _Change_Of_Target_Identity_old_SIP_URI),
        ('new-TEL-URI', _Change_Of_Target_Identity_new_TEL_URI),
        ('old-TEL-URI', _Change_Of_Target_Identity_old_TEL_URI),
        ])
    Change_Of_Target_Identity._ext = ['new-IMPI', 'old-IMPI', 'new-SIP-URI', 'old-SIP-URI', 'new-TEL-URI', 'old-TEL-URI']
    
    #-----< Requesting-Node-Type >-----#
    Requesting_Node_Type = ENUM(name='Requesting-Node-Type', mode=MODE_TYPE)
    Requesting_Node_Type._cont = ASN1Dict([('mSC', 1), ('sMS-Centre', 2), ('gMLC', 3), ('mME', 4), ('sGSN', 5)])
    Requesting_Node_Type._ext = []
    
    #-----< Services-Data-Information >-----#
    Services_Data_Information = SEQ(name='Services-Data-Information', mode=MODE_TYPE)
    _Services_Data_Information_gPRS_parameters = SEQ(name='gPRS-parameters', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'GPRS-parameters')), opt=True)
    Services_Data_Information._cont = ASN1Dict([
        ('gPRS-parameters', _Services_Data_Information_gPRS_parameters),
        ])
    Services_Data_Information._ext = []
    
    #-----< GPRS-parameters >-----#
    GPRS_parameters = SEQ(name='GPRS-parameters', mode=MODE_TYPE)
    _GPRS_parameters_pDP_address_allocated_to_the_target = CHOICE(name='pDP-address-allocated-to-the-target', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'DataNodeAddress')), opt=True)
    _GPRS_parameters_aPN = OCT_STR(name='aPN', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _GPRS_parameters_aPN._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=100)], ev=None, er=[])
    _GPRS_parameters_pDP_type = OCT_STR(name='pDP-type', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _GPRS_parameters_pDP_type._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _GPRS_parameters_nSAPI = OCT_STR(name='nSAPI', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _GPRS_parameters_nSAPI._const_sz = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    _GPRS_parameters_additionalIPaddress = CHOICE(name='additionalIPaddress', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'DataNodeAddress')), opt=True)
    GPRS_parameters._cont = ASN1Dict([
        ('pDP-address-allocated-to-the-target', _GPRS_parameters_pDP_address_allocated_to_the_target),
        ('aPN', _GPRS_parameters_aPN),
        ('pDP-type', _GPRS_parameters_pDP_type),
        ('nSAPI', _GPRS_parameters_nSAPI),
        ('additionalIPaddress', _GPRS_parameters_additionalIPaddress),
        ])
    GPRS_parameters._ext = ['nSAPI', 'additionalIPaddress']
    
    #-----< GPRSOperationErrorCode >-----#
    GPRSOperationErrorCode = OCT_STR(name='GPRSOperationErrorCode', mode=MODE_TYPE)
    
    #-----< LDIevent >-----#
    LDIevent = ENUM(name='LDIevent', mode=MODE_TYPE)
    LDIevent._cont = ASN1Dict([('targetEntersIA', 1), ('targetLeavesIA', 2)])
    LDIevent._ext = []
    
    #-----< UmtsQos >-----#
    UmtsQos = CHOICE(name='UmtsQos', mode=MODE_TYPE)
    _UmtsQos_qosMobileRadio = OCT_STR(name='qosMobileRadio', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _UmtsQos_qosGn = OCT_STR(name='qosGn', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    UmtsQos._cont = ASN1Dict([
        ('qosMobileRadio', _UmtsQos_qosMobileRadio),
        ('qosGn', _UmtsQos_qosGn),
        ])
    UmtsQos._ext = None
    
    #-----< MediaDecryption-info >-----#
    MediaDecryption_info = SEQ_OF(name='MediaDecryption-info', mode=MODE_TYPE)
    _MediaDecryption_info__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('UmtsHI2Operations', 'CCKeyInfo')))
    MediaDecryption_info._cont = _MediaDecryption_info__item_
    
    #-----< CCKeyInfo >-----#
    CCKeyInfo = SEQ(name='CCKeyInfo', mode=MODE_TYPE)
    _CCKeyInfo_cCCSID = OCT_STR(name='cCCSID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CCKeyInfo_cCDecKey = OCT_STR(name='cCDecKey', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _CCKeyInfo_cCSalt = OCT_STR(name='cCSalt', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    CCKeyInfo._cont = ASN1Dict([
        ('cCCSID', _CCKeyInfo_cCCSID),
        ('cCDecKey', _CCKeyInfo_cCDecKey),
        ('cCSalt', _CCKeyInfo_cCSalt),
        ])
    CCKeyInfo._ext = []
    
    #-----< MediaSecFailureIndication >-----#
    MediaSecFailureIndication = ENUM(name='MediaSecFailureIndication', mode=MODE_TYPE)
    MediaSecFailureIndication._cont = ASN1Dict([('genericFailure', 0)])
    MediaSecFailureIndication._ext = []
    
    #-----< PacketDataHeaderInformation >-----#
    PacketDataHeaderInformation = CHOICE(name='PacketDataHeaderInformation', mode=MODE_TYPE)
    _PacketDataHeaderInformation_packetDataHeader = CHOICE(name='packetDataHeader', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PacketDataHeaderReport')))
    _PacketDataHeaderInformation_packetDataSummary = SEQ_OF(name='packetDataSummary', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PacketDataSummaryReport')))
    PacketDataHeaderInformation._cont = ASN1Dict([
        ('packetDataHeader', _PacketDataHeaderInformation_packetDataHeader),
        ('packetDataSummary', _PacketDataHeaderInformation_packetDataSummary),
        ])
    PacketDataHeaderInformation._ext = []
    
    #-----< PacketDataHeaderReport >-----#
    PacketDataHeaderReport = CHOICE(name='PacketDataHeaderReport', mode=MODE_TYPE)
    _PacketDataHeaderReport_packetDataHeaderMapped = SEQ(name='packetDataHeaderMapped', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PacketDataHeaderMapped')))
    _PacketDataHeaderReport_packetDataHeaderCopy = SEQ(name='packetDataHeaderCopy', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PacketDataHeaderCopy')))
    PacketDataHeaderReport._cont = ASN1Dict([
        ('packetDataHeaderMapped', _PacketDataHeaderReport_packetDataHeaderMapped),
        ('packetDataHeaderCopy', _PacketDataHeaderReport_packetDataHeaderCopy),
        ])
    PacketDataHeaderReport._ext = []
    
    #-----< PacketDataHeaderMapped >-----#
    PacketDataHeaderMapped = SEQ(name='PacketDataHeaderMapped', mode=MODE_TYPE)
    _PacketDataHeaderMapped_sourceIPAddress = SEQ(name='sourceIPAddress', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'IPAddress')))
    _PacketDataHeaderMapped_sourcePortNumber = INT(name='sourcePortNumber', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PacketDataHeaderMapped_sourcePortNumber._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _PacketDataHeaderMapped_destinationIPAddress = SEQ(name='destinationIPAddress', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'IPAddress')))
    _PacketDataHeaderMapped_destinationPortNumber = INT(name='destinationPortNumber', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PacketDataHeaderMapped_destinationPortNumber._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _PacketDataHeaderMapped_transportProtocol = INT(name='transportProtocol', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PacketDataHeaderMapped_packetsize = INT(name='packetsize', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PacketDataHeaderMapped_flowLabel = INT(name='flowLabel', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PacketDataHeaderMapped_packetCount = INT(name='packetCount', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PacketDataHeaderMapped_direction = ENUM(name='direction', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'TPDU-direction')))
    PacketDataHeaderMapped._cont = ASN1Dict([
        ('sourceIPAddress', _PacketDataHeaderMapped_sourceIPAddress),
        ('sourcePortNumber', _PacketDataHeaderMapped_sourcePortNumber),
        ('destinationIPAddress', _PacketDataHeaderMapped_destinationIPAddress),
        ('destinationPortNumber', _PacketDataHeaderMapped_destinationPortNumber),
        ('transportProtocol', _PacketDataHeaderMapped_transportProtocol),
        ('packetsize', _PacketDataHeaderMapped_packetsize),
        ('flowLabel', _PacketDataHeaderMapped_flowLabel),
        ('packetCount', _PacketDataHeaderMapped_packetCount),
        ('direction', _PacketDataHeaderMapped_direction),
        ])
    PacketDataHeaderMapped._ext = []
    
    #-----< TPDU-direction >-----#
    TPDU_direction = ENUM(name='TPDU-direction', mode=MODE_TYPE)
    TPDU_direction._cont = ASN1Dict([('from-target', 1), ('to-target', 2), ('unknown', 3)])
    TPDU_direction._ext = None
    
    #-----< PacketDataHeaderCopy >-----#
    PacketDataHeaderCopy = SEQ(name='PacketDataHeaderCopy', mode=MODE_TYPE)
    _PacketDataHeaderCopy_direction = ENUM(name='direction', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'TPDU-direction')))
    _PacketDataHeaderCopy_headerCopy = OCT_STR(name='headerCopy', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    PacketDataHeaderCopy._cont = ASN1Dict([
        ('direction', _PacketDataHeaderCopy_direction),
        ('headerCopy', _PacketDataHeaderCopy_headerCopy),
        ])
    PacketDataHeaderCopy._ext = []
    
    #-----< PacketDataSummaryReport >-----#
    PacketDataSummaryReport = SEQ_OF(name='PacketDataSummaryReport', mode=MODE_TYPE)
    _PacketDataSummaryReport__item_ = SEQ(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('UmtsHI2Operations', 'PacketFlowSummary')))
    PacketDataSummaryReport._cont = _PacketDataSummaryReport__item_
    
    #-----< PacketFlowSummary >-----#
    PacketFlowSummary = SEQ(name='PacketFlowSummary', mode=MODE_TYPE)
    _PacketFlowSummary_sourceIPAddress = SEQ(name='sourceIPAddress', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'IPAddress')))
    _PacketFlowSummary_sourcePortNumber = INT(name='sourcePortNumber', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PacketFlowSummary_sourcePortNumber._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _PacketFlowSummary_destinationIPAddress = SEQ(name='destinationIPAddress', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'IPAddress')))
    _PacketFlowSummary_destinationPortNumber = INT(name='destinationPortNumber', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PacketFlowSummary_destinationPortNumber._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    _PacketFlowSummary_transportProtocol = INT(name='transportProtocol', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PacketFlowSummary_flowLabel = INT(name='flowLabel', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PacketFlowSummary_summaryPeriod = SEQ(name='summaryPeriod', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'ReportInterval')))
    _PacketFlowSummary_packetCount = INT(name='packetCount', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PacketFlowSummary_sumOfPacketSizes = INT(name='sumOfPacketSizes', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PacketFlowSummary_packetDataSummaryReason = ENUM(name='packetDataSummaryReason', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'ReportReason')))
    PacketFlowSummary._cont = ASN1Dict([
        ('sourceIPAddress', _PacketFlowSummary_sourceIPAddress),
        ('sourcePortNumber', _PacketFlowSummary_sourcePortNumber),
        ('destinationIPAddress', _PacketFlowSummary_destinationIPAddress),
        ('destinationPortNumber', _PacketFlowSummary_destinationPortNumber),
        ('transportProtocol', _PacketFlowSummary_transportProtocol),
        ('flowLabel', _PacketFlowSummary_flowLabel),
        ('summaryPeriod', _PacketFlowSummary_summaryPeriod),
        ('packetCount', _PacketFlowSummary_packetCount),
        ('sumOfPacketSizes', _PacketFlowSummary_sumOfPacketSizes),
        ('packetDataSummaryReason', _PacketFlowSummary_packetDataSummaryReason),
        ])
    PacketFlowSummary._ext = []
    
    #-----< ReportReason >-----#
    ReportReason = ENUM(name='ReportReason', mode=MODE_TYPE)
    ReportReason._cont = ASN1Dict([('timerExpired', 0), ('countThresholdHit', 1), ('pDPComtextDeactivated', 2), ('pDPContextModification', 3), ('otherOrUnknown', 4)])
    ReportReason._ext = []
    
    #-----< ReportInterval >-----#
    ReportInterval = SEQ(name='ReportInterval', mode=MODE_TYPE)
    _ReportInterval_firstPacketTimeStamp = CHOICE(name='firstPacketTimeStamp', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'TimeStamp')))
    _ReportInterval_lastPacketTimeStamp = CHOICE(name='lastPacketTimeStamp', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'TimeStamp')))
    ReportInterval._cont = ASN1Dict([
        ('firstPacketTimeStamp', _ReportInterval_firstPacketTimeStamp),
        ('lastPacketTimeStamp', _ReportInterval_lastPacketTimeStamp),
        ])
    ReportInterval._ext = []
    
    #-----< ExtendedLocParameters >-----#
    ExtendedLocParameters = SEQ(name='ExtendedLocParameters', mode=MODE_TYPE)
    _ExtendedLocParameters_posMethod = STR_PRINT(name='posMethod', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ExtendedLocParameters_mapData = CHOICE(name='mapData', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ExtendedLocParameters_mapData_base64Map = STR_PRINT(name='base64Map', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __ExtendedLocParameters_mapData_url = STR_PRINT(name='url', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ExtendedLocParameters_mapData._cont = ASN1Dict([
        ('base64Map', __ExtendedLocParameters_mapData_base64Map),
        ('url', __ExtendedLocParameters_mapData_url),
        ])
    _ExtendedLocParameters_mapData._ext = None
    _ExtendedLocParameters_altitude = SEQ(name='altitude', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ExtendedLocParameters_altitude_alt = STR_PRINT(name='alt', mode=MODE_TYPE)
    __ExtendedLocParameters_altitude_alt_uncertainty = STR_PRINT(name='alt-uncertainty', mode=MODE_TYPE, opt=True)
    _ExtendedLocParameters_altitude._cont = ASN1Dict([
        ('alt', __ExtendedLocParameters_altitude_alt),
        ('alt-uncertainty', __ExtendedLocParameters_altitude_alt_uncertainty),
        ])
    _ExtendedLocParameters_altitude._ext = None
    _ExtendedLocParameters_speed = STR_PRINT(name='speed', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ExtendedLocParameters_direction = STR_PRINT(name='direction', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ExtendedLocParameters_level_conf = STR_PRINT(name='level-conf', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ExtendedLocParameters_qOS_not_met = BOOL(name='qOS-not-met', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ExtendedLocParameters_motionStateList = SEQ(name='motionStateList', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ExtendedLocParameters_motionStateList_primaryMotionState = STR_PRINT(name='primaryMotionState', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __ExtendedLocParameters_motionStateList_secondaryMotionState = SEQ_OF(name='secondaryMotionState', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    ___ExtendedLocParameters_motionStateList_secondaryMotionState__item_ = STR_PRINT(name='_item_', mode=MODE_TYPE)
    __ExtendedLocParameters_motionStateList_secondaryMotionState._cont = ___ExtendedLocParameters_motionStateList_secondaryMotionState__item_
    __ExtendedLocParameters_motionStateList_confidence = STR_PRINT(name='confidence', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _ExtendedLocParameters_motionStateList._cont = ASN1Dict([
        ('primaryMotionState', __ExtendedLocParameters_motionStateList_primaryMotionState),
        ('secondaryMotionState', __ExtendedLocParameters_motionStateList_secondaryMotionState),
        ('confidence', __ExtendedLocParameters_motionStateList_confidence),
        ])
    _ExtendedLocParameters_motionStateList._ext = None
    _ExtendedLocParameters_floor = SEQ(name='floor', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    __ExtendedLocParameters_floor_floor_number = STR_PRINT(name='floor-number', mode=MODE_TYPE)
    __ExtendedLocParameters_floor_floor_number_uncertainty = STR_PRINT(name='floor-number-uncertainty', mode=MODE_TYPE, opt=True)
    _ExtendedLocParameters_floor._cont = ASN1Dict([
        ('floor-number', __ExtendedLocParameters_floor_floor_number),
        ('floor-number-uncertainty', __ExtendedLocParameters_floor_floor_number_uncertainty),
        ])
    _ExtendedLocParameters_floor._ext = None
    _ExtendedLocParameters_additional_info = STR_PRINT(name='additional-info', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _ExtendedLocParameters_lALS_rawMLPPosData = STR_UTF8(name='lALS-rawMLPPosData', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    ExtendedLocParameters._cont = ASN1Dict([
        ('posMethod', _ExtendedLocParameters_posMethod),
        ('mapData', _ExtendedLocParameters_mapData),
        ('altitude', _ExtendedLocParameters_altitude),
        ('speed', _ExtendedLocParameters_speed),
        ('direction', _ExtendedLocParameters_direction),
        ('level-conf', _ExtendedLocParameters_level_conf),
        ('qOS-not-met', _ExtendedLocParameters_qOS_not_met),
        ('motionStateList', _ExtendedLocParameters_motionStateList),
        ('floor', _ExtendedLocParameters_floor),
        ('additional-info', _ExtendedLocParameters_additional_info),
        ('lALS-rawMLPPosData', _ExtendedLocParameters_lALS_rawMLPPosData),
        ])
    ExtendedLocParameters._ext = []
    
    #-----< LocationErrorCode >-----#
    LocationErrorCode = INT(name='LocationErrorCode', mode=MODE_TYPE)
    LocationErrorCode._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=699)], ev=None, er=[])
    
    #-----< PTCEncryptionInfo >-----#
    PTCEncryptionInfo = SEQ(name='PTCEncryptionInfo', mode=MODE_TYPE)
    _PTCEncryptionInfo_cipher = STR_UTF8(name='cipher', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PTCEncryptionInfo_cryptoContext = STR_UTF8(name='cryptoContext', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTCEncryptionInfo_key = STR_UTF8(name='key', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PTCEncryptionInfo_keyEncoding = STR_UTF8(name='keyEncoding', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PTCEncryptionInfo_salt = STR_UTF8(name='salt', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTCEncryptionInfo_pTCOther = STR_UTF8(name='pTCOther', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    PTCEncryptionInfo._cont = ASN1Dict([
        ('cipher', _PTCEncryptionInfo_cipher),
        ('cryptoContext', _PTCEncryptionInfo_cryptoContext),
        ('key', _PTCEncryptionInfo_key),
        ('keyEncoding', _PTCEncryptionInfo_keyEncoding),
        ('salt', _PTCEncryptionInfo_salt),
        ('pTCOther', _PTCEncryptionInfo_pTCOther),
        ])
    PTCEncryptionInfo._ext = []
    
    #-----< PTC >-----#
    PTC = SEQ(name='PTC', mode=MODE_TYPE)
    _PTC_abandonCause = STR_UTF8(name='abandonCause', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_accessPolicyFailure = STR_UTF8(name='accessPolicyFailure', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_accessPolicyType = SEQ(name='accessPolicyType', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'AccessPolicyType')), opt=True)
    _PTC_alertIndicator = ENUM(name='alertIndicator', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'AlertIndicator')), opt=True)
    _PTC_associatePresenceStatus = SEQ(name='associatePresenceStatus', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'AssociatePresenceStatus')), opt=True)
    _PTC_bearer_capability = STR_UTF8(name='bearer-capability', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_broadcastIndicator = BOOL(name='broadcastIndicator', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_contactID = STR_UTF8(name='contactID', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_emergency = ENUM(name='emergency', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'Emergency')), opt=True)
    _PTC_emergencyGroupState = SEQ(name='emergencyGroupState', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'EmergencyGroupState')), opt=True)
    _PTC_timeStamp = CHOICE(name='timeStamp', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'TimeStamp')))
    _PTC_pTCType = ENUM(name='pTCType', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PTCType')), opt=True)
    _PTC_failureCode = STR_UTF8(name='failureCode', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_floorActivity = SEQ(name='floorActivity', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'FloorActivity')), opt=True)
    _PTC_floorSpeakerID = SEQ(name='floorSpeakerID', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PTCAddress')), opt=True)
    _PTC_groupAdSender = STR_UTF8(name='groupAdSender', mode=MODE_TYPE, tag=(17, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_groupAuthRule = ENUM(name='groupAuthRule', mode=MODE_TYPE, tag=(19, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'GroupAuthRule')), opt=True)
    _PTC_groupCharacteristics = STR_UTF8(name='groupCharacteristics', mode=MODE_TYPE, tag=(20, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_holdRetrieveInd = BOOL(name='holdRetrieveInd', mode=MODE_TYPE, tag=(21, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_imminentPerilInd = ENUM(name='imminentPerilInd', mode=MODE_TYPE, tag=(23, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'ImminentPerilInd')), opt=True)
    _PTC_implicitFloorReq = ENUM(name='implicitFloorReq', mode=MODE_TYPE, tag=(24, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'ImplicitFloorReq')), opt=True)
    _PTC_initiationCause = ENUM(name='initiationCause', mode=MODE_TYPE, tag=(25, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'InitiationCause')), opt=True)
    _PTC_invitationCause = STR_UTF8(name='invitationCause', mode=MODE_TYPE, tag=(26, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_iPAPartyID = STR_UTF8(name='iPAPartyID', mode=MODE_TYPE, tag=(27, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_iPADirection = ENUM(name='iPADirection', mode=MODE_TYPE, tag=(28, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'IPADirection')), opt=True)
    _PTC_listManagementAction = ENUM(name='listManagementAction', mode=MODE_TYPE, tag=(29, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'ListManagementAction')), opt=True)
    _PTC_listManagementFailure = STR_UTF8(name='listManagementFailure', mode=MODE_TYPE, tag=(30, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_listManagementType = ENUM(name='listManagementType', mode=MODE_TYPE, tag=(31, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'ListManagementType')), opt=True)
    _PTC_maxTBTime = STR_UTF8(name='maxTBTime', mode=MODE_TYPE, tag=(32, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_mCPTTGroupID = STR_UTF8(name='mCPTTGroupID', mode=MODE_TYPE, tag=(33, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_mCPTTID = STR_UTF8(name='mCPTTID', mode=MODE_TYPE, tag=(34, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_mCPTTInd = BOOL(name='mCPTTInd', mode=MODE_TYPE, tag=(35, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_location = SEQ(name='location', mode=MODE_TYPE, tag=(36, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'Location')), opt=True)
    _PTC_mCPTTOrganizationName = STR_UTF8(name='mCPTTOrganizationName', mode=MODE_TYPE, tag=(37, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_mediaStreamAvail = BOOL(name='mediaStreamAvail', mode=MODE_TYPE, tag=(38, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_priority_Level = ENUM(name='priority-Level', mode=MODE_TYPE, tag=(40, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'Priority-Level')), opt=True)
    _PTC_preEstSessionID = STR_UTF8(name='preEstSessionID', mode=MODE_TYPE, tag=(41, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_preEstStatus = ENUM(name='preEstStatus', mode=MODE_TYPE, tag=(42, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PreEstStatus')), opt=True)
    _PTC_pTCGroupID = STR_UTF8(name='pTCGroupID', mode=MODE_TYPE, tag=(43, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_pTCIDList = STR_UTF8(name='pTCIDList', mode=MODE_TYPE, tag=(44, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_pTCMediaCapability = STR_UTF8(name='pTCMediaCapability', mode=MODE_TYPE, tag=(45, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_pTCOriginatingId = STR_UTF8(name='pTCOriginatingId', mode=MODE_TYPE, tag=(46, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_pTCOther = STR_UTF8(name='pTCOther', mode=MODE_TYPE, tag=(47, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_pTCParticipants = STR_UTF8(name='pTCParticipants', mode=MODE_TYPE, tag=(48, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_pTCParty = STR_UTF8(name='pTCParty', mode=MODE_TYPE, tag=(49, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_pTCPartyDrop = STR_UTF8(name='pTCPartyDrop', mode=MODE_TYPE, tag=(50, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_pTCSessionInfo = STR_UTF8(name='pTCSessionInfo', mode=MODE_TYPE, tag=(51, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_pTCServerURI = STR_UTF8(name='pTCServerURI', mode=MODE_TYPE, tag=(52, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_pTCUserAccessPolicy = STR_UTF8(name='pTCUserAccessPolicy', mode=MODE_TYPE, tag=(53, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_pTCAddress = SEQ(name='pTCAddress', mode=MODE_TYPE, tag=(54, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PTCAddress')), opt=True)
    _PTC_queuedFloorControl = BOOL(name='queuedFloorControl', mode=MODE_TYPE, tag=(55, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_queuedPosition = STR_UTF8(name='queuedPosition', mode=MODE_TYPE, tag=(56, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_registrationRequest = ENUM(name='registrationRequest', mode=MODE_TYPE, tag=(57, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'RegistrationRequest')), opt=True)
    _PTC_registrationOutcome = ENUM(name='registrationOutcome', mode=MODE_TYPE, tag=(58, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'RegistrationOutcome')), opt=True)
    _PTC_retrieveID = STR_UTF8(name='retrieveID', mode=MODE_TYPE, tag=(59, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_rTPSetting = SEQ(name='rTPSetting', mode=MODE_TYPE, tag=(60, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'RTPSetting')), opt=True)
    _PTC_talkBurstPriority = ENUM(name='talkBurstPriority', mode=MODE_TYPE, tag=(61, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'Priority-Level')), opt=True)
    _PTC_talkBurstReason = STR_VIS(name='talkBurstReason', mode=MODE_TYPE, tag=(62, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'Talk-burst-reason-code')), opt=True)
    _PTC_talkburstControlSetting = SEQ(name='talkburstControlSetting', mode=MODE_TYPE, tag=(63, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'TalkburstControlSetting')), opt=True)
    _PTC_targetPresenceStatus = STR_UTF8(name='targetPresenceStatus', mode=MODE_TYPE, tag=(64, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_port_Number = INT(name='port-Number', mode=MODE_TYPE, tag=(65, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTC_port_Number._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    PTC._cont = ASN1Dict([
        ('abandonCause', _PTC_abandonCause),
        ('accessPolicyFailure', _PTC_accessPolicyFailure),
        ('accessPolicyType', _PTC_accessPolicyType),
        ('alertIndicator', _PTC_alertIndicator),
        ('associatePresenceStatus', _PTC_associatePresenceStatus),
        ('bearer-capability', _PTC_bearer_capability),
        ('broadcastIndicator', _PTC_broadcastIndicator),
        ('contactID', _PTC_contactID),
        ('emergency', _PTC_emergency),
        ('emergencyGroupState', _PTC_emergencyGroupState),
        ('timeStamp', _PTC_timeStamp),
        ('pTCType', _PTC_pTCType),
        ('failureCode', _PTC_failureCode),
        ('floorActivity', _PTC_floorActivity),
        ('floorSpeakerID', _PTC_floorSpeakerID),
        ('groupAdSender', _PTC_groupAdSender),
        ('groupAuthRule', _PTC_groupAuthRule),
        ('groupCharacteristics', _PTC_groupCharacteristics),
        ('holdRetrieveInd', _PTC_holdRetrieveInd),
        ('imminentPerilInd', _PTC_imminentPerilInd),
        ('implicitFloorReq', _PTC_implicitFloorReq),
        ('initiationCause', _PTC_initiationCause),
        ('invitationCause', _PTC_invitationCause),
        ('iPAPartyID', _PTC_iPAPartyID),
        ('iPADirection', _PTC_iPADirection),
        ('listManagementAction', _PTC_listManagementAction),
        ('listManagementFailure', _PTC_listManagementFailure),
        ('listManagementType', _PTC_listManagementType),
        ('maxTBTime', _PTC_maxTBTime),
        ('mCPTTGroupID', _PTC_mCPTTGroupID),
        ('mCPTTID', _PTC_mCPTTID),
        ('mCPTTInd', _PTC_mCPTTInd),
        ('location', _PTC_location),
        ('mCPTTOrganizationName', _PTC_mCPTTOrganizationName),
        ('mediaStreamAvail', _PTC_mediaStreamAvail),
        ('priority-Level', _PTC_priority_Level),
        ('preEstSessionID', _PTC_preEstSessionID),
        ('preEstStatus', _PTC_preEstStatus),
        ('pTCGroupID', _PTC_pTCGroupID),
        ('pTCIDList', _PTC_pTCIDList),
        ('pTCMediaCapability', _PTC_pTCMediaCapability),
        ('pTCOriginatingId', _PTC_pTCOriginatingId),
        ('pTCOther', _PTC_pTCOther),
        ('pTCParticipants', _PTC_pTCParticipants),
        ('pTCParty', _PTC_pTCParty),
        ('pTCPartyDrop', _PTC_pTCPartyDrop),
        ('pTCSessionInfo', _PTC_pTCSessionInfo),
        ('pTCServerURI', _PTC_pTCServerURI),
        ('pTCUserAccessPolicy', _PTC_pTCUserAccessPolicy),
        ('pTCAddress', _PTC_pTCAddress),
        ('queuedFloorControl', _PTC_queuedFloorControl),
        ('queuedPosition', _PTC_queuedPosition),
        ('registrationRequest', _PTC_registrationRequest),
        ('registrationOutcome', _PTC_registrationOutcome),
        ('retrieveID', _PTC_retrieveID),
        ('rTPSetting', _PTC_rTPSetting),
        ('talkBurstPriority', _PTC_talkBurstPriority),
        ('talkBurstReason', _PTC_talkBurstReason),
        ('talkburstControlSetting', _PTC_talkburstControlSetting),
        ('targetPresenceStatus', _PTC_targetPresenceStatus),
        ('port-Number', _PTC_port_Number),
        ])
    PTC._ext = []
    
    #-----< AccessPolicyType >-----#
    AccessPolicyType = SEQ(name='AccessPolicyType', mode=MODE_TYPE)
    _AccessPolicyType_userAccessPolicyAttempt = BOOL(name='userAccessPolicyAttempt', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _AccessPolicyType_groupAuthorizationRulesAttempt = BOOL(name='groupAuthorizationRulesAttempt', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _AccessPolicyType_userAccessPolicyQuery = BOOL(name='userAccessPolicyQuery', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _AccessPolicyType_groupAuthorizationRulesQuery = BOOL(name='groupAuthorizationRulesQuery', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _AccessPolicyType_userAccessPolicyResult = STR_UTF8(name='userAccessPolicyResult', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _AccessPolicyType_groupAuthorizationRulesResult = STR_UTF8(name='groupAuthorizationRulesResult', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    AccessPolicyType._cont = ASN1Dict([
        ('userAccessPolicyAttempt', _AccessPolicyType_userAccessPolicyAttempt),
        ('groupAuthorizationRulesAttempt', _AccessPolicyType_groupAuthorizationRulesAttempt),
        ('userAccessPolicyQuery', _AccessPolicyType_userAccessPolicyQuery),
        ('groupAuthorizationRulesQuery', _AccessPolicyType_groupAuthorizationRulesQuery),
        ('userAccessPolicyResult', _AccessPolicyType_userAccessPolicyResult),
        ('groupAuthorizationRulesResult', _AccessPolicyType_groupAuthorizationRulesResult),
        ])
    AccessPolicyType._ext = []
    
    #-----< AlertIndicator >-----#
    AlertIndicator = ENUM(name='AlertIndicator', mode=MODE_TYPE)
    AlertIndicator._cont = ASN1Dict([('sent', 1), ('received', 2), ('cancelled', 3)])
    AlertIndicator._ext = []
    
    #-----< AssociatePresenceStatus >-----#
    AssociatePresenceStatus = SEQ(name='AssociatePresenceStatus', mode=MODE_TYPE)
    _AssociatePresenceStatus_presenceID = STR_UTF8(name='presenceID', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _AssociatePresenceStatus_presenceType = ENUM(name='presenceType', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'PresenceType')))
    _AssociatePresenceStatus_presenceStatus = BOOL(name='presenceStatus', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    AssociatePresenceStatus._cont = ASN1Dict([
        ('presenceID', _AssociatePresenceStatus_presenceID),
        ('presenceType', _AssociatePresenceStatus_presenceType),
        ('presenceStatus', _AssociatePresenceStatus_presenceStatus),
        ])
    AssociatePresenceStatus._ext = []
    
    #-----< PresenceType >-----#
    PresenceType = ENUM(name='PresenceType', mode=MODE_TYPE)
    PresenceType._cont = ASN1Dict([('pTCClient', 1), ('pTCGroup', 2)])
    PresenceType._ext = []
    
    #-----< Emergency >-----#
    Emergency = ENUM(name='Emergency', mode=MODE_TYPE)
    Emergency._cont = ASN1Dict([('imminent', 1), ('peril', 2), ('cancel', 3)])
    Emergency._ext = []
    
    #-----< EmergencyGroupState >-----#
    EmergencyGroupState = SEQ(name='EmergencyGroupState', mode=MODE_TYPE)
    _EmergencyGroupState_clientEmergencyState = ENUM(name='clientEmergencyState', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _EmergencyGroupState_clientEmergencyState._cont = ASN1Dict([('inform', 1), ('response', 2), ('cancelInform', 3), ('cancelResponse', 4)])
    _EmergencyGroupState_clientEmergencyState._ext = []
    _EmergencyGroupState_groupEmergencyState = ENUM(name='groupEmergencyState', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _EmergencyGroupState_groupEmergencyState._cont = ASN1Dict([('inForm', 1), ('reSponse', 2), ('cancelInform', 3), ('cancelResponse', 4)])
    _EmergencyGroupState_groupEmergencyState._ext = []
    EmergencyGroupState._cont = ASN1Dict([
        ('clientEmergencyState', _EmergencyGroupState_clientEmergencyState),
        ('groupEmergencyState', _EmergencyGroupState_groupEmergencyState),
        ])
    EmergencyGroupState._ext = []
    
    #-----< PTCType >-----#
    PTCType = ENUM(name='PTCType', mode=MODE_TYPE)
    PTCType._cont = ASN1Dict([('pTCStartofInterception', 1), ('pTCServinSystem', 2), ('pTCSessionInitiation', 3), ('pTCSessionAbandonEndRecord', 4), ('pTCSessionStartContinueRecord', 5), ('pTCSessionEndRecord', 6), ('pTCPre-EstablishedSessionSessionRecord', 7), ('pTCInstantPersonalAlert', 8), ('pTCPartyJoin', 9), ('pTCPartyDrop', 10), ('pTCPartyHold-RetrieveRecord', 11), ('pTCMediaModification', 12), ('pTCGroupAdvertizement', 13), ('pTCFloorConttrol', 14), ('pTCTargetPressence', 15), ('pTCAssociatePressence', 16), ('pTCListManagementEvents', 17), ('pTCAccessPolicyEvents', 18), ('pTCMediaTypeNotification', 19), ('pTCGroupCallRequest', 20), ('pTCGroupCallCancel', 21), ('pTCGroupCallResponse', 22), ('pTCGroupCallInterrogate', 23), ('pTCMCPTTImminentGroupCall', 24), ('pTCCC', 25), ('pTCRegistration', 26), ('pTCEncryption', 27)])
    PTCType._ext = []
    
    #-----< FloorActivity >-----#
    FloorActivity = SEQ(name='FloorActivity', mode=MODE_TYPE)
    _FloorActivity_tBCP_Request = BOOL(name='tBCP-Request', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _FloorActivity_tBCP_Granted = BOOL(name='tBCP-Granted', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _FloorActivity_tBCP_Deny = BOOL(name='tBCP-Deny', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _FloorActivity_tBCP_Queued = BOOL(name='tBCP-Queued', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _FloorActivity_tBCP_Release = BOOL(name='tBCP-Release', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _FloorActivity_tBCP_Revoke = BOOL(name='tBCP-Revoke', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _FloorActivity_tBCP_Taken = BOOL(name='tBCP-Taken', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _FloorActivity_tBCP_Idle = BOOL(name='tBCP-Idle', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    FloorActivity._cont = ASN1Dict([
        ('tBCP-Request', _FloorActivity_tBCP_Request),
        ('tBCP-Granted', _FloorActivity_tBCP_Granted),
        ('tBCP-Deny', _FloorActivity_tBCP_Deny),
        ('tBCP-Queued', _FloorActivity_tBCP_Queued),
        ('tBCP-Release', _FloorActivity_tBCP_Release),
        ('tBCP-Revoke', _FloorActivity_tBCP_Revoke),
        ('tBCP-Taken', _FloorActivity_tBCP_Taken),
        ('tBCP-Idle', _FloorActivity_tBCP_Idle),
        ])
    FloorActivity._ext = []
    
    #-----< GroupAuthRule >-----#
    GroupAuthRule = ENUM(name='GroupAuthRule', mode=MODE_TYPE)
    GroupAuthRule._cont = ASN1Dict([('allow-Initiating-PtcSession', 0), ('block-Initiating-PtcSession', 1), ('allow-Joining-PtcSession', 2), ('block-Joining-PtcSession', 3), ('allow-Add-Participants', 4), ('block-Add-Participants', 5), ('allow-Subscription-PtcSession-State', 6), ('block-Subscription-PtcSession-State', 7), ('allow-Anonymity', 8), ('forbid-Anonymity', 9)])
    GroupAuthRule._ext = []
    
    #-----< ImminentPerilInd >-----#
    ImminentPerilInd = ENUM(name='ImminentPerilInd', mode=MODE_TYPE)
    ImminentPerilInd._cont = ASN1Dict([('request', 1), ('response', 2), ('cancel', 3)])
    ImminentPerilInd._ext = []
    
    #-----< ImplicitFloorReq >-----#
    ImplicitFloorReq = ENUM(name='ImplicitFloorReq', mode=MODE_TYPE)
    ImplicitFloorReq._cont = ASN1Dict([('join', 1), ('rejoin', 2), ('release', 3)])
    ImplicitFloorReq._ext = []
    
    #-----< InitiationCause >-----#
    InitiationCause = ENUM(name='InitiationCause', mode=MODE_TYPE)
    InitiationCause._cont = ASN1Dict([('requests', 1), ('received', 2), ('pTCOriginatingId', 3)])
    InitiationCause._ext = []
    
    #-----< IPADirection >-----#
    IPADirection = ENUM(name='IPADirection', mode=MODE_TYPE)
    IPADirection._cont = ASN1Dict([('toTarget', 0), ('fromTarget', 1)])
    IPADirection._ext = []
    
    #-----< ListManagementAction >-----#
    ListManagementAction = ENUM(name='ListManagementAction', mode=MODE_TYPE)
    ListManagementAction._cont = ASN1Dict([('create', 1), ('modify', 2), ('retrieve', 3), ('delete', 4), ('notify', 5)])
    ListManagementAction._ext = []
    
    #-----< ListManagementType >-----#
    ListManagementType = ENUM(name='ListManagementType', mode=MODE_TYPE)
    ListManagementType._cont = ASN1Dict([('contactListManagementAttempt', 1), ('groupListManagementAttempt', 2), ('contactListManagementResult', 3), ('groupListManagementResult', 4), ('requestSuccessful', 5)])
    ListManagementType._ext = []
    
    #-----< Priority-Level >-----#
    Priority_Level = ENUM(name='Priority-Level', mode=MODE_TYPE)
    Priority_Level._cont = ASN1Dict([('pre-emptive', 0), ('high-priority', 1), ('normal-priority', 2), ('listen-only', 3)])
    Priority_Level._ext = []
    
    #-----< PreEstStatus >-----#
    PreEstStatus = ENUM(name='PreEstStatus', mode=MODE_TYPE)
    PreEstStatus._cont = ASN1Dict([('established', 1), ('modify', 2), ('released', 3)])
    PreEstStatus._ext = []
    
    #-----< PTCAddress >-----#
    PTCAddress = SEQ(name='PTCAddress', mode=MODE_TYPE)
    _PTCAddress_uri = STR_UTF8(name='uri', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PTCAddress_privacy_setting = BOOL(name='privacy-setting', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _PTCAddress_privacy_alias = STR_VIS(name='privacy-alias', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _PTCAddress_nickname = STR_UTF8(name='nickname', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    PTCAddress._cont = ASN1Dict([
        ('uri', _PTCAddress_uri),
        ('privacy-setting', _PTCAddress_privacy_setting),
        ('privacy-alias', _PTCAddress_privacy_alias),
        ('nickname', _PTCAddress_nickname),
        ])
    PTCAddress._ext = []
    
    #-----< RegistrationRequest >-----#
    RegistrationRequest = ENUM(name='RegistrationRequest', mode=MODE_TYPE)
    RegistrationRequest._cont = ASN1Dict([('register', 1), ('re-register', 2), ('de-register', 3)])
    RegistrationRequest._ext = []
    
    #-----< RegistrationOutcome >-----#
    RegistrationOutcome = ENUM(name='RegistrationOutcome', mode=MODE_TYPE)
    RegistrationOutcome._cont = ASN1Dict([('success', 0), ('failure', 1)])
    RegistrationOutcome._ext = []
    
    #-----< RTPSetting >-----#
    RTPSetting = SEQ(name='RTPSetting', mode=MODE_TYPE)
    _RTPSetting_ip_address = SEQ(name='ip-address', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HI2Operations', 'IPAddress')))
    _RTPSetting_port_number = INT(name='port-number', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('UmtsHI2Operations', 'Port-Number')))
    RTPSetting._cont = ASN1Dict([
        ('ip-address', _RTPSetting_ip_address),
        ('port-number', _RTPSetting_port_number),
        ])
    RTPSetting._ext = []
    
    #-----< Port-Number >-----#
    Port_Number = INT(name='Port-Number', mode=MODE_TYPE)
    Port_Number._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    
    #-----< TalkburstControlSetting >-----#
    TalkburstControlSetting = SEQ(name='TalkburstControlSetting', mode=MODE_TYPE)
    _TalkburstControlSetting_talk_BurstControlProtocol = STR_UTF8(name='talk-BurstControlProtocol', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TalkburstControlSetting_talk_Burst_parameters = SET_OF(name='talk-Burst-parameters', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __TalkburstControlSetting_talk_Burst_parameters__item_ = STR_VIS(name='_item_', mode=MODE_TYPE)
    _TalkburstControlSetting_talk_Burst_parameters._cont = __TalkburstControlSetting_talk_Burst_parameters__item_
    _TalkburstControlSetting_tBCP_PortNumber = INT(name='tBCP-PortNumber', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _TalkburstControlSetting_tBCP_PortNumber._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=65535)], ev=None, er=[])
    TalkburstControlSetting._cont = ASN1Dict([
        ('talk-BurstControlProtocol', _TalkburstControlSetting_talk_BurstControlProtocol),
        ('talk-Burst-parameters', _TalkburstControlSetting_talk_Burst_parameters),
        ('tBCP-PortNumber', _TalkburstControlSetting_tBCP_PortNumber),
        ])
    TalkburstControlSetting._ext = []
    
    #-----< Talk-burst-reason-code >-----#
    Talk_burst_reason_code = STR_VIS(name='Talk-burst-reason-code', mode=MODE_TYPE)
    
    _all_ = [
        lawfulInterceptDomainId,
        threeGPPSUBDomainId,
        hi2DomainId,
        _UmtsIRIsContent_umtsiRIContent,
        _UmtsIRIsContent_umtsIRISequence,
        UmtsIRIsContent,
        _UmtsIRISequence__item_,
        UmtsIRISequence,
        _UmtsIRIContent_iRI_Begin_record,
        _UmtsIRIContent_iRI_End_record,
        _UmtsIRIContent_iRI_Continue_record,
        _UmtsIRIContent_iRI_Report_record,
        UmtsIRIContent,
        _IRI_Parameters_hi2DomainId,
        _IRI_Parameters_iRIversion,
        _IRI_Parameters_lawfulInterceptionIdentifier,
        _IRI_Parameters_timeStamp,
        _IRI_Parameters_initiator,
        _IRI_Parameters_locationOfTheTarget,
        __IRI_Parameters_partyInformation__item_,
        _IRI_Parameters_partyInformation,
        _IRI_Parameters_serviceCenterAddress,
        _IRI_Parameters_sMS,
        _IRI_Parameters_national_Parameters,
        _IRI_Parameters_gPRSCorrelationNumber,
        _IRI_Parameters_gPRSevent,
        _IRI_Parameters_sgsnAddress,
        _IRI_Parameters_gPRSOperationErrorCode,
        _IRI_Parameters_ggsnAddress,
        _IRI_Parameters_qOS,
        _IRI_Parameters_networkIdentifier,
        _IRI_Parameters_sMSOriginatingAddress,
        _IRI_Parameters_sMSTerminatingAddress,
        _IRI_Parameters_iMSevent,
        _IRI_Parameters_sIPMessage,
        _IRI_Parameters_servingSGSN_number,
        _IRI_Parameters_servingSGSN_address,
        _IRI_Parameters_ldiEvent,
        _IRI_Parameters_correlation,
        _IRI_Parameters_mediaDecryption_info,
        _IRI_Parameters_servingS4_SGSN_address,
        _IRI_Parameters_sipMessageHeaderOffer,
        _IRI_Parameters_sipMessageHeaderAnswer,
        _IRI_Parameters_sdpOffer,
        _IRI_Parameters_sdpAnswer,
        _IRI_Parameters_uLITimestamp,
        _IRI_Parameters_packetDataHeaderInformation,
        _IRI_Parameters_mediaSecFailureIndication,
        __IRI_Parameters_pANI_Header_Info__item_,
        _IRI_Parameters_pANI_Header_Info,
        _IRI_Parameters_imsVoIP,
        _IRI_Parameters_xCAPmessage,
        _IRI_Parameters_ccUnavailableReason,
        _IRI_Parameters_carrierSpecificData,
        _IRI_Parameters_current_Previous_Systems,
        _IRI_Parameters_change_Of_Target_Identity,
        _IRI_Parameters_requesting_Network_Identifier,
        _IRI_Parameters_requesting_Node_Type,
        _IRI_Parameters_serving_System_Identifier,
        _IRI_Parameters_extendedLocParameters,
        _IRI_Parameters_locationErrorCode,
        _IRI_Parameters_cSREvent,
        _IRI_Parameters_ptc,
        _IRI_Parameters_ptcEncryption,
        _IRI_Parameters_national_HI2_ASN1parameters,
        IRI_Parameters,
        _PANI_Header_Info_access_Type,
        _PANI_Header_Info_access_Class,
        _PANI_Header_Info_network_Provided,
        _PANI_Header_Info_pANI_Location,
        PANI_Header_Info,
        _PANI_Location_raw_Location,
        _PANI_Location_location,
        PANI_Location,
        _PartyInformation_party_Qualifier,
        __PartyInformation_partyIdentity_imei,
        __PartyInformation_partyIdentity_imsi,
        __PartyInformation_partyIdentity_msISDN,
        __PartyInformation_partyIdentity_e164_Format,
        __PartyInformation_partyIdentity_sip_uri,
        __PartyInformation_partyIdentity_tel_uri,
        __PartyInformation_partyIdentity_x_3GPP_Asserted_Identity,
        __PartyInformation_partyIdentity_xUI,
        _PartyInformation_partyIdentity,
        _PartyInformation_services_Data_Information,
        PartyInformation,
        _Location_e164_Number,
        _Location_globalCellID,
        _Location_rAI,
        _Location_gsmLocation,
        _Location_umtsLocation,
        _Location_sAI,
        _Location_oldRAI,
        _Location_tAI,
        _Location_eCGI,
        _Location_civicAddress,
        _Location_operatorSpecificInfo,
        __Location_uELocationTimestamp_timestamp,
        __Location_uELocationTimestamp_timestampUnknown,
        _Location_uELocationTimestamp,
        Location,
        GlobalCellID,
        Rai,
        Sai,
        __GSMLocation_geoCoordinates_latitude,
        __GSMLocation_geoCoordinates_longitude,
        __GSMLocation_geoCoordinates_mapDatum,
        __GSMLocation_geoCoordinates_azimuth,
        _GSMLocation_geoCoordinates,
        __GSMLocation_utmCoordinates_utm_East,
        __GSMLocation_utmCoordinates_utm_North,
        __GSMLocation_utmCoordinates_mapDatum,
        __GSMLocation_utmCoordinates_azimuth,
        _GSMLocation_utmCoordinates,
        __GSMLocation_utmRefCoordinates_utmref_string,
        __GSMLocation_utmRefCoordinates_mapDatum,
        _GSMLocation_utmRefCoordinates,
        _GSMLocation_wGS84Coordinates,
        GSMLocation,
        MapDatum,
        _UMTSLocation_point,
        _UMTSLocation_pointWithUnCertainty,
        _UMTSLocation_polygon,
        UMTSLocation,
        _GeographicalCoordinates_latitudeSign,
        _GeographicalCoordinates_latitude,
        _GeographicalCoordinates_longitude,
        GeographicalCoordinates,
        _GA_Point_geographicalCoordinates,
        GA_Point,
        _GA_PointWithUnCertainty_geographicalCoordinates,
        _GA_PointWithUnCertainty_uncertaintyCode,
        GA_PointWithUnCertainty,
        maxNrOfPoints,
        __GA_Polygon__item__geographicalCoordinates,
        _GA_Polygon__item_,
        GA_Polygon,
        __CivicAddress_detailedCivicAddress__item_,
        _CivicAddress_detailedCivicAddress,
        _CivicAddress_xmlCivicAddress,
        CivicAddress,
        XmlCivicAddress,
        _DetailedCivicAddress_building,
        _DetailedCivicAddress_room,
        _DetailedCivicAddress_placeType,
        _DetailedCivicAddress_postalCommunityName,
        _DetailedCivicAddress_additionalCode,
        _DetailedCivicAddress_seat,
        _DetailedCivicAddress_primaryRoad,
        _DetailedCivicAddress_primaryRoadDirection,
        _DetailedCivicAddress_trailingStreetSuffix,
        _DetailedCivicAddress_streetSuffix,
        _DetailedCivicAddress_houseNumber,
        _DetailedCivicAddress_houseNumberSuffix,
        _DetailedCivicAddress_landmarkAddress,
        _DetailedCivicAddress_additionalLocation,
        _DetailedCivicAddress_name,
        _DetailedCivicAddress_floor,
        _DetailedCivicAddress_primaryStreet,
        _DetailedCivicAddress_primaryStreetDirection,
        _DetailedCivicAddress_roadSection,
        _DetailedCivicAddress_roadBranch,
        _DetailedCivicAddress_roadSubBranch,
        _DetailedCivicAddress_roadPreModifier,
        _DetailedCivicAddress_roadPostModifier,
        _DetailedCivicAddress_postalCode,
        _DetailedCivicAddress_town,
        _DetailedCivicAddress_county,
        _DetailedCivicAddress_country,
        _DetailedCivicAddress_language,
        DetailedCivicAddress,
        __SMS_report_sMS_Contents_sms_initiator,
        __SMS_report_sMS_Contents_transfer_status,
        __SMS_report_sMS_Contents_other_message,
        __SMS_report_sMS_Contents_content,
        _SMS_report_sMS_Contents,
        SMS_report,
        GPRSCorrelationNumber,
        _CorrelationValues_iri_to_CC,
        _CorrelationValues_iri_to_iri,
        __CorrelationValues_both_IRI_CC_iri_CC,
        __CorrelationValues_both_IRI_CC_iri_IRI,
        _CorrelationValues_both_IRI_CC,
        CorrelationValues,
        __IMS_VoIP_Correlation__item__ims_iri,
        __IMS_VoIP_Correlation__item__ims_cc,
        _IMS_VoIP_Correlation__item_,
        IMS_VoIP_Correlation,
        __IRI_to_CC_Correlation_cc__item_,
        _IRI_to_CC_Correlation_cc,
        _IRI_to_CC_Correlation_iri,
        IRI_to_CC_Correlation,
        IRI_to_IRI_Correlation,
        GPRSEvent,
        CSREvent,
        IMSevent,
        _Current_Previous_Systems_serving_System_Identifier,
        _Current_Previous_Systems_current_Serving_SGSN_Number,
        _Current_Previous_Systems_current_Serving_SGSN_Address,
        _Current_Previous_Systems_current_Serving_S4_SGSN_Address,
        _Current_Previous_Systems_previous_Serving_System_Identifier,
        _Current_Previous_Systems_previous_Serving_SGSN_Number,
        _Current_Previous_Systems_previous_Serving_SGSN_Address,
        _Current_Previous_Systems_previous_Serving_S4_SGSN_Address,
        Current_Previous_Systems,
        _Change_Of_Target_Identity_new_MSISDN,
        _Change_Of_Target_Identity_old_MSISDN,
        _Change_Of_Target_Identity_new_IMSI,
        _Change_Of_Target_Identity_old_IMSI,
        _Change_Of_Target_Identity_new_IMEI,
        _Change_Of_Target_Identity_old_IMEI,
        _Change_Of_Target_Identity_new_IMPI,
        _Change_Of_Target_Identity_old_IMPI,
        _Change_Of_Target_Identity_new_SIP_URI,
        _Change_Of_Target_Identity_old_SIP_URI,
        _Change_Of_Target_Identity_new_TEL_URI,
        _Change_Of_Target_Identity_old_TEL_URI,
        Change_Of_Target_Identity,
        Requesting_Node_Type,
        _Services_Data_Information_gPRS_parameters,
        Services_Data_Information,
        _GPRS_parameters_pDP_address_allocated_to_the_target,
        _GPRS_parameters_aPN,
        _GPRS_parameters_pDP_type,
        _GPRS_parameters_nSAPI,
        _GPRS_parameters_additionalIPaddress,
        GPRS_parameters,
        GPRSOperationErrorCode,
        LDIevent,
        _UmtsQos_qosMobileRadio,
        _UmtsQos_qosGn,
        UmtsQos,
        _MediaDecryption_info__item_,
        MediaDecryption_info,
        _CCKeyInfo_cCCSID,
        _CCKeyInfo_cCDecKey,
        _CCKeyInfo_cCSalt,
        CCKeyInfo,
        MediaSecFailureIndication,
        _PacketDataHeaderInformation_packetDataHeader,
        _PacketDataHeaderInformation_packetDataSummary,
        PacketDataHeaderInformation,
        _PacketDataHeaderReport_packetDataHeaderMapped,
        _PacketDataHeaderReport_packetDataHeaderCopy,
        PacketDataHeaderReport,
        _PacketDataHeaderMapped_sourceIPAddress,
        _PacketDataHeaderMapped_sourcePortNumber,
        _PacketDataHeaderMapped_destinationIPAddress,
        _PacketDataHeaderMapped_destinationPortNumber,
        _PacketDataHeaderMapped_transportProtocol,
        _PacketDataHeaderMapped_packetsize,
        _PacketDataHeaderMapped_flowLabel,
        _PacketDataHeaderMapped_packetCount,
        _PacketDataHeaderMapped_direction,
        PacketDataHeaderMapped,
        TPDU_direction,
        _PacketDataHeaderCopy_direction,
        _PacketDataHeaderCopy_headerCopy,
        PacketDataHeaderCopy,
        _PacketDataSummaryReport__item_,
        PacketDataSummaryReport,
        _PacketFlowSummary_sourceIPAddress,
        _PacketFlowSummary_sourcePortNumber,
        _PacketFlowSummary_destinationIPAddress,
        _PacketFlowSummary_destinationPortNumber,
        _PacketFlowSummary_transportProtocol,
        _PacketFlowSummary_flowLabel,
        _PacketFlowSummary_summaryPeriod,
        _PacketFlowSummary_packetCount,
        _PacketFlowSummary_sumOfPacketSizes,
        _PacketFlowSummary_packetDataSummaryReason,
        PacketFlowSummary,
        ReportReason,
        _ReportInterval_firstPacketTimeStamp,
        _ReportInterval_lastPacketTimeStamp,
        ReportInterval,
        _ExtendedLocParameters_posMethod,
        __ExtendedLocParameters_mapData_base64Map,
        __ExtendedLocParameters_mapData_url,
        _ExtendedLocParameters_mapData,
        __ExtendedLocParameters_altitude_alt,
        __ExtendedLocParameters_altitude_alt_uncertainty,
        _ExtendedLocParameters_altitude,
        _ExtendedLocParameters_speed,
        _ExtendedLocParameters_direction,
        _ExtendedLocParameters_level_conf,
        _ExtendedLocParameters_qOS_not_met,
        __ExtendedLocParameters_motionStateList_primaryMotionState,
        ___ExtendedLocParameters_motionStateList_secondaryMotionState__item_,
        __ExtendedLocParameters_motionStateList_secondaryMotionState,
        __ExtendedLocParameters_motionStateList_confidence,
        _ExtendedLocParameters_motionStateList,
        __ExtendedLocParameters_floor_floor_number,
        __ExtendedLocParameters_floor_floor_number_uncertainty,
        _ExtendedLocParameters_floor,
        _ExtendedLocParameters_additional_info,
        _ExtendedLocParameters_lALS_rawMLPPosData,
        ExtendedLocParameters,
        LocationErrorCode,
        _PTCEncryptionInfo_cipher,
        _PTCEncryptionInfo_cryptoContext,
        _PTCEncryptionInfo_key,
        _PTCEncryptionInfo_keyEncoding,
        _PTCEncryptionInfo_salt,
        _PTCEncryptionInfo_pTCOther,
        PTCEncryptionInfo,
        _PTC_abandonCause,
        _PTC_accessPolicyFailure,
        _PTC_accessPolicyType,
        _PTC_alertIndicator,
        _PTC_associatePresenceStatus,
        _PTC_bearer_capability,
        _PTC_broadcastIndicator,
        _PTC_contactID,
        _PTC_emergency,
        _PTC_emergencyGroupState,
        _PTC_timeStamp,
        _PTC_pTCType,
        _PTC_failureCode,
        _PTC_floorActivity,
        _PTC_floorSpeakerID,
        _PTC_groupAdSender,
        _PTC_groupAuthRule,
        _PTC_groupCharacteristics,
        _PTC_holdRetrieveInd,
        _PTC_imminentPerilInd,
        _PTC_implicitFloorReq,
        _PTC_initiationCause,
        _PTC_invitationCause,
        _PTC_iPAPartyID,
        _PTC_iPADirection,
        _PTC_listManagementAction,
        _PTC_listManagementFailure,
        _PTC_listManagementType,
        _PTC_maxTBTime,
        _PTC_mCPTTGroupID,
        _PTC_mCPTTID,
        _PTC_mCPTTInd,
        _PTC_location,
        _PTC_mCPTTOrganizationName,
        _PTC_mediaStreamAvail,
        _PTC_priority_Level,
        _PTC_preEstSessionID,
        _PTC_preEstStatus,
        _PTC_pTCGroupID,
        _PTC_pTCIDList,
        _PTC_pTCMediaCapability,
        _PTC_pTCOriginatingId,
        _PTC_pTCOther,
        _PTC_pTCParticipants,
        _PTC_pTCParty,
        _PTC_pTCPartyDrop,
        _PTC_pTCSessionInfo,
        _PTC_pTCServerURI,
        _PTC_pTCUserAccessPolicy,
        _PTC_pTCAddress,
        _PTC_queuedFloorControl,
        _PTC_queuedPosition,
        _PTC_registrationRequest,
        _PTC_registrationOutcome,
        _PTC_retrieveID,
        _PTC_rTPSetting,
        _PTC_talkBurstPriority,
        _PTC_talkBurstReason,
        _PTC_talkburstControlSetting,
        _PTC_targetPresenceStatus,
        _PTC_port_Number,
        PTC,
        _AccessPolicyType_userAccessPolicyAttempt,
        _AccessPolicyType_groupAuthorizationRulesAttempt,
        _AccessPolicyType_userAccessPolicyQuery,
        _AccessPolicyType_groupAuthorizationRulesQuery,
        _AccessPolicyType_userAccessPolicyResult,
        _AccessPolicyType_groupAuthorizationRulesResult,
        AccessPolicyType,
        AlertIndicator,
        _AssociatePresenceStatus_presenceID,
        _AssociatePresenceStatus_presenceType,
        _AssociatePresenceStatus_presenceStatus,
        AssociatePresenceStatus,
        PresenceType,
        Emergency,
        _EmergencyGroupState_clientEmergencyState,
        _EmergencyGroupState_groupEmergencyState,
        EmergencyGroupState,
        PTCType,
        _FloorActivity_tBCP_Request,
        _FloorActivity_tBCP_Granted,
        _FloorActivity_tBCP_Deny,
        _FloorActivity_tBCP_Queued,
        _FloorActivity_tBCP_Release,
        _FloorActivity_tBCP_Revoke,
        _FloorActivity_tBCP_Taken,
        _FloorActivity_tBCP_Idle,
        FloorActivity,
        GroupAuthRule,
        ImminentPerilInd,
        ImplicitFloorReq,
        InitiationCause,
        IPADirection,
        ListManagementAction,
        ListManagementType,
        Priority_Level,
        PreEstStatus,
        _PTCAddress_uri,
        _PTCAddress_privacy_setting,
        _PTCAddress_privacy_alias,
        _PTCAddress_nickname,
        PTCAddress,
        RegistrationRequest,
        RegistrationOutcome,
        _RTPSetting_ip_address,
        _RTPSetting_port_number,
        RTPSetting,
        Port_Number,
        _TalkburstControlSetting_talk_BurstControlProtocol,
        __TalkburstControlSetting_talk_Burst_parameters__item_,
        _TalkburstControlSetting_talk_Burst_parameters,
        _TalkburstControlSetting_tBCP_PortNumber,
        TalkburstControlSetting,
        Talk_burst_reason_code,
    ]

init_modules(EN301040, Gprs_HI3_PS, HI1NotificationOperations, HI2Operations, HI3CCLinkData, HI3CircuitDataOperations, HIManagementOperations, Remote_Operations_Information_Objects, TETRA_HI1NotificationOperations, TETRA_HI2Operations, TETRA_HIManagementOperations, PCESP, TS101909201, Umts_HI3_PS, UmtsHI2Operations)
