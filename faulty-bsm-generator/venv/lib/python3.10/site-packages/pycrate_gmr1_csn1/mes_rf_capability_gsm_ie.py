# -*- coding: UTF-8 -*-
#/**
# * Software Name : pycrate
# * Version : 0.4
# *
# * Copyright 2018. Benoit Michau. P1sec.
# *
# * This library is free software; you can redistribute it and/or
# * modify it under the terms of the GNU Lesser General Public
# * License as published by the Free Software Foundation; either
# * version 2.1 of the License, or (at your option) any later version.
# *
# * This library is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# * Lesser General Public License for more details.
# *
# * You should have received a copy of the GNU Lesser General Public
# * License along with this library; if not, write to the Free Software
# * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
# * MA 02110-1301  USA
# *
# *--------------------------------------------------------
# * File Name : pycrate_gmr1_csn1/mes_rf_capability_gsm_ie.py
# * Created : 2023-10-24
# * Authors : Benoit Michau
# *--------------------------------------------------------
#*/
# specification: ETSI TS 101 376-04-13
# section: 9.3.47         MES RF Capability GSM
# top-level object: MES RF Capability GSM IE



# code automatically generated by pycrate_csn1
# change object type with type=CSN1T_BSTR (default type is CSN1T_UINT) in init
# add dict for value interpretation with dic={...} in CSN1Bit init
# add dict for key interpretation with kdic={...} in CSN1Alt init

from pycrate_csn1.csnobj import *

spare_bit = CSN1Bit(name='spare_bit')
Spare_bit = spare_bit
Spare_Bit = spare_bit

additional_access_technology_struct = CSN1List(name='additional_access_technology_struct', list=[
  CSN1Bit(name='additional_access_technology_length', bit=6),
  CSN1Bit(name='access_technology_type', bit=4),
  CSN1Bit(name='gmsk_power_class', bit=3),
  CSN1Bit(name='_8psk_power_class', bit=2),
  CSN1Ref(obj=spare_bit, num=-1)])

multislot_capability_struct = CSN1Alt(name='multislot_capability_struct', alt={
  '0': ('', [
  CSN1Bit(name='combined_gmsk_and_8_psk_multislot_class', bit=6)]),
  '1': ('', [
  CSN1Bit(name='gmsk_multislot_class', bit=6),
  CSN1Alt(alt={
    '0': ('', []),
    '1': ('', [
    CSN1Bit(name='_8_psk_multislot_class', bit=6)])})])})

access_capabilities_struct = CSN1List(name='access_capabilities_struct', list=[
  CSN1Bit(name='access_capabilities_length', bit=6),
  CSN1Bit(name='gmsk_power_capability', bit=3),
  CSN1Alt(alt={
    '0': ('', []),
    '1': ('', [
    CSN1Bit(name='_8psk_power_capability', bit=2)])}),
  CSN1Bit(name='pseudo_synchronization'),
  CSN1Ref(name='multislot_capability', obj=multislot_capability_struct),
  CSN1Ref(obj=spare_bit, num=-1)])

rf_capability_group_struct = CSN1List(name='rf_capability_group_struct', list=[
  CSN1Bit(name='access_technology_type', bit=4),
  CSN1List(num=-1, list=[
    CSN1Val(name='', val='1'),
    CSN1Bit(name='additional_access_technology_type', bit=4)]),
  CSN1Val(name='', val='0'),
  CSN1Ref(name='common_access_capabilities', obj=access_capabilities_struct),
  CSN1List(num=-1, list=[
    CSN1Val(name='', val='1'),
    CSN1Ref(name='additional_access_technology', obj=additional_access_technology_struct)]),
  CSN1Val(name='', val='0')])

mes_rf_capability_gsm_ie = CSN1List(name='mes_rf_capability_gsm_ie', list=[
  CSN1Bit(name='mes_rf_capability_gsm_length', bit=8),
  CSN1Ref(name='rf_capability_group', obj=rf_capability_group_struct),
  CSN1List(num=-1, list=[
    CSN1Val(name='', val='1'),
    CSN1Ref(name='additional_rf_capability_group', obj=rf_capability_group_struct)]),
  CSN1Val(name='', val='0')])

